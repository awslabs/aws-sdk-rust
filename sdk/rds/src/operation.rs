// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL
/// to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddRoleToDBCluster {
    _private: (),
}
impl AddRoleToDBCluster {
    /// Creates a new builder-style object to manufacture [`AddRoleToDBClusterInput`](crate::input::AddRoleToDBClusterInput)
    pub fn builder() -> crate::input::add_role_to_db_cluster_input::Builder {
        crate::input::add_role_to_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddRoleToDBCluster {
    type Output = std::result::Result<
        crate::output::AddRoleToDBClusterOutput,
        crate::error::AddRoleToDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_role_to_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_add_role_to_db_cluster_response(response)
        }
    }
}

/// <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p>
/// <note>
/// <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddRoleToDBInstance {
    _private: (),
}
impl AddRoleToDBInstance {
    /// Creates a new builder-style object to manufacture [`AddRoleToDBInstanceInput`](crate::input::AddRoleToDBInstanceInput)
    pub fn builder() -> crate::input::add_role_to_db_instance_input::Builder {
        crate::input::add_role_to_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddRoleToDBInstance {
    type Output = std::result::Result<
        crate::output::AddRoleToDBInstanceOutput,
        crate::error::AddRoleToDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_role_to_db_instance_error(response)
        } else {
            crate::operation_deser::parse_add_role_to_db_instance_response(response)
        }
    }
}

/// <p>Adds a source identifier to an existing RDS event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddSourceIdentifierToSubscription {
    _private: (),
}
impl AddSourceIdentifierToSubscription {
    /// Creates a new builder-style object to manufacture [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
    pub fn builder() -> crate::input::add_source_identifier_to_subscription_input::Builder {
        crate::input::add_source_identifier_to_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddSourceIdentifierToSubscription {
    type Output = std::result::Result<
        crate::output::AddSourceIdentifierToSubscriptionOutput,
        crate::error::AddSourceIdentifierToSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_source_identifier_to_subscription_error(response)
        } else {
            crate::operation_deser::parse_add_source_identifier_to_subscription_response(response)
        }
    }
}

/// <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p>
/// <p>For an overview on tagging Amazon RDS resources,
/// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_resource_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_resource_response(response)
        }
    }
}

/// <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ApplyPendingMaintenanceAction {
    _private: (),
}
impl ApplyPendingMaintenanceAction {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
    pub fn builder() -> crate::input::apply_pending_maintenance_action_input::Builder {
        crate::input::apply_pending_maintenance_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ApplyPendingMaintenanceAction {
    type Output = std::result::Result<
        crate::output::ApplyPendingMaintenanceActionOutput,
        crate::error::ApplyPendingMaintenanceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_apply_pending_maintenance_action_error(response)
        } else {
            crate::operation_deser::parse_apply_pending_maintenance_action_response(response)
        }
    }
}

/// <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security
/// groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC
/// instances. Second, IP ranges are available if the application accessing your database is running on the Internet.
/// Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId
/// and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p>
/// <note>
/// <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in
/// another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p>
/// </note>
/// <p>For an overview of CIDR ranges, go to the
/// <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AuthorizeDBSecurityGroupIngress {
    _private: (),
}
impl AuthorizeDBSecurityGroupIngress {
    /// Creates a new builder-style object to manufacture [`AuthorizeDBSecurityGroupIngressInput`](crate::input::AuthorizeDBSecurityGroupIngressInput)
    pub fn builder() -> crate::input::authorize_db_security_group_ingress_input::Builder {
        crate::input::authorize_db_security_group_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AuthorizeDBSecurityGroupIngress {
    type Output = std::result::Result<
        crate::output::AuthorizeDBSecurityGroupIngressOutput,
        crate::error::AuthorizeDBSecurityGroupIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_authorize_db_security_group_ingress_error(response)
        } else {
            crate::operation_deser::parse_authorize_db_security_group_ingress_response(response)
        }
    }
}

/// <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p>
/// <p>For more information on backtracking, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html">
/// Backtracking an Aurora DB Cluster</a> in the
/// <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora MySQL DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BacktrackDBCluster {
    _private: (),
}
impl BacktrackDBCluster {
    /// Creates a new builder-style object to manufacture [`BacktrackDBClusterInput`](crate::input::BacktrackDBClusterInput)
    pub fn builder() -> crate::input::backtrack_db_cluster_input::Builder {
        crate::input::backtrack_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BacktrackDBCluster {
    type Output = std::result::Result<
        crate::output::BacktrackDBClusterOutput,
        crate::error::BacktrackDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_backtrack_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_backtrack_db_cluster_response(response)
        }
    }
}

/// <p>Cancels an export task in progress that is exporting a snapshot to Amazon S3.
/// Any data that has already been written to the S3 bucket isn't removed.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelExportTask {
    _private: (),
}
impl CancelExportTask {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
    pub fn builder() -> crate::input::cancel_export_task_input::Builder {
        crate::input::cancel_export_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelExportTask {
    type Output = std::result::Result<
        crate::output::CancelExportTaskOutput,
        crate::error::CancelExportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_export_task_error(response)
        } else {
            crate::operation_deser::parse_cancel_export_task_response(response)
        }
    }
}

/// <p>Copies the specified DB cluster parameter group.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBClusterParameterGroup {
    _private: (),
}
impl CopyDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`CopyDBClusterParameterGroupInput`](crate::input::CopyDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_cluster_parameter_group_input::Builder {
        crate::input::copy_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::CopyDBClusterParameterGroupOutput,
        crate::error::CopyDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_copy_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Copies a snapshot of a DB cluster.</p>
/// <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code>
/// must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
/// <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action
/// is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region,
/// you must provide the following values:</p>     
/// <ul>
/// <li>
/// <p>
/// <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to
/// encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p>
/// </li>
/// <li>
/// <p>
/// <code>PreSignedUrl</code> -  A URL that contains a Signature Version 4 signed request for the
/// <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from.
/// The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the
/// source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p>
/// <p>The pre-signed URL request must contain the following parameter values:</p>
/// <ul>
/// <li>
/// <p>
/// <code>KmsKeyId</code> - The AWS KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB
/// cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
/// action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p>
/// </li>
/// <li>
/// <p>
/// <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p>
/// </li>
/// <li>
/// <p>
/// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
/// snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example,
/// if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
/// looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
/// </li>
/// </ul>
/// <p>To learn how to generate a Signature Version 4 signed request, see
/// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
/// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
/// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
/// Signature Version 4 Signing Process</a>.</p>
/// <note>
/// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
/// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
/// request for the operation that can be executed in the source AWS Region.</p>
/// </note>
/// </li>
/// <li>
/// <p>
/// <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p>
/// </li>
/// <li>
/// <p>
/// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied.
/// This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p>
/// </li>
/// </ul>
/// <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified
/// by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p>
/// <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html">
/// Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBClusterSnapshot {
    _private: (),
}
impl CopyDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`CopyDBClusterSnapshotInput`](crate::input::CopyDBClusterSnapshotInput)
    pub fn builder() -> crate::input::copy_db_cluster_snapshot_input::Builder {
        crate::input::copy_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::CopyDBClusterSnapshotOutput,
        crate::error::CopyDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_copy_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>Copies the specified DB parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBParameterGroup {
    _private: (),
}
impl CopyDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`CopyDBParameterGroupInput`](crate::input::CopyDBParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_parameter_group_input::Builder {
        crate::input::copy_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBParameterGroup {
    type Output = std::result::Result<
        crate::output::CopyDBParameterGroupOutput,
        crate::error::CopyDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_copy_db_parameter_group_response(response)
        }
    }
}

/// <p>Copies the specified DB snapshot. The source DB snapshot must be in the <code>available</code> state.</p>
/// <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region
/// where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the
/// DB snapshot copy. </p>     
/// <p>For more information about copying snapshots, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyDBSnapshot {
    _private: (),
}
impl CopyDBSnapshot {
    /// Creates a new builder-style object to manufacture [`CopyDBSnapshotInput`](crate::input::CopyDBSnapshotInput)
    pub fn builder() -> crate::input::copy_db_snapshot_input::Builder {
        crate::input::copy_db_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyDBSnapshot {
    type Output =
        std::result::Result<crate::output::CopyDBSnapshotOutput, crate::error::CopyDBSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_db_snapshot_error(response)
        } else {
            crate::operation_deser::parse_copy_db_snapshot_response(response)
        }
    }
}

/// <p>Copies the specified option group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyOptionGroup {
    _private: (),
}
impl CopyOptionGroup {
    /// Creates a new builder-style object to manufacture [`CopyOptionGroupInput`](crate::input::CopyOptionGroupInput)
    pub fn builder() -> crate::input::copy_option_group_input::Builder {
        crate::input::copy_option_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyOptionGroup {
    type Output = std::result::Result<
        crate::output::CopyOptionGroupOutput,
        crate::error::CopyOptionGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_option_group_error(response)
        } else {
            crate::operation_deser::parse_copy_option_group_response(response)
        }
    }
}

/// <p>Creates a custom Availability Zone (AZ).</p>
/// <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
/// <p>For more information about RDS on VMware, see the
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
/// RDS on VMware User Guide.</a>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCustomAvailabilityZone {
    _private: (),
}
impl CreateCustomAvailabilityZone {
    /// Creates a new builder-style object to manufacture [`CreateCustomAvailabilityZoneInput`](crate::input::CreateCustomAvailabilityZoneInput)
    pub fn builder() -> crate::input::create_custom_availability_zone_input::Builder {
        crate::input::create_custom_availability_zone_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCustomAvailabilityZone {
    type Output = std::result::Result<
        crate::output::CreateCustomAvailabilityZoneOutput,
        crate::error::CreateCustomAvailabilityZoneError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_custom_availability_zone_error(response)
        } else {
            crate::operation_deser::parse_create_custom_availability_zone_response(response)
        }
    }
}

/// <p>Creates a new Amazon Aurora DB cluster.</p>
/// <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB
/// cluster as a read replica of another DB cluster or Amazon RDS MySQL DB instance. For
/// cross-region replication where the DB cluster identified by
/// <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the
/// <code>PreSignedUrl</code> parameter.</p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBCluster {
    _private: (),
}
impl CreateDBCluster {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterInput`](crate::input::CreateDBClusterInput)
    pub fn builder() -> crate::input::create_db_cluster_input::Builder {
        crate::input::create_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBCluster {
    type Output = std::result::Result<
        crate::output::CreateDBClusterOutput,
        crate::error::CreateDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_response(response)
        }
    }
}

/// <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterEndpoint {
    _private: (),
}
impl CreateDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterEndpointInput`](crate::input::CreateDBClusterEndpointInput)
    pub fn builder() -> crate::input::create_db_cluster_endpoint_input::Builder {
        crate::input::create_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::CreateDBClusterEndpointOutput,
        crate::error::CreateDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_endpoint_response(response)
        }
    }
}

/// <p>Creates a new DB cluster parameter group.</p>
/// <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p>
/// <p>
/// A DB cluster parameter group is initially created with the default parameters for the
/// database engine used by instances in the DB cluster. To provide custom values for any of the
/// parameters, you must modify the group after creating it using
/// <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to
/// associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate
/// a new DB cluster parameter group with a running DB cluster, you need to reboot the DB
/// instances in the DB cluster without failover for the new DB cluster parameter group and
/// associated settings to take effect.
/// </p>
/// <important>
/// <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
/// before creating your first DB cluster
/// that uses that DB cluster parameter group as the default parameter
/// group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter
/// group is used as the default for a new DB cluster. This is especially important for parameters
/// that are critical when creating the default database for a DB cluster, such as the character set
/// for the default database defined by the <code>character_set_database</code> parameter. You can use the
/// <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
/// <code>DescribeDBClusterParameters</code> action to verify
/// that your DB cluster parameter group has been created or modified.</p>
/// </important>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterParameterGroup {
    _private: (),
}
impl CreateDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterParameterGroupInput`](crate::input::CreateDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::create_db_cluster_parameter_group_input::Builder {
        crate::input::create_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::CreateDBClusterParameterGroupOutput,
        crate::error::CreateDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterSnapshot {
    _private: (),
}
impl CreateDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterSnapshotInput`](crate::input::CreateDBClusterSnapshotInput)
    pub fn builder() -> crate::input::create_db_cluster_snapshot_input::Builder {
        crate::input::create_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::CreateDBClusterSnapshotOutput,
        crate::error::CreateDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_create_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>Creates a new DB instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBInstance {
    _private: (),
}
impl CreateDBInstance {
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceInput`](crate::input::CreateDBInstanceInput)
    pub fn builder() -> crate::input::create_db_instance_input::Builder {
        crate::input::create_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBInstance {
    type Output = std::result::Result<
        crate::output::CreateDBInstanceOutput,
        crate::error::CreateDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_instance_error(response)
        } else {
            crate::operation_deser::parse_create_db_instance_response(response)
        }
    }
}

/// <p>Creates a new DB instance that acts as a read replica for an existing source DB
/// instance. You can create a read replica for a DB instance running MySQL, MariaDB,
/// Oracle, PostgreSQL, or SQL Server. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read
/// Replicas</a> in the <i>Amazon RDS User Guide</i>. </p>
/// <p>Amazon Aurora doesn't support this action. Call the <code>CreateDBInstance</code>
/// action to create a DB instance for an Aurora DB cluster.</p>
/// <p>All read replica DB instances are created with backups disabled. All other DB
/// instance attributes (including DB security groups and DB parameter groups) are inherited
/// from the source DB instance, except as specified.</p>
/// <important>
/// <p>Your source DB instance must have backup retention enabled.
/// </p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBInstanceReadReplica {
    _private: (),
}
impl CreateDBInstanceReadReplica {
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceReadReplicaInput`](crate::input::CreateDBInstanceReadReplicaInput)
    pub fn builder() -> crate::input::create_db_instance_read_replica_input::Builder {
        crate::input::create_db_instance_read_replica_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBInstanceReadReplica {
    type Output = std::result::Result<
        crate::output::CreateDBInstanceReadReplicaOutput,
        crate::error::CreateDBInstanceReadReplicaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_instance_read_replica_error(response)
        } else {
            crate::operation_deser::parse_create_db_instance_read_replica_response(response)
        }
    }
}

/// <p>Creates a new DB parameter group.</p>
/// <p>
/// A DB parameter group is initially created with the default parameters for the
/// database engine used by the DB instance. To provide custom values for any of the
/// parameters, you must modify the group after creating it using
/// <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to
/// associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate
/// a new DB parameter group with a running DB instance, you need to reboot the DB
/// instance without failover for the new DB parameter group and associated settings to take effect.
/// </p>
/// <important>
/// <p>After you create a DB parameter group, you should wait at least 5 minutes
/// before creating your first DB instance that uses that DB parameter group as the default parameter
/// group. This allows Amazon RDS to fully complete the create action before the parameter
/// group is used as the default for a new DB instance. This is especially important for parameters
/// that are critical when creating the default database for a DB instance, such as the character set
/// for the default database defined by the <code>character_set_database</code> parameter. You can use the
/// <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
/// <i>DescribeDBParameters</i> command to verify
/// that your DB parameter group has been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBParameterGroup {
    _private: (),
}
impl CreateDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`CreateDBParameterGroupInput`](crate::input::CreateDBParameterGroupInput)
    pub fn builder() -> crate::input::create_db_parameter_group_input::Builder {
        crate::input::create_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBParameterGroup {
    type Output = std::result::Result<
        crate::output::CreateDBParameterGroupOutput,
        crate::error::CreateDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_parameter_group_response(response)
        }
    }
}

/// <p>Creates a new DB proxy.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBProxy {
    _private: (),
}
impl CreateDBProxy {
    /// Creates a new builder-style object to manufacture [`CreateDBProxyInput`](crate::input::CreateDBProxyInput)
    pub fn builder() -> crate::input::create_db_proxy_input::Builder {
        crate::input::create_db_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBProxy {
    type Output =
        std::result::Result<crate::output::CreateDBProxyOutput, crate::error::CreateDBProxyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_proxy_error(response)
        } else {
            crate::operation_deser::parse_create_db_proxy_response(response)
        }
    }
}

/// <p>
/// Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are associated with Aurora DB clusters.
/// You can use DB proxy endpoints to specify read/write or read-only access to the DB cluster. You can also use
/// DB proxy endpoints to access a DB proxy through a different VPC than the proxy's default VPC.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBProxyEndpoint {
    _private: (),
}
impl CreateDBProxyEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateDBProxyEndpointInput`](crate::input::CreateDBProxyEndpointInput)
    pub fn builder() -> crate::input::create_db_proxy_endpoint_input::Builder {
        crate::input::create_db_proxy_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBProxyEndpoint {
    type Output = std::result::Result<
        crate::output::CreateDBProxyEndpointOutput,
        crate::error::CreateDBProxyEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_proxy_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_db_proxy_endpoint_response(response)
        }
    }
}

/// <p>Creates a new DB security group. DB security groups control access to a DB instance.</p>
/// <note>
/// <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBSecurityGroup {
    _private: (),
}
impl CreateDBSecurityGroup {
    /// Creates a new builder-style object to manufacture [`CreateDBSecurityGroupInput`](crate::input::CreateDBSecurityGroupInput)
    pub fn builder() -> crate::input::create_db_security_group_input::Builder {
        crate::input::create_db_security_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBSecurityGroup {
    type Output = std::result::Result<
        crate::output::CreateDBSecurityGroupOutput,
        crate::error::CreateDBSecurityGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_security_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_security_group_response(response)
        }
    }
}

/// <p>Creates a snapshot of a DB instance. The source DB instance must be in the <code>available</code> or
/// <code>storage-optimization</code> state.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBSnapshot {
    _private: (),
}
impl CreateDBSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateDBSnapshotInput`](crate::input::CreateDBSnapshotInput)
    pub fn builder() -> crate::input::create_db_snapshot_input::Builder {
        crate::input::create_db_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBSnapshot {
    type Output = std::result::Result<
        crate::output::CreateDBSnapshotOutput,
        crate::error::CreateDBSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_snapshot_error(response)
        } else {
            crate::operation_deser::parse_create_db_snapshot_response(response)
        }
    }
}

/// <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBSubnetGroup {
    _private: (),
}
impl CreateDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`CreateDBSubnetGroupInput`](crate::input::CreateDBSubnetGroupInput)
    pub fn builder() -> crate::input::create_db_subnet_group_input::Builder {
        crate::input::create_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::CreateDBSubnetGroupOutput,
        crate::error::CreateDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_create_db_subnet_group_response(response)
        }
    }
}

/// <p>Creates an RDS event notification subscription. This action requires a topic Amazon
/// Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API.
/// To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the
/// topic. The ARN is displayed in the SNS console.</p>
/// <p>You can specify the type of source (<code>SourceType</code>) that you want to be
/// notified of and provide a list of RDS sources (<code>SourceIds</code>) that triggers the
/// events. You can also provide a list of event categories (<code>EventCategories</code>)
/// for events that you want to be notified of. For example, you can specify
/// <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code> =
/// <code>mydbinstance1</code>, <code>mydbinstance2</code> and
/// <code>EventCategories</code> = <code>Availability</code>,
/// <code>Backup</code>.</p>
/// <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType</code> = <code>db-instance</code>
/// and <code>SourceIdentifier</code> = <code>myDBInstance1</code>, you are notified of all the <code>db-instance</code> events for
/// the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>,
/// you receive notice of the events for that source type for all your RDS sources. If you
/// don't specify either the SourceType or the <code>SourceIdentifier</code>, you are notified of events
/// generated from all RDS sources belonging to your customer account.</p>
/// <note>
/// <p>RDS event notification is only available for unencrypted SNS topics. If you specify an
/// encrypted SNS topic, event notifications aren't sent for the topic.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEventSubscription {
    _private: (),
}
impl CreateEventSubscription {
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
    pub fn builder() -> crate::input::create_event_subscription_input::Builder {
        crate::input::create_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEventSubscription {
    type Output = std::result::Result<
        crate::output::CreateEventSubscriptionOutput,
        crate::error::CreateEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_create_event_subscription_response(response)
        }
    }
}

/// <p>
/// Creates an Aurora global database
/// spread across multiple AWS Regions. The global database
/// contains a single primary cluster with read-write capability,
/// and a read-only secondary cluster that receives
/// data from the primary cluster through high-speed replication
/// performed by the Aurora storage subsystem.
/// </p>
/// <p>
/// You can create a global database that is initially empty, and then
/// add a primary cluster and a secondary cluster to it.
/// Or you can specify an existing Aurora cluster during the create operation,
/// and this cluster becomes the primary cluster of the global database.
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGlobalCluster {
    _private: (),
}
impl CreateGlobalCluster {
    /// Creates a new builder-style object to manufacture [`CreateGlobalClusterInput`](crate::input::CreateGlobalClusterInput)
    pub fn builder() -> crate::input::create_global_cluster_input::Builder {
        crate::input::create_global_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGlobalCluster {
    type Output = std::result::Result<
        crate::output::CreateGlobalClusterOutput,
        crate::error::CreateGlobalClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_global_cluster_error(response)
        } else {
            crate::operation_deser::parse_create_global_cluster_response(response)
        }
    }
}

/// <p>Creates a new option group. You can create up to 20 option groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateOptionGroup {
    _private: (),
}
impl CreateOptionGroup {
    /// Creates a new builder-style object to manufacture [`CreateOptionGroupInput`](crate::input::CreateOptionGroupInput)
    pub fn builder() -> crate::input::create_option_group_input::Builder {
        crate::input::create_option_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateOptionGroup {
    type Output = std::result::Result<
        crate::output::CreateOptionGroupOutput,
        crate::error::CreateOptionGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_option_group_error(response)
        } else {
            crate::operation_deser::parse_create_option_group_response(response)
        }
    }
}

/// <p>Deletes a custom Availability Zone (AZ).</p>
/// <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
/// <p>For more information about RDS on VMware, see the
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
/// RDS on VMware User Guide.</a>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCustomAvailabilityZone {
    _private: (),
}
impl DeleteCustomAvailabilityZone {
    /// Creates a new builder-style object to manufacture [`DeleteCustomAvailabilityZoneInput`](crate::input::DeleteCustomAvailabilityZoneInput)
    pub fn builder() -> crate::input::delete_custom_availability_zone_input::Builder {
        crate::input::delete_custom_availability_zone_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCustomAvailabilityZone {
    type Output = std::result::Result<
        crate::output::DeleteCustomAvailabilityZoneOutput,
        crate::error::DeleteCustomAvailabilityZoneError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_custom_availability_zone_error(response)
        } else {
            crate::operation_deser::parse_delete_custom_availability_zone_response(response)
        }
    }
}

/// <p>The DeleteDBCluster action deletes a previously provisioned DB cluster.
/// When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
/// Manual DB cluster snapshots of the specified DB cluster are not deleted.</p>
/// <p></p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBCluster {
    _private: (),
}
impl DeleteDBCluster {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterInput`](crate::input::DeleteDBClusterInput)
    pub fn builder() -> crate::input::delete_db_cluster_input::Builder {
        crate::input::delete_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBCluster {
    type Output = std::result::Result<
        crate::output::DeleteDBClusterOutput,
        crate::error::DeleteDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_response(response)
        }
    }
}

/// <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterEndpoint {
    _private: (),
}
impl DeleteDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterEndpointInput`](crate::input::DeleteDBClusterEndpointInput)
    pub fn builder() -> crate::input::delete_db_cluster_endpoint_input::Builder {
        crate::input::delete_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::DeleteDBClusterEndpointOutput,
        crate::error::DeleteDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_endpoint_response(response)
        }
    }
}

/// <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterParameterGroup {
    _private: (),
}
impl DeleteDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterParameterGroupInput`](crate::input::DeleteDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_cluster_parameter_group_input::Builder {
        crate::input::delete_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::DeleteDBClusterParameterGroupOutput,
        crate::error::DeleteDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p>
/// <note>
/// <p>The DB cluster snapshot must be in the <code>available</code> state to be
/// deleted.</p>
/// </note>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBClusterSnapshot {
    _private: (),
}
impl DeleteDBClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterSnapshotInput`](crate::input::DeleteDBClusterSnapshotInput)
    pub fn builder() -> crate::input::delete_db_cluster_snapshot_input::Builder {
        crate::input::delete_db_cluster_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBClusterSnapshot {
    type Output = std::result::Result<
        crate::output::DeleteDBClusterSnapshotOutput,
        crate::error::DeleteDBClusterSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_cluster_snapshot_error(response)
        } else {
            crate::operation_deser::parse_delete_db_cluster_snapshot_response(response)
        }
    }
}

/// <p>The DeleteDBInstance action deletes a previously provisioned DB instance.
/// When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered.
/// Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p>
/// <p>
/// If you request a final DB snapshot
/// the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code>
/// is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.
/// </p>
/// <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>,
/// or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p>
/// <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following
/// conditions are true:</p>
/// <ul>
/// <li>
/// <p>The DB cluster is a read replica of another Amazon Aurora DB cluster.</p>
/// </li>
/// <li>
/// <p>The DB instance is the only instance in the DB cluster.</p>
/// </li>
/// </ul>
/// <p>To delete a DB instance in this case, first call the
/// <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so
/// it's no longer a read replica. After the promotion completes, then call the
/// <code>DeleteDBInstance</code> API action to delete the final instance in the DB
/// cluster.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBInstance {
    _private: (),
}
impl DeleteDBInstance {
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceInput`](crate::input::DeleteDBInstanceInput)
    pub fn builder() -> crate::input::delete_db_instance_input::Builder {
        crate::input::delete_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBInstance {
    type Output = std::result::Result<
        crate::output::DeleteDBInstanceOutput,
        crate::error::DeleteDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_db_instance_response(response)
        }
    }
}

/// <p>Deletes automated backups using the <code>DbiResourceId</code> value of the source DB instance or the Amazon Resource Name (ARN) of the automated backups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBInstanceAutomatedBackup {
    _private: (),
}
impl DeleteDBInstanceAutomatedBackup {
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceAutomatedBackupInput`](crate::input::DeleteDBInstanceAutomatedBackupInput)
    pub fn builder() -> crate::input::delete_db_instance_automated_backup_input::Builder {
        crate::input::delete_db_instance_automated_backup_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBInstanceAutomatedBackup {
    type Output = std::result::Result<
        crate::output::DeleteDBInstanceAutomatedBackupOutput,
        crate::error::DeleteDBInstanceAutomatedBackupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_instance_automated_backup_error(response)
        } else {
            crate::operation_deser::parse_delete_db_instance_automated_backup_response(response)
        }
    }
}

/// <p>Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBParameterGroup {
    _private: (),
}
impl DeleteDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDBParameterGroupInput`](crate::input::DeleteDBParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_parameter_group_input::Builder {
        crate::input::delete_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBParameterGroup {
    type Output = std::result::Result<
        crate::output::DeleteDBParameterGroupOutput,
        crate::error::DeleteDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_parameter_group_response(response)
        }
    }
}

/// <p>Deletes an existing DB proxy.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBProxy {
    _private: (),
}
impl DeleteDBProxy {
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyInput`](crate::input::DeleteDBProxyInput)
    pub fn builder() -> crate::input::delete_db_proxy_input::Builder {
        crate::input::delete_db_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBProxy {
    type Output =
        std::result::Result<crate::output::DeleteDBProxyOutput, crate::error::DeleteDBProxyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_proxy_error(response)
        } else {
            crate::operation_deser::parse_delete_db_proxy_response(response)
        }
    }
}

/// <p>Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to access the DB proxy using the
/// endpoint that you defined. The endpoint that you delete might have provided capabilities such as read/write
/// or read-only operations, or using a different VPC than the DB proxy's default VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBProxyEndpoint {
    _private: (),
}
impl DeleteDBProxyEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyEndpointInput`](crate::input::DeleteDBProxyEndpointInput)
    pub fn builder() -> crate::input::delete_db_proxy_endpoint_input::Builder {
        crate::input::delete_db_proxy_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBProxyEndpoint {
    type Output = std::result::Result<
        crate::output::DeleteDBProxyEndpointOutput,
        crate::error::DeleteDBProxyEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_proxy_endpoint_error(response)
        } else {
            crate::operation_deser::parse_delete_db_proxy_endpoint_response(response)
        }
    }
}

/// <p>Deletes a DB security group.</p>
/// <note>
/// <p>The specified DB security group must not be associated with any DB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBSecurityGroup {
    _private: (),
}
impl DeleteDBSecurityGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDBSecurityGroupInput`](crate::input::DeleteDBSecurityGroupInput)
    pub fn builder() -> crate::input::delete_db_security_group_input::Builder {
        crate::input::delete_db_security_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBSecurityGroup {
    type Output = std::result::Result<
        crate::output::DeleteDBSecurityGroupOutput,
        crate::error::DeleteDBSecurityGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_security_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_security_group_response(response)
        }
    }
}

/// <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is
/// terminated.</p>
/// <note>
/// <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBSnapshot {
    _private: (),
}
impl DeleteDBSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteDBSnapshotInput`](crate::input::DeleteDBSnapshotInput)
    pub fn builder() -> crate::input::delete_db_snapshot_input::Builder {
        crate::input::delete_db_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBSnapshot {
    type Output = std::result::Result<
        crate::output::DeleteDBSnapshotOutput,
        crate::error::DeleteDBSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_snapshot_error(response)
        } else {
            crate::operation_deser::parse_delete_db_snapshot_response(response)
        }
    }
}

/// <p>Deletes a DB subnet group.</p>
/// <note>
/// <p>The specified database subnet group must not be associated with any DB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDBSubnetGroup {
    _private: (),
}
impl DeleteDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`DeleteDBSubnetGroupInput`](crate::input::DeleteDBSubnetGroupInput)
    pub fn builder() -> crate::input::delete_db_subnet_group_input::Builder {
        crate::input::delete_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::DeleteDBSubnetGroupOutput,
        crate::error::DeleteDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_delete_db_subnet_group_response(response)
        }
    }
}

/// <p>Deletes an RDS event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEventSubscription {
    _private: (),
}
impl DeleteEventSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
    pub fn builder() -> crate::input::delete_event_subscription_input::Builder {
        crate::input::delete_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEventSubscription {
    type Output = std::result::Result<
        crate::output::DeleteEventSubscriptionOutput,
        crate::error::DeleteEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_delete_event_subscription_response(response)
        }
    }
}

/// <p>
/// Deletes a global database cluster. The primary and secondary clusters must already be detached or
/// destroyed first.
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGlobalCluster {
    _private: (),
}
impl DeleteGlobalCluster {
    /// Creates a new builder-style object to manufacture [`DeleteGlobalClusterInput`](crate::input::DeleteGlobalClusterInput)
    pub fn builder() -> crate::input::delete_global_cluster_input::Builder {
        crate::input::delete_global_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteGlobalCluster {
    type Output = std::result::Result<
        crate::output::DeleteGlobalClusterOutput,
        crate::error::DeleteGlobalClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_global_cluster_error(response)
        } else {
            crate::operation_deser::parse_delete_global_cluster_response(response)
        }
    }
}

/// <p>Deletes the installation medium for a DB engine that requires an on-premises customer provided license,
/// such as Microsoft SQL Server.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInstallationMedia {
    _private: (),
}
impl DeleteInstallationMedia {
    /// Creates a new builder-style object to manufacture [`DeleteInstallationMediaInput`](crate::input::DeleteInstallationMediaInput)
    pub fn builder() -> crate::input::delete_installation_media_input::Builder {
        crate::input::delete_installation_media_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInstallationMedia {
    type Output = std::result::Result<
        crate::output::DeleteInstallationMediaOutput,
        crate::error::DeleteInstallationMediaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_installation_media_error(response)
        } else {
            crate::operation_deser::parse_delete_installation_media_response(response)
        }
    }
}

/// <p>Deletes an existing option group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteOptionGroup {
    _private: (),
}
impl DeleteOptionGroup {
    /// Creates a new builder-style object to manufacture [`DeleteOptionGroupInput`](crate::input::DeleteOptionGroupInput)
    pub fn builder() -> crate::input::delete_option_group_input::Builder {
        crate::input::delete_option_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteOptionGroup {
    type Output = std::result::Result<
        crate::output::DeleteOptionGroupOutput,
        crate::error::DeleteOptionGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_option_group_error(response)
        } else {
            crate::operation_deser::parse_delete_option_group_response(response)
        }
    }
}

/// <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterDBProxyTargets {
    _private: (),
}
impl DeregisterDBProxyTargets {
    /// Creates a new builder-style object to manufacture [`DeregisterDBProxyTargetsInput`](crate::input::DeregisterDBProxyTargetsInput)
    pub fn builder() -> crate::input::deregister_db_proxy_targets_input::Builder {
        crate::input::deregister_db_proxy_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterDBProxyTargets {
    type Output = std::result::Result<
        crate::output::DeregisterDBProxyTargetsOutput,
        crate::error::DeregisterDBProxyTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_db_proxy_targets_error(response)
        } else {
            crate::operation_deser::parse_deregister_db_proxy_targets_response(response)
        }
    }
}

/// <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p>
/// <p>This command doesn't take any parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAttributes {
    _private: (),
}
impl DescribeAccountAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    pub fn builder() -> crate::input::describe_account_attributes_input::Builder {
        crate::input::describe_account_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAttributes {
    type Output = std::result::Result<
        crate::output::DescribeAccountAttributesOutput,
        crate::error::DescribeAccountAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_account_attributes_response(response)
        }
    }
}

/// <p>Lists the set of CA certificates provided by Amazon RDS for this AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCertificates {
    _private: (),
}
impl DescribeCertificates {
    /// Creates a new builder-style object to manufacture [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
    pub fn builder() -> crate::input::describe_certificates_input::Builder {
        crate::input::describe_certificates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCertificates {
    type Output = std::result::Result<
        crate::output::DescribeCertificatesOutput,
        crate::error::DescribeCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_certificates_error(response)
        } else {
            crate::operation_deser::parse_describe_certificates_response(response)
        }
    }
}

/// <p>Returns information about custom Availability Zones (AZs).</p>
/// <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
/// <p>For more information about RDS on VMware, see the
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
/// RDS on VMware User Guide.</a>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCustomAvailabilityZones {
    _private: (),
}
impl DescribeCustomAvailabilityZones {
    /// Creates a new builder-style object to manufacture [`DescribeCustomAvailabilityZonesInput`](crate::input::DescribeCustomAvailabilityZonesInput)
    pub fn builder() -> crate::input::describe_custom_availability_zones_input::Builder {
        crate::input::describe_custom_availability_zones_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCustomAvailabilityZones {
    type Output = std::result::Result<
        crate::output::DescribeCustomAvailabilityZonesOutput,
        crate::error::DescribeCustomAvailabilityZonesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_custom_availability_zones_error(response)
        } else {
            crate::operation_deser::parse_describe_custom_availability_zones_response(response)
        }
    }
}

/// <p>Returns information about backtracks for a DB cluster.</p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora MySQL DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterBacktracks {
    _private: (),
}
impl DescribeDBClusterBacktracks {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterBacktracksInput`](crate::input::DescribeDBClusterBacktracksInput)
    pub fn builder() -> crate::input::describe_db_cluster_backtracks_input::Builder {
        crate::input::describe_db_cluster_backtracks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterBacktracks {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterBacktracksOutput,
        crate::error::DescribeDBClusterBacktracksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_backtracks_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_backtracks_response(response)
        }
    }
}

/// <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterEndpoints {
    _private: (),
}
impl DescribeDBClusterEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterEndpointsInput`](crate::input::DescribeDBClusterEndpointsInput)
    pub fn builder() -> crate::input::describe_db_cluster_endpoints_input::Builder {
        crate::input::describe_db_cluster_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterEndpointsOutput,
        crate::error::DescribeDBClusterEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_endpoints_response(response)
        }
    }
}

/// <p>
/// Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a
/// <code>DBClusterParameterGroupName</code> parameter is specified,
/// the list will contain only the description of the specified DB cluster parameter group.
/// </p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterParameterGroups {
    _private: (),
}
impl DescribeDBClusterParameterGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParameterGroupsInput`](crate::input::DescribeDBClusterParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameter_groups_input::Builder {
        crate::input::describe_db_cluster_parameter_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterParameterGroups {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterParameterGroupsOutput,
        crate::error::DescribeDBClusterParameterGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_parameter_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_parameter_groups_response(response)
        }
    }
}

/// <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterParameters {
    _private: (),
}
impl DescribeDBClusterParameters {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParametersInput`](crate::input::DescribeDBClusterParametersInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameters_input::Builder {
        crate::input::describe_db_cluster_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterParameters {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterParametersOutput,
        crate::error::DescribeDBClusterParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_parameters_response(response)
        }
    }
}

/// <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>         
/// </p>
/// <note>
/// <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusters {
    _private: (),
}
impl DescribeDBClusters {
    /// Creates a new builder-style object to manufacture [`DescribeDBClustersInput`](crate::input::DescribeDBClustersInput)
    pub fn builder() -> crate::input::describe_db_clusters_input::Builder {
        crate::input::describe_db_clusters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusters {
    type Output = std::result::Result<
        crate::output::DescribeDBClustersOutput,
        crate::error::DescribeDBClustersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_clusters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_clusters_response(response)
        }
    }
}

/// <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p>
/// <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code>
/// returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are
/// authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of
/// values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and
/// can be copied or restored by all AWS accounts.</p>
/// <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the
/// manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterSnapshotAttributes {
    _private: (),
}
impl DescribeDBClusterSnapshotAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotAttributesInput`](crate::input::DescribeDBClusterSnapshotAttributesInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshot_attributes_input::Builder {
        crate::input::describe_db_cluster_snapshot_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterSnapshotAttributes {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterSnapshotAttributesOutput,
        crate::error::DescribeDBClusterSnapshotAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_snapshot_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_snapshot_attributes_response(response)
        }
    }
}

/// <p>Returns information about DB cluster snapshots. This API action supports pagination.</p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBClusterSnapshots {
    _private: (),
}
impl DescribeDBClusterSnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotsInput`](crate::input::DescribeDBClusterSnapshotsInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshots_input::Builder {
        crate::input::describe_db_cluster_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBClusterSnapshots {
    type Output = std::result::Result<
        crate::output::DescribeDBClusterSnapshotsOutput,
        crate::error::DescribeDBClusterSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_cluster_snapshots_error(response)
        } else {
            crate::operation_deser::parse_describe_db_cluster_snapshots_response(response)
        }
    }
}

/// <p>Returns a list of the available DB engines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBEngineVersions {
    _private: (),
}
impl DescribeDBEngineVersions {
    /// Creates a new builder-style object to manufacture [`DescribeDBEngineVersionsInput`](crate::input::DescribeDBEngineVersionsInput)
    pub fn builder() -> crate::input::describe_db_engine_versions_input::Builder {
        crate::input::describe_db_engine_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBEngineVersions {
    type Output = std::result::Result<
        crate::output::DescribeDBEngineVersionsOutput,
        crate::error::DescribeDBEngineVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_engine_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_db_engine_versions_response(response)
        }
    }
}

/// <p>Displays backups for both current and deleted
/// instances. For example, use this operation to
/// find details about automated backups for previously deleted instances. Current instances
/// with retention periods greater than zero (0) are returned for both the
/// <code>DescribeDBInstanceAutomatedBackups</code> and
/// <code>DescribeDBInstances</code> operations.</p>
/// <p>All parameters are optional.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBInstanceAutomatedBackups {
    _private: (),
}
impl DescribeDBInstanceAutomatedBackups {
    /// Creates a new builder-style object to manufacture [`DescribeDBInstanceAutomatedBackupsInput`](crate::input::DescribeDBInstanceAutomatedBackupsInput)
    pub fn builder() -> crate::input::describe_db_instance_automated_backups_input::Builder {
        crate::input::describe_db_instance_automated_backups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBInstanceAutomatedBackups {
    type Output = std::result::Result<
        crate::output::DescribeDBInstanceAutomatedBackupsOutput,
        crate::error::DescribeDBInstanceAutomatedBackupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_instance_automated_backups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_instance_automated_backups_response(response)
        }
    }
}

/// <p>Returns information about provisioned RDS instances. This API supports pagination.</p>
/// <note>
/// <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBInstances {
    _private: (),
}
impl DescribeDBInstances {
    /// Creates a new builder-style object to manufacture [`DescribeDBInstancesInput`](crate::input::DescribeDBInstancesInput)
    pub fn builder() -> crate::input::describe_db_instances_input::Builder {
        crate::input::describe_db_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBInstances {
    type Output = std::result::Result<
        crate::output::DescribeDBInstancesOutput,
        crate::error::DescribeDBInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_db_instances_response(response)
        }
    }
}

/// <p>Returns a list of DB log files for the DB instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBLogFiles {
    _private: (),
}
impl DescribeDBLogFiles {
    /// Creates a new builder-style object to manufacture [`DescribeDBLogFilesInput`](crate::input::DescribeDBLogFilesInput)
    pub fn builder() -> crate::input::describe_db_log_files_input::Builder {
        crate::input::describe_db_log_files_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBLogFiles {
    type Output = std::result::Result<
        crate::output::DescribeDBLogFilesOutput,
        crate::error::DescribeDBLogFilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_log_files_error(response)
        } else {
            crate::operation_deser::parse_describe_db_log_files_response(response)
        }
    }
}

/// <p>
/// Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified,
/// the list will contain only the description of the specified DB parameter group.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBParameterGroups {
    _private: (),
}
impl DescribeDBParameterGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDBParameterGroupsInput`](crate::input::DescribeDBParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_parameter_groups_input::Builder {
        crate::input::describe_db_parameter_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBParameterGroups {
    type Output = std::result::Result<
        crate::output::DescribeDBParameterGroupsOutput,
        crate::error::DescribeDBParameterGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_parameter_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_parameter_groups_response(response)
        }
    }
}

/// <p>Returns the detailed parameter list for a particular DB parameter group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBParameters {
    _private: (),
}
impl DescribeDBParameters {
    /// Creates a new builder-style object to manufacture [`DescribeDBParametersInput`](crate::input::DescribeDBParametersInput)
    pub fn builder() -> crate::input::describe_db_parameters_input::Builder {
        crate::input::describe_db_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBParameters {
    type Output = std::result::Result<
        crate::output::DescribeDBParametersOutput,
        crate::error::DescribeDBParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_db_parameters_response(response)
        }
    }
}

/// <p>Returns information about DB proxies.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBProxies {
    _private: (),
}
impl DescribeDBProxies {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxiesInput`](crate::input::DescribeDBProxiesInput)
    pub fn builder() -> crate::input::describe_db_proxies_input::Builder {
        crate::input::describe_db_proxies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBProxies {
    type Output = std::result::Result<
        crate::output::DescribeDBProxiesOutput,
        crate::error::DescribeDBProxiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_proxies_error(response)
        } else {
            crate::operation_deser::parse_describe_db_proxies_response(response)
        }
    }
}

/// <p>Returns information about DB proxy endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBProxyEndpoints {
    _private: (),
}
impl DescribeDBProxyEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyEndpointsInput`](crate::input::DescribeDBProxyEndpointsInput)
    pub fn builder() -> crate::input::describe_db_proxy_endpoints_input::Builder {
        crate::input::describe_db_proxy_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBProxyEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeDBProxyEndpointsOutput,
        crate::error::DescribeDBProxyEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_proxy_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_db_proxy_endpoints_response(response)
        }
    }
}

/// <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBProxyTargetGroups {
    _private: (),
}
impl DescribeDBProxyTargetGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetGroupsInput`](crate::input::DescribeDBProxyTargetGroupsInput)
    pub fn builder() -> crate::input::describe_db_proxy_target_groups_input::Builder {
        crate::input::describe_db_proxy_target_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBProxyTargetGroups {
    type Output = std::result::Result<
        crate::output::DescribeDBProxyTargetGroupsOutput,
        crate::error::DescribeDBProxyTargetGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_proxy_target_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_proxy_target_groups_response(response)
        }
    }
}

/// <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBProxyTargets {
    _private: (),
}
impl DescribeDBProxyTargets {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetsInput`](crate::input::DescribeDBProxyTargetsInput)
    pub fn builder() -> crate::input::describe_db_proxy_targets_input::Builder {
        crate::input::describe_db_proxy_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBProxyTargets {
    type Output = std::result::Result<
        crate::output::DescribeDBProxyTargetsOutput,
        crate::error::DescribeDBProxyTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_proxy_targets_error(response)
        } else {
            crate::operation_deser::parse_describe_db_proxy_targets_response(response)
        }
    }
}

/// <p>
/// Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified,
/// the list will contain only the descriptions of the specified DB security group.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBSecurityGroups {
    _private: (),
}
impl DescribeDBSecurityGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDBSecurityGroupsInput`](crate::input::DescribeDBSecurityGroupsInput)
    pub fn builder() -> crate::input::describe_db_security_groups_input::Builder {
        crate::input::describe_db_security_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBSecurityGroups {
    type Output = std::result::Result<
        crate::output::DescribeDBSecurityGroupsOutput,
        crate::error::DescribeDBSecurityGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_security_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_security_groups_response(response)
        }
    }
}

/// <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p>
/// <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code>
/// returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are
/// authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of
/// values for the <code>restore</code> attribute, then the manual DB snapshot is public and
/// can be copied or restored by all AWS accounts.</p>
/// <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the
/// manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBSnapshotAttributes {
    _private: (),
}
impl DescribeDBSnapshotAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotAttributesInput`](crate::input::DescribeDBSnapshotAttributesInput)
    pub fn builder() -> crate::input::describe_db_snapshot_attributes_input::Builder {
        crate::input::describe_db_snapshot_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBSnapshotAttributes {
    type Output = std::result::Result<
        crate::output::DescribeDBSnapshotAttributesOutput,
        crate::error::DescribeDBSnapshotAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_snapshot_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_db_snapshot_attributes_response(response)
        }
    }
}

/// <p>Returns information about DB snapshots. This API action supports pagination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBSnapshots {
    _private: (),
}
impl DescribeDBSnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotsInput`](crate::input::DescribeDBSnapshotsInput)
    pub fn builder() -> crate::input::describe_db_snapshots_input::Builder {
        crate::input::describe_db_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBSnapshots {
    type Output = std::result::Result<
        crate::output::DescribeDBSnapshotsOutput,
        crate::error::DescribeDBSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_snapshots_error(response)
        } else {
            crate::operation_deser::parse_describe_db_snapshots_response(response)
        }
    }
}

/// <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p>
/// <p>For an overview of CIDR ranges, go to the
/// <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBSubnetGroups {
    _private: (),
}
impl DescribeDBSubnetGroups {
    /// Creates a new builder-style object to manufacture [`DescribeDBSubnetGroupsInput`](crate::input::DescribeDBSubnetGroupsInput)
    pub fn builder() -> crate::input::describe_db_subnet_groups_input::Builder {
        crate::input::describe_db_subnet_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDBSubnetGroups {
    type Output = std::result::Result<
        crate::output::DescribeDBSubnetGroupsOutput,
        crate::error::DescribeDBSubnetGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_db_subnet_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_db_subnet_groups_response(response)
        }
    }
}

/// <p>Returns the default engine and system parameter information for the cluster database engine.</p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngineDefaultClusterParameters {
    _private: (),
}
impl DescribeEngineDefaultClusterParameters {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_cluster_parameters_input::Builder {
        crate::input::describe_engine_default_cluster_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEngineDefaultClusterParameters {
    type Output = std::result::Result<
        crate::output::DescribeEngineDefaultClusterParametersOutput,
        crate::error::DescribeEngineDefaultClusterParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_engine_default_cluster_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_engine_default_cluster_parameters_response(
                response,
            )
        }
    }
}

/// <p>Returns the default engine and system parameter information for the specified database engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngineDefaultParameters {
    _private: (),
}
impl DescribeEngineDefaultParameters {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_parameters_input::Builder {
        crate::input::describe_engine_default_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEngineDefaultParameters {
    type Output = std::result::Result<
        crate::output::DescribeEngineDefaultParametersOutput,
        crate::error::DescribeEngineDefaultParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_engine_default_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_engine_default_parameters_response(response)
        }
    }
}

/// <p>Displays a list of categories for all event source types, or, if specified, for a specified source type.
/// You can see a list of the event categories and source types  
/// in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">
/// Events</a> in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventCategories {
    _private: (),
}
impl DescribeEventCategories {
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
    pub fn builder() -> crate::input::describe_event_categories_input::Builder {
        crate::input::describe_event_categories_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventCategories {
    type Output = std::result::Result<
        crate::output::DescribeEventCategoriesOutput,
        crate::error::DescribeEventCategoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_categories_error(response)
        } else {
            crate::operation_deser::parse_describe_event_categories_response(response)
        }
    }
}

/// <p>Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots for the past 14 days.
/// Events specific to a particular DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots group can be
/// obtained by providing the name as a parameter.</p>
/// <note>
/// <p>By default, the past hour of events are returned.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEvents {
    _private: (),
}
impl DescribeEvents {
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    pub fn builder() -> crate::input::describe_events_input::Builder {
        crate::input::describe_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEvents {
    type Output =
        std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_events_error(response)
        } else {
            crate::operation_deser::parse_describe_events_response(response)
        }
    }
}

/// <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes
/// <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p>
/// <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventSubscriptions {
    _private: (),
}
impl DescribeEventSubscriptions {
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
    pub fn builder() -> crate::input::describe_event_subscriptions_input::Builder {
        crate::input::describe_event_subscriptions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventSubscriptions {
    type Output = std::result::Result<
        crate::output::DescribeEventSubscriptionsOutput,
        crate::error::DescribeEventSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_subscriptions_error(response)
        } else {
            crate::operation_deser::parse_describe_event_subscriptions_response(response)
        }
    }
}

/// <p>Returns information about a snapshot export to Amazon S3. This API operation supports
/// pagination. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExportTasks {
    _private: (),
}
impl DescribeExportTasks {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
    pub fn builder() -> crate::input::describe_export_tasks_input::Builder {
        crate::input::describe_export_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExportTasks {
    type Output = std::result::Result<
        crate::output::DescribeExportTasksOutput,
        crate::error::DescribeExportTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_export_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_export_tasks_response(response)
        }
    }
}

/// <p>
/// Returns information about Aurora global database clusters. This API supports pagination.
/// </p>
/// <p>
/// For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the
/// <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeGlobalClusters {
    _private: (),
}
impl DescribeGlobalClusters {
    /// Creates a new builder-style object to manufacture [`DescribeGlobalClustersInput`](crate::input::DescribeGlobalClustersInput)
    pub fn builder() -> crate::input::describe_global_clusters_input::Builder {
        crate::input::describe_global_clusters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeGlobalClusters {
    type Output = std::result::Result<
        crate::output::DescribeGlobalClustersOutput,
        crate::error::DescribeGlobalClustersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_global_clusters_error(response)
        } else {
            crate::operation_deser::parse_describe_global_clusters_response(response)
        }
    }
}

/// <p>Describes the available installation media for a DB engine that requires an
/// on-premises customer provided license, such as Microsoft SQL Server.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstallationMedia {
    _private: (),
}
impl DescribeInstallationMedia {
    /// Creates a new builder-style object to manufacture [`DescribeInstallationMediaInput`](crate::input::DescribeInstallationMediaInput)
    pub fn builder() -> crate::input::describe_installation_media_input::Builder {
        crate::input::describe_installation_media_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstallationMedia {
    type Output = std::result::Result<
        crate::output::DescribeInstallationMediaOutput,
        crate::error::DescribeInstallationMediaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_installation_media_error(response)
        } else {
            crate::operation_deser::parse_describe_installation_media_response(response)
        }
    }
}

/// <p>Describes all available options.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOptionGroupOptions {
    _private: (),
}
impl DescribeOptionGroupOptions {
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupOptionsInput`](crate::input::DescribeOptionGroupOptionsInput)
    pub fn builder() -> crate::input::describe_option_group_options_input::Builder {
        crate::input::describe_option_group_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOptionGroupOptions {
    type Output = std::result::Result<
        crate::output::DescribeOptionGroupOptionsOutput,
        crate::error::DescribeOptionGroupOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_option_group_options_error(response)
        } else {
            crate::operation_deser::parse_describe_option_group_options_response(response)
        }
    }
}

/// <p>Describes the available option groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOptionGroups {
    _private: (),
}
impl DescribeOptionGroups {
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupsInput`](crate::input::DescribeOptionGroupsInput)
    pub fn builder() -> crate::input::describe_option_groups_input::Builder {
        crate::input::describe_option_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOptionGroups {
    type Output = std::result::Result<
        crate::output::DescribeOptionGroupsOutput,
        crate::error::DescribeOptionGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_option_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_option_groups_response(response)
        }
    }
}

/// <p>Returns a list of orderable DB instance options for the specified engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrderableDBInstanceOptions {
    _private: (),
}
impl DescribeOrderableDBInstanceOptions {
    /// Creates a new builder-style object to manufacture [`DescribeOrderableDBInstanceOptionsInput`](crate::input::DescribeOrderableDBInstanceOptionsInput)
    pub fn builder() -> crate::input::describe_orderable_db_instance_options_input::Builder {
        crate::input::describe_orderable_db_instance_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrderableDBInstanceOptions {
    type Output = std::result::Result<
        crate::output::DescribeOrderableDBInstanceOptionsOutput,
        crate::error::DescribeOrderableDBInstanceOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_orderable_db_instance_options_error(response)
        } else {
            crate::operation_deser::parse_describe_orderable_db_instance_options_response(response)
        }
    }
}

/// <p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePendingMaintenanceActions {
    _private: (),
}
impl DescribePendingMaintenanceActions {
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
    pub fn builder() -> crate::input::describe_pending_maintenance_actions_input::Builder {
        crate::input::describe_pending_maintenance_actions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePendingMaintenanceActions {
    type Output = std::result::Result<
        crate::output::DescribePendingMaintenanceActionsOutput,
        crate::error::DescribePendingMaintenanceActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_pending_maintenance_actions_error(response)
        } else {
            crate::operation_deser::parse_describe_pending_maintenance_actions_response(response)
        }
    }
}

/// <p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedDBInstances {
    _private: (),
}
impl DescribeReservedDBInstances {
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesInput`](crate::input::DescribeReservedDBInstancesInput)
    pub fn builder() -> crate::input::describe_reserved_db_instances_input::Builder {
        crate::input::describe_reserved_db_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedDBInstances {
    type Output = std::result::Result<
        crate::output::DescribeReservedDBInstancesOutput,
        crate::error::DescribeReservedDBInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_db_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_db_instances_response(response)
        }
    }
}

/// <p>Lists available reserved DB instance offerings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedDBInstancesOfferings {
    _private: (),
}
impl DescribeReservedDBInstancesOfferings {
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesOfferingsInput`](crate::input::DescribeReservedDBInstancesOfferingsInput)
    pub fn builder() -> crate::input::describe_reserved_db_instances_offerings_input::Builder {
        crate::input::describe_reserved_db_instances_offerings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedDBInstancesOfferings {
    type Output = std::result::Result<
        crate::output::DescribeReservedDBInstancesOfferingsOutput,
        crate::error::DescribeReservedDBInstancesOfferingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_db_instances_offerings_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_db_instances_offerings_response(
                response,
            )
        }
    }
}

/// <p>Returns a list of the source AWS Regions where the current AWS Region can create a read replica,
/// copy a DB snapshot from, or replicate automated backups from. This API action supports pagination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSourceRegions {
    _private: (),
}
impl DescribeSourceRegions {
    /// Creates a new builder-style object to manufacture [`DescribeSourceRegionsInput`](crate::input::DescribeSourceRegionsInput)
    pub fn builder() -> crate::input::describe_source_regions_input::Builder {
        crate::input::describe_source_regions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSourceRegions {
    type Output = std::result::Result<
        crate::output::DescribeSourceRegionsOutput,
        crate::error::DescribeSourceRegionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_source_regions_error(response)
        } else {
            crate::operation_deser::parse_describe_source_regions_response(response)
        }
    }
}

/// <p>You can call <code>DescribeValidDBInstanceModifications</code>
/// to learn what modifications you can make to your DB instance.
/// You can use this information when you call
/// <code>ModifyDBInstance</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeValidDBInstanceModifications {
    _private: (),
}
impl DescribeValidDBInstanceModifications {
    /// Creates a new builder-style object to manufacture [`DescribeValidDBInstanceModificationsInput`](crate::input::DescribeValidDBInstanceModificationsInput)
    pub fn builder() -> crate::input::describe_valid_db_instance_modifications_input::Builder {
        crate::input::describe_valid_db_instance_modifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeValidDBInstanceModifications {
    type Output = std::result::Result<
        crate::output::DescribeValidDBInstanceModificationsOutput,
        crate::error::DescribeValidDBInstanceModificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_valid_db_instance_modifications_error(response)
        } else {
            crate::operation_deser::parse_describe_valid_db_instance_modifications_response(
                response,
            )
        }
    }
}

/// <p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DownloadDBLogFilePortion {
    _private: (),
}
impl DownloadDBLogFilePortion {
    /// Creates a new builder-style object to manufacture [`DownloadDBLogFilePortionInput`](crate::input::DownloadDBLogFilePortionInput)
    pub fn builder() -> crate::input::download_db_log_file_portion_input::Builder {
        crate::input::download_db_log_file_portion_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DownloadDBLogFilePortion {
    type Output = std::result::Result<
        crate::output::DownloadDBLogFilePortionOutput,
        crate::error::DownloadDBLogFilePortionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_download_db_log_file_portion_error(response)
        } else {
            crate::operation_deser::parse_download_db_log_file_portion_response(response)
        }
    }
}

/// <p>Forces a failover for a DB cluster.</p>
/// <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances)
/// in the DB cluster to be the primary instance (the cluster writer).</p>
/// <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists,
/// when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing.
/// Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing
/// connections that use those endpoint addresses when the failover is complete.</p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FailoverDBCluster {
    _private: (),
}
impl FailoverDBCluster {
    /// Creates a new builder-style object to manufacture [`FailoverDBClusterInput`](crate::input::FailoverDBClusterInput)
    pub fn builder() -> crate::input::failover_db_cluster_input::Builder {
        crate::input::failover_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for FailoverDBCluster {
    type Output = std::result::Result<
        crate::output::FailoverDBClusterOutput,
        crate::error::FailoverDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_failover_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_failover_db_cluster_response(response)
        }
    }
}

/// <p>Initiates the failover process for an Aurora global database (<a>GlobalCluster</a>).</p>
/// <p>A failover for an Aurora global database promotes one of secondary read-only DB clusters to be
/// the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words,
/// the role of the current primary DB cluster and the selected (target) DB cluster are switched. The selected
/// secondary DB cluster assumes full read/write capabilities for the Aurora global database.</p>
/// <p>For more information about failing over an Amazon Aurora global database, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Managed planned failover for Amazon Aurora global
/// databases</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action applies to <a>GlobalCluster</a> (Aurora global databases) only. Use this action only on
/// healthy Aurora global databases with running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios or to
/// reconfigure your Aurora global database topology.
/// </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FailoverGlobalCluster {
    _private: (),
}
impl FailoverGlobalCluster {
    /// Creates a new builder-style object to manufacture [`FailoverGlobalClusterInput`](crate::input::FailoverGlobalClusterInput)
    pub fn builder() -> crate::input::failover_global_cluster_input::Builder {
        crate::input::failover_global_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for FailoverGlobalCluster {
    type Output = std::result::Result<
        crate::output::FailoverGlobalClusterOutput,
        crate::error::FailoverGlobalClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_failover_global_cluster_error(response)
        } else {
            crate::operation_deser::parse_failover_global_cluster_response(response)
        }
    }
}

/// <p>Imports the installation media for a DB engine that requires an on-premises
/// customer provided license, such as SQL Server.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportInstallationMedia {
    _private: (),
}
impl ImportInstallationMedia {
    /// Creates a new builder-style object to manufacture [`ImportInstallationMediaInput`](crate::input::ImportInstallationMediaInput)
    pub fn builder() -> crate::input::import_installation_media_input::Builder {
        crate::input::import_installation_media_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportInstallationMedia {
    type Output = std::result::Result<
        crate::output::ImportInstallationMediaOutput,
        crate::error::ImportInstallationMediaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_installation_media_error(response)
        } else {
            crate::operation_deser::parse_import_installation_media_response(response)
        }
    }
}

/// <p>Lists all tags on an Amazon RDS resource.</p>
/// <p>For an overview on tagging an Amazon RDS resource,
/// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
/// in the <i>Amazon RDS User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS)
/// certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p>
/// <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB
/// instances that is different from the default certificate provided by RDS. You can also
/// use this operation to remove the override, so that new DB instances use the default
/// certificate provided by RDS.</p>   
/// <p>You might need to override the default certificate in the following situations:</p>
/// <ul>
/// <li>
/// <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet
/// the RDS default CA certificate for the specified AWS Region.</p>
/// </li>
/// <li>
/// <p>RDS has already moved to a new default CA certificate for the specified AWS
/// Region, but you are still in the process of supporting the new CA certificate.
/// In this case, you temporarily need additional time to finish your application
/// changes.</p>
/// </li>
/// </ul>
/// <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
/// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p>
/// <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
/// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyCertificates {
    _private: (),
}
impl ModifyCertificates {
    /// Creates a new builder-style object to manufacture [`ModifyCertificatesInput`](crate::input::ModifyCertificatesInput)
    pub fn builder() -> crate::input::modify_certificates_input::Builder {
        crate::input::modify_certificates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyCertificates {
    type Output = std::result::Result<
        crate::output::ModifyCertificatesOutput,
        crate::error::ModifyCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_certificates_error(response)
        } else {
            crate::operation_deser::parse_modify_certificates_response(response)
        }
    }
}

/// <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p>
/// <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale
/// fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code>
/// to set the capacity explicitly.</p>
/// <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale
/// the DB cluster based on the cooldown period for scaling up and the cooldown period
/// for scaling down.</p>
/// <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the
/// <i>Amazon Aurora User Guide</i>.</p>
/// <important>
/// <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that
/// prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points,
/// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
/// Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
/// </important>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyCurrentDBClusterCapacity {
    _private: (),
}
impl ModifyCurrentDBClusterCapacity {
    /// Creates a new builder-style object to manufacture [`ModifyCurrentDBClusterCapacityInput`](crate::input::ModifyCurrentDBClusterCapacityInput)
    pub fn builder() -> crate::input::modify_current_db_cluster_capacity_input::Builder {
        crate::input::modify_current_db_cluster_capacity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyCurrentDBClusterCapacity {
    type Output = std::result::Result<
        crate::output::ModifyCurrentDBClusterCapacityOutput,
        crate::error::ModifyCurrentDBClusterCapacityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_current_db_cluster_capacity_error(response)
        } else {
            crate::operation_deser::parse_modify_current_db_cluster_capacity_response(response)
        }
    }
}

/// <p>Modify a setting for an Amazon Aurora DB cluster.
/// You can change one
/// or more database configuration parameters by specifying these parameters and the new values in the
/// request. For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBCluster {
    _private: (),
}
impl ModifyDBCluster {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterInput`](crate::input::ModifyDBClusterInput)
    pub fn builder() -> crate::input::modify_db_cluster_input::Builder {
        crate::input::modify_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBCluster {
    type Output = std::result::Result<
        crate::output::ModifyDBClusterOutput,
        crate::error::ModifyDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_response(response)
        }
    }
}

/// <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterEndpoint {
    _private: (),
}
impl ModifyDBClusterEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterEndpointInput`](crate::input::ModifyDBClusterEndpointInput)
    pub fn builder() -> crate::input::modify_db_cluster_endpoint_input::Builder {
        crate::input::modify_db_cluster_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterEndpoint {
    type Output = std::result::Result<
        crate::output::ModifyDBClusterEndpointOutput,
        crate::error::ModifyDBClusterEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_endpoint_response(response)
        }
    }
}

/// <p>
/// Modifies the parameters of a DB cluster parameter group. To modify more than one parameter,
/// submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>,
/// and <code>ApplyMethod</code>. A maximum of 20
/// parameters can be modified in a single request.
/// </p>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <important>
/// <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
/// before creating your first DB cluster that uses that DB cluster parameter group as the default parameter
/// group. This allows Amazon RDS to fully complete the create action before the parameter
/// group is used as the default for a new DB cluster. This is especially important for parameters
/// that are critical when creating the default database for a DB cluster, such as the character set
/// for the default database defined by the <code>character_set_database</code> parameter. You can use the
/// <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
/// <code>DescribeDBClusterParameters</code> action to verify
/// that your DB cluster parameter group has been created or modified.</p>
/// <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora
/// applies the update immediately. The cluster restart might interrupt your workload. In that case,
/// your application must reopen any connections and retry any transactions that were active
/// when the parameter changes took effect.</p>
/// </important>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterParameterGroup {
    _private: (),
}
impl ModifyDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterParameterGroupInput`](crate::input::ModifyDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_cluster_parameter_group_input::Builder {
        crate::input::modify_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::ModifyDBClusterParameterGroupOutput,
        crate::error::ModifyDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p>
/// <p>To share a manual DB cluster snapshot with other AWS accounts, specify
/// <code>restore</code> as the <code>AttributeName</code> and use the
/// <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are
/// authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to
/// make the manual DB cluster snapshot public, which means that it can be copied or
/// restored by all AWS accounts.</p>
/// <note>
/// <p>Don't add the <code>all</code> value for any manual DB cluster snapshots
/// that contain private information that you don't want available to all AWS
/// accounts.</p>
/// </note>
/// <p>If a manual DB cluster snapshot is encrypted, it can be shared, but only by
/// specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code>
/// parameter. You can't use <code>all</code> as a value for that parameter in this
/// case.</p>
/// <p>To view which AWS accounts have access to copy or restore a manual DB cluster
/// snapshot, or whether a manual DB cluster snapshot is public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action. The accounts are
/// returned as values for the <code>restore</code> attribute.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBClusterSnapshotAttribute {
    _private: (),
}
impl ModifyDBClusterSnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterSnapshotAttributeInput`](crate::input::ModifyDBClusterSnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_db_cluster_snapshot_attribute_input::Builder {
        crate::input::modify_db_cluster_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBClusterSnapshotAttribute {
    type Output = std::result::Result<
        crate::output::ModifyDBClusterSnapshotAttributeOutput,
        crate::error::ModifyDBClusterSnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_cluster_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_db_cluster_snapshot_attribute_response(response)
        }
    }
}

/// <p>Modifies settings for a DB instance.
/// You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
/// To learn what modifications you can make to your DB instance,
/// call <code>DescribeValidDBInstanceModifications</code>
/// before you call <code>ModifyDBInstance</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBInstance {
    _private: (),
}
impl ModifyDBInstance {
    /// Creates a new builder-style object to manufacture [`ModifyDBInstanceInput`](crate::input::ModifyDBInstanceInput)
    pub fn builder() -> crate::input::modify_db_instance_input::Builder {
        crate::input::modify_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBInstance {
    type Output = std::result::Result<
        crate::output::ModifyDBInstanceOutput,
        crate::error::ModifyDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_instance_error(response)
        } else {
            crate::operation_deser::parse_modify_db_instance_response(response)
        }
    }
}

/// <p>
/// Modifies the parameters of a DB parameter group. To modify more than one parameter,
/// submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and
/// <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.
/// </p>
/// <important>
/// <p>After you modify a DB parameter group, you should wait at least 5 minutes
/// before creating your first DB instance that uses that DB parameter group as the default parameter
/// group. This allows Amazon RDS to fully complete the modify action before the parameter
/// group is used as the default for a new DB instance. This is especially important for parameters
/// that are critical when creating the default database for a DB instance, such as the character set
/// for the default database defined by the <code>character_set_database</code> parameter. You can use the
/// <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
/// <i>DescribeDBParameters</i> command to verify
/// that your DB parameter group has been created or modified.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBParameterGroup {
    _private: (),
}
impl ModifyDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDBParameterGroupInput`](crate::input::ModifyDBParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_parameter_group_input::Builder {
        crate::input::modify_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBParameterGroup {
    type Output = std::result::Result<
        crate::output::ModifyDBParameterGroupOutput,
        crate::error::ModifyDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_parameter_group_response(response)
        }
    }
}

/// <p>Changes the settings for an existing DB proxy.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBProxy {
    _private: (),
}
impl ModifyDBProxy {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyInput`](crate::input::ModifyDBProxyInput)
    pub fn builder() -> crate::input::modify_db_proxy_input::Builder {
        crate::input::modify_db_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBProxy {
    type Output =
        std::result::Result<crate::output::ModifyDBProxyOutput, crate::error::ModifyDBProxyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_proxy_error(response)
        } else {
            crate::operation_deser::parse_modify_db_proxy_response(response)
        }
    }
}

/// <p>Changes the settings for an existing DB proxy endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBProxyEndpoint {
    _private: (),
}
impl ModifyDBProxyEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyEndpointInput`](crate::input::ModifyDBProxyEndpointInput)
    pub fn builder() -> crate::input::modify_db_proxy_endpoint_input::Builder {
        crate::input::modify_db_proxy_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBProxyEndpoint {
    type Output = std::result::Result<
        crate::output::ModifyDBProxyEndpointOutput,
        crate::error::ModifyDBProxyEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_proxy_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_db_proxy_endpoint_response(response)
        }
    }
}

/// <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBProxyTargetGroup {
    _private: (),
}
impl ModifyDBProxyTargetGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyTargetGroupInput`](crate::input::ModifyDBProxyTargetGroupInput)
    pub fn builder() -> crate::input::modify_db_proxy_target_group_input::Builder {
        crate::input::modify_db_proxy_target_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBProxyTargetGroup {
    type Output = std::result::Result<
        crate::output::ModifyDBProxyTargetGroupOutput,
        crate::error::ModifyDBProxyTargetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_proxy_target_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_proxy_target_group_response(response)
        }
    }
}

/// <p>Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted
/// or unencrypted, but not shared or public.
/// </p>
/// <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBSnapshot {
    _private: (),
}
impl ModifyDBSnapshot {
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotInput`](crate::input::ModifyDBSnapshotInput)
    pub fn builder() -> crate::input::modify_db_snapshot_input::Builder {
        crate::input::modify_db_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBSnapshot {
    type Output = std::result::Result<
        crate::output::ModifyDBSnapshotOutput,
        crate::error::ModifyDBSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_snapshot_error(response)
        } else {
            crate::operation_deser::parse_modify_db_snapshot_response(response)
        }
    }
}

/// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p>
/// <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code>
/// as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add
/// a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot.
/// Uses the value <code>all</code> to make the manual DB snapshot public, which means it
/// can be copied or restored by all AWS accounts.</p>
/// <note>
/// <p>Don't add the <code>all</code> value for any manual DB snapshots that
/// contain private information that you don't want available to all AWS
/// accounts.</p>
/// </note>
/// <p>If the manual DB snapshot is encrypted, it can be shared, but only by specifying a
/// list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You
/// can't use <code>all</code> as a value for that parameter in this case.</p>
/// <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or
/// whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action. The accounts are returned as
/// values for the <code>restore</code> attribute.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBSnapshotAttribute {
    _private: (),
}
impl ModifyDBSnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotAttributeInput`](crate::input::ModifyDBSnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_db_snapshot_attribute_input::Builder {
        crate::input::modify_db_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBSnapshotAttribute {
    type Output = std::result::Result<
        crate::output::ModifyDBSnapshotAttributeOutput,
        crate::error::ModifyDBSnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_db_snapshot_attribute_response(response)
        }
    }
}

/// <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBSubnetGroup {
    _private: (),
}
impl ModifyDBSubnetGroup {
    /// Creates a new builder-style object to manufacture [`ModifyDBSubnetGroupInput`](crate::input::ModifyDBSubnetGroupInput)
    pub fn builder() -> crate::input::modify_db_subnet_group_input::Builder {
        crate::input::modify_db_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDBSubnetGroup {
    type Output = std::result::Result<
        crate::output::ModifyDBSubnetGroupOutput,
        crate::error::ModifyDBSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_db_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_modify_db_subnet_group_response(response)
        }
    }
}

/// <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change
/// source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p>
/// <p>You can see a list of the event categories for a given source type (<code>SourceType</code>)
/// in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i>
/// or by using the <code>DescribeEventCategories</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEventSubscription {
    _private: (),
}
impl ModifyEventSubscription {
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
    pub fn builder() -> crate::input::modify_event_subscription_input::Builder {
        crate::input::modify_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyEventSubscription {
    type Output = std::result::Result<
        crate::output::ModifyEventSubscriptionOutput,
        crate::error::ModifyEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_modify_event_subscription_response(response)
        }
    }
}

/// <p>
/// Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration
/// parameters by specifying these parameters and the new values in the request. For more information on
/// Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the
/// <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyGlobalCluster {
    _private: (),
}
impl ModifyGlobalCluster {
    /// Creates a new builder-style object to manufacture [`ModifyGlobalClusterInput`](crate::input::ModifyGlobalClusterInput)
    pub fn builder() -> crate::input::modify_global_cluster_input::Builder {
        crate::input::modify_global_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyGlobalCluster {
    type Output = std::result::Result<
        crate::output::ModifyGlobalClusterOutput,
        crate::error::ModifyGlobalClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_global_cluster_error(response)
        } else {
            crate::operation_deser::parse_modify_global_cluster_response(response)
        }
    }
}

/// <p>Modifies an existing option group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyOptionGroup {
    _private: (),
}
impl ModifyOptionGroup {
    /// Creates a new builder-style object to manufacture [`ModifyOptionGroupInput`](crate::input::ModifyOptionGroupInput)
    pub fn builder() -> crate::input::modify_option_group_input::Builder {
        crate::input::modify_option_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyOptionGroup {
    type Output = std::result::Result<
        crate::output::ModifyOptionGroupOutput,
        crate::error::ModifyOptionGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_option_group_error(response)
        } else {
            crate::operation_deser::parse_modify_option_group_response(response)
        }
    }
}

/// <p>Promotes a read replica DB instance to a standalone DB instance.</p>
/// <note>
/// <ul>
/// <li>
/// <p>Backup duration is a function of the amount of changes to the database since the previous
/// backup. If you plan to promote a read replica to a standalone instance, we
/// recommend that you enable backups and complete at least one backup prior to
/// promotion. In addition, a read replica cannot be promoted to a standalone
/// instance when it is in the <code>backing-up</code> status. If you have
/// enabled backups on your read replica, configure the automated backup window
/// so that daily backups do not interfere with read replica
/// promotion.</p>
/// </li>
/// <li>
/// <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p>
/// </li>
/// </ul>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PromoteReadReplica {
    _private: (),
}
impl PromoteReadReplica {
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaInput`](crate::input::PromoteReadReplicaInput)
    pub fn builder() -> crate::input::promote_read_replica_input::Builder {
        crate::input::promote_read_replica_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PromoteReadReplica {
    type Output = std::result::Result<
        crate::output::PromoteReadReplicaOutput,
        crate::error::PromoteReadReplicaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_promote_read_replica_error(response)
        } else {
            crate::operation_deser::parse_promote_read_replica_response(response)
        }
    }
}

/// <p>Promotes a read replica DB cluster to a standalone DB cluster.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PromoteReadReplicaDBCluster {
    _private: (),
}
impl PromoteReadReplicaDBCluster {
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaDBClusterInput`](crate::input::PromoteReadReplicaDBClusterInput)
    pub fn builder() -> crate::input::promote_read_replica_db_cluster_input::Builder {
        crate::input::promote_read_replica_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PromoteReadReplicaDBCluster {
    type Output = std::result::Result<
        crate::output::PromoteReadReplicaDBClusterOutput,
        crate::error::PromoteReadReplicaDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_promote_read_replica_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_promote_read_replica_db_cluster_response(response)
        }
    }
}

/// <p>Purchases a reserved DB instance offering.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseReservedDBInstancesOffering {
    _private: (),
}
impl PurchaseReservedDBInstancesOffering {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedDBInstancesOfferingInput`](crate::input::PurchaseReservedDBInstancesOfferingInput)
    pub fn builder() -> crate::input::purchase_reserved_db_instances_offering_input::Builder {
        crate::input::purchase_reserved_db_instances_offering_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PurchaseReservedDBInstancesOffering {
    type Output = std::result::Result<
        crate::output::PurchaseReservedDBInstancesOfferingOutput,
        crate::error::PurchaseReservedDBInstancesOfferingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_purchase_reserved_db_instances_offering_error(response)
        } else {
            crate::operation_deser::parse_purchase_reserved_db_instances_offering_response(response)
        }
    }
}

/// <p>You might need to reboot your DB instance, usually for maintenance reasons.
/// For example, if you make certain modifications,
/// or if you change the DB parameter group associated with the DB instance,
/// you must reboot the instance for the changes to take effect.
/// </p>
/// <p>Rebooting a DB instance restarts the database engine service.
/// Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.
/// </p>
/// <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebootDBInstance {
    _private: (),
}
impl RebootDBInstance {
    /// Creates a new builder-style object to manufacture [`RebootDBInstanceInput`](crate::input::RebootDBInstanceInput)
    pub fn builder() -> crate::input::reboot_db_instance_input::Builder {
        crate::input::reboot_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebootDBInstance {
    type Output = std::result::Result<
        crate::output::RebootDBInstanceOutput,
        crate::error::RebootDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reboot_db_instance_error(response)
        } else {
            crate::operation_deser::parse_reboot_db_instance_response(response)
        }
    }
}

/// <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDBProxyTargets {
    _private: (),
}
impl RegisterDBProxyTargets {
    /// Creates a new builder-style object to manufacture [`RegisterDBProxyTargetsInput`](crate::input::RegisterDBProxyTargetsInput)
    pub fn builder() -> crate::input::register_db_proxy_targets_input::Builder {
        crate::input::register_db_proxy_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterDBProxyTargets {
    type Output = std::result::Result<
        crate::output::RegisterDBProxyTargetsOutput,
        crate::error::RegisterDBProxyTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_db_proxy_targets_error(response)
        } else {
            crate::operation_deser::parse_register_db_proxy_targets_response(response)
        }
    }
}

/// <p>
/// Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a
/// standalone cluster with read-write capability instead of being read-only and receiving data from a
/// primary cluster in a different region.
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFromGlobalCluster {
    _private: (),
}
impl RemoveFromGlobalCluster {
    /// Creates a new builder-style object to manufacture [`RemoveFromGlobalClusterInput`](crate::input::RemoveFromGlobalClusterInput)
    pub fn builder() -> crate::input::remove_from_global_cluster_input::Builder {
        crate::input::remove_from_global_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveFromGlobalCluster {
    type Output = std::result::Result<
        crate::output::RemoveFromGlobalClusterOutput,
        crate::error::RemoveFromGlobalClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_from_global_cluster_error(response)
        } else {
            crate::operation_deser::parse_remove_from_global_cluster_response(response)
        }
    }
}

/// <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL
/// to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveRoleFromDBCluster {
    _private: (),
}
impl RemoveRoleFromDBCluster {
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBClusterInput`](crate::input::RemoveRoleFromDBClusterInput)
    pub fn builder() -> crate::input::remove_role_from_db_cluster_input::Builder {
        crate::input::remove_role_from_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveRoleFromDBCluster {
    type Output = std::result::Result<
        crate::output::RemoveRoleFromDBClusterOutput,
        crate::error::RemoveRoleFromDBClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_role_from_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_remove_role_from_db_cluster_response(response)
        }
    }
}

/// <p>Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveRoleFromDBInstance {
    _private: (),
}
impl RemoveRoleFromDBInstance {
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBInstanceInput`](crate::input::RemoveRoleFromDBInstanceInput)
    pub fn builder() -> crate::input::remove_role_from_db_instance_input::Builder {
        crate::input::remove_role_from_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveRoleFromDBInstance {
    type Output = std::result::Result<
        crate::output::RemoveRoleFromDBInstanceOutput,
        crate::error::RemoveRoleFromDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_role_from_db_instance_error(response)
        } else {
            crate::operation_deser::parse_remove_role_from_db_instance_response(response)
        }
    }
}

/// <p>Removes a source identifier from an existing RDS event notification subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveSourceIdentifierFromSubscription {
    _private: (),
}
impl RemoveSourceIdentifierFromSubscription {
    /// Creates a new builder-style object to manufacture [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
    pub fn builder() -> crate::input::remove_source_identifier_from_subscription_input::Builder {
        crate::input::remove_source_identifier_from_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveSourceIdentifierFromSubscription {
    type Output = std::result::Result<
        crate::output::RemoveSourceIdentifierFromSubscriptionOutput,
        crate::error::RemoveSourceIdentifierFromSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_source_identifier_from_subscription_error(response)
        } else {
            crate::operation_deser::parse_remove_source_identifier_from_subscription_response(
                response,
            )
        }
    }
}

/// <p>Removes metadata tags from an Amazon RDS resource.</p>
/// <p>For an overview on tagging an Amazon RDS resource,
/// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
/// in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_resource_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_resource_response(response)
        }
    }
}

/// <p>
/// Modifies the parameters of a DB cluster parameter group to the default value. To
/// reset specific parameters submit a list of the following: <code>ParameterName</code>
/// and <code>ApplyMethod</code>. To reset the
/// entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code>
/// and <code>ResetAllParameters</code> parameters.
/// </p>
/// <p>
/// When resetting the entire group, dynamic parameters are updated immediately and static parameters
/// are set to <code>pending-reboot</code> to take effect on the next DB instance restart
/// or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every
/// DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetDBClusterParameterGroup {
    _private: (),
}
impl ResetDBClusterParameterGroup {
    /// Creates a new builder-style object to manufacture [`ResetDBClusterParameterGroupInput`](crate::input::ResetDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_cluster_parameter_group_input::Builder {
        crate::input::reset_db_cluster_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetDBClusterParameterGroup {
    type Output = std::result::Result<
        crate::output::ResetDBClusterParameterGroupOutput,
        crate::error::ResetDBClusterParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_db_cluster_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_reset_db_cluster_parameter_group_response(response)
        }
    }
}

/// <p>Modifies the parameters of a DB parameter group to the engine/system default value.
/// To reset specific parameters, provide a list of the following:
/// <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB
/// parameter group, specify the <code>DBParameterGroup</code> name and
/// <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic
/// parameters are updated immediately and static parameters are set to
/// <code>pending-reboot</code> to take effect on the next DB instance restart or
/// <code>RebootDBInstance</code> request. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetDBParameterGroup {
    _private: (),
}
impl ResetDBParameterGroup {
    /// Creates a new builder-style object to manufacture [`ResetDBParameterGroupInput`](crate::input::ResetDBParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_parameter_group_input::Builder {
        crate::input::reset_db_parameter_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetDBParameterGroup {
    type Output = std::result::Result<
        crate::output::ResetDBParameterGroupOutput,
        crate::error::ResetDBParameterGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_db_parameter_group_error(response)
        } else {
            crate::operation_deser::parse_reset_db_parameter_group_response(response)
        }
    }
}

/// <p>Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket.
/// Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be
/// created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3"> Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the
/// <i>Amazon Aurora User Guide</i>.</p>
/// <note>
/// <p>This action only restores the DB cluster, not the DB instances for that DB
/// cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
/// instances for the restored DB cluster, specifying the identifier of the restored DB
/// cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
/// the <code>RestoreDBClusterFromS3</code> action has completed and the DB
/// cluster is available.</p>
/// </note>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters. The source DB engine must be
/// MySQL.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterFromS3 {
    _private: (),
}
impl RestoreDBClusterFromS3 {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromS3Input`](crate::input::RestoreDBClusterFromS3Input)
    pub fn builder() -> crate::input::restore_db_cluster_from_s3_input::Builder {
        crate::input::restore_db_cluster_from_s3_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBClusterFromS3 {
    type Output = std::result::Result<
        crate::output::RestoreDBClusterFromS3Output,
        crate::error::RestoreDBClusterFromS3Error,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_cluster_from_s3_error(response)
        } else {
            crate::operation_deser::parse_restore_db_cluster_from_s3_response(response)
        }
    }
}

/// <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action
/// only applies to Aurora DB clusters.</p>
/// <p>The target DB cluster is created from the source snapshot with a default
/// configuration. If you don't specify a security group, the new DB cluster is
/// associated with the default security group.</p>
/// <note>
/// <p>This action only restores the DB cluster, not the DB instances for that DB
/// cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
/// instances for the restored DB cluster, specifying the identifier of the restored DB
/// cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
/// the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB
/// cluster is available.</p>
/// </note>
/// <p>For more information on Amazon Aurora, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterFromSnapshot {
    _private: (),
}
impl RestoreDBClusterFromSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromSnapshotInput`](crate::input::RestoreDBClusterFromSnapshotInput)
    pub fn builder() -> crate::input::restore_db_cluster_from_snapshot_input::Builder {
        crate::input::restore_db_cluster_from_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBClusterFromSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreDBClusterFromSnapshotOutput,
        crate::error::RestoreDBClusterFromSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_cluster_from_snapshot_error(response)
        } else {
            crate::operation_deser::parse_restore_db_cluster_from_snapshot_response(response)
        }
    }
}

/// <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point
/// in time before <code>LatestRestorableTime</code> for up to
/// <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the
/// source DB cluster with the same configuration as the original DB cluster, except that
/// the new DB cluster is created with the default DB security group. </p>
/// <note>
/// <p>This action only restores the DB cluster, not the DB instances for that DB
/// cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
/// instances for the restored DB cluster, specifying the identifier of the restored DB
/// cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
/// the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB
/// cluster is available.</p>
/// </note>
/// <p>For more information on Amazon Aurora, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterToPointInTime {
    _private: (),
}
impl RestoreDBClusterToPointInTime {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterToPointInTimeInput`](crate::input::RestoreDBClusterToPointInTimeInput)
    pub fn builder() -> crate::input::restore_db_cluster_to_point_in_time_input::Builder {
        crate::input::restore_db_cluster_to_point_in_time_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBClusterToPointInTime {
    type Output = std::result::Result<
        crate::output::RestoreDBClusterToPointInTimeOutput,
        crate::error::RestoreDBClusterToPointInTimeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_cluster_to_point_in_time_error(response)
        } else {
            crate::operation_deser::parse_restore_db_cluster_to_point_in_time_response(response)
        }
    }
}

/// <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most
/// of the source's original configuration, including the default security group and DB parameter group. By default, the new DB
/// instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group
/// associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p>
/// <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance
/// before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. After you
/// have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as
/// the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you replace the original
/// DB instance with the DB instance created from the snapshot.</p>
/// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
/// must be the ARN of the shared DB snapshot.</p>
/// <note>
/// <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBInstanceFromDBSnapshot {
    _private: (),
}
impl RestoreDBInstanceFromDBSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromDBSnapshotInput`](crate::input::RestoreDBInstanceFromDBSnapshotInput)
    pub fn builder() -> crate::input::restore_db_instance_from_db_snapshot_input::Builder {
        crate::input::restore_db_instance_from_db_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBInstanceFromDBSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreDBInstanceFromDBSnapshotOutput,
        crate::error::RestoreDBInstanceFromDBSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_instance_from_db_snapshot_error(response)
        } else {
            crate::operation_deser::parse_restore_db_instance_from_db_snapshot_response(response)
        }
    }
}

/// <p>Amazon Relational Database Service (Amazon RDS)
/// supports importing MySQL databases by using backup files.
/// You can create a backup of your on-premises database,
/// store it on Amazon Simple Storage Service (Amazon S3),
/// and then restore the backup file onto a new Amazon RDS DB instance running MySQL.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a>
/// in the <i>Amazon RDS User Guide.</i>            
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBInstanceFromS3 {
    _private: (),
}
impl RestoreDBInstanceFromS3 {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromS3Input`](crate::input::RestoreDBInstanceFromS3Input)
    pub fn builder() -> crate::input::restore_db_instance_from_s3_input::Builder {
        crate::input::restore_db_instance_from_s3_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBInstanceFromS3 {
    type Output = std::result::Result<
        crate::output::RestoreDBInstanceFromS3Output,
        crate::error::RestoreDBInstanceFromS3Error,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_instance_from_s3_error(response)
        } else {
            crate::operation_deser::parse_restore_db_instance_from_s3_response(response)
        }
    }
}

/// <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p>
/// <p>The target database is created with most of the original configuration, but in a
/// system-selected Availability Zone, with the default security group, the default subnet
/// group, and the default DB parameter group. By default, the new DB instance is created as
/// a single-AZ deployment except when the instance is a SQL Server instance that has an
/// option group that is associated with mirroring; in this case, the instance becomes a
/// mirrored deployment and not a single-AZ deployment.</p>
/// <note>
/// <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBInstanceToPointInTime {
    _private: (),
}
impl RestoreDBInstanceToPointInTime {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceToPointInTimeInput`](crate::input::RestoreDBInstanceToPointInTimeInput)
    pub fn builder() -> crate::input::restore_db_instance_to_point_in_time_input::Builder {
        crate::input::restore_db_instance_to_point_in_time_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreDBInstanceToPointInTime {
    type Output = std::result::Result<
        crate::output::RestoreDBInstanceToPointInTimeOutput,
        crate::error::RestoreDBInstanceToPointInTimeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_db_instance_to_point_in_time_error(response)
        } else {
            crate::operation_deser::parse_restore_db_instance_to_point_in_time_response(response)
        }
    }
}

/// <p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeDBSecurityGroupIngress {
    _private: (),
}
impl RevokeDBSecurityGroupIngress {
    /// Creates a new builder-style object to manufacture [`RevokeDBSecurityGroupIngressInput`](crate::input::RevokeDBSecurityGroupIngressInput)
    pub fn builder() -> crate::input::revoke_db_security_group_ingress_input::Builder {
        crate::input::revoke_db_security_group_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeDBSecurityGroupIngress {
    type Output = std::result::Result<
        crate::output::RevokeDBSecurityGroupIngressOutput,
        crate::error::RevokeDBSecurityGroupIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_db_security_group_ingress_error(response)
        } else {
            crate::operation_deser::parse_revoke_db_security_group_ingress_response(response)
        }
    }
}

/// <p>Starts a database activity stream to monitor activity on the database.
/// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
/// in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartActivityStream {
    _private: (),
}
impl StartActivityStream {
    /// Creates a new builder-style object to manufacture [`StartActivityStreamInput`](crate::input::StartActivityStreamInput)
    pub fn builder() -> crate::input::start_activity_stream_input::Builder {
        crate::input::start_activity_stream_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartActivityStream {
    type Output = std::result::Result<
        crate::output::StartActivityStreamOutput,
        crate::error::StartActivityStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_activity_stream_error(response)
        } else {
            crate::operation_deser::parse_start_activity_stream_response(response)
        }
    }
}

/// <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster
/// AWS CLI command, or the StopDBCluster action.</p>
/// <p>For more information, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
/// Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDBCluster {
    _private: (),
}
impl StartDBCluster {
    /// Creates a new builder-style object to manufacture [`StartDBClusterInput`](crate::input::StartDBClusterInput)
    pub fn builder() -> crate::input::start_db_cluster_input::Builder {
        crate::input::start_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDBCluster {
    type Output =
        std::result::Result<crate::output::StartDBClusterOutput, crate::error::StartDBClusterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_start_db_cluster_response(response)
        }
    }
}

/// <p>
/// Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action.
/// </p>
/// <p>For more information, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html">
/// Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the
/// <i>Amazon RDS User Guide.</i>
/// </p>
/// <note>
/// <p>
/// This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.
/// For Aurora DB clusters, use <code>StartDBCluster</code> instead.
/// </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDBInstance {
    _private: (),
}
impl StartDBInstance {
    /// Creates a new builder-style object to manufacture [`StartDBInstanceInput`](crate::input::StartDBInstanceInput)
    pub fn builder() -> crate::input::start_db_instance_input::Builder {
        crate::input::start_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDBInstance {
    type Output = std::result::Result<
        crate::output::StartDBInstanceOutput,
        crate::error::StartDBInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_db_instance_error(response)
        } else {
            crate::operation_deser::parse_start_db_instance_response(response)
        }
    }
}

/// <p>Enables replication of automated backups to a different AWS Region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
/// Replicating Automated Backups to Another AWS Region</a> in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDBInstanceAutomatedBackupsReplication {
    _private: (),
}
impl StartDBInstanceAutomatedBackupsReplication {
    /// Creates a new builder-style object to manufacture [`StartDBInstanceAutomatedBackupsReplicationInput`](crate::input::StartDBInstanceAutomatedBackupsReplicationInput)
    pub fn builder() -> crate::input::start_db_instance_automated_backups_replication_input::Builder
    {
        crate::input::start_db_instance_automated_backups_replication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDBInstanceAutomatedBackupsReplication {
    type Output = std::result::Result<
        crate::output::StartDBInstanceAutomatedBackupsReplicationOutput,
        crate::error::StartDBInstanceAutomatedBackupsReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_db_instance_automated_backups_replication_error(
                response,
            )
        } else {
            crate::operation_deser::parse_start_db_instance_automated_backups_replication_response(
                response,
            )
        }
    }
}

/// <p>Starts an export of a snapshot to Amazon S3.
/// The provided IAM role must have access to the S3 bucket.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartExportTask {
    _private: (),
}
impl StartExportTask {
    /// Creates a new builder-style object to manufacture [`StartExportTaskInput`](crate::input::StartExportTaskInput)
    pub fn builder() -> crate::input::start_export_task_input::Builder {
        crate::input::start_export_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartExportTask {
    type Output = std::result::Result<
        crate::output::StartExportTaskOutput,
        crate::error::StartExportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_export_task_error(response)
        } else {
            crate::operation_deser::parse_start_export_task_response(response)
        }
    }
}

/// <p>Stops a database activity stream that was started using the AWS console,
/// the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p>
/// <p>For more information, see
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
/// in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopActivityStream {
    _private: (),
}
impl StopActivityStream {
    /// Creates a new builder-style object to manufacture [`StopActivityStreamInput`](crate::input::StopActivityStreamInput)
    pub fn builder() -> crate::input::stop_activity_stream_input::Builder {
        crate::input::stop_activity_stream_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopActivityStream {
    type Output = std::result::Result<
        crate::output::StopActivityStreamOutput,
        crate::error::StopActivityStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_activity_stream_error(response)
        } else {
            crate::operation_deser::parse_stop_activity_stream_response(response)
        }
    }
}

/// <p>
/// Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's
/// metadata, including its endpoints and DB parameter groups. Aurora also
/// retains the transaction logs so you can do a point-in-time restore if necessary.
/// </p>
/// <p>For more information, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
/// Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i>
/// </p>
/// <note>
/// <p>This action only applies to Aurora DB clusters.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopDBCluster {
    _private: (),
}
impl StopDBCluster {
    /// Creates a new builder-style object to manufacture [`StopDBClusterInput`](crate::input::StopDBClusterInput)
    pub fn builder() -> crate::input::stop_db_cluster_input::Builder {
        crate::input::stop_db_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopDBCluster {
    type Output =
        std::result::Result<crate::output::StopDBClusterOutput, crate::error::StopDBClusterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_db_cluster_error(response)
        } else {
            crate::operation_deser::parse_stop_db_cluster_response(response)
        }
    }
}

/// <p>
/// Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint,
/// DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if
/// necessary.
/// </p>
/// <p>For more information, see  
/// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html">
/// Stopping an Amazon RDS DB Instance Temporarily</a> in the
/// <i>Amazon RDS User Guide.</i>
/// </p>
/// <note>
/// <p>
/// This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.
/// For Aurora clusters, use <code>StopDBCluster</code> instead.
/// </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopDBInstance {
    _private: (),
}
impl StopDBInstance {
    /// Creates a new builder-style object to manufacture [`StopDBInstanceInput`](crate::input::StopDBInstanceInput)
    pub fn builder() -> crate::input::stop_db_instance_input::Builder {
        crate::input::stop_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopDBInstance {
    type Output =
        std::result::Result<crate::output::StopDBInstanceOutput, crate::error::StopDBInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_db_instance_error(response)
        } else {
            crate::operation_deser::parse_stop_db_instance_response(response)
        }
    }
}

/// <p>Stops automated backup replication for a DB instance.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
/// Replicating Automated Backups to Another AWS Region</a> in the <i>Amazon RDS User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopDBInstanceAutomatedBackupsReplication {
    _private: (),
}
impl StopDBInstanceAutomatedBackupsReplication {
    /// Creates a new builder-style object to manufacture [`StopDBInstanceAutomatedBackupsReplicationInput`](crate::input::StopDBInstanceAutomatedBackupsReplicationInput)
    pub fn builder() -> crate::input::stop_db_instance_automated_backups_replication_input::Builder
    {
        crate::input::stop_db_instance_automated_backups_replication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopDBInstanceAutomatedBackupsReplication {
    type Output = std::result::Result<
        crate::output::StopDBInstanceAutomatedBackupsReplicationOutput,
        crate::error::StopDBInstanceAutomatedBackupsReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_db_instance_automated_backups_replication_error(
                response,
            )
        } else {
            crate::operation_deser::parse_stop_db_instance_automated_backups_replication_response(
                response,
            )
        }
    }
}
