// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_db_log_files_input_input(
    input: &crate::operation::describe_db_log_files::DescribeDbLogFilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBLogFiles", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2) = &input.db_instance_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("FilenameContains");
    if let Some(var_4) = &input.filename_contains {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FileLastWritten");
    if input.file_last_written != 0 {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_last_written).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("FileSize");
    if input.file_size != 0 {
        scope_6.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_size).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Filters");
    if let Some(var_8) = &input.filters {
        let mut list_10 = scope_7.start_list(false, Some("Filter"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_11, item_9)?;
        }
        list_10.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MaxRecords");
    if let Some(var_13) = &input.max_records {
        scope_12.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Marker");
    if let Some(var_15) = &input.marker {
        scope_14.string(var_15);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
