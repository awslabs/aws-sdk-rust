// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_add_role_to_db_cluster_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::add_role_to_db_cluster::AddRoleToDbClusterOutput,
    crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DBClusterNotFoundFault" => crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbClusterNotFoundFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_db_cluster_not_found_fault::de_db_cluster_not_found_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "DBClusterRoleAlreadyExists" => crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterRoleAlreadyExistsFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbClusterRoleAlreadyExistsFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_db_cluster_role_already_exists_fault::de_db_cluster_role_already_exists_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "DBClusterRoleQuotaExceeded" => crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterRoleQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbClusterRoleQuotaExceededFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_db_cluster_role_quota_exceeded_fault::de_db_cluster_role_quota_exceeded_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidDBClusterStateFault" => crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::InvalidDbClusterStateFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidDbClusterStateFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_db_cluster_state_fault::de_invalid_db_cluster_state_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_add_role_to_db_cluster_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::add_role_to_db_cluster::AddRoleToDbClusterOutput,
    crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::add_role_to_db_cluster::builders::AddRoleToDbClusterOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
