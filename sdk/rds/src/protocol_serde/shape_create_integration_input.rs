// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_integration_input_input(
    input: &crate::operation::create_integration::CreateIntegrationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateIntegration", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceArn");
    if let Some(var_2) = &input.source_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetArn");
    if let Some(var_4) = &input.target_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("IntegrationName");
    if let Some(var_6) = &input.integration_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("KMSKeyId");
    if let Some(var_8) = &input.kms_key_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AdditionalEncryptionContext");
    if let Some(var_10) = &input.additional_encryption_context {
        let mut map_11 = scope_9.start_map(false, "key", "value");
        for (key_12, value_13) in var_10 {
            #[allow(unused_mut)]
            let mut entry_14 = map_11.entry(key_12);
            {
                entry_14.string(value_13);
            }
        }
        map_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Tags");
    if let Some(var_16) = &input.tags {
        let mut list_18 = scope_15.start_list(false, Some("Tag"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_19, item_17)?;
        }
        list_18.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
