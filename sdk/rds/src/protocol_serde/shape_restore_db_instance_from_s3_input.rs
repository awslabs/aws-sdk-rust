// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_instance_from_s3_input_input(
    input: &crate::operation::restore_db_instance_from_s3::RestoreDbInstanceFromS3Input,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBName");
    if let Some(var_2) = &input.db_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_4) = &input.db_instance_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AllocatedStorage");
    if let Some(var_6) = &input.allocated_storage {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DBInstanceClass");
    if let Some(var_8) = &input.db_instance_class {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Engine");
    if let Some(var_10) = &input.engine {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MasterUsername");
    if let Some(var_12) = &input.master_username {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MasterUserPassword");
    if let Some(var_14) = &input.master_user_password {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DBSecurityGroups");
    if let Some(var_16) = &input.db_security_groups {
        let mut list_18 = scope_15.start_list(false, Some("DBSecurityGroupName"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            entry_19.string(item_17);
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_21) = &input.vpc_security_group_ids {
        let mut list_23 = scope_20.start_list(false, Some("VpcSecurityGroupId"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            entry_24.string(item_22);
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("AvailabilityZone");
    if let Some(var_26) = &input.availability_zone {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("DBSubnetGroupName");
    if let Some(var_28) = &input.db_subnet_group_name {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_30) = &input.preferred_maintenance_window {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("DBParameterGroupName");
    if let Some(var_32) = &input.db_parameter_group_name {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_34) = &input.backup_retention_period {
        scope_33.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("PreferredBackupWindow");
    if let Some(var_36) = &input.preferred_backup_window {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Port");
    if let Some(var_38) = &input.port {
        scope_37.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("MultiAZ");
    if let Some(var_40) = &input.multi_az {
        scope_39.boolean(*var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("EngineVersion");
    if let Some(var_42) = &input.engine_version {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_44) = &input.auto_minor_version_upgrade {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("LicenseModel");
    if let Some(var_46) = &input.license_model {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("Iops");
    if let Some(var_48) = &input.iops {
        scope_47.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("OptionGroupName");
    if let Some(var_50) = &input.option_group_name {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("PubliclyAccessible");
    if let Some(var_52) = &input.publicly_accessible {
        scope_51.boolean(*var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Tags");
    if let Some(var_54) = &input.tags {
        let mut list_56 = scope_53.start_list(false, Some("Tag"));
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_57, item_55)?;
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("StorageType");
    if let Some(var_59) = &input.storage_type {
        scope_58.string(var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("StorageEncrypted");
    if let Some(var_61) = &input.storage_encrypted {
        scope_60.boolean(*var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("KmsKeyId");
    if let Some(var_63) = &input.kms_key_id {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_65) = &input.copy_tags_to_snapshot {
        scope_64.boolean(*var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("MonitoringInterval");
    if let Some(var_67) = &input.monitoring_interval {
        scope_66.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("MonitoringRoleArn");
    if let Some(var_69) = &input.monitoring_role_arn {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_71) = &input.enable_iam_database_authentication {
        scope_70.boolean(*var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("SourceEngine");
    if let Some(var_73) = &input.source_engine {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("SourceEngineVersion");
    if let Some(var_75) = &input.source_engine_version {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("S3BucketName");
    if let Some(var_77) = &input.s3_bucket_name {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("S3Prefix");
    if let Some(var_79) = &input.s3_prefix {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_81) = &input.s3_ingestion_role_arn {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_83) = &input.enable_performance_insights {
        scope_82.boolean(*var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_85) = &input.performance_insights_kms_key_id {
        scope_84.string(var_85);
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_87) = &input.performance_insights_retention_period {
        scope_86.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_89) = &input.enable_cloudwatch_logs_exports {
        let mut list_91 = scope_88.start_list(false, None);
        for item_90 in var_89 {
            #[allow(unused_mut)]
            let mut entry_92 = list_91.entry();
            entry_92.string(item_90);
        }
        list_91.finish();
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("ProcessorFeatures");
    if let Some(var_94) = &input.processor_features {
        let mut list_96 = scope_93.start_list(false, Some("ProcessorFeature"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            crate::protocol_serde::shape_processor_feature::ser_processor_feature(entry_97, item_95)?;
        }
        list_96.finish();
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_99) = &input.use_default_processor_features {
        scope_98.boolean(*var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("DeletionProtection");
    if let Some(var_101) = &input.deletion_protection {
        scope_100.boolean(*var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_103) = &input.max_allocated_storage {
        scope_102.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_103).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("NetworkType");
    if let Some(var_105) = &input.network_type {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("StorageThroughput");
    if let Some(var_107) = &input.storage_throughput {
        scope_106.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("ManageMasterUserPassword");
    if let Some(var_109) = &input.manage_master_user_password {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MasterUserSecretKmsKeyId");
    if let Some(var_111) = &input.master_user_secret_kms_key_id {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("DedicatedLogVolume");
    if let Some(var_113) = &input.dedicated_log_volume {
        scope_112.boolean(*var_113);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
