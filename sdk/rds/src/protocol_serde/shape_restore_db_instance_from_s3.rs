// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_restore_db_instance_from_s3_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::restore_db_instance_from_s3::RestoreDbInstanceFromS3Output,
    crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AuthorizationNotFound" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::AuthorizationNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AuthorizationNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_authorization_not_found_fault::de_authorization_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "BackupPolicyNotFoundFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::BackupPolicyNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BackupPolicyNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_backup_policy_not_found_fault::de_backup_policy_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBInstanceAlreadyExists" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbInstanceAlreadyExistsFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbInstanceAlreadyExistsFaultBuilder::default();
                output = crate::protocol_serde::shape_db_instance_already_exists_fault::de_db_instance_already_exists_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBParameterGroupNotFound" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbParameterGroupNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbParameterGroupNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_parameter_group_not_found_fault::de_db_parameter_group_not_found_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBSecurityGroupNotFound" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSecurityGroupNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbSecurityGroupNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_security_group_not_found_fault::de_db_security_group_not_found_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBSubnetGroupDoesNotCoverEnoughAZs" => {
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSubnetGroupDoesNotCoverEnoughAZs({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbSubnetGroupDoesNotCoverEnoughAZsBuilder::default();
                    output =
                        crate::protocol_serde::shape_db_subnet_group_does_not_cover_enough_azs::de_db_subnet_group_does_not_cover_enough_azs_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DBSubnetGroupNotFoundFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSubnetGroupNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbSubnetGroupNotFoundFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_db_subnet_group_not_found_fault::de_db_subnet_group_not_found_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InstanceQuotaExceeded" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InstanceQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InstanceQuotaExceededFaultBuilder::default();
                output = crate::protocol_serde::shape_instance_quota_exceeded_fault::de_instance_quota_exceeded_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InsufficientDBInstanceCapacity" => {
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InsufficientDbInstanceCapacityFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientDbInstanceCapacityFaultBuilder::default();
                    output =
                        crate::protocol_serde::shape_insufficient_db_instance_capacity_fault::de_insufficient_db_instance_capacity_fault_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidS3BucketFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidS3BucketFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidS3BucketFaultBuilder::default();
                output = crate::protocol_serde::shape_invalid_s3_bucket_fault::de_invalid_s3_bucket_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidSubnet" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidSubnet({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidSubnetBuilder::default();
                output = crate::protocol_serde::shape_invalid_subnet::de_invalid_subnet_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidVPCNetworkStateFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidVpcNetworkStateFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidVpcNetworkStateFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_vpc_network_state_fault::de_invalid_vpc_network_state_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSKeyNotAccessibleFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::KmsKeyNotAccessibleFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsKeyNotAccessibleFaultBuilder::default();
                output = crate::protocol_serde::shape_kms_key_not_accessible_fault::de_kms_key_not_accessible_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "NetworkTypeNotSupported" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::NetworkTypeNotSupported({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NetworkTypeNotSupportedBuilder::default();
                output = crate::protocol_serde::shape_network_type_not_supported::de_network_type_not_supported_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OptionGroupNotFoundFault" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::OptionGroupNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::OptionGroupNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_option_group_not_found_fault::de_option_group_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ProvisionedIopsNotAvailableInAZFault" => {
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::ProvisionedIopsNotAvailableInAzFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ProvisionedIopsNotAvailableInAzFaultBuilder::default();
                    output = crate::protocol_serde::shape_provisioned_iops_not_available_in_az_fault::de_provisioned_iops_not_available_in_az_fault_xml_err(_response_body, output).map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "StorageQuotaExceeded" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::StorageQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::StorageQuotaExceededFaultBuilder::default();
                output = crate::protocol_serde::shape_storage_quota_exceeded_fault::de_storage_quota_exceeded_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "StorageTypeNotSupported" => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::StorageTypeNotSupportedFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::StorageTypeNotSupportedFaultBuilder::default();
                output = crate::protocol_serde::shape_storage_type_not_supported_fault::de_storage_type_not_supported_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_restore_db_instance_from_s3_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::restore_db_instance_from_s3::RestoreDbInstanceFromS3Output,
    crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::restore_db_instance_from_s3::builders::RestoreDbInstanceFromS3OutputBuilder::default();
        output = crate::protocol_serde::shape_restore_db_instance_from_s3::de_restore_db_instance_from_s3(_response_body, output)
            .map_err(crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_restore_db_instance_from_s3(
    inp: &[u8],
    mut builder: crate::operation::restore_db_instance_from_s3::builders::RestoreDbInstanceFromS3OutputBuilder,
) -> Result<crate::operation::restore_db_instance_from_s3::builders::RestoreDbInstanceFromS3OutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreDBInstanceFromS3Response")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected RestoreDBInstanceFromS3Response got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("RestoreDBInstanceFromS3Result")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected RestoreDBInstanceFromS3Result got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DBInstance") /* DBInstance com.amazonaws.rds.synthetic#RestoreDBInstanceFromS3Output$DBInstance */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_db_instance::de_db_instance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_db_instance(var_1);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected RestoreDBInstanceFromS3Result tag",
        ));
    };
    Ok(builder)
}
