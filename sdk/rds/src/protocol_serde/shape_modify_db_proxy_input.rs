// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_db_proxy_input_input(
    input: &crate::operation::modify_db_proxy::ModifyDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBProxyName");
    if let Some(var_2) = &input.db_proxy_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("NewDBProxyName");
    if let Some(var_4) = &input.new_db_proxy_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Auth");
    if let Some(var_6) = &input.auth {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_user_auth_config::ser_user_auth_config(entry_9, item_7)?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("RequireTLS");
    if let Some(var_11) = &input.require_tls {
        scope_10.boolean(*var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("IdleClientTimeout");
    if let Some(var_13) = &input.idle_client_timeout {
        scope_12.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("DebugLogging");
    if let Some(var_15) = &input.debug_logging {
        scope_14.boolean(*var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("RoleArn");
    if let Some(var_17) = &input.role_arn {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("SecurityGroups");
    if let Some(var_19) = &input.security_groups {
        let mut list_21 = scope_18.start_list(false, None);
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20);
        }
        list_21.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
