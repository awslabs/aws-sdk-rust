// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_recommended_action(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::RecommendedAction, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RecommendedAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ActionId") /* ActionId com.amazonaws.rds#RecommendedAction$ActionId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_action_id(var_1);
            }
            ,
            s if s.matches("Title") /* Title com.amazonaws.rds#RecommendedAction$Title */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_title(var_2);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.rds#RecommendedAction$Description */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3);
            }
            ,
            s if s.matches("Operation") /* Operation com.amazonaws.rds#RecommendedAction$Operation */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operation(var_4);
            }
            ,
            s if s.matches("Parameters") /* Parameters com.amazonaws.rds#RecommendedAction$Parameters */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_recommended_action_parameter_list::de_recommended_action_parameter_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parameters(var_5);
            }
            ,
            s if s.matches("ApplyModes") /* ApplyModes com.amazonaws.rds#RecommendedAction$ApplyModes */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_string_list::de_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_apply_modes(var_6);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.rds#RecommendedAction$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            s if s.matches("IssueDetails") /* IssueDetails com.amazonaws.rds#RecommendedAction$IssueDetails */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_issue_details::de_issue_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_issue_details(var_8);
            }
            ,
            s if s.matches("ContextAttributes") /* ContextAttributes com.amazonaws.rds#RecommendedAction$ContextAttributes */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_context_attribute_list::de_context_attribute_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_context_attributes(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
