// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_from_s3_input_input(
    input: &crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZones");
    if let Some(var_2) = &input.availability_zones {
        let mut list_4 = scope_1.start_list(false, Some("AvailabilityZone"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_7) = &input.backup_retention_period {
        scope_6.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("CharacterSetName");
    if let Some(var_9) = &input.character_set_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("DatabaseName");
    if let Some(var_11) = &input.database_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("DBClusterIdentifier");
    if let Some(var_13) = &input.db_cluster_identifier {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_15) = &input.db_cluster_parameter_group_name {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_17) = &input.vpc_security_group_ids {
        let mut list_19 = scope_16.start_list(false, Some("VpcSecurityGroupId"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DBSubnetGroupName");
    if let Some(var_22) = &input.db_subnet_group_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Engine");
    if let Some(var_24) = &input.engine {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("EngineVersion");
    if let Some(var_26) = &input.engine_version {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Port");
    if let Some(var_28) = &input.port {
        scope_27.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("MasterUsername");
    if let Some(var_30) = &input.master_username {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("MasterUserPassword");
    if let Some(var_32) = &input.master_user_password {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("OptionGroupName");
    if let Some(var_34) = &input.option_group_name {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("PreferredBackupWindow");
    if let Some(var_36) = &input.preferred_backup_window {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_38) = &input.preferred_maintenance_window {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("Tags");
    if let Some(var_40) = &input.tags {
        let mut list_42 = scope_39.start_list(false, Some("Tag"));
        for item_41 in var_40 {
            #[allow(unused_mut)]
            let mut entry_43 = list_42.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_43, item_41)?;
        }
        list_42.finish();
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("StorageEncrypted");
    if let Some(var_45) = &input.storage_encrypted {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("KmsKeyId");
    if let Some(var_47) = &input.kms_key_id {
        scope_46.string(var_47);
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_49) = &input.enable_iam_database_authentication {
        scope_48.boolean(*var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceEngine");
    if let Some(var_51) = &input.source_engine {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("SourceEngineVersion");
    if let Some(var_53) = &input.source_engine_version {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("S3BucketName");
    if let Some(var_55) = &input.s3_bucket_name {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("S3Prefix");
    if let Some(var_57) = &input.s3_prefix {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_59) = &input.s3_ingestion_role_arn {
        scope_58.string(var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("BacktrackWindow");
    if let Some(var_61) = &input.backtrack_window {
        scope_60.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_63) = &input.enable_cloudwatch_logs_exports {
        let mut list_65 = scope_62.start_list(false, None);
        for item_64 in var_63 {
            #[allow(unused_mut)]
            let mut entry_66 = list_65.entry();
            entry_66.string(item_64);
        }
        list_65.finish();
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("DeletionProtection");
    if let Some(var_68) = &input.deletion_protection {
        scope_67.boolean(*var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_70) = &input.copy_tags_to_snapshot {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Domain");
    if let Some(var_72) = &input.domain {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("DomainIAMRoleName");
    if let Some(var_74) = &input.domain_iam_role_name {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_76) = &input.serverless_v2_scaling_configuration {
        crate::protocol_serde::shape_serverless_v2_scaling_configuration::ser_serverless_v2_scaling_configuration(scope_75, var_76)?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("NetworkType");
    if let Some(var_78) = &input.network_type {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("ManageMasterUserPassword");
    if let Some(var_80) = &input.manage_master_user_password {
        scope_79.boolean(*var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("MasterUserSecretKmsKeyId");
    if let Some(var_82) = &input.master_user_secret_kms_key_id {
        scope_81.string(var_82);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
