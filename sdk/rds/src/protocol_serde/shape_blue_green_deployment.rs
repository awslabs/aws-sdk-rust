// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_blue_green_deployment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::BlueGreenDeployment, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::BlueGreenDeployment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("BlueGreenDeploymentIdentifier") /* BlueGreenDeploymentIdentifier com.amazonaws.rds#BlueGreenDeployment$BlueGreenDeploymentIdentifier */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_blue_green_deployment_identifier(var_1);
            }
            ,
            s if s.matches("BlueGreenDeploymentName") /* BlueGreenDeploymentName com.amazonaws.rds#BlueGreenDeployment$BlueGreenDeploymentName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_blue_green_deployment_name(var_2);
            }
            ,
            s if s.matches("Source") /* Source com.amazonaws.rds#BlueGreenDeployment$Source */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_3);
            }
            ,
            s if s.matches("Target") /* Target com.amazonaws.rds#BlueGreenDeployment$Target */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target(var_4);
            }
            ,
            s if s.matches("SwitchoverDetails") /* SwitchoverDetails com.amazonaws.rds#BlueGreenDeployment$SwitchoverDetails */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_switchover_detail_list::de_switchover_detail_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_switchover_details(var_5);
            }
            ,
            s if s.matches("Tasks") /* Tasks com.amazonaws.rds#BlueGreenDeployment$Tasks */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_blue_green_deployment_task_list::de_blue_green_deployment_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tasks(var_6);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.rds#BlueGreenDeployment$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            s if s.matches("StatusDetails") /* StatusDetails com.amazonaws.rds#BlueGreenDeployment$StatusDetails */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_details(var_8);
            }
            ,
            s if s.matches("CreateTime") /* CreateTime com.amazonaws.rds#BlueGreenDeployment$CreateTime */ =>  {
                let var_9 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_9);
            }
            ,
            s if s.matches("DeleteTime") /* DeleteTime com.amazonaws.rds#BlueGreenDeployment$DeleteTime */ =>  {
                let var_10 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_delete_time(var_10);
            }
            ,
            s if s.matches("TagList") /* TagList com.amazonaws.rds#BlueGreenDeployment$TagList */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_list(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
