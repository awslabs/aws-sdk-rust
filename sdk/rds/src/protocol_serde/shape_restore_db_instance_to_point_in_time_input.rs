// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_instance_to_point_in_time_input_input(
    input: &crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceToPointInTime",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_2) = &input.source_db_instance_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_4) = &input.target_db_instance_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("RestoreTime");
    if let Some(var_6) = &input.restore_time {
        scope_5.date_time(var_6, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_7.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("DBInstanceClass");
    if let Some(var_9) = &input.db_instance_class {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Port");
    if let Some(var_11) = &input.port {
        scope_10.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("AvailabilityZone");
    if let Some(var_13) = &input.availability_zone {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("DBSubnetGroupName");
    if let Some(var_15) = &input.db_subnet_group_name {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("MultiAZ");
    if let Some(var_17) = &input.multi_az {
        scope_16.boolean(*var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("PubliclyAccessible");
    if let Some(var_19) = &input.publicly_accessible {
        scope_18.boolean(*var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_21) = &input.auto_minor_version_upgrade {
        scope_20.boolean(*var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("LicenseModel");
    if let Some(var_23) = &input.license_model {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("DBName");
    if let Some(var_25) = &input.db_name {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("Engine");
    if let Some(var_27) = &input.engine {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("Iops");
    if let Some(var_29) = &input.iops {
        scope_28.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("OptionGroupName");
    if let Some(var_31) = &input.option_group_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_33) = &input.copy_tags_to_snapshot {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("Tags");
    if let Some(var_35) = &input.tags {
        let mut list_37 = scope_34.start_list(false, Some("Tag"));
        for item_36 in var_35 {
            #[allow(unused_mut)]
            let mut entry_38 = list_37.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_38, item_36)?;
        }
        list_37.finish();
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("StorageType");
    if let Some(var_40) = &input.storage_type {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("TdeCredentialArn");
    if let Some(var_42) = &input.tde_credential_arn {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TdeCredentialPassword");
    if let Some(var_44) = &input.tde_credential_password {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_46) = &input.vpc_security_group_ids {
        let mut list_48 = scope_45.start_list(false, Some("VpcSecurityGroupId"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            entry_49.string(item_47);
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("Domain");
    if let Some(var_51) = &input.domain {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("DomainIAMRoleName");
    if let Some(var_53) = &input.domain_iam_role_name {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_55) = &input.enable_iam_database_authentication {
        scope_54.boolean(*var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_57) = &input.enable_cloudwatch_logs_exports {
        let mut list_59 = scope_56.start_list(false, None);
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            entry_60.string(item_58);
        }
        list_59.finish();
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ProcessorFeatures");
    if let Some(var_62) = &input.processor_features {
        let mut list_64 = scope_61.start_list(false, Some("ProcessorFeature"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::protocol_serde::shape_processor_feature::ser_processor_feature(
                entry_65, item_63,
            )?;
        }
        list_64.finish();
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_67) = &input.use_default_processor_features {
        scope_66.boolean(*var_67);
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("DBParameterGroupName");
    if let Some(var_69) = &input.db_parameter_group_name {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("DeletionProtection");
    if let Some(var_71) = &input.deletion_protection {
        scope_70.boolean(*var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("SourceDbiResourceId");
    if let Some(var_73) = &input.source_dbi_resource_id {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_75) = &input.max_allocated_storage {
        scope_74.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_77) = &input.source_db_instance_automated_backups_arn {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_79) = &input.enable_customer_owned_ip {
        scope_78.boolean(*var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_81) = &input.custom_iam_instance_profile {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("BackupTarget");
    if let Some(var_83) = &input.backup_target {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("NetworkType");
    if let Some(var_85) = &input.network_type {
        scope_84.string(var_85);
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("StorageThroughput");
    if let Some(var_87) = &input.storage_throughput {
        scope_86.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("AllocatedStorage");
    if let Some(var_89) = &input.allocated_storage {
        scope_88.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
