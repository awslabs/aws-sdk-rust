// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_integration_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::delete_integration::DeleteIntegrationOutput, crate::operation::delete_integration::DeleteIntegrationError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::delete_integration::DeleteIntegrationError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::delete_integration::DeleteIntegrationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "IntegrationConflictOperationFault" => crate::operation::delete_integration::DeleteIntegrationError::IntegrationConflictOperationFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IntegrationConflictOperationFaultBuilder::default();
                output = crate::protocol_serde::shape_integration_conflict_operation_fault::de_integration_conflict_operation_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::delete_integration::DeleteIntegrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IntegrationNotFoundFault" => crate::operation::delete_integration::DeleteIntegrationError::IntegrationNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IntegrationNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_integration_not_found_fault::de_integration_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::delete_integration::DeleteIntegrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidIntegrationStateFault" => crate::operation::delete_integration::DeleteIntegrationError::InvalidIntegrationStateFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidIntegrationStateFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_integration_state_fault::de_invalid_integration_state_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::delete_integration::DeleteIntegrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::delete_integration::DeleteIntegrationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_integration_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::delete_integration::DeleteIntegrationOutput, crate::operation::delete_integration::DeleteIntegrationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_integration::builders::DeleteIntegrationOutputBuilder::default();
        output = crate::protocol_serde::shape_delete_integration::de_delete_integration(_response_body, output)
            .map_err(crate::operation::delete_integration::DeleteIntegrationError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_delete_integration(
    inp: &[u8],
    mut builder: crate::operation::delete_integration::builders::DeleteIntegrationOutputBuilder,
) -> Result<crate::operation::delete_integration::builders::DeleteIntegrationOutputBuilder, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteIntegrationResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DeleteIntegrationResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteIntegrationResult")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected DeleteIntegrationResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("SourceArn") /* SourceArn com.amazonaws.rds.synthetic#DeleteIntegrationOutput$SourceArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_arn(var_1);
            }
            ,
            s if s.matches("TargetArn") /* TargetArn com.amazonaws.rds.synthetic#DeleteIntegrationOutput$TargetArn */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_arn(var_2);
            }
            ,
            s if s.matches("IntegrationName") /* IntegrationName com.amazonaws.rds.synthetic#DeleteIntegrationOutput$IntegrationName */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_integration_name(var_3);
            }
            ,
            s if s.matches("IntegrationArn") /* IntegrationArn com.amazonaws.rds.synthetic#DeleteIntegrationOutput$IntegrationArn */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_integration_arn(var_4);
            }
            ,
            s if s.matches("KMSKeyId") /* KMSKeyId com.amazonaws.rds.synthetic#DeleteIntegrationOutput$KMSKeyId */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_5);
            }
            ,
            s if s.matches("AdditionalEncryptionContext") /* AdditionalEncryptionContext com.amazonaws.rds.synthetic#DeleteIntegrationOutput$AdditionalEncryptionContext */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_encryption_context_map::de_encryption_context_map(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_additional_encryption_context(var_6);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.rds.synthetic#DeleteIntegrationOutput$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::IntegrationStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IntegrationStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.rds.synthetic#DeleteIntegrationOutput$Tags */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_8);
            }
            ,
            s if s.matches("CreateTime") /* CreateTime com.amazonaws.rds.synthetic#DeleteIntegrationOutput$CreateTime */ =>  {
                let var_9 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_9);
            }
            ,
            s if s.matches("Errors") /* Errors com.amazonaws.rds.synthetic#DeleteIntegrationOutput$Errors */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_integration_error_list::de_integration_error_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_errors(var_10);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom("expected DeleteIntegrationResult tag"));
    };
    Ok(builder)
}
