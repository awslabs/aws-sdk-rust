// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_to_point_in_time_input_input(
    input: &crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RestoreType");
    if let Some(var_4) = &input.restore_type {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_6) = &input.source_db_cluster_identifier {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RestoreToTime");
    if let Some(var_8) = &input.restore_to_time {
        scope_7.date_time(var_8, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_9.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Port");
    if let Some(var_11) = &input.port {
        scope_10.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("DBSubnetGroupName");
    if let Some(var_13) = &input.db_subnet_group_name {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("OptionGroupName");
    if let Some(var_15) = &input.option_group_name {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_17) = &input.vpc_security_group_ids {
        let mut list_19 = scope_16.start_list(false, Some("VpcSecurityGroupId"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("Tags");
    if let Some(var_22) = &input.tags {
        let mut list_24 = scope_21.start_list(false, Some("Tag"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("KmsKeyId");
    if let Some(var_27) = &input.kms_key_id {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_29) = &input.enable_iam_database_authentication {
        scope_28.boolean(*var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("BacktrackWindow");
    if let Some(var_31) = &input.backtrack_window {
        scope_30.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_31).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_33) = &input.enable_cloudwatch_logs_exports {
        let mut list_35 = scope_32.start_list(false, None);
        for item_34 in var_33 {
            #[allow(unused_mut)]
            let mut entry_36 = list_35.entry();
            entry_36.string(item_34);
        }
        list_35.finish();
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_38) = &input.db_cluster_parameter_group_name {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("DeletionProtection");
    if let Some(var_40) = &input.deletion_protection {
        scope_39.boolean(*var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_42) = &input.copy_tags_to_snapshot {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("Domain");
    if let Some(var_44) = &input.domain {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("DomainIAMRoleName");
    if let Some(var_46) = &input.domain_iam_role_name {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("ScalingConfiguration");
    if let Some(var_48) = &input.scaling_configuration {
        crate::protocol_serde::shape_scaling_configuration::ser_scaling_configuration(
            scope_47, var_48,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("EngineMode");
    if let Some(var_50) = &input.engine_mode {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_52) = &input.db_cluster_instance_class {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("StorageType");
    if let Some(var_54) = &input.storage_type {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("PubliclyAccessible");
    if let Some(var_56) = &input.publicly_accessible {
        scope_55.boolean(*var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("Iops");
    if let Some(var_58) = &input.iops {
        scope_57.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_60) = &input.serverless_v2_scaling_configuration {
        crate::protocol_serde::shape_serverless_v2_scaling_configuration::ser_serverless_v2_scaling_configuration(scope_59, var_60)?;
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("NetworkType");
    if let Some(var_62) = &input.network_type {
        scope_61.string(var_62);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
