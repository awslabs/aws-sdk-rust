// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_db_recommendation(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::DbRecommendation, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DbRecommendation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RecommendationId") /* RecommendationId com.amazonaws.rds#DBRecommendation$RecommendationId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_recommendation_id(var_1);
            }
            ,
            s if s.matches("TypeId") /* TypeId com.amazonaws.rds#DBRecommendation$TypeId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_id(var_2);
            }
            ,
            s if s.matches("Severity") /* Severity com.amazonaws.rds#DBRecommendation$Severity */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_severity(var_3);
            }
            ,
            s if s.matches("ResourceArn") /* ResourceArn com.amazonaws.rds#DBRecommendation$ResourceArn */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_arn(var_4);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.rds#DBRecommendation$Status */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_5);
            }
            ,
            s if s.matches("CreatedTime") /* CreatedTime com.amazonaws.rds#DBRecommendation$CreatedTime */ =>  {
                let var_6 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_created_time(var_6);
            }
            ,
            s if s.matches("UpdatedTime") /* UpdatedTime com.amazonaws.rds#DBRecommendation$UpdatedTime */ =>  {
                let var_7 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_updated_time(var_7);
            }
            ,
            s if s.matches("Detection") /* Detection com.amazonaws.rds#DBRecommendation$Detection */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_detection(var_8);
            }
            ,
            s if s.matches("Recommendation") /* Recommendation com.amazonaws.rds#DBRecommendation$Recommendation */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_recommendation(var_9);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.rds#DBRecommendation$Description */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_10);
            }
            ,
            s if s.matches("Reason") /* Reason com.amazonaws.rds#DBRecommendation$Reason */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reason(var_11);
            }
            ,
            s if s.matches("RecommendedActions") /* RecommendedActions com.amazonaws.rds#DBRecommendation$RecommendedActions */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_recommended_action_list::de_recommended_action_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_recommended_actions(var_12);
            }
            ,
            s if s.matches("Category") /* Category com.amazonaws.rds#DBRecommendation$Category */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_category(var_13);
            }
            ,
            s if s.matches("Source") /* Source com.amazonaws.rds#DBRecommendation$Source */ =>  {
                let var_14 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_14);
            }
            ,
            s if s.matches("TypeDetection") /* TypeDetection com.amazonaws.rds#DBRecommendation$TypeDetection */ =>  {
                let var_15 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_detection(var_15);
            }
            ,
            s if s.matches("TypeRecommendation") /* TypeRecommendation com.amazonaws.rds#DBRecommendation$TypeRecommendation */ =>  {
                let var_16 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type_recommendation(var_16);
            }
            ,
            s if s.matches("Impact") /* Impact com.amazonaws.rds#DBRecommendation$Impact */ =>  {
                let var_17 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_impact(var_17);
            }
            ,
            s if s.matches("AdditionalInfo") /* AdditionalInfo com.amazonaws.rds#DBRecommendation$AdditionalInfo */ =>  {
                let var_18 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_additional_info(var_18);
            }
            ,
            s if s.matches("Links") /* Links com.amazonaws.rds#DBRecommendation$Links */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_doc_link_list::de_doc_link_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_links(var_19);
            }
            ,
            s if s.matches("IssueDetails") /* IssueDetails com.amazonaws.rds#DBRecommendation$IssueDetails */ =>  {
                let var_20 =
                    Some(
                        crate::protocol_serde::shape_issue_details::de_issue_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_issue_details(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
