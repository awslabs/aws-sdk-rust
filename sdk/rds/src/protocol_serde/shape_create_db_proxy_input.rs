// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_db_proxy_input_input(
    input: &crate::operation::create_db_proxy::CreateDbProxyInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBProxyName");
    if let Some(var_2) = &input.db_proxy_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EngineFamily");
    if let Some(var_4) = &input.engine_family {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Auth");
    if let Some(var_6) = &input.auth {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_user_auth_config::ser_user_auth_config(entry_9, item_7)?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("RoleArn");
    if let Some(var_11) = &input.role_arn {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("VpcSubnetIds");
    if let Some(var_13) = &input.vpc_subnet_ids {
        let mut list_15 = scope_12.start_list(false, None);
        for item_14 in var_13 {
            #[allow(unused_mut)]
            let mut entry_16 = list_15.entry();
            entry_16.string(item_14);
        }
        list_15.finish();
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_18) = &input.vpc_security_group_ids {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("RequireTLS");
    if let Some(var_23) = &input.require_tls {
        scope_22.boolean(*var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("IdleClientTimeout");
    if let Some(var_25) = &input.idle_client_timeout {
        scope_24.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DebugLogging");
    if let Some(var_27) = &input.debug_logging {
        scope_26.boolean(*var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("Tags");
    if let Some(var_29) = &input.tags {
        let mut list_31 = scope_28.start_list(false, Some("Tag"));
        for item_30 in var_29 {
            #[allow(unused_mut)]
            let mut entry_32 = list_31.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_32, item_30)?;
        }
        list_31.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
