// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_instance_from_db_snapshot_input_input(
    input: &crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceFromDBSnapshot",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2) = &input.db_instance_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_4) = &input.db_snapshot_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DBInstanceClass");
    if let Some(var_6) = &input.db_instance_class {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Port");
    if let Some(var_8) = &input.port {
        scope_7.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AvailabilityZone");
    if let Some(var_10) = &input.availability_zone {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("DBSubnetGroupName");
    if let Some(var_12) = &input.db_subnet_group_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MultiAZ");
    if let Some(var_14) = &input.multi_az {
        scope_13.boolean(*var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("PubliclyAccessible");
    if let Some(var_16) = &input.publicly_accessible {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_18) = &input.auto_minor_version_upgrade {
        scope_17.boolean(*var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("LicenseModel");
    if let Some(var_20) = &input.license_model {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DBName");
    if let Some(var_22) = &input.db_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Engine");
    if let Some(var_24) = &input.engine {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("Iops");
    if let Some(var_26) = &input.iops {
        scope_25.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("OptionGroupName");
    if let Some(var_28) = &input.option_group_name {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("Tags");
    if let Some(var_30) = &input.tags {
        let mut list_32 = scope_29.start_list(false, Some("Tag"));
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_33, item_31)?;
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("StorageType");
    if let Some(var_35) = &input.storage_type {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("TdeCredentialArn");
    if let Some(var_37) = &input.tde_credential_arn {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("TdeCredentialPassword");
    if let Some(var_39) = &input.tde_credential_password {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_41) = &input.vpc_security_group_ids {
        let mut list_43 = scope_40.start_list(false, Some("VpcSecurityGroupId"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            entry_44.string(item_42);
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Domain");
    if let Some(var_46) = &input.domain {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_48) = &input.copy_tags_to_snapshot {
        scope_47.boolean(*var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("DomainIAMRoleName");
    if let Some(var_50) = &input.domain_iam_role_name {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_52) = &input.enable_iam_database_authentication {
        scope_51.boolean(*var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_54) = &input.enable_cloudwatch_logs_exports {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            entry_57.string(item_55);
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("ProcessorFeatures");
    if let Some(var_59) = &input.processor_features {
        let mut list_61 = scope_58.start_list(false, Some("ProcessorFeature"));
        for item_60 in var_59 {
            #[allow(unused_mut)]
            let mut entry_62 = list_61.entry();
            crate::protocol_serde::shape_processor_feature::ser_processor_feature(
                entry_62, item_60,
            )?;
        }
        list_61.finish();
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_64) = &input.use_default_processor_features {
        scope_63.boolean(*var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("DBParameterGroupName");
    if let Some(var_66) = &input.db_parameter_group_name {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("DeletionProtection");
    if let Some(var_68) = &input.deletion_protection {
        scope_67.boolean(*var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_70) = &input.enable_customer_owned_ip {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_72) = &input.custom_iam_instance_profile {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("BackupTarget");
    if let Some(var_74) = &input.backup_target {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("NetworkType");
    if let Some(var_76) = &input.network_type {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("StorageThroughput");
    if let Some(var_78) = &input.storage_throughput {
        scope_77.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_80) = &input.db_cluster_snapshot_identifier {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("AllocatedStorage");
    if let Some(var_82) = &input.allocated_storage {
        scope_81.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_82).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
