// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_valid_storage_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ValidStorageOptions, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ValidStorageOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StorageType") /* StorageType com.amazonaws.rds#ValidStorageOptions$StorageType */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_type(var_1);
            }
            ,
            s if s.matches("StorageSize") /* StorageSize com.amazonaws.rds#ValidStorageOptions$StorageSize */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_range_list::de_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage_size(var_2);
            }
            ,
            s if s.matches("ProvisionedIops") /* ProvisionedIops com.amazonaws.rds#ValidStorageOptions$ProvisionedIops */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_range_list::de_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_provisioned_iops(var_3);
            }
            ,
            s if s.matches("IopsToStorageRatio") /* IopsToStorageRatio com.amazonaws.rds#ValidStorageOptions$IopsToStorageRatio */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_double_range_list::de_double_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iops_to_storage_ratio(var_4);
            }
            ,
            s if s.matches("SupportsStorageAutoscaling") /* SupportsStorageAutoscaling com.amazonaws.rds#ValidStorageOptions$SupportsStorageAutoscaling */ =>  {
                let var_5 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_storage_autoscaling(var_5);
            }
            ,
            s if s.matches("ProvisionedStorageThroughput") /* ProvisionedStorageThroughput com.amazonaws.rds#ValidStorageOptions$ProvisionedStorageThroughput */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_range_list::de_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_provisioned_storage_throughput(var_6);
            }
            ,
            s if s.matches("StorageThroughputToIopsRatio") /* StorageThroughputToIopsRatio com.amazonaws.rds#ValidStorageOptions$StorageThroughputToIopsRatio */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_double_range_list::de_double_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage_throughput_to_iops_ratio(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
