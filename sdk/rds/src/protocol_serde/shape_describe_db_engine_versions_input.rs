// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_db_engine_versions_input_input(
    input: &crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Engine");
    if let Some(var_2) = &input.engine {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EngineVersion");
    if let Some(var_4) = &input.engine_version {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_6) = &input.db_parameter_group_family {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Filters");
    if let Some(var_8) = &input.filters {
        let mut list_10 = scope_7.start_list(false, Some("Filter"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_11, item_9)?;
        }
        list_10.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MaxRecords");
    if let Some(var_13) = &input.max_records {
        scope_12.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Marker");
    if let Some(var_15) = &input.marker {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("DefaultOnly");
    if let Some(var_17) = &input.default_only {
        scope_16.boolean(*var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_19) = &input.list_supported_character_sets {
        scope_18.boolean(*var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ListSupportedTimezones");
    if let Some(var_21) = &input.list_supported_timezones {
        scope_20.boolean(*var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("IncludeAll");
    if let Some(var_23) = &input.include_all {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
