// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_db_proxy_target(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::DbProxyTarget, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DbProxyTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetArn") /* TargetArn com.amazonaws.rds#DBProxyTarget$TargetArn */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_arn(var_1);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.rds#DBProxyTarget$Endpoint */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_2);
            }
            ,
            s if s.matches("TrackedClusterId") /* TrackedClusterId com.amazonaws.rds#DBProxyTarget$TrackedClusterId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tracked_cluster_id(var_3);
            }
            ,
            s if s.matches("RdsResourceId") /* RdsResourceId com.amazonaws.rds#DBProxyTarget$RdsResourceId */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_rds_resource_id(var_4);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.rds#DBProxyTarget$Port */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.rds#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_5);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.rds#DBProxyTarget$Type */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::TargetType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TargetType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_6);
            }
            ,
            s if s.matches("Role") /* Role com.amazonaws.rds#DBProxyTarget$Role */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::TargetRole, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TargetRole::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_role(var_7);
            }
            ,
            s if s.matches("TargetHealth") /* TargetHealth com.amazonaws.rds#DBProxyTarget$TargetHealth */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_target_health::de_target_health(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_health(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
