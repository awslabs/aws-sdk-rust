// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_custom_db_engine_version_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionOutput,
    crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CustomDBEngineVersionAlreadyExistsFault" => crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::CustomDbEngineVersionAlreadyExistsFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CustomDbEngineVersionAlreadyExistsFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_custom_db_engine_version_already_exists_fault::de_custom_db_engine_version_already_exists_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CustomDBEngineVersionQuotaExceededFault" => crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::CustomDbEngineVersionQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CustomDbEngineVersionQuotaExceededFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_custom_db_engine_version_quota_exceeded_fault::de_custom_db_engine_version_quota_exceeded_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "Ec2ImagePropertiesNotSupportedFault" => crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::Ec2ImagePropertiesNotSupportedFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::Ec2ImagePropertiesNotSupportedFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_ec2_image_properties_not_supported_fault::de_ec2_image_properties_not_supported_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "KMSKeyNotAccessibleFault" => crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::KmsKeyNotAccessibleFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::KmsKeyNotAccessibleFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_kms_key_not_accessible_fault::de_kms_key_not_accessible_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_custom_db_engine_version_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionOutput,
    crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_custom_db_engine_version::builders::CreateCustomDbEngineVersionOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_custom_db_engine_version::de_create_custom_db_engine_version(response.body().as_ref(), output).map_err(crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_create_custom_db_engine_version(inp: &[u8], mut builder: crate::operation::create_custom_db_engine_version::builders::CreateCustomDbEngineVersionOutputBuilder) -> Result<crate::operation::create_custom_db_engine_version::builders::CreateCustomDbEngineVersionOutputBuilder, aws_smithy_xml::decode::XmlDecodeError>{
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateCustomDBEngineVersionResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected CreateCustomDBEngineVersionResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateCustomDBEngineVersionResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected CreateCustomDBEngineVersionResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Engine") /* Engine com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$Engine */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_1);
            }
            ,
            s if s.matches("EngineVersion") /* EngineVersion com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$EngineVersion */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_version(var_2);
            }
            ,
            s if s.matches("DBParameterGroupFamily") /* DBParameterGroupFamily com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DBParameterGroupFamily */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_parameter_group_family(var_3);
            }
            ,
            s if s.matches("DBEngineDescription") /* DBEngineDescription com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DBEngineDescription */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_description(var_4);
            }
            ,
            s if s.matches("DBEngineVersionDescription") /* DBEngineVersionDescription com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DBEngineVersionDescription */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_version_description(var_5);
            }
            ,
            s if s.matches("DefaultCharacterSet") /* DefaultCharacterSet com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DefaultCharacterSet */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_character_set::de_character_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_default_character_set(var_6);
            }
            ,
            s if s.matches("Image") /* Image com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$Image */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_custom_db_engine_version_ami::de_custom_db_engine_version_ami(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_image(var_7);
            }
            ,
            s if s.matches("DBEngineMediaType") /* DBEngineMediaType com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DBEngineMediaType */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_media_type(var_8);
            }
            ,
            s if s.matches("SupportedCharacterSets") /* SupportedCharacterSets com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedCharacterSets */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_supported_character_sets_list::de_supported_character_sets_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_character_sets(var_9);
            }
            ,
            s if s.matches("SupportedNcharCharacterSets") /* SupportedNcharCharacterSets com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedNcharCharacterSets */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_supported_character_sets_list::de_supported_character_sets_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_nchar_character_sets(var_10);
            }
            ,
            s if s.matches("ValidUpgradeTarget") /* ValidUpgradeTarget com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$ValidUpgradeTarget */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_valid_upgrade_target_list::de_valid_upgrade_target_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_valid_upgrade_target(var_11);
            }
            ,
            s if s.matches("SupportedTimezones") /* SupportedTimezones com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedTimezones */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_supported_timezones_list::de_supported_timezones_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_timezones(var_12);
            }
            ,
            s if s.matches("ExportableLogTypes") /* ExportableLogTypes com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$ExportableLogTypes */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_log_type_list::de_log_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_exportable_log_types(var_13);
            }
            ,
            s if s.matches("SupportsLogExportsToCloudwatchLogs") /* SupportsLogExportsToCloudwatchLogs com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsLogExportsToCloudwatchLogs */ =>  {
                let var_14 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_log_exports_to_cloudwatch_logs(var_14);
            }
            ,
            s if s.matches("SupportsReadReplica") /* SupportsReadReplica com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsReadReplica */ =>  {
                let var_15 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_read_replica(var_15);
            }
            ,
            s if s.matches("SupportedEngineModes") /* SupportedEngineModes com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedEngineModes */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_engine_mode_list::de_engine_mode_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_engine_modes(var_16);
            }
            ,
            s if s.matches("SupportedFeatureNames") /* SupportedFeatureNames com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedFeatureNames */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_feature_name_list::de_feature_name_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_feature_names(var_17);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$Status */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_18);
            }
            ,
            s if s.matches("SupportsParallelQuery") /* SupportsParallelQuery com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsParallelQuery */ =>  {
                let var_19 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_parallel_query(var_19);
            }
            ,
            s if s.matches("SupportsGlobalDatabases") /* SupportsGlobalDatabases com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsGlobalDatabases */ =>  {
                let var_20 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_global_databases(var_20);
            }
            ,
            s if s.matches("MajorEngineVersion") /* MajorEngineVersion com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$MajorEngineVersion */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_major_engine_version(var_21);
            }
            ,
            s if s.matches("DatabaseInstallationFilesS3BucketName") /* DatabaseInstallationFilesS3BucketName com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DatabaseInstallationFilesS3BucketName */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_database_installation_files_s3_bucket_name(var_22);
            }
            ,
            s if s.matches("DatabaseInstallationFilesS3Prefix") /* DatabaseInstallationFilesS3Prefix com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DatabaseInstallationFilesS3Prefix */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_database_installation_files_s3_prefix(var_23);
            }
            ,
            s if s.matches("DBEngineVersionArn") /* DBEngineVersionArn com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$DBEngineVersionArn */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_engine_version_arn(var_24);
            }
            ,
            s if s.matches("KMSKeyId") /* KMSKeyId com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$KMSKeyId */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_25);
            }
            ,
            s if s.matches("CreateTime") /* CreateTime com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$CreateTime */ =>  {
                let var_26 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_26);
            }
            ,
            s if s.matches("TagList") /* TagList com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$TagList */ =>  {
                let var_27 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_list(var_27);
            }
            ,
            s if s.matches("SupportsBabelfish") /* SupportsBabelfish com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsBabelfish */ =>  {
                let var_28 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_babelfish(var_28);
            }
            ,
            s if s.matches("CustomDBEngineVersionManifest") /* CustomDBEngineVersionManifest com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$CustomDBEngineVersionManifest */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_db_engine_version_manifest(var_29);
            }
            ,
            s if s.matches("SupportsCertificateRotationWithoutRestart") /* SupportsCertificateRotationWithoutRestart com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportsCertificateRotationWithoutRestart */ =>  {
                let var_30 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.rds#BooleanOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_supports_certificate_rotation_without_restart(var_30);
            }
            ,
            s if s.matches("SupportedCACertificateIdentifiers") /* SupportedCACertificateIdentifiers com.amazonaws.rds.synthetic#CreateCustomDBEngineVersionOutput$SupportedCACertificateIdentifiers */ =>  {
                let var_31 =
                    Some(
                        crate::protocol_serde::shape_ca_certificate_identifiers_list::de_ca_certificate_identifiers_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_ca_certificate_identifiers(var_31);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected CreateCustomDBEngineVersionResult tag",
        ));
    };
    Ok(builder)
}
