// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for Amazon Relational Database Service
///
/// Client for invoking operations on Amazon Relational Database Service. Each operation on Amazon Relational Database Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_rds::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Config`] struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_rds::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`AddRoleToDBCluster`](crate::operation::add_role_to_db_cluster) operation has
/// a [`Client::add_role_to_db_cluster`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `send()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.add_role_to_db_cluster()
///     .db_cluster_identifier("example")
///     .send()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    /// - No `behavior_version` is provided.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    #[track_caller]
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    /// - This method will panic if no `BehaviorVersion` is provided. If you experience this panic, set `behavior_version` on the Config or enable the `behavior-version-latest` Cargo feature.
    #[track_caller]
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod add_role_to_db_cluster;

mod add_role_to_db_instance;

mod add_source_identifier_to_subscription;

mod add_tags_to_resource;

mod apply_pending_maintenance_action;

mod authorize_db_security_group_ingress;

mod backtrack_db_cluster;

mod cancel_export_task;

mod copy_db_cluster_parameter_group;

mod copy_db_cluster_snapshot;

mod copy_db_parameter_group;

mod copy_db_snapshot;

mod copy_option_group;

mod create_blue_green_deployment;

mod create_custom_db_engine_version;

mod create_db_cluster;

mod create_db_cluster_endpoint;

mod create_db_cluster_parameter_group;

mod create_db_cluster_snapshot;

mod create_db_instance;

mod create_db_instance_read_replica;

mod create_db_parameter_group;

mod create_db_proxy;

mod create_db_proxy_endpoint;

mod create_db_security_group;

mod create_db_snapshot;

mod create_db_subnet_group;

mod create_event_subscription;

mod create_global_cluster;

mod create_integration;

mod create_option_group;

mod create_tenant_database;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> ::std::result::Result<(), aws_sdk_rds::Error> {
/// # let client: aws_sdk_rds::Client = unimplemented!();
/// use ::http::header::{HeaderName, HeaderValue};
///
/// let result = client.add_role_to_db_cluster()
///     .customize()
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod delete_blue_green_deployment;

mod delete_custom_db_engine_version;

mod delete_db_cluster;

mod delete_db_cluster_automated_backup;

mod delete_db_cluster_endpoint;

mod delete_db_cluster_parameter_group;

mod delete_db_cluster_snapshot;

mod delete_db_instance;

mod delete_db_instance_automated_backup;

mod delete_db_parameter_group;

mod delete_db_proxy;

mod delete_db_proxy_endpoint;

mod delete_db_security_group;

mod delete_db_snapshot;

mod delete_db_subnet_group;

mod delete_event_subscription;

mod delete_global_cluster;

mod delete_integration;

mod delete_option_group;

mod delete_tenant_database;

mod deregister_db_proxy_targets;

mod describe_account_attributes;

mod describe_blue_green_deployments;

mod describe_certificates;

mod describe_db_cluster_automated_backups;

mod describe_db_cluster_backtracks;

mod describe_db_cluster_endpoints;

mod describe_db_cluster_parameter_groups;

mod describe_db_cluster_parameters;

mod describe_db_cluster_snapshot_attributes;

mod describe_db_cluster_snapshots;

mod describe_db_clusters;

mod describe_db_engine_versions;

mod describe_db_instance_automated_backups;

mod describe_db_instances;

mod describe_db_log_files;

mod describe_db_parameter_groups;

mod describe_db_parameters;

mod describe_db_proxies;

mod describe_db_proxy_endpoints;

mod describe_db_proxy_target_groups;

mod describe_db_proxy_targets;

mod describe_db_recommendations;

mod describe_db_security_groups;

mod describe_db_snapshot_attributes;

mod describe_db_snapshot_tenant_databases;

mod describe_db_snapshots;

mod describe_db_subnet_groups;

mod describe_engine_default_cluster_parameters;

mod describe_engine_default_parameters;

mod describe_event_categories;

mod describe_event_subscriptions;

mod describe_events;

mod describe_export_tasks;

mod describe_global_clusters;

mod describe_integrations;

mod describe_option_group_options;

mod describe_option_groups;

mod describe_orderable_db_instance_options;

mod describe_pending_maintenance_actions;

mod describe_reserved_db_instances;

mod describe_reserved_db_instances_offerings;

mod describe_source_regions;

mod describe_tenant_databases;

mod describe_valid_db_instance_modifications;

mod download_db_log_file_portion;

mod failover_db_cluster;

mod failover_global_cluster;

mod list_tags_for_resource;

mod modify_activity_stream;

mod modify_certificates;

mod modify_current_db_cluster_capacity;

mod modify_custom_db_engine_version;

mod modify_db_cluster;

mod modify_db_cluster_endpoint;

mod modify_db_cluster_parameter_group;

mod modify_db_cluster_snapshot_attribute;

mod modify_db_instance;

mod modify_db_parameter_group;

mod modify_db_proxy;

mod modify_db_proxy_endpoint;

mod modify_db_proxy_target_group;

mod modify_db_recommendation;

mod modify_db_snapshot;

mod modify_db_snapshot_attribute;

mod modify_db_subnet_group;

mod modify_event_subscription;

mod modify_global_cluster;

mod modify_option_group;

mod modify_tenant_database;

mod promote_read_replica;

mod promote_read_replica_db_cluster;

mod purchase_reserved_db_instances_offering;

mod reboot_db_cluster;

mod reboot_db_instance;

mod register_db_proxy_targets;

mod remove_from_global_cluster;

mod remove_role_from_db_cluster;

mod remove_role_from_db_instance;

mod remove_source_identifier_from_subscription;

mod remove_tags_from_resource;

mod reset_db_cluster_parameter_group;

mod reset_db_parameter_group;

mod restore_db_cluster_from_s3;

mod restore_db_cluster_from_snapshot;

mod restore_db_cluster_to_point_in_time;

mod restore_db_instance_from_db_snapshot;

mod restore_db_instance_from_s3;

mod restore_db_instance_to_point_in_time;

mod revoke_db_security_group_ingress;

mod start_activity_stream;

mod start_db_cluster;

mod start_db_instance;

mod start_db_instance_automated_backups_replication;

mod start_export_task;

mod stop_activity_stream;

mod stop_db_cluster;

mod stop_db_instance;

mod stop_db_instance_automated_backups_replication;

mod switchover_blue_green_deployment;

mod switchover_global_cluster;

mod switchover_read_replica;
