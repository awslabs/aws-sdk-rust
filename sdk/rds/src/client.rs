// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Relational Database Service
///
/// Client for invoking operations on Amazon Relational Database Service. Each operation on Amazon Relational Database Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_rds::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_rds::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_rds::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

mod add_role_to_db_cluster;

mod add_role_to_db_instance;

mod add_source_identifier_to_subscription;

mod add_tags_to_resource;

mod apply_pending_maintenance_action;

mod authorize_db_security_group_ingress;

mod backtrack_db_cluster;

mod cancel_export_task;

mod copy_db_cluster_parameter_group;

mod copy_db_cluster_snapshot;

mod copy_db_parameter_group;

mod copy_db_snapshot;

mod copy_option_group;

mod create_blue_green_deployment;

mod create_custom_db_engine_version;

mod create_db_cluster;

mod create_db_cluster_endpoint;

mod create_db_cluster_parameter_group;

mod create_db_cluster_snapshot;

mod create_db_instance;

mod create_db_instance_read_replica;

mod create_db_parameter_group;

mod create_db_proxy;

mod create_db_proxy_endpoint;

mod create_db_security_group;

mod create_db_snapshot;

mod create_db_subnet_group;

mod create_event_subscription;

mod create_global_cluster;

mod create_option_group;

mod delete_blue_green_deployment;

mod delete_custom_db_engine_version;

mod delete_db_cluster;

mod delete_db_cluster_endpoint;

mod delete_db_cluster_parameter_group;

mod delete_db_cluster_snapshot;

mod delete_db_instance;

mod delete_db_instance_automated_backup;

mod delete_db_parameter_group;

mod delete_db_proxy;

mod delete_db_proxy_endpoint;

mod delete_db_security_group;

mod delete_db_snapshot;

mod delete_db_subnet_group;

mod delete_event_subscription;

mod delete_global_cluster;

mod delete_option_group;

mod deregister_db_proxy_targets;

mod describe_account_attributes;

mod describe_blue_green_deployments;

mod describe_certificates;

mod describe_db_cluster_backtracks;

mod describe_db_cluster_endpoints;

mod describe_db_cluster_parameter_groups;

mod describe_db_cluster_parameters;

mod describe_db_cluster_snapshot_attributes;

mod describe_db_cluster_snapshots;

mod describe_db_clusters;

mod describe_db_engine_versions;

mod describe_db_instance_automated_backups;

mod describe_db_instances;

mod describe_db_log_files;

mod describe_db_parameter_groups;

mod describe_db_parameters;

mod describe_db_proxies;

mod describe_db_proxy_endpoints;

mod describe_db_proxy_target_groups;

mod describe_db_proxy_targets;

mod describe_db_security_groups;

mod describe_db_snapshot_attributes;

mod describe_db_snapshots;

mod describe_db_subnet_groups;

mod describe_engine_default_cluster_parameters;

mod describe_engine_default_parameters;

mod describe_event_categories;

mod describe_event_subscriptions;

mod describe_events;

mod describe_export_tasks;

mod describe_global_clusters;

mod describe_option_group_options;

mod describe_option_groups;

mod describe_orderable_db_instance_options;

mod describe_pending_maintenance_actions;

mod describe_reserved_db_instances;

mod describe_reserved_db_instances_offerings;

mod describe_source_regions;

mod describe_valid_db_instance_modifications;

mod download_db_log_file_portion;

mod failover_db_cluster;

mod failover_global_cluster;

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;

mod list_tags_for_resource;

mod modify_activity_stream;

mod modify_certificates;

mod modify_current_db_cluster_capacity;

mod modify_custom_db_engine_version;

mod modify_db_cluster;

mod modify_db_cluster_endpoint;

mod modify_db_cluster_parameter_group;

mod modify_db_cluster_snapshot_attribute;

mod modify_db_instance;

mod modify_db_parameter_group;

mod modify_db_proxy;

mod modify_db_proxy_endpoint;

mod modify_db_proxy_target_group;

mod modify_db_snapshot;

mod modify_db_snapshot_attribute;

mod modify_db_subnet_group;

mod modify_event_subscription;

mod modify_global_cluster;

mod modify_option_group;

mod promote_read_replica;

mod promote_read_replica_db_cluster;

mod purchase_reserved_db_instances_offering;

mod reboot_db_cluster;

mod reboot_db_instance;

mod register_db_proxy_targets;

mod remove_from_global_cluster;

mod remove_role_from_db_cluster;

mod remove_role_from_db_instance;

mod remove_source_identifier_from_subscription;

mod remove_tags_from_resource;

mod reset_db_cluster_parameter_group;

mod reset_db_parameter_group;

mod restore_db_cluster_from_s3;

mod restore_db_cluster_from_snapshot;

mod restore_db_cluster_to_point_in_time;

mod restore_db_instance_from_db_snapshot;

mod restore_db_instance_from_s3;

mod restore_db_instance_to_point_in_time;

mod revoke_db_security_group_ingress;

mod start_activity_stream;

mod start_db_cluster;

mod start_db_instance;

mod start_db_instance_automated_backups_replication;

mod start_export_task;

mod stop_activity_stream;

mod stop_db_cluster;

mod stop_db_instance;

mod stop_db_instance_automated_backups_replication;

mod switchover_blue_green_deployment;

mod switchover_read_replica;
