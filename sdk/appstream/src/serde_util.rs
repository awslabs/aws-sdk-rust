// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn app_block_correct_errors(mut builder: crate::types::builders::AppBlockBuilder) -> crate::types::builders::AppBlockBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn app_block_builder_correct_errors(
    mut builder: crate::types::builders::AppBlockBuilderBuilder,
) -> crate::types::builders::AppBlockBuilderBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.platform.is_none() {
        builder.platform = "no value was set".parse::<crate::types::AppBlockBuilderPlatformType>().ok()
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.vpc_config.is_none() {
        builder.vpc_config = {
            let builder = crate::types::builders::VpcConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::AppBlockBuilderState>().ok()
    }
    builder
}

pub(crate) fn app_block_builder_app_block_association_correct_errors(
    mut builder: crate::types::builders::AppBlockBuilderAppBlockAssociationBuilder,
) -> crate::types::builders::AppBlockBuilderAppBlockAssociationBuilder {
    if builder.app_block_arn.is_none() {
        builder.app_block_arn = Some(Default::default())
    }
    if builder.app_block_builder_name.is_none() {
        builder.app_block_builder_name = Some(Default::default())
    }
    builder
}

pub(crate) fn application_fleet_association_correct_errors(
    mut builder: crate::types::builders::ApplicationFleetAssociationBuilder,
) -> crate::types::builders::ApplicationFleetAssociationBuilder {
    if builder.fleet_name.is_none() {
        builder.fleet_name = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn directory_config_correct_errors(
    mut builder: crate::types::builders::DirectoryConfigBuilder,
) -> crate::types::builders::DirectoryConfigBuilder {
    if builder.directory_name.is_none() {
        builder.directory_name = Some(Default::default())
    }
    builder
}

pub(crate) fn entitlement_correct_errors(mut builder: crate::types::builders::EntitlementBuilder) -> crate::types::builders::EntitlementBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.stack_name.is_none() {
        builder.stack_name = Some(Default::default())
    }
    if builder.app_visibility.is_none() {
        builder.app_visibility = "no value was set".parse::<crate::types::AppVisibility>().ok()
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn fleet_correct_errors(mut builder: crate::types::builders::FleetBuilder) -> crate::types::builders::FleetBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.compute_capacity_status.is_none() {
        builder.compute_capacity_status = {
            let builder = crate::types::builders::ComputeCapacityStatusBuilder::default();
            Some(crate::serde_util::compute_capacity_status_correct_errors(builder).build())
        }
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::FleetState>().ok()
    }
    builder
}

pub(crate) fn image_correct_errors(mut builder: crate::types::builders::ImageBuilder) -> crate::types::builders::ImageBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn image_builder_correct_errors(mut builder: crate::types::builders::ImageBuilderBuilder) -> crate::types::builders::ImageBuilderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn stack_correct_errors(mut builder: crate::types::builders::StackBuilder) -> crate::types::builders::StackBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn compute_capacity_status_correct_errors(
    mut builder: crate::types::builders::ComputeCapacityStatusBuilder,
) -> crate::types::builders::ComputeCapacityStatusBuilder {
    if builder.desired.is_none() {
        builder.desired = Some(Default::default())
    }
    builder
}

pub(crate) fn entitled_application_correct_errors(
    mut builder: crate::types::builders::EntitledApplicationBuilder,
) -> crate::types::builders::EntitledApplicationBuilder {
    if builder.application_identifier.is_none() {
        builder.application_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn script_details_correct_errors(
    mut builder: crate::types::builders::ScriptDetailsBuilder,
) -> crate::types::builders::ScriptDetailsBuilder {
    if builder.script_s3_location.is_none() {
        builder.script_s3_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            Some(crate::serde_util::s3_location_correct_errors(builder).build())
        }
    }
    if builder.executable_path.is_none() {
        builder.executable_path = Some(Default::default())
    }
    if builder.timeout_in_seconds.is_none() {
        builder.timeout_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn service_account_credentials_correct_errors(
    mut builder: crate::types::builders::ServiceAccountCredentialsBuilder,
) -> crate::types::builders::ServiceAccountCredentialsBuilder {
    if builder.account_name.is_none() {
        builder.account_name = Some(Default::default())
    }
    if builder.account_password.is_none() {
        builder.account_password = Some(Default::default())
    }
    builder
}

pub(crate) fn session_correct_errors(mut builder: crate::types::builders::SessionBuilder) -> crate::types::builders::SessionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    if builder.stack_name.is_none() {
        builder.stack_name = Some(Default::default())
    }
    if builder.fleet_name.is_none() {
        builder.fleet_name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::SessionState>().ok()
    }
    builder
}

pub(crate) fn shared_image_permissions_correct_errors(
    mut builder: crate::types::builders::SharedImagePermissionsBuilder,
) -> crate::types::builders::SharedImagePermissionsBuilder {
    if builder.shared_account_id.is_none() {
        builder.shared_account_id = Some(Default::default())
    }
    if builder.image_permissions.is_none() {
        builder.image_permissions = {
            let builder = crate::types::builders::ImagePermissionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn user_correct_errors(mut builder: crate::types::builders::UserBuilder) -> crate::types::builders::UserBuilder {
    if builder.authentication_type.is_none() {
        builder.authentication_type = "no value was set".parse::<crate::types::AuthenticationType>().ok()
    }
    builder
}

pub(crate) fn user_stack_association_correct_errors(
    mut builder: crate::types::builders::UserStackAssociationBuilder,
) -> crate::types::builders::UserStackAssociationBuilder {
    if builder.stack_name.is_none() {
        builder.stack_name = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.authentication_type.is_none() {
        builder.authentication_type = "no value was set".parse::<crate::types::AuthenticationType>().ok()
    }
    builder
}

pub(crate) fn access_endpoint_correct_errors(
    mut builder: crate::types::builders::AccessEndpointBuilder,
) -> crate::types::builders::AccessEndpointBuilder {
    if builder.endpoint_type.is_none() {
        builder.endpoint_type = "no value was set".parse::<crate::types::AccessEndpointType>().ok()
    }
    builder
}

pub(crate) fn entitlement_attribute_correct_errors(
    mut builder: crate::types::builders::EntitlementAttributeBuilder,
) -> crate::types::builders::EntitlementAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_connector_correct_errors(
    mut builder: crate::types::builders::StorageConnectorBuilder,
) -> crate::types::builders::StorageConnectorBuilder {
    if builder.connector_type.is_none() {
        builder.connector_type = "no value was set".parse::<crate::types::StorageConnectorType>().ok()
    }
    builder
}

pub(crate) fn user_setting_correct_errors(mut builder: crate::types::builders::UserSettingBuilder) -> crate::types::builders::UserSettingBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::Action>().ok()
    }
    if builder.permission.is_none() {
        builder.permission = "no value was set".parse::<crate::types::Permission>().ok()
    }
    builder
}
