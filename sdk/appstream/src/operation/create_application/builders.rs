// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_application::_create_application_output::CreateApplicationOutputBuilder;

pub use crate::operation::create_application::_create_application_input::CreateApplicationInputBuilder;

impl crate::operation::create_application::builders::CreateApplicationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_application::CreateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_application();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateApplication`.
///
/// <p>Creates an application.</p>
/// <p>Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch.</p>
/// <p>This is only supported for Elastic fleets.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateApplicationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_application::builders::CreateApplicationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_application::CreateApplicationOutput,
        crate::operation::create_application::CreateApplicationError,
    > for CreateApplicationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_application::CreateApplicationOutput,
            crate::operation::create_application::CreateApplicationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateApplicationFluentBuilder {
    /// Creates a new `CreateApplication`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateApplication as a reference.
    pub fn as_input(&self) -> &crate::operation::create_application::builders::CreateApplicationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_application::CreateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_application::CreateApplication::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_application::CreateApplication::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_application::CreateApplicationOutput,
        crate::operation::create_application::CreateApplicationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the application. This name is visible to users when display name is not specified.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the application. This name is visible to users when display name is not specified.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the application. This name is visible to users when display name is not specified.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The display name of the application. This name is visible to users in the application catalog.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The display name of the application. This name is visible to users in the application catalog.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The display name of the application. This name is visible to users in the application catalog.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>The description of the application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The location in S3 of the application icon.</p>
    pub fn icon_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.inner = self.inner.icon_s3_location(input);
        self
    }
    /// <p>The location in S3 of the application icon.</p>
    pub fn set_icon_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.inner = self.inner.set_icon_s3_location(input);
        self
    }
    /// <p>The location in S3 of the application icon.</p>
    pub fn get_icon_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        self.inner.get_icon_s3_location()
    }
    /// <p>The launch path of the application.</p>
    pub fn launch_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.launch_path(input.into());
        self
    }
    /// <p>The launch path of the application.</p>
    pub fn set_launch_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_launch_path(input);
        self
    }
    /// <p>The launch path of the application.</p>
    pub fn get_launch_path(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_launch_path()
    }
    /// <p>The working directory of the application.</p>
    pub fn working_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.working_directory(input.into());
        self
    }
    /// <p>The working directory of the application.</p>
    pub fn set_working_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_working_directory(input);
        self
    }
    /// <p>The working directory of the application.</p>
    pub fn get_working_directory(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_working_directory()
    }
    /// <p>The launch parameters of the application.</p>
    pub fn launch_parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.launch_parameters(input.into());
        self
    }
    /// <p>The launch parameters of the application.</p>
    pub fn set_launch_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_launch_parameters(input);
        self
    }
    /// <p>The launch parameters of the application.</p>
    pub fn get_launch_parameters(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_launch_parameters()
    }
    ///
    /// Appends an item to `Platforms`.
    ///
    /// To override the contents of this collection use [`set_platforms`](Self::set_platforms).
    ///
    /// <p>The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn platforms(mut self, input: crate::types::PlatformType) -> Self {
        self.inner = self.inner.platforms(input);
        self
    }
    /// <p>The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn set_platforms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PlatformType>>) -> Self {
        self.inner = self.inner.set_platforms(input);
        self
    }
    /// <p>The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn get_platforms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PlatformType>> {
        self.inner.get_platforms()
    }
    ///
    /// Appends an item to `InstanceFamilies`.
    ///
    /// To override the contents of this collection use [`set_instance_families`](Self::set_instance_families).
    ///
    /// <p>The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.</p>
    pub fn instance_families(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_families(input.into());
        self
    }
    /// <p>The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.</p>
    pub fn set_instance_families(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_instance_families(input);
        self
    }
    /// <p>The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.</p>
    pub fn get_instance_families(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_instance_families()
    }
    /// <p>The app block ARN to which the application should be associated</p>
    pub fn app_block_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_block_arn(input.into());
        self
    }
    /// <p>The app block ARN to which the application should be associated</p>
    pub fn set_app_block_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_block_arn(input);
        self
    }
    /// <p>The app block ARN to which the application should be associated</p>
    pub fn get_app_block_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_block_arn()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the application.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags assigned to the application.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags assigned to the application.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
