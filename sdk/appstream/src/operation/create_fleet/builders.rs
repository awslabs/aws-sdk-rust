// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_fleet::_create_fleet_output::CreateFleetOutputBuilder;

pub use crate::operation::create_fleet::_create_fleet_input::CreateFleetInputBuilder;

impl crate::operation::create_fleet::builders::CreateFleetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_fleet::CreateFleetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_fleet::CreateFleetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_fleet();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateFleet`.
///
/// <p>Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateFleetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_fleet::builders::CreateFleetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_fleet::CreateFleetOutput,
        crate::operation::create_fleet::CreateFleetError,
    > for CreateFleetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_fleet::CreateFleetOutput,
            crate::operation::create_fleet::CreateFleetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateFleetFluentBuilder {
    /// Creates a new `CreateFleet`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateFleet as a reference.
    pub fn as_input(&self) -> &crate::operation::create_fleet::builders::CreateFleetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_fleet::CreateFleetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_fleet::CreateFleetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_fleet::CreateFleet::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_fleet::CreateFleet::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_fleet::CreateFleetOutput,
        crate::operation::create_fleet::CreateFleetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique name for the fleet.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A unique name for the fleet.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A unique name for the fleet.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The name of the image used to create the fleet.</p>
    pub fn image_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image used to create the fleet.</p>
    pub fn set_image_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The name of the image used to create the fleet.</p>
    pub fn get_image_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_image_name()
    }
    /// <p>The ARN of the public, private, or shared image to use.</p>
    pub fn image_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.image_arn(input.into());
        self
    }
    /// <p>The ARN of the public, private, or shared image to use.</p>
    pub fn set_image_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_image_arn(input);
        self
    }
    /// <p>The ARN of the public, private, or shared image to use.</p>
    pub fn get_image_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_image_arn()
    }
    /// <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.large</p></li>
    /// <li>
    /// <p>stream.compute.xlarge</p></li>
    /// <li>
    /// <p>stream.compute.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.4xlarge</p></li>
    /// <li>
    /// <p>stream.compute.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.large</p></li>
    /// <li>
    /// <p>stream.memory.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.4xlarge</p></li>
    /// <li>
    /// <p>stream.memory.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.large</p></li>
    /// <li>
    /// <p>stream.memory.z1d.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.3xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.6xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.large</p></li>
    /// <li>
    /// <p>stream.graphics-design.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-desktop.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.16xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.16xlarge</p></li>
    /// </ul>
    /// <p>The following instance types are available for Elastic fleets:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// </ul>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_type(input.into());
        self
    }
    /// <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.large</p></li>
    /// <li>
    /// <p>stream.compute.xlarge</p></li>
    /// <li>
    /// <p>stream.compute.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.4xlarge</p></li>
    /// <li>
    /// <p>stream.compute.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.large</p></li>
    /// <li>
    /// <p>stream.memory.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.4xlarge</p></li>
    /// <li>
    /// <p>stream.memory.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.large</p></li>
    /// <li>
    /// <p>stream.memory.z1d.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.3xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.6xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.large</p></li>
    /// <li>
    /// <p>stream.graphics-design.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-desktop.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.16xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.16xlarge</p></li>
    /// </ul>
    /// <p>The following instance types are available for Elastic fleets:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// </ul>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The instance type to use when launching fleet instances. The following instance types are available:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.large</p></li>
    /// <li>
    /// <p>stream.compute.xlarge</p></li>
    /// <li>
    /// <p>stream.compute.2xlarge</p></li>
    /// <li>
    /// <p>stream.compute.4xlarge</p></li>
    /// <li>
    /// <p>stream.compute.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.large</p></li>
    /// <li>
    /// <p>stream.memory.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.4xlarge</p></li>
    /// <li>
    /// <p>stream.memory.8xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.large</p></li>
    /// <li>
    /// <p>stream.memory.z1d.xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.2xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.3xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.6xlarge</p></li>
    /// <li>
    /// <p>stream.memory.z1d.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.large</p></li>
    /// <li>
    /// <p>stream.graphics-design.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-design.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-desktop.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.2xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.12xlarge</p></li>
    /// <li>
    /// <p>stream.graphics.g4dn.16xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.4xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.8xlarge</p></li>
    /// <li>
    /// <p>stream.graphics-pro.16xlarge</p></li>
    /// </ul>
    /// <p>The following instance types are available for Elastic fleets:</p>
    /// <ul>
    /// <li>
    /// <p>stream.standard.small</p></li>
    /// <li>
    /// <p>stream.standard.medium</p></li>
    /// <li>
    /// <p>stream.standard.large</p></li>
    /// <li>
    /// <p>stream.standard.xlarge</p></li>
    /// <li>
    /// <p>stream.standard.2xlarge</p></li>
    /// </ul>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_type()
    }
    /// <p>The fleet type.</p>
    /// <dl>
    /// <dt>
    /// ALWAYS_ON
    /// </dt>
    /// <dd>
    /// <p>Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.</p>
    /// </dd>
    /// <dt>
    /// ON_DEMAND
    /// </dt>
    /// <dd>
    /// <p>Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.</p>
    /// </dd>
    /// </dl>
    pub fn fleet_type(mut self, input: crate::types::FleetType) -> Self {
        self.inner = self.inner.fleet_type(input);
        self
    }
    /// <p>The fleet type.</p>
    /// <dl>
    /// <dt>
    /// ALWAYS_ON
    /// </dt>
    /// <dd>
    /// <p>Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.</p>
    /// </dd>
    /// <dt>
    /// ON_DEMAND
    /// </dt>
    /// <dd>
    /// <p>Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.</p>
    /// </dd>
    /// </dl>
    pub fn set_fleet_type(mut self, input: ::std::option::Option<crate::types::FleetType>) -> Self {
        self.inner = self.inner.set_fleet_type(input);
        self
    }
    /// <p>The fleet type.</p>
    /// <dl>
    /// <dt>
    /// ALWAYS_ON
    /// </dt>
    /// <dd>
    /// <p>Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.</p>
    /// </dd>
    /// <dt>
    /// ON_DEMAND
    /// </dt>
    /// <dd>
    /// <p>Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.</p>
    /// </dd>
    /// </dl>
    pub fn get_fleet_type(&self) -> &::std::option::Option<crate::types::FleetType> {
        self.inner.get_fleet_type()
    }
    /// <p>The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead.</p>
    pub fn compute_capacity(mut self, input: crate::types::ComputeCapacity) -> Self {
        self.inner = self.inner.compute_capacity(input);
        self
    }
    /// <p>The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead.</p>
    pub fn set_compute_capacity(mut self, input: ::std::option::Option<crate::types::ComputeCapacity>) -> Self {
        self.inner = self.inner.set_compute_capacity(input);
        self
    }
    /// <p>The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead.</p>
    pub fn get_compute_capacity(&self) -> &::std::option::Option<crate::types::ComputeCapacity> {
        self.inner.get_compute_capacity()
    }
    /// <p>The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        self.inner.get_vpc_config()
    }
    /// <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p>
    /// <p>Specify a value between 600 and 432000.</p>
    pub fn max_user_duration_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.max_user_duration_in_seconds(input);
        self
    }
    /// <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p>
    /// <p>Specify a value between 600 and 432000.</p>
    pub fn set_max_user_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_user_duration_in_seconds(input);
        self
    }
    /// <p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p>
    /// <p>Specify a value between 600 and 432000.</p>
    pub fn get_max_user_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_user_duration_in_seconds()
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.</p>
    /// <p>Specify a value between 60 and 360000.</p>
    pub fn disconnect_timeout_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.disconnect_timeout_in_seconds(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.</p>
    /// <p>Specify a value between 60 and 360000.</p>
    pub fn set_disconnect_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_disconnect_timeout_in_seconds(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.</p>
    /// <p>Specify a value between 60 and 360000.</p>
    pub fn get_disconnect_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_disconnect_timeout_in_seconds()
    }
    /// <p>The description to display.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description to display.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description to display.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The fleet name to display.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The fleet name to display.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The fleet name to display.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>Enables or disables default internet access for the fleet.</p>
    pub fn enable_default_internet_access(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_default_internet_access(input);
        self
    }
    /// <p>Enables or disables default internet access for the fleet.</p>
    pub fn set_enable_default_internet_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_default_internet_access(input);
        self
    }
    /// <p>Enables or disables default internet access for the fleet.</p>
    pub fn get_enable_default_internet_access(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_default_internet_access()
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets.</p>
    pub fn domain_join_info(mut self, input: crate::types::DomainJoinInfo) -> Self {
        self.inner = self.inner.domain_join_info(input);
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets.</p>
    pub fn set_domain_join_info(mut self, input: ::std::option::Option<crate::types::DomainJoinInfo>) -> Self {
        self.inner = self.inner.set_domain_join_info(input);
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets.</p>
    pub fn get_domain_join_info(&self) -> &::std::option::Option<crate::types::DomainJoinInfo> {
        self.inner.get_domain_join_info()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.</p>
    /// <p>If you do not specify a value, the value is set to an empty string.</p>
    /// <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:</p>
    /// <p>_ . : / = + \ - @</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.</p>
    /// <p>If you do not specify a value, the value is set to an empty string.</p>
    /// <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:</p>
    /// <p>_ . : / = + \ - @</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.</p>
    /// <p>If you do not specify a value, the value is set to an empty string.</p>
    /// <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:</p>
    /// <p>_ . : / = + \ - @</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If they try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected.</p>
    /// <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p><note>
    /// <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity.</p>
    /// </note>
    pub fn idle_disconnect_timeout_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_disconnect_timeout_in_seconds(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If they try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected.</p>
    /// <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p><note>
    /// <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity.</p>
    /// </note>
    pub fn set_idle_disconnect_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_disconnect_timeout_in_seconds(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If they try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected.</p>
    /// <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p><note>
    /// <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity.</p>
    /// </note>
    pub fn get_idle_disconnect_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_idle_disconnect_timeout_in_seconds()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.iam_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_iam_role_arn()
    }
    /// <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
    /// <p>The default value is <code>APP</code>.</p>
    pub fn stream_view(mut self, input: crate::types::StreamView) -> Self {
        self.inner = self.inner.stream_view(input);
        self
    }
    /// <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
    /// <p>The default value is <code>APP</code>.</p>
    pub fn set_stream_view(mut self, input: ::std::option::Option<crate::types::StreamView>) -> Self {
        self.inner = self.inner.set_stream_view(input);
        self
    }
    /// <p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p>
    /// <p>The default value is <code>APP</code>.</p>
    pub fn get_stream_view(&self) -> &::std::option::Option<crate::types::StreamView> {
        self.inner.get_stream_view()
    }
    /// <p>The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn platform(mut self, input: crate::types::PlatformType) -> Self {
        self.inner = self.inner.platform(input);
        self
    }
    /// <p>The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::PlatformType>) -> Self {
        self.inner = self.inner.set_platform(input);
        self
    }
    /// <p>The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::PlatformType> {
        self.inner.get_platform()
    }
    /// <p>The maximum concurrent sessions of the Elastic fleet. This is required for Elastic fleets, and not allowed for other fleet types.</p>
    pub fn max_concurrent_sessions(mut self, input: i32) -> Self {
        self.inner = self.inner.max_concurrent_sessions(input);
        self
    }
    /// <p>The maximum concurrent sessions of the Elastic fleet. This is required for Elastic fleets, and not allowed for other fleet types.</p>
    pub fn set_max_concurrent_sessions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_concurrent_sessions(input);
        self
    }
    /// <p>The maximum concurrent sessions of the Elastic fleet. This is required for Elastic fleets, and not allowed for other fleet types.</p>
    pub fn get_max_concurrent_sessions(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_concurrent_sessions()
    }
    ///
    /// Appends an item to `UsbDeviceFilterStrings`.
    ///
    /// To override the contents of this collection use [`set_usb_device_filter_strings`](Self::set_usb_device_filter_strings).
    ///
    /// <p>The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.</p>
    pub fn usb_device_filter_strings(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.usb_device_filter_strings(input.into());
        self
    }
    /// <p>The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.</p>
    pub fn set_usb_device_filter_strings(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_usb_device_filter_strings(input);
        self
    }
    /// <p>The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.</p>
    pub fn get_usb_device_filter_strings(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_usb_device_filter_strings()
    }
    /// <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.</p>
    pub fn session_script_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.inner = self.inner.session_script_s3_location(input);
        self
    }
    /// <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.</p>
    pub fn set_session_script_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.inner = self.inner.set_session_script_s3_location(input);
        self
    }
    /// <p>The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.</p>
    pub fn get_session_script_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        self.inner.get_session_script_s3_location()
    }
    /// <p>The maximum number of user sessions on an instance. This only applies to multi-session fleets.</p>
    pub fn max_sessions_per_instance(mut self, input: i32) -> Self {
        self.inner = self.inner.max_sessions_per_instance(input);
        self
    }
    /// <p>The maximum number of user sessions on an instance. This only applies to multi-session fleets.</p>
    pub fn set_max_sessions_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_sessions_per_instance(input);
        self
    }
    /// <p>The maximum number of user sessions on an instance. This only applies to multi-session fleets.</p>
    pub fn get_max_sessions_per_instance(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_sessions_per_instance()
    }
}
