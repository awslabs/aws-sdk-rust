// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeApplicationFleetAssociationsOutput {
    /// <p>The application fleet associations in the list.</p>
    pub application_fleet_associations: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationFleetAssociation>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeApplicationFleetAssociationsOutput {
    /// <p>The application fleet associations in the list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.application_fleet_associations.is_none()`.
    pub fn application_fleet_associations(&self) -> &[crate::types::ApplicationFleetAssociation] {
        self.application_fleet_associations.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeApplicationFleetAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationFleetAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationFleetAssociationsOutput`](crate::operation::describe_application_fleet_associations::DescribeApplicationFleetAssociationsOutput).
    pub fn builder() -> crate::operation::describe_application_fleet_associations::builders::DescribeApplicationFleetAssociationsOutputBuilder {
        crate::operation::describe_application_fleet_associations::builders::DescribeApplicationFleetAssociationsOutputBuilder::default()
    }
}

/// A builder for [`DescribeApplicationFleetAssociationsOutput`](crate::operation::describe_application_fleet_associations::DescribeApplicationFleetAssociationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeApplicationFleetAssociationsOutputBuilder {
    pub(crate) application_fleet_associations: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationFleetAssociation>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeApplicationFleetAssociationsOutputBuilder {
    /// Appends an item to `application_fleet_associations`.
    ///
    /// To override the contents of this collection use [`set_application_fleet_associations`](Self::set_application_fleet_associations).
    ///
    /// <p>The application fleet associations in the list.</p>
    pub fn application_fleet_associations(mut self, input: crate::types::ApplicationFleetAssociation) -> Self {
        let mut v = self.application_fleet_associations.unwrap_or_default();
        v.push(input);
        self.application_fleet_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The application fleet associations in the list.</p>
    pub fn set_application_fleet_associations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationFleetAssociation>>,
    ) -> Self {
        self.application_fleet_associations = input;
        self
    }
    /// <p>The application fleet associations in the list.</p>
    pub fn get_application_fleet_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationFleetAssociation>> {
        &self.application_fleet_associations
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeApplicationFleetAssociationsOutput`](crate::operation::describe_application_fleet_associations::DescribeApplicationFleetAssociationsOutput).
    pub fn build(self) -> crate::operation::describe_application_fleet_associations::DescribeApplicationFleetAssociationsOutput {
        crate::operation::describe_application_fleet_associations::DescribeApplicationFleetAssociationsOutput {
            application_fleet_associations: self.application_fleet_associations,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
