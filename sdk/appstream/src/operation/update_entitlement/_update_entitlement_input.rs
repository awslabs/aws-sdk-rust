// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEntitlementInput {
    /// <p>The name of the entitlement.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the stack with which the entitlement is associated.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    /// <p>The description of the entitlement.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Specifies whether all or only selected apps are entitled.</p>
    #[doc(hidden)]
    pub app_visibility: std::option::Option<crate::types::AppVisibility>,
    /// <p>The attributes of the entitlement.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
}
impl UpdateEntitlementInput {
    /// <p>The name of the entitlement.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The description of the entitlement.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether all or only selected apps are entitled.</p>
    pub fn app_visibility(&self) -> std::option::Option<&crate::types::AppVisibility> {
        self.app_visibility.as_ref()
    }
    /// <p>The attributes of the entitlement.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::EntitlementAttribute]> {
        self.attributes.as_deref()
    }
}
impl UpdateEntitlementInput {
    /// Creates a new builder-style object to manufacture [`UpdateEntitlementInput`](crate::operation::update_entitlement::UpdateEntitlementInput).
    pub fn builder() -> crate::operation::update_entitlement::builders::UpdateEntitlementInputBuilder
    {
        crate::operation::update_entitlement::builders::UpdateEntitlementInputBuilder::default()
    }
}

/// A builder for [`UpdateEntitlementInput`](crate::operation::update_entitlement::UpdateEntitlementInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateEntitlementInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) stack_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) app_visibility: std::option::Option<crate::types::AppVisibility>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
}
impl UpdateEntitlementInputBuilder {
    /// <p>The name of the entitlement.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the entitlement.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The description of the entitlement.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the entitlement.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies whether all or only selected apps are entitled.</p>
    pub fn app_visibility(mut self, input: crate::types::AppVisibility) -> Self {
        self.app_visibility = Some(input);
        self
    }
    /// <p>Specifies whether all or only selected apps are entitled.</p>
    pub fn set_app_visibility(
        mut self,
        input: std::option::Option<crate::types::AppVisibility>,
    ) -> Self {
        self.app_visibility = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The attributes of the entitlement.</p>
    pub fn attributes(mut self, input: crate::types::EntitlementAttribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>The attributes of the entitlement.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEntitlementInput`](crate::operation::update_entitlement::UpdateEntitlementInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_entitlement::UpdateEntitlementInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_entitlement::UpdateEntitlementInput {
                name: self.name,
                stack_name: self.stack_name,
                description: self.description,
                app_visibility: self.app_visibility,
                attributes: self.attributes,
            },
        )
    }
}
