// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDirectoryConfigInput {
    /// <p>The name of the Directory Config object.</p>
    #[doc(hidden)]
    pub directory_name: std::option::Option<std::string::String>,
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    #[doc(hidden)]
    pub organizational_unit_distinguished_names:
        std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    #[doc(hidden)]
    pub service_account_credentials: std::option::Option<crate::types::ServiceAccountCredentials>,
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    #[doc(hidden)]
    pub certificate_based_auth_properties:
        std::option::Option<crate::types::CertificateBasedAuthProperties>,
}
impl UpdateDirectoryConfigInput {
    /// <p>The name of the Directory Config object.</p>
    pub fn directory_name(&self) -> std::option::Option<&str> {
        self.directory_name.as_deref()
    }
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    pub fn organizational_unit_distinguished_names(
        &self,
    ) -> std::option::Option<&[std::string::String]> {
        self.organizational_unit_distinguished_names.as_deref()
    }
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    pub fn service_account_credentials(
        &self,
    ) -> std::option::Option<&crate::types::ServiceAccountCredentials> {
        self.service_account_credentials.as_ref()
    }
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    pub fn certificate_based_auth_properties(
        &self,
    ) -> std::option::Option<&crate::types::CertificateBasedAuthProperties> {
        self.certificate_based_auth_properties.as_ref()
    }
}
impl UpdateDirectoryConfigInput {
    /// Creates a new builder-style object to manufacture [`UpdateDirectoryConfigInput`](crate::operation::update_directory_config::UpdateDirectoryConfigInput).
    pub fn builder(
    ) -> crate::operation::update_directory_config::builders::UpdateDirectoryConfigInputBuilder
    {
        crate::operation::update_directory_config::builders::UpdateDirectoryConfigInputBuilder::default()
    }
}

/// A builder for [`UpdateDirectoryConfigInput`](crate::operation::update_directory_config::UpdateDirectoryConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDirectoryConfigInputBuilder {
    pub(crate) directory_name: std::option::Option<std::string::String>,
    pub(crate) organizational_unit_distinguished_names:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) service_account_credentials:
        std::option::Option<crate::types::ServiceAccountCredentials>,
    pub(crate) certificate_based_auth_properties:
        std::option::Option<crate::types::CertificateBasedAuthProperties>,
}
impl UpdateDirectoryConfigInputBuilder {
    /// <p>The name of the Directory Config object.</p>
    pub fn directory_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_name = Some(input.into());
        self
    }
    /// <p>The name of the Directory Config object.</p>
    pub fn set_directory_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_name = input;
        self
    }
    /// Appends an item to `organizational_unit_distinguished_names`.
    ///
    /// To override the contents of this collection use [`set_organizational_unit_distinguished_names`](Self::set_organizational_unit_distinguished_names).
    ///
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    pub fn organizational_unit_distinguished_names(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self
            .organizational_unit_distinguished_names
            .unwrap_or_default();
        v.push(input.into());
        self.organizational_unit_distinguished_names = Some(v);
        self
    }
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    pub fn set_organizational_unit_distinguished_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.organizational_unit_distinguished_names = input;
        self
    }
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    pub fn service_account_credentials(
        mut self,
        input: crate::types::ServiceAccountCredentials,
    ) -> Self {
        self.service_account_credentials = Some(input);
        self
    }
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    pub fn set_service_account_credentials(
        mut self,
        input: std::option::Option<crate::types::ServiceAccountCredentials>,
    ) -> Self {
        self.service_account_credentials = input;
        self
    }
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    pub fn certificate_based_auth_properties(
        mut self,
        input: crate::types::CertificateBasedAuthProperties,
    ) -> Self {
        self.certificate_based_auth_properties = Some(input);
        self
    }
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    pub fn set_certificate_based_auth_properties(
        mut self,
        input: std::option::Option<crate::types::CertificateBasedAuthProperties>,
    ) -> Self {
        self.certificate_based_auth_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDirectoryConfigInput`](crate::operation::update_directory_config::UpdateDirectoryConfigInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_directory_config::UpdateDirectoryConfigInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_directory_config::UpdateDirectoryConfigInput {
                directory_name: self.directory_name,
                organizational_unit_distinguished_names: self
                    .organizational_unit_distinguished_names,
                service_account_credentials: self.service_account_credentials,
                certificate_based_auth_properties: self.certificate_based_auth_properties,
            },
        )
    }
}
