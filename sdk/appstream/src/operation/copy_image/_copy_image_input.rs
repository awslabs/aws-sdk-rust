// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyImageInput {
    /// <p>The name of the image to copy.</p>
    pub source_image_name: ::std::option::Option<::std::string::String>,
    /// <p>The name that the image will have when it is copied to the destination.</p>
    pub destination_image_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
    pub destination_region: ::std::option::Option<::std::string::String>,
    /// <p>The description that the image will have when it is copied to the destination.</p>
    pub destination_image_description: ::std::option::Option<::std::string::String>,
}
impl CopyImageInput {
    /// <p>The name of the image to copy.</p>
    pub fn source_image_name(&self) -> ::std::option::Option<&str> {
        self.source_image_name.as_deref()
    }
    /// <p>The name that the image will have when it is copied to the destination.</p>
    pub fn destination_image_name(&self) -> ::std::option::Option<&str> {
        self.destination_image_name.as_deref()
    }
    /// <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
    pub fn destination_region(&self) -> ::std::option::Option<&str> {
        self.destination_region.as_deref()
    }
    /// <p>The description that the image will have when it is copied to the destination.</p>
    pub fn destination_image_description(&self) -> ::std::option::Option<&str> {
        self.destination_image_description.as_deref()
    }
}
impl CopyImageInput {
    /// Creates a new builder-style object to manufacture [`CopyImageInput`](crate::operation::copy_image::CopyImageInput).
    pub fn builder() -> crate::operation::copy_image::builders::CopyImageInputBuilder {
        crate::operation::copy_image::builders::CopyImageInputBuilder::default()
    }
}

/// A builder for [`CopyImageInput`](crate::operation::copy_image::CopyImageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CopyImageInputBuilder {
    pub(crate) source_image_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_image_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_region: ::std::option::Option<::std::string::String>,
    pub(crate) destination_image_description: ::std::option::Option<::std::string::String>,
}
impl CopyImageInputBuilder {
    /// <p>The name of the image to copy.</p>
    /// This field is required.
    pub fn source_image_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_image_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the image to copy.</p>
    pub fn set_source_image_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_image_name = input;
        self
    }
    /// <p>The name of the image to copy.</p>
    pub fn get_source_image_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_image_name
    }
    /// <p>The name that the image will have when it is copied to the destination.</p>
    /// This field is required.
    pub fn destination_image_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_image_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that the image will have when it is copied to the destination.</p>
    pub fn set_destination_image_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_image_name = input;
        self
    }
    /// <p>The name that the image will have when it is copied to the destination.</p>
    pub fn get_destination_image_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_image_name
    }
    /// <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
    /// This field is required.
    pub fn destination_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
    pub fn set_destination_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_region = input;
        self
    }
    /// <p>The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.</p>
    pub fn get_destination_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_region
    }
    /// <p>The description that the image will have when it is copied to the destination.</p>
    pub fn destination_image_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_image_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description that the image will have when it is copied to the destination.</p>
    pub fn set_destination_image_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_image_description = input;
        self
    }
    /// <p>The description that the image will have when it is copied to the destination.</p>
    pub fn get_destination_image_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_image_description
    }
    /// Consumes the builder and constructs a [`CopyImageInput`](crate::operation::copy_image::CopyImageInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::copy_image::CopyImageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::copy_image::CopyImageInput {
            source_image_name: self.source_image_name,
            destination_image_name: self.destination_image_name,
            destination_region: self.destination_region,
            destination_image_description: self.destination_image_description,
        })
    }
}
