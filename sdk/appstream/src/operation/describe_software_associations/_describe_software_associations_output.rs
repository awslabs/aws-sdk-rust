// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSoftwareAssociationsOutput {
    /// <p>The ARN of the resource to describe software associations.</p>
    pub associated_resource: ::std::option::Option<::std::string::String>,
    /// <p>Collection of license included applications association details including:</p>
    /// <ul>
    /// <li>
    /// <p>License included application name and version information</p></li>
    /// <li>
    /// <p>Deployment status (SoftwareDeploymentStatus enum)</p></li>
    /// <li>
    /// <p>Error details for failed deployments</p></li>
    /// <li>
    /// <p>Association timestamps</p></li>
    /// </ul>
    pub software_associations: ::std::option::Option<::std::vec::Vec<crate::types::SoftwareAssociations>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSoftwareAssociationsOutput {
    /// <p>The ARN of the resource to describe software associations.</p>
    pub fn associated_resource(&self) -> ::std::option::Option<&str> {
        self.associated_resource.as_deref()
    }
    /// <p>Collection of license included applications association details including:</p>
    /// <ul>
    /// <li>
    /// <p>License included application name and version information</p></li>
    /// <li>
    /// <p>Deployment status (SoftwareDeploymentStatus enum)</p></li>
    /// <li>
    /// <p>Error details for failed deployments</p></li>
    /// <li>
    /// <p>Association timestamps</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.software_associations.is_none()`.
    pub fn software_associations(&self) -> &[crate::types::SoftwareAssociations] {
        self.software_associations.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeSoftwareAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSoftwareAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSoftwareAssociationsOutput`](crate::operation::describe_software_associations::DescribeSoftwareAssociationsOutput).
    pub fn builder() -> crate::operation::describe_software_associations::builders::DescribeSoftwareAssociationsOutputBuilder {
        crate::operation::describe_software_associations::builders::DescribeSoftwareAssociationsOutputBuilder::default()
    }
}

/// A builder for [`DescribeSoftwareAssociationsOutput`](crate::operation::describe_software_associations::DescribeSoftwareAssociationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeSoftwareAssociationsOutputBuilder {
    pub(crate) associated_resource: ::std::option::Option<::std::string::String>,
    pub(crate) software_associations: ::std::option::Option<::std::vec::Vec<crate::types::SoftwareAssociations>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSoftwareAssociationsOutputBuilder {
    /// <p>The ARN of the resource to describe software associations.</p>
    pub fn associated_resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource to describe software associations.</p>
    pub fn set_associated_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource = input;
        self
    }
    /// <p>The ARN of the resource to describe software associations.</p>
    pub fn get_associated_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource
    }
    /// Appends an item to `software_associations`.
    ///
    /// To override the contents of this collection use [`set_software_associations`](Self::set_software_associations).
    ///
    /// <p>Collection of license included applications association details including:</p>
    /// <ul>
    /// <li>
    /// <p>License included application name and version information</p></li>
    /// <li>
    /// <p>Deployment status (SoftwareDeploymentStatus enum)</p></li>
    /// <li>
    /// <p>Error details for failed deployments</p></li>
    /// <li>
    /// <p>Association timestamps</p></li>
    /// </ul>
    pub fn software_associations(mut self, input: crate::types::SoftwareAssociations) -> Self {
        let mut v = self.software_associations.unwrap_or_default();
        v.push(input);
        self.software_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Collection of license included applications association details including:</p>
    /// <ul>
    /// <li>
    /// <p>License included application name and version information</p></li>
    /// <li>
    /// <p>Deployment status (SoftwareDeploymentStatus enum)</p></li>
    /// <li>
    /// <p>Error details for failed deployments</p></li>
    /// <li>
    /// <p>Association timestamps</p></li>
    /// </ul>
    pub fn set_software_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SoftwareAssociations>>) -> Self {
        self.software_associations = input;
        self
    }
    /// <p>Collection of license included applications association details including:</p>
    /// <ul>
    /// <li>
    /// <p>License included application name and version information</p></li>
    /// <li>
    /// <p>Deployment status (SoftwareDeploymentStatus enum)</p></li>
    /// <li>
    /// <p>Error details for failed deployments</p></li>
    /// <li>
    /// <p>Association timestamps</p></li>
    /// </ul>
    pub fn get_software_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SoftwareAssociations>> {
        &self.software_associations
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSoftwareAssociationsOutput`](crate::operation::describe_software_associations::DescribeSoftwareAssociationsOutput).
    pub fn build(self) -> crate::operation::describe_software_associations::DescribeSoftwareAssociationsOutput {
        crate::operation::describe_software_associations::DescribeSoftwareAssociationsOutput {
            associated_resource: self.associated_resource,
            software_associations: self.software_associations,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
