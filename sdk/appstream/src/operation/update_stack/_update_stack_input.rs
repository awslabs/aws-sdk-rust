// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStackInput {
    /// <p>The stack name to display.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description to display.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the stack.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The storage connectors to enable.</p>
    pub storage_connectors: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>,
    /// <p>Deletes the storage connectors currently enabled for the stack.</p>
    #[deprecated]
    pub delete_storage_connectors: ::std::option::Option<bool>,
    /// <p>The URL that users are redirected to after their streaming session ends.</p>
    pub redirect_url: ::std::option::Option<::std::string::String>,
    /// <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
    pub feedback_url: ::std::option::Option<::std::string::String>,
    /// <p>The stack attributes to delete.</p>
    pub attributes_to_delete: ::std::option::Option<::std::vec::Vec<crate::types::StackAttribute>>,
    /// <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
    pub user_settings: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>,
    /// <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
    pub application_settings: ::std::option::Option<crate::types::ApplicationSettings>,
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
    pub access_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
    /// <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
    pub embed_host_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
    pub streaming_experience_settings: ::std::option::Option<crate::types::StreamingExperienceSettings>,
}
impl UpdateStackInput {
    /// <p>The stack name to display.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description to display.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the stack.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The storage connectors to enable.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_connectors.is_none()`.
    pub fn storage_connectors(&self) -> &[crate::types::StorageConnector] {
        self.storage_connectors.as_deref().unwrap_or_default()
    }
    /// <p>Deletes the storage connectors currently enabled for the stack.</p>
    #[deprecated]
    pub fn delete_storage_connectors(&self) -> ::std::option::Option<bool> {
        self.delete_storage_connectors
    }
    /// <p>The URL that users are redirected to after their streaming session ends.</p>
    pub fn redirect_url(&self) -> ::std::option::Option<&str> {
        self.redirect_url.as_deref()
    }
    /// <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
    pub fn feedback_url(&self) -> ::std::option::Option<&str> {
        self.feedback_url.as_deref()
    }
    /// <p>The stack attributes to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes_to_delete.is_none()`.
    pub fn attributes_to_delete(&self) -> &[crate::types::StackAttribute] {
        self.attributes_to_delete.as_deref().unwrap_or_default()
    }
    /// <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_settings.is_none()`.
    pub fn user_settings(&self) -> &[crate::types::UserSetting] {
        self.user_settings.as_deref().unwrap_or_default()
    }
    /// <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
    pub fn application_settings(&self) -> ::std::option::Option<&crate::types::ApplicationSettings> {
        self.application_settings.as_ref()
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.access_endpoints.is_none()`.
    pub fn access_endpoints(&self) -> &[crate::types::AccessEndpoint] {
        self.access_endpoints.as_deref().unwrap_or_default()
    }
    /// <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.embed_host_domains.is_none()`.
    pub fn embed_host_domains(&self) -> &[::std::string::String] {
        self.embed_host_domains.as_deref().unwrap_or_default()
    }
    /// <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
    pub fn streaming_experience_settings(&self) -> ::std::option::Option<&crate::types::StreamingExperienceSettings> {
        self.streaming_experience_settings.as_ref()
    }
}
impl UpdateStackInput {
    /// Creates a new builder-style object to manufacture [`UpdateStackInput`](crate::operation::update_stack::UpdateStackInput).
    pub fn builder() -> crate::operation::update_stack::builders::UpdateStackInputBuilder {
        crate::operation::update_stack::builders::UpdateStackInputBuilder::default()
    }
}

/// A builder for [`UpdateStackInput`](crate::operation::update_stack::UpdateStackInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateStackInputBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) storage_connectors: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>,
    pub(crate) delete_storage_connectors: ::std::option::Option<bool>,
    pub(crate) redirect_url: ::std::option::Option<::std::string::String>,
    pub(crate) feedback_url: ::std::option::Option<::std::string::String>,
    pub(crate) attributes_to_delete: ::std::option::Option<::std::vec::Vec<crate::types::StackAttribute>>,
    pub(crate) user_settings: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>,
    pub(crate) application_settings: ::std::option::Option<crate::types::ApplicationSettings>,
    pub(crate) access_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
    pub(crate) embed_host_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) streaming_experience_settings: ::std::option::Option<crate::types::StreamingExperienceSettings>,
}
impl UpdateStackInputBuilder {
    /// <p>The stack name to display.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack name to display.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The stack name to display.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description to display.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to display.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to display.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the stack.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stack.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the stack.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `storage_connectors`.
    ///
    /// To override the contents of this collection use [`set_storage_connectors`](Self::set_storage_connectors).
    ///
    /// <p>The storage connectors to enable.</p>
    pub fn storage_connectors(mut self, input: crate::types::StorageConnector) -> Self {
        let mut v = self.storage_connectors.unwrap_or_default();
        v.push(input);
        self.storage_connectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The storage connectors to enable.</p>
    pub fn set_storage_connectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>) -> Self {
        self.storage_connectors = input;
        self
    }
    /// <p>The storage connectors to enable.</p>
    pub fn get_storage_connectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>> {
        &self.storage_connectors
    }
    /// <p>Deletes the storage connectors currently enabled for the stack.</p>
    #[deprecated]
    pub fn delete_storage_connectors(mut self, input: bool) -> Self {
        self.delete_storage_connectors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deletes the storage connectors currently enabled for the stack.</p>
    #[deprecated]
    pub fn set_delete_storage_connectors(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_storage_connectors = input;
        self
    }
    /// <p>Deletes the storage connectors currently enabled for the stack.</p>
    #[deprecated]
    pub fn get_delete_storage_connectors(&self) -> &::std::option::Option<bool> {
        &self.delete_storage_connectors
    }
    /// <p>The URL that users are redirected to after their streaming session ends.</p>
    pub fn redirect_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that users are redirected to after their streaming session ends.</p>
    pub fn set_redirect_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_url = input;
        self
    }
    /// <p>The URL that users are redirected to after their streaming session ends.</p>
    pub fn get_redirect_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_url
    }
    /// <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
    pub fn feedback_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feedback_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
    pub fn set_feedback_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feedback_url = input;
        self
    }
    /// <p>The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p>
    pub fn get_feedback_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.feedback_url
    }
    /// Appends an item to `attributes_to_delete`.
    ///
    /// To override the contents of this collection use [`set_attributes_to_delete`](Self::set_attributes_to_delete).
    ///
    /// <p>The stack attributes to delete.</p>
    pub fn attributes_to_delete(mut self, input: crate::types::StackAttribute) -> Self {
        let mut v = self.attributes_to_delete.unwrap_or_default();
        v.push(input);
        self.attributes_to_delete = ::std::option::Option::Some(v);
        self
    }
    /// <p>The stack attributes to delete.</p>
    pub fn set_attributes_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackAttribute>>) -> Self {
        self.attributes_to_delete = input;
        self
    }
    /// <p>The stack attributes to delete.</p>
    pub fn get_attributes_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackAttribute>> {
        &self.attributes_to_delete
    }
    /// Appends an item to `user_settings`.
    ///
    /// To override the contents of this collection use [`set_user_settings`](Self::set_user_settings).
    ///
    /// <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
    pub fn user_settings(mut self, input: crate::types::UserSetting) -> Self {
        let mut v = self.user_settings.unwrap_or_default();
        v.push(input);
        self.user_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
    pub fn set_user_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>) -> Self {
        self.user_settings = input;
        self
    }
    /// <p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.</p>
    pub fn get_user_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserSetting>> {
        &self.user_settings
    }
    /// <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
    pub fn application_settings(mut self, input: crate::types::ApplicationSettings) -> Self {
        self.application_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
    pub fn set_application_settings(mut self, input: ::std::option::Option<crate::types::ApplicationSettings>) -> Self {
        self.application_settings = input;
        self
    }
    /// <p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p>
    pub fn get_application_settings(&self) -> &::std::option::Option<crate::types::ApplicationSettings> {
        &self.application_settings
    }
    /// Appends an item to `access_endpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        let mut v = self.access_endpoints.unwrap_or_default();
        v.push(input);
        self.access_endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
    pub fn set_access_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>) -> Self {
        self.access_endpoints = input;
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p>
    pub fn get_access_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>> {
        &self.access_endpoints
    }
    /// Appends an item to `embed_host_domains`.
    ///
    /// To override the contents of this collection use [`set_embed_host_domains`](Self::set_embed_host_domains).
    ///
    /// <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
    pub fn embed_host_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.embed_host_domains.unwrap_or_default();
        v.push(input.into());
        self.embed_host_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
    pub fn set_embed_host_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.embed_host_domains = input;
        self
    }
    /// <p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p>
    pub fn get_embed_host_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.embed_host_domains
    }
    /// <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
    pub fn streaming_experience_settings(mut self, input: crate::types::StreamingExperienceSettings) -> Self {
        self.streaming_experience_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
    pub fn set_streaming_experience_settings(mut self, input: ::std::option::Option<crate::types::StreamingExperienceSettings>) -> Self {
        self.streaming_experience_settings = input;
        self
    }
    /// <p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p>
    pub fn get_streaming_experience_settings(&self) -> &::std::option::Option<crate::types::StreamingExperienceSettings> {
        &self.streaming_experience_settings
    }
    /// Consumes the builder and constructs a [`UpdateStackInput`](crate::operation::update_stack::UpdateStackInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_stack::UpdateStackInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_stack::UpdateStackInput {
            display_name: self.display_name,
            description: self.description,
            name: self.name,
            storage_connectors: self.storage_connectors,
            delete_storage_connectors: self.delete_storage_connectors,
            redirect_url: self.redirect_url,
            feedback_url: self.feedback_url,
            attributes_to_delete: self.attributes_to_delete,
            user_settings: self.user_settings,
            application_settings: self.application_settings,
            access_endpoints: self.access_endpoints,
            embed_host_domains: self.embed_host_domains,
            streaming_experience_settings: self.streaming_experience_settings,
        })
    }
}
