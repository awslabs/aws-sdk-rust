// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppBlockInput {
    /// <p>The name of the app block.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the app block.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The display name of the app block. This is not displayed to the user.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The source S3 location of the app block.</p>
    #[doc(hidden)]
    pub source_s3_location: std::option::Option<crate::types::S3Location>,
    /// <p>The setup script details of the app block.</p>
    #[doc(hidden)]
    pub setup_script_details: std::option::Option<crate::types::ScriptDetails>,
    /// <p>The tags assigned to the app block.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAppBlockInput {
    /// <p>The name of the app block.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the app block.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The display name of the app block. This is not displayed to the user.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The source S3 location of the app block.</p>
    pub fn source_s3_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.source_s3_location.as_ref()
    }
    /// <p>The setup script details of the app block.</p>
    pub fn setup_script_details(&self) -> std::option::Option<&crate::types::ScriptDetails> {
        self.setup_script_details.as_ref()
    }
    /// <p>The tags assigned to the app block.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateAppBlockInput {
    /// Creates a new builder-style object to manufacture [`CreateAppBlockInput`](crate::operation::create_app_block::CreateAppBlockInput).
    pub fn builder() -> crate::operation::create_app_block::builders::CreateAppBlockInputBuilder {
        crate::operation::create_app_block::builders::CreateAppBlockInputBuilder::default()
    }
}

/// A builder for [`CreateAppBlockInput`](crate::operation::create_app_block::CreateAppBlockInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAppBlockInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) source_s3_location: std::option::Option<crate::types::S3Location>,
    pub(crate) setup_script_details: std::option::Option<crate::types::ScriptDetails>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAppBlockInputBuilder {
    /// <p>The name of the app block.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the app block.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the app block.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the app block.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The display name of the app block. This is not displayed to the user.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The display name of the app block. This is not displayed to the user.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The source S3 location of the app block.</p>
    pub fn source_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.source_s3_location = Some(input);
        self
    }
    /// <p>The source S3 location of the app block.</p>
    pub fn set_source_s3_location(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.source_s3_location = input;
        self
    }
    /// <p>The setup script details of the app block.</p>
    pub fn setup_script_details(mut self, input: crate::types::ScriptDetails) -> Self {
        self.setup_script_details = Some(input);
        self
    }
    /// <p>The setup script details of the app block.</p>
    pub fn set_setup_script_details(
        mut self,
        input: std::option::Option<crate::types::ScriptDetails>,
    ) -> Self {
        self.setup_script_details = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the app block.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to the app block.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAppBlockInput`](crate::operation::create_app_block::CreateAppBlockInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_app_block::CreateAppBlockInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_app_block::CreateAppBlockInput {
            name: self.name,
            description: self.description,
            display_name: self.display_name,
            source_s3_location: self.source_s3_location,
            setup_script_details: self.setup_script_details,
            tags: self.tags,
        })
    }
}
