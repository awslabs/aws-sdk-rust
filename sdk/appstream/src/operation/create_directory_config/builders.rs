// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_directory_config::_create_directory_config_output::CreateDirectoryConfigOutputBuilder;

pub use crate::operation::create_directory_config::_create_directory_config_input::CreateDirectoryConfigInputBuilder;

/// Fluent builder constructing a request to `CreateDirectoryConfig`.
///
/// <p>Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectoryConfigFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_directory_config::builders::CreateDirectoryConfigInputBuilder,
}
impl CreateDirectoryConfigFluentBuilder {
    /// Creates a new `CreateDirectoryConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_directory_config::CreateDirectoryConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_directory_config::CreateDirectoryConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_directory_config::CreateDirectoryConfigOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_directory_config::CreateDirectoryConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The fully qualified name of the directory (for example, corp.example.com).</p>
    pub fn directory_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.directory_name(input.into());
        self
    }
    /// <p>The fully qualified name of the directory (for example, corp.example.com).</p>
    pub fn set_directory_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_directory_name(input);
        self
    }
    /// Appends an item to `OrganizationalUnitDistinguishedNames`.
    ///
    /// To override the contents of this collection use [`set_organizational_unit_distinguished_names`](Self::set_organizational_unit_distinguished_names).
    ///
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    pub fn organizational_unit_distinguished_names(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .organizational_unit_distinguished_names(input.into());
        self
    }
    /// <p>The distinguished names of the organizational units for computer accounts.</p>
    pub fn set_organizational_unit_distinguished_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self
            .inner
            .set_organizational_unit_distinguished_names(input);
        self
    }
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    pub fn service_account_credentials(
        mut self,
        input: crate::types::ServiceAccountCredentials,
    ) -> Self {
        self.inner = self.inner.service_account_credentials(input);
        self
    }
    /// <p>The credentials for the service account used by the fleet or image builder to connect to the directory.</p>
    pub fn set_service_account_credentials(
        mut self,
        input: std::option::Option<crate::types::ServiceAccountCredentials>,
    ) -> Self {
        self.inner = self.inner.set_service_account_credentials(input);
        self
    }
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    pub fn certificate_based_auth_properties(
        mut self,
        input: crate::types::CertificateBasedAuthProperties,
    ) -> Self {
        self.inner = self.inner.certificate_based_auth_properties(input);
        self
    }
    /// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
    pub fn set_certificate_based_auth_properties(
        mut self,
        input: std::option::Option<crate::types::CertificateBasedAuthProperties>,
    ) -> Self {
        self.inner = self.inner.set_certificate_based_auth_properties(input);
        self
    }
}
