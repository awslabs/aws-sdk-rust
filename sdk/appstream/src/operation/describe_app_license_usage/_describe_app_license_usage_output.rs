// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAppLicenseUsageOutput {
    /// <p>Collection of license usage records.</p>
    pub app_license_usages: ::std::option::Option<::std::vec::Vec<crate::types::AdminAppLicenseUsageRecord>>,
    /// <p>Token for pagination of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppLicenseUsageOutput {
    /// <p>Collection of license usage records.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.app_license_usages.is_none()`.
    pub fn app_license_usages(&self) -> &[crate::types::AdminAppLicenseUsageRecord] {
        self.app_license_usages.as_deref().unwrap_or_default()
    }
    /// <p>Token for pagination of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeAppLicenseUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAppLicenseUsageOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppLicenseUsageOutput`](crate::operation::describe_app_license_usage::DescribeAppLicenseUsageOutput).
    pub fn builder() -> crate::operation::describe_app_license_usage::builders::DescribeAppLicenseUsageOutputBuilder {
        crate::operation::describe_app_license_usage::builders::DescribeAppLicenseUsageOutputBuilder::default()
    }
}

/// A builder for [`DescribeAppLicenseUsageOutput`](crate::operation::describe_app_license_usage::DescribeAppLicenseUsageOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeAppLicenseUsageOutputBuilder {
    pub(crate) app_license_usages: ::std::option::Option<::std::vec::Vec<crate::types::AdminAppLicenseUsageRecord>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAppLicenseUsageOutputBuilder {
    /// Appends an item to `app_license_usages`.
    ///
    /// To override the contents of this collection use [`set_app_license_usages`](Self::set_app_license_usages).
    ///
    /// <p>Collection of license usage records.</p>
    pub fn app_license_usages(mut self, input: crate::types::AdminAppLicenseUsageRecord) -> Self {
        let mut v = self.app_license_usages.unwrap_or_default();
        v.push(input);
        self.app_license_usages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Collection of license usage records.</p>
    pub fn set_app_license_usages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdminAppLicenseUsageRecord>>) -> Self {
        self.app_license_usages = input;
        self
    }
    /// <p>Collection of license usage records.</p>
    pub fn get_app_license_usages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdminAppLicenseUsageRecord>> {
        &self.app_license_usages
    }
    /// <p>Token for pagination of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for pagination of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Token for pagination of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAppLicenseUsageOutput`](crate::operation::describe_app_license_usage::DescribeAppLicenseUsageOutput).
    pub fn build(self) -> crate::operation::describe_app_license_usage::DescribeAppLicenseUsageOutput {
        crate::operation::describe_app_license_usage::DescribeAppLicenseUsageOutput {
            app_license_usages: self.app_license_usages,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
