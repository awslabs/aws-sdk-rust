// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_image_builder::_create_image_builder_output::CreateImageBuilderOutputBuilder;

pub use crate::operation::create_image_builder::_create_image_builder_input::CreateImageBuilderInputBuilder;

/// Fluent builder constructing a request to `CreateImageBuilder`.
///
/// <p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p>
/// <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateImageBuilderFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_image_builder::builders::CreateImageBuilderInputBuilder,
}
impl CreateImageBuilderFluentBuilder {
    /// Creates a new `CreateImageBuilder`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_image_builder::CreateImageBuilder,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_image_builder::CreateImageBuilderError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_image_builder::CreateImageBuilderOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_image_builder::CreateImageBuilderError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique name for the image builder.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A unique name for the image builder.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the image used to create the image builder.</p>
    pub fn image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_name(input.into());
        self
    }
    /// <p>The name of the image used to create the image builder.</p>
    pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_name(input);
        self
    }
    /// <p>The ARN of the public, private, or shared image to use.</p>
    pub fn image_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_arn(input.into());
        self
    }
    /// <p>The ARN of the public, private, or shared image to use.</p>
    pub fn set_image_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_arn(input);
        self
    }
    /// <p>The instance type to use when launching the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_type(input.into());
        self
    }
    /// <p>The instance type to use when launching the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The description to display.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description to display.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The image builder name to display.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The image builder name to display.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The VPC configuration for the image builder. You can specify only one subnet.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>The VPC configuration for the image builder. You can specify only one subnet.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role_arn(input);
        self
    }
    /// <p>Enables or disables default internet access for the image builder.</p>
    pub fn enable_default_internet_access(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_default_internet_access(input);
        self
    }
    /// <p>Enables or disables default internet access for the image builder.</p>
    pub fn set_enable_default_internet_access(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_default_internet_access(input);
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    pub fn domain_join_info(mut self, input: crate::types::DomainJoinInfo) -> Self {
        self.inner = self.inner.domain_join_info(input);
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    pub fn set_domain_join_info(
        mut self,
        input: std::option::Option<crate::types::DomainJoinInfo>,
    ) -> Self {
        self.inner = self.inner.set_domain_join_info(input);
        self
    }
    /// <p>The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. </p>
    pub fn appstream_agent_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.appstream_agent_version(input.into());
        self
    }
    /// <p>The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. </p>
    pub fn set_appstream_agent_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_appstream_agent_version(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
    /// <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
    /// <p>_ . : / = + \ - @</p>
    /// <p>If you do not specify a value, the value is set to an empty string.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
    /// <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
    /// <p>_ . : / = + \ - @</p>
    /// <p>If you do not specify a value, the value is set to an empty string.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `AccessEndpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        self.inner = self.inner.access_endpoints(input);
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    pub fn set_access_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccessEndpoint>>,
    ) -> Self {
        self.inner = self.inner.set_access_endpoints(input);
        self
    }
}
