// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSoftwareDeploymentToImageBuilderInput {
    /// <p>The name of the target image builder instance.</p>
    pub image_builder_name: ::std::option::Option<::std::string::String>,
    /// <p>Whether to retry previously failed license included application deployments.</p>
    pub retry_failed_deployments: ::std::option::Option<bool>,
}
impl StartSoftwareDeploymentToImageBuilderInput {
    /// <p>The name of the target image builder instance.</p>
    pub fn image_builder_name(&self) -> ::std::option::Option<&str> {
        self.image_builder_name.as_deref()
    }
    /// <p>Whether to retry previously failed license included application deployments.</p>
    pub fn retry_failed_deployments(&self) -> ::std::option::Option<bool> {
        self.retry_failed_deployments
    }
}
impl StartSoftwareDeploymentToImageBuilderInput {
    /// Creates a new builder-style object to manufacture [`StartSoftwareDeploymentToImageBuilderInput`](crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderInput).
    pub fn builder() -> crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderInputBuilder {
        crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderInputBuilder::default()
    }
}

/// A builder for [`StartSoftwareDeploymentToImageBuilderInput`](crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartSoftwareDeploymentToImageBuilderInputBuilder {
    pub(crate) image_builder_name: ::std::option::Option<::std::string::String>,
    pub(crate) retry_failed_deployments: ::std::option::Option<bool>,
}
impl StartSoftwareDeploymentToImageBuilderInputBuilder {
    /// <p>The name of the target image builder instance.</p>
    /// This field is required.
    pub fn image_builder_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_builder_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target image builder instance.</p>
    pub fn set_image_builder_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_builder_name = input;
        self
    }
    /// <p>The name of the target image builder instance.</p>
    pub fn get_image_builder_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_builder_name
    }
    /// <p>Whether to retry previously failed license included application deployments.</p>
    pub fn retry_failed_deployments(mut self, input: bool) -> Self {
        self.retry_failed_deployments = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to retry previously failed license included application deployments.</p>
    pub fn set_retry_failed_deployments(mut self, input: ::std::option::Option<bool>) -> Self {
        self.retry_failed_deployments = input;
        self
    }
    /// <p>Whether to retry previously failed license included application deployments.</p>
    pub fn get_retry_failed_deployments(&self) -> &::std::option::Option<bool> {
        &self.retry_failed_deployments
    }
    /// Consumes the builder and constructs a [`StartSoftwareDeploymentToImageBuilderInput`](crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderInput {
                image_builder_name: self.image_builder_name,
                retry_failed_deployments: self.retry_failed_deployments,
            },
        )
    }
}
