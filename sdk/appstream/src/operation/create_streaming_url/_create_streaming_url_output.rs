// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamingUrlOutput {
    /// <p>The URL to start the AppStream 2.0 streaming session.</p>
    #[doc(hidden)]
    pub streaming_url: std::option::Option<std::string::String>,
    /// <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
    #[doc(hidden)]
    pub expires: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateStreamingUrlOutput {
    /// <p>The URL to start the AppStream 2.0 streaming session.</p>
    pub fn streaming_url(&self) -> std::option::Option<&str> {
        self.streaming_url.as_deref()
    }
    /// <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
    pub fn expires(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expires.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStreamingUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStreamingUrlOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamingUrlOutput`](crate::operation::create_streaming_url::CreateStreamingUrlOutput).
    pub fn builder(
    ) -> crate::operation::create_streaming_url::builders::CreateStreamingUrlOutputBuilder {
        crate::operation::create_streaming_url::builders::CreateStreamingUrlOutputBuilder::default()
    }
}

/// A builder for [`CreateStreamingUrlOutput`](crate::operation::create_streaming_url::CreateStreamingUrlOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateStreamingUrlOutputBuilder {
    pub(crate) streaming_url: std::option::Option<std::string::String>,
    pub(crate) expires: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateStreamingUrlOutputBuilder {
    /// <p>The URL to start the AppStream 2.0 streaming session.</p>
    pub fn streaming_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.streaming_url = Some(input.into());
        self
    }
    /// <p>The URL to start the AppStream 2.0 streaming session.</p>
    pub fn set_streaming_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.streaming_url = input;
        self
    }
    /// <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
    pub fn expires(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expires = Some(input);
        self
    }
    /// <p>The elapsed time, in seconds after the Unix epoch, when this URL expires.</p>
    pub fn set_expires(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.expires = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateStreamingUrlOutput`](crate::operation::create_streaming_url::CreateStreamingUrlOutput).
    pub fn build(self) -> crate::operation::create_streaming_url::CreateStreamingUrlOutput {
        crate::operation::create_streaming_url::CreateStreamingUrlOutput {
            streaming_url: self.streaming_url,
            expires: self.expires,
            _request_id: self._request_id,
        }
    }
}
