// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateApplication`](crate::operation::create_application::builders::CreateApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_name): <p>The name of the application. This name is visible to users when display name is not specified.</p>
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_display_name): <p>The display name of the application. This name is visible to users in the application catalog.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_description): <p>The description of the application.</p>
    ///   - [`icon_s3_location(S3Location)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::icon_s3_location) / [`set_icon_s3_location(Option<S3Location>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_icon_s3_location): <p>The location in S3 of the application icon.</p>
    ///   - [`launch_path(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::launch_path) / [`set_launch_path(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_launch_path): <p>The launch path of the application.</p>
    ///   - [`working_directory(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::working_directory) / [`set_working_directory(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_working_directory): <p>The working directory of the application.</p>
    ///   - [`launch_parameters(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::launch_parameters) / [`set_launch_parameters(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_launch_parameters): <p>The launch parameters of the application.</p>
    ///   - [`platforms(Vec<PlatformType>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::platforms) / [`set_platforms(Option<Vec<PlatformType>>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_platforms): <p>The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.</p>
    ///   - [`instance_families(Vec<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::instance_families) / [`set_instance_families(Option<Vec<String>>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_instance_families): <p>The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.</p>
    ///   - [`app_block_arn(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::app_block_arn) / [`set_app_block_arn(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_app_block_arn): <p>The app block ARN to which the application should be associated</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_tags): <p>The tags assigned to the application.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::operation::create_application::CreateApplicationOutput) with field(s):
    ///   - [`application(Option<Application>)`](crate::operation::create_application::CreateApplicationOutput::application): <p>Describes an application in the application catalog.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::operation::create_application::CreateApplicationError)
    pub fn create_application(
        &self,
    ) -> crate::operation::create_application::builders::CreateApplicationFluentBuilder {
        crate::operation::create_application::builders::CreateApplicationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
