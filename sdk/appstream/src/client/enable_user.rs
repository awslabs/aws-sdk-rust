// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EnableUser`](crate::client::fluent_builders::EnableUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::EnableUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::EnableUser::set_user_name): <p>The email address of the user.</p> <note>   <p>Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a "user does not exist" error message displays. </p>  </note>
    ///   - [`authentication_type(AuthenticationType)`](crate::client::fluent_builders::EnableUser::authentication_type) / [`set_authentication_type(Option<AuthenticationType>)`](crate::client::fluent_builders::EnableUser::set_authentication_type): <p>The authentication type for the user. You must specify USERPOOL.</p>
    /// - On success, responds with [`EnableUserOutput`](crate::output::EnableUserOutput)
    /// - On failure, responds with [`SdkError<EnableUserError>`](crate::error::EnableUserError)
    pub fn enable_user(&self) -> crate::client::fluent_builders::EnableUser {
        crate::client::fluent_builders::EnableUser::new(self.handle.clone())
    }
}
