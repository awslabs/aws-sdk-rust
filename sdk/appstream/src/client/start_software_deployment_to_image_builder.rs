// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartSoftwareDeploymentToImageBuilder`](crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_builder_name(impl Into<String>)`](crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder::image_builder_name) / [`set_image_builder_name(Option<String>)`](crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder::set_image_builder_name):<br>required: **true**<br><p>The name of the target image builder instance.</p><br>
    ///   - [`retry_failed_deployments(bool)`](crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder::retry_failed_deployments) / [`set_retry_failed_deployments(Option<bool>)`](crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder::set_retry_failed_deployments):<br>required: **false**<br><p>Whether to retry previously failed license included application deployments.</p><br>
    /// - On success, responds with [`StartSoftwareDeploymentToImageBuilderOutput`](crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderOutput)
    /// - On failure, responds with [`SdkError<StartSoftwareDeploymentToImageBuilderError>`](crate::operation::start_software_deployment_to_image_builder::StartSoftwareDeploymentToImageBuilderError)
    pub fn start_software_deployment_to_image_builder(
        &self,
    ) -> crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder {
        crate::operation::start_software_deployment_to_image_builder::builders::StartSoftwareDeploymentToImageBuilderFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
