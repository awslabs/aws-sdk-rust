// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateStack`](crate::operation::create_stack::builders::CreateStackFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_name):<br>required: **true**<br><p>The name of the stack.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_description):<br>required: **false**<br><p>The description to display.</p><br>
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_display_name):<br>required: **false**<br><p>The stack name to display.</p><br>
    ///   - [`storage_connectors(StorageConnector)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::storage_connectors) / [`set_storage_connectors(Option<Vec::<StorageConnector>>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_storage_connectors):<br>required: **false**<br><p>The storage connectors to enable.</p><br>
    ///   - [`redirect_url(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::redirect_url) / [`set_redirect_url(Option<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_redirect_url):<br>required: **false**<br><p>The URL that users are redirected to after their streaming session ends.</p><br>
    ///   - [`feedback_url(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::feedback_url) / [`set_feedback_url(Option<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_feedback_url):<br>required: **false**<br><p>The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.</p><br>
    ///   - [`user_settings(UserSetting)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::user_settings) / [`set_user_settings(Option<Vec::<UserSetting>>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_user_settings):<br>required: **false**<br><p>The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. </p><br>
    ///   - [`application_settings(ApplicationSettings)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::application_settings) / [`set_application_settings(Option<ApplicationSettings>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_application_settings):<br>required: **false**<br><p>The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to associate with the stack. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>  <p>If you do not specify a value, the value is set to an empty string.</p>  <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>  <p>_ . : / = + \ - @</p>  <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p><br>
    ///   - [`access_endpoints(AccessEndpoint)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::access_endpoints) / [`set_access_endpoints(Option<Vec::<AccessEndpoint>>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_access_endpoints):<br>required: **false**<br><p>The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.</p><br>
    ///   - [`embed_host_domains(impl Into<String>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::embed_host_domains) / [`set_embed_host_domains(Option<Vec::<String>>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_embed_host_domains):<br>required: **false**<br><p>The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. </p><br>
    ///   - [`streaming_experience_settings(StreamingExperienceSettings)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::streaming_experience_settings) / [`set_streaming_experience_settings(Option<StreamingExperienceSettings>)`](crate::operation::create_stack::builders::CreateStackFluentBuilder::set_streaming_experience_settings):<br>required: **false**<br><p>The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.</p><br>
    /// - On success, responds with [`CreateStackOutput`](crate::operation::create_stack::CreateStackOutput) with field(s):
    ///   - [`stack(Option<Stack>)`](crate::operation::create_stack::CreateStackOutput::stack): <p>Information about the stack.</p>
    /// - On failure, responds with [`SdkError<CreateStackError>`](crate::operation::create_stack::CreateStackError)
    pub fn create_stack(&self) -> crate::operation::create_stack::builders::CreateStackFluentBuilder {
        crate::operation::create_stack::builders::CreateStackFluentBuilder::new(self.handle.clone())
    }
}
