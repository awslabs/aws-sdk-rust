// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_disassociate_app_block_builder_app_block_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockOutput,
    crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConcurrentModificationException" => {
            crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::ConcurrentModificationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConcurrentModificationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_concurrent_modification_exception::de_concurrent_modification_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterCombinationException" => {
            crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::InvalidParameterCombinationException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::types::error::builders::InvalidParameterCombinationExceptionBuilder::default();
                        output = crate::protocol_serde::shape_invalid_parameter_combination_exception::de_invalid_parameter_combination_exception_json_err(_response_body, output).map_err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        "OperationNotPermittedException" => {
            crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::OperationNotPermittedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_disassociate_app_block_builder_app_block_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockOutput,
    crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::disassociate_app_block_builder_app_block::builders::DisassociateAppBlockBuilderAppBlockOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_disassociate_app_block_builder_app_block_input(
    input: &crate::operation::disassociate_app_block_builder_app_block::DisassociateAppBlockBuilderAppBlockInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_disassociate_app_block_builder_app_block_input::ser_disassociate_app_block_builder_app_block_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
