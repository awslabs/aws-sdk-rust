// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_application::CreateApplicationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.display_name {
        object.key("DisplayName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.icon_s3_location {
        #[allow(unused_mut)]
        let mut object_5 = object.key("IconS3Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.launch_path {
        object.key("LaunchPath").string(var_6.as_str());
    }
    if let Some(var_7) = &input.working_directory {
        object.key("WorkingDirectory").string(var_7.as_str());
    }
    if let Some(var_8) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_8.as_str());
    }
    if let Some(var_9) = &input.platforms {
        let mut array_10 = object.key("Platforms").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.instance_families {
        let mut array_13 = object.key("InstanceFamilies").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    Ok(())
}
