// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_stack::UpdateStackInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.display_name {
        object.key("DisplayName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.storage_connectors {
        let mut array_5 = object.key("StorageConnectors").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_storage_connector::ser_storage_connector(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if input.delete_storage_connectors {
        object
            .key("DeleteStorageConnectors")
            .boolean(input.delete_storage_connectors);
    }
    if let Some(var_8) = &input.redirect_url {
        object.key("RedirectURL").string(var_8.as_str());
    }
    if let Some(var_9) = &input.feedback_url {
        object.key("FeedbackURL").string(var_9.as_str());
    }
    if let Some(var_10) = &input.attributes_to_delete {
        let mut array_11 = object.key("AttributesToDelete").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.user_settings {
        let mut array_14 = object.key("UserSettings").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_user_setting::ser_user_setting(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.application_settings {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ApplicationSettings").start_object();
        crate::protocol_serde::shape_application_settings::ser_application_settings(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.access_endpoints {
        let mut array_20 = object.key("AccessEndpoints").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_access_endpoint::ser_access_endpoint(
                    &mut object_22,
                    item_21,
                )?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.embed_host_domains {
        let mut array_24 = object.key("EmbedHostDomains").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.streaming_experience_settings {
        #[allow(unused_mut)]
        let mut object_27 = object.key("StreamingExperienceSettings").start_object();
        crate::protocol_serde::shape_streaming_experience_settings::ser_streaming_experience_settings(&mut object_27, var_26)?;
        object_27.finish();
    }
    Ok(())
}
