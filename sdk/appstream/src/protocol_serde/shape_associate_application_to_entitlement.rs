// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_associate_application_to_entitlement_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementOutput,
    crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "EntitlementNotFoundException" => {
            crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::EntitlementNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EntitlementNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_entitlement_not_found_exception::de_entitlement_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LimitExceededException" => {
            crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::LimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::LimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_limit_exceeded_exception::de_limit_exceeded_exception_json_err(_response_body, output)
                        .map_err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedException" => {
            crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::OperationNotPermittedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_associate_application_to_entitlement_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementOutput,
    crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::associate_application_to_entitlement::builders::AssociateApplicationToEntitlementOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_associate_application_to_entitlement_input(
    input: &crate::operation::associate_application_to_entitlement::AssociateApplicationToEntitlementInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_associate_application_to_entitlement_input::ser_associate_application_to_entitlement_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
