// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_app_block_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_app_block::CreateAppBlockInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.display_name {
        object.key("DisplayName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.source_s3_location {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SourceS3Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.setup_script_details {
        #[allow(unused_mut)]
        let mut object_7 = object.key("SetupScriptDetails").start_object();
        crate::protocol_serde::shape_script_details::ser_script_details(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.post_setup_script_details {
        #[allow(unused_mut)]
        let mut object_13 = object.key("PostSetupScriptDetails").start_object();
        crate::protocol_serde::shape_script_details::ser_script_details(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.packaging_type {
        object.key("PackagingType").string(var_14.as_str());
    }
    Ok(())
}
