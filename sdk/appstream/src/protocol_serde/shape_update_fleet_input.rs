// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_fleet::UpdateFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.image_name {
        object.key("ImageName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.image_arn {
        object.key("ImageArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.instance_type {
        object.key("InstanceType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.compute_capacity {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ComputeCapacity").start_object();
        crate::protocol_serde::shape_compute_capacity::ser_compute_capacity(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if input.delete_vpc_config {
        object
            .key("DeleteVpcConfig")
            .boolean(input.delete_vpc_config);
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.display_name {
        object.key("DisplayName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_13);
    }
    if let Some(var_14) = &input.domain_join_info {
        #[allow(unused_mut)]
        let mut object_15 = object.key("DomainJoinInfo").start_object();
        crate::protocol_serde::shape_domain_join_info::ser_domain_join_info(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.attributes_to_delete {
        let mut array_18 = object.key("AttributesToDelete").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.stream_view {
        object.key("StreamView").string(var_21.as_str());
    }
    if let Some(var_22) = &input.platform {
        object.key("Platform").string(var_22.as_str());
    }
    if let Some(var_23) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.usb_device_filter_strings {
        let mut array_25 = object.key("UsbDeviceFilterStrings").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.session_script_s3_location {
        #[allow(unused_mut)]
        let mut object_28 = object.key("SessionScriptS3Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}
