// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The association between a license-included application and a resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SoftwareAssociations {
    /// <p>The name of the license-included application.</p>
    /// <p>Possible values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_64Bit</p></li>
    /// </ul>
    pub software_name: ::std::option::Option<::std::string::String>,
    /// <p>The deployment status of the license-included application.</p>
    pub status: ::std::option::Option<crate::types::SoftwareDeploymentStatus>,
    /// <p>The error details for failed deployments of the license-included application.</p>
    pub deployment_error: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>,
}
impl SoftwareAssociations {
    /// <p>The name of the license-included application.</p>
    /// <p>Possible values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_64Bit</p></li>
    /// </ul>
    pub fn software_name(&self) -> ::std::option::Option<&str> {
        self.software_name.as_deref()
    }
    /// <p>The deployment status of the license-included application.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SoftwareDeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>The error details for failed deployments of the license-included application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.deployment_error.is_none()`.
    pub fn deployment_error(&self) -> &[crate::types::ErrorDetails] {
        self.deployment_error.as_deref().unwrap_or_default()
    }
}
impl SoftwareAssociations {
    /// Creates a new builder-style object to manufacture [`SoftwareAssociations`](crate::types::SoftwareAssociations).
    pub fn builder() -> crate::types::builders::SoftwareAssociationsBuilder {
        crate::types::builders::SoftwareAssociationsBuilder::default()
    }
}

/// A builder for [`SoftwareAssociations`](crate::types::SoftwareAssociations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SoftwareAssociationsBuilder {
    pub(crate) software_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SoftwareDeploymentStatus>,
    pub(crate) deployment_error: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>,
}
impl SoftwareAssociationsBuilder {
    /// <p>The name of the license-included application.</p>
    /// <p>Possible values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_64Bit</p></li>
    /// </ul>
    pub fn software_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.software_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the license-included application.</p>
    /// <p>Possible values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_64Bit</p></li>
    /// </ul>
    pub fn set_software_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.software_name = input;
        self
    }
    /// <p>The name of the license-included application.</p>
    /// <p>Possible values include the following:</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Professional_Plus_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Professional_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Office_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2021_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Visio_2024_LTSC_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2021_Standard_64Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_32Bit</p></li>
    /// <li>
    /// <p>Microsoft_Project_2024_Standard_64Bit</p></li>
    /// </ul>
    pub fn get_software_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.software_name
    }
    /// <p>The deployment status of the license-included application.</p>
    pub fn status(mut self, input: crate::types::SoftwareDeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment status of the license-included application.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SoftwareDeploymentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The deployment status of the license-included application.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SoftwareDeploymentStatus> {
        &self.status
    }
    /// Appends an item to `deployment_error`.
    ///
    /// To override the contents of this collection use [`set_deployment_error`](Self::set_deployment_error).
    ///
    /// <p>The error details for failed deployments of the license-included application.</p>
    pub fn deployment_error(mut self, input: crate::types::ErrorDetails) -> Self {
        let mut v = self.deployment_error.unwrap_or_default();
        v.push(input);
        self.deployment_error = ::std::option::Option::Some(v);
        self
    }
    /// <p>The error details for failed deployments of the license-included application.</p>
    pub fn set_deployment_error(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>) -> Self {
        self.deployment_error = input;
        self
    }
    /// <p>The error details for failed deployments of the license-included application.</p>
    pub fn get_deployment_error(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>> {
        &self.deployment_error
    }
    /// Consumes the builder and constructs a [`SoftwareAssociations`](crate::types::SoftwareAssociations).
    pub fn build(self) -> crate::types::SoftwareAssociations {
        crate::types::SoftwareAssociations {
            software_name: self.software_name,
            status: self.status,
            deployment_error: self.deployment_error,
        }
    }
}
