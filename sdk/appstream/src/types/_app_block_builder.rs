// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an app block builder.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppBlockBuilder {
    /// <p>The ARN of the app block builder.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the app block builder.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the app block builder.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the app block builder.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub platform: ::std::option::Option<crate::types::AppBlockBuilderPlatformType>,
    /// <p>The instance type of the app block builder.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether default internet access is enabled for the app block builder.</p>
    pub enable_default_internet_access: ::std::option::Option<bool>,
    /// <p>The ARN of the IAM role that is applied to the app block builder.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The VPC configuration for the app block builder.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The state of the app block builder.</p>
    pub state: ::std::option::Option<crate::types::AppBlockBuilderState>,
    /// <p>The creation time of the app block builder.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The app block builder errors.</p>
    pub app_block_builder_errors: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>,
    /// <p>The state change reason.</p>
    pub state_change_reason: ::std::option::Option<crate::types::AppBlockBuilderStateChangeReason>,
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub access_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
}
impl AppBlockBuilder {
    /// <p>The ARN of the app block builder.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the app block builder.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The display name of the app block builder.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the app block builder.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::AppBlockBuilderPlatformType> {
        self.platform.as_ref()
    }
    /// <p>The instance type of the app block builder.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Indicates whether default internet access is enabled for the app block builder.</p>
    pub fn enable_default_internet_access(&self) -> ::std::option::Option<bool> {
        self.enable_default_internet_access
    }
    /// <p>The ARN of the IAM role that is applied to the app block builder.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The VPC configuration for the app block builder.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The state of the app block builder.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::AppBlockBuilderState> {
        self.state.as_ref()
    }
    /// <p>The creation time of the app block builder.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The app block builder errors.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.app_block_builder_errors.is_none()`.
    pub fn app_block_builder_errors(&self) -> &[crate::types::ResourceError] {
        self.app_block_builder_errors.as_deref().unwrap_or_default()
    }
    /// <p>The state change reason.</p>
    pub fn state_change_reason(&self) -> ::std::option::Option<&crate::types::AppBlockBuilderStateChangeReason> {
        self.state_change_reason.as_ref()
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.access_endpoints.is_none()`.
    pub fn access_endpoints(&self) -> &[crate::types::AccessEndpoint] {
        self.access_endpoints.as_deref().unwrap_or_default()
    }
}
impl AppBlockBuilder {
    /// Creates a new builder-style object to manufacture [`AppBlockBuilder`](crate::types::AppBlockBuilder).
    pub fn builder() -> crate::types::builders::AppBlockBuilderBuilder {
        crate::types::builders::AppBlockBuilderBuilder::default()
    }
}

/// A builder for [`AppBlockBuilder`](crate::types::AppBlockBuilder).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AppBlockBuilderBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<crate::types::AppBlockBuilderPlatformType>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) enable_default_internet_access: ::std::option::Option<bool>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) state: ::std::option::Option<crate::types::AppBlockBuilderState>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) app_block_builder_errors: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>,
    pub(crate) state_change_reason: ::std::option::Option<crate::types::AppBlockBuilderStateChangeReason>,
    pub(crate) access_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
}
impl AppBlockBuilderBuilder {
    /// <p>The ARN of the app block builder.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the app block builder.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the app block builder.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the app block builder.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the app block builder.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the app block builder.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The display name of the app block builder.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the app block builder.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the app block builder.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the app block builder.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the app block builder.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the app block builder.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    /// This field is required.
    pub fn platform(mut self, input: crate::types::AppBlockBuilderPlatformType) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::AppBlockBuilderPlatformType>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::AppBlockBuilderPlatformType> {
        &self.platform
    }
    /// <p>The instance type of the app block builder.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type of the app block builder.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type of the app block builder.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>Indicates whether default internet access is enabled for the app block builder.</p>
    pub fn enable_default_internet_access(mut self, input: bool) -> Self {
        self.enable_default_internet_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether default internet access is enabled for the app block builder.</p>
    pub fn set_enable_default_internet_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_default_internet_access = input;
        self
    }
    /// <p>Indicates whether default internet access is enabled for the app block builder.</p>
    pub fn get_enable_default_internet_access(&self) -> &::std::option::Option<bool> {
        &self.enable_default_internet_access
    }
    /// <p>The ARN of the IAM role that is applied to the app block builder.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that is applied to the app block builder.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that is applied to the app block builder.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The VPC configuration for the app block builder.</p>
    /// This field is required.
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPC configuration for the app block builder.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>The VPC configuration for the app block builder.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>The state of the app block builder.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::AppBlockBuilderState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the app block builder.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::AppBlockBuilderState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the app block builder.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::AppBlockBuilderState> {
        &self.state
    }
    /// <p>The creation time of the app block builder.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the app block builder.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The creation time of the app block builder.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// Appends an item to `app_block_builder_errors`.
    ///
    /// To override the contents of this collection use [`set_app_block_builder_errors`](Self::set_app_block_builder_errors).
    ///
    /// <p>The app block builder errors.</p>
    pub fn app_block_builder_errors(mut self, input: crate::types::ResourceError) -> Self {
        let mut v = self.app_block_builder_errors.unwrap_or_default();
        v.push(input);
        self.app_block_builder_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The app block builder errors.</p>
    pub fn set_app_block_builder_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>) -> Self {
        self.app_block_builder_errors = input;
        self
    }
    /// <p>The app block builder errors.</p>
    pub fn get_app_block_builder_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceError>> {
        &self.app_block_builder_errors
    }
    /// <p>The state change reason.</p>
    pub fn state_change_reason(mut self, input: crate::types::AppBlockBuilderStateChangeReason) -> Self {
        self.state_change_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state change reason.</p>
    pub fn set_state_change_reason(mut self, input: ::std::option::Option<crate::types::AppBlockBuilderStateChangeReason>) -> Self {
        self.state_change_reason = input;
        self
    }
    /// <p>The state change reason.</p>
    pub fn get_state_change_reason(&self) -> &::std::option::Option<crate::types::AppBlockBuilderStateChangeReason> {
        &self.state_change_reason
    }
    /// Appends an item to `access_endpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        let mut v = self.access_endpoints.unwrap_or_default();
        v.push(input);
        self.access_endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub fn set_access_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>) -> Self {
        self.access_endpoints = input;
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub fn get_access_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>> {
        &self.access_endpoints
    }
    /// Consumes the builder and constructs a [`AppBlockBuilder`](crate::types::AppBlockBuilder).
    pub fn build(self) -> crate::types::AppBlockBuilder {
        crate::types::AppBlockBuilder {
            arn: self.arn,
            name: self.name,
            display_name: self.display_name,
            description: self.description,
            platform: self.platform,
            instance_type: self.instance_type,
            enable_default_internet_access: self.enable_default_internet_access,
            iam_role_arn: self.iam_role_arn,
            vpc_config: self.vpc_config,
            state: self.state,
            created_time: self.created_time,
            app_block_builder_errors: self.app_block_builder_errors,
            state_change_reason: self.state_change_reason,
            access_endpoints: self.access_endpoints,
        }
    }
}
