// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a streaming session.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Session {
    /// <p>The identifier of the streaming session.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the user for whom the session was created.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The name of the stack for the streaming session.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    /// <p>The name of the fleet for the streaming session.</p>
    #[doc(hidden)]
    pub fleet_name: std::option::Option<std::string::String>,
    /// <p>The current state of the streaming session.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::SessionState>,
    /// <p>Specifies whether a user is connected to the streaming session.</p>
    #[doc(hidden)]
    pub connection_state: std::option::Option<crate::types::SessionConnectionState>,
    /// <p>The time when a streaming instance is dedicated for the user.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends.</p>
    #[doc(hidden)]
    pub max_expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>).</p>
    #[doc(hidden)]
    pub authentication_type: std::option::Option<crate::types::AuthenticationType>,
    /// <p>The network details for the streaming session.</p>
    #[doc(hidden)]
    pub network_access_configuration: std::option::Option<crate::types::NetworkAccessConfiguration>,
}
impl Session {
    /// <p>The identifier of the streaming session.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the user for whom the session was created.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The name of the stack for the streaming session.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The name of the fleet for the streaming session.</p>
    pub fn fleet_name(&self) -> std::option::Option<&str> {
        self.fleet_name.as_deref()
    }
    /// <p>The current state of the streaming session.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::SessionState> {
        self.state.as_ref()
    }
    /// <p>Specifies whether a user is connected to the streaming session.</p>
    pub fn connection_state(&self) -> std::option::Option<&crate::types::SessionConnectionState> {
        self.connection_state.as_ref()
    }
    /// <p>The time when a streaming instance is dedicated for the user.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends.</p>
    pub fn max_expiration_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.max_expiration_time.as_ref()
    }
    /// <p>The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>).</p>
    pub fn authentication_type(&self) -> std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>The network details for the streaming session.</p>
    pub fn network_access_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NetworkAccessConfiguration> {
        self.network_access_configuration.as_ref()
    }
}
impl Session {
    /// Creates a new builder-style object to manufacture [`Session`](crate::types::Session).
    pub fn builder() -> crate::types::builders::SessionBuilder {
        crate::types::builders::SessionBuilder::default()
    }
}

/// A builder for [`Session`](crate::types::Session).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) stack_name: std::option::Option<std::string::String>,
    pub(crate) fleet_name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::SessionState>,
    pub(crate) connection_state: std::option::Option<crate::types::SessionConnectionState>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) max_expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) authentication_type: std::option::Option<crate::types::AuthenticationType>,
    pub(crate) network_access_configuration:
        std::option::Option<crate::types::NetworkAccessConfiguration>,
}
impl SessionBuilder {
    /// <p>The identifier of the streaming session.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the streaming session.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the user for whom the session was created.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The identifier of the user for whom the session was created.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The name of the stack for the streaming session.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The name of the stack for the streaming session.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name of the fleet for the streaming session.</p>
    pub fn fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet for the streaming session.</p>
    pub fn set_fleet_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_name = input;
        self
    }
    /// <p>The current state of the streaming session.</p>
    pub fn state(mut self, input: crate::types::SessionState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the streaming session.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::SessionState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Specifies whether a user is connected to the streaming session.</p>
    pub fn connection_state(mut self, input: crate::types::SessionConnectionState) -> Self {
        self.connection_state = Some(input);
        self
    }
    /// <p>Specifies whether a user is connected to the streaming session.</p>
    pub fn set_connection_state(
        mut self,
        input: std::option::Option<crate::types::SessionConnectionState>,
    ) -> Self {
        self.connection_state = input;
        self
    }
    /// <p>The time when a streaming instance is dedicated for the user.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time when a streaming instance is dedicated for the user.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends.</p>
    pub fn max_expiration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.max_expiration_time = Some(input);
        self
    }
    /// <p>The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends.</p>
    pub fn set_max_expiration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.max_expiration_time = input;
        self
    }
    /// <p>The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>).</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = Some(input);
        self
    }
    /// <p>The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>).</p>
    pub fn set_authentication_type(
        mut self,
        input: std::option::Option<crate::types::AuthenticationType>,
    ) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The network details for the streaming session.</p>
    pub fn network_access_configuration(
        mut self,
        input: crate::types::NetworkAccessConfiguration,
    ) -> Self {
        self.network_access_configuration = Some(input);
        self
    }
    /// <p>The network details for the streaming session.</p>
    pub fn set_network_access_configuration(
        mut self,
        input: std::option::Option<crate::types::NetworkAccessConfiguration>,
    ) -> Self {
        self.network_access_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Session`](crate::types::Session).
    pub fn build(self) -> crate::types::Session {
        crate::types::Session {
            id: self.id,
            user_id: self.user_id,
            stack_name: self.stack_name,
            fleet_name: self.fleet_name,
            state: self.state,
            connection_state: self.connection_state,
            start_time: self.start_time,
            max_expiration_time: self.max_expiration_time,
            authentication_type: self.authentication_type,
            network_access_configuration: self.network_access_configuration,
        }
    }
}
