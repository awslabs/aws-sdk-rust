// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The application associated to an entitlement. Access is controlled based on user attributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntitledApplication {
    /// <p>The identifier of the application.</p>
    #[doc(hidden)]
    pub application_identifier: std::option::Option<std::string::String>,
}
impl EntitledApplication {
    /// <p>The identifier of the application.</p>
    pub fn application_identifier(&self) -> std::option::Option<&str> {
        self.application_identifier.as_deref()
    }
}
impl EntitledApplication {
    /// Creates a new builder-style object to manufacture [`EntitledApplication`](crate::types::EntitledApplication).
    pub fn builder() -> crate::types::builders::EntitledApplicationBuilder {
        crate::types::builders::EntitledApplicationBuilder::default()
    }
}

/// A builder for [`EntitledApplication`](crate::types::EntitledApplication).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntitledApplicationBuilder {
    pub(crate) application_identifier: std::option::Option<std::string::String>,
}
impl EntitledApplicationBuilder {
    /// <p>The identifier of the application.</p>
    pub fn application_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the application.</p>
    pub fn set_application_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`EntitledApplication`](crate::types::EntitledApplication).
    pub fn build(self) -> crate::types::EntitledApplication {
        crate::types::EntitledApplication {
            application_identifier: self.application_identifier,
        }
    }
}
