// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the capacity for a fleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComputeCapacity {
    /// <p>The desired number of streaming instances.</p>
    #[doc(hidden)]
    pub desired_instances: std::option::Option<i32>,
}
impl ComputeCapacity {
    /// <p>The desired number of streaming instances.</p>
    pub fn desired_instances(&self) -> std::option::Option<i32> {
        self.desired_instances
    }
}
impl ComputeCapacity {
    /// Creates a new builder-style object to manufacture [`ComputeCapacity`](crate::types::ComputeCapacity).
    pub fn builder() -> crate::types::builders::ComputeCapacityBuilder {
        crate::types::builders::ComputeCapacityBuilder::default()
    }
}

/// A builder for [`ComputeCapacity`](crate::types::ComputeCapacity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComputeCapacityBuilder {
    pub(crate) desired_instances: std::option::Option<i32>,
}
impl ComputeCapacityBuilder {
    /// <p>The desired number of streaming instances.</p>
    pub fn desired_instances(mut self, input: i32) -> Self {
        self.desired_instances = Some(input);
        self
    }
    /// <p>The desired number of streaming instances.</p>
    pub fn set_desired_instances(mut self, input: std::option::Option<i32>) -> Self {
        self.desired_instances = input;
        self
    }
    /// Consumes the builder and constructs a [`ComputeCapacity`](crate::types::ComputeCapacity).
    pub fn build(self) -> crate::types::ComputeCapacity {
        crate::types::ComputeCapacity {
            desired_instances: self.desired_instances,
        }
    }
}
