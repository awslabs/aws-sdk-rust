// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a user in the user pool and the associated stack.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserStackAssociation {
    /// <p>The name of the stack that is associated with the user.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the user who is associated with the stack.</p> <note>
    /// <p>Users' email addresses are case-sensitive.</p>
    /// </note>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type for the user.</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
    pub send_email_notification: ::std::option::Option<bool>,
}
impl UserStackAssociation {
    /// <p>The name of the stack that is associated with the user.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The email address of the user who is associated with the stack.</p> <note>
    /// <p>Users' email addresses are case-sensitive.</p>
    /// </note>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The authentication type for the user.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
    pub fn send_email_notification(&self) -> ::std::option::Option<bool> {
        self.send_email_notification
    }
}
impl ::std::fmt::Debug for UserStackAssociation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserStackAssociation");
        formatter.field("stack_name", &self.stack_name);
        formatter.field("user_name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_type", &self.authentication_type);
        formatter.field("send_email_notification", &self.send_email_notification);
        formatter.finish()
    }
}
impl UserStackAssociation {
    /// Creates a new builder-style object to manufacture [`UserStackAssociation`](crate::types::UserStackAssociation).
    pub fn builder() -> crate::types::builders::UserStackAssociationBuilder {
        crate::types::builders::UserStackAssociationBuilder::default()
    }
}

/// A builder for [`UserStackAssociation`](crate::types::UserStackAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UserStackAssociationBuilder {
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) send_email_notification: ::std::option::Option<bool>,
}
impl UserStackAssociationBuilder {
    /// <p>The name of the stack that is associated with the user.</p>
    /// This field is required.
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stack that is associated with the user.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name of the stack that is associated with the user.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// <p>The email address of the user who is associated with the stack.</p> <note>
    /// <p>Users' email addresses are case-sensitive.</p>
    /// </note>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the user who is associated with the stack.</p> <note>
    /// <p>Users' email addresses are case-sensitive.</p>
    /// </note>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The email address of the user who is associated with the stack.</p> <note>
    /// <p>Users' email addresses are case-sensitive.</p>
    /// </note>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The authentication type for the user.</p>
    /// This field is required.
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type for the user.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The authentication type for the user.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
    pub fn send_email_notification(mut self, input: bool) -> Self {
        self.send_email_notification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
    pub fn set_send_email_notification(mut self, input: ::std::option::Option<bool>) -> Self {
        self.send_email_notification = input;
        self
    }
    /// <p>Specifies whether a welcome email is sent to a user after the user is created in the user pool.</p>
    pub fn get_send_email_notification(&self) -> &::std::option::Option<bool> {
        &self.send_email_notification
    }
    /// Consumes the builder and constructs a [`UserStackAssociation`](crate::types::UserStackAssociation).
    pub fn build(self) -> crate::types::UserStackAssociation {
        crate::types::UserStackAssociation {
            stack_name: self.stack_name,
            user_name: self.user_name,
            authentication_type: self.authentication_type,
            send_email_notification: self.send_email_notification,
        }
    }
}
impl ::std::fmt::Debug for UserStackAssociationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserStackAssociationBuilder");
        formatter.field("stack_name", &self.stack_name);
        formatter.field("user_name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_type", &self.authentication_type);
        formatter.field("send_email_notification", &self.send_email_notification);
        formatter.finish()
    }
}
