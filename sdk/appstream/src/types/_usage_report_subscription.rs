// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes information about the usage report subscription.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageReportSubscription {
    /// <p>The Amazon S3 bucket where generated reports are stored.</p>
    /// <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The schedule for generating usage reports.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::UsageReportSchedule>,
    /// <p>The time when the last usage report was generated.</p>
    #[doc(hidden)]
    pub last_generated_report_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The errors that were returned if usage reports couldn't be generated.</p>
    #[doc(hidden)]
    pub subscription_errors:
        std::option::Option<std::vec::Vec<crate::types::LastReportGenerationExecutionError>>,
}
impl UsageReportSubscription {
    /// <p>The Amazon S3 bucket where generated reports are stored.</p>
    /// <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The schedule for generating usage reports.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::UsageReportSchedule> {
        self.schedule.as_ref()
    }
    /// <p>The time when the last usage report was generated.</p>
    pub fn last_generated_report_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_generated_report_date.as_ref()
    }
    /// <p>The errors that were returned if usage reports couldn't be generated.</p>
    pub fn subscription_errors(
        &self,
    ) -> std::option::Option<&[crate::types::LastReportGenerationExecutionError]> {
        self.subscription_errors.as_deref()
    }
}
impl UsageReportSubscription {
    /// Creates a new builder-style object to manufacture [`UsageReportSubscription`](crate::types::UsageReportSubscription).
    pub fn builder() -> crate::types::builders::UsageReportSubscriptionBuilder {
        crate::types::builders::UsageReportSubscriptionBuilder::default()
    }
}

/// A builder for [`UsageReportSubscription`](crate::types::UsageReportSubscription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageReportSubscriptionBuilder {
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) schedule: std::option::Option<crate::types::UsageReportSchedule>,
    pub(crate) last_generated_report_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) subscription_errors:
        std::option::Option<std::vec::Vec<crate::types::LastReportGenerationExecutionError>>,
}
impl UsageReportSubscriptionBuilder {
    /// <p>The Amazon S3 bucket where generated reports are stored.</p>
    /// <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket where generated reports are stored.</p>
    /// <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The schedule for generating usage reports.</p>
    pub fn schedule(mut self, input: crate::types::UsageReportSchedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>The schedule for generating usage reports.</p>
    pub fn set_schedule(
        mut self,
        input: std::option::Option<crate::types::UsageReportSchedule>,
    ) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The time when the last usage report was generated.</p>
    pub fn last_generated_report_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_generated_report_date = Some(input);
        self
    }
    /// <p>The time when the last usage report was generated.</p>
    pub fn set_last_generated_report_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_generated_report_date = input;
        self
    }
    /// Appends an item to `subscription_errors`.
    ///
    /// To override the contents of this collection use [`set_subscription_errors`](Self::set_subscription_errors).
    ///
    /// <p>The errors that were returned if usage reports couldn't be generated.</p>
    pub fn subscription_errors(
        mut self,
        input: crate::types::LastReportGenerationExecutionError,
    ) -> Self {
        let mut v = self.subscription_errors.unwrap_or_default();
        v.push(input);
        self.subscription_errors = Some(v);
        self
    }
    /// <p>The errors that were returned if usage reports couldn't be generated.</p>
    pub fn set_subscription_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LastReportGenerationExecutionError>>,
    ) -> Self {
        self.subscription_errors = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageReportSubscription`](crate::types::UsageReportSubscription).
    pub fn build(self) -> crate::types::UsageReportSubscription {
        crate::types::UsageReportSubscription {
            s3_bucket_name: self.s3_bucket_name,
            schedule: self.schedule,
            last_generated_report_date: self.last_generated_report_date,
            subscription_errors: self.subscription_errors,
        }
    }
}
