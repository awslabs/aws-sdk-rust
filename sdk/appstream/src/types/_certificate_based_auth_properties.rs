// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateBasedAuthProperties {
    /// <p>The status of the certificate-based authentication properties.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CertificateBasedAuthStatus>,
    /// <p>The ARN of the AWS Certificate Manager Private CA resource.</p>
    #[doc(hidden)]
    pub certificate_authority_arn: std::option::Option<std::string::String>,
}
impl CertificateBasedAuthProperties {
    /// <p>The status of the certificate-based authentication properties.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CertificateBasedAuthStatus> {
        self.status.as_ref()
    }
    /// <p>The ARN of the AWS Certificate Manager Private CA resource.</p>
    pub fn certificate_authority_arn(&self) -> std::option::Option<&str> {
        self.certificate_authority_arn.as_deref()
    }
}
impl CertificateBasedAuthProperties {
    /// Creates a new builder-style object to manufacture [`CertificateBasedAuthProperties`](crate::types::CertificateBasedAuthProperties).
    pub fn builder() -> crate::types::builders::CertificateBasedAuthPropertiesBuilder {
        crate::types::builders::CertificateBasedAuthPropertiesBuilder::default()
    }
}

/// A builder for [`CertificateBasedAuthProperties`](crate::types::CertificateBasedAuthProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateBasedAuthPropertiesBuilder {
    pub(crate) status: std::option::Option<crate::types::CertificateBasedAuthStatus>,
    pub(crate) certificate_authority_arn: std::option::Option<std::string::String>,
}
impl CertificateBasedAuthPropertiesBuilder {
    /// <p>The status of the certificate-based authentication properties.</p>
    pub fn status(mut self, input: crate::types::CertificateBasedAuthStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the certificate-based authentication properties.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CertificateBasedAuthStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The ARN of the AWS Certificate Manager Private CA resource.</p>
    pub fn certificate_authority_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_authority_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the AWS Certificate Manager Private CA resource.</p>
    pub fn set_certificate_authority_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_authority_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateBasedAuthProperties`](crate::types::CertificateBasedAuthProperties).
    pub fn build(self) -> crate::types::CertificateBasedAuthProperties {
        crate::types::CertificateBasedAuthProperties {
            status: self.status,
            certificate_authority_arn: self.certificate_authority_arn,
        }
    }
}
