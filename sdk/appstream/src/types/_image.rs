// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an image.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Image {
    /// <p>The name of the image.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the image.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the image from which this image was created.</p>
    pub base_image_arn: ::std::option::Option<::std::string::String>,
    /// <p>The image name to display.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    pub state: ::std::option::Option<crate::types::ImageState>,
    /// <p>Indicates whether the image is public or private.</p>
    pub visibility: ::std::option::Option<crate::types::VisibilityType>,
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    pub image_builder_supported: ::std::option::Option<bool>,
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    pub image_builder_name: ::std::option::Option<::std::string::String>,
    /// <p>The operating system platform of the image.</p>
    pub platform: ::std::option::Option<crate::types::PlatformType>,
    /// <p>The description to display.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The reason why the last state change occurred.</p>
    pub state_change_reason: ::std::option::Option<crate::types::ImageStateChangeReason>,
    /// <p>The applications associated with the image.</p>
    pub applications: ::std::option::Option<::std::vec::Vec<crate::types::Application>>,
    /// <p>The time the image was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.</p>
    pub public_base_image_released_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    pub appstream_agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    pub image_permissions: ::std::option::Option<crate::types::ImagePermissions>,
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    pub image_errors: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>,
}
impl Image {
    /// <p>The name of the image.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the image.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ARN of the image from which this image was created.</p>
    pub fn base_image_arn(&self) -> ::std::option::Option<&str> {
        self.base_image_arn.as_deref()
    }
    /// <p>The image name to display.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ImageState> {
        self.state.as_ref()
    }
    /// <p>Indicates whether the image is public or private.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::VisibilityType> {
        self.visibility.as_ref()
    }
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    pub fn image_builder_supported(&self) -> ::std::option::Option<bool> {
        self.image_builder_supported
    }
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    pub fn image_builder_name(&self) -> ::std::option::Option<&str> {
        self.image_builder_name.as_deref()
    }
    /// <p>The operating system platform of the image.</p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::PlatformType> {
        self.platform.as_ref()
    }
    /// <p>The description to display.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn state_change_reason(&self) -> ::std::option::Option<&crate::types::ImageStateChangeReason> {
        self.state_change_reason.as_ref()
    }
    /// <p>The applications associated with the image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.applications.is_none()`.
    pub fn applications(&self) -> &[crate::types::Application] {
        self.applications.as_deref().unwrap_or_default()
    }
    /// <p>The time the image was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.</p>
    pub fn public_base_image_released_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.public_base_image_released_date.as_ref()
    }
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    pub fn appstream_agent_version(&self) -> ::std::option::Option<&str> {
        self.appstream_agent_version.as_deref()
    }
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    pub fn image_permissions(&self) -> ::std::option::Option<&crate::types::ImagePermissions> {
        self.image_permissions.as_ref()
    }
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_errors.is_none()`.
    pub fn image_errors(&self) -> &[crate::types::ResourceError] {
        self.image_errors.as_deref().unwrap_or_default()
    }
}
impl Image {
    /// Creates a new builder-style object to manufacture [`Image`](crate::types::Image).
    pub fn builder() -> crate::types::builders::ImageBuilder {
        crate::types::builders::ImageBuilder::default()
    }
}

/// A builder for [`Image`](crate::types::Image).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) base_image_arn: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ImageState>,
    pub(crate) visibility: ::std::option::Option<crate::types::VisibilityType>,
    pub(crate) image_builder_supported: ::std::option::Option<bool>,
    pub(crate) image_builder_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<crate::types::PlatformType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) state_change_reason: ::std::option::Option<crate::types::ImageStateChangeReason>,
    pub(crate) applications: ::std::option::Option<::std::vec::Vec<crate::types::Application>>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) public_base_image_released_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) appstream_agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) image_permissions: ::std::option::Option<crate::types::ImagePermissions>,
    pub(crate) image_errors: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>,
}
impl ImageBuilder {
    /// <p>The name of the image.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the image.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the image.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the image.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the image.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ARN of the image from which this image was created.</p>
    pub fn base_image_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_image_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the image from which this image was created.</p>
    pub fn set_base_image_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_image_arn = input;
        self
    }
    /// <p>The ARN of the image from which this image was created.</p>
    pub fn get_base_image_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_image_arn
    }
    /// <p>The image name to display.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image name to display.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The image name to display.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    pub fn state(mut self, input: crate::types::ImageState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ImageState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ImageState> {
        &self.state
    }
    /// <p>Indicates whether the image is public or private.</p>
    pub fn visibility(mut self, input: crate::types::VisibilityType) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the image is public or private.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::VisibilityType>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Indicates whether the image is public or private.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::VisibilityType> {
        &self.visibility
    }
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    pub fn image_builder_supported(mut self, input: bool) -> Self {
        self.image_builder_supported = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    pub fn set_image_builder_supported(mut self, input: ::std::option::Option<bool>) -> Self {
        self.image_builder_supported = input;
        self
    }
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    pub fn get_image_builder_supported(&self) -> &::std::option::Option<bool> {
        &self.image_builder_supported
    }
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    pub fn image_builder_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_builder_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    pub fn set_image_builder_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_builder_name = input;
        self
    }
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    pub fn get_image_builder_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_builder_name
    }
    /// <p>The operating system platform of the image.</p>
    pub fn platform(mut self, input: crate::types::PlatformType) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system platform of the image.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::PlatformType>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The operating system platform of the image.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::PlatformType> {
        &self.platform
    }
    /// <p>The description to display.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to display.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to display.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn state_change_reason(mut self, input: crate::types::ImageStateChangeReason) -> Self {
        self.state_change_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn set_state_change_reason(mut self, input: ::std::option::Option<crate::types::ImageStateChangeReason>) -> Self {
        self.state_change_reason = input;
        self
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn get_state_change_reason(&self) -> &::std::option::Option<crate::types::ImageStateChangeReason> {
        &self.state_change_reason
    }
    /// Appends an item to `applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>The applications associated with the image.</p>
    pub fn applications(mut self, input: crate::types::Application) -> Self {
        let mut v = self.applications.unwrap_or_default();
        v.push(input);
        self.applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The applications associated with the image.</p>
    pub fn set_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Application>>) -> Self {
        self.applications = input;
        self
    }
    /// <p>The applications associated with the image.</p>
    pub fn get_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Application>> {
        &self.applications
    }
    /// <p>The time the image was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the image was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time the image was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.</p>
    pub fn public_base_image_released_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.public_base_image_released_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.</p>
    pub fn set_public_base_image_released_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.public_base_image_released_date = input;
        self
    }
    /// <p>The release date of the public base image. For private images, this date is the release date of the base image from which the image was created.</p>
    pub fn get_public_base_image_released_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.public_base_image_released_date
    }
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    pub fn appstream_agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.appstream_agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    pub fn set_appstream_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.appstream_agent_version = input;
        self
    }
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    pub fn get_appstream_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.appstream_agent_version
    }
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    pub fn image_permissions(mut self, input: crate::types::ImagePermissions) -> Self {
        self.image_permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    pub fn set_image_permissions(mut self, input: ::std::option::Option<crate::types::ImagePermissions>) -> Self {
        self.image_permissions = input;
        self
    }
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    pub fn get_image_permissions(&self) -> &::std::option::Option<crate::types::ImagePermissions> {
        &self.image_permissions
    }
    /// Appends an item to `image_errors`.
    ///
    /// To override the contents of this collection use [`set_image_errors`](Self::set_image_errors).
    ///
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    pub fn image_errors(mut self, input: crate::types::ResourceError) -> Self {
        let mut v = self.image_errors.unwrap_or_default();
        v.push(input);
        self.image_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    pub fn set_image_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceError>>) -> Self {
        self.image_errors = input;
        self
    }
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    pub fn get_image_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceError>> {
        &self.image_errors
    }
    /// Consumes the builder and constructs a [`Image`](crate::types::Image).
    pub fn build(self) -> crate::types::Image {
        crate::types::Image {
            name: self.name,
            arn: self.arn,
            base_image_arn: self.base_image_arn,
            display_name: self.display_name,
            state: self.state,
            visibility: self.visibility,
            image_builder_supported: self.image_builder_supported,
            image_builder_name: self.image_builder_name,
            platform: self.platform,
            description: self.description,
            state_change_reason: self.state_change_reason,
            applications: self.applications,
            created_time: self.created_time,
            public_base_image_released_date: self.public_base_image_released_date,
            appstream_agent_version: self.appstream_agent_version,
            image_permissions: self.image_permissions,
            image_errors: self.image_errors,
        }
    }
}
