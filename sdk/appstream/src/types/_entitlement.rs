// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Entitlement {
    /// <p>The name of the entitlement.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the stack with which the entitlement is associated.</p>
    #[doc(hidden)]
    pub stack_name: std::option::Option<std::string::String>,
    /// <p>The description of the entitlement.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Specifies whether all or selected apps are entitled.</p>
    #[doc(hidden)]
    pub app_visibility: std::option::Option<crate::types::AppVisibility>,
    /// <p>The attributes of the entitlement.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
    /// <p>The time when the entitlement was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the entitlement was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Entitlement {
    /// <p>The name of the entitlement.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn stack_name(&self) -> std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The description of the entitlement.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether all or selected apps are entitled.</p>
    pub fn app_visibility(&self) -> std::option::Option<&crate::types::AppVisibility> {
        self.app_visibility.as_ref()
    }
    /// <p>The attributes of the entitlement.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::EntitlementAttribute]> {
        self.attributes.as_deref()
    }
    /// <p>The time when the entitlement was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The time when the entitlement was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl Entitlement {
    /// Creates a new builder-style object to manufacture [`Entitlement`](crate::types::Entitlement).
    pub fn builder() -> crate::types::builders::EntitlementBuilder {
        crate::types::builders::EntitlementBuilder::default()
    }
}

/// A builder for [`Entitlement`](crate::types::Entitlement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntitlementBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) stack_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) app_visibility: std::option::Option<crate::types::AppVisibility>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EntitlementBuilder {
    /// <p>The name of the entitlement.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the entitlement.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_name = Some(input.into());
        self
    }
    /// <p>The name of the stack with which the entitlement is associated.</p>
    pub fn set_stack_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The description of the entitlement.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the entitlement.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies whether all or selected apps are entitled.</p>
    pub fn app_visibility(mut self, input: crate::types::AppVisibility) -> Self {
        self.app_visibility = Some(input);
        self
    }
    /// <p>Specifies whether all or selected apps are entitled.</p>
    pub fn set_app_visibility(
        mut self,
        input: std::option::Option<crate::types::AppVisibility>,
    ) -> Self {
        self.app_visibility = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The attributes of the entitlement.</p>
    pub fn attributes(mut self, input: crate::types::EntitlementAttribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>The attributes of the entitlement.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntitlementAttribute>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The time when the entitlement was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The time when the entitlement was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time when the entitlement was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The time when the entitlement was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Entitlement`](crate::types::Entitlement).
    pub fn build(self) -> crate::types::Entitlement {
        crate::types::Entitlement {
            name: self.name,
            stack_name: self.stack_name,
            description: self.description,
            app_visibility: self.app_visibility,
            attributes: self.attributes,
            created_time: self.created_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
