// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The persistent application settings for users of a stack.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSettings {
    /// <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
    pub settings_group: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettings {
    /// <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
    pub fn settings_group(&self) -> ::std::option::Option<&str> {
        self.settings_group.as_deref()
    }
}
impl ApplicationSettings {
    /// Creates a new builder-style object to manufacture [`ApplicationSettings`](crate::types::ApplicationSettings).
    pub fn builder() -> crate::types::builders::ApplicationSettingsBuilder {
        crate::types::builders::ApplicationSettingsBuilder::default()
    }
}

/// A builder for [`ApplicationSettings`](crate::types::ApplicationSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationSettingsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) settings_group: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettingsBuilder {
    /// <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Enables or disables persistent application settings for users during their streaming sessions. </p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
    pub fn settings_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.settings_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
    pub fn set_settings_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.settings_group = input;
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. </p>
    pub fn get_settings_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.settings_group
    }
    /// Consumes the builder and constructs a [`ApplicationSettings`](crate::types::ApplicationSettings).
    pub fn build(self) -> crate::types::ApplicationSettings {
        crate::types::ApplicationSettings {
            enabled: self.enabled,
            settings_group: self.settings_group,
        }
    }
}
