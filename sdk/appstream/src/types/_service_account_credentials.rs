// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the credentials for the service account used by the fleet or image builder to connect to the directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServiceAccountCredentials {
    /// <p>The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.</p>
    pub account_name: ::std::option::Option<::std::string::String>,
    /// <p>The password for the account.</p>
    pub account_password: ::std::option::Option<::std::string::String>,
}
impl ServiceAccountCredentials {
    /// <p>The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.</p>
    pub fn account_name(&self) -> ::std::option::Option<&str> {
        self.account_name.as_deref()
    }
    /// <p>The password for the account.</p>
    pub fn account_password(&self) -> ::std::option::Option<&str> {
        self.account_password.as_deref()
    }
}
impl ::std::fmt::Debug for ServiceAccountCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceAccountCredentials");
        formatter.field("account_name", &"*** Sensitive Data Redacted ***");
        formatter.field("account_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ServiceAccountCredentials {
    /// Creates a new builder-style object to manufacture [`ServiceAccountCredentials`](crate::types::ServiceAccountCredentials).
    pub fn builder() -> crate::types::builders::ServiceAccountCredentialsBuilder {
        crate::types::builders::ServiceAccountCredentialsBuilder::default()
    }
}

/// A builder for [`ServiceAccountCredentials`](crate::types::ServiceAccountCredentials).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ServiceAccountCredentialsBuilder {
    pub(crate) account_name: ::std::option::Option<::std::string::String>,
    pub(crate) account_password: ::std::option::Option<::std::string::String>,
}
impl ServiceAccountCredentialsBuilder {
    /// <p>The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.</p>
    /// This field is required.
    pub fn account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.</p>
    pub fn set_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_name = input;
        self
    }
    /// <p>The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.</p>
    pub fn get_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_name
    }
    /// <p>The password for the account.</p>
    /// This field is required.
    pub fn account_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password for the account.</p>
    pub fn set_account_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_password = input;
        self
    }
    /// <p>The password for the account.</p>
    pub fn get_account_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_password
    }
    /// Consumes the builder and constructs a [`ServiceAccountCredentials`](crate::types::ServiceAccountCredentials).
    pub fn build(self) -> crate::types::ServiceAccountCredentials {
        crate::types::ServiceAccountCredentials {
            account_name: self.account_name,
            account_password: self.account_password,
        }
    }
}
impl ::std::fmt::Debug for ServiceAccountCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceAccountCredentialsBuilder");
        formatter.field("account_name", &"*** Sensitive Data Redacted ***");
        formatter.field("account_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
