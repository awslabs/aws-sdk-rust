// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The collection of license usage records.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdminAppLicenseUsageRecord {
    /// <p>The ARN of the user who used the license-included application.</p>
    pub user_arn: ::std::option::Option<::std::string::String>,
    /// <p>The billing period for the license usage record.</p>
    pub billing_period: ::std::option::Option<::std::string::String>,
    /// <p>The account ID of the owner of the license.</p>
    pub owner_aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the license was first used.</p>
    pub subscription_first_used_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the license was last used.</p>
    pub subscription_last_used_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of license (for example, Microsoft Office).</p>
    pub license_type: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the user who used the license-included application.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl AdminAppLicenseUsageRecord {
    /// <p>The ARN of the user who used the license-included application.</p>
    pub fn user_arn(&self) -> ::std::option::Option<&str> {
        self.user_arn.as_deref()
    }
    /// <p>The billing period for the license usage record.</p>
    pub fn billing_period(&self) -> ::std::option::Option<&str> {
        self.billing_period.as_deref()
    }
    /// <p>The account ID of the owner of the license.</p>
    pub fn owner_aws_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_aws_account_id.as_deref()
    }
    /// <p>The date and time when the license was first used.</p>
    pub fn subscription_first_used_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.subscription_first_used_date.as_ref()
    }
    /// <p>The date and time when the license was last used.</p>
    pub fn subscription_last_used_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.subscription_last_used_date.as_ref()
    }
    /// <p>The type of license (for example, Microsoft Office).</p>
    pub fn license_type(&self) -> ::std::option::Option<&str> {
        self.license_type.as_deref()
    }
    /// <p>The ID of the user who used the license-included application.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl AdminAppLicenseUsageRecord {
    /// Creates a new builder-style object to manufacture [`AdminAppLicenseUsageRecord`](crate::types::AdminAppLicenseUsageRecord).
    pub fn builder() -> crate::types::builders::AdminAppLicenseUsageRecordBuilder {
        crate::types::builders::AdminAppLicenseUsageRecordBuilder::default()
    }
}

/// A builder for [`AdminAppLicenseUsageRecord`](crate::types::AdminAppLicenseUsageRecord).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdminAppLicenseUsageRecordBuilder {
    pub(crate) user_arn: ::std::option::Option<::std::string::String>,
    pub(crate) billing_period: ::std::option::Option<::std::string::String>,
    pub(crate) owner_aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_first_used_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) subscription_last_used_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) license_type: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl AdminAppLicenseUsageRecordBuilder {
    /// <p>The ARN of the user who used the license-included application.</p>
    /// This field is required.
    pub fn user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user who used the license-included application.</p>
    pub fn set_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// <p>The ARN of the user who used the license-included application.</p>
    pub fn get_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_arn
    }
    /// <p>The billing period for the license usage record.</p>
    /// This field is required.
    pub fn billing_period(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_period = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The billing period for the license usage record.</p>
    pub fn set_billing_period(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_period = input;
        self
    }
    /// <p>The billing period for the license usage record.</p>
    pub fn get_billing_period(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_period
    }
    /// <p>The account ID of the owner of the license.</p>
    /// This field is required.
    pub fn owner_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of the owner of the license.</p>
    pub fn set_owner_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_aws_account_id = input;
        self
    }
    /// <p>The account ID of the owner of the license.</p>
    pub fn get_owner_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_aws_account_id
    }
    /// <p>The date and time when the license was first used.</p>
    /// This field is required.
    pub fn subscription_first_used_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.subscription_first_used_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the license was first used.</p>
    pub fn set_subscription_first_used_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.subscription_first_used_date = input;
        self
    }
    /// <p>The date and time when the license was first used.</p>
    pub fn get_subscription_first_used_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.subscription_first_used_date
    }
    /// <p>The date and time when the license was last used.</p>
    /// This field is required.
    pub fn subscription_last_used_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.subscription_last_used_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the license was last used.</p>
    pub fn set_subscription_last_used_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.subscription_last_used_date = input;
        self
    }
    /// <p>The date and time when the license was last used.</p>
    pub fn get_subscription_last_used_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.subscription_last_used_date
    }
    /// <p>The type of license (for example, Microsoft Office).</p>
    /// This field is required.
    pub fn license_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of license (for example, Microsoft Office).</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_type = input;
        self
    }
    /// <p>The type of license (for example, Microsoft Office).</p>
    pub fn get_license_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_type
    }
    /// <p>The ID of the user who used the license-included application.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user who used the license-included application.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The ID of the user who used the license-included application.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`AdminAppLicenseUsageRecord`](crate::types::AdminAppLicenseUsageRecord).
    pub fn build(self) -> crate::types::AdminAppLicenseUsageRecord {
        crate::types::AdminAppLicenseUsageRecord {
            user_arn: self.user_arn,
            billing_period: self.billing_period,
            owner_aws_account_id: self.owner_aws_account_id,
            subscription_first_used_date: self.subscription_first_used_date,
            subscription_last_used_date: self.subscription_last_used_date,
            license_type: self.license_type,
            user_id: self.user_id,
        }
    }
}
