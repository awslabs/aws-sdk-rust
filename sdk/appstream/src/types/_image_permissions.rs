// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the permissions for an image. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImagePermissions {
    /// <p>Indicates whether the image can be used for a fleet.</p>
    #[doc(hidden)]
    pub allow_fleet: std::option::Option<bool>,
    /// <p>Indicates whether the image can be used for an image builder.</p>
    #[doc(hidden)]
    pub allow_image_builder: std::option::Option<bool>,
}
impl ImagePermissions {
    /// <p>Indicates whether the image can be used for a fleet.</p>
    pub fn allow_fleet(&self) -> std::option::Option<bool> {
        self.allow_fleet
    }
    /// <p>Indicates whether the image can be used for an image builder.</p>
    pub fn allow_image_builder(&self) -> std::option::Option<bool> {
        self.allow_image_builder
    }
}
impl ImagePermissions {
    /// Creates a new builder-style object to manufacture [`ImagePermissions`](crate::types::ImagePermissions).
    pub fn builder() -> crate::types::builders::ImagePermissionsBuilder {
        crate::types::builders::ImagePermissionsBuilder::default()
    }
}

/// A builder for [`ImagePermissions`](crate::types::ImagePermissions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImagePermissionsBuilder {
    pub(crate) allow_fleet: std::option::Option<bool>,
    pub(crate) allow_image_builder: std::option::Option<bool>,
}
impl ImagePermissionsBuilder {
    /// <p>Indicates whether the image can be used for a fleet.</p>
    pub fn allow_fleet(mut self, input: bool) -> Self {
        self.allow_fleet = Some(input);
        self
    }
    /// <p>Indicates whether the image can be used for a fleet.</p>
    pub fn set_allow_fleet(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_fleet = input;
        self
    }
    /// <p>Indicates whether the image can be used for an image builder.</p>
    pub fn allow_image_builder(mut self, input: bool) -> Self {
        self.allow_image_builder = Some(input);
        self
    }
    /// <p>Indicates whether the image can be used for an image builder.</p>
    pub fn set_allow_image_builder(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_image_builder = input;
        self
    }
    /// Consumes the builder and constructs a [`ImagePermissions`](crate::types::ImagePermissions).
    pub fn build(self) -> crate::types::ImagePermissions {
        crate::types::ImagePermissions {
            allow_fleet: self.allow_fleet,
            allow_image_builder: self.allow_image_builder,
        }
    }
}
