// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `StackAttribute`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let stackattribute = unimplemented!();
/// match stackattribute {
///     StackAttribute::AccessEndpoints => { /* ... */ },
///     StackAttribute::EmbedHostDomains => { /* ... */ },
///     StackAttribute::FeedbackUrl => { /* ... */ },
///     StackAttribute::IamRoleArn => { /* ... */ },
///     StackAttribute::RedirectUrl => { /* ... */ },
///     StackAttribute::StorageConnectors => { /* ... */ },
///     StackAttribute::StorageConnectorGoogleDrive => { /* ... */ },
///     StackAttribute::StorageConnectorHomefolders => { /* ... */ },
///     StackAttribute::StorageConnectorOneDrive => { /* ... */ },
///     StackAttribute::StreamingExperienceSettings => { /* ... */ },
///     StackAttribute::ThemeName => { /* ... */ },
///     StackAttribute::UserSettings => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `stackattribute` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `StackAttribute::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `StackAttribute::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `StackAttribute::NewFeature` is defined.
/// Specifically, when `stackattribute` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `StackAttribute::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum StackAttribute {
    #[allow(missing_docs)] // documentation missing in model
    AccessEndpoints,
    #[allow(missing_docs)] // documentation missing in model
    EmbedHostDomains,
    #[allow(missing_docs)] // documentation missing in model
    FeedbackUrl,
    #[allow(missing_docs)] // documentation missing in model
    IamRoleArn,
    #[allow(missing_docs)] // documentation missing in model
    RedirectUrl,
    #[allow(missing_docs)] // documentation missing in model
    StorageConnectors,
    #[allow(missing_docs)] // documentation missing in model
    StorageConnectorGoogleDrive,
    #[allow(missing_docs)] // documentation missing in model
    StorageConnectorHomefolders,
    #[allow(missing_docs)] // documentation missing in model
    StorageConnectorOneDrive,
    #[allow(missing_docs)] // documentation missing in model
    StreamingExperienceSettings,
    #[allow(missing_docs)] // documentation missing in model
    ThemeName,
    #[allow(missing_docs)] // documentation missing in model
    UserSettings,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for StackAttribute {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_ENDPOINTS" => StackAttribute::AccessEndpoints,
            "EMBED_HOST_DOMAINS" => StackAttribute::EmbedHostDomains,
            "FEEDBACK_URL" => StackAttribute::FeedbackUrl,
            "IAM_ROLE_ARN" => StackAttribute::IamRoleArn,
            "REDIRECT_URL" => StackAttribute::RedirectUrl,
            "STORAGE_CONNECTORS" => StackAttribute::StorageConnectors,
            "STORAGE_CONNECTOR_GOOGLE_DRIVE" => StackAttribute::StorageConnectorGoogleDrive,
            "STORAGE_CONNECTOR_HOMEFOLDERS" => StackAttribute::StorageConnectorHomefolders,
            "STORAGE_CONNECTOR_ONE_DRIVE" => StackAttribute::StorageConnectorOneDrive,
            "STREAMING_EXPERIENCE_SETTINGS" => StackAttribute::StreamingExperienceSettings,
            "THEME_NAME" => StackAttribute::ThemeName,
            "USER_SETTINGS" => StackAttribute::UserSettings,
            other => {
                StackAttribute::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for StackAttribute {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(StackAttribute::from(s))
    }
}
impl StackAttribute {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            StackAttribute::AccessEndpoints => "ACCESS_ENDPOINTS",
            StackAttribute::EmbedHostDomains => "EMBED_HOST_DOMAINS",
            StackAttribute::FeedbackUrl => "FEEDBACK_URL",
            StackAttribute::IamRoleArn => "IAM_ROLE_ARN",
            StackAttribute::RedirectUrl => "REDIRECT_URL",
            StackAttribute::StorageConnectors => "STORAGE_CONNECTORS",
            StackAttribute::StorageConnectorGoogleDrive => "STORAGE_CONNECTOR_GOOGLE_DRIVE",
            StackAttribute::StorageConnectorHomefolders => "STORAGE_CONNECTOR_HOMEFOLDERS",
            StackAttribute::StorageConnectorOneDrive => "STORAGE_CONNECTOR_ONE_DRIVE",
            StackAttribute::StreamingExperienceSettings => "STREAMING_EXPERIENCE_SETTINGS",
            StackAttribute::ThemeName => "THEME_NAME",
            StackAttribute::UserSettings => "USER_SETTINGS",
            StackAttribute::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_ENDPOINTS",
            "EMBED_HOST_DOMAINS",
            "FEEDBACK_URL",
            "IAM_ROLE_ARN",
            "REDIRECT_URL",
            "STORAGE_CONNECTORS",
            "STORAGE_CONNECTOR_GOOGLE_DRIVE",
            "STORAGE_CONNECTOR_HOMEFOLDERS",
            "STORAGE_CONNECTOR_ONE_DRIVE",
            "STREAMING_EXPERIENCE_SETTINGS",
            "THEME_NAME",
            "USER_SETTINGS",
        ]
    }
}
impl AsRef<str> for StackAttribute {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
