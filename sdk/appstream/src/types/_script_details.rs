// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the details of the script.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScriptDetails {
    /// <p>The S3 object location for the script.</p>
    pub script_s3_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>The run path for the script.</p>
    pub executable_path: ::std::option::Option<::std::string::String>,
    /// <p>The runtime parameters passed to the run path for the script.</p>
    pub executable_parameters: ::std::option::Option<::std::string::String>,
    /// <p>The run timeout, in seconds, for the script.</p>
    pub timeout_in_seconds: ::std::option::Option<i32>,
}
impl ScriptDetails {
    /// <p>The S3 object location for the script.</p>
    pub fn script_s3_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.script_s3_location.as_ref()
    }
    /// <p>The run path for the script.</p>
    pub fn executable_path(&self) -> ::std::option::Option<&str> {
        self.executable_path.as_deref()
    }
    /// <p>The runtime parameters passed to the run path for the script.</p>
    pub fn executable_parameters(&self) -> ::std::option::Option<&str> {
        self.executable_parameters.as_deref()
    }
    /// <p>The run timeout, in seconds, for the script.</p>
    pub fn timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.timeout_in_seconds
    }
}
impl ScriptDetails {
    /// Creates a new builder-style object to manufacture [`ScriptDetails`](crate::types::ScriptDetails).
    pub fn builder() -> crate::types::builders::ScriptDetailsBuilder {
        crate::types::builders::ScriptDetailsBuilder::default()
    }
}

/// A builder for [`ScriptDetails`](crate::types::ScriptDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScriptDetailsBuilder {
    pub(crate) script_s3_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) executable_path: ::std::option::Option<::std::string::String>,
    pub(crate) executable_parameters: ::std::option::Option<::std::string::String>,
    pub(crate) timeout_in_seconds: ::std::option::Option<i32>,
}
impl ScriptDetailsBuilder {
    /// <p>The S3 object location for the script.</p>
    /// This field is required.
    pub fn script_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.script_s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 object location for the script.</p>
    pub fn set_script_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.script_s3_location = input;
        self
    }
    /// <p>The S3 object location for the script.</p>
    pub fn get_script_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.script_s3_location
    }
    /// <p>The run path for the script.</p>
    /// This field is required.
    pub fn executable_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executable_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The run path for the script.</p>
    pub fn set_executable_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executable_path = input;
        self
    }
    /// <p>The run path for the script.</p>
    pub fn get_executable_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.executable_path
    }
    /// <p>The runtime parameters passed to the run path for the script.</p>
    pub fn executable_parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executable_parameters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runtime parameters passed to the run path for the script.</p>
    pub fn set_executable_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executable_parameters = input;
        self
    }
    /// <p>The runtime parameters passed to the run path for the script.</p>
    pub fn get_executable_parameters(&self) -> &::std::option::Option<::std::string::String> {
        &self.executable_parameters
    }
    /// <p>The run timeout, in seconds, for the script.</p>
    /// This field is required.
    pub fn timeout_in_seconds(mut self, input: i32) -> Self {
        self.timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run timeout, in seconds, for the script.</p>
    pub fn set_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The run timeout, in seconds, for the script.</p>
    pub fn get_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_seconds
    }
    /// Consumes the builder and constructs a [`ScriptDetails`](crate::types::ScriptDetails).
    pub fn build(self) -> crate::types::ScriptDetails {
        crate::types::ScriptDetails {
            script_s3_location: self.script_s3_location,
            executable_path: self.executable_path,
            executable_parameters: self.executable_parameters,
            timeout_in_seconds: self.timeout_in_seconds,
        }
    }
}
