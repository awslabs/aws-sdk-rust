// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a virtual machine that is used to create an image. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageBuilder {
    /// <p>The name of the image builder.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN for the image builder.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the image from which this builder was created.</p>
    #[doc(hidden)]
    pub image_arn: std::option::Option<std::string::String>,
    /// <p>The description to display.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The image builder name to display.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The VPC configuration of the image builder.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
    /// <p>The instance type for the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The operating system platform of the image builder.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<crate::types::PlatformType>,
    /// <p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The state of the image builder.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ImageBuilderState>,
    /// <p>The reason why the last state change occurred.</p>
    #[doc(hidden)]
    pub state_change_reason: std::option::Option<crate::types::ImageBuilderStateChangeReason>,
    /// <p>The time stamp when the image builder was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Enables or disables default internet access for the image builder.</p>
    #[doc(hidden)]
    pub enable_default_internet_access: std::option::Option<bool>,
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    #[doc(hidden)]
    pub domain_join_info: std::option::Option<crate::types::DomainJoinInfo>,
    /// <p>Describes the network details of the fleet or image builder instance.</p>
    #[doc(hidden)]
    pub network_access_configuration: std::option::Option<crate::types::NetworkAccessConfiguration>,
    /// <p>The image builder errors.</p>
    #[doc(hidden)]
    pub image_builder_errors: std::option::Option<std::vec::Vec<crate::types::ResourceError>>,
    /// <p>The version of the AppStream 2.0 agent that is currently being used by the image builder. </p>
    #[doc(hidden)]
    pub appstream_agent_version: std::option::Option<std::string::String>,
    /// <p>The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    #[doc(hidden)]
    pub access_endpoints: std::option::Option<std::vec::Vec<crate::types::AccessEndpoint>>,
}
impl ImageBuilder {
    /// <p>The name of the image builder.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN for the image builder.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ARN of the image from which this builder was created.</p>
    pub fn image_arn(&self) -> std::option::Option<&str> {
        self.image_arn.as_deref()
    }
    /// <p>The description to display.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The image builder name to display.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The VPC configuration of the image builder.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The instance type for the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The operating system platform of the image builder.</p>
    pub fn platform(&self) -> std::option::Option<&crate::types::PlatformType> {
        self.platform.as_ref()
    }
    /// <p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The state of the image builder.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ImageBuilderState> {
        self.state.as_ref()
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn state_change_reason(
        &self,
    ) -> std::option::Option<&crate::types::ImageBuilderStateChangeReason> {
        self.state_change_reason.as_ref()
    }
    /// <p>The time stamp when the image builder was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>Enables or disables default internet access for the image builder.</p>
    pub fn enable_default_internet_access(&self) -> std::option::Option<bool> {
        self.enable_default_internet_access
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    pub fn domain_join_info(&self) -> std::option::Option<&crate::types::DomainJoinInfo> {
        self.domain_join_info.as_ref()
    }
    /// <p>Describes the network details of the fleet or image builder instance.</p>
    pub fn network_access_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NetworkAccessConfiguration> {
        self.network_access_configuration.as_ref()
    }
    /// <p>The image builder errors.</p>
    pub fn image_builder_errors(&self) -> std::option::Option<&[crate::types::ResourceError]> {
        self.image_builder_errors.as_deref()
    }
    /// <p>The version of the AppStream 2.0 agent that is currently being used by the image builder. </p>
    pub fn appstream_agent_version(&self) -> std::option::Option<&str> {
        self.appstream_agent_version.as_deref()
    }
    /// <p>The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    pub fn access_endpoints(&self) -> std::option::Option<&[crate::types::AccessEndpoint]> {
        self.access_endpoints.as_deref()
    }
}
impl ImageBuilder {
    /// Creates a new builder-style object to manufacture [`ImageBuilder`](crate::types::ImageBuilder).
    pub fn builder() -> crate::types::builders::ImageBuilderBuilder {
        crate::types::builders::ImageBuilderBuilder::default()
    }
}

/// A builder for [`ImageBuilder`](crate::types::ImageBuilder).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageBuilderBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) image_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<crate::types::PlatformType>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ImageBuilderState>,
    pub(crate) state_change_reason:
        std::option::Option<crate::types::ImageBuilderStateChangeReason>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) enable_default_internet_access: std::option::Option<bool>,
    pub(crate) domain_join_info: std::option::Option<crate::types::DomainJoinInfo>,
    pub(crate) network_access_configuration:
        std::option::Option<crate::types::NetworkAccessConfiguration>,
    pub(crate) image_builder_errors:
        std::option::Option<std::vec::Vec<crate::types::ResourceError>>,
    pub(crate) appstream_agent_version: std::option::Option<std::string::String>,
    pub(crate) access_endpoints: std::option::Option<std::vec::Vec<crate::types::AccessEndpoint>>,
}
impl ImageBuilderBuilder {
    /// <p>The name of the image builder.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the image builder.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN for the image builder.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN for the image builder.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the image from which this builder was created.</p>
    pub fn image_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the image from which this builder was created.</p>
    pub fn set_image_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_arn = input;
        self
    }
    /// <p>The description to display.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description to display.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The image builder name to display.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The image builder name to display.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The VPC configuration of the image builder.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>The VPC configuration of the image builder.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>The instance type for the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type for the image builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.compute.large</p> </li>
    /// <li> <p>stream.compute.xlarge</p> </li>
    /// <li> <p>stream.compute.2xlarge</p> </li>
    /// <li> <p>stream.compute.4xlarge</p> </li>
    /// <li> <p>stream.compute.8xlarge</p> </li>
    /// <li> <p>stream.memory.large</p> </li>
    /// <li> <p>stream.memory.xlarge</p> </li>
    /// <li> <p>stream.memory.2xlarge</p> </li>
    /// <li> <p>stream.memory.4xlarge</p> </li>
    /// <li> <p>stream.memory.8xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.large</p> </li>
    /// <li> <p>stream.memory.z1d.xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.2xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.3xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.6xlarge</p> </li>
    /// <li> <p>stream.memory.z1d.12xlarge</p> </li>
    /// <li> <p>stream.graphics-design.large</p> </li>
    /// <li> <p>stream.graphics-design.xlarge</p> </li>
    /// <li> <p>stream.graphics-design.2xlarge</p> </li>
    /// <li> <p>stream.graphics-design.4xlarge</p> </li>
    /// <li> <p>stream.graphics-desktop.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.2xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.4xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.8xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.12xlarge</p> </li>
    /// <li> <p>stream.graphics.g4dn.16xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.4xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.8xlarge</p> </li>
    /// <li> <p>stream.graphics-pro.16xlarge</p> </li>
    /// </ul>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The operating system platform of the image builder.</p>
    pub fn platform(mut self, input: crate::types::PlatformType) -> Self {
        self.platform = Some(input);
        self
    }
    /// <p>The operating system platform of the image builder.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::types::PlatformType>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The state of the image builder.</p>
    pub fn state(mut self, input: crate::types::ImageBuilderState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the image builder.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ImageBuilderState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn state_change_reason(
        mut self,
        input: crate::types::ImageBuilderStateChangeReason,
    ) -> Self {
        self.state_change_reason = Some(input);
        self
    }
    /// <p>The reason why the last state change occurred.</p>
    pub fn set_state_change_reason(
        mut self,
        input: std::option::Option<crate::types::ImageBuilderStateChangeReason>,
    ) -> Self {
        self.state_change_reason = input;
        self
    }
    /// <p>The time stamp when the image builder was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The time stamp when the image builder was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>Enables or disables default internet access for the image builder.</p>
    pub fn enable_default_internet_access(mut self, input: bool) -> Self {
        self.enable_default_internet_access = Some(input);
        self
    }
    /// <p>Enables or disables default internet access for the image builder.</p>
    pub fn set_enable_default_internet_access(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_default_internet_access = input;
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    pub fn domain_join_info(mut self, input: crate::types::DomainJoinInfo) -> Self {
        self.domain_join_info = Some(input);
        self
    }
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    pub fn set_domain_join_info(
        mut self,
        input: std::option::Option<crate::types::DomainJoinInfo>,
    ) -> Self {
        self.domain_join_info = input;
        self
    }
    /// <p>Describes the network details of the fleet or image builder instance.</p>
    pub fn network_access_configuration(
        mut self,
        input: crate::types::NetworkAccessConfiguration,
    ) -> Self {
        self.network_access_configuration = Some(input);
        self
    }
    /// <p>Describes the network details of the fleet or image builder instance.</p>
    pub fn set_network_access_configuration(
        mut self,
        input: std::option::Option<crate::types::NetworkAccessConfiguration>,
    ) -> Self {
        self.network_access_configuration = input;
        self
    }
    /// Appends an item to `image_builder_errors`.
    ///
    /// To override the contents of this collection use [`set_image_builder_errors`](Self::set_image_builder_errors).
    ///
    /// <p>The image builder errors.</p>
    pub fn image_builder_errors(mut self, input: crate::types::ResourceError) -> Self {
        let mut v = self.image_builder_errors.unwrap_or_default();
        v.push(input);
        self.image_builder_errors = Some(v);
        self
    }
    /// <p>The image builder errors.</p>
    pub fn set_image_builder_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceError>>,
    ) -> Self {
        self.image_builder_errors = input;
        self
    }
    /// <p>The version of the AppStream 2.0 agent that is currently being used by the image builder. </p>
    pub fn appstream_agent_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.appstream_agent_version = Some(input.into());
        self
    }
    /// <p>The version of the AppStream 2.0 agent that is currently being used by the image builder. </p>
    pub fn set_appstream_agent_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.appstream_agent_version = input;
        self
    }
    /// Appends an item to `access_endpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        let mut v = self.access_endpoints.unwrap_or_default();
        v.push(input);
        self.access_endpoints = Some(v);
        self
    }
    /// <p>The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    pub fn set_access_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccessEndpoint>>,
    ) -> Self {
        self.access_endpoints = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageBuilder`](crate::types::ImageBuilder).
    pub fn build(self) -> crate::types::ImageBuilder {
        crate::types::ImageBuilder {
            name: self.name,
            arn: self.arn,
            image_arn: self.image_arn,
            description: self.description,
            display_name: self.display_name,
            vpc_config: self.vpc_config,
            instance_type: self.instance_type,
            platform: self.platform,
            iam_role_arn: self.iam_role_arn,
            state: self.state,
            state_change_reason: self.state_change_reason,
            created_time: self.created_time,
            enable_default_internet_access: self.enable_default_internet_access,
            domain_join_info: self.domain_join_info,
            network_access_configuration: self.network_access_configuration,
            image_builder_errors: self.image_builder_errors,
            appstream_agent_version: self.appstream_agent_version,
            access_endpoints: self.access_endpoints,
        }
    }
}
