// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.fleet_name {
        object.key("FleetName").string(var_1);
    }
    if let Some(var_2) = &input.application_arn {
        object.key("ApplicationArn").string(var_2);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_application_to_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApplicationToEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.stack_name {
        object.key("StackName").string(var_3);
    }
    if let Some(var_4) = &input.entitlement_name {
        object.key("EntitlementName").string(var_4);
    }
    if let Some(var_5) = &input.application_identifier {
        object.key("ApplicationIdentifier").string(var_5);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.fleet_name {
        object.key("FleetName").string(var_6);
    }
    if let Some(var_7) = &input.stack_name {
        object.key("StackName").string(var_7);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.user_stack_associations {
        let mut array_9 = object.key("UserStackAssociations").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.user_stack_associations {
        let mut array_13 = object.key("UserStackAssociations").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.source_image_name {
        object.key("SourceImageName").string(var_16);
    }
    if let Some(var_17) = &input.destination_image_name {
        object.key("DestinationImageName").string(var_17);
    }
    if let Some(var_18) = &input.destination_region {
        object.key("DestinationRegion").string(var_18);
    }
    if let Some(var_19) = &input.destination_image_description {
        object.key("DestinationImageDescription").string(var_19);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20);
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.display_name {
        object.key("DisplayName").string(var_22);
    }
    if let Some(var_23) = &input.source_s3_location {
        let mut object_24 = object.key("SourceS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.setup_script_details {
        let mut object_26 = object.key("SetupScriptDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_script_details(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("Tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30);
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.name {
        object.key("Name").string(var_31);
    }
    if let Some(var_32) = &input.display_name {
        object.key("DisplayName").string(var_32);
    }
    if let Some(var_33) = &input.description {
        object.key("Description").string(var_33);
    }
    if let Some(var_34) = &input.icon_s3_location {
        let mut object_35 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.launch_path {
        object.key("LaunchPath").string(var_36);
    }
    if let Some(var_37) = &input.working_directory {
        object.key("WorkingDirectory").string(var_37);
    }
    if let Some(var_38) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_38);
    }
    if let Some(var_39) = &input.platforms {
        let mut array_40 = object.key("Platforms").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.instance_families {
        let mut array_43 = object.key("InstanceFamilies").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44);
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_45);
    }
    if let Some(var_46) = &input.tags {
        let mut object_47 = object.key("Tags").start_object();
        for (key_48, value_49) in var_46 {
            {
                object_47.key(key_48).string(value_49);
            }
        }
        object_47.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.directory_name {
        object.key("DirectoryName").string(var_50);
    }
    if let Some(var_51) = &input.organizational_unit_distinguished_names {
        let mut array_52 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53);
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.service_account_credentials {
        let mut object_55 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.name {
        object.key("Name").string(var_56);
    }
    if let Some(var_57) = &input.stack_name {
        object.key("StackName").string(var_57);
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58);
    }
    if let Some(var_59) = &input.app_visibility {
        object.key("AppVisibility").string(var_59.as_str());
    }
    if let Some(var_60) = &input.attributes {
        let mut array_61 = object.key("Attributes").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_attribute(
                    &mut object_63,
                    item_62,
                )?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.name {
        object.key("Name").string(var_64);
    }
    if let Some(var_65) = &input.image_name {
        object.key("ImageName").string(var_65);
    }
    if let Some(var_66) = &input.image_arn {
        object.key("ImageArn").string(var_66);
    }
    if let Some(var_67) = &input.instance_type {
        object.key("InstanceType").string(var_67);
    }
    if let Some(var_68) = &input.fleet_type {
        object.key("FleetType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.compute_capacity {
        let mut object_70 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(&mut object_70, var_69)?;
        object_70.finish();
    }
    if let Some(var_71) = &input.vpc_config {
        let mut object_72 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_72, var_71)?;
        object_72.finish();
    }
    if let Some(var_73) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75);
    }
    if let Some(var_76) = &input.display_name {
        object.key("DisplayName").string(var_76);
    }
    if let Some(var_77) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_77);
    }
    if let Some(var_78) = &input.domain_join_info {
        let mut object_79 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.tags {
        let mut object_81 = object.key("Tags").start_object();
        for (key_82, value_83) in var_80 {
            {
                object_81.key(key_82).string(value_83);
            }
        }
        object_81.finish();
    }
    if let Some(var_84) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_85);
    }
    if let Some(var_86) = &input.stream_view {
        object.key("StreamView").string(var_86.as_str());
    }
    if let Some(var_87) = &input.platform {
        object.key("Platform").string(var_87.as_str());
    }
    if let Some(var_88) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_88).into()),
        );
    }
    if let Some(var_89) = &input.usb_device_filter_strings {
        let mut array_90 = object.key("UsbDeviceFilterStrings").start_array();
        for item_91 in var_89 {
            {
                array_90.value().string(item_91);
            }
        }
        array_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.name {
        object.key("Name").string(var_92);
    }
    if let Some(var_93) = &input.image_name {
        object.key("ImageName").string(var_93);
    }
    if let Some(var_94) = &input.image_arn {
        object.key("ImageArn").string(var_94);
    }
    if let Some(var_95) = &input.instance_type {
        object.key("InstanceType").string(var_95);
    }
    if let Some(var_96) = &input.description {
        object.key("Description").string(var_96);
    }
    if let Some(var_97) = &input.display_name {
        object.key("DisplayName").string(var_97);
    }
    if let Some(var_98) = &input.vpc_config {
        let mut object_99 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_99, var_98)?;
        object_99.finish();
    }
    if let Some(var_100) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_100);
    }
    if let Some(var_101) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_101);
    }
    if let Some(var_102) = &input.domain_join_info {
        let mut object_103 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    if let Some(var_104) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_104);
    }
    if let Some(var_105) = &input.tags {
        let mut object_106 = object.key("Tags").start_object();
        for (key_107, value_108) in var_105 {
            {
                object_106.key(key_107).string(value_108);
            }
        }
        object_106.finish();
    }
    if let Some(var_109) = &input.access_endpoints {
        let mut array_110 = object.key("AccessEndpoints").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.name {
        object.key("Name").string(var_113);
    }
    if let Some(var_114) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.name {
        object.key("Name").string(var_115);
    }
    if let Some(var_116) = &input.description {
        object.key("Description").string(var_116);
    }
    if let Some(var_117) = &input.display_name {
        object.key("DisplayName").string(var_117);
    }
    if let Some(var_118) = &input.storage_connectors {
        let mut array_119 = object.key("StorageConnectors").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_121,
                    item_120,
                )?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if let Some(var_122) = &input.redirect_url {
        object.key("RedirectURL").string(var_122);
    }
    if let Some(var_123) = &input.feedback_url {
        object.key("FeedbackURL").string(var_123);
    }
    if let Some(var_124) = &input.user_settings {
        let mut array_125 = object.key("UserSettings").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_127,
                    item_126,
                )?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if let Some(var_128) = &input.application_settings {
        let mut object_129 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.tags {
        let mut object_131 = object.key("Tags").start_object();
        for (key_132, value_133) in var_130 {
            {
                object_131.key(key_132).string(value_133);
            }
        }
        object_131.finish();
    }
    if let Some(var_134) = &input.access_endpoints {
        let mut array_135 = object.key("AccessEndpoints").start_array();
        for item_136 in var_134 {
            {
                let mut object_137 = array_135.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_137,
                    item_136,
                )?;
                object_137.finish();
            }
        }
        array_135.finish();
    }
    if let Some(var_138) = &input.embed_host_domains {
        let mut array_139 = object.key("EmbedHostDomains").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140);
            }
        }
        array_139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.stack_name {
        object.key("StackName").string(var_141);
    }
    if let Some(var_142) = &input.fleet_name {
        object.key("FleetName").string(var_142);
    }
    if let Some(var_143) = &input.user_id {
        object.key("UserId").string(var_143);
    }
    if let Some(var_144) = &input.application_id {
        object.key("ApplicationId").string(var_144);
    }
    if let Some(var_145) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.session_context {
        object.key("SessionContext").string(var_146);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_updated_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUpdatedImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.existing_image_name {
        object.key("existingImageName").string(var_147);
    }
    if let Some(var_148) = &input.new_image_name {
        object.key("newImageName").string(var_148);
    }
    if let Some(var_149) = &input.new_image_description {
        object.key("newImageDescription").string(var_149);
    }
    if let Some(var_150) = &input.new_image_display_name {
        object.key("newImageDisplayName").string(var_150);
    }
    if let Some(var_151) = &input.new_image_tags {
        let mut object_152 = object.key("newImageTags").start_object();
        for (key_153, value_154) in var_151 {
            {
                object_152.key(key_153).string(value_154);
            }
        }
        object_152.finish();
    }
    if input.dry_run {
        object.key("dryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.user_name {
        object.key("UserName").string(var_155);
    }
    if let Some(var_156) = &input.message_action {
        object.key("MessageAction").string(var_156.as_str());
    }
    if let Some(var_157) = &input.first_name {
        object.key("FirstName").string(var_157);
    }
    if let Some(var_158) = &input.last_name {
        object.key("LastName").string(var_158);
    }
    if let Some(var_159) = &input.authentication_type {
        object.key("AuthenticationType").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.name {
        object.key("Name").string(var_160);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.name {
        object.key("Name").string(var_161);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.directory_name {
        object.key("DirectoryName").string(var_162);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.name {
        object.key("Name").string(var_163);
    }
    if let Some(var_164) = &input.stack_name {
        object.key("StackName").string(var_164);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.name {
        object.key("Name").string(var_165);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.name {
        object.key("Name").string(var_166);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.name {
        object.key("Name").string(var_167);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.name {
        object.key("Name").string(var_168);
    }
    if let Some(var_169) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_169);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.name {
        object.key("Name").string(var_170);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.user_name {
        object.key("UserName").string(var_171);
    }
    if let Some(var_172) = &input.authentication_type {
        object.key("AuthenticationType").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_blocks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppBlocksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.arns {
        let mut array_174 = object.key("Arns").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175);
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176);
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_application_fleet_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationFleetAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.fleet_name {
        object.key("FleetName").string(var_178);
    }
    if let Some(var_179) = &input.application_arn {
        object.key("ApplicationArn").string(var_179);
    }
    if let Some(var_180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if let Some(var_181) = &input.next_token {
        object.key("NextToken").string(var_181);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_applications_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.arns {
        let mut array_183 = object.key("Arns").start_array();
        for item_184 in var_182 {
            {
                array_183.value().string(item_184);
            }
        }
        array_183.finish();
    }
    if let Some(var_185) = &input.next_token {
        object.key("NextToken").string(var_185);
    }
    if let Some(var_186) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_directory_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDirectoryConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.directory_names {
        let mut array_188 = object.key("DirectoryNames").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189);
            }
        }
        array_188.finish();
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.next_token {
        object.key("NextToken").string(var_191);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_entitlements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntitlementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.name {
        object.key("Name").string(var_192);
    }
    if let Some(var_193) = &input.stack_name {
        object.key("StackName").string(var_193);
    }
    if let Some(var_194) = &input.next_token {
        object.key("NextToken").string(var_194);
    }
    if let Some(var_195) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_195).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.names {
        let mut array_197 = object.key("Names").start_array();
        for item_198 in var_196 {
            {
                array_197.value().string(item_198);
            }
        }
        array_197.finish();
    }
    if let Some(var_199) = &input.next_token {
        object.key("NextToken").string(var_199);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_builders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageBuildersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.names {
        let mut array_201 = object.key("Names").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202);
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.next_token {
        object.key("NextToken").string(var_204);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.name {
        object.key("Name").string(var_205);
    }
    if let Some(var_206) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.shared_aws_account_ids {
        let mut array_208 = object.key("SharedAwsAccountIds").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
    if let Some(var_210) = &input.next_token {
        object.key("NextToken").string(var_210);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.names {
        let mut array_212 = object.key("Names").start_array();
        for item_213 in var_211 {
            {
                array_212.value().string(item_213);
            }
        }
        array_212.finish();
    }
    if let Some(var_214) = &input.arns {
        let mut array_215 = object.key("Arns").start_array();
        for item_216 in var_214 {
            {
                array_215.value().string(item_216);
            }
        }
        array_215.finish();
    }
    if let Some(var_217) = &input.r#type {
        object.key("Type").string(var_217.as_str());
    }
    if let Some(var_218) = &input.next_token {
        object.key("NextToken").string(var_218);
    }
    if let Some(var_219) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.stack_name {
        object.key("StackName").string(var_220);
    }
    if let Some(var_221) = &input.fleet_name {
        object.key("FleetName").string(var_221);
    }
    if let Some(var_222) = &input.user_id {
        object.key("UserId").string(var_222);
    }
    if let Some(var_223) = &input.next_token {
        object.key("NextToken").string(var_223);
    }
    if let Some(var_224) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_224).into()),
        );
    }
    if let Some(var_225) = &input.authentication_type {
        object.key("AuthenticationType").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.names {
        let mut array_227 = object.key("Names").start_array();
        for item_228 in var_226 {
            {
                array_227.value().string(item_228);
            }
        }
        array_227.finish();
    }
    if let Some(var_229) = &input.next_token {
        object.key("NextToken").string(var_229);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_usage_report_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsageReportSubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_230).into()),
        );
    }
    if let Some(var_231) = &input.next_token {
        object.key("NextToken").string(var_231);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.authentication_type {
        object.key("AuthenticationType").string(var_232.as_str());
    }
    if let Some(var_233) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    if let Some(var_234) = &input.next_token {
        object.key("NextToken").string(var_234);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_stack_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserStackAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.stack_name {
        object.key("StackName").string(var_235);
    }
    if let Some(var_236) = &input.user_name {
        object.key("UserName").string(var_236);
    }
    if let Some(var_237) = &input.authentication_type {
        object.key("AuthenticationType").string(var_237.as_str());
    }
    if let Some(var_238) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    if let Some(var_239) = &input.next_token {
        object.key("NextToken").string(var_239);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.user_name {
        object.key("UserName").string(var_240);
    }
    if let Some(var_241) = &input.authentication_type {
        object.key("AuthenticationType").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.fleet_name {
        object.key("FleetName").string(var_242);
    }
    if let Some(var_243) = &input.application_arn {
        object.key("ApplicationArn").string(var_243);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_application_from_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateApplicationFromEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.stack_name {
        object.key("StackName").string(var_244);
    }
    if let Some(var_245) = &input.entitlement_name {
        object.key("EntitlementName").string(var_245);
    }
    if let Some(var_246) = &input.application_identifier {
        object.key("ApplicationIdentifier").string(var_246);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.fleet_name {
        object.key("FleetName").string(var_247);
    }
    if let Some(var_248) = &input.stack_name {
        object.key("StackName").string(var_248);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.user_name {
        object.key("UserName").string(var_249);
    }
    if let Some(var_250) = &input.authentication_type {
        object.key("AuthenticationType").string(var_250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_expire_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExpireSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.session_id {
        object.key("SessionId").string(var_251);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.stack_name {
        object.key("StackName").string(var_252);
    }
    if let Some(var_253) = &input.next_token {
        object.key("NextToken").string(var_253);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.fleet_name {
        object.key("FleetName").string(var_254);
    }
    if let Some(var_255) = &input.next_token {
        object.key("NextToken").string(var_255);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entitled_applications_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitledApplicationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.stack_name {
        object.key("StackName").string(var_256);
    }
    if let Some(var_257) = &input.entitlement_name {
        object.key("EntitlementName").string(var_257);
    }
    if let Some(var_258) = &input.next_token {
        object.key("NextToken").string(var_258);
    }
    if let Some(var_259) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.resource_arn {
        object.key("ResourceArn").string(var_260);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.name {
        object.key("Name").string(var_261);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.name {
        object.key("Name").string(var_262);
    }
    if let Some(var_263) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_263);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.name {
        object.key("Name").string(var_264);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.name {
        object.key("Name").string(var_265);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.resource_arn {
        object.key("ResourceArn").string(var_266);
    }
    if let Some(var_267) = &input.tags {
        let mut object_268 = object.key("Tags").start_object();
        for (key_269, value_270) in var_267 {
            {
                object_268.key(key_269).string(value_270);
            }
        }
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.resource_arn {
        object.key("ResourceArn").string(var_271);
    }
    if let Some(var_272) = &input.tag_keys {
        let mut array_273 = object.key("TagKeys").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274);
            }
        }
        array_273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.name {
        object.key("Name").string(var_275);
    }
    if let Some(var_276) = &input.display_name {
        object.key("DisplayName").string(var_276);
    }
    if let Some(var_277) = &input.description {
        object.key("Description").string(var_277);
    }
    if let Some(var_278) = &input.icon_s3_location {
        let mut object_279 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.launch_path {
        object.key("LaunchPath").string(var_280);
    }
    if let Some(var_281) = &input.working_directory {
        object.key("WorkingDirectory").string(var_281);
    }
    if let Some(var_282) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_282);
    }
    if let Some(var_283) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_283);
    }
    if let Some(var_284) = &input.attributes_to_delete {
        let mut array_285 = object.key("AttributesToDelete").start_array();
        for item_286 in var_284 {
            {
                array_285.value().string(item_286.as_str());
            }
        }
        array_285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.directory_name {
        object.key("DirectoryName").string(var_287);
    }
    if let Some(var_288) = &input.organizational_unit_distinguished_names {
        let mut array_289 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_290 in var_288 {
            {
                array_289.value().string(item_290);
            }
        }
        array_289.finish();
    }
    if let Some(var_291) = &input.service_account_credentials {
        let mut object_292 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.name {
        object.key("Name").string(var_293);
    }
    if let Some(var_294) = &input.stack_name {
        object.key("StackName").string(var_294);
    }
    if let Some(var_295) = &input.description {
        object.key("Description").string(var_295);
    }
    if let Some(var_296) = &input.app_visibility {
        object.key("AppVisibility").string(var_296.as_str());
    }
    if let Some(var_297) = &input.attributes {
        let mut array_298 = object.key("Attributes").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_attribute(
                    &mut object_300,
                    item_299,
                )?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.image_name {
        object.key("ImageName").string(var_301);
    }
    if let Some(var_302) = &input.image_arn {
        object.key("ImageArn").string(var_302);
    }
    if let Some(var_303) = &input.name {
        object.key("Name").string(var_303);
    }
    if let Some(var_304) = &input.instance_type {
        object.key("InstanceType").string(var_304);
    }
    if let Some(var_305) = &input.compute_capacity {
        let mut object_306 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(
            &mut object_306,
            var_305,
        )?;
        object_306.finish();
    }
    if let Some(var_307) = &input.vpc_config {
        let mut object_308 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_308, var_307)?;
        object_308.finish();
    }
    if let Some(var_309) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    if let Some(var_310) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_310).into()),
        );
    }
    if input.delete_vpc_config {
        object
            .key("DeleteVpcConfig")
            .boolean(input.delete_vpc_config);
    }
    if let Some(var_311) = &input.description {
        object.key("Description").string(var_311);
    }
    if let Some(var_312) = &input.display_name {
        object.key("DisplayName").string(var_312);
    }
    if let Some(var_313) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_313);
    }
    if let Some(var_314) = &input.domain_join_info {
        let mut object_315 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(
            &mut object_315,
            var_314,
        )?;
        object_315.finish();
    }
    if let Some(var_316) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    if let Some(var_317) = &input.attributes_to_delete {
        let mut array_318 = object.key("AttributesToDelete").start_array();
        for item_319 in var_317 {
            {
                array_318.value().string(item_319.as_str());
            }
        }
        array_318.finish();
    }
    if let Some(var_320) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_320);
    }
    if let Some(var_321) = &input.stream_view {
        object.key("StreamView").string(var_321.as_str());
    }
    if let Some(var_322) = &input.platform {
        object.key("Platform").string(var_322.as_str());
    }
    if let Some(var_323) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.usb_device_filter_strings {
        let mut array_325 = object.key("UsbDeviceFilterStrings").start_array();
        for item_326 in var_324 {
            {
                array_325.value().string(item_326);
            }
        }
        array_325.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327);
    }
    if let Some(var_328) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_328);
    }
    if let Some(var_329) = &input.image_permissions {
        let mut object_330 = object.key("ImagePermissions").start_object();
        crate::json_ser::serialize_structure_crate_model_image_permissions(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.display_name {
        object.key("DisplayName").string(var_331);
    }
    if let Some(var_332) = &input.description {
        object.key("Description").string(var_332);
    }
    if let Some(var_333) = &input.name {
        object.key("Name").string(var_333);
    }
    if let Some(var_334) = &input.storage_connectors {
        let mut array_335 = object.key("StorageConnectors").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_337,
                    item_336,
                )?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if input.delete_storage_connectors {
        object
            .key("DeleteStorageConnectors")
            .boolean(input.delete_storage_connectors);
    }
    if let Some(var_338) = &input.redirect_url {
        object.key("RedirectURL").string(var_338);
    }
    if let Some(var_339) = &input.feedback_url {
        object.key("FeedbackURL").string(var_339);
    }
    if let Some(var_340) = &input.attributes_to_delete {
        let mut array_341 = object.key("AttributesToDelete").start_array();
        for item_342 in var_340 {
            {
                array_341.value().string(item_342.as_str());
            }
        }
        array_341.finish();
    }
    if let Some(var_343) = &input.user_settings {
        let mut array_344 = object.key("UserSettings").start_array();
        for item_345 in var_343 {
            {
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_346,
                    item_345,
                )?;
                object_346.finish();
            }
        }
        array_344.finish();
    }
    if let Some(var_347) = &input.application_settings {
        let mut object_348 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    if let Some(var_349) = &input.access_endpoints {
        let mut array_350 = object.key("AccessEndpoints").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_352,
                    item_351,
                )?;
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.embed_host_domains {
        let mut array_354 = object.key("EmbedHostDomains").start_array();
        for item_355 in var_353 {
            {
                array_354.value().string(item_355);
            }
        }
        array_354.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_stack_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserStackAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.stack_name {
        object.key("StackName").string(var_356);
    }
    if let Some(var_357) = &input.user_name {
        object.key("UserName").string(var_357);
    }
    if let Some(var_358) = &input.authentication_type {
        object.key("AuthenticationType").string(var_358.as_str());
    }
    if input.send_email_notification {
        object
            .key("SendEmailNotification")
            .boolean(input.send_email_notification);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.s3_bucket {
        object.key("S3Bucket").string(var_359);
    }
    if let Some(var_360) = &input.s3_key {
        object.key("S3Key").string(var_360);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.script_s3_location {
        let mut object_362 = object.key("ScriptS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_362, var_361)?;
        object_362.finish();
    }
    if let Some(var_363) = &input.executable_path {
        object.key("ExecutablePath").string(var_363);
    }
    if let Some(var_364) = &input.executable_parameters {
        object.key("ExecutableParameters").string(var_364);
    }
    if let Some(var_365) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_365).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_account_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceAccountCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.account_name {
        object.key("AccountName").string(var_366);
    }
    if let Some(var_367) = &input.account_password {
        object.key("AccountPassword").string(var_367);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entitlement_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntitlementAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("Name").string(var_368);
    }
    if let Some(var_369) = &input.value {
        object.key("Value").string(var_369);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeCapacity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.desired_instances {
        object.key("DesiredInstances").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_370).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.subnet_ids {
        let mut array_372 = object.key("SubnetIds").start_array();
        for item_373 in var_371 {
            {
                array_372.value().string(item_373);
            }
        }
        array_372.finish();
    }
    if let Some(var_374) = &input.security_group_ids {
        let mut array_375 = object.key("SecurityGroupIds").start_array();
        for item_376 in var_374 {
            {
                array_375.value().string(item_376);
            }
        }
        array_375.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_join_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainJoinInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.directory_name {
        object.key("DirectoryName").string(var_377);
    }
    if let Some(var_378) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_378);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.endpoint_type {
        object.key("EndpointType").string(var_379.as_str());
    }
    if let Some(var_380) = &input.vpce_id {
        object.key("VpceId").string(var_380);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_connector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageConnector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.connector_type {
        object.key("ConnectorType").string(var_381.as_str());
    }
    if let Some(var_382) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_382);
    }
    if let Some(var_383) = &input.domains {
        let mut array_384 = object.key("Domains").start_array();
        for item_385 in var_383 {
            {
                array_384.value().string(item_385);
            }
        }
        array_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.action {
        object.key("Action").string(var_386.as_str());
    }
    if let Some(var_387) = &input.permission {
        object.key("Permission").string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_388) = &input.settings_group {
        object.key("SettingsGroup").string(var_388);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImagePermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.allow_fleet {
        object.key("allowFleet").boolean(*var_389);
    }
    if let Some(var_390) = &input.allow_image_builder {
        object.key("allowImageBuilder").boolean(*var_390);
    }
    Ok(())
}
