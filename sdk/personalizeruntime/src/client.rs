// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Personalize Runtime
///
/// Client for invoking operations on Amazon Personalize Runtime. Each operation on Amazon Personalize Runtime is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_personalizeruntime::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_personalizeruntime::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_personalizeruntime::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`GetPersonalizedRanking`](crate::client::fluent_builders::GetPersonalizedRanking) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`campaign_arn(impl Into<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::campaign_arn) / [`set_campaign_arn(Option<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_campaign_arn): <p>The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.</p>
    ///   - [`input_list(Vec<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::input_list) / [`set_input_list(Option<Vec<String>>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_input_list): <p>A list of items (by <code>itemId</code>) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.</p>
    ///   - [`user_id(impl Into<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::user_id) / [`set_user_id(Option<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_user_id): <p>The user for which you want the campaign to provide a personalized ranking.</p>
    ///   - [`context(HashMap<String, String>)`](crate::client::fluent_builders::GetPersonalizedRanking::context) / [`set_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_context): <p>The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.</p>
    ///   - [`filter_arn(impl Into<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::filter_arn) / [`set_filter_arn(Option<String>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_filter_arn): <p>The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p>
    ///   - [`filter_values(HashMap<String, String>)`](crate::client::fluent_builders::GetPersonalizedRanking::filter_values) / [`set_filter_values(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetPersonalizedRanking::set_filter_values): <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p>  <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p>
    /// - On success, responds with [`GetPersonalizedRankingOutput`](crate::output::GetPersonalizedRankingOutput) with field(s):
    ///   - [`personalized_ranking(Option<Vec<PredictedItem>>)`](crate::output::GetPersonalizedRankingOutput::personalized_ranking): <p>A list of items in order of most likely interest to the user. The maximum is 500.</p>
    ///   - [`recommendation_id(Option<String>)`](crate::output::GetPersonalizedRankingOutput::recommendation_id): <p>The ID of the recommendation.</p>
    /// - On failure, responds with [`SdkError<GetPersonalizedRankingError>`](crate::error::GetPersonalizedRankingError)
    pub fn get_personalized_ranking(
        &self,
    ) -> crate::client::fluent_builders::GetPersonalizedRanking {
        crate::client::fluent_builders::GetPersonalizedRanking::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRecommendations`](crate::client::fluent_builders::GetRecommendations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`campaign_arn(impl Into<String>)`](crate::client::fluent_builders::GetRecommendations::campaign_arn) / [`set_campaign_arn(Option<String>)`](crate::client::fluent_builders::GetRecommendations::set_campaign_arn): <p>The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.</p>
    ///   - [`item_id(impl Into<String>)`](crate::client::fluent_builders::GetRecommendations::item_id) / [`set_item_id(Option<String>)`](crate::client::fluent_builders::GetRecommendations::set_item_id): <p>The item ID to provide recommendations for.</p>  <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>
    ///   - [`user_id(impl Into<String>)`](crate::client::fluent_builders::GetRecommendations::user_id) / [`set_user_id(Option<String>)`](crate::client::fluent_builders::GetRecommendations::set_user_id): <p>The user ID to provide recommendations for.</p>  <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>
    ///   - [`num_results(i32)`](crate::client::fluent_builders::GetRecommendations::num_results) / [`set_num_results(i32)`](crate::client::fluent_builders::GetRecommendations::set_num_results): <p>The number of results to return. The default is 25. The maximum is 500.</p>
    ///   - [`context(HashMap<String, String>)`](crate::client::fluent_builders::GetRecommendations::context) / [`set_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetRecommendations::set_context): <p>The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.</p>
    ///   - [`filter_arn(impl Into<String>)`](crate::client::fluent_builders::GetRecommendations::filter_arn) / [`set_filter_arn(Option<String>)`](crate::client::fluent_builders::GetRecommendations::set_filter_arn): <p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p>  <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>
    ///   - [`filter_values(HashMap<String, String>)`](crate::client::fluent_builders::GetRecommendations::filter_values) / [`set_filter_values(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetRecommendations::set_filter_values): <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p>  <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering recommendations and user segments</a>.</p>
    ///   - [`recommender_arn(impl Into<String>)`](crate::client::fluent_builders::GetRecommendations::recommender_arn) / [`set_recommender_arn(Option<String>)`](crate::client::fluent_builders::GetRecommendations::set_recommender_arn): <p>The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.</p>
    ///   - [`promotions(Vec<Promotion>)`](crate::client::fluent_builders::GetRecommendations::promotions) / [`set_promotions(Option<Vec<Promotion>>)`](crate::client::fluent_builders::GetRecommendations::set_promotions): <p>The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.</p>
    /// - On success, responds with [`GetRecommendationsOutput`](crate::output::GetRecommendationsOutput) with field(s):
    ///   - [`item_list(Option<Vec<PredictedItem>>)`](crate::output::GetRecommendationsOutput::item_list): <p>A list of recommendations sorted in descending order by prediction score. There can be a maximum of 500 items in the list.</p>
    ///   - [`recommendation_id(Option<String>)`](crate::output::GetRecommendationsOutput::recommendation_id): <p>The ID of the recommendation.</p>
    /// - On failure, responds with [`SdkError<GetRecommendationsError>`](crate::error::GetRecommendationsError)
    pub fn get_recommendations(&self) -> crate::client::fluent_builders::GetRecommendations {
        crate::client::fluent_builders::GetRecommendations::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
