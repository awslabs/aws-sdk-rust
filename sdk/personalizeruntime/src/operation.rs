// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Re-ranks a list of recommended items for the given user. The first item in the list is
/// deemed the most likely item to be of interest to the user.</p>
/// <note>
/// <p>The solution backing the campaign must have been created using a recipe of type
/// PERSONALIZED_RANKING.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPersonalizedRanking {
    _private: (),
}
impl GetPersonalizedRanking {
    /// Creates a new builder-style object to manufacture [`GetPersonalizedRankingInput`](crate::input::GetPersonalizedRankingInput)
    pub fn builder() -> crate::input::get_personalized_ranking_input::Builder {
        crate::input::get_personalized_ranking_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPersonalizedRanking {
    type Output = std::result::Result<
        crate::output::GetPersonalizedRankingOutput,
        crate::error::GetPersonalizedRankingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_personalized_ranking_error(response)
        } else {
            crate::operation_deser::parse_get_personalized_ranking_response(response)
        }
    }
}

/// <p>Returns a list of recommended items. The required input depends on the recipe type used to
/// create the solution backing the campaign, as follows:</p>
/// <ul>
/// <li>
/// <p>RELATED_ITEMS - <code>itemId</code> required, <code>userId</code> not used</p>
/// </li>
/// <li>
/// <p>USER_PERSONALIZATION - <code>itemId</code> optional, <code>userId</code>
/// required</p>
/// </li>
/// </ul>
/// <note>
/// <p>Campaigns that are backed by a solution created using a recipe of type
/// PERSONALIZED_RANKING use the  API.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRecommendations {
    _private: (),
}
impl GetRecommendations {
    /// Creates a new builder-style object to manufacture [`GetRecommendationsInput`](crate::input::GetRecommendationsInput)
    pub fn builder() -> crate::input::get_recommendations_input::Builder {
        crate::input::get_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRecommendations {
    type Output = std::result::Result<
        crate::output::GetRecommendationsOutput,
        crate::error::GetRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_recommendations_response(response)
        }
    }
}
