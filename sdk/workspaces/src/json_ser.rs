// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_connection_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateConnectionAliasInput,
) {
    if let Some(var_1) = &input.alias_id {
        object.key("AliasId").string(var_1);
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2);
    }
}

pub fn serialize_structure_crate_input_associate_ip_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateIpGroupsInput,
) {
    if let Some(var_3) = &input.directory_id {
        object.key("DirectoryId").string(var_3);
    }
    if let Some(var_4) = &input.group_ids {
        let mut array_5 = object.key("GroupIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_crate_input_authorize_ip_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AuthorizeIpRulesInput,
) {
    if let Some(var_7) = &input.group_id {
        object.key("GroupId").string(var_7);
    }
    if let Some(var_8) = &input.user_rules {
        let mut array_9 = object.key("UserRules").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_copy_workspace_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyWorkspaceImageInput,
) {
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12);
    }
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13);
    }
    if let Some(var_14) = &input.source_image_id {
        object.key("SourceImageId").string(var_14);
    }
    if let Some(var_15) = &input.source_region {
        object.key("SourceRegion").string(var_15);
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18);
                object_19.finish();
            }
        }
        array_17.finish();
    }
}

pub fn serialize_structure_crate_input_create_connection_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionAliasInput,
) {
    if let Some(var_20) = &input.connection_string {
        object.key("ConnectionString").string(var_20);
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_24, item_23);
                object_24.finish();
            }
        }
        array_22.finish();
    }
}

pub fn serialize_structure_crate_input_create_ip_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpGroupInput,
) {
    if let Some(var_25) = &input.group_name {
        object.key("GroupName").string(var_25);
    }
    if let Some(var_26) = &input.group_desc {
        object.key("GroupDesc").string(var_26);
    }
    if let Some(var_27) = &input.user_rules {
        let mut array_28 = object.key("UserRules").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(
                    &mut object_30,
                    item_29,
                );
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33);
                object_34.finish();
            }
        }
        array_32.finish();
    }
}

pub fn serialize_structure_crate_input_create_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTagsInput,
) {
    if let Some(var_35) = &input.resource_id {
        object.key("ResourceId").string(var_35);
    }
    if let Some(var_36) = &input.tags {
        let mut array_37 = object.key("Tags").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_39, item_38);
                object_39.finish();
            }
        }
        array_37.finish();
    }
}

pub fn serialize_structure_crate_input_create_workspace_bundle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspaceBundleInput,
) {
    if let Some(var_40) = &input.bundle_name {
        object.key("BundleName").string(var_40);
    }
    if let Some(var_41) = &input.bundle_description {
        object.key("BundleDescription").string(var_41);
    }
    if let Some(var_42) = &input.image_id {
        object.key("ImageId").string(var_42);
    }
    if let Some(var_43) = &input.compute_type {
        let mut object_44 = object.key("ComputeType").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_type(&mut object_44, var_43);
        object_44.finish();
    }
    if let Some(var_45) = &input.user_storage {
        let mut object_46 = object.key("UserStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_user_storage(&mut object_46, var_45);
        object_46.finish();
    }
    if let Some(var_47) = &input.root_storage {
        let mut object_48 = object.key("RootStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_root_storage(&mut object_48, var_47);
        object_48.finish();
    }
    if let Some(var_49) = &input.tags {
        let mut array_50 = object.key("Tags").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_52, item_51);
                object_52.finish();
            }
        }
        array_50.finish();
    }
}

pub fn serialize_structure_crate_input_create_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspacesInput,
) {
    if let Some(var_53) = &input.workspaces {
        let mut array_54 = object.key("Workspaces").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workspace_request(
                    &mut object_56,
                    item_55,
                );
                object_56.finish();
            }
        }
        array_54.finish();
    }
}

pub fn serialize_structure_crate_input_delete_connection_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionAliasInput,
) {
    if let Some(var_57) = &input.alias_id {
        object.key("AliasId").string(var_57);
    }
}

pub fn serialize_structure_crate_input_delete_ip_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIpGroupInput,
) {
    if let Some(var_58) = &input.group_id {
        object.key("GroupId").string(var_58);
    }
}

pub fn serialize_structure_crate_input_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_59) = &input.resource_id {
        object.key("ResourceId").string(var_59);
    }
    if let Some(var_60) = &input.tag_keys {
        let mut array_61 = object.key("TagKeys").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
}

pub fn serialize_structure_crate_input_delete_workspace_bundle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkspaceBundleInput,
) {
    if let Some(var_63) = &input.bundle_id {
        object.key("BundleId").string(var_63);
    }
}

pub fn serialize_structure_crate_input_delete_workspace_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkspaceImageInput,
) {
    if let Some(var_64) = &input.image_id {
        object.key("ImageId").string(var_64);
    }
}

pub fn serialize_structure_crate_input_deregister_workspace_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterWorkspaceDirectoryInput,
) {
    if let Some(var_65) = &input.directory_id {
        object.key("DirectoryId").string(var_65);
    }
}

pub fn serialize_structure_crate_input_describe_account_modifications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccountModificationsInput,
) {
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66);
    }
}

pub fn serialize_structure_crate_input_describe_client_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClientPropertiesInput,
) {
    if let Some(var_67) = &input.resource_ids {
        let mut array_68 = object.key("ResourceIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69);
            }
        }
        array_68.finish();
    }
}

pub fn serialize_structure_crate_input_describe_connection_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionAliasesInput,
) {
    if let Some(var_70) = &input.alias_ids {
        let mut array_71 = object.key("AliasIds").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72);
            }
        }
        array_71.finish();
    }
    if let Some(var_73) = &input.resource_id {
        object.key("ResourceId").string(var_73);
    }
    if let Some(var_74) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.next_token {
        object.key("NextToken").string(var_75);
    }
}

pub fn serialize_structure_crate_input_describe_connection_alias_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionAliasPermissionsInput,
) {
    if let Some(var_76) = &input.alias_id {
        object.key("AliasId").string(var_76);
    }
    if let Some(var_77) = &input.next_token {
        object.key("NextToken").string(var_77);
    }
    if let Some(var_78) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_78).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_ip_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIpGroupsInput,
) {
    if let Some(var_79) = &input.group_ids {
        let mut array_80 = object.key("GroupIds").start_array();
        for item_81 in var_79 {
            {
                array_80.value().string(item_81);
            }
        }
        array_80.finish();
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82);
    }
    if let Some(var_83) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_83).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTagsInput,
) {
    if let Some(var_84) = &input.resource_id {
        object.key("ResourceId").string(var_84);
    }
}

pub fn serialize_structure_crate_input_describe_workspace_bundles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspaceBundlesInput,
) {
    if let Some(var_85) = &input.bundle_ids {
        let mut array_86 = object.key("BundleIds").start_array();
        for item_87 in var_85 {
            {
                array_86.value().string(item_87);
            }
        }
        array_86.finish();
    }
    if let Some(var_88) = &input.owner {
        object.key("Owner").string(var_88);
    }
    if let Some(var_89) = &input.next_token {
        object.key("NextToken").string(var_89);
    }
}

pub fn serialize_structure_crate_input_describe_workspace_directories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspaceDirectoriesInput,
) {
    if let Some(var_90) = &input.directory_ids {
        let mut array_91 = object.key("DirectoryIds").start_array();
        for item_92 in var_90 {
            {
                array_91.value().string(item_92);
            }
        }
        array_91.finish();
    }
    if let Some(var_93) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_93).into()),
        );
    }
    if let Some(var_94) = &input.next_token {
        object.key("NextToken").string(var_94);
    }
}

pub fn serialize_structure_crate_input_describe_workspace_image_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspaceImagePermissionsInput,
) {
    if let Some(var_95) = &input.image_id {
        object.key("ImageId").string(var_95);
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96);
    }
    if let Some(var_97) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_workspace_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspaceImagesInput,
) {
    if let Some(var_98) = &input.image_ids {
        let mut array_99 = object.key("ImageIds").start_array();
        for item_100 in var_98 {
            {
                array_99.value().string(item_100);
            }
        }
        array_99.finish();
    }
    if let Some(var_101) = &input.image_type {
        object.key("ImageType").string(var_101.as_str());
    }
    if let Some(var_102) = &input.next_token {
        object.key("NextToken").string(var_102);
    }
    if let Some(var_103) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_103).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspacesInput,
) {
    if let Some(var_104) = &input.workspace_ids {
        let mut array_105 = object.key("WorkspaceIds").start_array();
        for item_106 in var_104 {
            {
                array_105.value().string(item_106);
            }
        }
        array_105.finish();
    }
    if let Some(var_107) = &input.directory_id {
        object.key("DirectoryId").string(var_107);
    }
    if let Some(var_108) = &input.user_name {
        object.key("UserName").string(var_108);
    }
    if let Some(var_109) = &input.bundle_id {
        object.key("BundleId").string(var_109);
    }
    if let Some(var_110) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    if let Some(var_111) = &input.next_token {
        object.key("NextToken").string(var_111);
    }
}

pub fn serialize_structure_crate_input_describe_workspaces_connection_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspacesConnectionStatusInput,
) {
    if let Some(var_112) = &input.workspace_ids {
        let mut array_113 = object.key("WorkspaceIds").start_array();
        for item_114 in var_112 {
            {
                array_113.value().string(item_114);
            }
        }
        array_113.finish();
    }
    if let Some(var_115) = &input.next_token {
        object.key("NextToken").string(var_115);
    }
}

pub fn serialize_structure_crate_input_describe_workspace_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkspaceSnapshotsInput,
) {
    if let Some(var_116) = &input.workspace_id {
        object.key("WorkspaceId").string(var_116);
    }
}

pub fn serialize_structure_crate_input_disassociate_connection_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateConnectionAliasInput,
) {
    if let Some(var_117) = &input.alias_id {
        object.key("AliasId").string(var_117);
    }
}

pub fn serialize_structure_crate_input_disassociate_ip_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateIpGroupsInput,
) {
    if let Some(var_118) = &input.directory_id {
        object.key("DirectoryId").string(var_118);
    }
    if let Some(var_119) = &input.group_ids {
        let mut array_120 = object.key("GroupIds").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121);
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_crate_input_import_workspace_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportWorkspaceImageInput,
) {
    if let Some(var_122) = &input.ec2_image_id {
        object.key("Ec2ImageId").string(var_122);
    }
    if let Some(var_123) = &input.ingestion_process {
        object.key("IngestionProcess").string(var_123.as_str());
    }
    if let Some(var_124) = &input.image_name {
        object.key("ImageName").string(var_124);
    }
    if let Some(var_125) = &input.image_description {
        object.key("ImageDescription").string(var_125);
    }
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_129, item_128);
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.applications {
        let mut array_131 = object.key("Applications").start_array();
        for item_132 in var_130 {
            {
                array_131.value().string(item_132.as_str());
            }
        }
        array_131.finish();
    }
}

pub fn serialize_structure_crate_input_list_available_management_cidr_ranges_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailableManagementCidrRangesInput,
) {
    if let Some(var_133) = &input.management_cidr_range_constraint {
        object.key("ManagementCidrRangeConstraint").string(var_133);
    }
    if let Some(var_134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.next_token {
        object.key("NextToken").string(var_135);
    }
}

pub fn serialize_structure_crate_input_migrate_workspace_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MigrateWorkspaceInput,
) {
    if let Some(var_136) = &input.source_workspace_id {
        object.key("SourceWorkspaceId").string(var_136);
    }
    if let Some(var_137) = &input.bundle_id {
        object.key("BundleId").string(var_137);
    }
}

pub fn serialize_structure_crate_input_modify_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyAccountInput,
) {
    if let Some(var_138) = &input.dedicated_tenancy_support {
        object
            .key("DedicatedTenancySupport")
            .string(var_138.as_str());
    }
    if let Some(var_139) = &input.dedicated_tenancy_management_cidr_range {
        object
            .key("DedicatedTenancyManagementCidrRange")
            .string(var_139);
    }
}

pub fn serialize_structure_crate_input_modify_client_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClientPropertiesInput,
) {
    if let Some(var_140) = &input.resource_id {
        object.key("ResourceId").string(var_140);
    }
    if let Some(var_141) = &input.client_properties {
        let mut object_142 = object.key("ClientProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_client_properties(
            &mut object_142,
            var_141,
        );
        object_142.finish();
    }
}

pub fn serialize_structure_crate_input_modify_selfservice_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifySelfservicePermissionsInput,
) {
    if let Some(var_143) = &input.resource_id {
        object.key("ResourceId").string(var_143);
    }
    if let Some(var_144) = &input.selfservice_permissions {
        let mut object_145 = object.key("SelfservicePermissions").start_object();
        crate::json_ser::serialize_structure_crate_model_selfservice_permissions(
            &mut object_145,
            var_144,
        );
        object_145.finish();
    }
}

pub fn serialize_structure_crate_input_modify_workspace_access_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyWorkspaceAccessPropertiesInput,
) {
    if let Some(var_146) = &input.resource_id {
        object.key("ResourceId").string(var_146);
    }
    if let Some(var_147) = &input.workspace_access_properties {
        let mut object_148 = object.key("WorkspaceAccessProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_access_properties(
            &mut object_148,
            var_147,
        );
        object_148.finish();
    }
}

pub fn serialize_structure_crate_input_modify_workspace_creation_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyWorkspaceCreationPropertiesInput,
) {
    if let Some(var_149) = &input.resource_id {
        object.key("ResourceId").string(var_149);
    }
    if let Some(var_150) = &input.workspace_creation_properties {
        let mut object_151 = object.key("WorkspaceCreationProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_creation_properties(
            &mut object_151,
            var_150,
        );
        object_151.finish();
    }
}

pub fn serialize_structure_crate_input_modify_workspace_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyWorkspacePropertiesInput,
) {
    if let Some(var_152) = &input.workspace_id {
        object.key("WorkspaceId").string(var_152);
    }
    if let Some(var_153) = &input.workspace_properties {
        let mut object_154 = object.key("WorkspaceProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_properties(
            &mut object_154,
            var_153,
        );
        object_154.finish();
    }
}

pub fn serialize_structure_crate_input_modify_workspace_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyWorkspaceStateInput,
) {
    if let Some(var_155) = &input.workspace_id {
        object.key("WorkspaceId").string(var_155);
    }
    if let Some(var_156) = &input.workspace_state {
        object.key("WorkspaceState").string(var_156.as_str());
    }
}

pub fn serialize_structure_crate_input_reboot_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootWorkspacesInput,
) {
    if let Some(var_157) = &input.reboot_workspace_requests {
        let mut array_158 = object.key("RebootWorkspaceRequests").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_reboot_request(
                    &mut object_160,
                    item_159,
                );
                object_160.finish();
            }
        }
        array_158.finish();
    }
}

pub fn serialize_structure_crate_input_rebuild_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebuildWorkspacesInput,
) {
    if let Some(var_161) = &input.rebuild_workspace_requests {
        let mut array_162 = object.key("RebuildWorkspaceRequests").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rebuild_request(
                    &mut object_164,
                    item_163,
                );
                object_164.finish();
            }
        }
        array_162.finish();
    }
}

pub fn serialize_structure_crate_input_register_workspace_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterWorkspaceDirectoryInput,
) {
    if let Some(var_165) = &input.directory_id {
        object.key("DirectoryId").string(var_165);
    }
    if let Some(var_166) = &input.subnet_ids {
        let mut array_167 = object.key("SubnetIds").start_array();
        for item_168 in var_166 {
            {
                array_167.value().string(item_168);
            }
        }
        array_167.finish();
    }
    if let Some(var_169) = &input.enable_work_docs {
        object.key("EnableWorkDocs").boolean(*var_169);
    }
    if let Some(var_170) = &input.enable_self_service {
        object.key("EnableSelfService").boolean(*var_170);
    }
    if let Some(var_171) = &input.tenancy {
        object.key("Tenancy").string(var_171.as_str());
    }
    if let Some(var_172) = &input.tags {
        let mut array_173 = object.key("Tags").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
}

pub fn serialize_structure_crate_input_restore_workspace_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreWorkspaceInput,
) {
    if let Some(var_176) = &input.workspace_id {
        object.key("WorkspaceId").string(var_176);
    }
}

pub fn serialize_structure_crate_input_revoke_ip_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeIpRulesInput,
) {
    if let Some(var_177) = &input.group_id {
        object.key("GroupId").string(var_177);
    }
    if let Some(var_178) = &input.user_rules {
        let mut array_179 = object.key("UserRules").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_crate_input_start_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkspacesInput,
) {
    if let Some(var_181) = &input.start_workspace_requests {
        let mut array_182 = object.key("StartWorkspaceRequests").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_start_request(
                    &mut object_184,
                    item_183,
                );
                object_184.finish();
            }
        }
        array_182.finish();
    }
}

pub fn serialize_structure_crate_input_stop_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkspacesInput,
) {
    if let Some(var_185) = &input.stop_workspace_requests {
        let mut array_186 = object.key("StopWorkspaceRequests").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stop_request(
                    &mut object_188,
                    item_187,
                );
                object_188.finish();
            }
        }
        array_186.finish();
    }
}

pub fn serialize_structure_crate_input_terminate_workspaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateWorkspacesInput,
) {
    if let Some(var_189) = &input.terminate_workspace_requests {
        let mut array_190 = object.key("TerminateWorkspaceRequests").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_terminate_request(
                    &mut object_192,
                    item_191,
                );
                object_192.finish();
            }
        }
        array_190.finish();
    }
}

pub fn serialize_structure_crate_input_update_connection_alias_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionAliasPermissionInput,
) {
    if let Some(var_193) = &input.alias_id {
        object.key("AliasId").string(var_193);
    }
    if let Some(var_194) = &input.connection_alias_permission {
        let mut object_195 = object.key("ConnectionAliasPermission").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_alias_permission(
            &mut object_195,
            var_194,
        );
        object_195.finish();
    }
}

pub fn serialize_structure_crate_input_update_rules_of_ip_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRulesOfIpGroupInput,
) {
    if let Some(var_196) = &input.group_id {
        object.key("GroupId").string(var_196);
    }
    if let Some(var_197) = &input.user_rules {
        let mut array_198 = object.key("UserRules").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_rule_item(
                    &mut object_200,
                    item_199,
                );
                object_200.finish();
            }
        }
        array_198.finish();
    }
}

pub fn serialize_structure_crate_input_update_workspace_bundle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceBundleInput,
) {
    if let Some(var_201) = &input.bundle_id {
        object.key("BundleId").string(var_201);
    }
    if let Some(var_202) = &input.image_id {
        object.key("ImageId").string(var_202);
    }
}

pub fn serialize_structure_crate_input_update_workspace_image_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceImagePermissionInput,
) {
    if let Some(var_203) = &input.image_id {
        object.key("ImageId").string(var_203);
    }
    if let Some(var_204) = &input.allow_copy_image {
        object.key("AllowCopyImage").boolean(*var_204);
    }
    if let Some(var_205) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_205);
    }
}

pub fn serialize_structure_crate_model_ip_rule_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpRuleItem,
) {
    if let Some(var_206) = &input.ip_rule {
        object.key("ipRule").string(var_206);
    }
    if let Some(var_207) = &input.rule_desc {
        object.key("ruleDesc").string(var_207);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_208) = &input.key {
        object.key("Key").string(var_208);
    }
    if let Some(var_209) = &input.value {
        object.key("Value").string(var_209);
    }
}

pub fn serialize_structure_crate_model_compute_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeType,
) {
    if let Some(var_210) = &input.name {
        object.key("Name").string(var_210.as_str());
    }
}

pub fn serialize_structure_crate_model_user_storage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserStorage,
) {
    if let Some(var_211) = &input.capacity {
        object.key("Capacity").string(var_211);
    }
}

pub fn serialize_structure_crate_model_root_storage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RootStorage,
) {
    if let Some(var_212) = &input.capacity {
        object.key("Capacity").string(var_212);
    }
}

pub fn serialize_structure_crate_model_workspace_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkspaceRequest,
) {
    if let Some(var_213) = &input.directory_id {
        object.key("DirectoryId").string(var_213);
    }
    if let Some(var_214) = &input.user_name {
        object.key("UserName").string(var_214);
    }
    if let Some(var_215) = &input.bundle_id {
        object.key("BundleId").string(var_215);
    }
    if let Some(var_216) = &input.volume_encryption_key {
        object.key("VolumeEncryptionKey").string(var_216);
    }
    if let Some(var_217) = &input.user_volume_encryption_enabled {
        object.key("UserVolumeEncryptionEnabled").boolean(*var_217);
    }
    if let Some(var_218) = &input.root_volume_encryption_enabled {
        object.key("RootVolumeEncryptionEnabled").boolean(*var_218);
    }
    if let Some(var_219) = &input.workspace_properties {
        let mut object_220 = object.key("WorkspaceProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_workspace_properties(
            &mut object_220,
            var_219,
        );
        object_220.finish();
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_crate_model_client_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientProperties,
) {
    if let Some(var_225) = &input.reconnect_enabled {
        object.key("ReconnectEnabled").string(var_225.as_str());
    }
}

pub fn serialize_structure_crate_model_selfservice_permissions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfservicePermissions,
) {
    if let Some(var_226) = &input.restart_workspace {
        object.key("RestartWorkspace").string(var_226.as_str());
    }
    if let Some(var_227) = &input.increase_volume_size {
        object.key("IncreaseVolumeSize").string(var_227.as_str());
    }
    if let Some(var_228) = &input.change_compute_type {
        object.key("ChangeComputeType").string(var_228.as_str());
    }
    if let Some(var_229) = &input.switch_running_mode {
        object.key("SwitchRunningMode").string(var_229.as_str());
    }
    if let Some(var_230) = &input.rebuild_workspace {
        object.key("RebuildWorkspace").string(var_230.as_str());
    }
}

pub fn serialize_structure_crate_model_workspace_access_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkspaceAccessProperties,
) {
    if let Some(var_231) = &input.device_type_windows {
        object.key("DeviceTypeWindows").string(var_231.as_str());
    }
    if let Some(var_232) = &input.device_type_osx {
        object.key("DeviceTypeOsx").string(var_232.as_str());
    }
    if let Some(var_233) = &input.device_type_web {
        object.key("DeviceTypeWeb").string(var_233.as_str());
    }
    if let Some(var_234) = &input.device_type_ios {
        object.key("DeviceTypeIos").string(var_234.as_str());
    }
    if let Some(var_235) = &input.device_type_android {
        object.key("DeviceTypeAndroid").string(var_235.as_str());
    }
    if let Some(var_236) = &input.device_type_chrome_os {
        object.key("DeviceTypeChromeOs").string(var_236.as_str());
    }
    if let Some(var_237) = &input.device_type_zero_client {
        object.key("DeviceTypeZeroClient").string(var_237.as_str());
    }
    if let Some(var_238) = &input.device_type_linux {
        object.key("DeviceTypeLinux").string(var_238.as_str());
    }
}

pub fn serialize_structure_crate_model_workspace_creation_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkspaceCreationProperties,
) {
    if let Some(var_239) = &input.enable_work_docs {
        object.key("EnableWorkDocs").boolean(*var_239);
    }
    if let Some(var_240) = &input.enable_internet_access {
        object.key("EnableInternetAccess").boolean(*var_240);
    }
    if let Some(var_241) = &input.default_ou {
        object.key("DefaultOu").string(var_241);
    }
    if let Some(var_242) = &input.custom_security_group_id {
        object.key("CustomSecurityGroupId").string(var_242);
    }
    if let Some(var_243) = &input.user_enabled_as_local_administrator {
        object
            .key("UserEnabledAsLocalAdministrator")
            .boolean(*var_243);
    }
    if let Some(var_244) = &input.enable_maintenance_mode {
        object.key("EnableMaintenanceMode").boolean(*var_244);
    }
}

pub fn serialize_structure_crate_model_workspace_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkspaceProperties,
) {
    if let Some(var_245) = &input.running_mode {
        object.key("RunningMode").string(var_245.as_str());
    }
    if let Some(var_246) = &input.running_mode_auto_stop_timeout_in_minutes {
        object.key("RunningModeAutoStopTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.root_volume_size_gib {
        object.key("RootVolumeSizeGib").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_247).into()),
        );
    }
    if let Some(var_248) = &input.user_volume_size_gib {
        object.key("UserVolumeSizeGib").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.compute_type_name {
        object.key("ComputeTypeName").string(var_249.as_str());
    }
}

pub fn serialize_structure_crate_model_reboot_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RebootRequest,
) {
    if let Some(var_250) = &input.workspace_id {
        object.key("WorkspaceId").string(var_250);
    }
}

pub fn serialize_structure_crate_model_rebuild_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RebuildRequest,
) {
    if let Some(var_251) = &input.workspace_id {
        object.key("WorkspaceId").string(var_251);
    }
}

pub fn serialize_structure_crate_model_start_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartRequest,
) {
    if let Some(var_252) = &input.workspace_id {
        object.key("WorkspaceId").string(var_252);
    }
}

pub fn serialize_structure_crate_model_stop_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StopRequest,
) {
    if let Some(var_253) = &input.workspace_id {
        object.key("WorkspaceId").string(var_253);
    }
}

pub fn serialize_structure_crate_model_terminate_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TerminateRequest,
) {
    if let Some(var_254) = &input.workspace_id {
        object.key("WorkspaceId").string(var_254);
    }
}

pub fn serialize_structure_crate_model_connection_alias_permission(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionAliasPermission,
) {
    if let Some(var_255) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_255);
    }
    if let Some(var_256) = &input.allow_association {
        object.key("AllowAssociation").boolean(*var_256);
    }
}
