// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_client_branding_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_client_branding::ImportClientBrandingInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.resource_id {
        object.key("ResourceId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.device_type_windows {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DeviceTypeWindows").start_object();
        crate::protocol_serde::shape_default_import_client_branding_attributes::ser_default_import_client_branding_attributes(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.device_type_osx {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DeviceTypeOsx").start_object();
        crate::protocol_serde::shape_default_import_client_branding_attributes::ser_default_import_client_branding_attributes(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.device_type_android {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DeviceTypeAndroid").start_object();
        crate::protocol_serde::shape_default_import_client_branding_attributes::ser_default_import_client_branding_attributes(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.device_type_ios {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DeviceTypeIos").start_object();
        crate::protocol_serde::shape_ios_import_client_branding_attributes::ser_ios_import_client_branding_attributes(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.device_type_linux {
        #[allow(unused_mut)]
        let mut object_11 = object.key("DeviceTypeLinux").start_object();
        crate::protocol_serde::shape_default_import_client_branding_attributes::ser_default_import_client_branding_attributes(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.device_type_web {
        #[allow(unused_mut)]
        let mut object_13 = object.key("DeviceTypeWeb").start_object();
        crate::protocol_serde::shape_default_import_client_branding_attributes::ser_default_import_client_branding_attributes(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    Ok(())
}
