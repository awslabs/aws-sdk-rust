// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_workspace_directory<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::WorkspaceDirectory>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::WorkspaceDirectoryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DirectoryId" => {
                            builder = builder.set_directory_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Alias" => {
                            builder = builder.set_alias(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DirectoryName" => {
                            builder = builder.set_directory_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RegistrationCode" => {
                            builder = builder.set_registration_code(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SubnetIds" => {
                            builder = builder.set_subnet_ids(crate::protocol_serde::shape_subnet_ids::de_subnet_ids(tokens)?);
                        }
                        "DnsIpAddresses" => {
                            builder = builder.set_dns_ip_addresses(crate::protocol_serde::shape_dns_ip_addresses::de_dns_ip_addresses(tokens)?);
                        }
                        "DnsIpv6Addresses" => {
                            builder = builder.set_dns_ipv6_addresses(crate::protocol_serde::shape_dns_ipv6_addresses::de_dns_ipv6_addresses(tokens)?);
                        }
                        "CustomerUserName" => {
                            builder = builder.set_customer_user_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "IamRoleId" => {
                            builder = builder.set_iam_role_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DirectoryType" => {
                            builder = builder.set_directory_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::WorkspaceDirectoryType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "WorkspaceSecurityGroupId" => {
                            builder = builder.set_workspace_security_group_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "State" => {
                            builder = builder.set_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::WorkspaceDirectoryState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "WorkspaceCreationProperties" => {
                            builder = builder.set_workspace_creation_properties(
                                crate::protocol_serde::shape_default_workspace_creation_properties::de_default_workspace_creation_properties(tokens)?,
                            );
                        }
                        "ipGroupIds" => {
                            builder = builder.set_ip_group_ids(crate::protocol_serde::shape_ip_group_id_list::de_ip_group_id_list(tokens)?);
                        }
                        "WorkspaceAccessProperties" => {
                            builder = builder.set_workspace_access_properties(
                                crate::protocol_serde::shape_workspace_access_properties::de_workspace_access_properties(tokens)?,
                            );
                        }
                        "Tenancy" => {
                            builder = builder.set_tenancy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Tenancy::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SelfservicePermissions" => {
                            builder = builder.set_selfservice_permissions(
                                crate::protocol_serde::shape_selfservice_permissions::de_selfservice_permissions(tokens)?,
                            );
                        }
                        "SamlProperties" => {
                            builder = builder.set_saml_properties(crate::protocol_serde::shape_saml_properties::de_saml_properties(tokens)?);
                        }
                        "CertificateBasedAuthProperties" => {
                            builder = builder.set_certificate_based_auth_properties(
                                crate::protocol_serde::shape_certificate_based_auth_properties::de_certificate_based_auth_properties(tokens)?,
                            );
                        }
                        "EndpointEncryptionMode" => {
                            builder = builder.set_endpoint_encryption_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EndpointEncryptionMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "MicrosoftEntraConfig" => {
                            builder = builder
                                .set_microsoft_entra_config(crate::protocol_serde::shape_microsoft_entra_config::de_microsoft_entra_config(tokens)?);
                        }
                        "WorkspaceDirectoryName" => {
                            builder = builder.set_workspace_directory_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "WorkspaceDirectoryDescription" => {
                            builder = builder.set_workspace_directory_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UserIdentityType" => {
                            builder = builder.set_user_identity_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::UserIdentityType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "WorkspaceType" => {
                            builder = builder.set_workspace_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::WorkspaceType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "IDCConfig" => {
                            builder = builder.set_idc_config(crate::protocol_serde::shape_idc_config::de_idc_config(tokens)?);
                        }
                        "ActiveDirectoryConfig" => {
                            builder = builder.set_active_directory_config(
                                crate::protocol_serde::shape_active_directory_config::de_active_directory_config(tokens)?,
                            );
                        }
                        "StreamingProperties" => {
                            builder =
                                builder.set_streaming_properties(crate::protocol_serde::shape_streaming_properties::de_streaming_properties(tokens)?);
                        }
                        "ErrorMessage" => {
                            builder = builder.set_error_message(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
