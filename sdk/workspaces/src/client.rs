// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `WorkspacesService`.
///
/// This client allows ergonomic access to a `WorkspacesService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn associate_connection_alias(&self) -> fluent_builders::AssociateConnectionAlias<C, M, R> {
        fluent_builders::AssociateConnectionAlias::new(self.handle.clone())
    }
    pub fn associate_ip_groups(&self) -> fluent_builders::AssociateIpGroups<C, M, R> {
        fluent_builders::AssociateIpGroups::new(self.handle.clone())
    }
    pub fn authorize_ip_rules(&self) -> fluent_builders::AuthorizeIpRules<C, M, R> {
        fluent_builders::AuthorizeIpRules::new(self.handle.clone())
    }
    pub fn copy_workspace_image(&self) -> fluent_builders::CopyWorkspaceImage<C, M, R> {
        fluent_builders::CopyWorkspaceImage::new(self.handle.clone())
    }
    pub fn create_connection_alias(&self) -> fluent_builders::CreateConnectionAlias<C, M, R> {
        fluent_builders::CreateConnectionAlias::new(self.handle.clone())
    }
    pub fn create_ip_group(&self) -> fluent_builders::CreateIpGroup<C, M, R> {
        fluent_builders::CreateIpGroup::new(self.handle.clone())
    }
    pub fn create_tags(&self) -> fluent_builders::CreateTags<C, M, R> {
        fluent_builders::CreateTags::new(self.handle.clone())
    }
    pub fn create_updated_workspace_image(
        &self,
    ) -> fluent_builders::CreateUpdatedWorkspaceImage<C, M, R> {
        fluent_builders::CreateUpdatedWorkspaceImage::new(self.handle.clone())
    }
    pub fn create_workspace_bundle(&self) -> fluent_builders::CreateWorkspaceBundle<C, M, R> {
        fluent_builders::CreateWorkspaceBundle::new(self.handle.clone())
    }
    pub fn create_workspaces(&self) -> fluent_builders::CreateWorkspaces<C, M, R> {
        fluent_builders::CreateWorkspaces::new(self.handle.clone())
    }
    pub fn delete_connection_alias(&self) -> fluent_builders::DeleteConnectionAlias<C, M, R> {
        fluent_builders::DeleteConnectionAlias::new(self.handle.clone())
    }
    pub fn delete_ip_group(&self) -> fluent_builders::DeleteIpGroup<C, M, R> {
        fluent_builders::DeleteIpGroup::new(self.handle.clone())
    }
    pub fn delete_tags(&self) -> fluent_builders::DeleteTags<C, M, R> {
        fluent_builders::DeleteTags::new(self.handle.clone())
    }
    pub fn delete_workspace_bundle(&self) -> fluent_builders::DeleteWorkspaceBundle<C, M, R> {
        fluent_builders::DeleteWorkspaceBundle::new(self.handle.clone())
    }
    pub fn delete_workspace_image(&self) -> fluent_builders::DeleteWorkspaceImage<C, M, R> {
        fluent_builders::DeleteWorkspaceImage::new(self.handle.clone())
    }
    pub fn deregister_workspace_directory(
        &self,
    ) -> fluent_builders::DeregisterWorkspaceDirectory<C, M, R> {
        fluent_builders::DeregisterWorkspaceDirectory::new(self.handle.clone())
    }
    pub fn describe_account(&self) -> fluent_builders::DescribeAccount<C, M, R> {
        fluent_builders::DescribeAccount::new(self.handle.clone())
    }
    pub fn describe_account_modifications(
        &self,
    ) -> fluent_builders::DescribeAccountModifications<C, M, R> {
        fluent_builders::DescribeAccountModifications::new(self.handle.clone())
    }
    pub fn describe_client_properties(&self) -> fluent_builders::DescribeClientProperties<C, M, R> {
        fluent_builders::DescribeClientProperties::new(self.handle.clone())
    }
    pub fn describe_connection_aliases(
        &self,
    ) -> fluent_builders::DescribeConnectionAliases<C, M, R> {
        fluent_builders::DescribeConnectionAliases::new(self.handle.clone())
    }
    pub fn describe_connection_alias_permissions(
        &self,
    ) -> fluent_builders::DescribeConnectionAliasPermissions<C, M, R> {
        fluent_builders::DescribeConnectionAliasPermissions::new(self.handle.clone())
    }
    pub fn describe_ip_groups(&self) -> fluent_builders::DescribeIpGroups<C, M, R> {
        fluent_builders::DescribeIpGroups::new(self.handle.clone())
    }
    pub fn describe_tags(&self) -> fluent_builders::DescribeTags<C, M, R> {
        fluent_builders::DescribeTags::new(self.handle.clone())
    }
    pub fn describe_workspace_bundles(&self) -> fluent_builders::DescribeWorkspaceBundles<C, M, R> {
        fluent_builders::DescribeWorkspaceBundles::new(self.handle.clone())
    }
    pub fn describe_workspace_directories(
        &self,
    ) -> fluent_builders::DescribeWorkspaceDirectories<C, M, R> {
        fluent_builders::DescribeWorkspaceDirectories::new(self.handle.clone())
    }
    pub fn describe_workspace_image_permissions(
        &self,
    ) -> fluent_builders::DescribeWorkspaceImagePermissions<C, M, R> {
        fluent_builders::DescribeWorkspaceImagePermissions::new(self.handle.clone())
    }
    pub fn describe_workspace_images(&self) -> fluent_builders::DescribeWorkspaceImages<C, M, R> {
        fluent_builders::DescribeWorkspaceImages::new(self.handle.clone())
    }
    pub fn describe_workspaces(&self) -> fluent_builders::DescribeWorkspaces<C, M, R> {
        fluent_builders::DescribeWorkspaces::new(self.handle.clone())
    }
    pub fn describe_workspaces_connection_status(
        &self,
    ) -> fluent_builders::DescribeWorkspacesConnectionStatus<C, M, R> {
        fluent_builders::DescribeWorkspacesConnectionStatus::new(self.handle.clone())
    }
    pub fn describe_workspace_snapshots(
        &self,
    ) -> fluent_builders::DescribeWorkspaceSnapshots<C, M, R> {
        fluent_builders::DescribeWorkspaceSnapshots::new(self.handle.clone())
    }
    pub fn disassociate_connection_alias(
        &self,
    ) -> fluent_builders::DisassociateConnectionAlias<C, M, R> {
        fluent_builders::DisassociateConnectionAlias::new(self.handle.clone())
    }
    pub fn disassociate_ip_groups(&self) -> fluent_builders::DisassociateIpGroups<C, M, R> {
        fluent_builders::DisassociateIpGroups::new(self.handle.clone())
    }
    pub fn import_workspace_image(&self) -> fluent_builders::ImportWorkspaceImage<C, M, R> {
        fluent_builders::ImportWorkspaceImage::new(self.handle.clone())
    }
    pub fn list_available_management_cidr_ranges(
        &self,
    ) -> fluent_builders::ListAvailableManagementCidrRanges<C, M, R> {
        fluent_builders::ListAvailableManagementCidrRanges::new(self.handle.clone())
    }
    pub fn migrate_workspace(&self) -> fluent_builders::MigrateWorkspace<C, M, R> {
        fluent_builders::MigrateWorkspace::new(self.handle.clone())
    }
    pub fn modify_account(&self) -> fluent_builders::ModifyAccount<C, M, R> {
        fluent_builders::ModifyAccount::new(self.handle.clone())
    }
    pub fn modify_client_properties(&self) -> fluent_builders::ModifyClientProperties<C, M, R> {
        fluent_builders::ModifyClientProperties::new(self.handle.clone())
    }
    pub fn modify_selfservice_permissions(
        &self,
    ) -> fluent_builders::ModifySelfservicePermissions<C, M, R> {
        fluent_builders::ModifySelfservicePermissions::new(self.handle.clone())
    }
    pub fn modify_workspace_access_properties(
        &self,
    ) -> fluent_builders::ModifyWorkspaceAccessProperties<C, M, R> {
        fluent_builders::ModifyWorkspaceAccessProperties::new(self.handle.clone())
    }
    pub fn modify_workspace_creation_properties(
        &self,
    ) -> fluent_builders::ModifyWorkspaceCreationProperties<C, M, R> {
        fluent_builders::ModifyWorkspaceCreationProperties::new(self.handle.clone())
    }
    pub fn modify_workspace_properties(
        &self,
    ) -> fluent_builders::ModifyWorkspaceProperties<C, M, R> {
        fluent_builders::ModifyWorkspaceProperties::new(self.handle.clone())
    }
    pub fn modify_workspace_state(&self) -> fluent_builders::ModifyWorkspaceState<C, M, R> {
        fluent_builders::ModifyWorkspaceState::new(self.handle.clone())
    }
    pub fn reboot_workspaces(&self) -> fluent_builders::RebootWorkspaces<C, M, R> {
        fluent_builders::RebootWorkspaces::new(self.handle.clone())
    }
    pub fn rebuild_workspaces(&self) -> fluent_builders::RebuildWorkspaces<C, M, R> {
        fluent_builders::RebuildWorkspaces::new(self.handle.clone())
    }
    pub fn register_workspace_directory(
        &self,
    ) -> fluent_builders::RegisterWorkspaceDirectory<C, M, R> {
        fluent_builders::RegisterWorkspaceDirectory::new(self.handle.clone())
    }
    pub fn restore_workspace(&self) -> fluent_builders::RestoreWorkspace<C, M, R> {
        fluent_builders::RestoreWorkspace::new(self.handle.clone())
    }
    pub fn revoke_ip_rules(&self) -> fluent_builders::RevokeIpRules<C, M, R> {
        fluent_builders::RevokeIpRules::new(self.handle.clone())
    }
    pub fn start_workspaces(&self) -> fluent_builders::StartWorkspaces<C, M, R> {
        fluent_builders::StartWorkspaces::new(self.handle.clone())
    }
    pub fn stop_workspaces(&self) -> fluent_builders::StopWorkspaces<C, M, R> {
        fluent_builders::StopWorkspaces::new(self.handle.clone())
    }
    pub fn terminate_workspaces(&self) -> fluent_builders::TerminateWorkspaces<C, M, R> {
        fluent_builders::TerminateWorkspaces::new(self.handle.clone())
    }
    pub fn update_connection_alias_permission(
        &self,
    ) -> fluent_builders::UpdateConnectionAliasPermission<C, M, R> {
        fluent_builders::UpdateConnectionAliasPermission::new(self.handle.clone())
    }
    pub fn update_rules_of_ip_group(&self) -> fluent_builders::UpdateRulesOfIpGroup<C, M, R> {
        fluent_builders::UpdateRulesOfIpGroup::new(self.handle.clone())
    }
    pub fn update_workspace_bundle(&self) -> fluent_builders::UpdateWorkspaceBundle<C, M, R> {
        fluent_builders::UpdateWorkspaceBundle::new(self.handle.clone())
    }
    pub fn update_workspace_image_permission(
        &self,
    ) -> fluent_builders::UpdateWorkspaceImagePermission<C, M, R> {
        fluent_builders::UpdateWorkspaceImagePermission::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AssociateConnectionAlias<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_connection_alias_input::Builder,
    }
    impl<C, M, R> AssociateConnectionAlias<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateConnectionAliasOutput,
            smithy_http::result::SdkError<crate::error::AssociateConnectionAliasError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateConnectionAliasInputOperationOutputAlias,
                crate::output::AssociateConnectionAliasOutput,
                crate::error::AssociateConnectionAliasError,
                crate::input::AssociateConnectionAliasInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the connection alias.</p>
        pub fn alias_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_id(inp);
            self
        }
        pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_alias_id(input);
            self
        }
        /// <p>The identifier of the directory to associate the connection alias with.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateIpGroups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_ip_groups_input::Builder,
    }
    impl<C, M, R> AssociateIpGroups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateIpGroupsOutput,
            smithy_http::result::SdkError<crate::error::AssociateIpGroupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateIpGroupsInputOperationOutputAlias,
                crate::output::AssociateIpGroupsOutput,
                crate::error::AssociateIpGroupsError,
                crate::input::AssociateIpGroupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory.</p>
        pub fn directory_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_id(inp);
            self
        }
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_directory_id(input);
            self
        }
        /// Appends an item to `GroupIds`.
        ///
        /// To override the contents of this collection use [`set_group_ids`](Self::set_group_ids).
        /// <p>The identifiers of one or more IP access control groups.</p>
        pub fn group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_ids(inp);
            self
        }
        pub fn set_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_group_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AuthorizeIpRules<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::authorize_ip_rules_input::Builder,
    }
    impl<C, M, R> AuthorizeIpRules<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AuthorizeIpRulesOutput,
            smithy_http::result::SdkError<crate::error::AuthorizeIpRulesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AuthorizeIpRulesInputOperationOutputAlias,
                crate::output::AuthorizeIpRulesOutput,
                crate::error::AuthorizeIpRulesError,
                crate::input::AuthorizeIpRulesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the group.</p>
        pub fn group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_id(inp);
            self
        }
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_id(input);
            self
        }
        /// Appends an item to `UserRules`.
        ///
        /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
        /// <p>The rules to add to the group.</p>
        pub fn user_rules(mut self, inp: impl Into<crate::model::IpRuleItem>) -> Self {
            self.inner = self.inner.user_rules(inp);
            self
        }
        pub fn set_user_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpRuleItem>>,
        ) -> Self {
            self.inner = self.inner.set_user_rules(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CopyWorkspaceImage<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::copy_workspace_image_input::Builder,
    }
    impl<C, M, R> CopyWorkspaceImage<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CopyWorkspaceImageOutput,
            smithy_http::result::SdkError<crate::error::CopyWorkspaceImageError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CopyWorkspaceImageInputOperationOutputAlias,
                crate::output::CopyWorkspaceImageOutput,
                crate::error::CopyWorkspaceImageError,
                crate::input::CopyWorkspaceImageInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the image.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A description of the image.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The identifier of the source image.</p>
        pub fn source_image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_image_id(inp);
            self
        }
        pub fn set_source_image_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_image_id(input);
            self
        }
        /// <p>The identifier of the source Region.</p>
        pub fn source_region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_region(inp);
            self
        }
        pub fn set_source_region(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_region(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags for the image.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateConnectionAlias<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_connection_alias_input::Builder,
    }
    impl<C, M, R> CreateConnectionAlias<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConnectionAliasOutput,
            smithy_http::result::SdkError<crate::error::CreateConnectionAliasError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateConnectionAliasInputOperationOutputAlias,
                crate::output::CreateConnectionAliasOutput,
                crate::error::CreateConnectionAliasError,
                crate::input::CreateConnectionAliasInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A connection string in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
        /// <important>
        /// <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same
        /// connection string with a different account, even if you delete all instances of it from the original account. The
        /// connection string is globally reserved for your account.</p>
        /// </important>
        pub fn connection_string(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_string(inp);
            self
        }
        pub fn set_connection_string(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_string(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to associate with the connection alias.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateIpGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_ip_group_input::Builder,
    }
    impl<C, M, R> CreateIpGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateIpGroupOutput,
            smithy_http::result::SdkError<crate::error::CreateIpGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateIpGroupInputOperationOutputAlias,
                crate::output::CreateIpGroupOutput,
                crate::error::CreateIpGroupError,
                crate::input::CreateIpGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the group.</p>
        pub fn group_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(inp);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The description of the group.</p>
        pub fn group_desc(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_desc(inp);
            self
        }
        pub fn set_group_desc(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_desc(input);
            self
        }
        /// Appends an item to `UserRules`.
        ///
        /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
        /// <p>The rules to add to the group.</p>
        pub fn user_rules(mut self, inp: impl Into<crate::model::IpRuleItem>) -> Self {
            self.inner = self.inner.user_rules(inp);
            self
        }
        pub fn set_user_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpRuleItem>>,
        ) -> Self {
            self.inner = self.inner.set_user_rules(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateTags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_tags_input::Builder,
    }
    impl<C, M, R> CreateTags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateTagsOutput,
            smithy_http::result::SdkError<crate::error::CreateTagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateTagsInputOperationOutputAlias,
                crate::output::CreateTagsOutput,
                crate::error::CreateTagsError,
                crate::input::CreateTagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
        /// registered directories, images, custom bundles, IP access control groups, and connection aliases.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUpdatedWorkspaceImage<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_updated_workspace_image_input::Builder,
    }
    impl<C, M, R> CreateUpdatedWorkspaceImage<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUpdatedWorkspaceImageOutput,
            smithy_http::result::SdkError<crate::error::CreateUpdatedWorkspaceImageError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateUpdatedWorkspaceImageInputOperationOutputAlias,
                crate::output::CreateUpdatedWorkspaceImageOutput,
                crate::error::CreateUpdatedWorkspaceImageError,
                crate::input::CreateUpdatedWorkspaceImageInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the new updated WorkSpace image.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A description of whether updates for the WorkSpace image are available.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The identifier of the source WorkSpace image.</p>
        pub fn source_image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_image_id(inp);
            self
        }
        pub fn set_source_image_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_image_id(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags that you want to add to the new updated WorkSpace image.</p>
        /// <note>
        /// <p>To add tags at the same time when you're creating the updated image, you must create
        /// an IAM policy that grants your IAM user permissions to use <code>workspaces:CreateTags</code>. </p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateWorkspaceBundle<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_workspace_bundle_input::Builder,
    }
    impl<C, M, R> CreateWorkspaceBundle<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWorkspaceBundleOutput,
            smithy_http::result::SdkError<crate::error::CreateWorkspaceBundleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateWorkspaceBundleInputOperationOutputAlias,
                crate::output::CreateWorkspaceBundleOutput,
                crate::error::CreateWorkspaceBundleError,
                crate::input::CreateWorkspaceBundleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the bundle.</p>
        pub fn bundle_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_name(inp);
            self
        }
        pub fn set_bundle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bundle_name(input);
            self
        }
        /// <p>The description of the bundle.</p>
        pub fn bundle_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_description(inp);
            self
        }
        pub fn set_bundle_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_bundle_description(input);
            self
        }
        /// <p>The identifier of the image that is used to create the bundle.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(inp);
            self
        }
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
        /// <p>Describes the compute type of the bundle.</p>
        pub fn compute_type(mut self, inp: crate::model::ComputeType) -> Self {
            self.inner = self.inner.compute_type(inp);
            self
        }
        pub fn set_compute_type(
            mut self,
            input: std::option::Option<crate::model::ComputeType>,
        ) -> Self {
            self.inner = self.inner.set_compute_type(input);
            self
        }
        /// <p>Describes the user volume for a WorkSpace bundle.</p>
        pub fn user_storage(mut self, inp: crate::model::UserStorage) -> Self {
            self.inner = self.inner.user_storage(inp);
            self
        }
        pub fn set_user_storage(
            mut self,
            input: std::option::Option<crate::model::UserStorage>,
        ) -> Self {
            self.inner = self.inner.set_user_storage(input);
            self
        }
        /// <p>Describes the root volume for a WorkSpace bundle.</p>
        pub fn root_storage(mut self, inp: crate::model::RootStorage) -> Self {
            self.inner = self.inner.root_storage(inp);
            self
        }
        pub fn set_root_storage(
            mut self,
            input: std::option::Option<crate::model::RootStorage>,
        ) -> Self {
            self.inner = self.inner.set_root_storage(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags associated with the bundle.</p>
        /// <note>
        /// <p>To add tags at the same time when you're creating the bundle, you must create an IAM policy that
        /// grants your IAM user permissions to use <code>workspaces:CreateTags</code>. </p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_workspaces_input::Builder,
    }
    impl<C, M, R> CreateWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::CreateWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateWorkspacesInputOperationOutputAlias,
                crate::output::CreateWorkspacesOutput,
                crate::error::CreateWorkspacesError,
                crate::input::CreateWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `Workspaces`.
        ///
        /// To override the contents of this collection use [`set_workspaces`](Self::set_workspaces).
        /// <p>The WorkSpaces to create. You can specify up to 25 WorkSpaces.</p>
        pub fn workspaces(mut self, inp: impl Into<crate::model::WorkspaceRequest>) -> Self {
            self.inner = self.inner.workspaces(inp);
            self
        }
        pub fn set_workspaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkspaceRequest>>,
        ) -> Self {
            self.inner = self.inner.set_workspaces(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteConnectionAlias<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_connection_alias_input::Builder,
    }
    impl<C, M, R> DeleteConnectionAlias<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConnectionAliasOutput,
            smithy_http::result::SdkError<crate::error::DeleteConnectionAliasError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteConnectionAliasInputOperationOutputAlias,
                crate::output::DeleteConnectionAliasOutput,
                crate::error::DeleteConnectionAliasError,
                crate::input::DeleteConnectionAliasInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the connection alias to delete.</p>
        pub fn alias_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_id(inp);
            self
        }
        pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_alias_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteIpGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_ip_group_input::Builder,
    }
    impl<C, M, R> DeleteIpGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteIpGroupOutput,
            smithy_http::result::SdkError<crate::error::DeleteIpGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteIpGroupInputOperationOutputAlias,
                crate::output::DeleteIpGroupOutput,
                crate::error::DeleteIpGroupError,
                crate::input::DeleteIpGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the IP access control group.</p>
        pub fn group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_id(inp);
            self
        }
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteTags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_tags_input::Builder,
    }
    impl<C, M, R> DeleteTags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteTagsOutput,
            smithy_http::result::SdkError<crate::error::DeleteTagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteTagsInputOperationOutputAlias,
                crate::output::DeleteTagsOutput,
                crate::error::DeleteTagsError,
                crate::input::DeleteTagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
        /// registered directories, images, custom bundles, IP access control groups, and connection aliases.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>The tag keys.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteWorkspaceBundle<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_workspace_bundle_input::Builder,
    }
    impl<C, M, R> DeleteWorkspaceBundle<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWorkspaceBundleOutput,
            smithy_http::result::SdkError<crate::error::DeleteWorkspaceBundleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteWorkspaceBundleInputOperationOutputAlias,
                crate::output::DeleteWorkspaceBundleOutput,
                crate::error::DeleteWorkspaceBundleError,
                crate::input::DeleteWorkspaceBundleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the bundle.</p>
        pub fn bundle_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_id(inp);
            self
        }
        pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bundle_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteWorkspaceImage<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_workspace_image_input::Builder,
    }
    impl<C, M, R> DeleteWorkspaceImage<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWorkspaceImageOutput,
            smithy_http::result::SdkError<crate::error::DeleteWorkspaceImageError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteWorkspaceImageInputOperationOutputAlias,
                crate::output::DeleteWorkspaceImageOutput,
                crate::error::DeleteWorkspaceImageError,
                crate::input::DeleteWorkspaceImageInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the image.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(inp);
            self
        }
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterWorkspaceDirectory<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_workspace_directory_input::Builder,
    }
    impl<C, M, R> DeregisterWorkspaceDirectory<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterWorkspaceDirectoryOutput,
            smithy_http::result::SdkError<crate::error::DeregisterWorkspaceDirectoryError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterWorkspaceDirectoryInputOperationOutputAlias,
                crate::output::DeregisterWorkspaceDirectoryOutput,
                crate::error::DeregisterWorkspaceDirectoryError,
                crate::input::DeregisterWorkspaceDirectoryInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you must
        /// remove them before you deregister the directory, or you will receive an OperationNotSupportedException
        /// error.</p>
        pub fn directory_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_id(inp);
            self
        }
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_directory_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccount<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_account_input::Builder,
    }
    impl<C, M, R> DescribeAccount<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAccountOutput,
            smithy_http::result::SdkError<crate::error::DescribeAccountError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAccountInputOperationOutputAlias,
                crate::output::DescribeAccountOutput,
                crate::error::DescribeAccountError,
                crate::input::DescribeAccountInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccountModifications<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_account_modifications_input::Builder,
    }
    impl<C, M, R> DescribeAccountModifications<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAccountModificationsOutput,
            smithy_http::result::SdkError<crate::error::DescribeAccountModificationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAccountModificationsInputOperationOutputAlias,
                crate::output::DescribeAccountModificationsOutput,
                crate::error::DescribeAccountModificationsError,
                crate::input::DescribeAccountModificationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeClientProperties<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_client_properties_input::Builder,
    }
    impl<C, M, R> DescribeClientProperties<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClientPropertiesOutput,
            smithy_http::result::SdkError<crate::error::DescribeClientPropertiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeClientPropertiesInputOperationOutputAlias,
                crate::output::DescribeClientPropertiesOutput,
                crate::error::DescribeClientPropertiesError,
                crate::input::DescribeClientPropertiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `ResourceIds`.
        ///
        /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
        /// <p>The resource identifier, in the form of directory IDs.</p>
        pub fn resource_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_ids(inp);
            self
        }
        pub fn set_resource_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConnectionAliases<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_connection_aliases_input::Builder,
    }
    impl<C, M, R> DescribeConnectionAliases<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConnectionAliasesOutput,
            smithy_http::result::SdkError<crate::error::DescribeConnectionAliasesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeConnectionAliasesInputOperationOutputAlias,
                crate::output::DescribeConnectionAliasesOutput,
                crate::error::DescribeConnectionAliasesError,
                crate::input::DescribeConnectionAliasesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `AliasIds`.
        ///
        /// To override the contents of this collection use [`set_alias_ids`](Self::set_alias_ids).
        /// <p>The identifiers of the connection aliases to describe.</p>
        pub fn alias_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_ids(inp);
            self
        }
        pub fn set_alias_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_alias_ids(input);
            self
        }
        /// <p>The identifier of the directory associated with the connection alias.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The maximum number of connection aliases to return.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the
        /// next set of results. </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConnectionAliasPermissions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_connection_alias_permissions_input::Builder,
    }
    impl<C, M, R> DescribeConnectionAliasPermissions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConnectionAliasPermissionsOutput,
            smithy_http::result::SdkError<crate::error::DescribeConnectionAliasPermissionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeConnectionAliasPermissionsInputOperationOutputAlias,
                crate::output::DescribeConnectionAliasPermissionsOutput,
                crate::error::DescribeConnectionAliasPermissionsError,
                crate::input::DescribeConnectionAliasPermissionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the connection alias.</p>
        pub fn alias_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_id(inp);
            self
        }
        pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_alias_id(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the
        /// next set of results. </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeIpGroups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_ip_groups_input::Builder,
    }
    impl<C, M, R> DescribeIpGroups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeIpGroupsOutput,
            smithy_http::result::SdkError<crate::error::DescribeIpGroupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeIpGroupsInputOperationOutputAlias,
                crate::output::DescribeIpGroupsOutput,
                crate::error::DescribeIpGroupsError,
                crate::input::DescribeIpGroupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `GroupIds`.
        ///
        /// To override the contents of this collection use [`set_group_ids`](Self::set_group_ids).
        /// <p>The identifiers of one or more IP access control groups.</p>
        pub fn group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_ids(inp);
            self
        }
        pub fn set_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_group_ids(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of items to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_tags_input::Builder,
    }
    impl<C, M, R> DescribeTags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTagsOutput,
            smithy_http::result::SdkError<crate::error::DescribeTagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTagsInputOperationOutputAlias,
                crate::output::DescribeTagsOutput,
                crate::error::DescribeTagsError,
                crate::input::DescribeTagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
        /// registered directories, images, custom bundles, IP access control groups, and connection aliases.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaceBundles<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspace_bundles_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaceBundles<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspaceBundlesOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspaceBundlesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspaceBundlesInputOperationOutputAlias,
                crate::output::DescribeWorkspaceBundlesOutput,
                crate::error::DescribeWorkspaceBundlesError,
                crate::input::DescribeWorkspaceBundlesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `BundleIds`.
        ///
        /// To override the contents of this collection use [`set_bundle_ids`](Self::set_bundle_ids).
        /// <p>The identifiers of the bundles. You cannot combine this parameter with any other filter.</p>
        pub fn bundle_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_ids(inp);
            self
        }
        pub fn set_bundle_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_bundle_ids(input);
            self
        }
        /// <p>The owner of the bundles. You cannot combine this parameter with any other filter.</p>
        /// <p>To describe the bundles provided by Amazon Web Services, specify <code>AMAZON</code>.
        /// To describe the bundles that belong to your account, don't specify a value.</p>
        pub fn owner(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner(inp);
            self
        }
        pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_owner(input);
            self
        }
        /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaceDirectories<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspace_directories_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaceDirectories<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspaceDirectoriesOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspaceDirectoriesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspaceDirectoriesInputOperationOutputAlias,
                crate::output::DescribeWorkspaceDirectoriesOutput,
                crate::error::DescribeWorkspaceDirectoriesError,
                crate::input::DescribeWorkspaceDirectoriesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `DirectoryIds`.
        ///
        /// To override the contents of this collection use [`set_directory_ids`](Self::set_directory_ids).
        /// <p>The identifiers of the directories. If the value is null, all directories are
        /// retrieved.</p>
        pub fn directory_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_ids(inp);
            self
        }
        pub fn set_directory_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_directory_ids(input);
            self
        }
        /// <p>The maximum number of directories to return.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaceImagePermissions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspace_image_permissions_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaceImagePermissions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspaceImagePermissionsOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspaceImagePermissionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspaceImagePermissionsInputOperationOutputAlias,
                crate::output::DescribeWorkspaceImagePermissionsOutput,
                crate::error::DescribeWorkspaceImagePermissionsError,
                crate::input::DescribeWorkspaceImagePermissionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the image.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(inp);
            self
        }
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of items to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaceImages<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspace_images_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaceImages<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspaceImagesOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspaceImagesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspaceImagesInputOperationOutputAlias,
                crate::output::DescribeWorkspaceImagesOutput,
                crate::error::DescribeWorkspaceImagesError,
                crate::input::DescribeWorkspaceImagesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `ImageIds`.
        ///
        /// To override the contents of this collection use [`set_image_ids`](Self::set_image_ids).
        /// <p>The identifier of the image.</p>
        pub fn image_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_ids(inp);
            self
        }
        pub fn set_image_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_image_ids(input);
            self
        }
        /// <p>The type (owned or shared) of the image.</p>
        pub fn image_type(mut self, inp: crate::model::ImageType) -> Self {
            self.inner = self.inner.image_type(inp);
            self
        }
        pub fn set_image_type(
            mut self,
            input: std::option::Option<crate::model::ImageType>,
        ) -> Self {
            self.inner = self.inner.set_image_type(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of items to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspaces_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspacesInputOperationOutputAlias,
                crate::output::DescribeWorkspacesOutput,
                crate::error::DescribeWorkspacesError,
                crate::input::DescribeWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `WorkspaceIds`.
        ///
        /// To override the contents of this collection use [`set_workspace_ids`](Self::set_workspace_ids).
        /// <p>The identifiers of the WorkSpaces. You cannot combine this parameter with any other
        /// filter.</p>
        /// <p>Because the <a>CreateWorkspaces</a> operation is asynchronous, the identifier
        /// it returns is not immediately available. If you immediately call <a>DescribeWorkspaces</a> with this identifier, no information is returned.</p>
        pub fn workspace_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_ids(inp);
            self
        }
        pub fn set_workspace_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_workspace_ids(input);
            self
        }
        /// <p>The identifier of the directory. In addition, you can optionally specify a specific
        /// directory user (see <code>UserName</code>). You cannot combine this parameter with any
        /// other filter.</p>
        pub fn directory_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_id(inp);
            self
        }
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_directory_id(input);
            self
        }
        /// <p>The name of the directory user. You must specify this parameter with
        /// <code>DirectoryId</code>.</p>
        pub fn user_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_name(inp);
            self
        }
        pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_name(input);
            self
        }
        /// <p>The identifier of the bundle. All WorkSpaces that are created from this bundle are
        /// retrieved. You cannot combine this parameter with any other filter.</p>
        pub fn bundle_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_id(inp);
            self
        }
        pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bundle_id(input);
            self
        }
        /// <p>The maximum number of items to return.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspacesConnectionStatus<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspaces_connection_status_input::Builder,
    }
    impl<C, M, R> DescribeWorkspacesConnectionStatus<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspacesConnectionStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspacesConnectionStatusError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspacesConnectionStatusInputOperationOutputAlias,
                crate::output::DescribeWorkspacesConnectionStatusOutput,
                crate::error::DescribeWorkspacesConnectionStatusError,
                crate::input::DescribeWorkspacesConnectionStatusInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `WorkspaceIds`.
        ///
        /// To override the contents of this collection use [`set_workspace_ids`](Self::set_workspace_ids).
        /// <p>The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.</p>
        pub fn workspace_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_ids(inp);
            self
        }
        pub fn set_workspace_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_workspace_ids(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeWorkspaceSnapshots<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_workspace_snapshots_input::Builder,
    }
    impl<C, M, R> DescribeWorkspaceSnapshots<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeWorkspaceSnapshotsOutput,
            smithy_http::result::SdkError<crate::error::DescribeWorkspaceSnapshotsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeWorkspaceSnapshotsInputOperationOutputAlias,
                crate::output::DescribeWorkspaceSnapshotsOutput,
                crate::error::DescribeWorkspaceSnapshotsError,
                crate::input::DescribeWorkspaceSnapshotsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpace.</p>
        pub fn workspace_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_id(inp);
            self
        }
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_workspace_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateConnectionAlias<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_connection_alias_input::Builder,
    }
    impl<C, M, R> DisassociateConnectionAlias<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateConnectionAliasOutput,
            smithy_http::result::SdkError<crate::error::DisassociateConnectionAliasError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateConnectionAliasInputOperationOutputAlias,
                crate::output::DisassociateConnectionAliasOutput,
                crate::error::DisassociateConnectionAliasError,
                crate::input::DisassociateConnectionAliasInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the connection alias to disassociate.</p>
        pub fn alias_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_id(inp);
            self
        }
        pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_alias_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateIpGroups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_ip_groups_input::Builder,
    }
    impl<C, M, R> DisassociateIpGroups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateIpGroupsOutput,
            smithy_http::result::SdkError<crate::error::DisassociateIpGroupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateIpGroupsInputOperationOutputAlias,
                crate::output::DisassociateIpGroupsOutput,
                crate::error::DisassociateIpGroupsError,
                crate::input::DisassociateIpGroupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory.</p>
        pub fn directory_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_id(inp);
            self
        }
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_directory_id(input);
            self
        }
        /// Appends an item to `GroupIds`.
        ///
        /// To override the contents of this collection use [`set_group_ids`](Self::set_group_ids).
        /// <p>The identifiers of one or more IP access control groups.</p>
        pub fn group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_ids(inp);
            self
        }
        pub fn set_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_group_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ImportWorkspaceImage<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::import_workspace_image_input::Builder,
    }
    impl<C, M, R> ImportWorkspaceImage<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportWorkspaceImageOutput,
            smithy_http::result::SdkError<crate::error::ImportWorkspaceImageError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ImportWorkspaceImageInputOperationOutputAlias,
                crate::output::ImportWorkspaceImageOutput,
                crate::error::ImportWorkspaceImageError,
                crate::input::ImportWorkspaceImageInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the EC2 image.</p>
        pub fn ec2_image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ec2_image_id(inp);
            self
        }
        pub fn set_ec2_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ec2_image_id(input);
            self
        }
        /// <p>The ingestion process to be used when importing the image, depending on which protocol
        /// you want to use for your BYOL Workspace image, either PCoIP or WorkSpaces Streaming Protocol
        /// (WSP). To use WSP, specify a value that ends in <code>_WSP</code>. To use PCoIP, specify a value
        /// that does not end in <code>_WSP</code>. </p>
        /// <p>For non-GPU-enabled bundles (bundles other than Graphics or GraphicsPro), specify
        /// <code>BYOL_REGULAR</code> or <code>BYOL_REGULAR_WSP</code>, depending on the protocol.</p>
        pub fn ingestion_process(
            mut self,
            inp: crate::model::WorkspaceImageIngestionProcess,
        ) -> Self {
            self.inner = self.inner.ingestion_process(inp);
            self
        }
        pub fn set_ingestion_process(
            mut self,
            input: std::option::Option<crate::model::WorkspaceImageIngestionProcess>,
        ) -> Self {
            self.inner = self.inner.set_ingestion_process(input);
            self
        }
        /// <p>The name of the WorkSpace image.</p>
        pub fn image_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_name(inp);
            self
        }
        pub fn set_image_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_name(input);
            self
        }
        /// <p>The description of the WorkSpace image.</p>
        pub fn image_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_description(inp);
            self
        }
        pub fn set_image_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_image_description(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// Appends an item to `Applications`.
        ///
        /// To override the contents of this collection use [`set_applications`](Self::set_applications).
        /// <p>If specified, the version of Microsoft Office to subscribe to. Valid only for Windows 10
        /// BYOL images. For more information about subscribing to Office for BYOL images, see
        /// <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">
        /// Bring Your Own Windows Desktop Licenses</a>.</p>
        /// <note>
        /// <p>Although this parameter is an array, only one item is allowed at this time.</p>
        /// </note>
        pub fn applications(mut self, inp: impl Into<crate::model::Application>) -> Self {
            self.inner = self.inner.applications(inp);
            self
        }
        pub fn set_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Application>>,
        ) -> Self {
            self.inner = self.inner.set_applications(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListAvailableManagementCidrRanges<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_available_management_cidr_ranges_input::Builder,
    }
    impl<C, M, R> ListAvailableManagementCidrRanges<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAvailableManagementCidrRangesOutput,
            smithy_http::result::SdkError<crate::error::ListAvailableManagementCidrRangesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListAvailableManagementCidrRangesInputOperationOutputAlias,
                crate::output::ListAvailableManagementCidrRangesOutput,
                crate::error::ListAvailableManagementCidrRangesError,
                crate::input::ListAvailableManagementCidrRangesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IP address range to search. Specify an IP address range that is compatible with your
        /// network and in CIDR notation (that is, specify the range as an IPv4 CIDR block).</p>
        pub fn management_cidr_range_constraint(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.management_cidr_range_constraint(inp);
            self
        }
        pub fn set_management_cidr_range_constraint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_management_cidr_range_constraint(input);
            self
        }
        /// <p>The maximum number of items to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>If you received a <code>NextToken</code> from a previous call that was paginated,
        /// provide this token to receive the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct MigrateWorkspace<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::migrate_workspace_input::Builder,
    }
    impl<C, M, R> MigrateWorkspace<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::MigrateWorkspaceOutput,
            smithy_http::result::SdkError<crate::error::MigrateWorkspaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::MigrateWorkspaceInputOperationOutputAlias,
                crate::output::MigrateWorkspaceOutput,
                crate::error::MigrateWorkspaceError,
                crate::input::MigrateWorkspaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpace to migrate from.</p>
        pub fn source_workspace_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_workspace_id(inp);
            self
        }
        pub fn set_source_workspace_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_workspace_id(input);
            self
        }
        /// <p>The identifier of the target bundle type to migrate the WorkSpace to.</p>
        pub fn bundle_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_id(inp);
            self
        }
        pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bundle_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyAccount<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_account_input::Builder,
    }
    impl<C, M, R> ModifyAccount<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyAccountOutput,
            smithy_http::result::SdkError<crate::error::ModifyAccountError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyAccountInputOperationOutputAlias,
                crate::output::ModifyAccountOutput,
                crate::error::ModifyAccountError,
                crate::input::ModifyAccountInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The status of BYOL.</p>
        pub fn dedicated_tenancy_support(
            mut self,
            inp: crate::model::DedicatedTenancySupportEnum,
        ) -> Self {
            self.inner = self.inner.dedicated_tenancy_support(inp);
            self
        }
        pub fn set_dedicated_tenancy_support(
            mut self,
            input: std::option::Option<crate::model::DedicatedTenancySupportEnum>,
        ) -> Self {
            self.inner = self.inner.set_dedicated_tenancy_support(input);
            self
        }
        /// <p>The IP address range, specified as an IPv4 CIDR block, for the management network
        /// interface. Specify an IP address range that is compatible with your network and in CIDR
        /// notation (that is, specify the range as an IPv4 CIDR block). The CIDR block size must be
        /// /16 (for example, 203.0.113.25/16). It must also be specified as available by the
        /// <code>ListAvailableManagementCidrRanges</code> operation.</p>
        pub fn dedicated_tenancy_management_cidr_range(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.dedicated_tenancy_management_cidr_range(inp);
            self
        }
        pub fn set_dedicated_tenancy_management_cidr_range(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self
                .inner
                .set_dedicated_tenancy_management_cidr_range(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyClientProperties<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_client_properties_input::Builder,
    }
    impl<C, M, R> ModifyClientProperties<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyClientPropertiesOutput,
            smithy_http::result::SdkError<crate::error::ModifyClientPropertiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyClientPropertiesInputOperationOutputAlias,
                crate::output::ModifyClientPropertiesOutput,
                crate::error::ModifyClientPropertiesError,
                crate::input::ModifyClientPropertiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The resource identifiers, in the form of directory IDs.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>Information about the Amazon WorkSpaces client.</p>
        pub fn client_properties(mut self, inp: crate::model::ClientProperties) -> Self {
            self.inner = self.inner.client_properties(inp);
            self
        }
        pub fn set_client_properties(
            mut self,
            input: std::option::Option<crate::model::ClientProperties>,
        ) -> Self {
            self.inner = self.inner.set_client_properties(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifySelfservicePermissions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_selfservice_permissions_input::Builder,
    }
    impl<C, M, R> ModifySelfservicePermissions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifySelfservicePermissionsOutput,
            smithy_http::result::SdkError<crate::error::ModifySelfservicePermissionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifySelfservicePermissionsInputOperationOutputAlias,
                crate::output::ModifySelfservicePermissionsOutput,
                crate::error::ModifySelfservicePermissionsError,
                crate::input::ModifySelfservicePermissionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The permissions to enable or disable self-service capabilities.</p>
        pub fn selfservice_permissions(
            mut self,
            inp: crate::model::SelfservicePermissions,
        ) -> Self {
            self.inner = self.inner.selfservice_permissions(inp);
            self
        }
        pub fn set_selfservice_permissions(
            mut self,
            input: std::option::Option<crate::model::SelfservicePermissions>,
        ) -> Self {
            self.inner = self.inner.set_selfservice_permissions(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyWorkspaceAccessProperties<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_workspace_access_properties_input::Builder,
    }
    impl<C, M, R> ModifyWorkspaceAccessProperties<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyWorkspaceAccessPropertiesOutput,
            smithy_http::result::SdkError<crate::error::ModifyWorkspaceAccessPropertiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyWorkspaceAccessPropertiesInputOperationOutputAlias,
                crate::output::ModifyWorkspaceAccessPropertiesOutput,
                crate::error::ModifyWorkspaceAccessPropertiesError,
                crate::input::ModifyWorkspaceAccessPropertiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The device types and operating systems to enable or disable for access.</p>
        pub fn workspace_access_properties(
            mut self,
            inp: crate::model::WorkspaceAccessProperties,
        ) -> Self {
            self.inner = self.inner.workspace_access_properties(inp);
            self
        }
        pub fn set_workspace_access_properties(
            mut self,
            input: std::option::Option<crate::model::WorkspaceAccessProperties>,
        ) -> Self {
            self.inner = self.inner.set_workspace_access_properties(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyWorkspaceCreationProperties<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_workspace_creation_properties_input::Builder,
    }
    impl<C, M, R> ModifyWorkspaceCreationProperties<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyWorkspaceCreationPropertiesOutput,
            smithy_http::result::SdkError<crate::error::ModifyWorkspaceCreationPropertiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyWorkspaceCreationPropertiesInputOperationOutputAlias,
                crate::output::ModifyWorkspaceCreationPropertiesOutput,
                crate::error::ModifyWorkspaceCreationPropertiesError,
                crate::input::ModifyWorkspaceCreationPropertiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The default properties for creating WorkSpaces.</p>
        pub fn workspace_creation_properties(
            mut self,
            inp: crate::model::WorkspaceCreationProperties,
        ) -> Self {
            self.inner = self.inner.workspace_creation_properties(inp);
            self
        }
        pub fn set_workspace_creation_properties(
            mut self,
            input: std::option::Option<crate::model::WorkspaceCreationProperties>,
        ) -> Self {
            self.inner = self.inner.set_workspace_creation_properties(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyWorkspaceProperties<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_workspace_properties_input::Builder,
    }
    impl<C, M, R> ModifyWorkspaceProperties<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyWorkspacePropertiesOutput,
            smithy_http::result::SdkError<crate::error::ModifyWorkspacePropertiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyWorkspacePropertiesInputOperationOutputAlias,
                crate::output::ModifyWorkspacePropertiesOutput,
                crate::error::ModifyWorkspacePropertiesError,
                crate::input::ModifyWorkspacePropertiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpace.</p>
        pub fn workspace_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_id(inp);
            self
        }
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_workspace_id(input);
            self
        }
        /// <p>The properties of the WorkSpace.</p>
        pub fn workspace_properties(mut self, inp: crate::model::WorkspaceProperties) -> Self {
            self.inner = self.inner.workspace_properties(inp);
            self
        }
        pub fn set_workspace_properties(
            mut self,
            input: std::option::Option<crate::model::WorkspaceProperties>,
        ) -> Self {
            self.inner = self.inner.set_workspace_properties(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ModifyWorkspaceState<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_workspace_state_input::Builder,
    }
    impl<C, M, R> ModifyWorkspaceState<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyWorkspaceStateOutput,
            smithy_http::result::SdkError<crate::error::ModifyWorkspaceStateError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyWorkspaceStateInputOperationOutputAlias,
                crate::output::ModifyWorkspaceStateOutput,
                crate::error::ModifyWorkspaceStateError,
                crate::input::ModifyWorkspaceStateInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpace.</p>
        pub fn workspace_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_id(inp);
            self
        }
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_workspace_id(input);
            self
        }
        /// <p>The WorkSpace state.</p>
        pub fn workspace_state(mut self, inp: crate::model::TargetWorkspaceState) -> Self {
            self.inner = self.inner.workspace_state(inp);
            self
        }
        pub fn set_workspace_state(
            mut self,
            input: std::option::Option<crate::model::TargetWorkspaceState>,
        ) -> Self {
            self.inner = self.inner.set_workspace_state(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RebootWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::reboot_workspaces_input::Builder,
    }
    impl<C, M, R> RebootWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RebootWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::RebootWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RebootWorkspacesInputOperationOutputAlias,
                crate::output::RebootWorkspacesOutput,
                crate::error::RebootWorkspacesError,
                crate::input::RebootWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `RebootWorkspaceRequests`.
        ///
        /// To override the contents of this collection use [`set_reboot_workspace_requests`](Self::set_reboot_workspace_requests).
        /// <p>The WorkSpaces to reboot. You can specify up to 25 WorkSpaces.</p>
        pub fn reboot_workspace_requests(
            mut self,
            inp: impl Into<crate::model::RebootRequest>,
        ) -> Self {
            self.inner = self.inner.reboot_workspace_requests(inp);
            self
        }
        pub fn set_reboot_workspace_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RebootRequest>>,
        ) -> Self {
            self.inner = self.inner.set_reboot_workspace_requests(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RebuildWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::rebuild_workspaces_input::Builder,
    }
    impl<C, M, R> RebuildWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RebuildWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::RebuildWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RebuildWorkspacesInputOperationOutputAlias,
                crate::output::RebuildWorkspacesOutput,
                crate::error::RebuildWorkspacesError,
                crate::input::RebuildWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `RebuildWorkspaceRequests`.
        ///
        /// To override the contents of this collection use [`set_rebuild_workspace_requests`](Self::set_rebuild_workspace_requests).
        /// <p>The WorkSpace to rebuild. You can specify a single WorkSpace.</p>
        pub fn rebuild_workspace_requests(
            mut self,
            inp: impl Into<crate::model::RebuildRequest>,
        ) -> Self {
            self.inner = self.inner.rebuild_workspace_requests(inp);
            self
        }
        pub fn set_rebuild_workspace_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RebuildRequest>>,
        ) -> Self {
            self.inner = self.inner.set_rebuild_workspace_requests(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterWorkspaceDirectory<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_workspace_directory_input::Builder,
    }
    impl<C, M, R> RegisterWorkspaceDirectory<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterWorkspaceDirectoryOutput,
            smithy_http::result::SdkError<crate::error::RegisterWorkspaceDirectoryError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterWorkspaceDirectoryInputOperationOutputAlias,
                crate::output::RegisterWorkspaceDirectoryOutput,
                crate::error::RegisterWorkspaceDirectoryError,
                crate::input::RegisterWorkspaceDirectoryInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the directory. You cannot register a directory if it does not have a status
        /// of Active. If the directory does not have a status of Active, you will receive an
        /// InvalidResourceStateException error. If you have already registered the maximum number of directories
        /// that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error.
        /// Deregister directories that you are not using for WorkSpaces, and try again.</p>
        pub fn directory_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.directory_id(inp);
            self
        }
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_directory_id(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets
        /// are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these
        /// conditions are not met, you will receive an OperationNotSupportedException error.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>Indicates whether Amazon WorkDocs is enabled or disabled. If you have enabled this parameter and
        /// WorkDocs is not available in the Region, you will receive an OperationNotSupportedException error. Set
        /// <code>EnableWorkDocs</code> to disabled, and try again.</p>
        pub fn enable_work_docs(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_work_docs(inp);
            self
        }
        pub fn set_enable_work_docs(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_work_docs(input);
            self
        }
        /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
        pub fn enable_self_service(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_self_service(inp);
            self
        }
        pub fn set_enable_self_service(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_self_service(input);
            self
        }
        /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own
        /// License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be
        /// enabled for BYOL. If your account has not been enabled for BYOL, you will receive an
        /// InvalidParameterValuesException error. For more information about BYOL images, see
        /// <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
        pub fn tenancy(mut self, inp: crate::model::Tenancy) -> Self {
            self.inner = self.inner.tenancy(inp);
            self
        }
        pub fn set_tenancy(mut self, input: std::option::Option<crate::model::Tenancy>) -> Self {
            self.inner = self.inner.set_tenancy(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags associated with the directory.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RestoreWorkspace<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::restore_workspace_input::Builder,
    }
    impl<C, M, R> RestoreWorkspace<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RestoreWorkspaceOutput,
            smithy_http::result::SdkError<crate::error::RestoreWorkspaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RestoreWorkspaceInputOperationOutputAlias,
                crate::output::RestoreWorkspaceOutput,
                crate::error::RestoreWorkspaceError,
                crate::input::RestoreWorkspaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the WorkSpace.</p>
        pub fn workspace_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_id(inp);
            self
        }
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_workspace_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RevokeIpRules<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::revoke_ip_rules_input::Builder,
    }
    impl<C, M, R> RevokeIpRules<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RevokeIpRulesOutput,
            smithy_http::result::SdkError<crate::error::RevokeIpRulesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RevokeIpRulesInputOperationOutputAlias,
                crate::output::RevokeIpRulesOutput,
                crate::error::RevokeIpRulesError,
                crate::input::RevokeIpRulesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the group.</p>
        pub fn group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_id(inp);
            self
        }
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_id(input);
            self
        }
        /// Appends an item to `UserRules`.
        ///
        /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
        /// <p>The rules to remove from the group.</p>
        pub fn user_rules(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_rules(inp);
            self
        }
        pub fn set_user_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_user_rules(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_workspaces_input::Builder,
    }
    impl<C, M, R> StartWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::StartWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartWorkspacesInputOperationOutputAlias,
                crate::output::StartWorkspacesOutput,
                crate::error::StartWorkspacesError,
                crate::input::StartWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `StartWorkspaceRequests`.
        ///
        /// To override the contents of this collection use [`set_start_workspace_requests`](Self::set_start_workspace_requests).
        /// <p>The WorkSpaces to start. You can specify up to 25 WorkSpaces.</p>
        pub fn start_workspace_requests(
            mut self,
            inp: impl Into<crate::model::StartRequest>,
        ) -> Self {
            self.inner = self.inner.start_workspace_requests(inp);
            self
        }
        pub fn set_start_workspace_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StartRequest>>,
        ) -> Self {
            self.inner = self.inner.set_start_workspace_requests(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_workspaces_input::Builder,
    }
    impl<C, M, R> StopWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::StopWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopWorkspacesInputOperationOutputAlias,
                crate::output::StopWorkspacesOutput,
                crate::error::StopWorkspacesError,
                crate::input::StopWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `StopWorkspaceRequests`.
        ///
        /// To override the contents of this collection use [`set_stop_workspace_requests`](Self::set_stop_workspace_requests).
        /// <p>The WorkSpaces to stop. You can specify up to 25 WorkSpaces.</p>
        pub fn stop_workspace_requests(
            mut self,
            inp: impl Into<crate::model::StopRequest>,
        ) -> Self {
            self.inner = self.inner.stop_workspace_requests(inp);
            self
        }
        pub fn set_stop_workspace_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StopRequest>>,
        ) -> Self {
            self.inner = self.inner.set_stop_workspace_requests(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TerminateWorkspaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::terminate_workspaces_input::Builder,
    }
    impl<C, M, R> TerminateWorkspaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TerminateWorkspacesOutput,
            smithy_http::result::SdkError<crate::error::TerminateWorkspacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TerminateWorkspacesInputOperationOutputAlias,
                crate::output::TerminateWorkspacesOutput,
                crate::error::TerminateWorkspacesError,
                crate::input::TerminateWorkspacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `TerminateWorkspaceRequests`.
        ///
        /// To override the contents of this collection use [`set_terminate_workspace_requests`](Self::set_terminate_workspace_requests).
        /// <p>The WorkSpaces to terminate. You can specify up to 25 WorkSpaces.</p>
        pub fn terminate_workspace_requests(
            mut self,
            inp: impl Into<crate::model::TerminateRequest>,
        ) -> Self {
            self.inner = self.inner.terminate_workspace_requests(inp);
            self
        }
        pub fn set_terminate_workspace_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TerminateRequest>>,
        ) -> Self {
            self.inner = self.inner.set_terminate_workspace_requests(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateConnectionAliasPermission<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_connection_alias_permission_input::Builder,
    }
    impl<C, M, R> UpdateConnectionAliasPermission<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConnectionAliasPermissionOutput,
            smithy_http::result::SdkError<crate::error::UpdateConnectionAliasPermissionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateConnectionAliasPermissionInputOperationOutputAlias,
                crate::output::UpdateConnectionAliasPermissionOutput,
                crate::error::UpdateConnectionAliasPermissionError,
                crate::input::UpdateConnectionAliasPermissionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the connection alias that you want to update permissions for.</p>
        pub fn alias_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.alias_id(inp);
            self
        }
        pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_alias_id(input);
            self
        }
        /// <p>Indicates whether to share or unshare the connection alias with the specified Amazon Web Services account.</p>
        pub fn connection_alias_permission(
            mut self,
            inp: crate::model::ConnectionAliasPermission,
        ) -> Self {
            self.inner = self.inner.connection_alias_permission(inp);
            self
        }
        pub fn set_connection_alias_permission(
            mut self,
            input: std::option::Option<crate::model::ConnectionAliasPermission>,
        ) -> Self {
            self.inner = self.inner.set_connection_alias_permission(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRulesOfIpGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_rules_of_ip_group_input::Builder,
    }
    impl<C, M, R> UpdateRulesOfIpGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRulesOfIpGroupOutput,
            smithy_http::result::SdkError<crate::error::UpdateRulesOfIpGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRulesOfIpGroupInputOperationOutputAlias,
                crate::output::UpdateRulesOfIpGroupOutput,
                crate::error::UpdateRulesOfIpGroupError,
                crate::input::UpdateRulesOfIpGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the group.</p>
        pub fn group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_id(inp);
            self
        }
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_id(input);
            self
        }
        /// Appends an item to `UserRules`.
        ///
        /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
        /// <p>One or more rules.</p>
        pub fn user_rules(mut self, inp: impl Into<crate::model::IpRuleItem>) -> Self {
            self.inner = self.inner.user_rules(inp);
            self
        }
        pub fn set_user_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpRuleItem>>,
        ) -> Self {
            self.inner = self.inner.set_user_rules(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateWorkspaceBundle<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_workspace_bundle_input::Builder,
    }
    impl<C, M, R> UpdateWorkspaceBundle<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateWorkspaceBundleOutput,
            smithy_http::result::SdkError<crate::error::UpdateWorkspaceBundleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateWorkspaceBundleInputOperationOutputAlias,
                crate::output::UpdateWorkspaceBundleOutput,
                crate::error::UpdateWorkspaceBundleError,
                crate::input::UpdateWorkspaceBundleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the bundle.</p>
        pub fn bundle_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bundle_id(inp);
            self
        }
        pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bundle_id(input);
            self
        }
        /// <p>The identifier of the image.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(inp);
            self
        }
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateWorkspaceImagePermission<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_workspace_image_permission_input::Builder,
    }
    impl<C, M, R> UpdateWorkspaceImagePermission<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateWorkspaceImagePermissionOutput,
            smithy_http::result::SdkError<crate::error::UpdateWorkspaceImagePermissionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateWorkspaceImagePermissionInputOperationOutputAlias,
                crate::output::UpdateWorkspaceImagePermissionOutput,
                crate::error::UpdateWorkspaceImagePermissionError,
                crate::input::UpdateWorkspaceImagePermissionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the image.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.image_id(inp);
            self
        }
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_image_id(input);
            self
        }
        /// <p>The permission to copy the image. This permission can be revoked only after an image
        /// has been shared.</p>
        pub fn allow_copy_image(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_copy_image(inp);
            self
        }
        pub fn set_allow_copy_image(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_copy_image(input);
            self
        }
        /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p>
        /// <important>
        /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
        /// </important>
        pub fn shared_account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.shared_account_id(inp);
            self
        }
        pub fn set_shared_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_shared_account_id(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
