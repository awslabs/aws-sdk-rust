// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRulesOfIpGroupInput {
    /// <p>The identifier of the group.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more rules.</p>
    pub user_rules: ::std::option::Option<::std::vec::Vec<crate::types::IpRuleItem>>,
}
impl UpdateRulesOfIpGroupInput {
    /// <p>The identifier of the group.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>One or more rules.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_rules.is_none()`.
    pub fn user_rules(&self) -> &[crate::types::IpRuleItem] {
        self.user_rules.as_deref().unwrap_or_default()
    }
}
impl UpdateRulesOfIpGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateRulesOfIpGroupInput`](crate::operation::update_rules_of_ip_group::UpdateRulesOfIpGroupInput).
    pub fn builder() -> crate::operation::update_rules_of_ip_group::builders::UpdateRulesOfIpGroupInputBuilder {
        crate::operation::update_rules_of_ip_group::builders::UpdateRulesOfIpGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateRulesOfIpGroupInput`](crate::operation::update_rules_of_ip_group::UpdateRulesOfIpGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRulesOfIpGroupInputBuilder {
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_rules: ::std::option::Option<::std::vec::Vec<crate::types::IpRuleItem>>,
}
impl UpdateRulesOfIpGroupInputBuilder {
    /// <p>The identifier of the group.</p>
    /// This field is required.
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the group.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The identifier of the group.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// Appends an item to `user_rules`.
    ///
    /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
    ///
    /// <p>One or more rules.</p>
    pub fn user_rules(mut self, input: crate::types::IpRuleItem) -> Self {
        let mut v = self.user_rules.unwrap_or_default();
        v.push(input);
        self.user_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more rules.</p>
    pub fn set_user_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpRuleItem>>) -> Self {
        self.user_rules = input;
        self
    }
    /// <p>One or more rules.</p>
    pub fn get_user_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpRuleItem>> {
        &self.user_rules
    }
    /// Consumes the builder and constructs a [`UpdateRulesOfIpGroupInput`](crate::operation::update_rules_of_ip_group::UpdateRulesOfIpGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_rules_of_ip_group::UpdateRulesOfIpGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_rules_of_ip_group::UpdateRulesOfIpGroupInput {
            group_id: self.group_id,
            user_rules: self.user_rules,
        })
    }
}
