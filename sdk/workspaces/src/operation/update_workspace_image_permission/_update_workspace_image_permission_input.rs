// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkspaceImagePermissionInput {
    /// <p>The identifier of the image.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The permission to copy the image. This permission can be revoked only after an image has been shared.</p>
    pub allow_copy_image: ::std::option::Option<bool>,
    /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p> <important>
    /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
    /// </important>
    pub shared_account_id: ::std::option::Option<::std::string::String>,
}
impl UpdateWorkspaceImagePermissionInput {
    /// <p>The identifier of the image.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The permission to copy the image. This permission can be revoked only after an image has been shared.</p>
    pub fn allow_copy_image(&self) -> ::std::option::Option<bool> {
        self.allow_copy_image
    }
    /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p> <important>
    /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
    /// </important>
    pub fn shared_account_id(&self) -> ::std::option::Option<&str> {
        self.shared_account_id.as_deref()
    }
}
impl UpdateWorkspaceImagePermissionInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceImagePermissionInput`](crate::operation::update_workspace_image_permission::UpdateWorkspaceImagePermissionInput).
    pub fn builder() -> crate::operation::update_workspace_image_permission::builders::UpdateWorkspaceImagePermissionInputBuilder {
        crate::operation::update_workspace_image_permission::builders::UpdateWorkspaceImagePermissionInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkspaceImagePermissionInput`](crate::operation::update_workspace_image_permission::UpdateWorkspaceImagePermissionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWorkspaceImagePermissionInputBuilder {
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) allow_copy_image: ::std::option::Option<bool>,
    pub(crate) shared_account_id: ::std::option::Option<::std::string::String>,
}
impl UpdateWorkspaceImagePermissionInputBuilder {
    /// <p>The identifier of the image.</p>
    /// This field is required.
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The identifier of the image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The permission to copy the image. This permission can be revoked only after an image has been shared.</p>
    /// This field is required.
    pub fn allow_copy_image(mut self, input: bool) -> Self {
        self.allow_copy_image = ::std::option::Option::Some(input);
        self
    }
    /// <p>The permission to copy the image. This permission can be revoked only after an image has been shared.</p>
    pub fn set_allow_copy_image(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_copy_image = input;
        self
    }
    /// <p>The permission to copy the image. This permission can be revoked only after an image has been shared.</p>
    pub fn get_allow_copy_image(&self) -> &::std::option::Option<bool> {
        &self.allow_copy_image
    }
    /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p> <important>
    /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
    /// </important>
    /// This field is required.
    pub fn shared_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shared_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p> <important>
    /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
    /// </important>
    pub fn set_shared_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shared_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account to share or unshare the image with.</p> <important>
    /// <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
    /// </important>
    pub fn get_shared_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.shared_account_id
    }
    /// Consumes the builder and constructs a [`UpdateWorkspaceImagePermissionInput`](crate::operation::update_workspace_image_permission::UpdateWorkspaceImagePermissionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_workspace_image_permission::UpdateWorkspaceImagePermissionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_workspace_image_permission::UpdateWorkspaceImagePermissionInput {
            image_id: self.image_id,
            allow_copy_image: self.allow_copy_image,
            shared_account_id: self.shared_account_id,
        })
    }
}
