// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterWorkspaceDirectoryInput {
    /// <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
}
impl DeregisterWorkspaceDirectoryInput {
    /// <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl DeregisterWorkspaceDirectoryInput {
    /// Creates a new builder-style object to manufacture [`DeregisterWorkspaceDirectoryInput`](crate::operation::deregister_workspace_directory::DeregisterWorkspaceDirectoryInput).
    pub fn builder() -> crate::operation::deregister_workspace_directory::builders::DeregisterWorkspaceDirectoryInputBuilder{
        crate::operation::deregister_workspace_directory::builders::DeregisterWorkspaceDirectoryInputBuilder::default()
    }
}

/// A builder for [`DeregisterWorkspaceDirectoryInput`](crate::operation::deregister_workspace_directory::DeregisterWorkspaceDirectoryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeregisterWorkspaceDirectoryInputBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
}
impl DeregisterWorkspaceDirectoryInputBuilder {
    /// <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeregisterWorkspaceDirectoryInput`](crate::operation::deregister_workspace_directory::DeregisterWorkspaceDirectoryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::deregister_workspace_directory::DeregisterWorkspaceDirectoryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::deregister_workspace_directory::DeregisterWorkspaceDirectoryInput {
                directory_id: self.directory_id,
            },
        )
    }
}
