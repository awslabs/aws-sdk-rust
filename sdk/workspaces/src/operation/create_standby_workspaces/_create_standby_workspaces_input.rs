// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStandbyWorkspacesInput {
    /// <p>The Region of the primary WorkSpace.</p>
    pub primary_region: ::std::option::Option<::std::string::String>,
    /// <p>Information about the standby WorkSpace to be created.</p>
    pub standby_workspaces: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspace>>,
}
impl CreateStandbyWorkspacesInput {
    /// <p>The Region of the primary WorkSpace.</p>
    pub fn primary_region(&self) -> ::std::option::Option<&str> {
        self.primary_region.as_deref()
    }
    /// <p>Information about the standby WorkSpace to be created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.standby_workspaces.is_none()`.
    pub fn standby_workspaces(&self) -> &[crate::types::StandbyWorkspace] {
        self.standby_workspaces.as_deref().unwrap_or_default()
    }
}
impl CreateStandbyWorkspacesInput {
    /// Creates a new builder-style object to manufacture [`CreateStandbyWorkspacesInput`](crate::operation::create_standby_workspaces::CreateStandbyWorkspacesInput).
    pub fn builder() -> crate::operation::create_standby_workspaces::builders::CreateStandbyWorkspacesInputBuilder {
        crate::operation::create_standby_workspaces::builders::CreateStandbyWorkspacesInputBuilder::default()
    }
}

/// A builder for [`CreateStandbyWorkspacesInput`](crate::operation::create_standby_workspaces::CreateStandbyWorkspacesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateStandbyWorkspacesInputBuilder {
    pub(crate) primary_region: ::std::option::Option<::std::string::String>,
    pub(crate) standby_workspaces: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspace>>,
}
impl CreateStandbyWorkspacesInputBuilder {
    /// <p>The Region of the primary WorkSpace.</p>
    /// This field is required.
    pub fn primary_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region of the primary WorkSpace.</p>
    pub fn set_primary_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_region = input;
        self
    }
    /// <p>The Region of the primary WorkSpace.</p>
    pub fn get_primary_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_region
    }
    /// Appends an item to `standby_workspaces`.
    ///
    /// To override the contents of this collection use [`set_standby_workspaces`](Self::set_standby_workspaces).
    ///
    /// <p>Information about the standby WorkSpace to be created.</p>
    pub fn standby_workspaces(mut self, input: crate::types::StandbyWorkspace) -> Self {
        let mut v = self.standby_workspaces.unwrap_or_default();
        v.push(input);
        self.standby_workspaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the standby WorkSpace to be created.</p>
    pub fn set_standby_workspaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspace>>) -> Self {
        self.standby_workspaces = input;
        self
    }
    /// <p>Information about the standby WorkSpace to be created.</p>
    pub fn get_standby_workspaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspace>> {
        &self.standby_workspaces
    }
    /// Consumes the builder and constructs a [`CreateStandbyWorkspacesInput`](crate::operation::create_standby_workspaces::CreateStandbyWorkspacesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_standby_workspaces::CreateStandbyWorkspacesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_standby_workspaces::CreateStandbyWorkspacesInput {
            primary_region: self.primary_region,
            standby_workspaces: self.standby_workspaces,
        })
    }
}
