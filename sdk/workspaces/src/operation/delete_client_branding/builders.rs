// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_client_branding::_delete_client_branding_output::DeleteClientBrandingOutputBuilder;

pub use crate::operation::delete_client_branding::_delete_client_branding_input::DeleteClientBrandingInputBuilder;

impl DeleteClientBrandingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_client_branding::DeleteClientBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_client_branding::DeleteClientBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_client_branding();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteClientBranding`.
///
/// <p>Deletes customized client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.</p>
/// <p>After you delete your customized client branding, your login portal reverts to the default client branding.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteClientBrandingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_client_branding::DeleteClientBrandingOutput,
        crate::operation::delete_client_branding::DeleteClientBrandingError,
    > for DeleteClientBrandingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_client_branding::DeleteClientBrandingOutput,
            crate::operation::delete_client_branding::DeleteClientBrandingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteClientBrandingFluentBuilder {
    /// Creates a new `DeleteClientBranding`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteClientBranding as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_client_branding::DeleteClientBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_client_branding::DeleteClientBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_client_branding::DeleteClientBranding::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_client_branding::DeleteClientBranding::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_client_branding::DeleteClientBrandingOutput,
        crate::operation::delete_client_branding::DeleteClientBrandingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_id(input.into());
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_id(input);
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_id()
    }
    /// Appends an item to `Platforms`.
    ///
    /// To override the contents of this collection use [`set_platforms`](Self::set_platforms).
    ///
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn platforms(mut self, input: crate::types::ClientDeviceType) -> Self {
        self.inner = self.inner.platforms(input);
        self
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn set_platforms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>>) -> Self {
        self.inner = self.inner.set_platforms(input);
        self
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn get_platforms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>> {
        self.inner.get_platforms()
    }
}
