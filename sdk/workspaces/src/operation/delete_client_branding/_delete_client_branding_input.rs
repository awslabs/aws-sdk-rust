// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteClientBrandingInput {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The device type for which you want to delete client branding.</p>
    pub platforms: ::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>>,
}
impl DeleteClientBrandingInput {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The device type for which you want to delete client branding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.platforms.is_none()`.
    pub fn platforms(&self) -> &[crate::types::ClientDeviceType] {
        self.platforms.as_deref().unwrap_or_default()
    }
}
impl DeleteClientBrandingInput {
    /// Creates a new builder-style object to manufacture [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
    pub fn builder() -> crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder {
        crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder::default()
    }
}

/// A builder for [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteClientBrandingInputBuilder {
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) platforms: ::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>>,
}
impl DeleteClientBrandingInputBuilder {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// Appends an item to `platforms`.
    ///
    /// To override the contents of this collection use [`set_platforms`](Self::set_platforms).
    ///
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn platforms(mut self, input: crate::types::ClientDeviceType) -> Self {
        let mut v = self.platforms.unwrap_or_default();
        v.push(input);
        self.platforms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn set_platforms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>>) -> Self {
        self.platforms = input;
        self
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn get_platforms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClientDeviceType>> {
        &self.platforms
    }
    /// Consumes the builder and constructs a [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_client_branding::DeleteClientBrandingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_client_branding::DeleteClientBrandingInput {
            resource_id: self.resource_id,
            platforms: self.platforms,
        })
    }
}
