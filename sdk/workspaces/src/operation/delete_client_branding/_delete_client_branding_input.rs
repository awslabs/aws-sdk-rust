// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClientBrandingInput {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The device type for which you want to delete client branding.</p>
    #[doc(hidden)]
    pub platforms: std::option::Option<std::vec::Vec<crate::types::ClientDeviceType>>,
}
impl DeleteClientBrandingInput {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn platforms(&self) -> std::option::Option<&[crate::types::ClientDeviceType]> {
        self.platforms.as_deref()
    }
}
impl DeleteClientBrandingInput {
    /// Creates a new builder-style object to manufacture [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
    pub fn builder(
    ) -> crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder {
        crate::operation::delete_client_branding::builders::DeleteClientBrandingInputBuilder::default()
    }
}

/// A builder for [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteClientBrandingInputBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) platforms: std::option::Option<std::vec::Vec<crate::types::ClientDeviceType>>,
}
impl DeleteClientBrandingInputBuilder {
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to delete client branding.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// Appends an item to `platforms`.
    ///
    /// To override the contents of this collection use [`set_platforms`](Self::set_platforms).
    ///
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn platforms(mut self, input: crate::types::ClientDeviceType) -> Self {
        let mut v = self.platforms.unwrap_or_default();
        v.push(input);
        self.platforms = Some(v);
        self
    }
    /// <p>The device type for which you want to delete client branding.</p>
    pub fn set_platforms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ClientDeviceType>>,
    ) -> Self {
        self.platforms = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteClientBrandingInput`](crate::operation::delete_client_branding::DeleteClientBrandingInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_client_branding::DeleteClientBrandingInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_client_branding::DeleteClientBrandingInput {
                resource_id: self.resource_id,
                platforms: self.platforms,
            },
        )
    }
}
