// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_workspace_bundle::_create_workspace_bundle_output::CreateWorkspaceBundleOutputBuilder;

pub use crate::operation::create_workspace_bundle::_create_workspace_bundle_input::CreateWorkspaceBundleInputBuilder;

/// Fluent builder constructing a request to `CreateWorkspaceBundle`.
///
/// <p>Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html"> Create a Custom WorkSpaces Image and Bundle</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkspaceBundleFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_workspace_bundle::builders::CreateWorkspaceBundleInputBuilder,
}
impl CreateWorkspaceBundleFluentBuilder {
    /// Creates a new `CreateWorkspaceBundle`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_workspace_bundle::CreateWorkspaceBundle,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_workspace_bundle::CreateWorkspaceBundleError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_workspace_bundle::CreateWorkspaceBundleOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_workspace_bundle::CreateWorkspaceBundleError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the bundle.</p>
    pub fn bundle_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bundle_name(input.into());
        self
    }
    /// <p>The name of the bundle.</p>
    pub fn set_bundle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bundle_name(input);
        self
    }
    /// <p>The description of the bundle.</p>
    pub fn bundle_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bundle_description(input.into());
        self
    }
    /// <p>The description of the bundle.</p>
    pub fn set_bundle_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_bundle_description(input);
        self
    }
    /// <p>The identifier of the image that is used to create the bundle.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_id(input.into());
        self
    }
    /// <p>The identifier of the image that is used to create the bundle.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_image_id(input);
        self
    }
    /// <p>Describes the compute type of the bundle.</p>
    pub fn compute_type(mut self, input: crate::types::ComputeType) -> Self {
        self.inner = self.inner.compute_type(input);
        self
    }
    /// <p>Describes the compute type of the bundle.</p>
    pub fn set_compute_type(
        mut self,
        input: std::option::Option<crate::types::ComputeType>,
    ) -> Self {
        self.inner = self.inner.set_compute_type(input);
        self
    }
    /// <p>Describes the user volume for a WorkSpace bundle.</p>
    pub fn user_storage(mut self, input: crate::types::UserStorage) -> Self {
        self.inner = self.inner.user_storage(input);
        self
    }
    /// <p>Describes the user volume for a WorkSpace bundle.</p>
    pub fn set_user_storage(
        mut self,
        input: std::option::Option<crate::types::UserStorage>,
    ) -> Self {
        self.inner = self.inner.set_user_storage(input);
        self
    }
    /// <p>Describes the root volume for a WorkSpace bundle.</p>
    pub fn root_storage(mut self, input: crate::types::RootStorage) -> Self {
        self.inner = self.inner.root_storage(input);
        self
    }
    /// <p>Describes the root volume for a WorkSpace bundle.</p>
    pub fn set_root_storage(
        mut self,
        input: std::option::Option<crate::types::RootStorage>,
    ) -> Self {
        self.inner = self.inner.set_root_storage(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the bundle.</p> <note>
    /// <p>To add tags at the same time when you're creating the bundle, you must create an IAM policy that grants your IAM user permissions to use <code>workspaces:CreateTags</code>. </p>
    /// </note>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags associated with the bundle.</p> <note>
    /// <p>To add tags at the same time when you're creating the bundle, you must create an IAM policy that grants your IAM user permissions to use <code>workspaces:CreateTags</code>. </p>
    /// </note>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
