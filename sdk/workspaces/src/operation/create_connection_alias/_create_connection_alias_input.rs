// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectionAliasInput {
    /// <p>A connection string in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p> <important>
    /// <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.</p>
    /// </important>
    #[doc(hidden)]
    pub connection_string: std::option::Option<std::string::String>,
    /// <p>The tags to associate with the connection alias.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateConnectionAliasInput {
    /// <p>A connection string in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p> <important>
    /// <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.</p>
    /// </important>
    pub fn connection_string(&self) -> std::option::Option<&str> {
        self.connection_string.as_deref()
    }
    /// <p>The tags to associate with the connection alias.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateConnectionAliasInput {
    /// Creates a new builder-style object to manufacture [`CreateConnectionAliasInput`](crate::operation::create_connection_alias::CreateConnectionAliasInput).
    pub fn builder(
    ) -> crate::operation::create_connection_alias::builders::CreateConnectionAliasInputBuilder
    {
        crate::operation::create_connection_alias::builders::CreateConnectionAliasInputBuilder::default()
    }
}

/// A builder for [`CreateConnectionAliasInput`](crate::operation::create_connection_alias::CreateConnectionAliasInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConnectionAliasInputBuilder {
    pub(crate) connection_string: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateConnectionAliasInputBuilder {
    /// <p>A connection string in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p> <important>
    /// <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.</p>
    /// </important>
    pub fn connection_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_string = Some(input.into());
        self
    }
    /// <p>A connection string in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p> <important>
    /// <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.</p>
    /// </important>
    pub fn set_connection_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connection_string = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the connection alias.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to associate with the connection alias.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectionAliasInput`](crate::operation::create_connection_alias::CreateConnectionAliasInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_connection_alias::CreateConnectionAliasInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_connection_alias::CreateConnectionAliasInput {
                connection_string: self.connection_string,
                tags: self.tags,
            },
        )
    }
}
