// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkspaceImageOutput {
    /// <p>The identifier of the new WorkSpace image.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The name of the image.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the image.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The operating system that the image is running.</p>
    #[doc(hidden)]
    pub operating_system: std::option::Option<crate::types::OperatingSystem>,
    /// <p>The availability status of the image.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::WorkspaceImageState>,
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to DEDICATED. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.htm"> Bring Your Own Windows Desktop Images.</a>.</p>
    #[doc(hidden)]
    pub required_tenancy: std::option::Option<crate::types::WorkspaceImageRequiredTenancy>,
    /// <p>The date when the image was created.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    #[doc(hidden)]
    pub owner_account_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkspaceImageOutput {
    /// <p>The identifier of the new WorkSpace image.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The name of the image.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the image.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The operating system that the image is running.</p>
    pub fn operating_system(&self) -> std::option::Option<&crate::types::OperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>The availability status of the image.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::WorkspaceImageState> {
        self.state.as_ref()
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to DEDICATED. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.htm"> Bring Your Own Windows Desktop Images.</a>.</p>
    pub fn required_tenancy(
        &self,
    ) -> std::option::Option<&crate::types::WorkspaceImageRequiredTenancy> {
        self.required_tenancy.as_ref()
    }
    /// <p>The date when the image was created.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn owner_account_id(&self) -> std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkspaceImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkspaceImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceImageOutput`](crate::operation::create_workspace_image::CreateWorkspaceImageOutput).
    pub fn builder(
    ) -> crate::operation::create_workspace_image::builders::CreateWorkspaceImageOutputBuilder {
        crate::operation::create_workspace_image::builders::CreateWorkspaceImageOutputBuilder::default()
    }
}

/// A builder for [`CreateWorkspaceImageOutput`](crate::operation::create_workspace_image::CreateWorkspaceImageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkspaceImageOutputBuilder {
    pub(crate) image_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) operating_system: std::option::Option<crate::types::OperatingSystem>,
    pub(crate) state: std::option::Option<crate::types::WorkspaceImageState>,
    pub(crate) required_tenancy: std::option::Option<crate::types::WorkspaceImageRequiredTenancy>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) owner_account_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkspaceImageOutputBuilder {
    /// <p>The identifier of the new WorkSpace image.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>The identifier of the new WorkSpace image.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The name of the image.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the image.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the image.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The operating system that the image is running.</p>
    pub fn operating_system(mut self, input: crate::types::OperatingSystem) -> Self {
        self.operating_system = Some(input);
        self
    }
    /// <p>The operating system that the image is running.</p>
    pub fn set_operating_system(
        mut self,
        input: std::option::Option<crate::types::OperatingSystem>,
    ) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The availability status of the image.</p>
    pub fn state(mut self, input: crate::types::WorkspaceImageState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The availability status of the image.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::WorkspaceImageState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to DEDICATED. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.htm"> Bring Your Own Windows Desktop Images.</a>.</p>
    pub fn required_tenancy(mut self, input: crate::types::WorkspaceImageRequiredTenancy) -> Self {
        self.required_tenancy = Some(input);
        self
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to DEDICATED. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.htm"> Bring Your Own Windows Desktop Images.</a>.</p>
    pub fn set_required_tenancy(
        mut self,
        input: std::option::Option<crate::types::WorkspaceImageRequiredTenancy>,
    ) -> Self {
        self.required_tenancy = input;
        self
    }
    /// <p>The date when the image was created.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>The date when the image was created.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn set_owner_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkspaceImageOutput`](crate::operation::create_workspace_image::CreateWorkspaceImageOutput).
    pub fn build(self) -> crate::operation::create_workspace_image::CreateWorkspaceImageOutput {
        crate::operation::create_workspace_image::CreateWorkspaceImageOutput {
            image_id: self.image_id,
            name: self.name,
            description: self.description,
            operating_system: self.operating_system,
            state: self.state,
            required_tenancy: self.required_tenancy,
            created: self.created,
            owner_account_id: self.owner_account_id,
            _request_id: self._request_id,
        }
    }
}
