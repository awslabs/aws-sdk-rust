// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBundleAssociationsInput {
    /// <p>The identifier of the bundle.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource types of the associated resource.</p>
    pub associated_resource_types: ::std::option::Option<::std::vec::Vec<crate::types::BundleAssociatedResourceType>>,
}
impl DescribeBundleAssociationsInput {
    /// <p>The identifier of the bundle.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The resource types of the associated resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_resource_types.is_none()`.
    pub fn associated_resource_types(&self) -> &[crate::types::BundleAssociatedResourceType] {
        self.associated_resource_types.as_deref().unwrap_or_default()
    }
}
impl DescribeBundleAssociationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeBundleAssociationsInput`](crate::operation::describe_bundle_associations::DescribeBundleAssociationsInput).
    pub fn builder() -> crate::operation::describe_bundle_associations::builders::DescribeBundleAssociationsInputBuilder {
        crate::operation::describe_bundle_associations::builders::DescribeBundleAssociationsInputBuilder::default()
    }
}

/// A builder for [`DescribeBundleAssociationsInput`](crate::operation::describe_bundle_associations::DescribeBundleAssociationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeBundleAssociationsInputBuilder {
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) associated_resource_types: ::std::option::Option<::std::vec::Vec<crate::types::BundleAssociatedResourceType>>,
}
impl DescribeBundleAssociationsInputBuilder {
    /// <p>The identifier of the bundle.</p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// Appends an item to `associated_resource_types`.
    ///
    /// To override the contents of this collection use [`set_associated_resource_types`](Self::set_associated_resource_types).
    ///
    /// <p>The resource types of the associated resource.</p>
    pub fn associated_resource_types(mut self, input: crate::types::BundleAssociatedResourceType) -> Self {
        let mut v = self.associated_resource_types.unwrap_or_default();
        v.push(input);
        self.associated_resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource types of the associated resource.</p>
    pub fn set_associated_resource_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::BundleAssociatedResourceType>>,
    ) -> Self {
        self.associated_resource_types = input;
        self
    }
    /// <p>The resource types of the associated resource.</p>
    pub fn get_associated_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BundleAssociatedResourceType>> {
        &self.associated_resource_types
    }
    /// Consumes the builder and constructs a [`DescribeBundleAssociationsInput`](crate::operation::describe_bundle_associations::DescribeBundleAssociationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_bundle_associations::DescribeBundleAssociationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_bundle_associations::DescribeBundleAssociationsInput {
            bundle_id: self.bundle_id,
            associated_resource_types: self.associated_resource_types,
        })
    }
}
