// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_client_branding::_import_client_branding_output::ImportClientBrandingOutputBuilder;

pub use crate::operation::import_client_branding::_import_client_branding_input::ImportClientBrandingInputBuilder;

impl ImportClientBrandingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_client_branding::ImportClientBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_client_branding::ImportClientBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_client_branding();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportClientBranding`.
///
/// <p>Imports client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.</p>
/// <p>After you import client branding, the default branding experience for the specified platform type is replaced with the imported experience</p> <note>
/// <ul>
/// <li> <p>You must specify at least one platform type when importing client branding.</p> </li>
/// <li> <p>You can import up to 6 MB of data with each request. If your request exceeds this limit, you can import client branding for different platform types using separate requests.</p> </li>
/// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify only one parameter for each platform type, but not both.</p> </li>
/// <li> <p>Imported data can take up to a minute to appear in the WorkSpaces client.</p> </li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportClientBrandingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_client_branding::builders::ImportClientBrandingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_client_branding::ImportClientBrandingOutput,
        crate::operation::import_client_branding::ImportClientBrandingError,
    > for ImportClientBrandingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_client_branding::ImportClientBrandingOutput,
            crate::operation::import_client_branding::ImportClientBrandingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportClientBrandingFluentBuilder {
    /// Creates a new `ImportClientBranding`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportClientBranding as a reference.
    pub fn as_input(&self) -> &crate::operation::import_client_branding::builders::ImportClientBrandingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_client_branding::ImportClientBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_client_branding::ImportClientBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_client_branding::ImportClientBranding::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_client_branding::ImportClientBranding::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_client_branding::ImportClientBrandingOutput,
        crate::operation::import_client_branding::ImportClientBrandingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to import client branding.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_id(input.into());
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to import client branding.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_id(input);
        self
    }
    /// <p>The directory identifier of the WorkSpace for which you want to import client branding.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_id()
    }
    /// <p>The branding information to import for Windows devices.</p>
    pub fn device_type_windows(mut self, input: crate::types::DefaultImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_windows(input);
        self
    }
    /// <p>The branding information to import for Windows devices.</p>
    pub fn set_device_type_windows(mut self, input: ::std::option::Option<crate::types::DefaultImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_windows(input);
        self
    }
    /// <p>The branding information to import for Windows devices.</p>
    pub fn get_device_type_windows(&self) -> &::std::option::Option<crate::types::DefaultImportClientBrandingAttributes> {
        self.inner.get_device_type_windows()
    }
    /// <p>The branding information to import for macOS devices.</p>
    pub fn device_type_osx(mut self, input: crate::types::DefaultImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_osx(input);
        self
    }
    /// <p>The branding information to import for macOS devices.</p>
    pub fn set_device_type_osx(mut self, input: ::std::option::Option<crate::types::DefaultImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_osx(input);
        self
    }
    /// <p>The branding information to import for macOS devices.</p>
    pub fn get_device_type_osx(&self) -> &::std::option::Option<crate::types::DefaultImportClientBrandingAttributes> {
        self.inner.get_device_type_osx()
    }
    /// <p>The branding information to import for Android devices.</p>
    pub fn device_type_android(mut self, input: crate::types::DefaultImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_android(input);
        self
    }
    /// <p>The branding information to import for Android devices.</p>
    pub fn set_device_type_android(mut self, input: ::std::option::Option<crate::types::DefaultImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_android(input);
        self
    }
    /// <p>The branding information to import for Android devices.</p>
    pub fn get_device_type_android(&self) -> &::std::option::Option<crate::types::DefaultImportClientBrandingAttributes> {
        self.inner.get_device_type_android()
    }
    /// <p>The branding information to import for iOS devices.</p>
    pub fn device_type_ios(mut self, input: crate::types::IosImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_ios(input);
        self
    }
    /// <p>The branding information to import for iOS devices.</p>
    pub fn set_device_type_ios(mut self, input: ::std::option::Option<crate::types::IosImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_ios(input);
        self
    }
    /// <p>The branding information to import for iOS devices.</p>
    pub fn get_device_type_ios(&self) -> &::std::option::Option<crate::types::IosImportClientBrandingAttributes> {
        self.inner.get_device_type_ios()
    }
    /// <p>The branding information to import for Linux devices.</p>
    pub fn device_type_linux(mut self, input: crate::types::DefaultImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_linux(input);
        self
    }
    /// <p>The branding information to import for Linux devices.</p>
    pub fn set_device_type_linux(mut self, input: ::std::option::Option<crate::types::DefaultImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_linux(input);
        self
    }
    /// <p>The branding information to import for Linux devices.</p>
    pub fn get_device_type_linux(&self) -> &::std::option::Option<crate::types::DefaultImportClientBrandingAttributes> {
        self.inner.get_device_type_linux()
    }
    /// <p>The branding information to import for web access.</p>
    pub fn device_type_web(mut self, input: crate::types::DefaultImportClientBrandingAttributes) -> Self {
        self.inner = self.inner.device_type_web(input);
        self
    }
    /// <p>The branding information to import for web access.</p>
    pub fn set_device_type_web(mut self, input: ::std::option::Option<crate::types::DefaultImportClientBrandingAttributes>) -> Self {
        self.inner = self.inner.set_device_type_web(input);
        self
    }
    /// <p>The branding information to import for web access.</p>
    pub fn get_device_type_web(&self) -> &::std::option::Option<crate::types::DefaultImportClientBrandingAttributes> {
        self.inner.get_device_type_web()
    }
}
