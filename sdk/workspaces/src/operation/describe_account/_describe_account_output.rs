// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAccountOutput {
    /// <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
    pub dedicated_tenancy_support: ::std::option::Option<crate::types::DedicatedTenancySupportResultEnum>,
    /// <p>The IP address range, specified as an IPv4 CIDR block, used for the management network interface.</p>
    /// <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    pub dedicated_tenancy_management_cidr_range: ::std::option::Option<::std::string::String>,
    /// <p>The type of linked account.</p>
    pub dedicated_tenancy_account_type: ::std::option::Option<crate::types::DedicatedTenancyAccountType>,
    _request_id: Option<String>,
}
impl DescribeAccountOutput {
    /// <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
    pub fn dedicated_tenancy_support(&self) -> ::std::option::Option<&crate::types::DedicatedTenancySupportResultEnum> {
        self.dedicated_tenancy_support.as_ref()
    }
    /// <p>The IP address range, specified as an IPv4 CIDR block, used for the management network interface.</p>
    /// <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    pub fn dedicated_tenancy_management_cidr_range(&self) -> ::std::option::Option<&str> {
        self.dedicated_tenancy_management_cidr_range.as_deref()
    }
    /// <p>The type of linked account.</p>
    pub fn dedicated_tenancy_account_type(&self) -> ::std::option::Option<&crate::types::DedicatedTenancyAccountType> {
        self.dedicated_tenancy_account_type.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAccountOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountOutput`](crate::operation::describe_account::DescribeAccountOutput).
    pub fn builder() -> crate::operation::describe_account::builders::DescribeAccountOutputBuilder {
        crate::operation::describe_account::builders::DescribeAccountOutputBuilder::default()
    }
}

/// A builder for [`DescribeAccountOutput`](crate::operation::describe_account::DescribeAccountOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAccountOutputBuilder {
    pub(crate) dedicated_tenancy_support: ::std::option::Option<crate::types::DedicatedTenancySupportResultEnum>,
    pub(crate) dedicated_tenancy_management_cidr_range: ::std::option::Option<::std::string::String>,
    pub(crate) dedicated_tenancy_account_type: ::std::option::Option<crate::types::DedicatedTenancyAccountType>,
    _request_id: Option<String>,
}
impl DescribeAccountOutputBuilder {
    /// <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
    pub fn dedicated_tenancy_support(mut self, input: crate::types::DedicatedTenancySupportResultEnum) -> Self {
        self.dedicated_tenancy_support = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
    pub fn set_dedicated_tenancy_support(mut self, input: ::std::option::Option<crate::types::DedicatedTenancySupportResultEnum>) -> Self {
        self.dedicated_tenancy_support = input;
        self
    }
    /// <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
    pub fn get_dedicated_tenancy_support(&self) -> &::std::option::Option<crate::types::DedicatedTenancySupportResultEnum> {
        &self.dedicated_tenancy_support
    }
    /// <p>The IP address range, specified as an IPv4 CIDR block, used for the management network interface.</p>
    /// <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    pub fn dedicated_tenancy_management_cidr_range(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dedicated_tenancy_management_cidr_range = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address range, specified as an IPv4 CIDR block, used for the management network interface.</p>
    /// <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    pub fn set_dedicated_tenancy_management_cidr_range(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dedicated_tenancy_management_cidr_range = input;
        self
    }
    /// <p>The IP address range, specified as an IPv4 CIDR block, used for the management network interface.</p>
    /// <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
    pub fn get_dedicated_tenancy_management_cidr_range(&self) -> &::std::option::Option<::std::string::String> {
        &self.dedicated_tenancy_management_cidr_range
    }
    /// <p>The type of linked account.</p>
    pub fn dedicated_tenancy_account_type(mut self, input: crate::types::DedicatedTenancyAccountType) -> Self {
        self.dedicated_tenancy_account_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of linked account.</p>
    pub fn set_dedicated_tenancy_account_type(mut self, input: ::std::option::Option<crate::types::DedicatedTenancyAccountType>) -> Self {
        self.dedicated_tenancy_account_type = input;
        self
    }
    /// <p>The type of linked account.</p>
    pub fn get_dedicated_tenancy_account_type(&self) -> &::std::option::Option<crate::types::DedicatedTenancyAccountType> {
        &self.dedicated_tenancy_account_type
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAccountOutput`](crate::operation::describe_account::DescribeAccountOutput).
    pub fn build(self) -> crate::operation::describe_account::DescribeAccountOutput {
        crate::operation::describe_account::DescribeAccountOutput {
            dedicated_tenancy_support: self.dedicated_tenancy_support,
            dedicated_tenancy_management_cidr_range: self.dedicated_tenancy_management_cidr_range,
            dedicated_tenancy_account_type: self.dedicated_tenancy_account_type,
            _request_id: self._request_id,
        }
    }
}
