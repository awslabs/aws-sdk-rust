// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkspacesOutput {
    /// <p>Information about the WorkSpaces that could not be created.</p>
    pub failed_requests: ::std::option::Option<::std::vec::Vec<crate::types::FailedCreateWorkspaceRequest>>,
    /// <p>Information about the WorkSpaces that were created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <code>DescribeWorkspaces</code> before the WorkSpace is created, the information returned can be incomplete.</p>
    pub pending_requests: ::std::option::Option<::std::vec::Vec<crate::types::Workspace>>,
    _request_id: Option<String>,
}
impl CreateWorkspacesOutput {
    /// <p>Information about the WorkSpaces that could not be created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_requests.is_none()`.
    pub fn failed_requests(&self) -> &[crate::types::FailedCreateWorkspaceRequest] {
        self.failed_requests.as_deref().unwrap_or_default()
    }
    /// <p>Information about the WorkSpaces that were created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <code>DescribeWorkspaces</code> before the WorkSpace is created, the information returned can be incomplete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pending_requests.is_none()`.
    pub fn pending_requests(&self) -> &[crate::types::Workspace] {
        self.pending_requests.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for CreateWorkspacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkspacesOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspacesOutput`](crate::operation::create_workspaces::CreateWorkspacesOutput).
    pub fn builder() -> crate::operation::create_workspaces::builders::CreateWorkspacesOutputBuilder {
        crate::operation::create_workspaces::builders::CreateWorkspacesOutputBuilder::default()
    }
}

/// A builder for [`CreateWorkspacesOutput`](crate::operation::create_workspaces::CreateWorkspacesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateWorkspacesOutputBuilder {
    pub(crate) failed_requests: ::std::option::Option<::std::vec::Vec<crate::types::FailedCreateWorkspaceRequest>>,
    pub(crate) pending_requests: ::std::option::Option<::std::vec::Vec<crate::types::Workspace>>,
    _request_id: Option<String>,
}
impl CreateWorkspacesOutputBuilder {
    /// Appends an item to `failed_requests`.
    ///
    /// To override the contents of this collection use [`set_failed_requests`](Self::set_failed_requests).
    ///
    /// <p>Information about the WorkSpaces that could not be created.</p>
    pub fn failed_requests(mut self, input: crate::types::FailedCreateWorkspaceRequest) -> Self {
        let mut v = self.failed_requests.unwrap_or_default();
        v.push(input);
        self.failed_requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the WorkSpaces that could not be created.</p>
    pub fn set_failed_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FailedCreateWorkspaceRequest>>) -> Self {
        self.failed_requests = input;
        self
    }
    /// <p>Information about the WorkSpaces that could not be created.</p>
    pub fn get_failed_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FailedCreateWorkspaceRequest>> {
        &self.failed_requests
    }
    /// Appends an item to `pending_requests`.
    ///
    /// To override the contents of this collection use [`set_pending_requests`](Self::set_pending_requests).
    ///
    /// <p>Information about the WorkSpaces that were created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <code>DescribeWorkspaces</code> before the WorkSpace is created, the information returned can be incomplete.</p>
    pub fn pending_requests(mut self, input: crate::types::Workspace) -> Self {
        let mut v = self.pending_requests.unwrap_or_default();
        v.push(input);
        self.pending_requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the WorkSpaces that were created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <code>DescribeWorkspaces</code> before the WorkSpace is created, the information returned can be incomplete.</p>
    pub fn set_pending_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workspace>>) -> Self {
        self.pending_requests = input;
        self
    }
    /// <p>Information about the WorkSpaces that were created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <code>DescribeWorkspaces</code> before the WorkSpace is created, the information returned can be incomplete.</p>
    pub fn get_pending_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workspace>> {
        &self.pending_requests
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkspacesOutput`](crate::operation::create_workspaces::CreateWorkspacesOutput).
    pub fn build(self) -> crate::operation::create_workspaces::CreateWorkspacesOutput {
        crate::operation::create_workspaces::CreateWorkspacesOutput {
            failed_requests: self.failed_requests,
            pending_requests: self.pending_requests,
            _request_id: self._request_id,
        }
    }
}
