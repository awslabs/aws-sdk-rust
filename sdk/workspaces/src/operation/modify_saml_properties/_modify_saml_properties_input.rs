// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySamlPropertiesInput {
    /// <p>The directory identifier for which you want to configure SAML properties.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The properties for configuring SAML 2.0 authentication.</p>
    #[doc(hidden)]
    pub saml_properties: std::option::Option<crate::types::SamlProperties>,
    /// <p>The SAML properties to delete as part of your request.</p>
    /// <p>Specify one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>SAML_PROPERTIES_USER_ACCESS_URL</code> to delete the user access URL.</p> </li>
    /// <li> <p> <code>SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME</code> to delete the relay state parameter name.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub properties_to_delete:
        std::option::Option<std::vec::Vec<crate::types::DeletableSamlProperty>>,
}
impl ModifySamlPropertiesInput {
    /// <p>The directory identifier for which you want to configure SAML properties.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The properties for configuring SAML 2.0 authentication.</p>
    pub fn saml_properties(&self) -> std::option::Option<&crate::types::SamlProperties> {
        self.saml_properties.as_ref()
    }
    /// <p>The SAML properties to delete as part of your request.</p>
    /// <p>Specify one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>SAML_PROPERTIES_USER_ACCESS_URL</code> to delete the user access URL.</p> </li>
    /// <li> <p> <code>SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME</code> to delete the relay state parameter name.</p> </li>
    /// </ul>
    pub fn properties_to_delete(
        &self,
    ) -> std::option::Option<&[crate::types::DeletableSamlProperty]> {
        self.properties_to_delete.as_deref()
    }
}
impl ModifySamlPropertiesInput {
    /// Creates a new builder-style object to manufacture [`ModifySamlPropertiesInput`](crate::operation::modify_saml_properties::ModifySamlPropertiesInput).
    pub fn builder(
    ) -> crate::operation::modify_saml_properties::builders::ModifySamlPropertiesInputBuilder {
        crate::operation::modify_saml_properties::builders::ModifySamlPropertiesInputBuilder::default()
    }
}

/// A builder for [`ModifySamlPropertiesInput`](crate::operation::modify_saml_properties::ModifySamlPropertiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifySamlPropertiesInputBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) saml_properties: std::option::Option<crate::types::SamlProperties>,
    pub(crate) properties_to_delete:
        std::option::Option<std::vec::Vec<crate::types::DeletableSamlProperty>>,
}
impl ModifySamlPropertiesInputBuilder {
    /// <p>The directory identifier for which you want to configure SAML properties.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The directory identifier for which you want to configure SAML properties.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The properties for configuring SAML 2.0 authentication.</p>
    pub fn saml_properties(mut self, input: crate::types::SamlProperties) -> Self {
        self.saml_properties = Some(input);
        self
    }
    /// <p>The properties for configuring SAML 2.0 authentication.</p>
    pub fn set_saml_properties(
        mut self,
        input: std::option::Option<crate::types::SamlProperties>,
    ) -> Self {
        self.saml_properties = input;
        self
    }
    /// Appends an item to `properties_to_delete`.
    ///
    /// To override the contents of this collection use [`set_properties_to_delete`](Self::set_properties_to_delete).
    ///
    /// <p>The SAML properties to delete as part of your request.</p>
    /// <p>Specify one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>SAML_PROPERTIES_USER_ACCESS_URL</code> to delete the user access URL.</p> </li>
    /// <li> <p> <code>SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME</code> to delete the relay state parameter name.</p> </li>
    /// </ul>
    pub fn properties_to_delete(mut self, input: crate::types::DeletableSamlProperty) -> Self {
        let mut v = self.properties_to_delete.unwrap_or_default();
        v.push(input);
        self.properties_to_delete = Some(v);
        self
    }
    /// <p>The SAML properties to delete as part of your request.</p>
    /// <p>Specify one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>SAML_PROPERTIES_USER_ACCESS_URL</code> to delete the user access URL.</p> </li>
    /// <li> <p> <code>SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME</code> to delete the relay state parameter name.</p> </li>
    /// </ul>
    pub fn set_properties_to_delete(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeletableSamlProperty>>,
    ) -> Self {
        self.properties_to_delete = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifySamlPropertiesInput`](crate::operation::modify_saml_properties::ModifySamlPropertiesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_saml_properties::ModifySamlPropertiesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::modify_saml_properties::ModifySamlPropertiesInput {
                resource_id: self.resource_id,
                saml_properties: self.saml_properties,
                properties_to_delete: self.properties_to_delete,
            },
        )
    }
}
