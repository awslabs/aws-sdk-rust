// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateIpGroupsInput {
    /// <p>The identifier of the directory.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssociateIpGroupsInput {
    /// <p>The identifier of the directory.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The identifiers of one or more IP access control groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_ids.is_none()`.
    pub fn group_ids(&self) -> &[::std::string::String] {
        self.group_ids.as_deref().unwrap_or_default()
    }
}
impl AssociateIpGroupsInput {
    /// Creates a new builder-style object to manufacture [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
    pub fn builder() -> crate::operation::associate_ip_groups::builders::AssociateIpGroupsInputBuilder {
        crate::operation::associate_ip_groups::builders::AssociateIpGroupsInputBuilder::default()
    }
}

/// A builder for [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateIpGroupsInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssociateIpGroupsInputBuilder {
    /// <p>The identifier of the directory.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// Appends an item to `group_ids`.
    ///
    /// To override the contents of this collection use [`set_group_ids`](Self::set_group_ids).
    ///
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.group_ids.unwrap_or_default();
        v.push(input.into());
        self.group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn set_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.group_ids = input;
        self
    }
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn get_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.group_ids
    }
    /// Consumes the builder and constructs a [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_ip_groups::AssociateIpGroupsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::associate_ip_groups::AssociateIpGroupsInput {
            directory_id: self.directory_id,
            group_ids: self.group_ids,
        })
    }
}
