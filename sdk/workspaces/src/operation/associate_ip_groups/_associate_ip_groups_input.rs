// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateIpGroupsInput {
    /// <p>The identifier of the directory.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The identifiers of one or more IP access control groups.</p>
    #[doc(hidden)]
    pub group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AssociateIpGroupsInput {
    /// <p>The identifier of the directory.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.group_ids.as_deref()
    }
}
impl AssociateIpGroupsInput {
    /// Creates a new builder-style object to manufacture [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
    pub fn builder(
    ) -> crate::operation::associate_ip_groups::builders::AssociateIpGroupsInputBuilder {
        crate::operation::associate_ip_groups::builders::AssociateIpGroupsInputBuilder::default()
    }
}

/// A builder for [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateIpGroupsInputBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AssociateIpGroupsInputBuilder {
    /// <p>The identifier of the directory.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the directory.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Appends an item to `group_ids`.
    ///
    /// To override the contents of this collection use [`set_group_ids`](Self::set_group_ids).
    ///
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.group_ids.unwrap_or_default();
        v.push(input.into());
        self.group_ids = Some(v);
        self
    }
    /// <p>The identifiers of one or more IP access control groups.</p>
    pub fn set_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.group_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateIpGroupsInput`](crate::operation::associate_ip_groups::AssociateIpGroupsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::associate_ip_groups::AssociateIpGroupsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::associate_ip_groups::AssociateIpGroupsInput {
                directory_id: self.directory_id,
                group_ids: self.group_ids,
            },
        )
    }
}
