// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_connection_alias_permission::_update_connection_alias_permission_output::UpdateConnectionAliasPermissionOutputBuilder;

pub use crate::operation::update_connection_alias_permission::_update_connection_alias_permission_input::UpdateConnectionAliasPermissionInputBuilder;

/// Fluent builder constructing a request to `UpdateConnectionAliasPermission`.
///
/// <p>Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p> <note>
/// <ul>
/// <li> <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html"> DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p> </li>
/// <li> <p>To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.</p> </li>
/// </ul>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectionAliasPermissionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_connection_alias_permission::builders::UpdateConnectionAliasPermissionInputBuilder
            }
impl UpdateConnectionAliasPermissionFluentBuilder {
    /// Creates a new `UpdateConnectionAliasPermission`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_connection_alias_permission::UpdateConnectionAliasPermission, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_connection_alias_permission::UpdateConnectionAliasPermissionError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_connection_alias_permission::UpdateConnectionAliasPermissionOutput, aws_smithy_http::result::SdkError<crate::operation::update_connection_alias_permission::UpdateConnectionAliasPermissionError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the connection alias that you want to update permissions for.</p>
    pub fn alias_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias_id(input.into());
        self
    }
    /// <p>The identifier of the connection alias that you want to update permissions for.</p>
    pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias_id(input);
        self
    }
    /// <p>Indicates whether to share or unshare the connection alias with the specified Amazon Web Services account.</p>
    pub fn connection_alias_permission(
        mut self,
        input: crate::types::ConnectionAliasPermission,
    ) -> Self {
        self.inner = self.inner.connection_alias_permission(input);
        self
    }
    /// <p>Indicates whether to share or unshare the connection alias with the specified Amazon Web Services account.</p>
    pub fn set_connection_alias_permission(
        mut self,
        input: std::option::Option<crate::types::ConnectionAliasPermission>,
    ) -> Self {
        self.inner = self.inner.set_connection_alias_permission(input);
        self
    }
}
