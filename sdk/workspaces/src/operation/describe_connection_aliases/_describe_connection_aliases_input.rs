// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeConnectionAliasesInput {
    /// <p>The identifiers of the connection aliases to describe.</p>
    pub alias_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier of the directory associated with the connection alias.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of connection aliases to return.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeConnectionAliasesInput {
    /// <p>The identifiers of the connection aliases to describe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alias_ids.is_none()`.
    pub fn alias_ids(&self) -> &[::std::string::String] {
        self.alias_ids.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the directory associated with the connection alias.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The maximum number of connection aliases to return.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeConnectionAliasesInput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionAliasesInput`](crate::operation::describe_connection_aliases::DescribeConnectionAliasesInput).
    pub fn builder() -> crate::operation::describe_connection_aliases::builders::DescribeConnectionAliasesInputBuilder {
        crate::operation::describe_connection_aliases::builders::DescribeConnectionAliasesInputBuilder::default()
    }
}

/// A builder for [`DescribeConnectionAliasesInput`](crate::operation::describe_connection_aliases::DescribeConnectionAliasesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeConnectionAliasesInputBuilder {
    pub(crate) alias_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeConnectionAliasesInputBuilder {
    /// Appends an item to `alias_ids`.
    ///
    /// To override the contents of this collection use [`set_alias_ids`](Self::set_alias_ids).
    ///
    /// <p>The identifiers of the connection aliases to describe.</p>
    pub fn alias_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.alias_ids.unwrap_or_default();
        v.push(input.into());
        self.alias_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the connection aliases to describe.</p>
    pub fn set_alias_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.alias_ids = input;
        self
    }
    /// <p>The identifiers of the connection aliases to describe.</p>
    pub fn get_alias_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.alias_ids
    }
    /// <p>The identifier of the directory associated with the connection alias.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory associated with the connection alias.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the directory associated with the connection alias.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The maximum number of connection aliases to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of connection aliases to return.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of connection aliases to return.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeConnectionAliasesInput`](crate::operation::describe_connection_aliases::DescribeConnectionAliasesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_connection_aliases::DescribeConnectionAliasesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_connection_aliases::DescribeConnectionAliasesInput {
            alias_ids: self.alias_ids,
            resource_id: self.resource_id,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
