// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeployWorkspaceApplications`](crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder::workspace_id) / [`set_workspace_id(Option<String>)`](crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder::set_workspace_id):<br>required: **true**<br><p>The identifier of the WorkSpace.</p><br>
    ///   - [`force(bool)`](crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder::force) / [`set_force(Option<bool>)`](crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder::set_force):<br>required: **false**<br><p>Indicates whether the force flag is applied for the specified WorkSpace. When the force flag is enabled, it allows previously failed deployments to be retried.</p><br>
    /// - On success, responds with [`DeployWorkspaceApplicationsOutput`](crate::operation::deploy_workspace_applications::DeployWorkspaceApplicationsOutput) with field(s):
    ///   - [`deployment(Option<WorkSpaceApplicationDeployment>)`](crate::operation::deploy_workspace_applications::DeployWorkspaceApplicationsOutput::deployment): <p>The list of deployed associations and information about them.</p>
    /// - On failure, responds with [`SdkError<DeployWorkspaceApplicationsError>`](crate::operation::deploy_workspace_applications::DeployWorkspaceApplicationsError)
    pub fn deploy_workspace_applications(
        &self,
    ) -> crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder {
        crate::operation::deploy_workspace_applications::builders::DeployWorkspaceApplicationsFluentBuilder::new(self.handle.clone())
    }
}
