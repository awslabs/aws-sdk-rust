// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the default properties that are used for creating WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory Details for Your WorkSpaces</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkspaceCreationProperties {
    /// <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p> <note>
    /// <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the <i>Amazon WorkDocs Administration Guide</i>. To delete a WorkDocs site, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the <i>Amazon WorkDocs Administration Guide</i>.</p>
    /// <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any new WorkSpaces that are launched in the directory will have WorkDocs enabled.</p>
    /// </note>
    #[doc(hidden)]
    pub enable_work_docs: std::option::Option<bool>,
    /// <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
    #[doc(hidden)]
    pub enable_internet_access: std::option::Option<bool>,
    /// <p>The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>, where <i>value</i> is any string of characters, and the number of domain components (DCs) is two or more. For example, <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p> <important>
    /// <ul>
    /// <li> <p>To avoid errors, certain characters in the distinguished name must be escaped. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names"> Distinguished Names</a> in the Microsoft documentation.</p> </li>
    /// <li> <p>The API doesn't validate whether the OU exists.</p> </li>
    /// </ul>
    /// </important>
    #[doc(hidden)]
    pub default_ou: std::option::Option<std::string::String>,
    /// <p>The identifier of your custom security group.</p>
    #[doc(hidden)]
    pub custom_security_group_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether users are local administrators of their WorkSpaces.</p>
    #[doc(hidden)]
    pub user_enabled_as_local_administrator: std::option::Option<bool>,
    /// <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace Maintenance</a>. </p>
    #[doc(hidden)]
    pub enable_maintenance_mode: std::option::Option<bool>,
}
impl WorkspaceCreationProperties {
    /// <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p> <note>
    /// <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the <i>Amazon WorkDocs Administration Guide</i>. To delete a WorkDocs site, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the <i>Amazon WorkDocs Administration Guide</i>.</p>
    /// <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any new WorkSpaces that are launched in the directory will have WorkDocs enabled.</p>
    /// </note>
    pub fn enable_work_docs(&self) -> std::option::Option<bool> {
        self.enable_work_docs
    }
    /// <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
    pub fn enable_internet_access(&self) -> std::option::Option<bool> {
        self.enable_internet_access
    }
    /// <p>The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>, where <i>value</i> is any string of characters, and the number of domain components (DCs) is two or more. For example, <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p> <important>
    /// <ul>
    /// <li> <p>To avoid errors, certain characters in the distinguished name must be escaped. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names"> Distinguished Names</a> in the Microsoft documentation.</p> </li>
    /// <li> <p>The API doesn't validate whether the OU exists.</p> </li>
    /// </ul>
    /// </important>
    pub fn default_ou(&self) -> std::option::Option<&str> {
        self.default_ou.as_deref()
    }
    /// <p>The identifier of your custom security group.</p>
    pub fn custom_security_group_id(&self) -> std::option::Option<&str> {
        self.custom_security_group_id.as_deref()
    }
    /// <p>Indicates whether users are local administrators of their WorkSpaces.</p>
    pub fn user_enabled_as_local_administrator(&self) -> std::option::Option<bool> {
        self.user_enabled_as_local_administrator
    }
    /// <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace Maintenance</a>. </p>
    pub fn enable_maintenance_mode(&self) -> std::option::Option<bool> {
        self.enable_maintenance_mode
    }
}
impl WorkspaceCreationProperties {
    /// Creates a new builder-style object to manufacture [`WorkspaceCreationProperties`](crate::types::WorkspaceCreationProperties).
    pub fn builder() -> crate::types::builders::WorkspaceCreationPropertiesBuilder {
        crate::types::builders::WorkspaceCreationPropertiesBuilder::default()
    }
}

/// A builder for [`WorkspaceCreationProperties`](crate::types::WorkspaceCreationProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkspaceCreationPropertiesBuilder {
    pub(crate) enable_work_docs: std::option::Option<bool>,
    pub(crate) enable_internet_access: std::option::Option<bool>,
    pub(crate) default_ou: std::option::Option<std::string::String>,
    pub(crate) custom_security_group_id: std::option::Option<std::string::String>,
    pub(crate) user_enabled_as_local_administrator: std::option::Option<bool>,
    pub(crate) enable_maintenance_mode: std::option::Option<bool>,
}
impl WorkspaceCreationPropertiesBuilder {
    /// <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p> <note>
    /// <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the <i>Amazon WorkDocs Administration Guide</i>. To delete a WorkDocs site, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the <i>Amazon WorkDocs Administration Guide</i>.</p>
    /// <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any new WorkSpaces that are launched in the directory will have WorkDocs enabled.</p>
    /// </note>
    pub fn enable_work_docs(mut self, input: bool) -> Self {
        self.enable_work_docs = Some(input);
        self
    }
    /// <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p> <note>
    /// <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the <i>Amazon WorkDocs Administration Guide</i>. To delete a WorkDocs site, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the <i>Amazon WorkDocs Administration Guide</i>.</p>
    /// <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any new WorkSpaces that are launched in the directory will have WorkDocs enabled.</p>
    /// </note>
    pub fn set_enable_work_docs(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_work_docs = input;
        self
    }
    /// <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
    pub fn enable_internet_access(mut self, input: bool) -> Self {
        self.enable_internet_access = Some(input);
        self
    }
    /// <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
    pub fn set_enable_internet_access(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_internet_access = input;
        self
    }
    /// <p>The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>, where <i>value</i> is any string of characters, and the number of domain components (DCs) is two or more. For example, <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p> <important>
    /// <ul>
    /// <li> <p>To avoid errors, certain characters in the distinguished name must be escaped. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names"> Distinguished Names</a> in the Microsoft documentation.</p> </li>
    /// <li> <p>The API doesn't validate whether the OU exists.</p> </li>
    /// </ul>
    /// </important>
    pub fn default_ou(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_ou = Some(input.into());
        self
    }
    /// <p>The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>, where <i>value</i> is any string of characters, and the number of domain components (DCs) is two or more. For example, <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p> <important>
    /// <ul>
    /// <li> <p>To avoid errors, certain characters in the distinguished name must be escaped. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names"> Distinguished Names</a> in the Microsoft documentation.</p> </li>
    /// <li> <p>The API doesn't validate whether the OU exists.</p> </li>
    /// </ul>
    /// </important>
    pub fn set_default_ou(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_ou = input;
        self
    }
    /// <p>The identifier of your custom security group.</p>
    pub fn custom_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_security_group_id = Some(input.into());
        self
    }
    /// <p>The identifier of your custom security group.</p>
    pub fn set_custom_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_security_group_id = input;
        self
    }
    /// <p>Indicates whether users are local administrators of their WorkSpaces.</p>
    pub fn user_enabled_as_local_administrator(mut self, input: bool) -> Self {
        self.user_enabled_as_local_administrator = Some(input);
        self
    }
    /// <p>Indicates whether users are local administrators of their WorkSpaces.</p>
    pub fn set_user_enabled_as_local_administrator(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.user_enabled_as_local_administrator = input;
        self
    }
    /// <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace Maintenance</a>. </p>
    pub fn enable_maintenance_mode(mut self, input: bool) -> Self {
        self.enable_maintenance_mode = Some(input);
        self
    }
    /// <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace Maintenance</a>. </p>
    pub fn set_enable_maintenance_mode(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_maintenance_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkspaceCreationProperties`](crate::types::WorkspaceCreationProperties).
    pub fn build(self) -> crate::types::WorkspaceCreationProperties {
        crate::types::WorkspaceCreationProperties {
            enable_work_docs: self.enable_work_docs,
            enable_internet_access: self.enable_internet_access,
            default_ou: self.default_ou,
            custom_security_group_id: self.custom_security_group_id,
            user_enabled_as_local_administrator: self.user_enabled_as_local_administrator,
            enable_maintenance_mode: self.enable_maintenance_mode,
        }
    }
}
