// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon WorkSpaces client.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClientProperties {
    /// <p>Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. </p>
    #[doc(hidden)]
    pub reconnect_enabled: std::option::Option<crate::types::ReconnectEnum>,
    /// <p>Specifies whether users can upload diagnostic log files of Amazon WorkSpaces client directly to WorkSpaces to troubleshoot issues when using the WorkSpaces client. When enabled, the log files will be sent to WorkSpaces automatically and will be applied to all users in the specified directory.</p>
    #[doc(hidden)]
    pub log_upload_enabled: std::option::Option<crate::types::LogUploadEnum>,
}
impl ClientProperties {
    /// <p>Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. </p>
    pub fn reconnect_enabled(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.reconnect_enabled.as_ref()
    }
    /// <p>Specifies whether users can upload diagnostic log files of Amazon WorkSpaces client directly to WorkSpaces to troubleshoot issues when using the WorkSpaces client. When enabled, the log files will be sent to WorkSpaces automatically and will be applied to all users in the specified directory.</p>
    pub fn log_upload_enabled(&self) -> std::option::Option<&crate::types::LogUploadEnum> {
        self.log_upload_enabled.as_ref()
    }
}
impl ClientProperties {
    /// Creates a new builder-style object to manufacture [`ClientProperties`](crate::types::ClientProperties).
    pub fn builder() -> crate::types::builders::ClientPropertiesBuilder {
        crate::types::builders::ClientPropertiesBuilder::default()
    }
}

/// A builder for [`ClientProperties`](crate::types::ClientProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClientPropertiesBuilder {
    pub(crate) reconnect_enabled: std::option::Option<crate::types::ReconnectEnum>,
    pub(crate) log_upload_enabled: std::option::Option<crate::types::LogUploadEnum>,
}
impl ClientPropertiesBuilder {
    /// <p>Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. </p>
    pub fn reconnect_enabled(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.reconnect_enabled = Some(input);
        self
    }
    /// <p>Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. </p>
    pub fn set_reconnect_enabled(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.reconnect_enabled = input;
        self
    }
    /// <p>Specifies whether users can upload diagnostic log files of Amazon WorkSpaces client directly to WorkSpaces to troubleshoot issues when using the WorkSpaces client. When enabled, the log files will be sent to WorkSpaces automatically and will be applied to all users in the specified directory.</p>
    pub fn log_upload_enabled(mut self, input: crate::types::LogUploadEnum) -> Self {
        self.log_upload_enabled = Some(input);
        self
    }
    /// <p>Specifies whether users can upload diagnostic log files of Amazon WorkSpaces client directly to WorkSpaces to troubleshoot issues when using the WorkSpaces client. When enabled, the log files will be sent to WorkSpaces automatically and will be applied to all users in the specified directory.</p>
    pub fn set_log_upload_enabled(
        mut self,
        input: std::option::Option<crate::types::LogUploadEnum>,
    ) -> Self {
        self.log_upload_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`ClientProperties`](crate::types::ClientProperties).
    pub fn build(self) -> crate::types::ClientProperties {
        crate::types::ClientProperties {
            reconnect_enabled: self.reconnect_enabled,
            log_upload_enabled: self.log_upload_enabled,
        }
    }
}
