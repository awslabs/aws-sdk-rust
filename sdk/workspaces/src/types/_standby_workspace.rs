// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a standby WorkSpace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StandbyWorkspace {
    /// <p>The identifier of the standby WorkSpace.</p>
    pub primary_workspace_id: ::std::string::String,
    /// <p>The volume encryption key of the standby WorkSpace.</p>
    pub volume_encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub directory_id: ::std::string::String,
    /// <p>The tags associated with the standby WorkSpace.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StandbyWorkspace {
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn primary_workspace_id(&self) -> &str {
        use std::ops::Deref;
        self.primary_workspace_id.deref()
    }
    /// <p>The volume encryption key of the standby WorkSpace.</p>
    pub fn volume_encryption_key(&self) -> ::std::option::Option<&str> {
        self.volume_encryption_key.as_deref()
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn directory_id(&self) -> &str {
        use std::ops::Deref;
        self.directory_id.deref()
    }
    /// <p>The tags associated with the standby WorkSpace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl StandbyWorkspace {
    /// Creates a new builder-style object to manufacture [`StandbyWorkspace`](crate::types::StandbyWorkspace).
    pub fn builder() -> crate::types::builders::StandbyWorkspaceBuilder {
        crate::types::builders::StandbyWorkspaceBuilder::default()
    }
}

/// A builder for [`StandbyWorkspace`](crate::types::StandbyWorkspace).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StandbyWorkspaceBuilder {
    pub(crate) primary_workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StandbyWorkspaceBuilder {
    /// <p>The identifier of the standby WorkSpace.</p>
    /// This field is required.
    pub fn primary_workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn set_primary_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_workspace_id = input;
        self
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn get_primary_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_workspace_id
    }
    /// <p>The volume encryption key of the standby WorkSpace.</p>
    pub fn volume_encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The volume encryption key of the standby WorkSpace.</p>
    pub fn set_volume_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_encryption_key = input;
        self
    }
    /// <p>The volume encryption key of the standby WorkSpace.</p>
    pub fn get_volume_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_encryption_key
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the standby WorkSpace.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the standby WorkSpace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the standby WorkSpace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StandbyWorkspace`](crate::types::StandbyWorkspace).
    /// This method will fail if any of the following fields are not set:
    /// - [`primary_workspace_id`](crate::types::builders::StandbyWorkspaceBuilder::primary_workspace_id)
    /// - [`directory_id`](crate::types::builders::StandbyWorkspaceBuilder::directory_id)
    pub fn build(self) -> ::std::result::Result<crate::types::StandbyWorkspace, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StandbyWorkspace {
            primary_workspace_id: self.primary_workspace_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "primary_workspace_id",
                    "primary_workspace_id was not specified but it is required when building StandbyWorkspace",
                )
            })?,
            volume_encryption_key: self.volume_encryption_key,
            directory_id: self.directory_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "directory_id",
                    "directory_id was not specified but it is required when building StandbyWorkspace",
                )
            })?,
            tags: self.tags,
        })
    }
}
