// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Standby WorkSpace.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StandbyWorkspace {
    /// <p>The identifier of the Standby WorkSpace.</p>
    #[doc(hidden)]
    pub primary_workspace_id: std::option::Option<std::string::String>,
    /// <p>The volume encryption key of the Standby WorkSpace.</p>
    #[doc(hidden)]
    pub volume_encryption_key: std::option::Option<std::string::String>,
    /// <p>The identifier of the directory for the Standby WorkSpace.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The tags associated with the Standby WorkSpace.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl StandbyWorkspace {
    /// <p>The identifier of the Standby WorkSpace.</p>
    pub fn primary_workspace_id(&self) -> std::option::Option<&str> {
        self.primary_workspace_id.as_deref()
    }
    /// <p>The volume encryption key of the Standby WorkSpace.</p>
    pub fn volume_encryption_key(&self) -> std::option::Option<&str> {
        self.volume_encryption_key.as_deref()
    }
    /// <p>The identifier of the directory for the Standby WorkSpace.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The tags associated with the Standby WorkSpace.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl StandbyWorkspace {
    /// Creates a new builder-style object to manufacture [`StandbyWorkspace`](crate::types::StandbyWorkspace).
    pub fn builder() -> crate::types::builders::StandbyWorkspaceBuilder {
        crate::types::builders::StandbyWorkspaceBuilder::default()
    }
}

/// A builder for [`StandbyWorkspace`](crate::types::StandbyWorkspace).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StandbyWorkspaceBuilder {
    pub(crate) primary_workspace_id: std::option::Option<std::string::String>,
    pub(crate) volume_encryption_key: std::option::Option<std::string::String>,
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl StandbyWorkspaceBuilder {
    /// <p>The identifier of the Standby WorkSpace.</p>
    pub fn primary_workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_workspace_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Standby WorkSpace.</p>
    pub fn set_primary_workspace_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_workspace_id = input;
        self
    }
    /// <p>The volume encryption key of the Standby WorkSpace.</p>
    pub fn volume_encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_encryption_key = Some(input.into());
        self
    }
    /// <p>The volume encryption key of the Standby WorkSpace.</p>
    pub fn set_volume_encryption_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.volume_encryption_key = input;
        self
    }
    /// <p>The identifier of the directory for the Standby WorkSpace.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the directory for the Standby WorkSpace.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the Standby WorkSpace.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with the Standby WorkSpace.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`StandbyWorkspace`](crate::types::StandbyWorkspace).
    pub fn build(self) -> crate::types::StandbyWorkspace {
        crate::types::StandbyWorkspace {
            primary_workspace_id: self.primary_workspace_id,
            volume_encryption_key: self.volume_encryption_key,
            directory_id: self.directory_id,
            tags: self.tags,
        }
    }
}
