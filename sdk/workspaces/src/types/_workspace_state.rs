// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `WorkspaceState`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let workspacestate = unimplemented!();
/// match workspacestate {
///     WorkspaceState::AdminMaintenance => { /* ... */ },
///     WorkspaceState::Available => { /* ... */ },
///     WorkspaceState::Error => { /* ... */ },
///     WorkspaceState::Impaired => { /* ... */ },
///     WorkspaceState::Maintenance => { /* ... */ },
///     WorkspaceState::Pending => { /* ... */ },
///     WorkspaceState::Rebooting => { /* ... */ },
///     WorkspaceState::Rebuilding => { /* ... */ },
///     WorkspaceState::Restoring => { /* ... */ },
///     WorkspaceState::Starting => { /* ... */ },
///     WorkspaceState::Stopped => { /* ... */ },
///     WorkspaceState::Stopping => { /* ... */ },
///     WorkspaceState::Suspended => { /* ... */ },
///     WorkspaceState::Terminated => { /* ... */ },
///     WorkspaceState::Terminating => { /* ... */ },
///     WorkspaceState::Unhealthy => { /* ... */ },
///     WorkspaceState::Updating => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `workspacestate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `WorkspaceState::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `WorkspaceState::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `WorkspaceState::NewFeature` is defined.
/// Specifically, when `workspacestate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `WorkspaceState::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum WorkspaceState {
    #[allow(missing_docs)] // documentation missing in model
    AdminMaintenance,
    #[allow(missing_docs)] // documentation missing in model
    Available,
    #[allow(missing_docs)] // documentation missing in model
    Error,
    #[allow(missing_docs)] // documentation missing in model
    Impaired,
    #[allow(missing_docs)] // documentation missing in model
    Maintenance,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    Rebooting,
    #[allow(missing_docs)] // documentation missing in model
    Rebuilding,
    #[allow(missing_docs)] // documentation missing in model
    Restoring,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    Suspended,
    #[allow(missing_docs)] // documentation missing in model
    Terminated,
    #[allow(missing_docs)] // documentation missing in model
    Terminating,
    #[allow(missing_docs)] // documentation missing in model
    Unhealthy,
    #[allow(missing_docs)] // documentation missing in model
    Updating,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for WorkspaceState {
    fn from(s: &str) -> Self {
        match s {
            "ADMIN_MAINTENANCE" => WorkspaceState::AdminMaintenance,
            "AVAILABLE" => WorkspaceState::Available,
            "ERROR" => WorkspaceState::Error,
            "IMPAIRED" => WorkspaceState::Impaired,
            "MAINTENANCE" => WorkspaceState::Maintenance,
            "PENDING" => WorkspaceState::Pending,
            "REBOOTING" => WorkspaceState::Rebooting,
            "REBUILDING" => WorkspaceState::Rebuilding,
            "RESTORING" => WorkspaceState::Restoring,
            "STARTING" => WorkspaceState::Starting,
            "STOPPED" => WorkspaceState::Stopped,
            "STOPPING" => WorkspaceState::Stopping,
            "SUSPENDED" => WorkspaceState::Suspended,
            "TERMINATED" => WorkspaceState::Terminated,
            "TERMINATING" => WorkspaceState::Terminating,
            "UNHEALTHY" => WorkspaceState::Unhealthy,
            "UPDATING" => WorkspaceState::Updating,
            other => {
                WorkspaceState::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for WorkspaceState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(WorkspaceState::from(s))
    }
}
impl WorkspaceState {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            WorkspaceState::AdminMaintenance => "ADMIN_MAINTENANCE",
            WorkspaceState::Available => "AVAILABLE",
            WorkspaceState::Error => "ERROR",
            WorkspaceState::Impaired => "IMPAIRED",
            WorkspaceState::Maintenance => "MAINTENANCE",
            WorkspaceState::Pending => "PENDING",
            WorkspaceState::Rebooting => "REBOOTING",
            WorkspaceState::Rebuilding => "REBUILDING",
            WorkspaceState::Restoring => "RESTORING",
            WorkspaceState::Starting => "STARTING",
            WorkspaceState::Stopped => "STOPPED",
            WorkspaceState::Stopping => "STOPPING",
            WorkspaceState::Suspended => "SUSPENDED",
            WorkspaceState::Terminated => "TERMINATED",
            WorkspaceState::Terminating => "TERMINATING",
            WorkspaceState::Unhealthy => "UNHEALTHY",
            WorkspaceState::Updating => "UPDATING",
            WorkspaceState::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADMIN_MAINTENANCE",
            "AVAILABLE",
            "ERROR",
            "IMPAIRED",
            "MAINTENANCE",
            "PENDING",
            "REBOOTING",
            "REBUILDING",
            "RESTORING",
            "STARTING",
            "STOPPED",
            "STOPPING",
            "SUSPENDED",
            "TERMINATED",
            "TERMINATING",
            "UNHEALTHY",
            "UPDATING",
        ]
    }
}
impl AsRef<str> for WorkspaceState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
