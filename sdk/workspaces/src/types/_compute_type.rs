// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the compute type of the bundle.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComputeType {
    /// <p>The compute type.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::Compute>,
}
impl ComputeType {
    /// <p>The compute type.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::Compute> {
        self.name.as_ref()
    }
}
impl ComputeType {
    /// Creates a new builder-style object to manufacture [`ComputeType`](crate::types::ComputeType).
    pub fn builder() -> crate::types::builders::ComputeTypeBuilder {
        crate::types::builders::ComputeTypeBuilder::default()
    }
}

/// A builder for [`ComputeType`](crate::types::ComputeType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComputeTypeBuilder {
    pub(crate) name: std::option::Option<crate::types::Compute>,
}
impl ComputeTypeBuilder {
    /// <p>The compute type.</p>
    pub fn name(mut self, input: crate::types::Compute) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The compute type.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::Compute>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`ComputeType`](crate::types::ComputeType).
    pub fn build(self) -> crate::types::ComputeType {
        crate::types::ComputeType { name: self.name }
    }
}
