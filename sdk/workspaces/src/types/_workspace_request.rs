// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the information used to create a WorkSpace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspaceRequest {
    /// <p>The identifier of the Directory Service directory for the WorkSpace. You can use <code>DescribeWorkspaceDirectories</code> to list the available directories.</p>
    pub directory_id: ::std::string::String,
    /// <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
    pub user_name: ::std::string::String,
    /// <p>The identifier of the bundle for the WorkSpace. You can use <code>DescribeWorkspaceBundles</code> to list the available bundles.</p>
    pub bundle_id: ::std::string::String,
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub volume_encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub user_volume_encryption_enabled: ::std::option::Option<bool>,
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub root_volume_encryption_enabled: ::std::option::Option<bool>,
    /// <p>The WorkSpace properties.</p>
    pub workspace_properties: ::std::option::Option<crate::types::WorkspaceProperties>,
    /// <p>The tags for the WorkSpace.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl WorkspaceRequest {
    /// <p>The identifier of the Directory Service directory for the WorkSpace. You can use <code>DescribeWorkspaceDirectories</code> to list the available directories.</p>
    pub fn directory_id(&self) -> &str {
        use std::ops::Deref;
        self.directory_id.deref()
    }
    /// <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
    pub fn user_name(&self) -> &str {
        use std::ops::Deref;
        self.user_name.deref()
    }
    /// <p>The identifier of the bundle for the WorkSpace. You can use <code>DescribeWorkspaceBundles</code> to list the available bundles.</p>
    pub fn bundle_id(&self) -> &str {
        use std::ops::Deref;
        self.bundle_id.deref()
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn volume_encryption_key(&self) -> ::std::option::Option<&str> {
        self.volume_encryption_key.as_deref()
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn user_volume_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.user_volume_encryption_enabled
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn root_volume_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.root_volume_encryption_enabled
    }
    /// <p>The WorkSpace properties.</p>
    pub fn workspace_properties(&self) -> ::std::option::Option<&crate::types::WorkspaceProperties> {
        self.workspace_properties.as_ref()
    }
    /// <p>The tags for the WorkSpace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl WorkspaceRequest {
    /// Creates a new builder-style object to manufacture [`WorkspaceRequest`](crate::types::WorkspaceRequest).
    pub fn builder() -> crate::types::builders::WorkspaceRequestBuilder {
        crate::types::builders::WorkspaceRequestBuilder::default()
    }
}

/// A builder for [`WorkspaceRequest`](crate::types::WorkspaceRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkspaceRequestBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) user_volume_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) root_volume_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) workspace_properties: ::std::option::Option<crate::types::WorkspaceProperties>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl WorkspaceRequestBuilder {
    /// <p>The identifier of the Directory Service directory for the WorkSpace. You can use <code>DescribeWorkspaceDirectories</code> to list the available directories.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace. You can use <code>DescribeWorkspaceDirectories</code> to list the available directories.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace. You can use <code>DescribeWorkspaceDirectories</code> to list the available directories.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The identifier of the bundle for the WorkSpace. You can use <code>DescribeWorkspaceBundles</code> to list the available bundles.</p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle for the WorkSpace. You can use <code>DescribeWorkspaceBundles</code> to list the available bundles.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle for the WorkSpace. You can use <code>DescribeWorkspaceBundles</code> to list the available bundles.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn volume_encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn set_volume_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_encryption_key = input;
        self
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn get_volume_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_encryption_key
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn user_volume_encryption_enabled(mut self, input: bool) -> Self {
        self.user_volume_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn set_user_volume_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_volume_encryption_enabled = input;
        self
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn get_user_volume_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.user_volume_encryption_enabled
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn root_volume_encryption_enabled(mut self, input: bool) -> Self {
        self.root_volume_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn set_root_volume_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.root_volume_encryption_enabled = input;
        self
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn get_root_volume_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.root_volume_encryption_enabled
    }
    /// <p>The WorkSpace properties.</p>
    pub fn workspace_properties(mut self, input: crate::types::WorkspaceProperties) -> Self {
        self.workspace_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The WorkSpace properties.</p>
    pub fn set_workspace_properties(mut self, input: ::std::option::Option<crate::types::WorkspaceProperties>) -> Self {
        self.workspace_properties = input;
        self
    }
    /// <p>The WorkSpace properties.</p>
    pub fn get_workspace_properties(&self) -> &::std::option::Option<crate::types::WorkspaceProperties> {
        &self.workspace_properties
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the WorkSpace.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags for the WorkSpace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the WorkSpace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`WorkspaceRequest`](crate::types::WorkspaceRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`directory_id`](crate::types::builders::WorkspaceRequestBuilder::directory_id)
    /// - [`user_name`](crate::types::builders::WorkspaceRequestBuilder::user_name)
    /// - [`bundle_id`](crate::types::builders::WorkspaceRequestBuilder::bundle_id)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkspaceRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkspaceRequest {
            directory_id: self.directory_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "directory_id",
                    "directory_id was not specified but it is required when building WorkspaceRequest",
                )
            })?,
            user_name: self.user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_name",
                    "user_name was not specified but it is required when building WorkspaceRequest",
                )
            })?,
            bundle_id: self.bundle_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bundle_id",
                    "bundle_id was not specified but it is required when building WorkspaceRequest",
                )
            })?,
            volume_encryption_key: self.volume_encryption_key,
            user_volume_encryption_enabled: self.user_volume_encryption_enabled,
            root_volume_encryption_enabled: self.root_volume_encryption_enabled,
            workspace_properties: self.workspace_properties,
            tags: self.tags,
        })
    }
}
