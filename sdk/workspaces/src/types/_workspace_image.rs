// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a WorkSpace image.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspaceImage {
    /// <p>The identifier of the image.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the image.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the image.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The operating system that the image is running. </p>
    pub operating_system: ::std::option::Option<crate::types::OperatingSystem>,
    /// <p>The status of the image.</p>
    pub state: ::std::option::Option<crate::types::WorkspaceImageState>,
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub required_tenancy: ::std::option::Option<crate::types::WorkspaceImageRequiredTenancy>,
    /// <p>The error code that is returned for the image.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The text of the error message that is returned for the image.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date of the image.</p>
    pub created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The updates (if any) that are available for the specified image.</p>
    pub updates: ::std::option::Option<crate::types::UpdateResult>,
    /// <p>Additional details of the error returned for the image, including the possible causes of the errors and troubleshooting information.</p>
    pub error_details: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>,
}
impl WorkspaceImage {
    /// <p>The identifier of the image.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The name of the image.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the image.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The operating system that the image is running. </p>
    pub fn operating_system(&self) -> ::std::option::Option<&crate::types::OperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>The status of the image.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::WorkspaceImageState> {
        self.state.as_ref()
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn required_tenancy(&self) -> ::std::option::Option<&crate::types::WorkspaceImageRequiredTenancy> {
        self.required_tenancy.as_ref()
    }
    /// <p>The error code that is returned for the image.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The text of the error message that is returned for the image.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date of the image.</p>
    pub fn created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The updates (if any) that are available for the specified image.</p>
    pub fn updates(&self) -> ::std::option::Option<&crate::types::UpdateResult> {
        self.updates.as_ref()
    }
    /// <p>Additional details of the error returned for the image, including the possible causes of the errors and troubleshooting information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_details.is_none()`.
    pub fn error_details(&self) -> &[crate::types::ErrorDetails] {
        self.error_details.as_deref().unwrap_or_default()
    }
}
impl WorkspaceImage {
    /// Creates a new builder-style object to manufacture [`WorkspaceImage`](crate::types::WorkspaceImage).
    pub fn builder() -> crate::types::builders::WorkspaceImageBuilder {
        crate::types::builders::WorkspaceImageBuilder::default()
    }
}

/// A builder for [`WorkspaceImage`](crate::types::WorkspaceImage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkspaceImageBuilder {
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) operating_system: ::std::option::Option<crate::types::OperatingSystem>,
    pub(crate) state: ::std::option::Option<crate::types::WorkspaceImageState>,
    pub(crate) required_tenancy: ::std::option::Option<crate::types::WorkspaceImageRequiredTenancy>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) updates: ::std::option::Option<crate::types::UpdateResult>,
    pub(crate) error_details: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>,
}
impl WorkspaceImageBuilder {
    /// <p>The identifier of the image.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The identifier of the image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The name of the image.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the image.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the image.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the image.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the image.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the image.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The operating system that the image is running. </p>
    pub fn operating_system(mut self, input: crate::types::OperatingSystem) -> Self {
        self.operating_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system that the image is running. </p>
    pub fn set_operating_system(mut self, input: ::std::option::Option<crate::types::OperatingSystem>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The operating system that the image is running. </p>
    pub fn get_operating_system(&self) -> &::std::option::Option<crate::types::OperatingSystem> {
        &self.operating_system
    }
    /// <p>The status of the image.</p>
    pub fn state(mut self, input: crate::types::WorkspaceImageState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the image.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkspaceImageState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The status of the image.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkspaceImageState> {
        &self.state
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn required_tenancy(mut self, input: crate::types::WorkspaceImageRequiredTenancy) -> Self {
        self.required_tenancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn set_required_tenancy(mut self, input: ::std::option::Option<crate::types::WorkspaceImageRequiredTenancy>) -> Self {
        self.required_tenancy = input;
        self
    }
    /// <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn get_required_tenancy(&self) -> &::std::option::Option<crate::types::WorkspaceImageRequiredTenancy> {
        &self.required_tenancy
    }
    /// <p>The error code that is returned for the image.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code that is returned for the image.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code that is returned for the image.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The text of the error message that is returned for the image.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the error message that is returned for the image.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The text of the error message that is returned for the image.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date of the image.</p>
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date of the image.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date of the image.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the image.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The updates (if any) that are available for the specified image.</p>
    pub fn updates(mut self, input: crate::types::UpdateResult) -> Self {
        self.updates = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updates (if any) that are available for the specified image.</p>
    pub fn set_updates(mut self, input: ::std::option::Option<crate::types::UpdateResult>) -> Self {
        self.updates = input;
        self
    }
    /// <p>The updates (if any) that are available for the specified image.</p>
    pub fn get_updates(&self) -> &::std::option::Option<crate::types::UpdateResult> {
        &self.updates
    }
    /// Appends an item to `error_details`.
    ///
    /// To override the contents of this collection use [`set_error_details`](Self::set_error_details).
    ///
    /// <p>Additional details of the error returned for the image, including the possible causes of the errors and troubleshooting information.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        let mut v = self.error_details.unwrap_or_default();
        v.push(input);
        self.error_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional details of the error returned for the image, including the possible causes of the errors and troubleshooting information.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Additional details of the error returned for the image, including the possible causes of the errors and troubleshooting information.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ErrorDetails>> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`WorkspaceImage`](crate::types::WorkspaceImage).
    pub fn build(self) -> crate::types::WorkspaceImage {
        crate::types::WorkspaceImage {
            image_id: self.image_id,
            name: self.name,
            description: self.description,
            operating_system: self.operating_system,
            state: self.state,
            required_tenancy: self.required_tenancy,
            error_code: self.error_code,
            error_message: self.error_message,
            created: self.created,
            owner_account_id: self.owner_account_id,
            updates: self.updates,
            error_details: self.error_details,
        }
    }
}
