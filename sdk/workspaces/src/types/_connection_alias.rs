// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a connection alias. Connection aliases are used for cross-Region redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionAlias {
    /// <p>The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
    pub connection_string: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the connection alias.</p>
    pub alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the connection alias.</p>
    pub state: ::std::option::Option<crate::types::ConnectionAliasState>,
    /// <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The association status of the connection alias.</p>
    pub associations: ::std::option::Option<::std::vec::Vec<crate::types::ConnectionAliasAssociation>>,
}
impl ConnectionAlias {
    /// <p>The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
    pub fn connection_string(&self) -> ::std::option::Option<&str> {
        self.connection_string.as_deref()
    }
    /// <p>The identifier of the connection alias.</p>
    pub fn alias_id(&self) -> ::std::option::Option<&str> {
        self.alias_id.as_deref()
    }
    /// <p>The current state of the connection alias.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ConnectionAliasState> {
        self.state.as_ref()
    }
    /// <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The association status of the connection alias.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associations.is_none()`.
    pub fn associations(&self) -> &[crate::types::ConnectionAliasAssociation] {
        self.associations.as_deref().unwrap_or_default()
    }
}
impl ConnectionAlias {
    /// Creates a new builder-style object to manufacture [`ConnectionAlias`](crate::types::ConnectionAlias).
    pub fn builder() -> crate::types::builders::ConnectionAliasBuilder {
        crate::types::builders::ConnectionAliasBuilder::default()
    }
}

/// A builder for [`ConnectionAlias`](crate::types::ConnectionAlias).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionAliasBuilder {
    pub(crate) connection_string: ::std::option::Option<::std::string::String>,
    pub(crate) alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ConnectionAliasState>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) associations: ::std::option::Option<::std::vec::Vec<crate::types::ConnectionAliasAssociation>>,
}
impl ConnectionAliasBuilder {
    /// <p>The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
    pub fn connection_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
    pub fn set_connection_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_string = input;
        self
    }
    /// <p>The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as <code>www.example.com</code>.</p>
    pub fn get_connection_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_string
    }
    /// <p>The identifier of the connection alias.</p>
    pub fn alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the connection alias.</p>
    pub fn set_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias_id = input;
        self
    }
    /// <p>The identifier of the connection alias.</p>
    pub fn get_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias_id
    }
    /// <p>The current state of the connection alias.</p>
    pub fn state(mut self, input: crate::types::ConnectionAliasState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the connection alias.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ConnectionAliasState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the connection alias.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ConnectionAliasState> {
        &self.state
    }
    /// <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// Appends an item to `associations`.
    ///
    /// To override the contents of this collection use [`set_associations`](Self::set_associations).
    ///
    /// <p>The association status of the connection alias.</p>
    pub fn associations(mut self, input: crate::types::ConnectionAliasAssociation) -> Self {
        let mut v = self.associations.unwrap_or_default();
        v.push(input);
        self.associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The association status of the connection alias.</p>
    pub fn set_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConnectionAliasAssociation>>) -> Self {
        self.associations = input;
        self
    }
    /// <p>The association status of the connection alias.</p>
    pub fn get_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConnectionAliasAssociation>> {
        &self.associations
    }
    /// Consumes the builder and constructs a [`ConnectionAlias`](crate::types::ConnectionAlias).
    pub fn build(self) -> crate::types::ConnectionAlias {
        crate::types::ConnectionAlias {
            connection_string: self.connection_string,
            alias_id: self.alias_id,
            state: self.state,
            owner_account_id: self.owner_account_id,
            associations: self.associations,
        }
    }
}
