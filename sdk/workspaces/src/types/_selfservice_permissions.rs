// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the self-service permissions for a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SelfservicePermissions {
    /// <p>Specifies whether users can restart their WorkSpace.</p>
    #[doc(hidden)]
    pub restart_workspace: std::option::Option<crate::types::ReconnectEnum>,
    /// <p>Specifies whether users can increase the volume size of the drives on their WorkSpace.</p>
    #[doc(hidden)]
    pub increase_volume_size: std::option::Option<crate::types::ReconnectEnum>,
    /// <p>Specifies whether users can change the compute type (bundle) for their WorkSpace.</p>
    #[doc(hidden)]
    pub change_compute_type: std::option::Option<crate::types::ReconnectEnum>,
    /// <p>Specifies whether users can switch the running mode of their WorkSpace.</p>
    #[doc(hidden)]
    pub switch_running_mode: std::option::Option<crate::types::ReconnectEnum>,
    /// <p>Specifies whether users can rebuild the operating system of a WorkSpace to its original state.</p>
    #[doc(hidden)]
    pub rebuild_workspace: std::option::Option<crate::types::ReconnectEnum>,
}
impl SelfservicePermissions {
    /// <p>Specifies whether users can restart their WorkSpace.</p>
    pub fn restart_workspace(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.restart_workspace.as_ref()
    }
    /// <p>Specifies whether users can increase the volume size of the drives on their WorkSpace.</p>
    pub fn increase_volume_size(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.increase_volume_size.as_ref()
    }
    /// <p>Specifies whether users can change the compute type (bundle) for their WorkSpace.</p>
    pub fn change_compute_type(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.change_compute_type.as_ref()
    }
    /// <p>Specifies whether users can switch the running mode of their WorkSpace.</p>
    pub fn switch_running_mode(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.switch_running_mode.as_ref()
    }
    /// <p>Specifies whether users can rebuild the operating system of a WorkSpace to its original state.</p>
    pub fn rebuild_workspace(&self) -> std::option::Option<&crate::types::ReconnectEnum> {
        self.rebuild_workspace.as_ref()
    }
}
impl SelfservicePermissions {
    /// Creates a new builder-style object to manufacture [`SelfservicePermissions`](crate::types::SelfservicePermissions).
    pub fn builder() -> crate::types::builders::SelfservicePermissionsBuilder {
        crate::types::builders::SelfservicePermissionsBuilder::default()
    }
}

/// A builder for [`SelfservicePermissions`](crate::types::SelfservicePermissions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SelfservicePermissionsBuilder {
    pub(crate) restart_workspace: std::option::Option<crate::types::ReconnectEnum>,
    pub(crate) increase_volume_size: std::option::Option<crate::types::ReconnectEnum>,
    pub(crate) change_compute_type: std::option::Option<crate::types::ReconnectEnum>,
    pub(crate) switch_running_mode: std::option::Option<crate::types::ReconnectEnum>,
    pub(crate) rebuild_workspace: std::option::Option<crate::types::ReconnectEnum>,
}
impl SelfservicePermissionsBuilder {
    /// <p>Specifies whether users can restart their WorkSpace.</p>
    pub fn restart_workspace(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.restart_workspace = Some(input);
        self
    }
    /// <p>Specifies whether users can restart their WorkSpace.</p>
    pub fn set_restart_workspace(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.restart_workspace = input;
        self
    }
    /// <p>Specifies whether users can increase the volume size of the drives on their WorkSpace.</p>
    pub fn increase_volume_size(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.increase_volume_size = Some(input);
        self
    }
    /// <p>Specifies whether users can increase the volume size of the drives on their WorkSpace.</p>
    pub fn set_increase_volume_size(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.increase_volume_size = input;
        self
    }
    /// <p>Specifies whether users can change the compute type (bundle) for their WorkSpace.</p>
    pub fn change_compute_type(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.change_compute_type = Some(input);
        self
    }
    /// <p>Specifies whether users can change the compute type (bundle) for their WorkSpace.</p>
    pub fn set_change_compute_type(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.change_compute_type = input;
        self
    }
    /// <p>Specifies whether users can switch the running mode of their WorkSpace.</p>
    pub fn switch_running_mode(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.switch_running_mode = Some(input);
        self
    }
    /// <p>Specifies whether users can switch the running mode of their WorkSpace.</p>
    pub fn set_switch_running_mode(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.switch_running_mode = input;
        self
    }
    /// <p>Specifies whether users can rebuild the operating system of a WorkSpace to its original state.</p>
    pub fn rebuild_workspace(mut self, input: crate::types::ReconnectEnum) -> Self {
        self.rebuild_workspace = Some(input);
        self
    }
    /// <p>Specifies whether users can rebuild the operating system of a WorkSpace to its original state.</p>
    pub fn set_rebuild_workspace(
        mut self,
        input: std::option::Option<crate::types::ReconnectEnum>,
    ) -> Self {
        self.rebuild_workspace = input;
        self
    }
    /// Consumes the builder and constructs a [`SelfservicePermissions`](crate::types::SelfservicePermissions).
    pub fn build(self) -> crate::types::SelfservicePermissions {
        crate::types::SelfservicePermissions {
            restart_workspace: self.restart_workspace,
            increase_volume_size: self.increase_volume_size,
            change_compute_type: self.change_compute_type,
            switch_running_mode: self.switch_running_mode,
            rebuild_workspace: self.rebuild_workspace,
        }
    }
}
