// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an IP access control group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkspacesIpGroup {
    /// <p>The identifier of the group.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The name of the group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The description of the group.</p>
    #[doc(hidden)]
    pub group_desc: std::option::Option<std::string::String>,
    /// <p>The rules.</p>
    #[doc(hidden)]
    pub user_rules: std::option::Option<std::vec::Vec<crate::types::IpRuleItem>>,
}
impl WorkspacesIpGroup {
    /// <p>The identifier of the group.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The description of the group.</p>
    pub fn group_desc(&self) -> std::option::Option<&str> {
        self.group_desc.as_deref()
    }
    /// <p>The rules.</p>
    pub fn user_rules(&self) -> std::option::Option<&[crate::types::IpRuleItem]> {
        self.user_rules.as_deref()
    }
}
impl WorkspacesIpGroup {
    /// Creates a new builder-style object to manufacture [`WorkspacesIpGroup`](crate::types::WorkspacesIpGroup).
    pub fn builder() -> crate::types::builders::WorkspacesIpGroupBuilder {
        crate::types::builders::WorkspacesIpGroupBuilder::default()
    }
}

/// A builder for [`WorkspacesIpGroup`](crate::types::WorkspacesIpGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkspacesIpGroupBuilder {
    pub(crate) group_id: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_desc: std::option::Option<std::string::String>,
    pub(crate) user_rules: std::option::Option<std::vec::Vec<crate::types::IpRuleItem>>,
}
impl WorkspacesIpGroupBuilder {
    /// <p>The identifier of the group.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>The identifier of the group.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The description of the group.</p>
    pub fn group_desc(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_desc = Some(input.into());
        self
    }
    /// <p>The description of the group.</p>
    pub fn set_group_desc(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_desc = input;
        self
    }
    /// Appends an item to `user_rules`.
    ///
    /// To override the contents of this collection use [`set_user_rules`](Self::set_user_rules).
    ///
    /// <p>The rules.</p>
    pub fn user_rules(mut self, input: crate::types::IpRuleItem) -> Self {
        let mut v = self.user_rules.unwrap_or_default();
        v.push(input);
        self.user_rules = Some(v);
        self
    }
    /// <p>The rules.</p>
    pub fn set_user_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IpRuleItem>>,
    ) -> Self {
        self.user_rules = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkspacesIpGroup`](crate::types::WorkspacesIpGroup).
    pub fn build(self) -> crate::types::WorkspacesIpGroup {
        crate::types::WorkspacesIpGroup {
            group_id: self.group_id,
            group_name: self.group_name,
            group_desc: self.group_desc,
            user_rules: self.user_rules,
        }
    }
}
