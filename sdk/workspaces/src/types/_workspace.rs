// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a WorkSpace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Workspace {
    /// <p>The identifier of the WorkSpace.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Directory Service directory for the WorkSpace.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The user for the WorkSpace.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the WorkSpace.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The IPv6 address of the WorkSpace.</p>
    pub ipv6_address: ::std::option::Option<::std::string::String>,
    /// <p>The operational state of the WorkSpace.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> – The WorkSpace is in a waiting state (for example, the WorkSpace is being created).</p></li>
    /// <li>
    /// <p><code>AVAILABLE</code> – The WorkSpace is running and has passed the health checks.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> – Refer to <code>UNHEALTHY</code> state.</p></li>
    /// <li>
    /// <p><code>UNHEALTHY</code> – The WorkSpace is not responding to health checks.</p></li>
    /// <li>
    /// <p><code>REBOOTING</code> – The WorkSpace is being rebooted (restarted).</p></li>
    /// <li>
    /// <p><code>STARTING</code> – The WorkSpace is starting up and health checks are being run.</p></li>
    /// <li>
    /// <p><code>REBUILDING</code> – The WorkSpace is being rebuilt.</p></li>
    /// <li>
    /// <p><code>RESTORING</code> – The WorkSpace is being restored.</p></li>
    /// <li>
    /// <p><code>MAINTENANCE</code> – The WorkSpace is undergoing scheduled maintenance by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>ADMIN_MAINTENANCE</code> – The WorkSpace is undergoing maintenance by the WorkSpaces administrator.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code> – The WorkSpace is being deleted.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code> – The WorkSpace has been deleted.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> – The WorkSpace has been suspended for image creation.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> – The WorkSpace is undergoing an update.</p></li>
    /// <li>
    /// <p><code>STOPPING</code> – The WorkSpace is being stopped.</p></li>
    /// <li>
    /// <p><code>STOPPED</code> – The WorkSpace has been stopped.</p></li>
    /// <li>
    /// <p><code>ERROR </code> – The WorkSpace is an error state (for example, an error occurred during startup).</p></li>
    /// </ul><note>
    /// <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p>
    /// </note>
    pub state: ::std::option::Option<crate::types::WorkspaceState>,
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The text of the error message that is returned if the WorkSpace cannot be created.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a WorkSpace</a>.</p>
    pub computer_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub volume_encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub user_volume_encryption_enabled: ::std::option::Option<bool>,
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub root_volume_encryption_enabled: ::std::option::Option<bool>,
    /// <p>The name of the user-decoupled WorkSpace.</p>
    pub workspace_name: ::std::option::Option<::std::string::String>,
    /// <p>The properties of the WorkSpace.</p>
    pub workspace_properties: ::std::option::Option<crate::types::WorkspaceProperties>,
    /// <p>The modification states of the WorkSpace.</p>
    pub modification_states: ::std::option::Option<::std::vec::Vec<crate::types::ModificationState>>,
    /// <p>The standby WorkSpace or primary WorkSpace related to the specified WorkSpace.</p>
    pub related_workspaces: ::std::option::Option<::std::vec::Vec<crate::types::RelatedWorkspaceProperties>>,
    /// <p>Indicates the settings of the data replication.</p>
    pub data_replication_settings: ::std::option::Option<crate::types::DataReplicationSettings>,
    /// <p>The properties of the standby WorkSpace</p>
    pub standby_workspaces_properties: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspacesProperties>>,
}
impl Workspace {
    /// <p>The identifier of the WorkSpace.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The user for the WorkSpace.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The IP address of the WorkSpace.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The IPv6 address of the WorkSpace.</p>
    pub fn ipv6_address(&self) -> ::std::option::Option<&str> {
        self.ipv6_address.as_deref()
    }
    /// <p>The operational state of the WorkSpace.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> – The WorkSpace is in a waiting state (for example, the WorkSpace is being created).</p></li>
    /// <li>
    /// <p><code>AVAILABLE</code> – The WorkSpace is running and has passed the health checks.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> – Refer to <code>UNHEALTHY</code> state.</p></li>
    /// <li>
    /// <p><code>UNHEALTHY</code> – The WorkSpace is not responding to health checks.</p></li>
    /// <li>
    /// <p><code>REBOOTING</code> – The WorkSpace is being rebooted (restarted).</p></li>
    /// <li>
    /// <p><code>STARTING</code> – The WorkSpace is starting up and health checks are being run.</p></li>
    /// <li>
    /// <p><code>REBUILDING</code> – The WorkSpace is being rebuilt.</p></li>
    /// <li>
    /// <p><code>RESTORING</code> – The WorkSpace is being restored.</p></li>
    /// <li>
    /// <p><code>MAINTENANCE</code> – The WorkSpace is undergoing scheduled maintenance by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>ADMIN_MAINTENANCE</code> – The WorkSpace is undergoing maintenance by the WorkSpaces administrator.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code> – The WorkSpace is being deleted.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code> – The WorkSpace has been deleted.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> – The WorkSpace has been suspended for image creation.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> – The WorkSpace is undergoing an update.</p></li>
    /// <li>
    /// <p><code>STOPPING</code> – The WorkSpace is being stopped.</p></li>
    /// <li>
    /// <p><code>STOPPED</code> – The WorkSpace has been stopped.</p></li>
    /// <li>
    /// <p><code>ERROR </code> – The WorkSpace is an error state (for example, an error occurred during startup).</p></li>
    /// </ul><note>
    /// <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p>
    /// </note>
    pub fn state(&self) -> ::std::option::Option<&crate::types::WorkspaceState> {
        self.state.as_ref()
    }
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The text of the error message that is returned if the WorkSpace cannot be created.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a WorkSpace</a>.</p>
    pub fn computer_name(&self) -> ::std::option::Option<&str> {
        self.computer_name.as_deref()
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn volume_encryption_key(&self) -> ::std::option::Option<&str> {
        self.volume_encryption_key.as_deref()
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn user_volume_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.user_volume_encryption_enabled
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn root_volume_encryption_enabled(&self) -> ::std::option::Option<bool> {
        self.root_volume_encryption_enabled
    }
    /// <p>The name of the user-decoupled WorkSpace.</p>
    pub fn workspace_name(&self) -> ::std::option::Option<&str> {
        self.workspace_name.as_deref()
    }
    /// <p>The properties of the WorkSpace.</p>
    pub fn workspace_properties(&self) -> ::std::option::Option<&crate::types::WorkspaceProperties> {
        self.workspace_properties.as_ref()
    }
    /// <p>The modification states of the WorkSpace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.modification_states.is_none()`.
    pub fn modification_states(&self) -> &[crate::types::ModificationState] {
        self.modification_states.as_deref().unwrap_or_default()
    }
    /// <p>The standby WorkSpace or primary WorkSpace related to the specified WorkSpace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_workspaces.is_none()`.
    pub fn related_workspaces(&self) -> &[crate::types::RelatedWorkspaceProperties] {
        self.related_workspaces.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the settings of the data replication.</p>
    pub fn data_replication_settings(&self) -> ::std::option::Option<&crate::types::DataReplicationSettings> {
        self.data_replication_settings.as_ref()
    }
    /// <p>The properties of the standby WorkSpace</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.standby_workspaces_properties.is_none()`.
    pub fn standby_workspaces_properties(&self) -> &[crate::types::StandbyWorkspacesProperties] {
        self.standby_workspaces_properties.as_deref().unwrap_or_default()
    }
}
impl Workspace {
    /// Creates a new builder-style object to manufacture [`Workspace`](crate::types::Workspace).
    pub fn builder() -> crate::types::builders::WorkspaceBuilder {
        crate::types::builders::WorkspaceBuilder::default()
    }
}

/// A builder for [`Workspace`](crate::types::Workspace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspaceBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_address: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::WorkspaceState>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) computer_name: ::std::option::Option<::std::string::String>,
    pub(crate) volume_encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) user_volume_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) root_volume_encryption_enabled: ::std::option::Option<bool>,
    pub(crate) workspace_name: ::std::option::Option<::std::string::String>,
    pub(crate) workspace_properties: ::std::option::Option<crate::types::WorkspaceProperties>,
    pub(crate) modification_states: ::std::option::Option<::std::vec::Vec<crate::types::ModificationState>>,
    pub(crate) related_workspaces: ::std::option::Option<::std::vec::Vec<crate::types::RelatedWorkspaceProperties>>,
    pub(crate) data_replication_settings: ::std::option::Option<crate::types::DataReplicationSettings>,
    pub(crate) standby_workspaces_properties: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspacesProperties>>,
}
impl WorkspaceBuilder {
    /// <p>The identifier of the WorkSpace.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the WorkSpace.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The identifier of the WorkSpace.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the Directory Service directory for the WorkSpace.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The user for the WorkSpace.</p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user for the WorkSpace.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The user for the WorkSpace.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The IP address of the WorkSpace.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the WorkSpace.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address of the WorkSpace.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The IPv6 address of the WorkSpace.</p>
    pub fn ipv6_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv6_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv6 address of the WorkSpace.</p>
    pub fn set_ipv6_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv6_address = input;
        self
    }
    /// <p>The IPv6 address of the WorkSpace.</p>
    pub fn get_ipv6_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv6_address
    }
    /// <p>The operational state of the WorkSpace.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> – The WorkSpace is in a waiting state (for example, the WorkSpace is being created).</p></li>
    /// <li>
    /// <p><code>AVAILABLE</code> – The WorkSpace is running and has passed the health checks.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> – Refer to <code>UNHEALTHY</code> state.</p></li>
    /// <li>
    /// <p><code>UNHEALTHY</code> – The WorkSpace is not responding to health checks.</p></li>
    /// <li>
    /// <p><code>REBOOTING</code> – The WorkSpace is being rebooted (restarted).</p></li>
    /// <li>
    /// <p><code>STARTING</code> – The WorkSpace is starting up and health checks are being run.</p></li>
    /// <li>
    /// <p><code>REBUILDING</code> – The WorkSpace is being rebuilt.</p></li>
    /// <li>
    /// <p><code>RESTORING</code> – The WorkSpace is being restored.</p></li>
    /// <li>
    /// <p><code>MAINTENANCE</code> – The WorkSpace is undergoing scheduled maintenance by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>ADMIN_MAINTENANCE</code> – The WorkSpace is undergoing maintenance by the WorkSpaces administrator.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code> – The WorkSpace is being deleted.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code> – The WorkSpace has been deleted.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> – The WorkSpace has been suspended for image creation.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> – The WorkSpace is undergoing an update.</p></li>
    /// <li>
    /// <p><code>STOPPING</code> – The WorkSpace is being stopped.</p></li>
    /// <li>
    /// <p><code>STOPPED</code> – The WorkSpace has been stopped.</p></li>
    /// <li>
    /// <p><code>ERROR </code> – The WorkSpace is an error state (for example, an error occurred during startup).</p></li>
    /// </ul><note>
    /// <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p>
    /// </note>
    pub fn state(mut self, input: crate::types::WorkspaceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operational state of the WorkSpace.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> – The WorkSpace is in a waiting state (for example, the WorkSpace is being created).</p></li>
    /// <li>
    /// <p><code>AVAILABLE</code> – The WorkSpace is running and has passed the health checks.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> – Refer to <code>UNHEALTHY</code> state.</p></li>
    /// <li>
    /// <p><code>UNHEALTHY</code> – The WorkSpace is not responding to health checks.</p></li>
    /// <li>
    /// <p><code>REBOOTING</code> – The WorkSpace is being rebooted (restarted).</p></li>
    /// <li>
    /// <p><code>STARTING</code> – The WorkSpace is starting up and health checks are being run.</p></li>
    /// <li>
    /// <p><code>REBUILDING</code> – The WorkSpace is being rebuilt.</p></li>
    /// <li>
    /// <p><code>RESTORING</code> – The WorkSpace is being restored.</p></li>
    /// <li>
    /// <p><code>MAINTENANCE</code> – The WorkSpace is undergoing scheduled maintenance by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>ADMIN_MAINTENANCE</code> – The WorkSpace is undergoing maintenance by the WorkSpaces administrator.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code> – The WorkSpace is being deleted.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code> – The WorkSpace has been deleted.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> – The WorkSpace has been suspended for image creation.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> – The WorkSpace is undergoing an update.</p></li>
    /// <li>
    /// <p><code>STOPPING</code> – The WorkSpace is being stopped.</p></li>
    /// <li>
    /// <p><code>STOPPED</code> – The WorkSpace has been stopped.</p></li>
    /// <li>
    /// <p><code>ERROR </code> – The WorkSpace is an error state (for example, an error occurred during startup).</p></li>
    /// </ul><note>
    /// <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p>
    /// </note>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkspaceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The operational state of the WorkSpace.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> – The WorkSpace is in a waiting state (for example, the WorkSpace is being created).</p></li>
    /// <li>
    /// <p><code>AVAILABLE</code> – The WorkSpace is running and has passed the health checks.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> – Refer to <code>UNHEALTHY</code> state.</p></li>
    /// <li>
    /// <p><code>UNHEALTHY</code> – The WorkSpace is not responding to health checks.</p></li>
    /// <li>
    /// <p><code>REBOOTING</code> – The WorkSpace is being rebooted (restarted).</p></li>
    /// <li>
    /// <p><code>STARTING</code> – The WorkSpace is starting up and health checks are being run.</p></li>
    /// <li>
    /// <p><code>REBUILDING</code> – The WorkSpace is being rebuilt.</p></li>
    /// <li>
    /// <p><code>RESTORING</code> – The WorkSpace is being restored.</p></li>
    /// <li>
    /// <p><code>MAINTENANCE</code> – The WorkSpace is undergoing scheduled maintenance by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>ADMIN_MAINTENANCE</code> – The WorkSpace is undergoing maintenance by the WorkSpaces administrator.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code> – The WorkSpace is being deleted.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code> – The WorkSpace has been deleted.</p></li>
    /// <li>
    /// <p><code>SUSPENDED</code> – The WorkSpace has been suspended for image creation.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> – The WorkSpace is undergoing an update.</p></li>
    /// <li>
    /// <p><code>STOPPING</code> – The WorkSpace is being stopped.</p></li>
    /// <li>
    /// <p><code>STOPPED</code> – The WorkSpace has been stopped.</p></li>
    /// <li>
    /// <p><code>ERROR </code> – The WorkSpace is an error state (for example, an error occurred during startup).</p></li>
    /// </ul><note>
    /// <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p>
    /// </note>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkspaceState> {
        &self.state
    }
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The text of the error message that is returned if the WorkSpace cannot be created.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the error message that is returned if the WorkSpace cannot be created.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The text of the error message that is returned if the WorkSpace cannot be created.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a WorkSpace</a>.</p>
    pub fn computer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a WorkSpace</a>.</p>
    pub fn set_computer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computer_name = input;
        self
    }
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a WorkSpace</a>.</p>
    pub fn get_computer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.computer_name
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn volume_encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn set_volume_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_encryption_key = input;
        self
    }
    /// <p>The ARN of the symmetric KMS key used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric KMS keys.</p>
    pub fn get_volume_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_encryption_key
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn user_volume_encryption_enabled(mut self, input: bool) -> Self {
        self.user_volume_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn set_user_volume_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_volume_encryption_enabled = input;
        self
    }
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    pub fn get_user_volume_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.user_volume_encryption_enabled
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn root_volume_encryption_enabled(mut self, input: bool) -> Self {
        self.root_volume_encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn set_root_volume_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.root_volume_encryption_enabled = input;
        self
    }
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    pub fn get_root_volume_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.root_volume_encryption_enabled
    }
    /// <p>The name of the user-decoupled WorkSpace.</p>
    pub fn workspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user-decoupled WorkSpace.</p>
    pub fn set_workspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_name = input;
        self
    }
    /// <p>The name of the user-decoupled WorkSpace.</p>
    pub fn get_workspace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_name
    }
    /// <p>The properties of the WorkSpace.</p>
    pub fn workspace_properties(mut self, input: crate::types::WorkspaceProperties) -> Self {
        self.workspace_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The properties of the WorkSpace.</p>
    pub fn set_workspace_properties(mut self, input: ::std::option::Option<crate::types::WorkspaceProperties>) -> Self {
        self.workspace_properties = input;
        self
    }
    /// <p>The properties of the WorkSpace.</p>
    pub fn get_workspace_properties(&self) -> &::std::option::Option<crate::types::WorkspaceProperties> {
        &self.workspace_properties
    }
    /// Appends an item to `modification_states`.
    ///
    /// To override the contents of this collection use [`set_modification_states`](Self::set_modification_states).
    ///
    /// <p>The modification states of the WorkSpace.</p>
    pub fn modification_states(mut self, input: crate::types::ModificationState) -> Self {
        let mut v = self.modification_states.unwrap_or_default();
        v.push(input);
        self.modification_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>The modification states of the WorkSpace.</p>
    pub fn set_modification_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ModificationState>>) -> Self {
        self.modification_states = input;
        self
    }
    /// <p>The modification states of the WorkSpace.</p>
    pub fn get_modification_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ModificationState>> {
        &self.modification_states
    }
    /// Appends an item to `related_workspaces`.
    ///
    /// To override the contents of this collection use [`set_related_workspaces`](Self::set_related_workspaces).
    ///
    /// <p>The standby WorkSpace or primary WorkSpace related to the specified WorkSpace.</p>
    pub fn related_workspaces(mut self, input: crate::types::RelatedWorkspaceProperties) -> Self {
        let mut v = self.related_workspaces.unwrap_or_default();
        v.push(input);
        self.related_workspaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The standby WorkSpace or primary WorkSpace related to the specified WorkSpace.</p>
    pub fn set_related_workspaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RelatedWorkspaceProperties>>) -> Self {
        self.related_workspaces = input;
        self
    }
    /// <p>The standby WorkSpace or primary WorkSpace related to the specified WorkSpace.</p>
    pub fn get_related_workspaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RelatedWorkspaceProperties>> {
        &self.related_workspaces
    }
    /// <p>Indicates the settings of the data replication.</p>
    pub fn data_replication_settings(mut self, input: crate::types::DataReplicationSettings) -> Self {
        self.data_replication_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the settings of the data replication.</p>
    pub fn set_data_replication_settings(mut self, input: ::std::option::Option<crate::types::DataReplicationSettings>) -> Self {
        self.data_replication_settings = input;
        self
    }
    /// <p>Indicates the settings of the data replication.</p>
    pub fn get_data_replication_settings(&self) -> &::std::option::Option<crate::types::DataReplicationSettings> {
        &self.data_replication_settings
    }
    /// Appends an item to `standby_workspaces_properties`.
    ///
    /// To override the contents of this collection use [`set_standby_workspaces_properties`](Self::set_standby_workspaces_properties).
    ///
    /// <p>The properties of the standby WorkSpace</p>
    pub fn standby_workspaces_properties(mut self, input: crate::types::StandbyWorkspacesProperties) -> Self {
        let mut v = self.standby_workspaces_properties.unwrap_or_default();
        v.push(input);
        self.standby_workspaces_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The properties of the standby WorkSpace</p>
    pub fn set_standby_workspaces_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspacesProperties>>,
    ) -> Self {
        self.standby_workspaces_properties = input;
        self
    }
    /// <p>The properties of the standby WorkSpace</p>
    pub fn get_standby_workspaces_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StandbyWorkspacesProperties>> {
        &self.standby_workspaces_properties
    }
    /// Consumes the builder and constructs a [`Workspace`](crate::types::Workspace).
    pub fn build(self) -> crate::types::Workspace {
        crate::types::Workspace {
            workspace_id: self.workspace_id,
            directory_id: self.directory_id,
            user_name: self.user_name,
            ip_address: self.ip_address,
            ipv6_address: self.ipv6_address,
            state: self.state,
            bundle_id: self.bundle_id,
            subnet_id: self.subnet_id,
            error_message: self.error_message,
            error_code: self.error_code,
            computer_name: self.computer_name,
            volume_encryption_key: self.volume_encryption_key,
            user_volume_encryption_enabled: self.user_volume_encryption_enabled,
            root_volume_encryption_enabled: self.root_volume_encryption_enabled,
            workspace_name: self.workspace_name,
            workspace_properties: self.workspace_properties,
            modification_states: self.modification_states,
            related_workspaces: self.related_workspaces,
            data_replication_settings: self.data_replication_settings,
            standby_workspaces_properties: self.standby_workspaces_properties,
        }
    }
}
