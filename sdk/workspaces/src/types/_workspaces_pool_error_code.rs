// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `WorkspacesPoolErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let workspacespoolerrorcode = unimplemented!();
/// match workspacespoolerrorcode {
///     WorkspacesPoolErrorCode::BundleNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::DefaultOuIsMissing => { /* ... */ },
///     WorkspacesPoolErrorCode::DirectoryNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorAccessDenied => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorDsMachineAccountQuotaExceeded => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorFileNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorInvalidParameter => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorLogonFailure => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorMoreData => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorNotSupported => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorNoSuchDomain => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretActionPermissionIsMissing => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretDecryptionFailure => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretInvalid => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretStateInvalid => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinErrorSecretValueKeyNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinInternalServiceError => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinNerrInvalidWorkgroupName => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinNerrPasswordExpired => { /* ... */ },
///     WorkspacesPoolErrorCode::DomainJoinNerrWorkstationNotStarted => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleIsMissing => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSecurityGroupsAction => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSubnetAction => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleMissingEniCreateAction => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleMissingEniDeleteAction => { /* ... */ },
///     WorkspacesPoolErrorCode::IamServiceRoleMissingEniDescribeAction => { /* ... */ },
///     WorkspacesPoolErrorCode::IgwNotAttached => { /* ... */ },
///     WorkspacesPoolErrorCode::ImageNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::InsufficientPermissionsError => { /* ... */ },
///     WorkspacesPoolErrorCode::InternalServiceError => { /* ... */ },
///     WorkspacesPoolErrorCode::InvalidSubnetConfiguration => { /* ... */ },
///     WorkspacesPoolErrorCode::MachineRoleIsMissing => { /* ... */ },
///     WorkspacesPoolErrorCode::NetworkInterfaceLimitExceeded => { /* ... */ },
///     WorkspacesPoolErrorCode::SecurityGroupsNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::StsDisabledInRegion => { /* ... */ },
///     WorkspacesPoolErrorCode::SubnetHasInsufficientIpAddresses => { /* ... */ },
///     WorkspacesPoolErrorCode::SubnetNotFound => { /* ... */ },
///     WorkspacesPoolErrorCode::WorkspacesPoolInstanceProvisioningFailure => { /* ... */ },
///     WorkspacesPoolErrorCode::WorkspacesPoolStopped => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `workspacespoolerrorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `WorkspacesPoolErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `WorkspacesPoolErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `WorkspacesPoolErrorCode::NewFeature` is defined.
/// Specifically, when `workspacespoolerrorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `WorkspacesPoolErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum WorkspacesPoolErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    BundleNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DefaultOuIsMissing,
    #[allow(missing_docs)] // documentation missing in model
    DirectoryNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorDsMachineAccountQuotaExceeded,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorFileNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorInvalidParameter,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorLogonFailure,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorMoreData,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorNoSuchDomain,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretActionPermissionIsMissing,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretDecryptionFailure,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretInvalid,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretStateInvalid,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinErrorSecretValueKeyNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinInternalServiceError,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinNerrInvalidWorkgroupName,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinNerrPasswordExpired,
    #[allow(missing_docs)] // documentation missing in model
    DomainJoinNerrWorkstationNotStarted,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleIsMissing,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleMissingDescribeSecurityGroupsAction,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleMissingDescribeSubnetAction,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleMissingEniCreateAction,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleMissingEniDeleteAction,
    #[allow(missing_docs)] // documentation missing in model
    IamServiceRoleMissingEniDescribeAction,
    #[allow(missing_docs)] // documentation missing in model
    IgwNotAttached,
    #[allow(missing_docs)] // documentation missing in model
    ImageNotFound,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientPermissionsError,
    #[allow(missing_docs)] // documentation missing in model
    InternalServiceError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSubnetConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    MachineRoleIsMissing,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInterfaceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroupsNotFound,
    #[allow(missing_docs)] // documentation missing in model
    StsDisabledInRegion,
    #[allow(missing_docs)] // documentation missing in model
    SubnetHasInsufficientIpAddresses,
    #[allow(missing_docs)] // documentation missing in model
    SubnetNotFound,
    #[allow(missing_docs)] // documentation missing in model
    WorkspacesPoolInstanceProvisioningFailure,
    #[allow(missing_docs)] // documentation missing in model
    WorkspacesPoolStopped,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for WorkspacesPoolErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "BUNDLE_NOT_FOUND" => WorkspacesPoolErrorCode::BundleNotFound,
            "DEFAULT_OU_IS_MISSING" => WorkspacesPoolErrorCode::DefaultOuIsMissing,
            "DIRECTORY_NOT_FOUND" => WorkspacesPoolErrorCode::DirectoryNotFound,
            "DOMAIN_JOIN_ERROR_ACCESS_DENIED" => WorkspacesPoolErrorCode::DomainJoinErrorAccessDenied,
            "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" => WorkspacesPoolErrorCode::DomainJoinErrorDsMachineAccountQuotaExceeded,
            "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND" => WorkspacesPoolErrorCode::DomainJoinErrorFileNotFound,
            "DOMAIN_JOIN_ERROR_INVALID_PARAMETER" => WorkspacesPoolErrorCode::DomainJoinErrorInvalidParameter,
            "DOMAIN_JOIN_ERROR_LOGON_FAILURE" => WorkspacesPoolErrorCode::DomainJoinErrorLogonFailure,
            "DOMAIN_JOIN_ERROR_MORE_DATA" => WorkspacesPoolErrorCode::DomainJoinErrorMoreData,
            "DOMAIN_JOIN_ERROR_NOT_SUPPORTED" => WorkspacesPoolErrorCode::DomainJoinErrorNotSupported,
            "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN" => WorkspacesPoolErrorCode::DomainJoinErrorNoSuchDomain,
            "DOMAIN_JOIN_ERROR_SECRET_ACTION_PERMISSION_IS_MISSING" => WorkspacesPoolErrorCode::DomainJoinErrorSecretActionPermissionIsMissing,
            "DOMAIN_JOIN_ERROR_SECRET_DECRYPTION_FAILURE" => WorkspacesPoolErrorCode::DomainJoinErrorSecretDecryptionFailure,
            "DOMAIN_JOIN_ERROR_SECRET_INVALID" => WorkspacesPoolErrorCode::DomainJoinErrorSecretInvalid,
            "DOMAIN_JOIN_ERROR_SECRET_NOT_FOUND" => WorkspacesPoolErrorCode::DomainJoinErrorSecretNotFound,
            "DOMAIN_JOIN_ERROR_SECRET_STATE_INVALID" => WorkspacesPoolErrorCode::DomainJoinErrorSecretStateInvalid,
            "DOMAIN_JOIN_ERROR_SECRET_VALUE_KEY_NOT_FOUND" => WorkspacesPoolErrorCode::DomainJoinErrorSecretValueKeyNotFound,
            "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR" => WorkspacesPoolErrorCode::DomainJoinInternalServiceError,
            "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME" => WorkspacesPoolErrorCode::DomainJoinNerrInvalidWorkgroupName,
            "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED" => WorkspacesPoolErrorCode::DomainJoinNerrPasswordExpired,
            "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED" => WorkspacesPoolErrorCode::DomainJoinNerrWorkstationNotStarted,
            "IAM_SERVICE_ROLE_IS_MISSING" => WorkspacesPoolErrorCode::IamServiceRoleIsMissing,
            "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION" => WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSecurityGroupsAction,
            "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION" => WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSubnetAction,
            "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION" => WorkspacesPoolErrorCode::IamServiceRoleMissingEniCreateAction,
            "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION" => WorkspacesPoolErrorCode::IamServiceRoleMissingEniDeleteAction,
            "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION" => WorkspacesPoolErrorCode::IamServiceRoleMissingEniDescribeAction,
            "IGW_NOT_ATTACHED" => WorkspacesPoolErrorCode::IgwNotAttached,
            "IMAGE_NOT_FOUND" => WorkspacesPoolErrorCode::ImageNotFound,
            "INSUFFICIENT_PERMISSIONS_ERROR" => WorkspacesPoolErrorCode::InsufficientPermissionsError,
            "INTERNAL_SERVICE_ERROR" => WorkspacesPoolErrorCode::InternalServiceError,
            "INVALID_SUBNET_CONFIGURATION" => WorkspacesPoolErrorCode::InvalidSubnetConfiguration,
            "MACHINE_ROLE_IS_MISSING" => WorkspacesPoolErrorCode::MachineRoleIsMissing,
            "NETWORK_INTERFACE_LIMIT_EXCEEDED" => WorkspacesPoolErrorCode::NetworkInterfaceLimitExceeded,
            "SECURITY_GROUPS_NOT_FOUND" => WorkspacesPoolErrorCode::SecurityGroupsNotFound,
            "STS_DISABLED_IN_REGION" => WorkspacesPoolErrorCode::StsDisabledInRegion,
            "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES" => WorkspacesPoolErrorCode::SubnetHasInsufficientIpAddresses,
            "SUBNET_NOT_FOUND" => WorkspacesPoolErrorCode::SubnetNotFound,
            "WORKSPACES_POOL_INSTANCE_PROVISIONING_FAILURE" => WorkspacesPoolErrorCode::WorkspacesPoolInstanceProvisioningFailure,
            "WORKSPACES_POOL_STOPPED" => WorkspacesPoolErrorCode::WorkspacesPoolStopped,
            other => WorkspacesPoolErrorCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for WorkspacesPoolErrorCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(WorkspacesPoolErrorCode::from(s))
    }
}
impl WorkspacesPoolErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            WorkspacesPoolErrorCode::BundleNotFound => "BUNDLE_NOT_FOUND",
            WorkspacesPoolErrorCode::DefaultOuIsMissing => "DEFAULT_OU_IS_MISSING",
            WorkspacesPoolErrorCode::DirectoryNotFound => "DIRECTORY_NOT_FOUND",
            WorkspacesPoolErrorCode::DomainJoinErrorAccessDenied => "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
            WorkspacesPoolErrorCode::DomainJoinErrorDsMachineAccountQuotaExceeded => "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
            WorkspacesPoolErrorCode::DomainJoinErrorFileNotFound => "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
            WorkspacesPoolErrorCode::DomainJoinErrorInvalidParameter => "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
            WorkspacesPoolErrorCode::DomainJoinErrorLogonFailure => "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
            WorkspacesPoolErrorCode::DomainJoinErrorMoreData => "DOMAIN_JOIN_ERROR_MORE_DATA",
            WorkspacesPoolErrorCode::DomainJoinErrorNotSupported => "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
            WorkspacesPoolErrorCode::DomainJoinErrorNoSuchDomain => "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretActionPermissionIsMissing => "DOMAIN_JOIN_ERROR_SECRET_ACTION_PERMISSION_IS_MISSING",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretDecryptionFailure => "DOMAIN_JOIN_ERROR_SECRET_DECRYPTION_FAILURE",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretInvalid => "DOMAIN_JOIN_ERROR_SECRET_INVALID",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretNotFound => "DOMAIN_JOIN_ERROR_SECRET_NOT_FOUND",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretStateInvalid => "DOMAIN_JOIN_ERROR_SECRET_STATE_INVALID",
            WorkspacesPoolErrorCode::DomainJoinErrorSecretValueKeyNotFound => "DOMAIN_JOIN_ERROR_SECRET_VALUE_KEY_NOT_FOUND",
            WorkspacesPoolErrorCode::DomainJoinInternalServiceError => "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR",
            WorkspacesPoolErrorCode::DomainJoinNerrInvalidWorkgroupName => "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
            WorkspacesPoolErrorCode::DomainJoinNerrPasswordExpired => "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
            WorkspacesPoolErrorCode::DomainJoinNerrWorkstationNotStarted => "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
            WorkspacesPoolErrorCode::IamServiceRoleIsMissing => "IAM_SERVICE_ROLE_IS_MISSING",
            WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSecurityGroupsAction => "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
            WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSubnetAction => "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniCreateAction => "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniDeleteAction => "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniDescribeAction => "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
            WorkspacesPoolErrorCode::IgwNotAttached => "IGW_NOT_ATTACHED",
            WorkspacesPoolErrorCode::ImageNotFound => "IMAGE_NOT_FOUND",
            WorkspacesPoolErrorCode::InsufficientPermissionsError => "INSUFFICIENT_PERMISSIONS_ERROR",
            WorkspacesPoolErrorCode::InternalServiceError => "INTERNAL_SERVICE_ERROR",
            WorkspacesPoolErrorCode::InvalidSubnetConfiguration => "INVALID_SUBNET_CONFIGURATION",
            WorkspacesPoolErrorCode::MachineRoleIsMissing => "MACHINE_ROLE_IS_MISSING",
            WorkspacesPoolErrorCode::NetworkInterfaceLimitExceeded => "NETWORK_INTERFACE_LIMIT_EXCEEDED",
            WorkspacesPoolErrorCode::SecurityGroupsNotFound => "SECURITY_GROUPS_NOT_FOUND",
            WorkspacesPoolErrorCode::StsDisabledInRegion => "STS_DISABLED_IN_REGION",
            WorkspacesPoolErrorCode::SubnetHasInsufficientIpAddresses => "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
            WorkspacesPoolErrorCode::SubnetNotFound => "SUBNET_NOT_FOUND",
            WorkspacesPoolErrorCode::WorkspacesPoolInstanceProvisioningFailure => "WORKSPACES_POOL_INSTANCE_PROVISIONING_FAILURE",
            WorkspacesPoolErrorCode::WorkspacesPoolStopped => "WORKSPACES_POOL_STOPPED",
            WorkspacesPoolErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BUNDLE_NOT_FOUND",
            "DEFAULT_OU_IS_MISSING",
            "DIRECTORY_NOT_FOUND",
            "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
            "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
            "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
            "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
            "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
            "DOMAIN_JOIN_ERROR_MORE_DATA",
            "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
            "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
            "DOMAIN_JOIN_ERROR_SECRET_ACTION_PERMISSION_IS_MISSING",
            "DOMAIN_JOIN_ERROR_SECRET_DECRYPTION_FAILURE",
            "DOMAIN_JOIN_ERROR_SECRET_INVALID",
            "DOMAIN_JOIN_ERROR_SECRET_NOT_FOUND",
            "DOMAIN_JOIN_ERROR_SECRET_STATE_INVALID",
            "DOMAIN_JOIN_ERROR_SECRET_VALUE_KEY_NOT_FOUND",
            "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR",
            "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
            "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
            "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
            "IAM_SERVICE_ROLE_IS_MISSING",
            "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
            "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
            "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
            "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
            "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
            "IGW_NOT_ATTACHED",
            "IMAGE_NOT_FOUND",
            "INSUFFICIENT_PERMISSIONS_ERROR",
            "INTERNAL_SERVICE_ERROR",
            "INVALID_SUBNET_CONFIGURATION",
            "MACHINE_ROLE_IS_MISSING",
            "NETWORK_INTERFACE_LIMIT_EXCEEDED",
            "SECURITY_GROUPS_NOT_FOUND",
            "STS_DISABLED_IN_REGION",
            "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
            "SUBNET_NOT_FOUND",
            "WORKSPACES_POOL_INSTANCE_PROVISIONING_FAILURE",
            "WORKSPACES_POOL_STOPPED",
        ]
    }
}
impl ::std::convert::AsRef<str> for WorkspacesPoolErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl WorkspacesPoolErrorCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for WorkspacesPoolErrorCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            WorkspacesPoolErrorCode::BundleNotFound => write!(f, "BUNDLE_NOT_FOUND"),
            WorkspacesPoolErrorCode::DefaultOuIsMissing => write!(f, "DEFAULT_OU_IS_MISSING"),
            WorkspacesPoolErrorCode::DirectoryNotFound => write!(f, "DIRECTORY_NOT_FOUND"),
            WorkspacesPoolErrorCode::DomainJoinErrorAccessDenied => write!(f, "DOMAIN_JOIN_ERROR_ACCESS_DENIED"),
            WorkspacesPoolErrorCode::DomainJoinErrorDsMachineAccountQuotaExceeded => write!(f, "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"),
            WorkspacesPoolErrorCode::DomainJoinErrorFileNotFound => write!(f, "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND"),
            WorkspacesPoolErrorCode::DomainJoinErrorInvalidParameter => write!(f, "DOMAIN_JOIN_ERROR_INVALID_PARAMETER"),
            WorkspacesPoolErrorCode::DomainJoinErrorLogonFailure => write!(f, "DOMAIN_JOIN_ERROR_LOGON_FAILURE"),
            WorkspacesPoolErrorCode::DomainJoinErrorMoreData => write!(f, "DOMAIN_JOIN_ERROR_MORE_DATA"),
            WorkspacesPoolErrorCode::DomainJoinErrorNotSupported => write!(f, "DOMAIN_JOIN_ERROR_NOT_SUPPORTED"),
            WorkspacesPoolErrorCode::DomainJoinErrorNoSuchDomain => write!(f, "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN"),
            WorkspacesPoolErrorCode::DomainJoinErrorSecretActionPermissionIsMissing => {
                write!(f, "DOMAIN_JOIN_ERROR_SECRET_ACTION_PERMISSION_IS_MISSING")
            }
            WorkspacesPoolErrorCode::DomainJoinErrorSecretDecryptionFailure => write!(f, "DOMAIN_JOIN_ERROR_SECRET_DECRYPTION_FAILURE"),
            WorkspacesPoolErrorCode::DomainJoinErrorSecretInvalid => write!(f, "DOMAIN_JOIN_ERROR_SECRET_INVALID"),
            WorkspacesPoolErrorCode::DomainJoinErrorSecretNotFound => write!(f, "DOMAIN_JOIN_ERROR_SECRET_NOT_FOUND"),
            WorkspacesPoolErrorCode::DomainJoinErrorSecretStateInvalid => write!(f, "DOMAIN_JOIN_ERROR_SECRET_STATE_INVALID"),
            WorkspacesPoolErrorCode::DomainJoinErrorSecretValueKeyNotFound => write!(f, "DOMAIN_JOIN_ERROR_SECRET_VALUE_KEY_NOT_FOUND"),
            WorkspacesPoolErrorCode::DomainJoinInternalServiceError => write!(f, "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"),
            WorkspacesPoolErrorCode::DomainJoinNerrInvalidWorkgroupName => write!(f, "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME"),
            WorkspacesPoolErrorCode::DomainJoinNerrPasswordExpired => write!(f, "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED"),
            WorkspacesPoolErrorCode::DomainJoinNerrWorkstationNotStarted => write!(f, "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED"),
            WorkspacesPoolErrorCode::IamServiceRoleIsMissing => write!(f, "IAM_SERVICE_ROLE_IS_MISSING"),
            WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSecurityGroupsAction => {
                write!(f, "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION")
            }
            WorkspacesPoolErrorCode::IamServiceRoleMissingDescribeSubnetAction => write!(f, "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION"),
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniCreateAction => write!(f, "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION"),
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniDeleteAction => write!(f, "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION"),
            WorkspacesPoolErrorCode::IamServiceRoleMissingEniDescribeAction => write!(f, "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION"),
            WorkspacesPoolErrorCode::IgwNotAttached => write!(f, "IGW_NOT_ATTACHED"),
            WorkspacesPoolErrorCode::ImageNotFound => write!(f, "IMAGE_NOT_FOUND"),
            WorkspacesPoolErrorCode::InsufficientPermissionsError => write!(f, "INSUFFICIENT_PERMISSIONS_ERROR"),
            WorkspacesPoolErrorCode::InternalServiceError => write!(f, "INTERNAL_SERVICE_ERROR"),
            WorkspacesPoolErrorCode::InvalidSubnetConfiguration => write!(f, "INVALID_SUBNET_CONFIGURATION"),
            WorkspacesPoolErrorCode::MachineRoleIsMissing => write!(f, "MACHINE_ROLE_IS_MISSING"),
            WorkspacesPoolErrorCode::NetworkInterfaceLimitExceeded => write!(f, "NETWORK_INTERFACE_LIMIT_EXCEEDED"),
            WorkspacesPoolErrorCode::SecurityGroupsNotFound => write!(f, "SECURITY_GROUPS_NOT_FOUND"),
            WorkspacesPoolErrorCode::StsDisabledInRegion => write!(f, "STS_DISABLED_IN_REGION"),
            WorkspacesPoolErrorCode::SubnetHasInsufficientIpAddresses => write!(f, "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES"),
            WorkspacesPoolErrorCode::SubnetNotFound => write!(f, "SUBNET_NOT_FOUND"),
            WorkspacesPoolErrorCode::WorkspacesPoolInstanceProvisioningFailure => write!(f, "WORKSPACES_POOL_INSTANCE_PROVISIONING_FAILURE"),
            WorkspacesPoolErrorCode::WorkspacesPoolStopped => write!(f, "WORKSPACES_POOL_STOPPED"),
            WorkspacesPoolErrorCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
