// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the enablement status, user access URL, and relay state parameter name that are used for configuring federation with an SAML 2.0 identity provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SamlProperties {
    /// <p>Indicates the status of SAML 2.0 authentication. These statuses include the following.</p>
    /// <ul>
    /// <li> <p>If the setting is <code>DISABLED</code>, end users will be directed to login with their directory credentials.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED</code>, end users will be directed to login via the user access URL. Users attempting to connect to WorkSpaces from a client application that does not support SAML 2.0 authentication will not be able to connect.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK</code>, end users will be directed to login via the user access URL on supported client applications, but will not prevent clients that do not support SAML 2.0 authentication from connecting as if SAML 2.0 authentication was disabled.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SamlStatusEnum>,
    /// <p>The SAML 2.0 identity provider (IdP) user access URL is the URL a user would navigate to in their web browser in order to federate from the IdP and directly access the application, without any SAML 2.0 service provider (SP) bindings.</p>
    #[doc(hidden)]
    pub user_access_url: std::option::Option<std::string::String>,
    /// <p>The relay state parameter name supported by the SAML 2.0 identity provider (IdP). When the end user is redirected to the user access URL from the WorkSpaces client application, this relay state parameter name is appended as a query parameter to the URL along with the relay state endpoint to return the user to the client application session.</p>
    /// <p>To use SAML 2.0 authentication with WorkSpaces, the IdP must support IdP-initiated deep linking for the relay state URL. Consult your IdP documentation for more information.</p>
    #[doc(hidden)]
    pub relay_state_parameter_name: std::option::Option<std::string::String>,
}
impl SamlProperties {
    /// <p>Indicates the status of SAML 2.0 authentication. These statuses include the following.</p>
    /// <ul>
    /// <li> <p>If the setting is <code>DISABLED</code>, end users will be directed to login with their directory credentials.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED</code>, end users will be directed to login via the user access URL. Users attempting to connect to WorkSpaces from a client application that does not support SAML 2.0 authentication will not be able to connect.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK</code>, end users will be directed to login via the user access URL on supported client applications, but will not prevent clients that do not support SAML 2.0 authentication from connecting as if SAML 2.0 authentication was disabled.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::SamlStatusEnum> {
        self.status.as_ref()
    }
    /// <p>The SAML 2.0 identity provider (IdP) user access URL is the URL a user would navigate to in their web browser in order to federate from the IdP and directly access the application, without any SAML 2.0 service provider (SP) bindings.</p>
    pub fn user_access_url(&self) -> std::option::Option<&str> {
        self.user_access_url.as_deref()
    }
    /// <p>The relay state parameter name supported by the SAML 2.0 identity provider (IdP). When the end user is redirected to the user access URL from the WorkSpaces client application, this relay state parameter name is appended as a query parameter to the URL along with the relay state endpoint to return the user to the client application session.</p>
    /// <p>To use SAML 2.0 authentication with WorkSpaces, the IdP must support IdP-initiated deep linking for the relay state URL. Consult your IdP documentation for more information.</p>
    pub fn relay_state_parameter_name(&self) -> std::option::Option<&str> {
        self.relay_state_parameter_name.as_deref()
    }
}
impl SamlProperties {
    /// Creates a new builder-style object to manufacture [`SamlProperties`](crate::types::SamlProperties).
    pub fn builder() -> crate::types::builders::SamlPropertiesBuilder {
        crate::types::builders::SamlPropertiesBuilder::default()
    }
}

/// A builder for [`SamlProperties`](crate::types::SamlProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SamlPropertiesBuilder {
    pub(crate) status: std::option::Option<crate::types::SamlStatusEnum>,
    pub(crate) user_access_url: std::option::Option<std::string::String>,
    pub(crate) relay_state_parameter_name: std::option::Option<std::string::String>,
}
impl SamlPropertiesBuilder {
    /// <p>Indicates the status of SAML 2.0 authentication. These statuses include the following.</p>
    /// <ul>
    /// <li> <p>If the setting is <code>DISABLED</code>, end users will be directed to login with their directory credentials.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED</code>, end users will be directed to login via the user access URL. Users attempting to connect to WorkSpaces from a client application that does not support SAML 2.0 authentication will not be able to connect.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK</code>, end users will be directed to login via the user access URL on supported client applications, but will not prevent clients that do not support SAML 2.0 authentication from connecting as if SAML 2.0 authentication was disabled.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::SamlStatusEnum) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of SAML 2.0 authentication. These statuses include the following.</p>
    /// <ul>
    /// <li> <p>If the setting is <code>DISABLED</code>, end users will be directed to login with their directory credentials.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED</code>, end users will be directed to login via the user access URL. Users attempting to connect to WorkSpaces from a client application that does not support SAML 2.0 authentication will not be able to connect.</p> </li>
    /// <li> <p>If the setting is <code>ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK</code>, end users will be directed to login via the user access URL on supported client applications, but will not prevent clients that do not support SAML 2.0 authentication from connecting as if SAML 2.0 authentication was disabled.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SamlStatusEnum>) -> Self {
        self.status = input;
        self
    }
    /// <p>The SAML 2.0 identity provider (IdP) user access URL is the URL a user would navigate to in their web browser in order to federate from the IdP and directly access the application, without any SAML 2.0 service provider (SP) bindings.</p>
    pub fn user_access_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_access_url = Some(input.into());
        self
    }
    /// <p>The SAML 2.0 identity provider (IdP) user access URL is the URL a user would navigate to in their web browser in order to federate from the IdP and directly access the application, without any SAML 2.0 service provider (SP) bindings.</p>
    pub fn set_user_access_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_access_url = input;
        self
    }
    /// <p>The relay state parameter name supported by the SAML 2.0 identity provider (IdP). When the end user is redirected to the user access URL from the WorkSpaces client application, this relay state parameter name is appended as a query parameter to the URL along with the relay state endpoint to return the user to the client application session.</p>
    /// <p>To use SAML 2.0 authentication with WorkSpaces, the IdP must support IdP-initiated deep linking for the relay state URL. Consult your IdP documentation for more information.</p>
    pub fn relay_state_parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.relay_state_parameter_name = Some(input.into());
        self
    }
    /// <p>The relay state parameter name supported by the SAML 2.0 identity provider (IdP). When the end user is redirected to the user access URL from the WorkSpaces client application, this relay state parameter name is appended as a query parameter to the URL along with the relay state endpoint to return the user to the client application session.</p>
    /// <p>To use SAML 2.0 authentication with WorkSpaces, the IdP must support IdP-initiated deep linking for the relay state URL. Consult your IdP documentation for more information.</p>
    pub fn set_relay_state_parameter_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relay_state_parameter_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SamlProperties`](crate::types::SamlProperties).
    pub fn build(self) -> crate::types::SamlProperties {
        crate::types::SamlProperties {
            status: self.status,
            user_access_url: self.user_access_url,
            relay_state_parameter_name: self.relay_state_parameter_name,
        }
    }
}
