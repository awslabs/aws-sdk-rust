// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns default client branding attributes that were imported. These attributes display on the client login screen.</p> <important>
/// <p>Client branding attributes are public facing. Ensure that you don't include sensitive information.</p>
/// </important>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefaultClientBrandingAttributes {
    /// <p>The logo. The only image format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
    #[doc(hidden)]
    pub logo_url: std::option::Option<std::string::String>,
    /// <p>The support email. The company's customer support email address.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    #[doc(hidden)]
    pub support_email: std::option::Option<std::string::String>,
    /// <p>The support link. The link for the company's customer support page for their WorkSpace.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive.You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    #[doc(hidden)]
    pub support_link: std::option::Option<std::string::String>,
    /// <p>The forgotten password link. This is the web address that users can go to if they forget the password for their WorkSpace.</p>
    #[doc(hidden)]
    pub forgot_password_link: std::option::Option<std::string::String>,
    /// <p>The login message. Specified as a key value pair, in which the key is a locale and the value is the localized message for that locale. The only key supported is <code>en_US</code>. The HTML tags supported include the following: <code>a, b, blockquote, br, cite, code, dd, dl, dt, div, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>.</p>
    #[doc(hidden)]
    pub login_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DefaultClientBrandingAttributes {
    /// <p>The logo. The only image format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
    pub fn logo_url(&self) -> std::option::Option<&str> {
        self.logo_url.as_deref()
    }
    /// <p>The support email. The company's customer support email address.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn support_email(&self) -> std::option::Option<&str> {
        self.support_email.as_deref()
    }
    /// <p>The support link. The link for the company's customer support page for their WorkSpace.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive.You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn support_link(&self) -> std::option::Option<&str> {
        self.support_link.as_deref()
    }
    /// <p>The forgotten password link. This is the web address that users can go to if they forget the password for their WorkSpace.</p>
    pub fn forgot_password_link(&self) -> std::option::Option<&str> {
        self.forgot_password_link.as_deref()
    }
    /// <p>The login message. Specified as a key value pair, in which the key is a locale and the value is the localized message for that locale. The only key supported is <code>en_US</code>. The HTML tags supported include the following: <code>a, b, blockquote, br, cite, code, dd, dl, dt, div, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>.</p>
    pub fn login_message(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.login_message.as_ref()
    }
}
impl DefaultClientBrandingAttributes {
    /// Creates a new builder-style object to manufacture [`DefaultClientBrandingAttributes`](crate::types::DefaultClientBrandingAttributes).
    pub fn builder() -> crate::types::builders::DefaultClientBrandingAttributesBuilder {
        crate::types::builders::DefaultClientBrandingAttributesBuilder::default()
    }
}

/// A builder for [`DefaultClientBrandingAttributes`](crate::types::DefaultClientBrandingAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefaultClientBrandingAttributesBuilder {
    pub(crate) logo_url: std::option::Option<std::string::String>,
    pub(crate) support_email: std::option::Option<std::string::String>,
    pub(crate) support_link: std::option::Option<std::string::String>,
    pub(crate) forgot_password_link: std::option::Option<std::string::String>,
    pub(crate) login_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DefaultClientBrandingAttributesBuilder {
    /// <p>The logo. The only image format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
    pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.logo_url = Some(input.into());
        self
    }
    /// <p>The logo. The only image format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
    pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logo_url = input;
        self
    }
    /// <p>The support email. The company's customer support email address.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn support_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_email = Some(input.into());
        self
    }
    /// <p>The support email. The company's customer support email address.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_support_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_email = input;
        self
    }
    /// <p>The support link. The link for the company's customer support page for their WorkSpace.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive.You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn support_link(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_link = Some(input.into());
        self
    }
    /// <p>The support link. The link for the company's customer support page for their WorkSpace.</p> <note>
    /// <ul>
    /// <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive.You can specify one parameter for each platform type, but not both.</p> </li>
    /// <li> <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_support_link(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_link = input;
        self
    }
    /// <p>The forgotten password link. This is the web address that users can go to if they forget the password for their WorkSpace.</p>
    pub fn forgot_password_link(mut self, input: impl Into<std::string::String>) -> Self {
        self.forgot_password_link = Some(input.into());
        self
    }
    /// <p>The forgotten password link. This is the web address that users can go to if they forget the password for their WorkSpace.</p>
    pub fn set_forgot_password_link(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.forgot_password_link = input;
        self
    }
    /// Adds a key-value pair to `login_message`.
    ///
    /// To override the contents of this collection use [`set_login_message`](Self::set_login_message).
    ///
    /// <p>The login message. Specified as a key value pair, in which the key is a locale and the value is the localized message for that locale. The only key supported is <code>en_US</code>. The HTML tags supported include the following: <code>a, b, blockquote, br, cite, code, dd, dl, dt, div, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>.</p>
    pub fn login_message(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.login_message.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.login_message = Some(hash_map);
        self
    }
    /// <p>The login message. Specified as a key value pair, in which the key is a locale and the value is the localized message for that locale. The only key supported is <code>en_US</code>. The HTML tags supported include the following: <code>a, b, blockquote, br, cite, code, dd, dl, dt, div, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>.</p>
    pub fn set_login_message(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.login_message = input;
        self
    }
    /// Consumes the builder and constructs a [`DefaultClientBrandingAttributes`](crate::types::DefaultClientBrandingAttributes).
    pub fn build(self) -> crate::types::DefaultClientBrandingAttributes {
        crate::types::DefaultClientBrandingAttributes {
            logo_url: self.logo_url,
            support_email: self.support_email,
            support_link: self.support_link,
            forgot_password_link: self.forgot_password_link,
            login_message: self.login_message,
        }
    }
}
