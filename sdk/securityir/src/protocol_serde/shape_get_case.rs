// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_case_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_case::GetCaseOutput, crate::operation::get_case::GetCaseError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_case::GetCaseError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::get_case::GetCaseError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "ConflictException" => crate::operation::get_case::GetCaseError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::conflict_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::get_case::GetCaseError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                output = output.set_retry_after_seconds(
                    crate::protocol_serde::shape_internal_server_exception::de_retry_after_seconds_header(_response_headers).map_err(|_| {
                        crate::operation::get_case::GetCaseError::unhandled("Failed to parse retryAfterSeconds from header `Retry-After")
                    })?,
                );
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "InvalidTokenException" => crate::operation::get_case::GetCaseError::InvalidTokenException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTokenExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_token_exception::de_invalid_token_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_token_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "ResourceNotFoundException" => crate::operation::get_case::GetCaseError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::resource_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "SecurityIncidentResponseNotActiveException" => crate::operation::get_case::GetCaseError::SecurityIncidentResponseNotActiveException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::SecurityIncidentResponseNotActiveExceptionBuilder::default();
                output = crate::protocol_serde::shape_security_incident_response_not_active_exception::de_security_incident_response_not_active_exception_json_err(_response_body, output).map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::security_incident_response_not_active_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "ServiceQuotaExceededException" => crate::operation::get_case::GetCaseError::ServiceQuotaExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_quota_exceeded_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "ThrottlingException" => crate::operation::get_case::GetCaseError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                output = output.set_retry_after_seconds(
                    crate::protocol_serde::shape_throttling_exception::de_retry_after_seconds_header(_response_headers).map_err(|_| {
                        crate::operation::get_case::GetCaseError::unhandled("Failed to parse retryAfterSeconds from header `Retry-After")
                    })?,
                );
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::get_case::GetCaseError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_case::GetCaseError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::get_case::GetCaseError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_case_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_case::GetCaseOutput, crate::operation::get_case::GetCaseError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_case::builders::GetCaseOutputBuilder::default();
        output = crate::protocol_serde::shape_get_case::de_get_case(_response_body, output)
            .map_err(crate::operation::get_case::GetCaseError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub(crate) fn de_get_case(
    value: &[u8],
    mut builder: crate::operation::get_case::builders::GetCaseOutputBuilder,
) -> ::std::result::Result<crate::operation::get_case::builders::GetCaseOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "actualIncidentStartDate" => {
                    builder = builder.set_actual_incident_start_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "caseArn" => {
                    builder = builder.set_case_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "caseAttachments" => {
                    builder = builder.set_case_attachments(crate::protocol_serde::shape_case_attachments_list::de_case_attachments_list(tokens)?);
                }
                "caseStatus" => {
                    builder = builder.set_case_status(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::CaseStatus::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "closedDate" => {
                    builder = builder.set_closed_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "closureCode" => {
                    builder = builder.set_closure_code(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::ClosureCode::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "createdDate" => {
                    builder = builder.set_created_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "description" => {
                    builder = builder.set_description(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "engagementType" => {
                    builder = builder.set_engagement_type(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::EngagementType::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "impactedAccounts" => {
                    builder = builder.set_impacted_accounts(crate::protocol_serde::shape_impacted_accounts::de_impacted_accounts(tokens)?);
                }
                "impactedAwsRegions" => {
                    builder = builder.set_impacted_aws_regions(crate::protocol_serde::shape_impacted_aws_region_list::de_impacted_aws_region_list(
                        tokens,
                    )?);
                }
                "impactedServices" => {
                    builder = builder.set_impacted_services(crate::protocol_serde::shape_impacted_services_list::de_impacted_services_list(tokens)?);
                }
                "lastUpdatedDate" => {
                    builder = builder.set_last_updated_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "pendingAction" => {
                    builder = builder.set_pending_action(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::PendingAction::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "reportedIncidentStartDate" => {
                    builder = builder.set_reported_incident_start_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "resolverType" => {
                    builder = builder.set_resolver_type(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::ResolverType::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "threatActorIpAddresses" => {
                    builder =
                        builder.set_threat_actor_ip_addresses(crate::protocol_serde::shape_threat_actor_ip_list::de_threat_actor_ip_list(tokens)?);
                }
                "title" => {
                    builder = builder.set_title(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "watchers" => {
                    builder = builder.set_watchers(crate::protocol_serde::shape_watchers::de_watchers(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {other:?}"
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
