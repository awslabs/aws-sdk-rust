// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_organization_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_organization_insights::ListOrganizationInsightsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("AccountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.next_token {
        object.key("NextToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.organizational_unit_ids {
        let mut array_7 = object.key("OrganizationalUnitIds").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.status_filter {
        #[allow(unused_mut)]
        let mut object_10 = object.key("StatusFilter").start_object();
        crate::protocol_serde::shape_list_insights_status_filter::ser_list_insights_status_filter(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    Ok(())
}
