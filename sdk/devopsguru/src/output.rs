// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateServiceIntegrationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateServiceIntegrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateServiceIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceIntegrationOutput`](crate::output::UpdateServiceIntegrationOutput).
    pub fn builder() -> crate::output::update_service_integration_output::Builder {
        crate::output::update_service_integration_output::Builder::default()
    }
}

/// See [`UpdateServiceIntegrationOutput`](crate::output::UpdateServiceIntegrationOutput).
pub mod update_service_integration_output {

    /// A builder for [`UpdateServiceIntegrationOutput`](crate::output::UpdateServiceIntegrationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateServiceIntegrationOutput`](crate::output::UpdateServiceIntegrationOutput).
        pub fn build(self) -> crate::output::UpdateServiceIntegrationOutput {
            crate::output::UpdateServiceIntegrationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateResourceCollectionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateResourceCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateResourceCollectionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceCollectionOutput`](crate::output::UpdateResourceCollectionOutput).
    pub fn builder() -> crate::output::update_resource_collection_output::Builder {
        crate::output::update_resource_collection_output::Builder::default()
    }
}

/// See [`UpdateResourceCollectionOutput`](crate::output::UpdateResourceCollectionOutput).
pub mod update_resource_collection_output {

    /// A builder for [`UpdateResourceCollectionOutput`](crate::output::UpdateResourceCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateResourceCollectionOutput`](crate::output::UpdateResourceCollectionOutput).
        pub fn build(self) -> crate::output::UpdateResourceCollectionOutput {
            crate::output::UpdateResourceCollectionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEventSourcesConfigOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateEventSourcesConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateEventSourcesConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEventSourcesConfigOutput`](crate::output::UpdateEventSourcesConfigOutput).
    pub fn builder() -> crate::output::update_event_sources_config_output::Builder {
        crate::output::update_event_sources_config_output::Builder::default()
    }
}

/// See [`UpdateEventSourcesConfigOutput`](crate::output::UpdateEventSourcesConfigOutput).
pub mod update_event_sources_config_output {

    /// A builder for [`UpdateEventSourcesConfigOutput`](crate::output::UpdateEventSourcesConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEventSourcesConfigOutput`](crate::output::UpdateEventSourcesConfigOutput).
        pub fn build(self) -> crate::output::UpdateEventSourcesConfigOutput {
            crate::output::UpdateEventSourcesConfigOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartCostEstimationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartCostEstimationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartCostEstimationOutput {
    /// Creates a new builder-style object to manufacture [`StartCostEstimationOutput`](crate::output::StartCostEstimationOutput).
    pub fn builder() -> crate::output::start_cost_estimation_output::Builder {
        crate::output::start_cost_estimation_output::Builder::default()
    }
}

/// See [`StartCostEstimationOutput`](crate::output::StartCostEstimationOutput).
pub mod start_cost_estimation_output {

    /// A builder for [`StartCostEstimationOutput`](crate::output::StartCostEstimationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartCostEstimationOutput`](crate::output::StartCostEstimationOutput).
        pub fn build(self) -> crate::output::StartCostEstimationOutput {
            crate::output::StartCostEstimationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchOrganizationInsightsOutput {
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub proactive_insights:
        std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub reactive_insights: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchOrganizationInsightsOutput {
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    pub fn proactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ProactiveInsightSummary]> {
        self.proactive_insights.as_deref()
    }
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    pub fn reactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ReactiveInsightSummary]> {
        self.reactive_insights.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchOrganizationInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchOrganizationInsightsOutput {
    /// Creates a new builder-style object to manufacture [`SearchOrganizationInsightsOutput`](crate::output::SearchOrganizationInsightsOutput).
    pub fn builder() -> crate::output::search_organization_insights_output::Builder {
        crate::output::search_organization_insights_output::Builder::default()
    }
}

/// See [`SearchOrganizationInsightsOutput`](crate::output::SearchOrganizationInsightsOutput).
pub mod search_organization_insights_output {

    /// A builder for [`SearchOrganizationInsightsOutput`](crate::output::SearchOrganizationInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        pub(crate) reactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proactive_insights`.
        ///
        /// To override the contents of this collection use [`set_proactive_insights`](Self::set_proactive_insights).
        ///
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn proactive_insights(mut self, input: crate::model::ProactiveInsightSummary) -> Self {
            let mut v = self.proactive_insights.unwrap_or_default();
            v.push(input);
            self.proactive_insights = Some(v);
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn set_proactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        ) -> Self {
            self.proactive_insights = input;
            self
        }
        /// Appends an item to `reactive_insights`.
        ///
        /// To override the contents of this collection use [`set_reactive_insights`](Self::set_reactive_insights).
        ///
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn reactive_insights(mut self, input: crate::model::ReactiveInsightSummary) -> Self {
            let mut v = self.reactive_insights.unwrap_or_default();
            v.push(input);
            self.reactive_insights = Some(v);
            self
        }
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn set_reactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        ) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchOrganizationInsightsOutput`](crate::output::SearchOrganizationInsightsOutput).
        pub fn build(self) -> crate::output::SearchOrganizationInsightsOutput {
            crate::output::SearchOrganizationInsightsOutput {
                proactive_insights: self.proactive_insights,
                reactive_insights: self.reactive_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchInsightsOutput {
    /// <p> The returned proactive insights. </p>
    #[doc(hidden)]
    pub proactive_insights:
        std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
    /// <p> The returned reactive insights. </p>
    #[doc(hidden)]
    pub reactive_insights: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchInsightsOutput {
    /// <p> The returned proactive insights. </p>
    pub fn proactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ProactiveInsightSummary]> {
        self.proactive_insights.as_deref()
    }
    /// <p> The returned reactive insights. </p>
    pub fn reactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ReactiveInsightSummary]> {
        self.reactive_insights.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchInsightsOutput {
    /// Creates a new builder-style object to manufacture [`SearchInsightsOutput`](crate::output::SearchInsightsOutput).
    pub fn builder() -> crate::output::search_insights_output::Builder {
        crate::output::search_insights_output::Builder::default()
    }
}

/// See [`SearchInsightsOutput`](crate::output::SearchInsightsOutput).
pub mod search_insights_output {

    /// A builder for [`SearchInsightsOutput`](crate::output::SearchInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        pub(crate) reactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proactive_insights`.
        ///
        /// To override the contents of this collection use [`set_proactive_insights`](Self::set_proactive_insights).
        ///
        /// <p> The returned proactive insights. </p>
        pub fn proactive_insights(mut self, input: crate::model::ProactiveInsightSummary) -> Self {
            let mut v = self.proactive_insights.unwrap_or_default();
            v.push(input);
            self.proactive_insights = Some(v);
            self
        }
        /// <p> The returned proactive insights. </p>
        pub fn set_proactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        ) -> Self {
            self.proactive_insights = input;
            self
        }
        /// Appends an item to `reactive_insights`.
        ///
        /// To override the contents of this collection use [`set_reactive_insights`](Self::set_reactive_insights).
        ///
        /// <p> The returned reactive insights. </p>
        pub fn reactive_insights(mut self, input: crate::model::ReactiveInsightSummary) -> Self {
            let mut v = self.reactive_insights.unwrap_or_default();
            v.push(input);
            self.reactive_insights = Some(v);
            self
        }
        /// <p> The returned reactive insights. </p>
        pub fn set_reactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        ) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchInsightsOutput`](crate::output::SearchInsightsOutput).
        pub fn build(self) -> crate::output::SearchInsightsOutput {
            crate::output::SearchInsightsOutput {
                proactive_insights: self.proactive_insights,
                reactive_insights: self.reactive_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RemoveNotificationChannelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for RemoveNotificationChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RemoveNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`RemoveNotificationChannelOutput`](crate::output::RemoveNotificationChannelOutput).
    pub fn builder() -> crate::output::remove_notification_channel_output::Builder {
        crate::output::remove_notification_channel_output::Builder::default()
    }
}

/// See [`RemoveNotificationChannelOutput`](crate::output::RemoveNotificationChannelOutput).
pub mod remove_notification_channel_output {

    /// A builder for [`RemoveNotificationChannelOutput`](crate::output::RemoveNotificationChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RemoveNotificationChannelOutput`](crate::output::RemoveNotificationChannelOutput).
        pub fn build(self) -> crate::output::RemoveNotificationChannelOutput {
            crate::output::RemoveNotificationChannelOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutFeedbackOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutFeedbackOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutFeedbackOutput {
    /// Creates a new builder-style object to manufacture [`PutFeedbackOutput`](crate::output::PutFeedbackOutput).
    pub fn builder() -> crate::output::put_feedback_output::Builder {
        crate::output::put_feedback_output::Builder::default()
    }
}

/// See [`PutFeedbackOutput`](crate::output::PutFeedbackOutput).
pub mod put_feedback_output {

    /// A builder for [`PutFeedbackOutput`](crate::output::PutFeedbackOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutFeedbackOutput`](crate::output::PutFeedbackOutput).
        pub fn build(self) -> crate::output::PutFeedbackOutput {
            crate::output::PutFeedbackOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListRecommendationsOutput {
    /// <p> An array of the requested recommendations. </p>
    #[doc(hidden)]
    pub recommendations: std::option::Option<std::vec::Vec<crate::model::Recommendation>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListRecommendationsOutput {
    /// <p> An array of the requested recommendations. </p>
    pub fn recommendations(&self) -> std::option::Option<&[crate::model::Recommendation]> {
        self.recommendations.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListRecommendationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRecommendationsOutput {
    /// Creates a new builder-style object to manufacture [`ListRecommendationsOutput`](crate::output::ListRecommendationsOutput).
    pub fn builder() -> crate::output::list_recommendations_output::Builder {
        crate::output::list_recommendations_output::Builder::default()
    }
}

/// See [`ListRecommendationsOutput`](crate::output::ListRecommendationsOutput).
pub mod list_recommendations_output {

    /// A builder for [`ListRecommendationsOutput`](crate::output::ListRecommendationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommendations:
            std::option::Option<std::vec::Vec<crate::model::Recommendation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `recommendations`.
        ///
        /// To override the contents of this collection use [`set_recommendations`](Self::set_recommendations).
        ///
        /// <p> An array of the requested recommendations. </p>
        pub fn recommendations(mut self, input: crate::model::Recommendation) -> Self {
            let mut v = self.recommendations.unwrap_or_default();
            v.push(input);
            self.recommendations = Some(v);
            self
        }
        /// <p> An array of the requested recommendations. </p>
        pub fn set_recommendations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Recommendation>>,
        ) -> Self {
            self.recommendations = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListRecommendationsOutput`](crate::output::ListRecommendationsOutput).
        pub fn build(self) -> crate::output::ListRecommendationsOutput {
            crate::output::ListRecommendationsOutput {
                recommendations: self.recommendations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrganizationInsightsOutput {
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub proactive_insights:
        std::option::Option<std::vec::Vec<crate::model::ProactiveOrganizationInsightSummary>>,
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub reactive_insights:
        std::option::Option<std::vec::Vec<crate::model::ReactiveOrganizationInsightSummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOrganizationInsightsOutput {
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    pub fn proactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ProactiveOrganizationInsightSummary]> {
        self.proactive_insights.as_deref()
    }
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    pub fn reactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ReactiveOrganizationInsightSummary]> {
        self.reactive_insights.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOrganizationInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListOrganizationInsightsOutput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationInsightsOutput`](crate::output::ListOrganizationInsightsOutput).
    pub fn builder() -> crate::output::list_organization_insights_output::Builder {
        crate::output::list_organization_insights_output::Builder::default()
    }
}

/// See [`ListOrganizationInsightsOutput`](crate::output::ListOrganizationInsightsOutput).
pub mod list_organization_insights_output {

    /// A builder for [`ListOrganizationInsightsOutput`](crate::output::ListOrganizationInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ProactiveOrganizationInsightSummary>>,
        pub(crate) reactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ReactiveOrganizationInsightSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proactive_insights`.
        ///
        /// To override the contents of this collection use [`set_proactive_insights`](Self::set_proactive_insights).
        ///
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn proactive_insights(
            mut self,
            input: crate::model::ProactiveOrganizationInsightSummary,
        ) -> Self {
            let mut v = self.proactive_insights.unwrap_or_default();
            v.push(input);
            self.proactive_insights = Some(v);
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn set_proactive_insights(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ProactiveOrganizationInsightSummary>,
            >,
        ) -> Self {
            self.proactive_insights = input;
            self
        }
        /// Appends an item to `reactive_insights`.
        ///
        /// To override the contents of this collection use [`set_reactive_insights`](Self::set_reactive_insights).
        ///
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn reactive_insights(
            mut self,
            input: crate::model::ReactiveOrganizationInsightSummary,
        ) -> Self {
            let mut v = self.reactive_insights.unwrap_or_default();
            v.push(input);
            self.reactive_insights = Some(v);
            self
        }
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn set_reactive_insights(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ReactiveOrganizationInsightSummary>,
            >,
        ) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOrganizationInsightsOutput`](crate::output::ListOrganizationInsightsOutput).
        pub fn build(self) -> crate::output::ListOrganizationInsightsOutput {
            crate::output::ListOrganizationInsightsOutput {
                proactive_insights: self.proactive_insights,
                reactive_insights: self.reactive_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNotificationChannelsOutput {
    /// <p> An array that contains the requested notification channels. </p>
    #[doc(hidden)]
    pub channels: std::option::Option<std::vec::Vec<crate::model::NotificationChannel>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListNotificationChannelsOutput {
    /// <p> An array that contains the requested notification channels. </p>
    pub fn channels(&self) -> std::option::Option<&[crate::model::NotificationChannel]> {
        self.channels.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListNotificationChannelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListNotificationChannelsOutput {
    /// Creates a new builder-style object to manufacture [`ListNotificationChannelsOutput`](crate::output::ListNotificationChannelsOutput).
    pub fn builder() -> crate::output::list_notification_channels_output::Builder {
        crate::output::list_notification_channels_output::Builder::default()
    }
}

/// See [`ListNotificationChannelsOutput`](crate::output::ListNotificationChannelsOutput).
pub mod list_notification_channels_output {

    /// A builder for [`ListNotificationChannelsOutput`](crate::output::ListNotificationChannelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channels: std::option::Option<std::vec::Vec<crate::model::NotificationChannel>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `channels`.
        ///
        /// To override the contents of this collection use [`set_channels`](Self::set_channels).
        ///
        /// <p> An array that contains the requested notification channels. </p>
        pub fn channels(mut self, input: crate::model::NotificationChannel) -> Self {
            let mut v = self.channels.unwrap_or_default();
            v.push(input);
            self.channels = Some(v);
            self
        }
        /// <p> An array that contains the requested notification channels. </p>
        pub fn set_channels(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NotificationChannel>>,
        ) -> Self {
            self.channels = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListNotificationChannelsOutput`](crate::output::ListNotificationChannelsOutput).
        pub fn build(self) -> crate::output::ListNotificationChannelsOutput {
            crate::output::ListNotificationChannelsOutput {
                channels: self.channels,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMonitoredResourcesOutput {
    /// <p> Information about the resource that is being monitored, including the name of the resource, the type of resource, and whether or not permission is given to DevOps Guru to access that resource. </p>
    #[doc(hidden)]
    pub monitored_resource_identifiers:
        std::option::Option<std::vec::Vec<crate::model::MonitoredResourceIdentifier>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMonitoredResourcesOutput {
    /// <p> Information about the resource that is being monitored, including the name of the resource, the type of resource, and whether or not permission is given to DevOps Guru to access that resource. </p>
    pub fn monitored_resource_identifiers(
        &self,
    ) -> std::option::Option<&[crate::model::MonitoredResourceIdentifier]> {
        self.monitored_resource_identifiers.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMonitoredResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMonitoredResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListMonitoredResourcesOutput`](crate::output::ListMonitoredResourcesOutput).
    pub fn builder() -> crate::output::list_monitored_resources_output::Builder {
        crate::output::list_monitored_resources_output::Builder::default()
    }
}

/// See [`ListMonitoredResourcesOutput`](crate::output::ListMonitoredResourcesOutput).
pub mod list_monitored_resources_output {

    /// A builder for [`ListMonitoredResourcesOutput`](crate::output::ListMonitoredResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) monitored_resource_identifiers:
            std::option::Option<std::vec::Vec<crate::model::MonitoredResourceIdentifier>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `monitored_resource_identifiers`.
        ///
        /// To override the contents of this collection use [`set_monitored_resource_identifiers`](Self::set_monitored_resource_identifiers).
        ///
        /// <p> Information about the resource that is being monitored, including the name of the resource, the type of resource, and whether or not permission is given to DevOps Guru to access that resource. </p>
        pub fn monitored_resource_identifiers(
            mut self,
            input: crate::model::MonitoredResourceIdentifier,
        ) -> Self {
            let mut v = self.monitored_resource_identifiers.unwrap_or_default();
            v.push(input);
            self.monitored_resource_identifiers = Some(v);
            self
        }
        /// <p> Information about the resource that is being monitored, including the name of the resource, the type of resource, and whether or not permission is given to DevOps Guru to access that resource. </p>
        pub fn set_monitored_resource_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MonitoredResourceIdentifier>>,
        ) -> Self {
            self.monitored_resource_identifiers = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMonitoredResourcesOutput`](crate::output::ListMonitoredResourcesOutput).
        pub fn build(self) -> crate::output::ListMonitoredResourcesOutput {
            crate::output::ListMonitoredResourcesOutput {
                monitored_resource_identifiers: self.monitored_resource_identifiers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInsightsOutput {
    /// <p> The returned list of proactive insights. </p>
    #[doc(hidden)]
    pub proactive_insights:
        std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
    /// <p> The returned list of reactive insights. </p>
    #[doc(hidden)]
    pub reactive_insights: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListInsightsOutput {
    /// <p> The returned list of proactive insights. </p>
    pub fn proactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ProactiveInsightSummary]> {
        self.proactive_insights.as_deref()
    }
    /// <p> The returned list of reactive insights. </p>
    pub fn reactive_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ReactiveInsightSummary]> {
        self.reactive_insights.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListInsightsOutput {
    /// Creates a new builder-style object to manufacture [`ListInsightsOutput`](crate::output::ListInsightsOutput).
    pub fn builder() -> crate::output::list_insights_output::Builder {
        crate::output::list_insights_output::Builder::default()
    }
}

/// See [`ListInsightsOutput`](crate::output::ListInsightsOutput).
pub mod list_insights_output {

    /// A builder for [`ListInsightsOutput`](crate::output::ListInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        pub(crate) reactive_insights:
            std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proactive_insights`.
        ///
        /// To override the contents of this collection use [`set_proactive_insights`](Self::set_proactive_insights).
        ///
        /// <p> The returned list of proactive insights. </p>
        pub fn proactive_insights(mut self, input: crate::model::ProactiveInsightSummary) -> Self {
            let mut v = self.proactive_insights.unwrap_or_default();
            v.push(input);
            self.proactive_insights = Some(v);
            self
        }
        /// <p> The returned list of proactive insights. </p>
        pub fn set_proactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProactiveInsightSummary>>,
        ) -> Self {
            self.proactive_insights = input;
            self
        }
        /// Appends an item to `reactive_insights`.
        ///
        /// To override the contents of this collection use [`set_reactive_insights`](Self::set_reactive_insights).
        ///
        /// <p> The returned list of reactive insights. </p>
        pub fn reactive_insights(mut self, input: crate::model::ReactiveInsightSummary) -> Self {
            let mut v = self.reactive_insights.unwrap_or_default();
            v.push(input);
            self.reactive_insights = Some(v);
            self
        }
        /// <p> The returned list of reactive insights. </p>
        pub fn set_reactive_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReactiveInsightSummary>>,
        ) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListInsightsOutput`](crate::output::ListInsightsOutput).
        pub fn build(self) -> crate::output::ListInsightsOutput {
            crate::output::ListInsightsOutput {
                proactive_insights: self.proactive_insights,
                reactive_insights: self.reactive_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEventsOutput {
    /// <p> A list of the requested events. </p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<crate::model::Event>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEventsOutput {
    /// <p> A list of the requested events. </p>
    pub fn events(&self) -> std::option::Option<&[crate::model::Event]> {
        self.events.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEventsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListEventsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventsOutput`](crate::output::ListEventsOutput).
    pub fn builder() -> crate::output::list_events_output::Builder {
        crate::output::list_events_output::Builder::default()
    }
}

/// See [`ListEventsOutput`](crate::output::ListEventsOutput).
pub mod list_events_output {

    /// A builder for [`ListEventsOutput`](crate::output::ListEventsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events: std::option::Option<std::vec::Vec<crate::model::Event>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `events`.
        ///
        /// To override the contents of this collection use [`set_events`](Self::set_events).
        ///
        /// <p> A list of the requested events. </p>
        pub fn events(mut self, input: crate::model::Event) -> Self {
            let mut v = self.events.unwrap_or_default();
            v.push(input);
            self.events = Some(v);
            self
        }
        /// <p> A list of the requested events. </p>
        pub fn set_events(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Event>>,
        ) -> Self {
            self.events = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListEventsOutput`](crate::output::ListEventsOutput).
        pub fn build(self) -> crate::output::ListEventsOutput {
            crate::output::ListEventsOutput {
                events: self.events,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnomalousLogGroupsOutput {
    /// <p> The ID of the insight containing the log groups. </p>
    #[doc(hidden)]
    pub insight_id: std::option::Option<std::string::String>,
    /// <p> The list of Amazon CloudWatch log groups that are related to an insight. </p>
    #[doc(hidden)]
    pub anomalous_log_groups: std::option::Option<std::vec::Vec<crate::model::AnomalousLogGroup>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnomalousLogGroupsOutput {
    /// <p> The ID of the insight containing the log groups. </p>
    pub fn insight_id(&self) -> std::option::Option<&str> {
        self.insight_id.as_deref()
    }
    /// <p> The list of Amazon CloudWatch log groups that are related to an insight. </p>
    pub fn anomalous_log_groups(&self) -> std::option::Option<&[crate::model::AnomalousLogGroup]> {
        self.anomalous_log_groups.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnomalousLogGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAnomalousLogGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListAnomalousLogGroupsOutput`](crate::output::ListAnomalousLogGroupsOutput).
    pub fn builder() -> crate::output::list_anomalous_log_groups_output::Builder {
        crate::output::list_anomalous_log_groups_output::Builder::default()
    }
}

/// See [`ListAnomalousLogGroupsOutput`](crate::output::ListAnomalousLogGroupsOutput).
pub mod list_anomalous_log_groups_output {

    /// A builder for [`ListAnomalousLogGroupsOutput`](crate::output::ListAnomalousLogGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) insight_id: std::option::Option<std::string::String>,
        pub(crate) anomalous_log_groups:
            std::option::Option<std::vec::Vec<crate::model::AnomalousLogGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The ID of the insight containing the log groups. </p>
        pub fn insight_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.insight_id = Some(input.into());
            self
        }
        /// <p> The ID of the insight containing the log groups. </p>
        pub fn set_insight_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.insight_id = input;
            self
        }
        /// Appends an item to `anomalous_log_groups`.
        ///
        /// To override the contents of this collection use [`set_anomalous_log_groups`](Self::set_anomalous_log_groups).
        ///
        /// <p> The list of Amazon CloudWatch log groups that are related to an insight. </p>
        pub fn anomalous_log_groups(mut self, input: crate::model::AnomalousLogGroup) -> Self {
            let mut v = self.anomalous_log_groups.unwrap_or_default();
            v.push(input);
            self.anomalous_log_groups = Some(v);
            self
        }
        /// <p> The list of Amazon CloudWatch log groups that are related to an insight. </p>
        pub fn set_anomalous_log_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnomalousLogGroup>>,
        ) -> Self {
            self.anomalous_log_groups = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnomalousLogGroupsOutput`](crate::output::ListAnomalousLogGroupsOutput).
        pub fn build(self) -> crate::output::ListAnomalousLogGroupsOutput {
            crate::output::ListAnomalousLogGroupsOutput {
                insight_id: self.insight_id,
                anomalous_log_groups: self.anomalous_log_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnomaliesForInsightOutput {
    /// <p> An array of <code>ProactiveAnomalySummary</code> objects that represent the requested anomalies </p>
    #[doc(hidden)]
    pub proactive_anomalies:
        std::option::Option<std::vec::Vec<crate::model::ProactiveAnomalySummary>>,
    /// <p> An array of <code>ReactiveAnomalySummary</code> objects that represent the requested anomalies </p>
    #[doc(hidden)]
    pub reactive_anomalies:
        std::option::Option<std::vec::Vec<crate::model::ReactiveAnomalySummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnomaliesForInsightOutput {
    /// <p> An array of <code>ProactiveAnomalySummary</code> objects that represent the requested anomalies </p>
    pub fn proactive_anomalies(
        &self,
    ) -> std::option::Option<&[crate::model::ProactiveAnomalySummary]> {
        self.proactive_anomalies.as_deref()
    }
    /// <p> An array of <code>ReactiveAnomalySummary</code> objects that represent the requested anomalies </p>
    pub fn reactive_anomalies(
        &self,
    ) -> std::option::Option<&[crate::model::ReactiveAnomalySummary]> {
        self.reactive_anomalies.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnomaliesForInsightOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAnomaliesForInsightOutput {
    /// Creates a new builder-style object to manufacture [`ListAnomaliesForInsightOutput`](crate::output::ListAnomaliesForInsightOutput).
    pub fn builder() -> crate::output::list_anomalies_for_insight_output::Builder {
        crate::output::list_anomalies_for_insight_output::Builder::default()
    }
}

/// See [`ListAnomaliesForInsightOutput`](crate::output::ListAnomaliesForInsightOutput).
pub mod list_anomalies_for_insight_output {

    /// A builder for [`ListAnomaliesForInsightOutput`](crate::output::ListAnomaliesForInsightOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_anomalies:
            std::option::Option<std::vec::Vec<crate::model::ProactiveAnomalySummary>>,
        pub(crate) reactive_anomalies:
            std::option::Option<std::vec::Vec<crate::model::ReactiveAnomalySummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `proactive_anomalies`.
        ///
        /// To override the contents of this collection use [`set_proactive_anomalies`](Self::set_proactive_anomalies).
        ///
        /// <p> An array of <code>ProactiveAnomalySummary</code> objects that represent the requested anomalies </p>
        pub fn proactive_anomalies(mut self, input: crate::model::ProactiveAnomalySummary) -> Self {
            let mut v = self.proactive_anomalies.unwrap_or_default();
            v.push(input);
            self.proactive_anomalies = Some(v);
            self
        }
        /// <p> An array of <code>ProactiveAnomalySummary</code> objects that represent the requested anomalies </p>
        pub fn set_proactive_anomalies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProactiveAnomalySummary>>,
        ) -> Self {
            self.proactive_anomalies = input;
            self
        }
        /// Appends an item to `reactive_anomalies`.
        ///
        /// To override the contents of this collection use [`set_reactive_anomalies`](Self::set_reactive_anomalies).
        ///
        /// <p> An array of <code>ReactiveAnomalySummary</code> objects that represent the requested anomalies </p>
        pub fn reactive_anomalies(mut self, input: crate::model::ReactiveAnomalySummary) -> Self {
            let mut v = self.reactive_anomalies.unwrap_or_default();
            v.push(input);
            self.reactive_anomalies = Some(v);
            self
        }
        /// <p> An array of <code>ReactiveAnomalySummary</code> objects that represent the requested anomalies </p>
        pub fn set_reactive_anomalies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReactiveAnomalySummary>>,
        ) -> Self {
            self.reactive_anomalies = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnomaliesForInsightOutput`](crate::output::ListAnomaliesForInsightOutput).
        pub fn build(self) -> crate::output::ListAnomaliesForInsightOutput {
            crate::output::ListAnomaliesForInsightOutput {
                proactive_anomalies: self.proactive_anomalies,
                reactive_anomalies: self.reactive_anomalies,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetResourceCollectionOutput {
    /// <p> The requested list of Amazon Web Services resource collections. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    #[doc(hidden)]
    pub resource_collection: std::option::Option<crate::model::ResourceCollectionFilter>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetResourceCollectionOutput {
    /// <p> The requested list of Amazon Web Services resource collections. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn resource_collection(
        &self,
    ) -> std::option::Option<&crate::model::ResourceCollectionFilter> {
        self.resource_collection.as_ref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetResourceCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceCollectionOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceCollectionOutput`](crate::output::GetResourceCollectionOutput).
    pub fn builder() -> crate::output::get_resource_collection_output::Builder {
        crate::output::get_resource_collection_output::Builder::default()
    }
}

/// See [`GetResourceCollectionOutput`](crate::output::GetResourceCollectionOutput).
pub mod get_resource_collection_output {

    /// A builder for [`GetResourceCollectionOutput`](crate::output::GetResourceCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_collection: std::option::Option<crate::model::ResourceCollectionFilter>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The requested list of Amazon Web Services resource collections. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
        pub fn resource_collection(
            mut self,
            input: crate::model::ResourceCollectionFilter,
        ) -> Self {
            self.resource_collection = Some(input);
            self
        }
        /// <p> The requested list of Amazon Web Services resource collections. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
        pub fn set_resource_collection(
            mut self,
            input: std::option::Option<crate::model::ResourceCollectionFilter>,
        ) -> Self {
            self.resource_collection = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetResourceCollectionOutput`](crate::output::GetResourceCollectionOutput).
        pub fn build(self) -> crate::output::GetResourceCollectionOutput {
            crate::output::GetResourceCollectionOutput {
                resource_collection: self.resource_collection,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCostEstimationOutput {
    /// <p>The collection of the Amazon Web Services resources used to create your monthly DevOps Guru cost estimate.</p>
    #[doc(hidden)]
    pub resource_collection:
        std::option::Option<crate::model::CostEstimationResourceCollectionFilter>,
    /// <p>The status of creating this cost estimate. If it's still in progress, the status <code>ONGOING</code> is returned. If it is finished, the status <code>COMPLETED</code> is returned.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CostEstimationStatus>,
    /// <p>An array of <code>ResourceCost</code> objects that each contains details about the monthly cost estimate to analyze one of your Amazon Web Services resources.</p>
    #[doc(hidden)]
    pub costs: std::option::Option<std::vec::Vec<crate::model::ServiceResourceCost>>,
    /// <p>The start and end time of the cost estimation.</p>
    #[doc(hidden)]
    pub time_range: std::option::Option<crate::model::CostEstimationTimeRange>,
    /// <p>The estimated monthly cost to analyze the Amazon Web Services resources. This value is the sum of the estimated costs to analyze each resource in the <code>Costs</code> object in this response.</p>
    #[doc(hidden)]
    pub total_cost: f64,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetCostEstimationOutput {
    /// <p>The collection of the Amazon Web Services resources used to create your monthly DevOps Guru cost estimate.</p>
    pub fn resource_collection(
        &self,
    ) -> std::option::Option<&crate::model::CostEstimationResourceCollectionFilter> {
        self.resource_collection.as_ref()
    }
    /// <p>The status of creating this cost estimate. If it's still in progress, the status <code>ONGOING</code> is returned. If it is finished, the status <code>COMPLETED</code> is returned.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CostEstimationStatus> {
        self.status.as_ref()
    }
    /// <p>An array of <code>ResourceCost</code> objects that each contains details about the monthly cost estimate to analyze one of your Amazon Web Services resources.</p>
    pub fn costs(&self) -> std::option::Option<&[crate::model::ServiceResourceCost]> {
        self.costs.as_deref()
    }
    /// <p>The start and end time of the cost estimation.</p>
    pub fn time_range(&self) -> std::option::Option<&crate::model::CostEstimationTimeRange> {
        self.time_range.as_ref()
    }
    /// <p>The estimated monthly cost to analyze the Amazon Web Services resources. This value is the sum of the estimated costs to analyze each resource in the <code>Costs</code> object in this response.</p>
    pub fn total_cost(&self) -> f64 {
        self.total_cost
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCostEstimationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCostEstimationOutput {
    /// Creates a new builder-style object to manufacture [`GetCostEstimationOutput`](crate::output::GetCostEstimationOutput).
    pub fn builder() -> crate::output::get_cost_estimation_output::Builder {
        crate::output::get_cost_estimation_output::Builder::default()
    }
}

/// See [`GetCostEstimationOutput`](crate::output::GetCostEstimationOutput).
pub mod get_cost_estimation_output {

    /// A builder for [`GetCostEstimationOutput`](crate::output::GetCostEstimationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_collection:
            std::option::Option<crate::model::CostEstimationResourceCollectionFilter>,
        pub(crate) status: std::option::Option<crate::model::CostEstimationStatus>,
        pub(crate) costs: std::option::Option<std::vec::Vec<crate::model::ServiceResourceCost>>,
        pub(crate) time_range: std::option::Option<crate::model::CostEstimationTimeRange>,
        pub(crate) total_cost: std::option::Option<f64>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The collection of the Amazon Web Services resources used to create your monthly DevOps Guru cost estimate.</p>
        pub fn resource_collection(
            mut self,
            input: crate::model::CostEstimationResourceCollectionFilter,
        ) -> Self {
            self.resource_collection = Some(input);
            self
        }
        /// <p>The collection of the Amazon Web Services resources used to create your monthly DevOps Guru cost estimate.</p>
        pub fn set_resource_collection(
            mut self,
            input: std::option::Option<crate::model::CostEstimationResourceCollectionFilter>,
        ) -> Self {
            self.resource_collection = input;
            self
        }
        /// <p>The status of creating this cost estimate. If it's still in progress, the status <code>ONGOING</code> is returned. If it is finished, the status <code>COMPLETED</code> is returned.</p>
        pub fn status(mut self, input: crate::model::CostEstimationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of creating this cost estimate. If it's still in progress, the status <code>ONGOING</code> is returned. If it is finished, the status <code>COMPLETED</code> is returned.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CostEstimationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `costs`.
        ///
        /// To override the contents of this collection use [`set_costs`](Self::set_costs).
        ///
        /// <p>An array of <code>ResourceCost</code> objects that each contains details about the monthly cost estimate to analyze one of your Amazon Web Services resources.</p>
        pub fn costs(mut self, input: crate::model::ServiceResourceCost) -> Self {
            let mut v = self.costs.unwrap_or_default();
            v.push(input);
            self.costs = Some(v);
            self
        }
        /// <p>An array of <code>ResourceCost</code> objects that each contains details about the monthly cost estimate to analyze one of your Amazon Web Services resources.</p>
        pub fn set_costs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceResourceCost>>,
        ) -> Self {
            self.costs = input;
            self
        }
        /// <p>The start and end time of the cost estimation.</p>
        pub fn time_range(mut self, input: crate::model::CostEstimationTimeRange) -> Self {
            self.time_range = Some(input);
            self
        }
        /// <p>The start and end time of the cost estimation.</p>
        pub fn set_time_range(
            mut self,
            input: std::option::Option<crate::model::CostEstimationTimeRange>,
        ) -> Self {
            self.time_range = input;
            self
        }
        /// <p>The estimated monthly cost to analyze the Amazon Web Services resources. This value is the sum of the estimated costs to analyze each resource in the <code>Costs</code> object in this response.</p>
        pub fn total_cost(mut self, input: f64) -> Self {
            self.total_cost = Some(input);
            self
        }
        /// <p>The estimated monthly cost to analyze the Amazon Web Services resources. This value is the sum of the estimated costs to analyze each resource in the <code>Costs</code> object in this response.</p>
        pub fn set_total_cost(mut self, input: std::option::Option<f64>) -> Self {
            self.total_cost = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCostEstimationOutput`](crate::output::GetCostEstimationOutput).
        pub fn build(self) -> crate::output::GetCostEstimationOutput {
            crate::output::GetCostEstimationOutput {
                resource_collection: self.resource_collection,
                status: self.status,
                costs: self.costs,
                time_range: self.time_range,
                total_cost: self.total_cost.unwrap_or_default(),
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeServiceIntegrationOutput {
    /// <p> Information about the integration of DevOps Guru with another Amazon Web Services service, such as Amazon Web Services Systems Manager. </p>
    #[doc(hidden)]
    pub service_integration: std::option::Option<crate::model::ServiceIntegrationConfig>,
    _request_id: Option<String>,
}
impl DescribeServiceIntegrationOutput {
    /// <p> Information about the integration of DevOps Guru with another Amazon Web Services service, such as Amazon Web Services Systems Manager. </p>
    pub fn service_integration(
        &self,
    ) -> std::option::Option<&crate::model::ServiceIntegrationConfig> {
        self.service_integration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeServiceIntegrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServiceIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServiceIntegrationOutput`](crate::output::DescribeServiceIntegrationOutput).
    pub fn builder() -> crate::output::describe_service_integration_output::Builder {
        crate::output::describe_service_integration_output::Builder::default()
    }
}

/// See [`DescribeServiceIntegrationOutput`](crate::output::DescribeServiceIntegrationOutput).
pub mod describe_service_integration_output {

    /// A builder for [`DescribeServiceIntegrationOutput`](crate::output::DescribeServiceIntegrationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_integration: std::option::Option<crate::model::ServiceIntegrationConfig>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Information about the integration of DevOps Guru with another Amazon Web Services service, such as Amazon Web Services Systems Manager. </p>
        pub fn service_integration(
            mut self,
            input: crate::model::ServiceIntegrationConfig,
        ) -> Self {
            self.service_integration = Some(input);
            self
        }
        /// <p> Information about the integration of DevOps Guru with another Amazon Web Services service, such as Amazon Web Services Systems Manager. </p>
        pub fn set_service_integration(
            mut self,
            input: std::option::Option<crate::model::ServiceIntegrationConfig>,
        ) -> Self {
            self.service_integration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeServiceIntegrationOutput`](crate::output::DescribeServiceIntegrationOutput).
        pub fn build(self) -> crate::output::DescribeServiceIntegrationOutput {
            crate::output::DescribeServiceIntegrationOutput {
                service_integration: self.service_integration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeResourceCollectionHealthOutput {
    /// <p> The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information. </p>
    #[doc(hidden)]
    pub cloud_formation: std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
    /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
    #[doc(hidden)]
    pub service: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services tags that are used by resources in the resource collection.</p>
    /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
    /// <p>Each Amazon Web Services tag has two parts. </p>
    /// <ul>
    /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
    /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
    /// </ul>
    /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
    /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
    /// </important>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
    _request_id: Option<String>,
}
impl DescribeResourceCollectionHealthOutput {
    /// <p> The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information. </p>
    pub fn cloud_formation(&self) -> std::option::Option<&[crate::model::CloudFormationHealth]> {
        self.cloud_formation.as_deref()
    }
    /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
    pub fn service(&self) -> std::option::Option<&[crate::model::ServiceHealth]> {
        self.service.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Amazon Web Services tags that are used by resources in the resource collection.</p>
    /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
    /// <p>Each Amazon Web Services tag has two parts. </p>
    /// <ul>
    /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
    /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
    /// </ul>
    /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
    /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
    /// </important>
    pub fn tags(&self) -> std::option::Option<&[crate::model::TagHealth]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeResourceCollectionHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeResourceCollectionHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceCollectionHealthOutput`](crate::output::DescribeResourceCollectionHealthOutput).
    pub fn builder() -> crate::output::describe_resource_collection_health_output::Builder {
        crate::output::describe_resource_collection_health_output::Builder::default()
    }
}

/// See [`DescribeResourceCollectionHealthOutput`](crate::output::DescribeResourceCollectionHealthOutput).
pub mod describe_resource_collection_health_output {

    /// A builder for [`DescribeResourceCollectionHealthOutput`](crate::output::DescribeResourceCollectionHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cloud_formation:
            std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
        pub(crate) service: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cloud_formation`.
        ///
        /// To override the contents of this collection use [`set_cloud_formation`](Self::set_cloud_formation).
        ///
        /// <p> The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information. </p>
        pub fn cloud_formation(mut self, input: crate::model::CloudFormationHealth) -> Self {
            let mut v = self.cloud_formation.unwrap_or_default();
            v.push(input);
            self.cloud_formation = Some(v);
            self
        }
        /// <p> The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information. </p>
        pub fn set_cloud_formation(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
        ) -> Self {
            self.cloud_formation = input;
            self
        }
        /// Appends an item to `service`.
        ///
        /// To override the contents of this collection use [`set_service`](Self::set_service).
        ///
        /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
        pub fn service(mut self, input: crate::model::ServiceHealth) -> Self {
            let mut v = self.service.unwrap_or_default();
            v.push(input);
            self.service = Some(v);
            self
        }
        /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
        pub fn set_service(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
        ) -> Self {
            self.service = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The Amazon Web Services tags that are used by resources in the resource collection.</p>
        /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
        /// <p>Each Amazon Web Services tag has two parts. </p>
        /// <ul>
        /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
        /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
        /// </ul>
        /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
        /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
        /// </important>
        pub fn tags(mut self, input: crate::model::TagHealth) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The Amazon Web Services tags that are used by resources in the resource collection.</p>
        /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
        /// <p>Each Amazon Web Services tag has two parts. </p>
        /// <ul>
        /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
        /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
        /// </ul>
        /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
        /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
        /// </important>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeResourceCollectionHealthOutput`](crate::output::DescribeResourceCollectionHealthOutput).
        pub fn build(self) -> crate::output::DescribeResourceCollectionHealthOutput {
            crate::output::DescribeResourceCollectionHealthOutput {
                cloud_formation: self.cloud_formation,
                service: self.service,
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationResourceCollectionHealthOutput {
    /// <p>The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information.</p>
    #[doc(hidden)]
    pub cloud_formation: std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
    /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
    #[doc(hidden)]
    pub service: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
    /// <p>The name of the organization's account.</p>
    #[doc(hidden)]
    pub account: std::option::Option<std::vec::Vec<crate::model::AccountHealth>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
    /// <p>Each Amazon Web Services tag has two parts. </p>
    /// <ul>
    /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
    /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
    /// </ul>
    /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
    /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
    /// </important>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
    _request_id: Option<String>,
}
impl DescribeOrganizationResourceCollectionHealthOutput {
    /// <p>The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information.</p>
    pub fn cloud_formation(&self) -> std::option::Option<&[crate::model::CloudFormationHealth]> {
        self.cloud_formation.as_deref()
    }
    /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
    pub fn service(&self) -> std::option::Option<&[crate::model::ServiceHealth]> {
        self.service.as_deref()
    }
    /// <p>The name of the organization's account.</p>
    pub fn account(&self) -> std::option::Option<&[crate::model::AccountHealth]> {
        self.account.as_deref()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
    /// <p>Each Amazon Web Services tag has two parts. </p>
    /// <ul>
    /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
    /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
    /// </ul>
    /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
    /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
    /// </important>
    pub fn tags(&self) -> std::option::Option<&[crate::model::TagHealth]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationResourceCollectionHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOrganizationResourceCollectionHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationResourceCollectionHealthOutput`](crate::output::DescribeOrganizationResourceCollectionHealthOutput).
    pub fn builder(
    ) -> crate::output::describe_organization_resource_collection_health_output::Builder {
        crate::output::describe_organization_resource_collection_health_output::Builder::default()
    }
}

/// See [`DescribeOrganizationResourceCollectionHealthOutput`](crate::output::DescribeOrganizationResourceCollectionHealthOutput).
pub mod describe_organization_resource_collection_health_output {

    /// A builder for [`DescribeOrganizationResourceCollectionHealthOutput`](crate::output::DescribeOrganizationResourceCollectionHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cloud_formation:
            std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
        pub(crate) service: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
        pub(crate) account: std::option::Option<std::vec::Vec<crate::model::AccountHealth>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cloud_formation`.
        ///
        /// To override the contents of this collection use [`set_cloud_formation`](Self::set_cloud_formation).
        ///
        /// <p>The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information.</p>
        pub fn cloud_formation(mut self, input: crate::model::CloudFormationHealth) -> Self {
            let mut v = self.cloud_formation.unwrap_or_default();
            v.push(input);
            self.cloud_formation = Some(v);
            self
        }
        /// <p>The returned <code>CloudFormationHealthOverview</code> object that contains an <code>InsightHealthOverview</code> object with the requested system health information.</p>
        pub fn set_cloud_formation(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CloudFormationHealth>>,
        ) -> Self {
            self.cloud_formation = input;
            self
        }
        /// Appends an item to `service`.
        ///
        /// To override the contents of this collection use [`set_service`](Self::set_service).
        ///
        /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
        pub fn service(mut self, input: crate::model::ServiceHealth) -> Self {
            let mut v = self.service.unwrap_or_default();
            v.push(input);
            self.service = Some(v);
            self
        }
        /// <p>An array of <code>ServiceHealth</code> objects that describes the health of the Amazon Web Services services associated with the resources in the collection.</p>
        pub fn set_service(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceHealth>>,
        ) -> Self {
            self.service = input;
            self
        }
        /// Appends an item to `account`.
        ///
        /// To override the contents of this collection use [`set_account`](Self::set_account).
        ///
        /// <p>The name of the organization's account.</p>
        pub fn account(mut self, input: crate::model::AccountHealth) -> Self {
            let mut v = self.account.unwrap_or_default();
            v.push(input);
            self.account = Some(v);
            self
        }
        /// <p>The name of the organization's account.</p>
        pub fn set_account(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountHealth>>,
        ) -> Self {
            self.account = input;
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
        /// <p>Each Amazon Web Services tag has two parts. </p>
        /// <ul>
        /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
        /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
        /// </ul>
        /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
        /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
        /// </important>
        pub fn tags(mut self, input: crate::model::TagHealth) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Tags help you identify and organize your Amazon Web Services resources. Many Amazon Web Services services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an Lambda function. For more information about using tags, see the <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging best practices</a> whitepaper. </p>
        /// <p>Each Amazon Web Services tag has two parts. </p>
        /// <ul>
        /// <li> <p>A tag <i>key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag <i>keys</i> are case-sensitive.</p> </li>
        /// <li> <p>An optional field known as a tag <i>value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag <i>value</i> is the same as using an empty string. Like tag <i>keys</i>, tag <i>values</i> are case-sensitive.</p> </li>
        /// </ul>
        /// <p>Together these are known as <i>key</i>-<i>value</i> pairs.</p> <important>
        /// <p>The string used for a <i>key</i> in a tag that you use to define your resource coverage must begin with the prefix <code>Devops-guru-</code>. The tag <i>key</i> might be <code>DevOps-Guru-deployment-application</code> or <code>devops-guru-rds-application</code>. When you create a <i>key</i>, the case of characters in the <i>key</i> can be whatever you choose. After you create a <i>key</i>, it is case-sensitive. For example, DevOps Guru works with a <i>key</i> named <code>devops-guru-rds</code> and a <i>key</i> named <code>DevOps-Guru-RDS</code>, and these act as two different <i>keys</i>. Possible <i>key</i>/<i>value</i> pairs in your application might be <code>Devops-Guru-production-application/RDS</code> or <code>Devops-Guru-production-application/containers</code>.</p>
        /// </important>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagHealth>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationResourceCollectionHealthOutput`](crate::output::DescribeOrganizationResourceCollectionHealthOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationResourceCollectionHealthOutput {
            crate::output::DescribeOrganizationResourceCollectionHealthOutput {
                cloud_formation: self.cloud_formation,
                service: self.service,
                account: self.account,
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationOverviewOutput {
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub reactive_insights: i32,
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub proactive_insights: i32,
    _request_id: Option<String>,
}
impl DescribeOrganizationOverviewOutput {
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    pub fn reactive_insights(&self) -> i32 {
        self.reactive_insights
    }
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    pub fn proactive_insights(&self) -> i32 {
        self.proactive_insights
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationOverviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOrganizationOverviewOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationOverviewOutput`](crate::output::DescribeOrganizationOverviewOutput).
    pub fn builder() -> crate::output::describe_organization_overview_output::Builder {
        crate::output::describe_organization_overview_output::Builder::default()
    }
}

/// See [`DescribeOrganizationOverviewOutput`](crate::output::DescribeOrganizationOverviewOutput).
pub mod describe_organization_overview_output {

    /// A builder for [`DescribeOrganizationOverviewOutput`](crate::output::DescribeOrganizationOverviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reactive_insights: std::option::Option<i32>,
        pub(crate) proactive_insights: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn reactive_insights(mut self, input: i32) -> Self {
            self.reactive_insights = Some(input);
            self
        }
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn set_reactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn proactive_insights(mut self, input: i32) -> Self {
            self.proactive_insights = Some(input);
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn set_proactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.proactive_insights = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationOverviewOutput`](crate::output::DescribeOrganizationOverviewOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationOverviewOutput {
            crate::output::DescribeOrganizationOverviewOutput {
                reactive_insights: self.reactive_insights.unwrap_or_default(),
                proactive_insights: self.proactive_insights.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationHealthOutput {
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub open_reactive_insights: i32,
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub open_proactive_insights: i32,
    /// <p>An integer that specifies the number of metrics that have been analyzed in your organization.</p>
    #[doc(hidden)]
    pub metrics_analyzed: i32,
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    #[doc(hidden)]
    pub resource_hours: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeOrganizationHealthOutput {
    /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
    pub fn open_reactive_insights(&self) -> i32 {
        self.open_reactive_insights
    }
    /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
    pub fn open_proactive_insights(&self) -> i32 {
        self.open_proactive_insights
    }
    /// <p>An integer that specifies the number of metrics that have been analyzed in your organization.</p>
    pub fn metrics_analyzed(&self) -> i32 {
        self.metrics_analyzed
    }
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    pub fn resource_hours(&self) -> std::option::Option<i64> {
        self.resource_hours
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOrganizationHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationHealthOutput`](crate::output::DescribeOrganizationHealthOutput).
    pub fn builder() -> crate::output::describe_organization_health_output::Builder {
        crate::output::describe_organization_health_output::Builder::default()
    }
}

/// See [`DescribeOrganizationHealthOutput`](crate::output::DescribeOrganizationHealthOutput).
pub mod describe_organization_health_output {

    /// A builder for [`DescribeOrganizationHealthOutput`](crate::output::DescribeOrganizationHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) open_reactive_insights: std::option::Option<i32>,
        pub(crate) open_proactive_insights: std::option::Option<i32>,
        pub(crate) metrics_analyzed: std::option::Option<i32>,
        pub(crate) resource_hours: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn open_reactive_insights(mut self, input: i32) -> Self {
            self.open_reactive_insights = Some(input);
            self
        }
        /// <p>An integer that specifies the number of open reactive insights in your Amazon Web Services account.</p>
        pub fn set_open_reactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.open_reactive_insights = input;
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn open_proactive_insights(mut self, input: i32) -> Self {
            self.open_proactive_insights = Some(input);
            self
        }
        /// <p>An integer that specifies the number of open proactive insights in your Amazon Web Services account.</p>
        pub fn set_open_proactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.open_proactive_insights = input;
            self
        }
        /// <p>An integer that specifies the number of metrics that have been analyzed in your organization.</p>
        pub fn metrics_analyzed(mut self, input: i32) -> Self {
            self.metrics_analyzed = Some(input);
            self
        }
        /// <p>An integer that specifies the number of metrics that have been analyzed in your organization.</p>
        pub fn set_metrics_analyzed(mut self, input: std::option::Option<i32>) -> Self {
            self.metrics_analyzed = input;
            self
        }
        /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
        pub fn resource_hours(mut self, input: i64) -> Self {
            self.resource_hours = Some(input);
            self
        }
        /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
        pub fn set_resource_hours(mut self, input: std::option::Option<i64>) -> Self {
            self.resource_hours = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationHealthOutput`](crate::output::DescribeOrganizationHealthOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationHealthOutput {
            crate::output::DescribeOrganizationHealthOutput {
                open_reactive_insights: self.open_reactive_insights.unwrap_or_default(),
                open_proactive_insights: self.open_proactive_insights.unwrap_or_default(),
                metrics_analyzed: self.metrics_analyzed.unwrap_or_default(),
                resource_hours: self.resource_hours,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInsightOutput {
    /// <p> A <code>ProactiveInsight</code> object that represents the requested insight. </p>
    #[doc(hidden)]
    pub proactive_insight: std::option::Option<crate::model::ProactiveInsight>,
    /// <p> A <code>ReactiveInsight</code> object that represents the requested insight. </p>
    #[doc(hidden)]
    pub reactive_insight: std::option::Option<crate::model::ReactiveInsight>,
    _request_id: Option<String>,
}
impl DescribeInsightOutput {
    /// <p> A <code>ProactiveInsight</code> object that represents the requested insight. </p>
    pub fn proactive_insight(&self) -> std::option::Option<&crate::model::ProactiveInsight> {
        self.proactive_insight.as_ref()
    }
    /// <p> A <code>ReactiveInsight</code> object that represents the requested insight. </p>
    pub fn reactive_insight(&self) -> std::option::Option<&crate::model::ReactiveInsight> {
        self.reactive_insight.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeInsightOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeInsightOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInsightOutput`](crate::output::DescribeInsightOutput).
    pub fn builder() -> crate::output::describe_insight_output::Builder {
        crate::output::describe_insight_output::Builder::default()
    }
}

/// See [`DescribeInsightOutput`](crate::output::DescribeInsightOutput).
pub mod describe_insight_output {

    /// A builder for [`DescribeInsightOutput`](crate::output::DescribeInsightOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_insight: std::option::Option<crate::model::ProactiveInsight>,
        pub(crate) reactive_insight: std::option::Option<crate::model::ReactiveInsight>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> A <code>ProactiveInsight</code> object that represents the requested insight. </p>
        pub fn proactive_insight(mut self, input: crate::model::ProactiveInsight) -> Self {
            self.proactive_insight = Some(input);
            self
        }
        /// <p> A <code>ProactiveInsight</code> object that represents the requested insight. </p>
        pub fn set_proactive_insight(
            mut self,
            input: std::option::Option<crate::model::ProactiveInsight>,
        ) -> Self {
            self.proactive_insight = input;
            self
        }
        /// <p> A <code>ReactiveInsight</code> object that represents the requested insight. </p>
        pub fn reactive_insight(mut self, input: crate::model::ReactiveInsight) -> Self {
            self.reactive_insight = Some(input);
            self
        }
        /// <p> A <code>ReactiveInsight</code> object that represents the requested insight. </p>
        pub fn set_reactive_insight(
            mut self,
            input: std::option::Option<crate::model::ReactiveInsight>,
        ) -> Self {
            self.reactive_insight = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInsightOutput`](crate::output::DescribeInsightOutput).
        pub fn build(self) -> crate::output::DescribeInsightOutput {
            crate::output::DescribeInsightOutput {
                proactive_insight: self.proactive_insight,
                reactive_insight: self.reactive_insight,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFeedbackOutput {
    /// <p> Information about insight feedback received from a customer. </p>
    #[doc(hidden)]
    pub insight_feedback: std::option::Option<crate::model::InsightFeedback>,
    _request_id: Option<String>,
}
impl DescribeFeedbackOutput {
    /// <p> Information about insight feedback received from a customer. </p>
    pub fn insight_feedback(&self) -> std::option::Option<&crate::model::InsightFeedback> {
        self.insight_feedback.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeFeedbackOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFeedbackOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFeedbackOutput`](crate::output::DescribeFeedbackOutput).
    pub fn builder() -> crate::output::describe_feedback_output::Builder {
        crate::output::describe_feedback_output::Builder::default()
    }
}

/// See [`DescribeFeedbackOutput`](crate::output::DescribeFeedbackOutput).
pub mod describe_feedback_output {

    /// A builder for [`DescribeFeedbackOutput`](crate::output::DescribeFeedbackOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) insight_feedback: std::option::Option<crate::model::InsightFeedback>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Information about insight feedback received from a customer. </p>
        pub fn insight_feedback(mut self, input: crate::model::InsightFeedback) -> Self {
            self.insight_feedback = Some(input);
            self
        }
        /// <p> Information about insight feedback received from a customer. </p>
        pub fn set_insight_feedback(
            mut self,
            input: std::option::Option<crate::model::InsightFeedback>,
        ) -> Self {
            self.insight_feedback = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFeedbackOutput`](crate::output::DescribeFeedbackOutput).
        pub fn build(self) -> crate::output::DescribeFeedbackOutput {
            crate::output::DescribeFeedbackOutput {
                insight_feedback: self.insight_feedback,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEventSourcesConfigOutput {
    /// <p>Lists the event sources in the configuration.</p>
    #[doc(hidden)]
    pub event_sources: std::option::Option<crate::model::EventSourcesConfig>,
    _request_id: Option<String>,
}
impl DescribeEventSourcesConfigOutput {
    /// <p>Lists the event sources in the configuration.</p>
    pub fn event_sources(&self) -> std::option::Option<&crate::model::EventSourcesConfig> {
        self.event_sources.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEventSourcesConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEventSourcesConfigOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventSourcesConfigOutput`](crate::output::DescribeEventSourcesConfigOutput).
    pub fn builder() -> crate::output::describe_event_sources_config_output::Builder {
        crate::output::describe_event_sources_config_output::Builder::default()
    }
}

/// See [`DescribeEventSourcesConfigOutput`](crate::output::DescribeEventSourcesConfigOutput).
pub mod describe_event_sources_config_output {

    /// A builder for [`DescribeEventSourcesConfigOutput`](crate::output::DescribeEventSourcesConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_sources: std::option::Option<crate::model::EventSourcesConfig>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists the event sources in the configuration.</p>
        pub fn event_sources(mut self, input: crate::model::EventSourcesConfig) -> Self {
            self.event_sources = Some(input);
            self
        }
        /// <p>Lists the event sources in the configuration.</p>
        pub fn set_event_sources(
            mut self,
            input: std::option::Option<crate::model::EventSourcesConfig>,
        ) -> Self {
            self.event_sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventSourcesConfigOutput`](crate::output::DescribeEventSourcesConfigOutput).
        pub fn build(self) -> crate::output::DescribeEventSourcesConfigOutput {
            crate::output::DescribeEventSourcesConfigOutput {
                event_sources: self.event_sources,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAnomalyOutput {
    /// <p> A <code>ProactiveAnomaly</code> object that represents the requested anomaly. </p>
    #[doc(hidden)]
    pub proactive_anomaly: std::option::Option<crate::model::ProactiveAnomaly>,
    /// <p> A <code>ReactiveAnomaly</code> object that represents the requested anomaly. </p>
    #[doc(hidden)]
    pub reactive_anomaly: std::option::Option<crate::model::ReactiveAnomaly>,
    _request_id: Option<String>,
}
impl DescribeAnomalyOutput {
    /// <p> A <code>ProactiveAnomaly</code> object that represents the requested anomaly. </p>
    pub fn proactive_anomaly(&self) -> std::option::Option<&crate::model::ProactiveAnomaly> {
        self.proactive_anomaly.as_ref()
    }
    /// <p> A <code>ReactiveAnomaly</code> object that represents the requested anomaly. </p>
    pub fn reactive_anomaly(&self) -> std::option::Option<&crate::model::ReactiveAnomaly> {
        self.reactive_anomaly.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAnomalyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAnomalyOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyOutput`](crate::output::DescribeAnomalyOutput).
    pub fn builder() -> crate::output::describe_anomaly_output::Builder {
        crate::output::describe_anomaly_output::Builder::default()
    }
}

/// See [`DescribeAnomalyOutput`](crate::output::DescribeAnomalyOutput).
pub mod describe_anomaly_output {

    /// A builder for [`DescribeAnomalyOutput`](crate::output::DescribeAnomalyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) proactive_anomaly: std::option::Option<crate::model::ProactiveAnomaly>,
        pub(crate) reactive_anomaly: std::option::Option<crate::model::ReactiveAnomaly>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> A <code>ProactiveAnomaly</code> object that represents the requested anomaly. </p>
        pub fn proactive_anomaly(mut self, input: crate::model::ProactiveAnomaly) -> Self {
            self.proactive_anomaly = Some(input);
            self
        }
        /// <p> A <code>ProactiveAnomaly</code> object that represents the requested anomaly. </p>
        pub fn set_proactive_anomaly(
            mut self,
            input: std::option::Option<crate::model::ProactiveAnomaly>,
        ) -> Self {
            self.proactive_anomaly = input;
            self
        }
        /// <p> A <code>ReactiveAnomaly</code> object that represents the requested anomaly. </p>
        pub fn reactive_anomaly(mut self, input: crate::model::ReactiveAnomaly) -> Self {
            self.reactive_anomaly = Some(input);
            self
        }
        /// <p> A <code>ReactiveAnomaly</code> object that represents the requested anomaly. </p>
        pub fn set_reactive_anomaly(
            mut self,
            input: std::option::Option<crate::model::ReactiveAnomaly>,
        ) -> Self {
            self.reactive_anomaly = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAnomalyOutput`](crate::output::DescribeAnomalyOutput).
        pub fn build(self) -> crate::output::DescribeAnomalyOutput {
            crate::output::DescribeAnomalyOutput {
                proactive_anomaly: self.proactive_anomaly,
                reactive_anomaly: self.reactive_anomaly,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccountOverviewOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
    #[doc(hidden)]
    pub reactive_insights: i32,
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
    #[doc(hidden)]
    pub proactive_insights: i32,
    /// <p> The Mean Time to Recover (MTTR) for all closed insights that were created during the time range passed in. </p>
    #[doc(hidden)]
    pub mean_time_to_recover_in_milliseconds: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeAccountOverviewOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
    pub fn reactive_insights(&self) -> i32 {
        self.reactive_insights
    }
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
    pub fn proactive_insights(&self) -> i32 {
        self.proactive_insights
    }
    /// <p> The Mean Time to Recover (MTTR) for all closed insights that were created during the time range passed in. </p>
    pub fn mean_time_to_recover_in_milliseconds(&self) -> std::option::Option<i64> {
        self.mean_time_to_recover_in_milliseconds
    }
}
impl aws_http::request_id::RequestId for DescribeAccountOverviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAccountOverviewOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountOverviewOutput`](crate::output::DescribeAccountOverviewOutput).
    pub fn builder() -> crate::output::describe_account_overview_output::Builder {
        crate::output::describe_account_overview_output::Builder::default()
    }
}

/// See [`DescribeAccountOverviewOutput`](crate::output::DescribeAccountOverviewOutput).
pub mod describe_account_overview_output {

    /// A builder for [`DescribeAccountOverviewOutput`](crate::output::DescribeAccountOverviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reactive_insights: std::option::Option<i32>,
        pub(crate) proactive_insights: std::option::Option<i32>,
        pub(crate) mean_time_to_recover_in_milliseconds: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
        pub fn reactive_insights(mut self, input: i32) -> Self {
            self.reactive_insights = Some(input);
            self
        }
        /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
        pub fn set_reactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.reactive_insights = input;
            self
        }
        /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
        pub fn proactive_insights(mut self, input: i32) -> Self {
            self.proactive_insights = Some(input);
            self
        }
        /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account that were created during the time range passed in. </p>
        pub fn set_proactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.proactive_insights = input;
            self
        }
        /// <p> The Mean Time to Recover (MTTR) for all closed insights that were created during the time range passed in. </p>
        pub fn mean_time_to_recover_in_milliseconds(mut self, input: i64) -> Self {
            self.mean_time_to_recover_in_milliseconds = Some(input);
            self
        }
        /// <p> The Mean Time to Recover (MTTR) for all closed insights that were created during the time range passed in. </p>
        pub fn set_mean_time_to_recover_in_milliseconds(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.mean_time_to_recover_in_milliseconds = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountOverviewOutput`](crate::output::DescribeAccountOverviewOutput).
        pub fn build(self) -> crate::output::DescribeAccountOverviewOutput {
            crate::output::DescribeAccountOverviewOutput {
                reactive_insights: self.reactive_insights.unwrap_or_default(),
                proactive_insights: self.proactive_insights.unwrap_or_default(),
                mean_time_to_recover_in_milliseconds: self.mean_time_to_recover_in_milliseconds,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccountHealthOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub open_reactive_insights: i32,
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub open_proactive_insights: i32,
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub metrics_analyzed: i32,
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    #[doc(hidden)]
    pub resource_hours: std::option::Option<i64>,
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub analyzed_resource_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeAccountHealthOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    pub fn open_reactive_insights(&self) -> i32 {
        self.open_reactive_insights
    }
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    pub fn open_proactive_insights(&self) -> i32 {
        self.open_proactive_insights
    }
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    pub fn metrics_analyzed(&self) -> i32 {
        self.metrics_analyzed
    }
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    pub fn resource_hours(&self) -> std::option::Option<i64> {
        self.resource_hours
    }
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    pub fn analyzed_resource_count(&self) -> std::option::Option<i64> {
        self.analyzed_resource_count
    }
}
impl aws_http::request_id::RequestId for DescribeAccountHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAccountHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountHealthOutput`](crate::output::DescribeAccountHealthOutput).
    pub fn builder() -> crate::output::describe_account_health_output::Builder {
        crate::output::describe_account_health_output::Builder::default()
    }
}

/// See [`DescribeAccountHealthOutput`](crate::output::DescribeAccountHealthOutput).
pub mod describe_account_health_output {

    /// A builder for [`DescribeAccountHealthOutput`](crate::output::DescribeAccountHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) open_reactive_insights: std::option::Option<i32>,
        pub(crate) open_proactive_insights: std::option::Option<i32>,
        pub(crate) metrics_analyzed: std::option::Option<i32>,
        pub(crate) resource_hours: std::option::Option<i64>,
        pub(crate) analyzed_resource_count: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
        pub fn open_reactive_insights(mut self, input: i32) -> Self {
            self.open_reactive_insights = Some(input);
            self
        }
        /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
        pub fn set_open_reactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.open_reactive_insights = input;
            self
        }
        /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
        pub fn open_proactive_insights(mut self, input: i32) -> Self {
            self.open_proactive_insights = Some(input);
            self
        }
        /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
        pub fn set_open_proactive_insights(mut self, input: std::option::Option<i32>) -> Self {
            self.open_proactive_insights = input;
            self
        }
        /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
        pub fn metrics_analyzed(mut self, input: i32) -> Self {
            self.metrics_analyzed = Some(input);
            self
        }
        /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
        pub fn set_metrics_analyzed(mut self, input: std::option::Option<i32>) -> Self {
            self.metrics_analyzed = input;
            self
        }
        /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
        pub fn resource_hours(mut self, input: i64) -> Self {
            self.resource_hours = Some(input);
            self
        }
        /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
        pub fn set_resource_hours(mut self, input: std::option::Option<i64>) -> Self {
            self.resource_hours = input;
            self
        }
        /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
        pub fn analyzed_resource_count(mut self, input: i64) -> Self {
            self.analyzed_resource_count = Some(input);
            self
        }
        /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
        pub fn set_analyzed_resource_count(mut self, input: std::option::Option<i64>) -> Self {
            self.analyzed_resource_count = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountHealthOutput`](crate::output::DescribeAccountHealthOutput).
        pub fn build(self) -> crate::output::DescribeAccountHealthOutput {
            crate::output::DescribeAccountHealthOutput {
                open_reactive_insights: self.open_reactive_insights.unwrap_or_default(),
                open_proactive_insights: self.open_proactive_insights.unwrap_or_default(),
                metrics_analyzed: self.metrics_analyzed.unwrap_or_default(),
                resource_hours: self.resource_hours,
                analyzed_resource_count: self.analyzed_resource_count,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteInsightOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteInsightOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteInsightOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInsightOutput`](crate::output::DeleteInsightOutput).
    pub fn builder() -> crate::output::delete_insight_output::Builder {
        crate::output::delete_insight_output::Builder::default()
    }
}

/// See [`DeleteInsightOutput`](crate::output::DeleteInsightOutput).
pub mod delete_insight_output {

    /// A builder for [`DeleteInsightOutput`](crate::output::DeleteInsightOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInsightOutput`](crate::output::DeleteInsightOutput).
        pub fn build(self) -> crate::output::DeleteInsightOutput {
            crate::output::DeleteInsightOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddNotificationChannelOutput {
    /// <p> The ID of the added notification channel. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AddNotificationChannelOutput {
    /// <p> The ID of the added notification channel. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AddNotificationChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`AddNotificationChannelOutput`](crate::output::AddNotificationChannelOutput).
    pub fn builder() -> crate::output::add_notification_channel_output::Builder {
        crate::output::add_notification_channel_output::Builder::default()
    }
}

/// See [`AddNotificationChannelOutput`](crate::output::AddNotificationChannelOutput).
pub mod add_notification_channel_output {

    /// A builder for [`AddNotificationChannelOutput`](crate::output::AddNotificationChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The ID of the added notification channel. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p> The ID of the added notification channel. </p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddNotificationChannelOutput`](crate::output::AddNotificationChannelOutput).
        pub fn build(self) -> crate::output::AddNotificationChannelOutput {
            crate::output::AddNotificationChannelOutput {
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
