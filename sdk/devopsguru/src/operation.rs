// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>
/// Adds a notification channel to DevOps Guru. A notification channel is used to notify you about important DevOps Guru events, such as when an insight is generated.
/// </p>
/// <p>If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission
/// to it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account.
/// For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html">Permissions
/// for cross account Amazon SNS topics</a>.</p>
/// <p>If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions
/// to the CMK. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html">Permissions for
/// AWS KMSâ€“encrypted Amazon SNS topics</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddNotificationChannel {
    _private: (),
}
impl AddNotificationChannel {
    /// Creates a new builder-style object to manufacture [`AddNotificationChannelInput`](crate::input::AddNotificationChannelInput)
    pub fn builder() -> crate::input::add_notification_channel_input::Builder {
        crate::input::add_notification_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddNotificationChannel {
    type Output = std::result::Result<
        crate::output::AddNotificationChannelOutput,
        crate::error::AddNotificationChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_notification_channel_error(response)
        } else {
            crate::operation_deser::parse_add_notification_channel_response(response)
        }
    }
}

/// <p>
/// Returns the number of open reactive insights, the number of open proactive insights, and the number of metrics analyzed in your AWS account.
/// Use these numbers to gauge the health of operations in your AWS account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountHealth {
    _private: (),
}
impl DescribeAccountHealth {
    /// Creates a new builder-style object to manufacture [`DescribeAccountHealthInput`](crate::input::DescribeAccountHealthInput)
    pub fn builder() -> crate::input::describe_account_health_input::Builder {
        crate::input::describe_account_health_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountHealth {
    type Output = std::result::Result<
        crate::output::DescribeAccountHealthOutput,
        crate::error::DescribeAccountHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_health_error(response)
        } else {
            crate::operation_deser::parse_describe_account_health_response(response)
        }
    }
}

/// <p>
/// For the time range passed in, returns the number of open reactive insight that were created, the number of open proactive insights
/// that were created, and the Mean Time to Recover (MTTR) for all closed reactive insights.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountOverview {
    _private: (),
}
impl DescribeAccountOverview {
    /// Creates a new builder-style object to manufacture [`DescribeAccountOverviewInput`](crate::input::DescribeAccountOverviewInput)
    pub fn builder() -> crate::input::describe_account_overview_input::Builder {
        crate::input::describe_account_overview_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountOverview {
    type Output = std::result::Result<
        crate::output::DescribeAccountOverviewOutput,
        crate::error::DescribeAccountOverviewError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_overview_error(response)
        } else {
            crate::operation_deser::parse_describe_account_overview_response(response)
        }
    }
}

/// <p>
/// Returns details about an anomaly that you specify using its ID.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAnomaly {
    _private: (),
}
impl DescribeAnomaly {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyInput`](crate::input::DescribeAnomalyInput)
    pub fn builder() -> crate::input::describe_anomaly_input::Builder {
        crate::input::describe_anomaly_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAnomaly {
    type Output = std::result::Result<
        crate::output::DescribeAnomalyOutput,
        crate::error::DescribeAnomalyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_anomaly_error(response)
        } else {
            crate::operation_deser::parse_describe_anomaly_response(response)
        }
    }
}

/// <p>
/// Returns the most recent feedback submitted in the current AWS account and Region.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFeedback {
    _private: (),
}
impl DescribeFeedback {
    /// Creates a new builder-style object to manufacture [`DescribeFeedbackInput`](crate::input::DescribeFeedbackInput)
    pub fn builder() -> crate::input::describe_feedback_input::Builder {
        crate::input::describe_feedback_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFeedback {
    type Output = std::result::Result<
        crate::output::DescribeFeedbackOutput,
        crate::error::DescribeFeedbackError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_feedback_error(response)
        } else {
            crate::operation_deser::parse_describe_feedback_response(response)
        }
    }
}

/// <p>
/// Returns details about an insight that you specify using its ID.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInsight {
    _private: (),
}
impl DescribeInsight {
    /// Creates a new builder-style object to manufacture [`DescribeInsightInput`](crate::input::DescribeInsightInput)
    pub fn builder() -> crate::input::describe_insight_input::Builder {
        crate::input::describe_insight_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInsight {
    type Output = std::result::Result<
        crate::output::DescribeInsightOutput,
        crate::error::DescribeInsightError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_insight_error(response)
        } else {
            crate::operation_deser::parse_describe_insight_response(response)
        }
    }
}

/// <p>
/// Returns the number of open proactive insights, open reactive insights, and the Mean Time to Recover (MTTR) for all closed insights in
/// resource collections in your account. You specify the type of AWS resources collection. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
/// only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeResourceCollectionHealth {
    _private: (),
}
impl DescribeResourceCollectionHealth {
    /// Creates a new builder-style object to manufacture [`DescribeResourceCollectionHealthInput`](crate::input::DescribeResourceCollectionHealthInput)
    pub fn builder() -> crate::input::describe_resource_collection_health_input::Builder {
        crate::input::describe_resource_collection_health_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeResourceCollectionHealth {
    type Output = std::result::Result<
        crate::output::DescribeResourceCollectionHealthOutput,
        crate::error::DescribeResourceCollectionHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_resource_collection_health_error(response)
        } else {
            crate::operation_deser::parse_describe_resource_collection_health_response(response)
        }
    }
}

/// <p>
/// Returns the integration status of services that are integrated with DevOps Guru.
/// The one service that can be integrated with DevOps Guru
/// is AWS Systems Manager, which can be used to create an OpsItem for each generated insight.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeServiceIntegration {
    _private: (),
}
impl DescribeServiceIntegration {
    /// Creates a new builder-style object to manufacture [`DescribeServiceIntegrationInput`](crate::input::DescribeServiceIntegrationInput)
    pub fn builder() -> crate::input::describe_service_integration_input::Builder {
        crate::input::describe_service_integration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeServiceIntegration {
    type Output = std::result::Result<
        crate::output::DescribeServiceIntegrationOutput,
        crate::error::DescribeServiceIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_service_integration_error(response)
        } else {
            crate::operation_deser::parse_describe_service_integration_response(response)
        }
    }
}

/// <p>Returns an estimate of the monthly cost for DevOps Guru to analyze your AWS resources.
/// For more information,
/// see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your
/// Amazon DevOps Guru costs</a> and
/// <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCostEstimation {
    _private: (),
}
impl GetCostEstimation {
    /// Creates a new builder-style object to manufacture [`GetCostEstimationInput`](crate::input::GetCostEstimationInput)
    pub fn builder() -> crate::input::get_cost_estimation_input::Builder {
        crate::input::get_cost_estimation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCostEstimation {
    type Output = std::result::Result<
        crate::output::GetCostEstimationOutput,
        crate::error::GetCostEstimationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_cost_estimation_error(response)
        } else {
            crate::operation_deser::parse_get_cost_estimation_response(response)
        }
    }
}

/// <p>
/// Returns lists AWS resources that are of the specified resource collection type. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
/// only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceCollection {
    _private: (),
}
impl GetResourceCollection {
    /// Creates a new builder-style object to manufacture [`GetResourceCollectionInput`](crate::input::GetResourceCollectionInput)
    pub fn builder() -> crate::input::get_resource_collection_input::Builder {
        crate::input::get_resource_collection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourceCollection {
    type Output = std::result::Result<
        crate::output::GetResourceCollectionOutput,
        crate::error::GetResourceCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_collection_error(response)
        } else {
            crate::operation_deser::parse_get_resource_collection_response(response)
        }
    }
}

/// <p>
/// Returns a list of the anomalies that belong to an insight that you specify using its ID.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAnomaliesForInsight {
    _private: (),
}
impl ListAnomaliesForInsight {
    /// Creates a new builder-style object to manufacture [`ListAnomaliesForInsightInput`](crate::input::ListAnomaliesForInsightInput)
    pub fn builder() -> crate::input::list_anomalies_for_insight_input::Builder {
        crate::input::list_anomalies_for_insight_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAnomaliesForInsight {
    type Output = std::result::Result<
        crate::output::ListAnomaliesForInsightOutput,
        crate::error::ListAnomaliesForInsightError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_anomalies_for_insight_error(response)
        } else {
            crate::operation_deser::parse_list_anomalies_for_insight_response(response)
        }
    }
}

/// <p>
/// Returns a list of the events emitted by the resources that are evaluated by DevOps Guru. You can use filters to specify which events are returned.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEvents {
    _private: (),
}
impl ListEvents {
    /// Creates a new builder-style object to manufacture [`ListEventsInput`](crate::input::ListEventsInput)
    pub fn builder() -> crate::input::list_events_input::Builder {
        crate::input::list_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEvents {
    type Output =
        std::result::Result<crate::output::ListEventsOutput, crate::error::ListEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_events_error(response)
        } else {
            crate::operation_deser::parse_list_events_response(response)
        }
    }
}

/// <p>
/// Returns a list of insights in your AWS account. You can specify which insights are returned by their start time and
/// status (<code>ONGOING</code>, <code>CLOSED</code>, or <code>ANY</code>).
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInsights {
    _private: (),
}
impl ListInsights {
    /// Creates a new builder-style object to manufacture [`ListInsightsInput`](crate::input::ListInsightsInput)
    pub fn builder() -> crate::input::list_insights_input::Builder {
        crate::input::list_insights_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInsights {
    type Output =
        std::result::Result<crate::output::ListInsightsOutput, crate::error::ListInsightsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_insights_error(response)
        } else {
            crate::operation_deser::parse_list_insights_response(response)
        }
    }
}

/// <p>
/// Returns a list of notification channels configured for DevOps Guru. Each notification channel is used to notify you when
/// DevOps Guru generates an insight that contains information about how to improve your operations. The one
/// supported notification channel is Amazon Simple Notification Service (Amazon SNS).
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNotificationChannels {
    _private: (),
}
impl ListNotificationChannels {
    /// Creates a new builder-style object to manufacture [`ListNotificationChannelsInput`](crate::input::ListNotificationChannelsInput)
    pub fn builder() -> crate::input::list_notification_channels_input::Builder {
        crate::input::list_notification_channels_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNotificationChannels {
    type Output = std::result::Result<
        crate::output::ListNotificationChannelsOutput,
        crate::error::ListNotificationChannelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_notification_channels_error(response)
        } else {
            crate::operation_deser::parse_list_notification_channels_response(response)
        }
    }
}

/// <p>
/// Returns a list of a specified insight's recommendations. Each recommendation includes a list of related metrics and a list of related events.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRecommendations {
    _private: (),
}
impl ListRecommendations {
    /// Creates a new builder-style object to manufacture [`ListRecommendationsInput`](crate::input::ListRecommendationsInput)
    pub fn builder() -> crate::input::list_recommendations_input::Builder {
        crate::input::list_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRecommendations {
    type Output = std::result::Result<
        crate::output::ListRecommendationsOutput,
        crate::error::ListRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_recommendations_error(response)
        } else {
            crate::operation_deser::parse_list_recommendations_response(response)
        }
    }
}

/// <p>
/// Collects customer feedback about the specified insight.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutFeedback {
    _private: (),
}
impl PutFeedback {
    /// Creates a new builder-style object to manufacture [`PutFeedbackInput`](crate::input::PutFeedbackInput)
    pub fn builder() -> crate::input::put_feedback_input::Builder {
        crate::input::put_feedback_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutFeedback {
    type Output =
        std::result::Result<crate::output::PutFeedbackOutput, crate::error::PutFeedbackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_feedback_error(response)
        } else {
            crate::operation_deser::parse_put_feedback_response(response)
        }
    }
}

/// <p>
/// Removes a notification channel from DevOps Guru. A notification channel is used to notify you when DevOps Guru generates an insight
/// that contains information about how to improve your operations.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveNotificationChannel {
    _private: (),
}
impl RemoveNotificationChannel {
    /// Creates a new builder-style object to manufacture [`RemoveNotificationChannelInput`](crate::input::RemoveNotificationChannelInput)
    pub fn builder() -> crate::input::remove_notification_channel_input::Builder {
        crate::input::remove_notification_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveNotificationChannel {
    type Output = std::result::Result<
        crate::output::RemoveNotificationChannelOutput,
        crate::error::RemoveNotificationChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_notification_channel_error(response)
        } else {
            crate::operation_deser::parse_remove_notification_channel_response(response)
        }
    }
}

/// <p>
/// Returns a list of insights in your AWS account. You can specify which insights are returned by their start time, one or more statuses
/// (<code>ONGOING</code>, <code>CLOSED</code>, and <code>CLOSED</code>), one or more severities (<code>LOW</code>, <code>MEDIUM</code>,
/// and <code>HIGH</code>), and type (<code>REACTIVE</code> or <code>PROACTIVE</code>).
/// </p>
/// <p>
/// Use the <code>Filters</code> parameter to specify status and severity
/// search parameters. Use the <code>Type</code> parameter to specify <code>REACTIVE</code> or <code>PROACTIVE</code> in your search.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchInsights {
    _private: (),
}
impl SearchInsights {
    /// Creates a new builder-style object to manufacture [`SearchInsightsInput`](crate::input::SearchInsightsInput)
    pub fn builder() -> crate::input::search_insights_input::Builder {
        crate::input::search_insights_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchInsights {
    type Output =
        std::result::Result<crate::output::SearchInsightsOutput, crate::error::SearchInsightsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_insights_error(response)
        } else {
            crate::operation_deser::parse_search_insights_response(response)
        }
    }
}

/// <p>Starts the creation of an estimate of the monthly cost to analyze your AWS resources.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartCostEstimation {
    _private: (),
}
impl StartCostEstimation {
    /// Creates a new builder-style object to manufacture [`StartCostEstimationInput`](crate::input::StartCostEstimationInput)
    pub fn builder() -> crate::input::start_cost_estimation_input::Builder {
        crate::input::start_cost_estimation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartCostEstimation {
    type Output = std::result::Result<
        crate::output::StartCostEstimationOutput,
        crate::error::StartCostEstimationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_cost_estimation_error(response)
        } else {
            crate::operation_deser::parse_start_cost_estimation_response(response)
        }
    }
}

/// <p> Updates the collection of resources that DevOps Guru analyzes.
/// The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
/// only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks. This method also creates the IAM role required for you
/// to use DevOps Guru. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResourceCollection {
    _private: (),
}
impl UpdateResourceCollection {
    /// Creates a new builder-style object to manufacture [`UpdateResourceCollectionInput`](crate::input::UpdateResourceCollectionInput)
    pub fn builder() -> crate::input::update_resource_collection_input::Builder {
        crate::input::update_resource_collection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateResourceCollection {
    type Output = std::result::Result<
        crate::output::UpdateResourceCollectionOutput,
        crate::error::UpdateResourceCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_resource_collection_error(response)
        } else {
            crate::operation_deser::parse_update_resource_collection_response(response)
        }
    }
}

/// <p>
/// Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with
/// DevOps Guru is AWS Systems Manager, which can be used to create an OpsItem for each generated insight.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceIntegration {
    _private: (),
}
impl UpdateServiceIntegration {
    /// Creates a new builder-style object to manufacture [`UpdateServiceIntegrationInput`](crate::input::UpdateServiceIntegrationInput)
    pub fn builder() -> crate::input::update_service_integration_input::Builder {
        crate::input::update_service_integration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceIntegration {
    type Output = std::result::Result<
        crate::output::UpdateServiceIntegrationOutput,
        crate::error::UpdateServiceIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_integration_error(response)
        } else {
            crate::operation_deser::parse_update_service_integration_response(response)
        }
    }
}
