// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn add_notification_channel_output_correct_errors(
    mut builder: crate::operation::add_notification_channel::builders::AddNotificationChannelOutputBuilder,
) -> crate::operation::add_notification_channel::builders::AddNotificationChannelOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_account_health_output_correct_errors(
    mut builder: crate::operation::describe_account_health::builders::DescribeAccountHealthOutputBuilder,
) -> crate::operation::describe_account_health::builders::DescribeAccountHealthOutputBuilder {
    if builder.open_reactive_insights.is_none() {
        builder.open_reactive_insights = Some(Default::default())
    }
    if builder.open_proactive_insights.is_none() {
        builder.open_proactive_insights = Some(Default::default())
    }
    if builder.metrics_analyzed.is_none() {
        builder.metrics_analyzed = Some(Default::default())
    }
    if builder.resource_hours.is_none() {
        builder.resource_hours = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_account_overview_output_correct_errors(
    mut builder: crate::operation::describe_account_overview::builders::DescribeAccountOverviewOutputBuilder,
) -> crate::operation::describe_account_overview::builders::DescribeAccountOverviewOutputBuilder {
    if builder.reactive_insights.is_none() {
        builder.reactive_insights = Some(Default::default())
    }
    if builder.proactive_insights.is_none() {
        builder.proactive_insights = Some(Default::default())
    }
    if builder.mean_time_to_recover_in_milliseconds.is_none() {
        builder.mean_time_to_recover_in_milliseconds = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_organization_health_output_correct_errors(
    mut builder: crate::operation::describe_organization_health::builders::DescribeOrganizationHealthOutputBuilder,
) -> crate::operation::describe_organization_health::builders::DescribeOrganizationHealthOutputBuilder {
    if builder.open_reactive_insights.is_none() {
        builder.open_reactive_insights = Some(Default::default())
    }
    if builder.open_proactive_insights.is_none() {
        builder.open_proactive_insights = Some(Default::default())
    }
    if builder.metrics_analyzed.is_none() {
        builder.metrics_analyzed = Some(Default::default())
    }
    if builder.resource_hours.is_none() {
        builder.resource_hours = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_organization_overview_output_correct_errors(
    mut builder: crate::operation::describe_organization_overview::builders::DescribeOrganizationOverviewOutputBuilder,
) -> crate::operation::describe_organization_overview::builders::DescribeOrganizationOverviewOutputBuilder {
    if builder.reactive_insights.is_none() {
        builder.reactive_insights = Some(Default::default())
    }
    if builder.proactive_insights.is_none() {
        builder.proactive_insights = Some(Default::default())
    }
    builder
}

pub(crate) fn list_anomalous_log_groups_output_correct_errors(
    mut builder: crate::operation::list_anomalous_log_groups::builders::ListAnomalousLogGroupsOutputBuilder,
) -> crate::operation::list_anomalous_log_groups::builders::ListAnomalousLogGroupsOutputBuilder {
    if builder.insight_id.is_none() {
        builder.insight_id = Some(Default::default())
    }
    if builder.anomalous_log_groups.is_none() {
        builder.anomalous_log_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn list_events_output_correct_errors(
    mut builder: crate::operation::list_events::builders::ListEventsOutputBuilder,
) -> crate::operation::list_events::builders::ListEventsOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_monitored_resources_output_correct_errors(
    mut builder: crate::operation::list_monitored_resources::builders::ListMonitoredResourcesOutputBuilder,
) -> crate::operation::list_monitored_resources::builders::ListMonitoredResourcesOutputBuilder {
    if builder.monitored_resource_identifiers.is_none() {
        builder.monitored_resource_identifiers = Some(Default::default())
    }
    builder
}

pub(crate) fn anomaly_reported_time_range_correct_errors(
    mut builder: crate::types::builders::AnomalyReportedTimeRangeBuilder,
) -> crate::types::builders::AnomalyReportedTimeRangeBuilder {
    if builder.open_time.is_none() {
        builder.open_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn anomaly_time_range_correct_errors(
    mut builder: crate::types::builders::AnomalyTimeRangeBuilder,
) -> crate::types::builders::AnomalyTimeRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn insight_time_range_correct_errors(
    mut builder: crate::types::builders::InsightTimeRangeBuilder,
) -> crate::types::builders::InsightTimeRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn prediction_time_range_correct_errors(
    mut builder: crate::types::builders::PredictionTimeRangeBuilder,
) -> crate::types::builders::PredictionTimeRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_channel_config_correct_errors(
    mut builder: crate::types::builders::NotificationChannelConfigBuilder,
) -> crate::types::builders::NotificationChannelConfigBuilder {
    if builder.sns.is_none() {
        builder.sns = {
            let builder = crate::types::builders::SnsChannelConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn tag_collection_filter_correct_errors(
    mut builder: crate::types::builders::TagCollectionFilterBuilder,
) -> crate::types::builders::TagCollectionFilterBuilder {
    if builder.app_boundary_key.is_none() {
        builder.app_boundary_key = Some(Default::default())
    }
    if builder.tag_values.is_none() {
        builder.tag_values = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_cost_estimation_resource_collection_filter_correct_errors(
    mut builder: crate::types::builders::TagCostEstimationResourceCollectionFilterBuilder,
) -> crate::types::builders::TagCostEstimationResourceCollectionFilterBuilder {
    if builder.app_boundary_key.is_none() {
        builder.app_boundary_key = Some(Default::default())
    }
    if builder.tag_values.is_none() {
        builder.tag_values = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_collection_correct_errors(
    mut builder: crate::types::builders::TagCollectionBuilder,
) -> crate::types::builders::TagCollectionBuilder {
    if builder.app_boundary_key.is_none() {
        builder.app_boundary_key = Some(Default::default())
    }
    if builder.tag_values.is_none() {
        builder.tag_values = Some(Default::default())
    }
    builder
}
