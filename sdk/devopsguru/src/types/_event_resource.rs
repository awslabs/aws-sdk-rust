// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The Amazon Web Services resource that emitted an event. Amazon Web Services resource events and metrics are analyzed by DevOps Guru to find anomalous behavior and provide recommendations to improve your operational solutions. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventResource {
    /// <p> The type of resource that emitted an event. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p> The name of the resource that emitted an event. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the resource that emitted an event. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl EventResource {
    /// <p> The type of resource that emitted an event. </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p> The name of the resource that emitted an event. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the resource that emitted an event. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl EventResource {
    /// Creates a new builder-style object to manufacture [`EventResource`](crate::types::EventResource).
    pub fn builder() -> crate::types::builders::EventResourceBuilder {
        crate::types::builders::EventResourceBuilder::default()
    }
}

/// A builder for [`EventResource`](crate::types::EventResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventResourceBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl EventResourceBuilder {
    /// <p> The type of resource that emitted an event. </p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p> The type of resource that emitted an event. </p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The name of the resource that emitted an event. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the resource that emitted an event. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the resource that emitted an event. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the resource that emitted an event. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`EventResource`](crate::types::EventResource).
    pub fn build(self) -> crate::types::EventResource {
        crate::types::EventResource {
            r#type: self.r#type,
            name: self.name,
            arn: self.arn,
        }
    }
}
