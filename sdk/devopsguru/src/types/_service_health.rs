// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the health of an Amazon Web Services service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceHealth {
    /// <p>The name of the Amazon Web Services service.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<crate::types::ServiceName>,
    /// <p>Represents the health of an Amazon Web Services service. This is a <code>ServiceInsightHealth</code> that contains the number of open proactive and reactive insights for this service.</p>
    #[doc(hidden)]
    pub insight: std::option::Option<crate::types::ServiceInsightHealth>,
    /// <p> Number of resources that DevOps Guru is monitoring in an analyzed Amazon Web Services service. </p>
    #[doc(hidden)]
    pub analyzed_resource_count: std::option::Option<i64>,
}
impl ServiceHealth {
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn service_name(&self) -> std::option::Option<&crate::types::ServiceName> {
        self.service_name.as_ref()
    }
    /// <p>Represents the health of an Amazon Web Services service. This is a <code>ServiceInsightHealth</code> that contains the number of open proactive and reactive insights for this service.</p>
    pub fn insight(&self) -> std::option::Option<&crate::types::ServiceInsightHealth> {
        self.insight.as_ref()
    }
    /// <p> Number of resources that DevOps Guru is monitoring in an analyzed Amazon Web Services service. </p>
    pub fn analyzed_resource_count(&self) -> std::option::Option<i64> {
        self.analyzed_resource_count
    }
}
impl ServiceHealth {
    /// Creates a new builder-style object to manufacture [`ServiceHealth`](crate::types::ServiceHealth).
    pub fn builder() -> crate::types::builders::ServiceHealthBuilder {
        crate::types::builders::ServiceHealthBuilder::default()
    }
}

/// A builder for [`ServiceHealth`](crate::types::ServiceHealth).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceHealthBuilder {
    pub(crate) service_name: std::option::Option<crate::types::ServiceName>,
    pub(crate) insight: std::option::Option<crate::types::ServiceInsightHealth>,
    pub(crate) analyzed_resource_count: std::option::Option<i64>,
}
impl ServiceHealthBuilder {
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn service_name(mut self, input: crate::types::ServiceName) -> Self {
        self.service_name = Some(input);
        self
    }
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn set_service_name(
        mut self,
        input: std::option::Option<crate::types::ServiceName>,
    ) -> Self {
        self.service_name = input;
        self
    }
    /// <p>Represents the health of an Amazon Web Services service. This is a <code>ServiceInsightHealth</code> that contains the number of open proactive and reactive insights for this service.</p>
    pub fn insight(mut self, input: crate::types::ServiceInsightHealth) -> Self {
        self.insight = Some(input);
        self
    }
    /// <p>Represents the health of an Amazon Web Services service. This is a <code>ServiceInsightHealth</code> that contains the number of open proactive and reactive insights for this service.</p>
    pub fn set_insight(
        mut self,
        input: std::option::Option<crate::types::ServiceInsightHealth>,
    ) -> Self {
        self.insight = input;
        self
    }
    /// <p> Number of resources that DevOps Guru is monitoring in an analyzed Amazon Web Services service. </p>
    pub fn analyzed_resource_count(mut self, input: i64) -> Self {
        self.analyzed_resource_count = Some(input);
        self
    }
    /// <p> Number of resources that DevOps Guru is monitoring in an analyzed Amazon Web Services service. </p>
    pub fn set_analyzed_resource_count(mut self, input: std::option::Option<i64>) -> Self {
        self.analyzed_resource_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceHealth`](crate::types::ServiceHealth).
    pub fn build(self) -> crate::types::ServiceHealth {
        crate::types::ServiceHealth {
            service_name: self.service_name,
            insight: self.insight,
            analyzed_resource_count: self.analyzed_resource_count,
        }
    }
}
