// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about the estimated monthly cost to analyze an Amazon Web Services resource. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceResourceCost {
    /// <p>The type of the Amazon Web Services resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The state of the resource. The resource is <code>ACTIVE</code> if it produces metrics, events, or logs within an hour, otherwise it is <code>INACTIVE</code>. You pay for the number of active Amazon Web Services resource hours analyzed for each resource. Inactive resources are not charged. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::CostEstimationServiceResourceState>,
    /// <p>The number of active resources analyzed for this service to create a monthly cost estimate.</p>
    #[doc(hidden)]
    pub count: i32,
    /// <p>The price per hour to analyze the resources in the service. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
    #[doc(hidden)]
    pub unit_cost: f64,
    /// <p>The total estimated monthly cost to analyze the active resources for this resource.</p>
    #[doc(hidden)]
    pub cost: f64,
}
impl ServiceResourceCost {
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The state of the resource. The resource is <code>ACTIVE</code> if it produces metrics, events, or logs within an hour, otherwise it is <code>INACTIVE</code>. You pay for the number of active Amazon Web Services resource hours analyzed for each resource. Inactive resources are not charged. </p>
    pub fn state(&self) -> std::option::Option<&crate::types::CostEstimationServiceResourceState> {
        self.state.as_ref()
    }
    /// <p>The number of active resources analyzed for this service to create a monthly cost estimate.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
    /// <p>The price per hour to analyze the resources in the service. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
    pub fn unit_cost(&self) -> f64 {
        self.unit_cost
    }
    /// <p>The total estimated monthly cost to analyze the active resources for this resource.</p>
    pub fn cost(&self) -> f64 {
        self.cost
    }
}
impl ServiceResourceCost {
    /// Creates a new builder-style object to manufacture [`ServiceResourceCost`](crate::types::ServiceResourceCost).
    pub fn builder() -> crate::types::builders::ServiceResourceCostBuilder {
        crate::types::builders::ServiceResourceCostBuilder::default()
    }
}

/// A builder for [`ServiceResourceCost`](crate::types::ServiceResourceCost).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceResourceCostBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::CostEstimationServiceResourceState>,
    pub(crate) count: std::option::Option<i32>,
    pub(crate) unit_cost: std::option::Option<f64>,
    pub(crate) cost: std::option::Option<f64>,
}
impl ServiceResourceCostBuilder {
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the Amazon Web Services resource.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The state of the resource. The resource is <code>ACTIVE</code> if it produces metrics, events, or logs within an hour, otherwise it is <code>INACTIVE</code>. You pay for the number of active Amazon Web Services resource hours analyzed for each resource. Inactive resources are not charged. </p>
    pub fn state(mut self, input: crate::types::CostEstimationServiceResourceState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the resource. The resource is <code>ACTIVE</code> if it produces metrics, events, or logs within an hour, otherwise it is <code>INACTIVE</code>. You pay for the number of active Amazon Web Services resource hours analyzed for each resource. Inactive resources are not charged. </p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::CostEstimationServiceResourceState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The number of active resources analyzed for this service to create a monthly cost estimate.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The number of active resources analyzed for this service to create a monthly cost estimate.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The price per hour to analyze the resources in the service. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
    pub fn unit_cost(mut self, input: f64) -> Self {
        self.unit_cost = Some(input);
        self
    }
    /// <p>The price per hour to analyze the resources in the service. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>.</p>
    pub fn set_unit_cost(mut self, input: std::option::Option<f64>) -> Self {
        self.unit_cost = input;
        self
    }
    /// <p>The total estimated monthly cost to analyze the active resources for this resource.</p>
    pub fn cost(mut self, input: f64) -> Self {
        self.cost = Some(input);
        self
    }
    /// <p>The total estimated monthly cost to analyze the active resources for this resource.</p>
    pub fn set_cost(mut self, input: std::option::Option<f64>) -> Self {
        self.cost = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceResourceCost`](crate::types::ServiceResourceCost).
    pub fn build(self) -> crate::types::ServiceResourceCost {
        crate::types::ServiceResourceCost {
            r#type: self.r#type,
            state: self.state,
            count: self.count.unwrap_or_default(),
            unit_cost: self.unit_cost.unwrap_or_default(),
            cost: self.cost.unwrap_or_default(),
        }
    }
}
