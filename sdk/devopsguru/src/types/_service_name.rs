// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ServiceName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let servicename = unimplemented!();
/// match servicename {
///     ServiceName::ApiGateway => { /* ... */ },
///     ServiceName::ApplicationElb => { /* ... */ },
///     ServiceName::AutoScalingGroup => { /* ... */ },
///     ServiceName::CloudFront => { /* ... */ },
///     ServiceName::DynamoDb => { /* ... */ },
///     ServiceName::Ec2 => { /* ... */ },
///     ServiceName::Ecs => { /* ... */ },
///     ServiceName::Eks => { /* ... */ },
///     ServiceName::ElasticBeanstalk => { /* ... */ },
///     ServiceName::ElastiCache => { /* ... */ },
///     ServiceName::Elb => { /* ... */ },
///     ServiceName::Es => { /* ... */ },
///     ServiceName::Kinesis => { /* ... */ },
///     ServiceName::Lambda => { /* ... */ },
///     ServiceName::NatGateway => { /* ... */ },
///     ServiceName::NetworkElb => { /* ... */ },
///     ServiceName::Rds => { /* ... */ },
///     ServiceName::Redshift => { /* ... */ },
///     ServiceName::Route53 => { /* ... */ },
///     ServiceName::S3 => { /* ... */ },
///     ServiceName::SageMaker => { /* ... */ },
///     ServiceName::Sns => { /* ... */ },
///     ServiceName::Sqs => { /* ... */ },
///     ServiceName::StepFunctions => { /* ... */ },
///     ServiceName::Swf => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `servicename` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ServiceName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ServiceName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ServiceName::NewFeature` is defined.
/// Specifically, when `servicename` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ServiceName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ServiceName {
    #[allow(missing_docs)] // documentation missing in model
    ApiGateway,
    #[allow(missing_docs)] // documentation missing in model
    ApplicationElb,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroup,
    #[allow(missing_docs)] // documentation missing in model
    CloudFront,
    #[allow(missing_docs)] // documentation missing in model
    DynamoDb,
    #[allow(missing_docs)] // documentation missing in model
    Ec2,
    #[allow(missing_docs)] // documentation missing in model
    Ecs,
    #[allow(missing_docs)] // documentation missing in model
    Eks,
    #[allow(missing_docs)] // documentation missing in model
    ElasticBeanstalk,
    #[allow(missing_docs)] // documentation missing in model
    ElastiCache,
    #[allow(missing_docs)] // documentation missing in model
    Elb,
    #[allow(missing_docs)] // documentation missing in model
    Es,
    #[allow(missing_docs)] // documentation missing in model
    Kinesis,
    #[allow(missing_docs)] // documentation missing in model
    Lambda,
    #[allow(missing_docs)] // documentation missing in model
    NatGateway,
    #[allow(missing_docs)] // documentation missing in model
    NetworkElb,
    #[allow(missing_docs)] // documentation missing in model
    Rds,
    #[allow(missing_docs)] // documentation missing in model
    Redshift,
    #[allow(missing_docs)] // documentation missing in model
    Route53,
    #[allow(missing_docs)] // documentation missing in model
    S3,
    #[allow(missing_docs)] // documentation missing in model
    SageMaker,
    #[allow(missing_docs)] // documentation missing in model
    Sns,
    #[allow(missing_docs)] // documentation missing in model
    Sqs,
    #[allow(missing_docs)] // documentation missing in model
    StepFunctions,
    #[allow(missing_docs)] // documentation missing in model
    Swf,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ServiceName {
    fn from(s: &str) -> Self {
        match s {
            "API_GATEWAY" => ServiceName::ApiGateway,
            "APPLICATION_ELB" => ServiceName::ApplicationElb,
            "AUTO_SCALING_GROUP" => ServiceName::AutoScalingGroup,
            "CLOUD_FRONT" => ServiceName::CloudFront,
            "DYNAMO_DB" => ServiceName::DynamoDb,
            "EC2" => ServiceName::Ec2,
            "ECS" => ServiceName::Ecs,
            "EKS" => ServiceName::Eks,
            "ELASTIC_BEANSTALK" => ServiceName::ElasticBeanstalk,
            "ELASTI_CACHE" => ServiceName::ElastiCache,
            "ELB" => ServiceName::Elb,
            "ES" => ServiceName::Es,
            "KINESIS" => ServiceName::Kinesis,
            "LAMBDA" => ServiceName::Lambda,
            "NAT_GATEWAY" => ServiceName::NatGateway,
            "NETWORK_ELB" => ServiceName::NetworkElb,
            "RDS" => ServiceName::Rds,
            "REDSHIFT" => ServiceName::Redshift,
            "ROUTE_53" => ServiceName::Route53,
            "S3" => ServiceName::S3,
            "SAGE_MAKER" => ServiceName::SageMaker,
            "SNS" => ServiceName::Sns,
            "SQS" => ServiceName::Sqs,
            "STEP_FUNCTIONS" => ServiceName::StepFunctions,
            "SWF" => ServiceName::Swf,
            other => ServiceName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ServiceName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ServiceName::from(s))
    }
}
impl ServiceName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ServiceName::ApiGateway => "API_GATEWAY",
            ServiceName::ApplicationElb => "APPLICATION_ELB",
            ServiceName::AutoScalingGroup => "AUTO_SCALING_GROUP",
            ServiceName::CloudFront => "CLOUD_FRONT",
            ServiceName::DynamoDb => "DYNAMO_DB",
            ServiceName::Ec2 => "EC2",
            ServiceName::Ecs => "ECS",
            ServiceName::Eks => "EKS",
            ServiceName::ElasticBeanstalk => "ELASTIC_BEANSTALK",
            ServiceName::ElastiCache => "ELASTI_CACHE",
            ServiceName::Elb => "ELB",
            ServiceName::Es => "ES",
            ServiceName::Kinesis => "KINESIS",
            ServiceName::Lambda => "LAMBDA",
            ServiceName::NatGateway => "NAT_GATEWAY",
            ServiceName::NetworkElb => "NETWORK_ELB",
            ServiceName::Rds => "RDS",
            ServiceName::Redshift => "REDSHIFT",
            ServiceName::Route53 => "ROUTE_53",
            ServiceName::S3 => "S3",
            ServiceName::SageMaker => "SAGE_MAKER",
            ServiceName::Sns => "SNS",
            ServiceName::Sqs => "SQS",
            ServiceName::StepFunctions => "STEP_FUNCTIONS",
            ServiceName::Swf => "SWF",
            ServiceName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "API_GATEWAY",
            "APPLICATION_ELB",
            "AUTO_SCALING_GROUP",
            "CLOUD_FRONT",
            "DYNAMO_DB",
            "EC2",
            "ECS",
            "EKS",
            "ELASTIC_BEANSTALK",
            "ELASTI_CACHE",
            "ELB",
            "ES",
            "KINESIS",
            "LAMBDA",
            "NAT_GATEWAY",
            "NETWORK_ELB",
            "RDS",
            "REDSHIFT",
            "ROUTE_53",
            "S3",
            "SAGE_MAKER",
            "SNS",
            "SQS",
            "STEP_FUNCTIONS",
            "SWF",
        ]
    }
}
impl AsRef<str> for ServiceName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
