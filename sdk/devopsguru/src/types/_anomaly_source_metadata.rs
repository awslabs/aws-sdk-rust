// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata about the detection source that generates proactive anomalies. The anomaly is detected using analysis of the metric dataâ€¨ over a period of time</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnomalySourceMetadata {
    /// <p>The source of the anomaly.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>The name of the anomaly's resource.</p>
    #[doc(hidden)]
    pub source_resource_name: std::option::Option<std::string::String>,
    /// <p>The anomaly's resource type.</p>
    #[doc(hidden)]
    pub source_resource_type: std::option::Option<std::string::String>,
}
impl AnomalySourceMetadata {
    /// <p>The source of the anomaly.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The name of the anomaly's resource.</p>
    pub fn source_resource_name(&self) -> std::option::Option<&str> {
        self.source_resource_name.as_deref()
    }
    /// <p>The anomaly's resource type.</p>
    pub fn source_resource_type(&self) -> std::option::Option<&str> {
        self.source_resource_type.as_deref()
    }
}
impl AnomalySourceMetadata {
    /// Creates a new builder-style object to manufacture [`AnomalySourceMetadata`](crate::types::AnomalySourceMetadata).
    pub fn builder() -> crate::types::builders::AnomalySourceMetadataBuilder {
        crate::types::builders::AnomalySourceMetadataBuilder::default()
    }
}

/// A builder for [`AnomalySourceMetadata`](crate::types::AnomalySourceMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnomalySourceMetadataBuilder {
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) source_resource_name: std::option::Option<std::string::String>,
    pub(crate) source_resource_type: std::option::Option<std::string::String>,
}
impl AnomalySourceMetadataBuilder {
    /// <p>The source of the anomaly.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source of the anomaly.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The name of the anomaly's resource.</p>
    pub fn source_resource_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_resource_name = Some(input.into());
        self
    }
    /// <p>The name of the anomaly's resource.</p>
    pub fn set_source_resource_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_resource_name = input;
        self
    }
    /// <p>The anomaly's resource type.</p>
    pub fn source_resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_resource_type = Some(input.into());
        self
    }
    /// <p>The anomaly's resource type.</p>
    pub fn set_source_resource_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_resource_type = input;
        self
    }
    /// Consumes the builder and constructs a [`AnomalySourceMetadata`](crate::types::AnomalySourceMetadata).
    pub fn build(self) -> crate::types::AnomalySourceMetadata {
        crate::types::AnomalySourceMetadata {
            source: self.source,
            source_resource_name: self.source_resource_name,
            source_resource_type: self.source_resource_type,
        }
    }
}
