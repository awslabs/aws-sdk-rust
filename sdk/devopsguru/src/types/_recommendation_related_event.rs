// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about an event that is related to a recommendation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationRelatedEvent {
    /// <p> The name of the event. This corresponds to the <code>Name</code> field in an <code>Event</code> object. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> A <code>ResourceCollection</code> object that contains arrays of the names of Amazon Web Services CloudFormation stacks. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    #[doc(hidden)]
    pub resources:
        std::option::Option<std::vec::Vec<crate::types::RecommendationRelatedEventResource>>,
}
impl RecommendationRelatedEvent {
    /// <p> The name of the event. This corresponds to the <code>Name</code> field in an <code>Event</code> object. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> A <code>ResourceCollection</code> object that contains arrays of the names of Amazon Web Services CloudFormation stacks. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn resources(
        &self,
    ) -> std::option::Option<&[crate::types::RecommendationRelatedEventResource]> {
        self.resources.as_deref()
    }
}
impl RecommendationRelatedEvent {
    /// Creates a new builder-style object to manufacture [`RecommendationRelatedEvent`](crate::types::RecommendationRelatedEvent).
    pub fn builder() -> crate::types::builders::RecommendationRelatedEventBuilder {
        crate::types::builders::RecommendationRelatedEventBuilder::default()
    }
}

/// A builder for [`RecommendationRelatedEvent`](crate::types::RecommendationRelatedEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationRelatedEventBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) resources:
        std::option::Option<std::vec::Vec<crate::types::RecommendationRelatedEventResource>>,
}
impl RecommendationRelatedEventBuilder {
    /// <p> The name of the event. This corresponds to the <code>Name</code> field in an <code>Event</code> object. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the event. This corresponds to the <code>Name</code> field in an <code>Event</code> object. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p> A <code>ResourceCollection</code> object that contains arrays of the names of Amazon Web Services CloudFormation stacks. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn resources(mut self, input: crate::types::RecommendationRelatedEventResource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = Some(v);
        self
    }
    /// <p> A <code>ResourceCollection</code> object that contains arrays of the names of Amazon Web Services CloudFormation stacks. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecommendationRelatedEventResource>>,
    ) -> Self {
        self.resources = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationRelatedEvent`](crate::types::RecommendationRelatedEvent).
    pub fn build(self) -> crate::types::RecommendationRelatedEvent {
        crate::types::RecommendationRelatedEvent {
            name: self.name,
            resources: self.resources,
        }
    }
}
