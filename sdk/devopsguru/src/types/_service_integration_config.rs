// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the integration of DevOps Guru with another Amazon Web Services service, such as Amazon Web Services Systems Manager. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceIntegrationConfig {
    /// <p> Information about whether DevOps Guru is configured to create an OpsItem in Amazon Web Services Systems Manager OpsCenter for each created insight. </p>
    #[doc(hidden)]
    pub ops_center: std::option::Option<crate::types::OpsCenterIntegration>,
    /// <p> Information about whether DevOps Guru is configured to perform log anomaly detection on Amazon CloudWatch log groups. </p>
    #[doc(hidden)]
    pub logs_anomaly_detection: std::option::Option<crate::types::LogsAnomalyDetectionIntegration>,
}
impl ServiceIntegrationConfig {
    /// <p> Information about whether DevOps Guru is configured to create an OpsItem in Amazon Web Services Systems Manager OpsCenter for each created insight. </p>
    pub fn ops_center(&self) -> std::option::Option<&crate::types::OpsCenterIntegration> {
        self.ops_center.as_ref()
    }
    /// <p> Information about whether DevOps Guru is configured to perform log anomaly detection on Amazon CloudWatch log groups. </p>
    pub fn logs_anomaly_detection(
        &self,
    ) -> std::option::Option<&crate::types::LogsAnomalyDetectionIntegration> {
        self.logs_anomaly_detection.as_ref()
    }
}
impl ServiceIntegrationConfig {
    /// Creates a new builder-style object to manufacture [`ServiceIntegrationConfig`](crate::types::ServiceIntegrationConfig).
    pub fn builder() -> crate::types::builders::ServiceIntegrationConfigBuilder {
        crate::types::builders::ServiceIntegrationConfigBuilder::default()
    }
}

/// A builder for [`ServiceIntegrationConfig`](crate::types::ServiceIntegrationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceIntegrationConfigBuilder {
    pub(crate) ops_center: std::option::Option<crate::types::OpsCenterIntegration>,
    pub(crate) logs_anomaly_detection:
        std::option::Option<crate::types::LogsAnomalyDetectionIntegration>,
}
impl ServiceIntegrationConfigBuilder {
    /// <p> Information about whether DevOps Guru is configured to create an OpsItem in Amazon Web Services Systems Manager OpsCenter for each created insight. </p>
    pub fn ops_center(mut self, input: crate::types::OpsCenterIntegration) -> Self {
        self.ops_center = Some(input);
        self
    }
    /// <p> Information about whether DevOps Guru is configured to create an OpsItem in Amazon Web Services Systems Manager OpsCenter for each created insight. </p>
    pub fn set_ops_center(
        mut self,
        input: std::option::Option<crate::types::OpsCenterIntegration>,
    ) -> Self {
        self.ops_center = input;
        self
    }
    /// <p> Information about whether DevOps Guru is configured to perform log anomaly detection on Amazon CloudWatch log groups. </p>
    pub fn logs_anomaly_detection(
        mut self,
        input: crate::types::LogsAnomalyDetectionIntegration,
    ) -> Self {
        self.logs_anomaly_detection = Some(input);
        self
    }
    /// <p> Information about whether DevOps Guru is configured to perform log anomaly detection on Amazon CloudWatch log groups. </p>
    pub fn set_logs_anomaly_detection(
        mut self,
        input: std::option::Option<crate::types::LogsAnomalyDetectionIntegration>,
    ) -> Self {
        self.logs_anomaly_detection = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceIntegrationConfig`](crate::types::ServiceIntegrationConfig).
    pub fn build(self) -> crate::types::ServiceIntegrationConfig {
        crate::types::ServiceIntegrationConfig {
            ops_center: self.ops_center,
            logs_anomaly_detection: self.logs_anomaly_detection,
        }
    }
}
