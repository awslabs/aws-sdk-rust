// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the integration of DevOps Guru as consumer with another AWS service, such as AWS CodeGuru Profiler via EventBridge.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventSourcesConfig {
    /// <p>Information about whether DevOps Guru is configured to consume recommendations which are generated from AWS CodeGuru Profiler.</p>
    #[doc(hidden)]
    pub amazon_code_guru_profiler:
        std::option::Option<crate::types::AmazonCodeGuruProfilerIntegration>,
}
impl EventSourcesConfig {
    /// <p>Information about whether DevOps Guru is configured to consume recommendations which are generated from AWS CodeGuru Profiler.</p>
    pub fn amazon_code_guru_profiler(
        &self,
    ) -> std::option::Option<&crate::types::AmazonCodeGuruProfilerIntegration> {
        self.amazon_code_guru_profiler.as_ref()
    }
}
impl EventSourcesConfig {
    /// Creates a new builder-style object to manufacture [`EventSourcesConfig`](crate::types::EventSourcesConfig).
    pub fn builder() -> crate::types::builders::EventSourcesConfigBuilder {
        crate::types::builders::EventSourcesConfigBuilder::default()
    }
}

/// A builder for [`EventSourcesConfig`](crate::types::EventSourcesConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventSourcesConfigBuilder {
    pub(crate) amazon_code_guru_profiler:
        std::option::Option<crate::types::AmazonCodeGuruProfilerIntegration>,
}
impl EventSourcesConfigBuilder {
    /// <p>Information about whether DevOps Guru is configured to consume recommendations which are generated from AWS CodeGuru Profiler.</p>
    pub fn amazon_code_guru_profiler(
        mut self,
        input: crate::types::AmazonCodeGuruProfilerIntegration,
    ) -> Self {
        self.amazon_code_guru_profiler = Some(input);
        self
    }
    /// <p>Information about whether DevOps Guru is configured to consume recommendations which are generated from AWS CodeGuru Profiler.</p>
    pub fn set_amazon_code_guru_profiler(
        mut self,
        input: std::option::Option<crate::types::AmazonCodeGuruProfilerIntegration>,
    ) -> Self {
        self.amazon_code_guru_profiler = input;
        self
    }
    /// Consumes the builder and constructs a [`EventSourcesConfig`](crate::types::EventSourcesConfig).
    pub fn build(self) -> crate::types::EventSourcesConfig {
        crate::types::EventSourcesConfig {
            amazon_code_guru_profiler: self.amazon_code_guru_profiler,
        }
    }
}
