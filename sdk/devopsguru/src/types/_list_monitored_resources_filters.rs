// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Filters to determine which monitored resources you want to retrieve. You can filter by resource type or resource permission status. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMonitoredResourcesFilters {
    /// <p> The permission status of a resource. </p>
    #[doc(hidden)]
    pub resource_permission: std::option::Option<crate::types::ResourcePermission>,
    /// <p> The type of resource that you wish to retrieve, such as log groups. </p>
    #[doc(hidden)]
    pub resource_type_filters: std::option::Option<std::vec::Vec<crate::types::ResourceTypeFilter>>,
}
impl ListMonitoredResourcesFilters {
    /// <p> The permission status of a resource. </p>
    pub fn resource_permission(&self) -> std::option::Option<&crate::types::ResourcePermission> {
        self.resource_permission.as_ref()
    }
    /// <p> The type of resource that you wish to retrieve, such as log groups. </p>
    pub fn resource_type_filters(
        &self,
    ) -> std::option::Option<&[crate::types::ResourceTypeFilter]> {
        self.resource_type_filters.as_deref()
    }
}
impl ListMonitoredResourcesFilters {
    /// Creates a new builder-style object to manufacture [`ListMonitoredResourcesFilters`](crate::types::ListMonitoredResourcesFilters).
    pub fn builder() -> crate::types::builders::ListMonitoredResourcesFiltersBuilder {
        crate::types::builders::ListMonitoredResourcesFiltersBuilder::default()
    }
}

/// A builder for [`ListMonitoredResourcesFilters`](crate::types::ListMonitoredResourcesFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMonitoredResourcesFiltersBuilder {
    pub(crate) resource_permission: std::option::Option<crate::types::ResourcePermission>,
    pub(crate) resource_type_filters:
        std::option::Option<std::vec::Vec<crate::types::ResourceTypeFilter>>,
}
impl ListMonitoredResourcesFiltersBuilder {
    /// <p> The permission status of a resource. </p>
    pub fn resource_permission(mut self, input: crate::types::ResourcePermission) -> Self {
        self.resource_permission = Some(input);
        self
    }
    /// <p> The permission status of a resource. </p>
    pub fn set_resource_permission(
        mut self,
        input: std::option::Option<crate::types::ResourcePermission>,
    ) -> Self {
        self.resource_permission = input;
        self
    }
    /// Appends an item to `resource_type_filters`.
    ///
    /// To override the contents of this collection use [`set_resource_type_filters`](Self::set_resource_type_filters).
    ///
    /// <p> The type of resource that you wish to retrieve, such as log groups. </p>
    pub fn resource_type_filters(mut self, input: crate::types::ResourceTypeFilter) -> Self {
        let mut v = self.resource_type_filters.unwrap_or_default();
        v.push(input);
        self.resource_type_filters = Some(v);
        self
    }
    /// <p> The type of resource that you wish to retrieve, such as log groups. </p>
    pub fn set_resource_type_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceTypeFilter>>,
    ) -> Self {
        self.resource_type_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`ListMonitoredResourcesFilters`](crate::types::ListMonitoredResourcesFilters).
    pub fn build(self) -> crate::types::ListMonitoredResourcesFilters {
        crate::types::ListMonitoredResourcesFilters {
            resource_permission: self.resource_permission,
            resource_type_filters: self.resource_type_filters,
        }
    }
}
