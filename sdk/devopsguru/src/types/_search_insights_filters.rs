// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies values used to filter responses when searching for insights. You can use a <code>ResourceCollection</code>, <code>ServiceCollection</code>, array of severities, and an array of status values. Each filter type contains one or more values to search for. If you specify multiple filter types, the filter types are joined with an <code>AND</code>, and the request returns only results that match all of the specified filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchInsightsFilters {
    /// <p> An array of severity values used to search for insights. </p>
    pub severities: ::std::option::Option<::std::vec::Vec<crate::types::InsightSeverity>>,
    /// <p> An array of status values used to search for insights. </p>
    pub statuses: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatus>>,
    /// <p> A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub resource_collection: ::std::option::Option<crate::types::ResourceCollection>,
    /// <p>A collection of the names of Amazon Web Services services.</p>
    pub service_collection: ::std::option::Option<crate::types::ServiceCollection>,
}
impl SearchInsightsFilters {
    /// <p> An array of severity values used to search for insights. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.severities.is_none()`.
    pub fn severities(&self) -> &[crate::types::InsightSeverity] {
        self.severities.as_deref().unwrap_or_default()
    }
    /// <p> An array of status values used to search for insights. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statuses.is_none()`.
    pub fn statuses(&self) -> &[crate::types::InsightStatus] {
        self.statuses.as_deref().unwrap_or_default()
    }
    /// <p> A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn resource_collection(&self) -> ::std::option::Option<&crate::types::ResourceCollection> {
        self.resource_collection.as_ref()
    }
    /// <p>A collection of the names of Amazon Web Services services.</p>
    pub fn service_collection(&self) -> ::std::option::Option<&crate::types::ServiceCollection> {
        self.service_collection.as_ref()
    }
}
impl SearchInsightsFilters {
    /// Creates a new builder-style object to manufacture [`SearchInsightsFilters`](crate::types::SearchInsightsFilters).
    pub fn builder() -> crate::types::builders::SearchInsightsFiltersBuilder {
        crate::types::builders::SearchInsightsFiltersBuilder::default()
    }
}

/// A builder for [`SearchInsightsFilters`](crate::types::SearchInsightsFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchInsightsFiltersBuilder {
    pub(crate) severities: ::std::option::Option<::std::vec::Vec<crate::types::InsightSeverity>>,
    pub(crate) statuses: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatus>>,
    pub(crate) resource_collection: ::std::option::Option<crate::types::ResourceCollection>,
    pub(crate) service_collection: ::std::option::Option<crate::types::ServiceCollection>,
}
impl SearchInsightsFiltersBuilder {
    /// Appends an item to `severities`.
    ///
    /// To override the contents of this collection use [`set_severities`](Self::set_severities).
    ///
    /// <p> An array of severity values used to search for insights. </p>
    pub fn severities(mut self, input: crate::types::InsightSeverity) -> Self {
        let mut v = self.severities.unwrap_or_default();
        v.push(input);
        self.severities = ::std::option::Option::Some(v);
        self
    }
    /// <p> An array of severity values used to search for insights. </p>
    pub fn set_severities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightSeverity>>) -> Self {
        self.severities = input;
        self
    }
    /// <p> An array of severity values used to search for insights. </p>
    pub fn get_severities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightSeverity>> {
        &self.severities
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p> An array of status values used to search for insights. </p>
    pub fn statuses(mut self, input: crate::types::InsightStatus) -> Self {
        let mut v = self.statuses.unwrap_or_default();
        v.push(input);
        self.statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p> An array of status values used to search for insights. </p>
    pub fn set_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatus>>) -> Self {
        self.statuses = input;
        self
    }
    /// <p> An array of status values used to search for insights. </p>
    pub fn get_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightStatus>> {
        &self.statuses
    }
    /// <p> A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn resource_collection(mut self, input: crate::types::ResourceCollection) -> Self {
        self.resource_collection = ::std::option::Option::Some(input);
        self
    }
    /// <p> A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn set_resource_collection(mut self, input: ::std::option::Option<crate::types::ResourceCollection>) -> Self {
        self.resource_collection = input;
        self
    }
    /// <p> A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. </p>
    pub fn get_resource_collection(&self) -> &::std::option::Option<crate::types::ResourceCollection> {
        &self.resource_collection
    }
    /// <p>A collection of the names of Amazon Web Services services.</p>
    pub fn service_collection(mut self, input: crate::types::ServiceCollection) -> Self {
        self.service_collection = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of the names of Amazon Web Services services.</p>
    pub fn set_service_collection(mut self, input: ::std::option::Option<crate::types::ServiceCollection>) -> Self {
        self.service_collection = input;
        self
    }
    /// <p>A collection of the names of Amazon Web Services services.</p>
    pub fn get_service_collection(&self) -> &::std::option::Option<crate::types::ServiceCollection> {
        &self.service_collection
    }
    /// Consumes the builder and constructs a [`SearchInsightsFilters`](crate::types::SearchInsightsFilters).
    pub fn build(self) -> crate::types::SearchInsightsFilters {
        crate::types::SearchInsightsFilters {
            severities: self.severities,
            statuses: self.statuses,
            resource_collection: self.resource_collection,
            service_collection: self.service_collection,
        }
    }
}
