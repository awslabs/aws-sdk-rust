// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_organization_resource_collection_health_output_next_token(
    input: &crate::operation::describe_organization_resource_collection_health::DescribeOrganizationResourceCollectionHealthOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_resource_collection_health_output_next_token(
    input: &crate::operation::describe_resource_collection_health::DescribeResourceCollectionHealthOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_cost_estimation_output_next_token(
    input: &crate::operation::get_cost_estimation::GetCostEstimationOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_resource_collection_output_next_token(
    input: &crate::operation::get_resource_collection::GetResourceCollectionOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_anomalies_for_insight_output_next_token(
    input: &crate::operation::list_anomalies_for_insight::ListAnomaliesForInsightOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_anomalous_log_groups_output_next_token(
    input: &crate::operation::list_anomalous_log_groups::ListAnomalousLogGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_events_output_next_token(
    input: &crate::operation::list_events::ListEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_insights_output_next_token(
    input: &crate::operation::list_insights::ListInsightsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_monitored_resources_output_next_token(
    input: &crate::operation::list_monitored_resources::ListMonitoredResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_notification_channels_output_next_token(
    input: &crate::operation::list_notification_channels::ListNotificationChannelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_organization_insights_output_next_token(
    input: &crate::operation::list_organization_insights::ListOrganizationInsightsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recommendations_output_next_token(
    input: &crate::operation::list_recommendations::ListRecommendationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_insights_output_next_token(
    input: &crate::operation::search_insights::SearchInsightsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_organization_insights_output_next_token(
    input: &crate::operation::search_organization_insights::SearchOrganizationInsightsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_events_output_events(
    input: crate::operation::list_events::ListEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Event>> {
    let input = input.events;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_notification_channels_output_channels(
    input: crate::operation::list_notification_channels::ListNotificationChannelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NotificationChannel>> {
    let input = match input.channels {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_recommendations_output_recommendations(
    input: crate::operation::list_recommendations::ListRecommendationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Recommendation>> {
    let input = match input.recommendations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
