// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListInsightsOutput {
    /// <p> The returned list of proactive insights. </p>
    pub proactive_insights: ::std::option::Option<::std::vec::Vec<crate::types::ProactiveInsightSummary>>,
    /// <p> The returned list of reactive insights. </p>
    pub reactive_insights: ::std::option::Option<::std::vec::Vec<crate::types::ReactiveInsightSummary>>,
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListInsightsOutput {
    /// <p> The returned list of proactive insights. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.proactive_insights.is_none()`.
    pub fn proactive_insights(&self) -> &[crate::types::ProactiveInsightSummary] {
        self.proactive_insights.as_deref().unwrap_or_default()
    }
    /// <p> The returned list of reactive insights. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reactive_insights.is_none()`.
    pub fn reactive_insights(&self) -> &[crate::types::ReactiveInsightSummary] {
        self.reactive_insights.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListInsightsOutput {
    /// Creates a new builder-style object to manufacture [`ListInsightsOutput`](crate::operation::list_insights::ListInsightsOutput).
    pub fn builder() -> crate::operation::list_insights::builders::ListInsightsOutputBuilder {
        crate::operation::list_insights::builders::ListInsightsOutputBuilder::default()
    }
}

/// A builder for [`ListInsightsOutput`](crate::operation::list_insights::ListInsightsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListInsightsOutputBuilder {
    pub(crate) proactive_insights: ::std::option::Option<::std::vec::Vec<crate::types::ProactiveInsightSummary>>,
    pub(crate) reactive_insights: ::std::option::Option<::std::vec::Vec<crate::types::ReactiveInsightSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListInsightsOutputBuilder {
    /// Appends an item to `proactive_insights`.
    ///
    /// To override the contents of this collection use [`set_proactive_insights`](Self::set_proactive_insights).
    ///
    /// <p> The returned list of proactive insights. </p>
    pub fn proactive_insights(mut self, input: crate::types::ProactiveInsightSummary) -> Self {
        let mut v = self.proactive_insights.unwrap_or_default();
        v.push(input);
        self.proactive_insights = ::std::option::Option::Some(v);
        self
    }
    /// <p> The returned list of proactive insights. </p>
    pub fn set_proactive_insights(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProactiveInsightSummary>>) -> Self {
        self.proactive_insights = input;
        self
    }
    /// <p> The returned list of proactive insights. </p>
    pub fn get_proactive_insights(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProactiveInsightSummary>> {
        &self.proactive_insights
    }
    /// Appends an item to `reactive_insights`.
    ///
    /// To override the contents of this collection use [`set_reactive_insights`](Self::set_reactive_insights).
    ///
    /// <p> The returned list of reactive insights. </p>
    pub fn reactive_insights(mut self, input: crate::types::ReactiveInsightSummary) -> Self {
        let mut v = self.reactive_insights.unwrap_or_default();
        v.push(input);
        self.reactive_insights = ::std::option::Option::Some(v);
        self
    }
    /// <p> The returned list of reactive insights. </p>
    pub fn set_reactive_insights(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReactiveInsightSummary>>) -> Self {
        self.reactive_insights = input;
        self
    }
    /// <p> The returned list of reactive insights. </p>
    pub fn get_reactive_insights(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReactiveInsightSummary>> {
        &self.reactive_insights
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListInsightsOutput`](crate::operation::list_insights::ListInsightsOutput).
    pub fn build(self) -> crate::operation::list_insights::ListInsightsOutput {
        crate::operation::list_insights::ListInsightsOutput {
            proactive_insights: self.proactive_insights,
            reactive_insights: self.reactive_insights,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
