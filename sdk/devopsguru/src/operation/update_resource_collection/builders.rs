// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_resource_collection::_update_resource_collection_output::UpdateResourceCollectionOutputBuilder;

pub use crate::operation::update_resource_collection::_update_resource_collection_input::UpdateResourceCollectionInputBuilder;

/// Fluent builder constructing a request to `UpdateResourceCollection`.
///
/// <p> Updates the collection of resources that DevOps Guru analyzes. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. This method also creates the IAM role required for you to use DevOps Guru. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResourceCollectionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_resource_collection::builders::UpdateResourceCollectionInputBuilder
            }
impl UpdateResourceCollectionFluentBuilder {
    /// Creates a new `UpdateResourceCollection`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_resource_collection::UpdateResourceCollection,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_resource_collection::UpdateResourceCollectionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_resource_collection::UpdateResourceCollectionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_resource_collection::UpdateResourceCollectionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> Specifies if the resource collection in the request is added or deleted to the resource collection. </p>
    pub fn action(mut self, input: crate::types::UpdateResourceCollectionAction) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p> Specifies if the resource collection in the request is added or deleted to the resource collection. </p>
    pub fn set_action(
        mut self,
        input: std::option::Option<crate::types::UpdateResourceCollectionAction>,
    ) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p> Contains information used to update a collection of Amazon Web Services resources. </p>
    pub fn resource_collection(
        mut self,
        input: crate::types::UpdateResourceCollectionFilter,
    ) -> Self {
        self.inner = self.inner.resource_collection(input);
        self
    }
    /// <p> Contains information used to update a collection of Amazon Web Services resources. </p>
    pub fn set_resource_collection(
        mut self,
        input: std::option::Option<crate::types::UpdateResourceCollectionFilter>,
    ) -> Self {
        self.inner = self.inner.set_resource_collection(input);
        self
    }
}
