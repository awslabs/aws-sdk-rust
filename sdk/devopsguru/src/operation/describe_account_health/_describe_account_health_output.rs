// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccountHealthOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub open_reactive_insights: i32,
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub open_proactive_insights: i32,
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub metrics_analyzed: i32,
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    #[doc(hidden)]
    pub resource_hours: std::option::Option<i64>,
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    #[doc(hidden)]
    pub analyzed_resource_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeAccountHealthOutput {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    pub fn open_reactive_insights(&self) -> i32 {
        self.open_reactive_insights
    }
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    pub fn open_proactive_insights(&self) -> i32 {
        self.open_proactive_insights
    }
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    pub fn metrics_analyzed(&self) -> i32 {
        self.metrics_analyzed
    }
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    pub fn resource_hours(&self) -> std::option::Option<i64> {
        self.resource_hours
    }
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    pub fn analyzed_resource_count(&self) -> std::option::Option<i64> {
        self.analyzed_resource_count
    }
}
impl aws_http::request_id::RequestId for DescribeAccountHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAccountHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountHealthOutput`](crate::operation::describe_account_health::DescribeAccountHealthOutput).
    pub fn builder(
    ) -> crate::operation::describe_account_health::builders::DescribeAccountHealthOutputBuilder
    {
        crate::operation::describe_account_health::builders::DescribeAccountHealthOutputBuilder::default()
    }
}

/// A builder for [`DescribeAccountHealthOutput`](crate::operation::describe_account_health::DescribeAccountHealthOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAccountHealthOutputBuilder {
    pub(crate) open_reactive_insights: std::option::Option<i32>,
    pub(crate) open_proactive_insights: std::option::Option<i32>,
    pub(crate) metrics_analyzed: std::option::Option<i32>,
    pub(crate) resource_hours: std::option::Option<i64>,
    pub(crate) analyzed_resource_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeAccountHealthOutputBuilder {
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    pub fn open_reactive_insights(mut self, input: i32) -> Self {
        self.open_reactive_insights = Some(input);
        self
    }
    /// <p> An integer that specifies the number of open reactive insights in your Amazon Web Services account. </p>
    pub fn set_open_reactive_insights(mut self, input: std::option::Option<i32>) -> Self {
        self.open_reactive_insights = input;
        self
    }
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    pub fn open_proactive_insights(mut self, input: i32) -> Self {
        self.open_proactive_insights = Some(input);
        self
    }
    /// <p> An integer that specifies the number of open proactive insights in your Amazon Web Services account. </p>
    pub fn set_open_proactive_insights(mut self, input: std::option::Option<i32>) -> Self {
        self.open_proactive_insights = input;
        self
    }
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    pub fn metrics_analyzed(mut self, input: i32) -> Self {
        self.metrics_analyzed = Some(input);
        self
    }
    /// <p> An integer that specifies the number of metrics that have been analyzed in your Amazon Web Services account. </p>
    pub fn set_metrics_analyzed(mut self, input: std::option::Option<i32>) -> Self {
        self.metrics_analyzed = input;
        self
    }
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    pub fn resource_hours(mut self, input: i64) -> Self {
        self.resource_hours = Some(input);
        self
    }
    /// <p>The number of Amazon DevOps Guru resource analysis hours billed to the current Amazon Web Services account in the last hour. </p>
    pub fn set_resource_hours(mut self, input: std::option::Option<i64>) -> Self {
        self.resource_hours = input;
        self
    }
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    pub fn analyzed_resource_count(mut self, input: i64) -> Self {
        self.analyzed_resource_count = Some(input);
        self
    }
    /// <p> Number of resources that DevOps Guru is monitoring in your Amazon Web Services account. </p>
    pub fn set_analyzed_resource_count(mut self, input: std::option::Option<i64>) -> Self {
        self.analyzed_resource_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAccountHealthOutput`](crate::operation::describe_account_health::DescribeAccountHealthOutput).
    pub fn build(self) -> crate::operation::describe_account_health::DescribeAccountHealthOutput {
        crate::operation::describe_account_health::DescribeAccountHealthOutput {
            open_reactive_insights: self.open_reactive_insights.unwrap_or_default(),
            open_proactive_insights: self.open_proactive_insights.unwrap_or_default(),
            metrics_analyzed: self.metrics_analyzed.unwrap_or_default(),
            resource_hours: self.resource_hours,
            analyzed_resource_count: self.analyzed_resource_count,
            _request_id: self._request_id,
        }
    }
}
