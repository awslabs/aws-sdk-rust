// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates your quota request template with your organization. When a new account is
/// created in your organization, the quota increase requests in the template are automatically
/// applied to the account. You can add a quota increase request for any adjustable quota to your
/// template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateServiceQuotaTemplate {
    _private: (),
}
impl AssociateServiceQuotaTemplate {
    /// Creates a new builder-style object to manufacture [`AssociateServiceQuotaTemplateInput`](crate::input::AssociateServiceQuotaTemplateInput)
    pub fn builder() -> crate::input::associate_service_quota_template_input::Builder {
        crate::input::associate_service_quota_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateServiceQuotaTemplate {
    type Output = std::result::Result<
        crate::output::AssociateServiceQuotaTemplateOutput,
        crate::error::AssociateServiceQuotaTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_service_quota_template_error(response)
        } else {
            crate::operation_deser::parse_associate_service_quota_template_response(response)
        }
    }
}

/// <p>Deletes the quota increase request for the specified quota from your quota request
/// template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServiceQuotaIncreaseRequestFromTemplate {
    _private: (),
}
impl DeleteServiceQuotaIncreaseRequestFromTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteServiceQuotaIncreaseRequestFromTemplateInput`](crate::input::DeleteServiceQuotaIncreaseRequestFromTemplateInput)
    pub fn builder(
    ) -> crate::input::delete_service_quota_increase_request_from_template_input::Builder {
        crate::input::delete_service_quota_increase_request_from_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServiceQuotaIncreaseRequestFromTemplate {
    type Output = std::result::Result<
        crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput,
        crate::error::DeleteServiceQuotaIncreaseRequestFromTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_service_quota_increase_request_from_template_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_service_quota_increase_request_from_template_response(response)
        }
    }
}

/// <p>Disables your quota request template. After a template is disabled, the quota increase
/// requests in the template are not applied to new accounts in your organization. Disabling a
/// quota request template does not apply its quota increase requests.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateServiceQuotaTemplate {
    _private: (),
}
impl DisassociateServiceQuotaTemplate {
    /// Creates a new builder-style object to manufacture [`DisassociateServiceQuotaTemplateInput`](crate::input::DisassociateServiceQuotaTemplateInput)
    pub fn builder() -> crate::input::disassociate_service_quota_template_input::Builder {
        crate::input::disassociate_service_quota_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateServiceQuotaTemplate {
    type Output = std::result::Result<
        crate::output::DisassociateServiceQuotaTemplateOutput,
        crate::error::DisassociateServiceQuotaTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_service_quota_template_error(response)
        } else {
            crate::operation_deser::parse_disassociate_service_quota_template_response(response)
        }
    }
}

/// <p>Retrieves the status of the association for the quota request template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssociationForServiceQuotaTemplate {
    _private: (),
}
impl GetAssociationForServiceQuotaTemplate {
    /// Creates a new builder-style object to manufacture [`GetAssociationForServiceQuotaTemplateInput`](crate::input::GetAssociationForServiceQuotaTemplateInput)
    pub fn builder() -> crate::input::get_association_for_service_quota_template_input::Builder {
        crate::input::get_association_for_service_quota_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssociationForServiceQuotaTemplate {
    type Output = std::result::Result<
        crate::output::GetAssociationForServiceQuotaTemplateOutput,
        crate::error::GetAssociationForServiceQuotaTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_association_for_service_quota_template_error(response)
        } else {
            crate::operation_deser::parse_get_association_for_service_quota_template_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the default value for the specified quota. The default value does not reflect
/// any quota increases.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAWSDefaultServiceQuota {
    _private: (),
}
impl GetAWSDefaultServiceQuota {
    /// Creates a new builder-style object to manufacture [`GetAwsDefaultServiceQuotaInput`](crate::input::GetAwsDefaultServiceQuotaInput)
    pub fn builder() -> crate::input::get_aws_default_service_quota_input::Builder {
        crate::input::get_aws_default_service_quota_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAWSDefaultServiceQuota {
    type Output = std::result::Result<
        crate::output::GetAwsDefaultServiceQuotaOutput,
        crate::error::GetAWSDefaultServiceQuotaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_aws_default_service_quota_error(response)
        } else {
            crate::operation_deser::parse_get_aws_default_service_quota_response(response)
        }
    }
}

/// <p>Retrieves information about the specified quota increase request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRequestedServiceQuotaChange {
    _private: (),
}
impl GetRequestedServiceQuotaChange {
    /// Creates a new builder-style object to manufacture [`GetRequestedServiceQuotaChangeInput`](crate::input::GetRequestedServiceQuotaChangeInput)
    pub fn builder() -> crate::input::get_requested_service_quota_change_input::Builder {
        crate::input::get_requested_service_quota_change_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRequestedServiceQuotaChange {
    type Output = std::result::Result<
        crate::output::GetRequestedServiceQuotaChangeOutput,
        crate::error::GetRequestedServiceQuotaChangeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_requested_service_quota_change_error(response)
        } else {
            crate::operation_deser::parse_get_requested_service_quota_change_response(response)
        }
    }
}

/// <p>Retrieves the applied quota value for the specified quota. For some quotas, only the
/// default values are available. If the applied quota value is not available for a quota, the
/// quota is not retrieved.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceQuota {
    _private: (),
}
impl GetServiceQuota {
    /// Creates a new builder-style object to manufacture [`GetServiceQuotaInput`](crate::input::GetServiceQuotaInput)
    pub fn builder() -> crate::input::get_service_quota_input::Builder {
        crate::input::get_service_quota_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceQuota {
    type Output = std::result::Result<
        crate::output::GetServiceQuotaOutput,
        crate::error::GetServiceQuotaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_quota_error(response)
        } else {
            crate::operation_deser::parse_get_service_quota_response(response)
        }
    }
}

/// <p>Retrieves information about the specified quota increase request in your quota request
/// template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceQuotaIncreaseRequestFromTemplate {
    _private: (),
}
impl GetServiceQuotaIncreaseRequestFromTemplate {
    /// Creates a new builder-style object to manufacture [`GetServiceQuotaIncreaseRequestFromTemplateInput`](crate::input::GetServiceQuotaIncreaseRequestFromTemplateInput)
    pub fn builder() -> crate::input::get_service_quota_increase_request_from_template_input::Builder
    {
        crate::input::get_service_quota_increase_request_from_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceQuotaIncreaseRequestFromTemplate {
    type Output = std::result::Result<
        crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput,
        crate::error::GetServiceQuotaIncreaseRequestFromTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_quota_increase_request_from_template_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_service_quota_increase_request_from_template_response(
                response,
            )
        }
    }
}

/// <p>Lists the default values for the quotas for the specified AWS service. A default value
/// does not reflect any quota increases.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAWSDefaultServiceQuotas {
    _private: (),
}
impl ListAWSDefaultServiceQuotas {
    /// Creates a new builder-style object to manufacture [`ListAwsDefaultServiceQuotasInput`](crate::input::ListAwsDefaultServiceQuotasInput)
    pub fn builder() -> crate::input::list_aws_default_service_quotas_input::Builder {
        crate::input::list_aws_default_service_quotas_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAWSDefaultServiceQuotas {
    type Output = std::result::Result<
        crate::output::ListAwsDefaultServiceQuotasOutput,
        crate::error::ListAWSDefaultServiceQuotasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_aws_default_service_quotas_error(response)
        } else {
            crate::operation_deser::parse_list_aws_default_service_quotas_response(response)
        }
    }
}

/// <p>Retrieves the quota increase requests for the specified service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRequestedServiceQuotaChangeHistory {
    _private: (),
}
impl ListRequestedServiceQuotaChangeHistory {
    /// Creates a new builder-style object to manufacture [`ListRequestedServiceQuotaChangeHistoryInput`](crate::input::ListRequestedServiceQuotaChangeHistoryInput)
    pub fn builder() -> crate::input::list_requested_service_quota_change_history_input::Builder {
        crate::input::list_requested_service_quota_change_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRequestedServiceQuotaChangeHistory {
    type Output = std::result::Result<
        crate::output::ListRequestedServiceQuotaChangeHistoryOutput,
        crate::error::ListRequestedServiceQuotaChangeHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_requested_service_quota_change_history_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_requested_service_quota_change_history_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the quota increase requests for the specified quota.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRequestedServiceQuotaChangeHistoryByQuota {
    _private: (),
}
impl ListRequestedServiceQuotaChangeHistoryByQuota {
    /// Creates a new builder-style object to manufacture [`ListRequestedServiceQuotaChangeHistoryByQuotaInput`](crate::input::ListRequestedServiceQuotaChangeHistoryByQuotaInput)
    pub fn builder(
    ) -> crate::input::list_requested_service_quota_change_history_by_quota_input::Builder {
        crate::input::list_requested_service_quota_change_history_by_quota_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRequestedServiceQuotaChangeHistoryByQuota {
    type Output = std::result::Result<
        crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput,
        crate::error::ListRequestedServiceQuotaChangeHistoryByQuotaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_requested_service_quota_change_history_by_quota_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_requested_service_quota_change_history_by_quota_response(response)
        }
    }
}

/// <p>Lists the quota increase requests in the specified quota request template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceQuotaIncreaseRequestsInTemplate {
    _private: (),
}
impl ListServiceQuotaIncreaseRequestsInTemplate {
    /// Creates a new builder-style object to manufacture [`ListServiceQuotaIncreaseRequestsInTemplateInput`](crate::input::ListServiceQuotaIncreaseRequestsInTemplateInput)
    pub fn builder() -> crate::input::list_service_quota_increase_requests_in_template_input::Builder
    {
        crate::input::list_service_quota_increase_requests_in_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceQuotaIncreaseRequestsInTemplate {
    type Output = std::result::Result<
        crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput,
        crate::error::ListServiceQuotaIncreaseRequestsInTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_quota_increase_requests_in_template_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_service_quota_increase_requests_in_template_response(
                response,
            )
        }
    }
}

/// <p>Lists the applied quota values for the specified AWS service. For some quotas, only the
/// default values are available. If the applied quota value is not available for a quota, the
/// quota is not retrieved.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceQuotas {
    _private: (),
}
impl ListServiceQuotas {
    /// Creates a new builder-style object to manufacture [`ListServiceQuotasInput`](crate::input::ListServiceQuotasInput)
    pub fn builder() -> crate::input::list_service_quotas_input::Builder {
        crate::input::list_service_quotas_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceQuotas {
    type Output = std::result::Result<
        crate::output::ListServiceQuotasOutput,
        crate::error::ListServiceQuotasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_quotas_error(response)
        } else {
            crate::operation_deser::parse_list_service_quotas_response(response)
        }
    }
}

/// <p>Lists the names and codes for the services integrated with Service Quotas.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServices {
    _private: (),
}
impl ListServices {
    /// Creates a new builder-style object to manufacture [`ListServicesInput`](crate::input::ListServicesInput)
    pub fn builder() -> crate::input::list_services_input::Builder {
        crate::input::list_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServices {
    type Output =
        std::result::Result<crate::output::ListServicesOutput, crate::error::ListServicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_services_error(response)
        } else {
            crate::operation_deser::parse_list_services_response(response)
        }
    }
}

/// <p>Returns a list of the tags assigned to the specified applied quota.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Adds a quota increase request to your quota request template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutServiceQuotaIncreaseRequestIntoTemplate {
    _private: (),
}
impl PutServiceQuotaIncreaseRequestIntoTemplate {
    /// Creates a new builder-style object to manufacture [`PutServiceQuotaIncreaseRequestIntoTemplateInput`](crate::input::PutServiceQuotaIncreaseRequestIntoTemplateInput)
    pub fn builder() -> crate::input::put_service_quota_increase_request_into_template_input::Builder
    {
        crate::input::put_service_quota_increase_request_into_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutServiceQuotaIncreaseRequestIntoTemplate {
    type Output = std::result::Result<
        crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput,
        crate::error::PutServiceQuotaIncreaseRequestIntoTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_service_quota_increase_request_into_template_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_service_quota_increase_request_into_template_response(
                response,
            )
        }
    }
}

/// <p>Submits a quota increase request for the specified quota.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RequestServiceQuotaIncrease {
    _private: (),
}
impl RequestServiceQuotaIncrease {
    /// Creates a new builder-style object to manufacture [`RequestServiceQuotaIncreaseInput`](crate::input::RequestServiceQuotaIncreaseInput)
    pub fn builder() -> crate::input::request_service_quota_increase_input::Builder {
        crate::input::request_service_quota_increase_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RequestServiceQuotaIncrease {
    type Output = std::result::Result<
        crate::output::RequestServiceQuotaIncreaseOutput,
        crate::error::RequestServiceQuotaIncreaseError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_request_service_quota_increase_error(response)
        } else {
            crate::operation_deser::parse_request_service_quota_increase_response(response)
        }
    }
}

/// <p>Adds tags to the specified applied quota. You can include one or more tags to add to the
/// quota.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes tags from the specified applied quota. You can specify one or more tags to
/// remove.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}
