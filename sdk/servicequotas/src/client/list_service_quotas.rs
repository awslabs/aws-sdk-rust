// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListServiceQuotas`](crate::client::fluent_builders::ListServiceQuotas) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListServiceQuotas::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`service_code(impl Into<String>)`](crate::client::fluent_builders::ListServiceQuotas::service_code) / [`set_service_code(Option<String>)`](crate::client::fluent_builders::ListServiceQuotas::set_service_code): <p>The service identifier.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListServiceQuotas::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListServiceQuotas::set_next_token): <p>The token for the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListServiceQuotas::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListServiceQuotas::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, if any, make another call with the token returned from this call.</p>
    /// - On success, responds with [`ListServiceQuotasOutput`](crate::output::ListServiceQuotasOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListServiceQuotasOutput::next_token): <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    ///   - [`quotas(Option<Vec<ServiceQuota>>)`](crate::output::ListServiceQuotasOutput::quotas): <p>Information about the quotas.</p>
    /// - On failure, responds with [`SdkError<ListServiceQuotasError>`](crate::error::ListServiceQuotasError)
    pub fn list_service_quotas(&self) -> crate::client::fluent_builders::ListServiceQuotas {
        crate::client::fluent_builders::ListServiceQuotas::new(self.handle.clone())
    }
}
