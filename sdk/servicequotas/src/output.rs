// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RequestServiceQuotaIncreaseOutput {
    /// <p>Information about the quota increase request.</p>
    pub requested_quota: std::option::Option<crate::model::RequestedServiceQuotaChange>,
}
impl std::fmt::Debug for RequestServiceQuotaIncreaseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RequestServiceQuotaIncreaseOutput");
        formatter.field("requested_quota", &self.requested_quota);
        formatter.finish()
    }
}
/// See [`RequestServiceQuotaIncreaseOutput`](crate::output::RequestServiceQuotaIncreaseOutput)
pub mod request_service_quota_increase_output {
    /// A builder for [`RequestServiceQuotaIncreaseOutput`](crate::output::RequestServiceQuotaIncreaseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) requested_quota: std::option::Option<crate::model::RequestedServiceQuotaChange>,
    }
    impl Builder {
        /// <p>Information about the quota increase request.</p>
        pub fn requested_quota(mut self, input: crate::model::RequestedServiceQuotaChange) -> Self {
            self.requested_quota = Some(input);
            self
        }
        pub fn set_requested_quota(
            mut self,
            input: std::option::Option<crate::model::RequestedServiceQuotaChange>,
        ) -> Self {
            self.requested_quota = input;
            self
        }
        /// Consumes the builder and constructs a [`RequestServiceQuotaIncreaseOutput`](crate::output::RequestServiceQuotaIncreaseOutput)
        pub fn build(self) -> crate::output::RequestServiceQuotaIncreaseOutput {
            crate::output::RequestServiceQuotaIncreaseOutput {
                requested_quota: self.requested_quota,
            }
        }
    }
}
impl RequestServiceQuotaIncreaseOutput {
    /// Creates a new builder-style object to manufacture [`RequestServiceQuotaIncreaseOutput`](crate::output::RequestServiceQuotaIncreaseOutput)
    pub fn builder() -> crate::output::request_service_quota_increase_output::Builder {
        crate::output::request_service_quota_increase_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutServiceQuotaIncreaseRequestIntoTemplateOutput {
    /// <p>Information about the quota increase request.</p>
    pub service_quota_increase_request_in_template:
        std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
}
impl std::fmt::Debug for PutServiceQuotaIncreaseRequestIntoTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutServiceQuotaIncreaseRequestIntoTemplateOutput");
        formatter.field(
            "service_quota_increase_request_in_template",
            &self.service_quota_increase_request_in_template,
        );
        formatter.finish()
    }
}
/// See [`PutServiceQuotaIncreaseRequestIntoTemplateOutput`](crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput)
pub mod put_service_quota_increase_request_into_template_output {
    /// A builder for [`PutServiceQuotaIncreaseRequestIntoTemplateOutput`](crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_quota_increase_request_in_template:
            std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
    }
    impl Builder {
        /// <p>Information about the quota increase request.</p>
        pub fn service_quota_increase_request_in_template(
            mut self,
            input: crate::model::ServiceQuotaIncreaseRequestInTemplate,
        ) -> Self {
            self.service_quota_increase_request_in_template = Some(input);
            self
        }
        pub fn set_service_quota_increase_request_in_template(
            mut self,
            input: std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
        ) -> Self {
            self.service_quota_increase_request_in_template = input;
            self
        }
        /// Consumes the builder and constructs a [`PutServiceQuotaIncreaseRequestIntoTemplateOutput`](crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput)
        pub fn build(self) -> crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput {
            crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput {
                service_quota_increase_request_in_template: self
                    .service_quota_increase_request_in_template,
            }
        }
    }
}
impl PutServiceQuotaIncreaseRequestIntoTemplateOutput {
    /// Creates a new builder-style object to manufacture [`PutServiceQuotaIncreaseRequestIntoTemplateOutput`](crate::output::PutServiceQuotaIncreaseRequestIntoTemplateOutput)
    pub fn builder(
    ) -> crate::output::put_service_quota_increase_request_into_template_output::Builder {
        crate::output::put_service_quota_increase_request_into_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A complex data type that contains zero or more tag elements.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListServicesOutput {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the services.</p>
    pub services: std::option::Option<std::vec::Vec<crate::model::ServiceInfo>>,
}
impl std::fmt::Debug for ListServicesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListServicesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("services", &self.services);
        formatter.finish()
    }
}
/// See [`ListServicesOutput`](crate::output::ListServicesOutput)
pub mod list_services_output {
    /// A builder for [`ListServicesOutput`](crate::output::ListServicesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) services: std::option::Option<std::vec::Vec<crate::model::ServiceInfo>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn services(mut self, input: impl Into<crate::model::ServiceInfo>) -> Self {
            let mut v = self.services.unwrap_or_default();
            v.push(input.into());
            self.services = Some(v);
            self
        }
        pub fn set_services(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceInfo>>,
        ) -> Self {
            self.services = input;
            self
        }
        /// Consumes the builder and constructs a [`ListServicesOutput`](crate::output::ListServicesOutput)
        pub fn build(self) -> crate::output::ListServicesOutput {
            crate::output::ListServicesOutput {
                next_token: self.next_token,
                services: self.services,
            }
        }
    }
}
impl ListServicesOutput {
    /// Creates a new builder-style object to manufacture [`ListServicesOutput`](crate::output::ListServicesOutput)
    pub fn builder() -> crate::output::list_services_output::Builder {
        crate::output::list_services_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListServiceQuotasOutput {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the quotas.</p>
    pub quotas: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
}
impl std::fmt::Debug for ListServiceQuotasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListServiceQuotasOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("quotas", &self.quotas);
        formatter.finish()
    }
}
/// See [`ListServiceQuotasOutput`](crate::output::ListServiceQuotasOutput)
pub mod list_service_quotas_output {
    /// A builder for [`ListServiceQuotasOutput`](crate::output::ListServiceQuotasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) quotas: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn quotas(mut self, input: impl Into<crate::model::ServiceQuota>) -> Self {
            let mut v = self.quotas.unwrap_or_default();
            v.push(input.into());
            self.quotas = Some(v);
            self
        }
        pub fn set_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
        ) -> Self {
            self.quotas = input;
            self
        }
        /// Consumes the builder and constructs a [`ListServiceQuotasOutput`](crate::output::ListServiceQuotasOutput)
        pub fn build(self) -> crate::output::ListServiceQuotasOutput {
            crate::output::ListServiceQuotasOutput {
                next_token: self.next_token,
                quotas: self.quotas,
            }
        }
    }
}
impl ListServiceQuotasOutput {
    /// Creates a new builder-style object to manufacture [`ListServiceQuotasOutput`](crate::output::ListServiceQuotasOutput)
    pub fn builder() -> crate::output::list_service_quotas_output::Builder {
        crate::output::list_service_quotas_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListServiceQuotaIncreaseRequestsInTemplateOutput {
    /// <p>Information about the quota increase requests.</p>
    pub service_quota_increase_request_in_template_list:
        std::option::Option<std::vec::Vec<crate::model::ServiceQuotaIncreaseRequestInTemplate>>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListServiceQuotaIncreaseRequestsInTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListServiceQuotaIncreaseRequestsInTemplateOutput");
        formatter.field(
            "service_quota_increase_request_in_template_list",
            &self.service_quota_increase_request_in_template_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListServiceQuotaIncreaseRequestsInTemplateOutput`](crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput)
pub mod list_service_quota_increase_requests_in_template_output {
    /// A builder for [`ListServiceQuotaIncreaseRequestsInTemplateOutput`](crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_quota_increase_request_in_template_list:
            std::option::Option<std::vec::Vec<crate::model::ServiceQuotaIncreaseRequestInTemplate>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn service_quota_increase_request_in_template_list(
            mut self,
            input: impl Into<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
        ) -> Self {
            let mut v = self
                .service_quota_increase_request_in_template_list
                .unwrap_or_default();
            v.push(input.into());
            self.service_quota_increase_request_in_template_list = Some(v);
            self
        }
        pub fn set_service_quota_increase_request_in_template_list(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
            >,
        ) -> Self {
            self.service_quota_increase_request_in_template_list = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListServiceQuotaIncreaseRequestsInTemplateOutput`](crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput)
        pub fn build(self) -> crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput {
            crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput {
                service_quota_increase_request_in_template_list: self
                    .service_quota_increase_request_in_template_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListServiceQuotaIncreaseRequestsInTemplateOutput {
    /// Creates a new builder-style object to manufacture [`ListServiceQuotaIncreaseRequestsInTemplateOutput`](crate::output::ListServiceQuotaIncreaseRequestsInTemplateOutput)
    pub fn builder(
    ) -> crate::output::list_service_quota_increase_requests_in_template_output::Builder {
        crate::output::list_service_quota_increase_requests_in_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRequestedServiceQuotaChangeHistoryByQuotaOutput {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the quota increase requests.</p>
    pub requested_quotas:
        std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
}
impl std::fmt::Debug for ListRequestedServiceQuotaChangeHistoryByQuotaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRequestedServiceQuotaChangeHistoryByQuotaOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("requested_quotas", &self.requested_quotas);
        formatter.finish()
    }
}
/// See [`ListRequestedServiceQuotaChangeHistoryByQuotaOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
pub mod list_requested_service_quota_change_history_by_quota_output {
    /// A builder for [`ListRequestedServiceQuotaChangeHistoryByQuotaOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) requested_quotas:
            std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn requested_quotas(
            mut self,
            input: impl Into<crate::model::RequestedServiceQuotaChange>,
        ) -> Self {
            let mut v = self.requested_quotas.unwrap_or_default();
            v.push(input.into());
            self.requested_quotas = Some(v);
            self
        }
        pub fn set_requested_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
        ) -> Self {
            self.requested_quotas = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRequestedServiceQuotaChangeHistoryByQuotaOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
        pub fn build(self) -> crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput {
            crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput {
                next_token: self.next_token,
                requested_quotas: self.requested_quotas,
            }
        }
    }
}
impl ListRequestedServiceQuotaChangeHistoryByQuotaOutput {
    /// Creates a new builder-style object to manufacture [`ListRequestedServiceQuotaChangeHistoryByQuotaOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
    pub fn builder(
    ) -> crate::output::list_requested_service_quota_change_history_by_quota_output::Builder {
        crate::output::list_requested_service_quota_change_history_by_quota_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRequestedServiceQuotaChangeHistoryOutput {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the quota increase requests.</p>
    pub requested_quotas:
        std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
}
impl std::fmt::Debug for ListRequestedServiceQuotaChangeHistoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRequestedServiceQuotaChangeHistoryOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("requested_quotas", &self.requested_quotas);
        formatter.finish()
    }
}
/// See [`ListRequestedServiceQuotaChangeHistoryOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryOutput)
pub mod list_requested_service_quota_change_history_output {
    /// A builder for [`ListRequestedServiceQuotaChangeHistoryOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) requested_quotas:
            std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn requested_quotas(
            mut self,
            input: impl Into<crate::model::RequestedServiceQuotaChange>,
        ) -> Self {
            let mut v = self.requested_quotas.unwrap_or_default();
            v.push(input.into());
            self.requested_quotas = Some(v);
            self
        }
        pub fn set_requested_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RequestedServiceQuotaChange>>,
        ) -> Self {
            self.requested_quotas = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRequestedServiceQuotaChangeHistoryOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryOutput)
        pub fn build(self) -> crate::output::ListRequestedServiceQuotaChangeHistoryOutput {
            crate::output::ListRequestedServiceQuotaChangeHistoryOutput {
                next_token: self.next_token,
                requested_quotas: self.requested_quotas,
            }
        }
    }
}
impl ListRequestedServiceQuotaChangeHistoryOutput {
    /// Creates a new builder-style object to manufacture [`ListRequestedServiceQuotaChangeHistoryOutput`](crate::output::ListRequestedServiceQuotaChangeHistoryOutput)
    pub fn builder() -> crate::output::list_requested_service_quota_change_history_output::Builder {
        crate::output::list_requested_service_quota_change_history_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAwsDefaultServiceQuotasOutput {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are
    /// no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the quotas.</p>
    pub quotas: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
}
impl std::fmt::Debug for ListAwsDefaultServiceQuotasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAwsDefaultServiceQuotasOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("quotas", &self.quotas);
        formatter.finish()
    }
}
/// See [`ListAwsDefaultServiceQuotasOutput`](crate::output::ListAwsDefaultServiceQuotasOutput)
pub mod list_aws_default_service_quotas_output {
    /// A builder for [`ListAwsDefaultServiceQuotasOutput`](crate::output::ListAwsDefaultServiceQuotasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) quotas: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is null when there are
        /// no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn quotas(mut self, input: impl Into<crate::model::ServiceQuota>) -> Self {
            let mut v = self.quotas.unwrap_or_default();
            v.push(input.into());
            self.quotas = Some(v);
            self
        }
        pub fn set_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceQuota>>,
        ) -> Self {
            self.quotas = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAwsDefaultServiceQuotasOutput`](crate::output::ListAwsDefaultServiceQuotasOutput)
        pub fn build(self) -> crate::output::ListAwsDefaultServiceQuotasOutput {
            crate::output::ListAwsDefaultServiceQuotasOutput {
                next_token: self.next_token,
                quotas: self.quotas,
            }
        }
    }
}
impl ListAwsDefaultServiceQuotasOutput {
    /// Creates a new builder-style object to manufacture [`ListAwsDefaultServiceQuotasOutput`](crate::output::ListAwsDefaultServiceQuotasOutput)
    pub fn builder() -> crate::output::list_aws_default_service_quotas_output::Builder {
        crate::output::list_aws_default_service_quotas_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServiceQuotaIncreaseRequestFromTemplateOutput {
    /// <p>Information about the quota increase request.</p>
    pub service_quota_increase_request_in_template:
        std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
}
impl std::fmt::Debug for GetServiceQuotaIncreaseRequestFromTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServiceQuotaIncreaseRequestFromTemplateOutput");
        formatter.field(
            "service_quota_increase_request_in_template",
            &self.service_quota_increase_request_in_template,
        );
        formatter.finish()
    }
}
/// See [`GetServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput)
pub mod get_service_quota_increase_request_from_template_output {
    /// A builder for [`GetServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_quota_increase_request_in_template:
            std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
    }
    impl Builder {
        /// <p>Information about the quota increase request.</p>
        pub fn service_quota_increase_request_in_template(
            mut self,
            input: crate::model::ServiceQuotaIncreaseRequestInTemplate,
        ) -> Self {
            self.service_quota_increase_request_in_template = Some(input);
            self
        }
        pub fn set_service_quota_increase_request_in_template(
            mut self,
            input: std::option::Option<crate::model::ServiceQuotaIncreaseRequestInTemplate>,
        ) -> Self {
            self.service_quota_increase_request_in_template = input;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput)
        pub fn build(self) -> crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput {
            crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput {
                service_quota_increase_request_in_template: self
                    .service_quota_increase_request_in_template,
            }
        }
    }
}
impl GetServiceQuotaIncreaseRequestFromTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::GetServiceQuotaIncreaseRequestFromTemplateOutput)
    pub fn builder(
    ) -> crate::output::get_service_quota_increase_request_from_template_output::Builder {
        crate::output::get_service_quota_increase_request_from_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServiceQuotaOutput {
    /// <p>Information about the quota.</p>
    pub quota: std::option::Option<crate::model::ServiceQuota>,
}
impl std::fmt::Debug for GetServiceQuotaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServiceQuotaOutput");
        formatter.field("quota", &self.quota);
        formatter.finish()
    }
}
/// See [`GetServiceQuotaOutput`](crate::output::GetServiceQuotaOutput)
pub mod get_service_quota_output {
    /// A builder for [`GetServiceQuotaOutput`](crate::output::GetServiceQuotaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quota: std::option::Option<crate::model::ServiceQuota>,
    }
    impl Builder {
        /// <p>Information about the quota.</p>
        pub fn quota(mut self, input: crate::model::ServiceQuota) -> Self {
            self.quota = Some(input);
            self
        }
        pub fn set_quota(mut self, input: std::option::Option<crate::model::ServiceQuota>) -> Self {
            self.quota = input;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceQuotaOutput`](crate::output::GetServiceQuotaOutput)
        pub fn build(self) -> crate::output::GetServiceQuotaOutput {
            crate::output::GetServiceQuotaOutput { quota: self.quota }
        }
    }
}
impl GetServiceQuotaOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceQuotaOutput`](crate::output::GetServiceQuotaOutput)
    pub fn builder() -> crate::output::get_service_quota_output::Builder {
        crate::output::get_service_quota_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRequestedServiceQuotaChangeOutput {
    /// <p>Information about the quota increase request.</p>
    pub requested_quota: std::option::Option<crate::model::RequestedServiceQuotaChange>,
}
impl std::fmt::Debug for GetRequestedServiceQuotaChangeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRequestedServiceQuotaChangeOutput");
        formatter.field("requested_quota", &self.requested_quota);
        formatter.finish()
    }
}
/// See [`GetRequestedServiceQuotaChangeOutput`](crate::output::GetRequestedServiceQuotaChangeOutput)
pub mod get_requested_service_quota_change_output {
    /// A builder for [`GetRequestedServiceQuotaChangeOutput`](crate::output::GetRequestedServiceQuotaChangeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) requested_quota: std::option::Option<crate::model::RequestedServiceQuotaChange>,
    }
    impl Builder {
        /// <p>Information about the quota increase request.</p>
        pub fn requested_quota(mut self, input: crate::model::RequestedServiceQuotaChange) -> Self {
            self.requested_quota = Some(input);
            self
        }
        pub fn set_requested_quota(
            mut self,
            input: std::option::Option<crate::model::RequestedServiceQuotaChange>,
        ) -> Self {
            self.requested_quota = input;
            self
        }
        /// Consumes the builder and constructs a [`GetRequestedServiceQuotaChangeOutput`](crate::output::GetRequestedServiceQuotaChangeOutput)
        pub fn build(self) -> crate::output::GetRequestedServiceQuotaChangeOutput {
            crate::output::GetRequestedServiceQuotaChangeOutput {
                requested_quota: self.requested_quota,
            }
        }
    }
}
impl GetRequestedServiceQuotaChangeOutput {
    /// Creates a new builder-style object to manufacture [`GetRequestedServiceQuotaChangeOutput`](crate::output::GetRequestedServiceQuotaChangeOutput)
    pub fn builder() -> crate::output::get_requested_service_quota_change_output::Builder {
        crate::output::get_requested_service_quota_change_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAwsDefaultServiceQuotaOutput {
    /// <p>Information about the quota.</p>
    pub quota: std::option::Option<crate::model::ServiceQuota>,
}
impl std::fmt::Debug for GetAwsDefaultServiceQuotaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAwsDefaultServiceQuotaOutput");
        formatter.field("quota", &self.quota);
        formatter.finish()
    }
}
/// See [`GetAwsDefaultServiceQuotaOutput`](crate::output::GetAwsDefaultServiceQuotaOutput)
pub mod get_aws_default_service_quota_output {
    /// A builder for [`GetAwsDefaultServiceQuotaOutput`](crate::output::GetAwsDefaultServiceQuotaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quota: std::option::Option<crate::model::ServiceQuota>,
    }
    impl Builder {
        /// <p>Information about the quota.</p>
        pub fn quota(mut self, input: crate::model::ServiceQuota) -> Self {
            self.quota = Some(input);
            self
        }
        pub fn set_quota(mut self, input: std::option::Option<crate::model::ServiceQuota>) -> Self {
            self.quota = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAwsDefaultServiceQuotaOutput`](crate::output::GetAwsDefaultServiceQuotaOutput)
        pub fn build(self) -> crate::output::GetAwsDefaultServiceQuotaOutput {
            crate::output::GetAwsDefaultServiceQuotaOutput { quota: self.quota }
        }
    }
}
impl GetAwsDefaultServiceQuotaOutput {
    /// Creates a new builder-style object to manufacture [`GetAwsDefaultServiceQuotaOutput`](crate::output::GetAwsDefaultServiceQuotaOutput)
    pub fn builder() -> crate::output::get_aws_default_service_quota_output::Builder {
        crate::output::get_aws_default_service_quota_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAssociationForServiceQuotaTemplateOutput {
    /// <p>The association status. If the status is <code>ASSOCIATED</code>, the quota increase
    /// requests in the template are automatically applied to new accounts in your
    /// organization.</p>
    pub service_quota_template_association_status:
        std::option::Option<crate::model::ServiceQuotaTemplateAssociationStatus>,
}
impl std::fmt::Debug for GetAssociationForServiceQuotaTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAssociationForServiceQuotaTemplateOutput");
        formatter.field(
            "service_quota_template_association_status",
            &self.service_quota_template_association_status,
        );
        formatter.finish()
    }
}
/// See [`GetAssociationForServiceQuotaTemplateOutput`](crate::output::GetAssociationForServiceQuotaTemplateOutput)
pub mod get_association_for_service_quota_template_output {
    /// A builder for [`GetAssociationForServiceQuotaTemplateOutput`](crate::output::GetAssociationForServiceQuotaTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_quota_template_association_status:
            std::option::Option<crate::model::ServiceQuotaTemplateAssociationStatus>,
    }
    impl Builder {
        /// <p>The association status. If the status is <code>ASSOCIATED</code>, the quota increase
        /// requests in the template are automatically applied to new accounts in your
        /// organization.</p>
        pub fn service_quota_template_association_status(
            mut self,
            input: crate::model::ServiceQuotaTemplateAssociationStatus,
        ) -> Self {
            self.service_quota_template_association_status = Some(input);
            self
        }
        pub fn set_service_quota_template_association_status(
            mut self,
            input: std::option::Option<crate::model::ServiceQuotaTemplateAssociationStatus>,
        ) -> Self {
            self.service_quota_template_association_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAssociationForServiceQuotaTemplateOutput`](crate::output::GetAssociationForServiceQuotaTemplateOutput)
        pub fn build(self) -> crate::output::GetAssociationForServiceQuotaTemplateOutput {
            crate::output::GetAssociationForServiceQuotaTemplateOutput {
                service_quota_template_association_status: self
                    .service_quota_template_association_status,
            }
        }
    }
}
impl GetAssociationForServiceQuotaTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetAssociationForServiceQuotaTemplateOutput`](crate::output::GetAssociationForServiceQuotaTemplateOutput)
    pub fn builder() -> crate::output::get_association_for_service_quota_template_output::Builder {
        crate::output::get_association_for_service_quota_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateServiceQuotaTemplateOutput {}
impl std::fmt::Debug for DisassociateServiceQuotaTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateServiceQuotaTemplateOutput");
        formatter.finish()
    }
}
/// See [`DisassociateServiceQuotaTemplateOutput`](crate::output::DisassociateServiceQuotaTemplateOutput)
pub mod disassociate_service_quota_template_output {
    /// A builder for [`DisassociateServiceQuotaTemplateOutput`](crate::output::DisassociateServiceQuotaTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateServiceQuotaTemplateOutput`](crate::output::DisassociateServiceQuotaTemplateOutput)
        pub fn build(self) -> crate::output::DisassociateServiceQuotaTemplateOutput {
            crate::output::DisassociateServiceQuotaTemplateOutput {}
        }
    }
}
impl DisassociateServiceQuotaTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateServiceQuotaTemplateOutput`](crate::output::DisassociateServiceQuotaTemplateOutput)
    pub fn builder() -> crate::output::disassociate_service_quota_template_output::Builder {
        crate::output::disassociate_service_quota_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteServiceQuotaIncreaseRequestFromTemplateOutput {}
impl std::fmt::Debug for DeleteServiceQuotaIncreaseRequestFromTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteServiceQuotaIncreaseRequestFromTemplateOutput");
        formatter.finish()
    }
}
/// See [`DeleteServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
pub mod delete_service_quota_increase_request_from_template_output {
    /// A builder for [`DeleteServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
        pub fn build(self) -> crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput {
            crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput {}
        }
    }
}
impl DeleteServiceQuotaIncreaseRequestFromTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteServiceQuotaIncreaseRequestFromTemplateOutput`](crate::output::DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
    pub fn builder(
    ) -> crate::output::delete_service_quota_increase_request_from_template_output::Builder {
        crate::output::delete_service_quota_increase_request_from_template_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateServiceQuotaTemplateOutput {}
impl std::fmt::Debug for AssociateServiceQuotaTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateServiceQuotaTemplateOutput");
        formatter.finish()
    }
}
/// See [`AssociateServiceQuotaTemplateOutput`](crate::output::AssociateServiceQuotaTemplateOutput)
pub mod associate_service_quota_template_output {
    /// A builder for [`AssociateServiceQuotaTemplateOutput`](crate::output::AssociateServiceQuotaTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateServiceQuotaTemplateOutput`](crate::output::AssociateServiceQuotaTemplateOutput)
        pub fn build(self) -> crate::output::AssociateServiceQuotaTemplateOutput {
            crate::output::AssociateServiceQuotaTemplateOutput {}
        }
    }
}
impl AssociateServiceQuotaTemplateOutput {
    /// Creates a new builder-style object to manufacture [`AssociateServiceQuotaTemplateOutput`](crate::output::AssociateServiceQuotaTemplateOutput)
    pub fn builder() -> crate::output::associate_service_quota_template_output::Builder {
        crate::output::associate_service_quota_template_output::Builder::default()
    }
}
