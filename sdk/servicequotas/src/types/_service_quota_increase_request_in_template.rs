// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a quota increase request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceQuotaIncreaseRequestInTemplate {
    /// <p>The service identifier.</p>
    #[doc(hidden)]
    pub service_code: std::option::Option<std::string::String>,
    /// <p>The service name.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The quota identifier.</p>
    #[doc(hidden)]
    pub quota_code: std::option::Option<std::string::String>,
    /// <p>The quota name.</p>
    #[doc(hidden)]
    pub quota_name: std::option::Option<std::string::String>,
    /// <p>The new, increased value of the quota.</p>
    #[doc(hidden)]
    pub desired_value: std::option::Option<f64>,
    /// <p>The AWS Region.</p>
    #[doc(hidden)]
    pub aws_region: std::option::Option<std::string::String>,
    /// <p>The unit of measurement.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
    /// <p>Indicates whether the quota is global.</p>
    #[doc(hidden)]
    pub global_quota: bool,
}
impl ServiceQuotaIncreaseRequestInTemplate {
    /// <p>The service identifier.</p>
    pub fn service_code(&self) -> std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The service name.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The quota identifier.</p>
    pub fn quota_code(&self) -> std::option::Option<&str> {
        self.quota_code.as_deref()
    }
    /// <p>The quota name.</p>
    pub fn quota_name(&self) -> std::option::Option<&str> {
        self.quota_name.as_deref()
    }
    /// <p>The new, increased value of the quota.</p>
    pub fn desired_value(&self) -> std::option::Option<f64> {
        self.desired_value
    }
    /// <p>The AWS Region.</p>
    pub fn aws_region(&self) -> std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The unit of measurement.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
    /// <p>Indicates whether the quota is global.</p>
    pub fn global_quota(&self) -> bool {
        self.global_quota
    }
}
impl ServiceQuotaIncreaseRequestInTemplate {
    /// Creates a new builder-style object to manufacture [`ServiceQuotaIncreaseRequestInTemplate`](crate::types::ServiceQuotaIncreaseRequestInTemplate).
    pub fn builder() -> crate::types::builders::ServiceQuotaIncreaseRequestInTemplateBuilder {
        crate::types::builders::ServiceQuotaIncreaseRequestInTemplateBuilder::default()
    }
}

/// A builder for [`ServiceQuotaIncreaseRequestInTemplate`](crate::types::ServiceQuotaIncreaseRequestInTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceQuotaIncreaseRequestInTemplateBuilder {
    pub(crate) service_code: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) quota_code: std::option::Option<std::string::String>,
    pub(crate) quota_name: std::option::Option<std::string::String>,
    pub(crate) desired_value: std::option::Option<f64>,
    pub(crate) aws_region: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
    pub(crate) global_quota: std::option::Option<bool>,
}
impl ServiceQuotaIncreaseRequestInTemplateBuilder {
    /// <p>The service identifier.</p>
    pub fn service_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_code = Some(input.into());
        self
    }
    /// <p>The service identifier.</p>
    pub fn set_service_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The service name.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The service name.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The quota identifier.</p>
    pub fn quota_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.quota_code = Some(input.into());
        self
    }
    /// <p>The quota identifier.</p>
    pub fn set_quota_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.quota_code = input;
        self
    }
    /// <p>The quota name.</p>
    pub fn quota_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.quota_name = Some(input.into());
        self
    }
    /// <p>The quota name.</p>
    pub fn set_quota_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.quota_name = input;
        self
    }
    /// <p>The new, increased value of the quota.</p>
    pub fn desired_value(mut self, input: f64) -> Self {
        self.desired_value = Some(input);
        self
    }
    /// <p>The new, increased value of the quota.</p>
    pub fn set_desired_value(mut self, input: std::option::Option<f64>) -> Self {
        self.desired_value = input;
        self
    }
    /// <p>The AWS Region.</p>
    pub fn aws_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_region = Some(input.into());
        self
    }
    /// <p>The AWS Region.</p>
    pub fn set_aws_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The unit of measurement.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The unit of measurement.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>Indicates whether the quota is global.</p>
    pub fn global_quota(mut self, input: bool) -> Self {
        self.global_quota = Some(input);
        self
    }
    /// <p>Indicates whether the quota is global.</p>
    pub fn set_global_quota(mut self, input: std::option::Option<bool>) -> Self {
        self.global_quota = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceQuotaIncreaseRequestInTemplate`](crate::types::ServiceQuotaIncreaseRequestInTemplate).
    pub fn build(self) -> crate::types::ServiceQuotaIncreaseRequestInTemplate {
        crate::types::ServiceQuotaIncreaseRequestInTemplate {
            service_code: self.service_code,
            service_name: self.service_name,
            quota_code: self.quota_code,
            quota_name: self.quota_name,
            desired_value: self.desired_value,
            aws_region: self.aws_region,
            unit: self.unit,
            global_quota: self.global_quota.unwrap_or_default(),
        }
    }
}
