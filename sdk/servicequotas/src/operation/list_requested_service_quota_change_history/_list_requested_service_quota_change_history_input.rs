// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRequestedServiceQuotaChangeHistoryInput {
    /// <p>Specifies the service identifier. To find the service code value for an Amazon Web Services service, use the <code>ListServices</code> operation.</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    /// <p>Specifies that you want to filter the results to only the requests with the matching status.</p>
    pub status: ::std::option::Option<crate::types::RequestStatus>,
    /// <p>Specifies a value for receiving additional results after you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note>
    /// <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    /// </note>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Specifies at which level within the Amazon Web Services account the quota request applies to.</p>
    pub quota_requested_at_level: ::std::option::Option<crate::types::AppliedLevelEnum>,
}
impl ListRequestedServiceQuotaChangeHistoryInput {
    /// <p>Specifies the service identifier. To find the service code value for an Amazon Web Services service, use the <code>ListServices</code> operation.</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>Specifies that you want to filter the results to only the requests with the matching status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RequestStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies a value for receiving additional results after you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note>
    /// <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    /// </note>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Specifies at which level within the Amazon Web Services account the quota request applies to.</p>
    pub fn quota_requested_at_level(&self) -> ::std::option::Option<&crate::types::AppliedLevelEnum> {
        self.quota_requested_at_level.as_ref()
    }
}
impl ListRequestedServiceQuotaChangeHistoryInput {
    /// Creates a new builder-style object to manufacture [`ListRequestedServiceQuotaChangeHistoryInput`](crate::operation::list_requested_service_quota_change_history::ListRequestedServiceQuotaChangeHistoryInput).
    pub fn builder() -> crate::operation::list_requested_service_quota_change_history::builders::ListRequestedServiceQuotaChangeHistoryInputBuilder {
        crate::operation::list_requested_service_quota_change_history::builders::ListRequestedServiceQuotaChangeHistoryInputBuilder::default()
    }
}

/// A builder for [`ListRequestedServiceQuotaChangeHistoryInput`](crate::operation::list_requested_service_quota_change_history::ListRequestedServiceQuotaChangeHistoryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRequestedServiceQuotaChangeHistoryInputBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RequestStatus>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) quota_requested_at_level: ::std::option::Option<crate::types::AppliedLevelEnum>,
}
impl ListRequestedServiceQuotaChangeHistoryInputBuilder {
    /// <p>Specifies the service identifier. To find the service code value for an Amazon Web Services service, use the <code>ListServices</code> operation.</p>
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the service identifier. To find the service code value for an Amazon Web Services service, use the <code>ListServices</code> operation.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>Specifies the service identifier. To find the service code value for an Amazon Web Services service, use the <code>ListServices</code> operation.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>Specifies that you want to filter the results to only the requests with the matching status.</p>
    pub fn status(mut self, input: crate::types::RequestStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies that you want to filter the results to only the requests with the matching status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RequestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies that you want to filter the results to only the requests with the matching status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RequestStatus> {
        &self.status
    }
    /// <p>Specifies a value for receiving additional results after you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a value for receiving additional results after you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies a value for receiving additional results after you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifies the maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note>
    /// <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    /// </note>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note>
    /// <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    /// </note>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note>
    /// <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    /// </note>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Specifies at which level within the Amazon Web Services account the quota request applies to.</p>
    pub fn quota_requested_at_level(mut self, input: crate::types::AppliedLevelEnum) -> Self {
        self.quota_requested_at_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies at which level within the Amazon Web Services account the quota request applies to.</p>
    pub fn set_quota_requested_at_level(mut self, input: ::std::option::Option<crate::types::AppliedLevelEnum>) -> Self {
        self.quota_requested_at_level = input;
        self
    }
    /// <p>Specifies at which level within the Amazon Web Services account the quota request applies to.</p>
    pub fn get_quota_requested_at_level(&self) -> &::std::option::Option<crate::types::AppliedLevelEnum> {
        &self.quota_requested_at_level
    }
    /// Consumes the builder and constructs a [`ListRequestedServiceQuotaChangeHistoryInput`](crate::operation::list_requested_service_quota_change_history::ListRequestedServiceQuotaChangeHistoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_requested_service_quota_change_history::ListRequestedServiceQuotaChangeHistoryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_requested_service_quota_change_history::ListRequestedServiceQuotaChangeHistoryInput {
                service_code: self.service_code,
                status: self.status,
                next_token: self.next_token,
                max_results: self.max_results,
                quota_requested_at_level: self.quota_requested_at_level,
            },
        )
    }
}
