// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A new MediaPackage VOD Asset configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssetInput {
    /// The unique identifier for the Asset.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The ID of the PackagingGroup for the Asset.
    #[doc(hidden)]
    pub packaging_group_id: std::option::Option<std::string::String>,
    /// The resource ID to include in SPEKE key requests.
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// ARN of the source object in S3.
    #[doc(hidden)]
    pub source_arn: std::option::Option<std::string::String>,
    /// The IAM role ARN used to access the source S3 bucket.
    #[doc(hidden)]
    pub source_role_arn: std::option::Option<std::string::String>,
    /// A collection of tags associated with a resource
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAssetInput {
    /// The unique identifier for the Asset.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The ID of the PackagingGroup for the Asset.
    pub fn packaging_group_id(&self) -> std::option::Option<&str> {
        self.packaging_group_id.as_deref()
    }
    /// The resource ID to include in SPEKE key requests.
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// ARN of the source object in S3.
    pub fn source_arn(&self) -> std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// The IAM role ARN used to access the source S3 bucket.
    pub fn source_role_arn(&self) -> std::option::Option<&str> {
        self.source_role_arn.as_deref()
    }
    /// A collection of tags associated with a resource
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateAssetInput {
    /// Creates a new builder-style object to manufacture [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
    pub fn builder() -> crate::operation::create_asset::builders::CreateAssetInputBuilder {
        crate::operation::create_asset::builders::CreateAssetInputBuilder::default()
    }
}

/// A builder for [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssetInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) packaging_group_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) source_arn: std::option::Option<std::string::String>,
    pub(crate) source_role_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAssetInputBuilder {
    /// The unique identifier for the Asset.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The unique identifier for the Asset.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of the PackagingGroup for the Asset.
    pub fn packaging_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.packaging_group_id = Some(input.into());
        self
    }
    /// The ID of the PackagingGroup for the Asset.
    pub fn set_packaging_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.packaging_group_id = input;
        self
    }
    /// The resource ID to include in SPEKE key requests.
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// The resource ID to include in SPEKE key requests.
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// ARN of the source object in S3.
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_arn = Some(input.into());
        self
    }
    /// ARN of the source object in S3.
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// The IAM role ARN used to access the source S3 bucket.
    pub fn source_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_role_arn = Some(input.into());
        self
    }
    /// The IAM role ARN used to access the source S3 bucket.
    pub fn set_source_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_role_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of tags associated with a resource
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// A collection of tags associated with a resource
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_asset::CreateAssetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_asset::CreateAssetInput {
            id: self.id,
            packaging_group_id: self.packaging_group_id,
            resource_id: self.resource_id,
            source_arn: self.source_arn,
            source_role_arn: self.source_role_arn,
            tags: self.tags,
        })
    }
}
