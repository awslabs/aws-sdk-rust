// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The option to configure log subscription.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigureLogsInput {
    /// Configure egress access logging.
    pub egress_access_logs: ::std::option::Option<crate::types::EgressAccessLogs>,
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    pub id: ::std::option::Option<::std::string::String>,
}
impl ConfigureLogsInput {
    /// Configure egress access logging.
    pub fn egress_access_logs(&self) -> ::std::option::Option<&crate::types::EgressAccessLogs> {
        self.egress_access_logs.as_ref()
    }
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl ConfigureLogsInput {
    /// Creates a new builder-style object to manufacture [`ConfigureLogsInput`](crate::operation::configure_logs::ConfigureLogsInput).
    pub fn builder() -> crate::operation::configure_logs::builders::ConfigureLogsInputBuilder {
        crate::operation::configure_logs::builders::ConfigureLogsInputBuilder::default()
    }
}

/// A builder for [`ConfigureLogsInput`](crate::operation::configure_logs::ConfigureLogsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigureLogsInputBuilder {
    pub(crate) egress_access_logs: ::std::option::Option<crate::types::EgressAccessLogs>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl ConfigureLogsInputBuilder {
    /// Configure egress access logging.
    pub fn egress_access_logs(mut self, input: crate::types::EgressAccessLogs) -> Self {
        self.egress_access_logs = ::std::option::Option::Some(input);
        self
    }
    /// Configure egress access logging.
    pub fn set_egress_access_logs(mut self, input: ::std::option::Option<crate::types::EgressAccessLogs>) -> Self {
        self.egress_access_logs = input;
        self
    }
    /// Configure egress access logging.
    pub fn get_egress_access_logs(&self) -> &::std::option::Option<crate::types::EgressAccessLogs> {
        &self.egress_access_logs
    }
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`ConfigureLogsInput`](crate::operation::configure_logs::ConfigureLogsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::configure_logs::ConfigureLogsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::configure_logs::ConfigureLogsInput {
            egress_access_logs: self.egress_access_logs,
            id: self.id,
        })
    }
}
