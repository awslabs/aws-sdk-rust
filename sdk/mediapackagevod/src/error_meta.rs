// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// The client is not authorized to access the requested resource.
    ForbiddenException(crate::types::error::ForbiddenException),
    /// An unexpected error occurred.
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// The requested resource does not exist.
    NotFoundException(crate::types::error::NotFoundException),
    /// An unexpected error occurred.
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// The client has exceeded their resource or throttling limits.
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// The parameters sent in the request are not valid.
    UnprocessableEntityException(crate::types::error::UnprocessableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::configure_logs::ConfigureLogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::configure_logs::ConfigureLogsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::configure_logs::ConfigureLogsError> for Error {
    fn from(err: crate::operation::configure_logs::ConfigureLogsError) -> Self {
        match err {
            crate::operation::configure_logs::ConfigureLogsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::configure_logs::ConfigureLogsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::configure_logs::ConfigureLogsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::configure_logs::ConfigureLogsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::configure_logs::ConfigureLogsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::configure_logs::ConfigureLogsError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::configure_logs::ConfigureLogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset::CreateAssetError> for Error {
    fn from(err: crate::operation::create_asset::CreateAssetError) -> Self {
        match err {
            crate::operation::create_asset::CreateAssetError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_asset::CreateAssetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_asset::CreateAssetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_asset::CreateAssetError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_asset::CreateAssetError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_asset::CreateAssetError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::create_asset::CreateAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_packaging_configuration::CreatePackagingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_packaging_configuration::CreatePackagingConfigurationError> for Error {
    fn from(err: crate::operation::create_packaging_configuration::CreatePackagingConfigurationError) -> Self {
        match err {
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::create_packaging_configuration::CreatePackagingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_packaging_group::CreatePackagingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_packaging_group::CreatePackagingGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_packaging_group::CreatePackagingGroupError> for Error {
    fn from(err: crate::operation::create_packaging_group::CreatePackagingGroupError) -> Self {
        match err {
            crate::operation::create_packaging_group::CreatePackagingGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_packaging_group::CreatePackagingGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_packaging_group::CreatePackagingGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_packaging_group::CreatePackagingGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_packaging_group::CreatePackagingGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_packaging_group::CreatePackagingGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::create_packaging_group::CreatePackagingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset::DeleteAssetError> for Error {
    fn from(err: crate::operation::delete_asset::DeleteAssetError) -> Self {
        match err {
            crate::operation::delete_asset::DeleteAssetError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_asset::DeleteAssetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_asset::DeleteAssetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_asset::DeleteAssetError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_asset::DeleteAssetError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_asset::DeleteAssetError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::delete_asset::DeleteAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError> for Error {
    fn from(err: crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError) -> Self {
        match err {
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::delete_packaging_configuration::DeletePackagingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_packaging_group::DeletePackagingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_packaging_group::DeletePackagingGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_packaging_group::DeletePackagingGroupError> for Error {
    fn from(err: crate::operation::delete_packaging_group::DeletePackagingGroupError) -> Self {
        match err {
            crate::operation::delete_packaging_group::DeletePackagingGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_packaging_group::DeletePackagingGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_packaging_group::DeletePackagingGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_packaging_group::DeletePackagingGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_packaging_group::DeletePackagingGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_packaging_group::DeletePackagingGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::delete_packaging_group::DeletePackagingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset::DescribeAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_asset::DescribeAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_asset::DescribeAssetError> for Error {
    fn from(err: crate::operation::describe_asset::DescribeAssetError) -> Self {
        match err {
            crate::operation::describe_asset::DescribeAssetError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_asset::DescribeAssetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_asset::DescribeAssetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_asset::DescribeAssetError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_asset::DescribeAssetError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_asset::DescribeAssetError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::describe_asset::DescribeAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError> for Error {
    fn from(err: crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError) -> Self {
        match err {
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::describe_packaging_configuration::DescribePackagingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_packaging_group::DescribePackagingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_packaging_group::DescribePackagingGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_packaging_group::DescribePackagingGroupError> for Error {
    fn from(err: crate::operation::describe_packaging_group::DescribePackagingGroupError) -> Self {
        match err {
            crate::operation::describe_packaging_group::DescribePackagingGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_packaging_group::DescribePackagingGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_packaging_group::DescribePackagingGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_packaging_group::DescribePackagingGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_packaging_group::DescribePackagingGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_packaging_group::DescribePackagingGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::describe_packaging_group::DescribePackagingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assets::ListAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assets::ListAssetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assets::ListAssetsError> for Error {
    fn from(err: crate::operation::list_assets::ListAssetsError) -> Self {
        match err {
            crate::operation::list_assets::ListAssetsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_assets::ListAssetsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_assets::ListAssetsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_assets::ListAssetsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_assets::ListAssetsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_assets::ListAssetsError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::list_assets::ListAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_packaging_configurations::ListPackagingConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_packaging_configurations::ListPackagingConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_packaging_configurations::ListPackagingConfigurationsError> for Error {
    fn from(err: crate::operation::list_packaging_configurations::ListPackagingConfigurationsError) -> Self {
        match err {
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::list_packaging_configurations::ListPackagingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_packaging_groups::ListPackagingGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_packaging_groups::ListPackagingGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_packaging_groups::ListPackagingGroupsError> for Error {
    fn from(err: crate::operation::list_packaging_groups::ListPackagingGroupsError) -> Self {
        match err {
            crate::operation::list_packaging_groups::ListPackagingGroupsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_packaging_groups::ListPackagingGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_packaging_groups::ListPackagingGroupsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_packaging_groups::ListPackagingGroupsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_packaging_groups::ListPackagingGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_packaging_groups::ListPackagingGroupsError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::list_packaging_groups::ListPackagingGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_packaging_group::UpdatePackagingGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_packaging_group::UpdatePackagingGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_packaging_group::UpdatePackagingGroupError> for Error {
    fn from(err: crate::operation::update_packaging_group::UpdatePackagingGroupError) -> Self {
        match err {
            crate::operation::update_packaging_group::UpdatePackagingGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_packaging_group::UpdatePackagingGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_packaging_group::UpdatePackagingGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_packaging_group::UpdatePackagingGroupError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_packaging_group::UpdatePackagingGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_packaging_group::UpdatePackagingGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_packaging_group::UpdatePackagingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ForbiddenException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::UnprocessableEntityException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
