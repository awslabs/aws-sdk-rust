// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_configure_logs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConfigureLogsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.egress_access_logs {
        let mut object_2 = object.key("egressAccessLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_egress_access_logs(&mut object_2, var_1)?;
        object_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_asset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.id {
        object.key("id").string(var_3.as_str());
    }
    if let Some(var_4) = &input.packaging_group_id {
        object.key("packagingGroupId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.resource_id {
        object.key("resourceId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.source_arn {
        object.key("sourceArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.source_role_arn {
        object.key("sourceRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_packaging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePackagingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.cmaf_package {
        let mut object_13 = object.key("cmafPackage").start_object();
        crate::json_ser::serialize_structure_crate_model_cmaf_package(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.dash_package {
        let mut object_15 = object.key("dashPackage").start_object();
        crate::json_ser::serialize_structure_crate_model_dash_package(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.hls_package {
        let mut object_17 = object.key("hlsPackage").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_package(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.id {
        object.key("id").string(var_18.as_str());
    }
    if let Some(var_19) = &input.mss_package {
        let mut object_20 = object.key("mssPackage").start_object();
        crate::json_ser::serialize_structure_crate_model_mss_package(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.packaging_group_id {
        object.key("packagingGroupId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_packaging_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePackagingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.authorization {
        let mut object_27 = object.key("authorization").start_object();
        crate::json_ser::serialize_structure_crate_model_authorization(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.egress_access_logs {
        let mut object_29 = object.key("egressAccessLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_egress_access_logs(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.id {
        object.key("id").string(var_30.as_str());
    }
    if let Some(var_31) = &input.tags {
        let mut object_32 = object.key("tags").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34.as_str());
            }
        }
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_packaging_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePackagingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.authorization {
        let mut object_40 = object.key("authorization").start_object();
        crate::json_ser::serialize_structure_crate_model_authorization(&mut object_40, var_39)?;
        object_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_egress_access_logs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EgressAccessLogs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.log_group_name {
        object.key("logGroupName").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cmaf_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CmafPackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.encryption {
        let mut object_43 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cmaf_encryption(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.hls_manifests {
        let mut array_45 = object.key("hlsManifests").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hls_manifest(
                    &mut object_47,
                    item_46,
                )?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if input.include_encoder_configuration_in_segments {
        object
            .key("includeEncoderConfigurationInSegments")
            .boolean(input.include_encoder_configuration_in_segments);
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dash_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashPackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.dash_manifests {
        let mut array_49 = object.key("dashManifests").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dash_manifest(
                    &mut object_51,
                    item_50,
                )?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.encryption {
        let mut object_53 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_dash_encryption(&mut object_53, var_52)?;
        object_53.finish();
    }
    if input.include_encoder_configuration_in_segments {
        object
            .key("includeEncoderConfigurationInSegments")
            .boolean(input.include_encoder_configuration_in_segments);
    }
    if let Some(var_54) = &input.period_triggers {
        let mut array_55 = object.key("periodTriggers").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56.as_str());
            }
        }
        array_55.finish();
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    if let Some(var_57) = &input.segment_template_format {
        object.key("segmentTemplateFormat").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hls_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsPackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.encryption {
        let mut object_59 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_encryption(&mut object_59, var_58)?;
        object_59.finish();
    }
    if let Some(var_60) = &input.hls_manifests {
        let mut array_61 = object.key("hlsManifests").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hls_manifest(
                    &mut object_63,
                    item_62,
                )?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if input.include_dvb_subtitles {
        object
            .key("includeDvbSubtitles")
            .boolean(input.include_dvb_subtitles);
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    if input.use_audio_rendition_group {
        object
            .key("useAudioRenditionGroup")
            .boolean(input.use_audio_rendition_group);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mss_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MssPackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.encryption {
        let mut object_65 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_mss_encryption(&mut object_65, var_64)?;
        object_65.finish();
    }
    if let Some(var_66) = &input.mss_manifests {
        let mut array_67 = object.key("mssManifests").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mss_manifest(
                    &mut object_69,
                    item_68,
                )?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authorization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Authorization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.cdn_identifier_secret {
        object.key("cdnIdentifierSecret").string(var_70.as_str());
    }
    if let Some(var_71) = &input.secrets_role_arn {
        object.key("secretsRoleArn").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cmaf_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CmafEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.constant_initialization_vector {
        object
            .key("constantInitializationVector")
            .string(var_72.as_str());
    }
    if let Some(var_73) = &input.speke_key_provider {
        let mut object_74 = object.key("spekeKeyProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_speke_key_provider(
            &mut object_74,
            var_73,
        )?;
        object_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hls_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsManifest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.ad_markers {
        object.key("adMarkers").string(var_75.as_str());
    }
    if input.include_iframe_only_stream {
        object
            .key("includeIframeOnlyStream")
            .boolean(input.include_iframe_only_stream);
    }
    if let Some(var_76) = &input.manifest_name {
        object.key("manifestName").string(var_76.as_str());
    }
    if input.program_date_time_interval_seconds != 0 {
        object.key("programDateTimeIntervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_date_time_interval_seconds).into()),
        );
    }
    if input.repeat_ext_x_key {
        object.key("repeatExtXKey").boolean(input.repeat_ext_x_key);
    }
    if let Some(var_77) = &input.stream_selection {
        let mut object_78 = object.key("streamSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_selection(&mut object_78, var_77)?;
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dash_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashManifest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.manifest_layout {
        object.key("manifestLayout").string(var_79.as_str());
    }
    if let Some(var_80) = &input.manifest_name {
        object.key("manifestName").string(var_80.as_str());
    }
    if input.min_buffer_time_seconds != 0 {
        object.key("minBufferTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_buffer_time_seconds).into()),
        );
    }
    if let Some(var_81) = &input.profile {
        object.key("profile").string(var_81.as_str());
    }
    if let Some(var_82) = &input.scte_markers_source {
        object.key("scteMarkersSource").string(var_82.as_str());
    }
    if let Some(var_83) = &input.stream_selection {
        let mut object_84 = object.key("streamSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_selection(&mut object_84, var_83)?;
        object_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dash_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.speke_key_provider {
        let mut object_86 = object.key("spekeKeyProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_speke_key_provider(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hls_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.constant_initialization_vector {
        object
            .key("constantInitializationVector")
            .string(var_87.as_str());
    }
    if let Some(var_88) = &input.encryption_method {
        object.key("encryptionMethod").string(var_88.as_str());
    }
    if let Some(var_89) = &input.speke_key_provider {
        let mut object_90 = object.key("spekeKeyProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_speke_key_provider(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mss_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MssEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.speke_key_provider {
        let mut object_92 = object.key("spekeKeyProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_speke_key_provider(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mss_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MssManifest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.manifest_name {
        object.key("manifestName").string(var_93.as_str());
    }
    if let Some(var_94) = &input.stream_selection {
        let mut object_95 = object.key("streamSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_selection(&mut object_95, var_94)?;
        object_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_speke_key_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpekeKeyProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.role_arn {
        object.key("roleArn").string(var_96.as_str());
    }
    if let Some(var_97) = &input.system_ids {
        let mut array_98 = object.key("systemIds").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.url {
        object.key("url").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_selection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamSelection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_video_bits_per_second != 0 {
        object.key("maxVideoBitsPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_video_bits_per_second).into()),
        );
    }
    if input.min_video_bits_per_second != 0 {
        object.key("minVideoBitsPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_video_bits_per_second).into()),
        );
    }
    if let Some(var_101) = &input.stream_order {
        object.key("streamOrder").string(var_101.as_str());
    }
    Ok(())
}
