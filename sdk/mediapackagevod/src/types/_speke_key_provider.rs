// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SpekeKeyProvider {
    /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
    #[doc(hidden)]
    pub encryption_contract_configuration:
        std::option::Option<crate::types::EncryptionContractConfiguration>,
    /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// The system IDs to include in key requests.
    #[doc(hidden)]
    pub system_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// The URL of the external key provider service.
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
}
impl SpekeKeyProvider {
    /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
    pub fn encryption_contract_configuration(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionContractConfiguration> {
        self.encryption_contract_configuration.as_ref()
    }
    /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// The system IDs to include in key requests.
    pub fn system_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.system_ids.as_deref()
    }
    /// The URL of the external key provider service.
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl SpekeKeyProvider {
    /// Creates a new builder-style object to manufacture [`SpekeKeyProvider`](crate::types::SpekeKeyProvider).
    pub fn builder() -> crate::types::builders::SpekeKeyProviderBuilder {
        crate::types::builders::SpekeKeyProviderBuilder::default()
    }
}

/// A builder for [`SpekeKeyProvider`](crate::types::SpekeKeyProvider).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpekeKeyProviderBuilder {
    pub(crate) encryption_contract_configuration:
        std::option::Option<crate::types::EncryptionContractConfiguration>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) system_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) url: std::option::Option<std::string::String>,
}
impl SpekeKeyProviderBuilder {
    /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
    pub fn encryption_contract_configuration(
        mut self,
        input: crate::types::EncryptionContractConfiguration,
    ) -> Self {
        self.encryption_contract_configuration = Some(input);
        self
    }
    /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
    pub fn set_encryption_contract_configuration(
        mut self,
        input: std::option::Option<crate::types::EncryptionContractConfiguration>,
    ) -> Self {
        self.encryption_contract_configuration = input;
        self
    }
    /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Appends an item to `system_ids`.
    ///
    /// To override the contents of this collection use [`set_system_ids`](Self::set_system_ids).
    ///
    /// The system IDs to include in key requests.
    pub fn system_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.system_ids.unwrap_or_default();
        v.push(input.into());
        self.system_ids = Some(v);
        self
    }
    /// The system IDs to include in key requests.
    pub fn set_system_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.system_ids = input;
        self
    }
    /// The URL of the external key provider service.
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// The URL of the external key provider service.
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Consumes the builder and constructs a [`SpekeKeyProvider`](crate::types::SpekeKeyProvider).
    pub fn build(self) -> crate::types::SpekeKeyProvider {
        crate::types::SpekeKeyProvider {
            encryption_contract_configuration: self.encryption_contract_configuration,
            role_arn: self.role_arn,
            system_ids: self.system_ids,
            url: self.url,
        }
    }
}
