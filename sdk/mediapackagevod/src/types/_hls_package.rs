// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An HTTP Live Streaming (HLS) packaging configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HlsPackage {
    /// An HTTP Live Streaming (HLS) encryption configuration.
    pub encryption: ::std::option::Option<crate::types::HlsEncryption>,
    /// A list of HLS manifest configurations.
    pub hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifest>>,
    /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
    pub include_dvb_subtitles: ::std::option::Option<bool>,
    /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
    pub segment_duration_seconds: ::std::option::Option<i32>,
    /// When enabled, audio streams will be placed in rendition groups in the output.
    pub use_audio_rendition_group: ::std::option::Option<bool>,
}
impl HlsPackage {
    /// An HTTP Live Streaming (HLS) encryption configuration.
    pub fn encryption(&self) -> ::std::option::Option<&crate::types::HlsEncryption> {
        self.encryption.as_ref()
    }
    /// A list of HLS manifest configurations.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hls_manifests.is_none()`.
    pub fn hls_manifests(&self) -> &[crate::types::HlsManifest] {
        self.hls_manifests.as_deref().unwrap_or_default()
    }
    /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
    pub fn include_dvb_subtitles(&self) -> ::std::option::Option<bool> {
        self.include_dvb_subtitles
    }
    /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
    pub fn segment_duration_seconds(&self) -> ::std::option::Option<i32> {
        self.segment_duration_seconds
    }
    /// When enabled, audio streams will be placed in rendition groups in the output.
    pub fn use_audio_rendition_group(&self) -> ::std::option::Option<bool> {
        self.use_audio_rendition_group
    }
}
impl HlsPackage {
    /// Creates a new builder-style object to manufacture [`HlsPackage`](crate::types::HlsPackage).
    pub fn builder() -> crate::types::builders::HlsPackageBuilder {
        crate::types::builders::HlsPackageBuilder::default()
    }
}

/// A builder for [`HlsPackage`](crate::types::HlsPackage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HlsPackageBuilder {
    pub(crate) encryption: ::std::option::Option<crate::types::HlsEncryption>,
    pub(crate) hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifest>>,
    pub(crate) include_dvb_subtitles: ::std::option::Option<bool>,
    pub(crate) segment_duration_seconds: ::std::option::Option<i32>,
    pub(crate) use_audio_rendition_group: ::std::option::Option<bool>,
}
impl HlsPackageBuilder {
    /// An HTTP Live Streaming (HLS) encryption configuration.
    pub fn encryption(mut self, input: crate::types::HlsEncryption) -> Self {
        self.encryption = ::std::option::Option::Some(input);
        self
    }
    /// An HTTP Live Streaming (HLS) encryption configuration.
    pub fn set_encryption(mut self, input: ::std::option::Option<crate::types::HlsEncryption>) -> Self {
        self.encryption = input;
        self
    }
    /// An HTTP Live Streaming (HLS) encryption configuration.
    pub fn get_encryption(&self) -> &::std::option::Option<crate::types::HlsEncryption> {
        &self.encryption
    }
    /// Appends an item to `hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// A list of HLS manifest configurations.
    pub fn hls_manifests(mut self, input: crate::types::HlsManifest) -> Self {
        let mut v = self.hls_manifests.unwrap_or_default();
        v.push(input);
        self.hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// A list of HLS manifest configurations.
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifest>>) -> Self {
        self.hls_manifests = input;
        self
    }
    /// A list of HLS manifest configurations.
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HlsManifest>> {
        &self.hls_manifests
    }
    /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
    pub fn include_dvb_subtitles(mut self, input: bool) -> Self {
        self.include_dvb_subtitles = ::std::option::Option::Some(input);
        self
    }
    /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
    pub fn set_include_dvb_subtitles(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_dvb_subtitles = input;
        self
    }
    /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
    pub fn get_include_dvb_subtitles(&self) -> &::std::option::Option<bool> {
        &self.include_dvb_subtitles
    }
    /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
    pub fn segment_duration_seconds(mut self, input: i32) -> Self {
        self.segment_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
    pub fn set_segment_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_duration_seconds = input;
        self
    }
    /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
    pub fn get_segment_duration_seconds(&self) -> &::std::option::Option<i32> {
        &self.segment_duration_seconds
    }
    /// When enabled, audio streams will be placed in rendition groups in the output.
    pub fn use_audio_rendition_group(mut self, input: bool) -> Self {
        self.use_audio_rendition_group = ::std::option::Option::Some(input);
        self
    }
    /// When enabled, audio streams will be placed in rendition groups in the output.
    pub fn set_use_audio_rendition_group(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_audio_rendition_group = input;
        self
    }
    /// When enabled, audio streams will be placed in rendition groups in the output.
    pub fn get_use_audio_rendition_group(&self) -> &::std::option::Option<bool> {
        &self.use_audio_rendition_group
    }
    /// Consumes the builder and constructs a [`HlsPackage`](crate::types::HlsPackage).
    pub fn build(self) -> crate::types::HlsPackage {
        crate::types::HlsPackage {
            encryption: self.encryption,
            hls_manifests: self.hls_manifests,
            include_dvb_subtitles: self.include_dvb_subtitles,
            segment_duration_seconds: self.segment_duration_seconds,
            use_audio_rendition_group: self.use_audio_rendition_group,
        }
    }
}
