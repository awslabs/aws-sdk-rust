// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An HTTP Live Streaming (HLS) encryption configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HlsEncryption {
    /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
    pub constant_initialization_vector: ::std::option::Option<::std::string::String>,
    /// The encryption method to use.
    pub encryption_method: ::std::option::Option<crate::types::EncryptionMethod>,
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub speke_key_provider: ::std::option::Option<crate::types::SpekeKeyProvider>,
}
impl HlsEncryption {
    /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
    pub fn constant_initialization_vector(&self) -> ::std::option::Option<&str> {
        self.constant_initialization_vector.as_deref()
    }
    /// The encryption method to use.
    pub fn encryption_method(&self) -> ::std::option::Option<&crate::types::EncryptionMethod> {
        self.encryption_method.as_ref()
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn speke_key_provider(&self) -> ::std::option::Option<&crate::types::SpekeKeyProvider> {
        self.speke_key_provider.as_ref()
    }
}
impl HlsEncryption {
    /// Creates a new builder-style object to manufacture [`HlsEncryption`](crate::types::HlsEncryption).
    pub fn builder() -> crate::types::builders::HlsEncryptionBuilder {
        crate::types::builders::HlsEncryptionBuilder::default()
    }
}

/// A builder for [`HlsEncryption`](crate::types::HlsEncryption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HlsEncryptionBuilder {
    pub(crate) constant_initialization_vector: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_method: ::std::option::Option<crate::types::EncryptionMethod>,
    pub(crate) speke_key_provider: ::std::option::Option<crate::types::SpekeKeyProvider>,
}
impl HlsEncryptionBuilder {
    /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
    pub fn constant_initialization_vector(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.constant_initialization_vector = ::std::option::Option::Some(input.into());
        self
    }
    /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
    pub fn set_constant_initialization_vector(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.constant_initialization_vector = input;
        self
    }
    /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
    pub fn get_constant_initialization_vector(&self) -> &::std::option::Option<::std::string::String> {
        &self.constant_initialization_vector
    }
    /// The encryption method to use.
    pub fn encryption_method(mut self, input: crate::types::EncryptionMethod) -> Self {
        self.encryption_method = ::std::option::Option::Some(input);
        self
    }
    /// The encryption method to use.
    pub fn set_encryption_method(mut self, input: ::std::option::Option<crate::types::EncryptionMethod>) -> Self {
        self.encryption_method = input;
        self
    }
    /// The encryption method to use.
    pub fn get_encryption_method(&self) -> &::std::option::Option<crate::types::EncryptionMethod> {
        &self.encryption_method
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    /// This field is required.
    pub fn speke_key_provider(mut self, input: crate::types::SpekeKeyProvider) -> Self {
        self.speke_key_provider = ::std::option::Option::Some(input);
        self
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn set_speke_key_provider(mut self, input: ::std::option::Option<crate::types::SpekeKeyProvider>) -> Self {
        self.speke_key_provider = input;
        self
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn get_speke_key_provider(&self) -> &::std::option::Option<crate::types::SpekeKeyProvider> {
        &self.speke_key_provider
    }
    /// Consumes the builder and constructs a [`HlsEncryption`](crate::types::HlsEncryption).
    pub fn build(self) -> crate::types::HlsEncryption {
        crate::types::HlsEncryption {
            constant_initialization_vector: self.constant_initialization_vector,
            encryption_method: self.encryption_method,
            speke_key_provider: self.speke_key_provider,
        }
    }
}
