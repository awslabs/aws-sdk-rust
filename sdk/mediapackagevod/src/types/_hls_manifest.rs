// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An HTTP Live Streaming (HLS) manifest configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsManifest {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
    #[doc(hidden)]
    pub ad_markers: std::option::Option<crate::types::AdMarkers>,
    /// When enabled, an I-Frame only stream will be included in the output.
    #[doc(hidden)]
    pub include_iframe_only_stream: bool,
    /// An optional string to include in the name of the manifest.
    #[doc(hidden)]
    pub manifest_name: std::option::Option<std::string::String>,
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    #[doc(hidden)]
    pub program_date_time_interval_seconds: i32,
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    #[doc(hidden)]
    pub repeat_ext_x_key: bool,
    /// A StreamSelection configuration.
    #[doc(hidden)]
    pub stream_selection: std::option::Option<crate::types::StreamSelection>,
}
impl HlsManifest {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
    pub fn ad_markers(&self) -> std::option::Option<&crate::types::AdMarkers> {
        self.ad_markers.as_ref()
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(&self) -> bool {
        self.include_iframe_only_stream
    }
    /// An optional string to include in the name of the manifest.
    pub fn manifest_name(&self) -> std::option::Option<&str> {
        self.manifest_name.as_deref()
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn program_date_time_interval_seconds(&self) -> i32 {
        self.program_date_time_interval_seconds
    }
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    pub fn repeat_ext_x_key(&self) -> bool {
        self.repeat_ext_x_key
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(&self) -> std::option::Option<&crate::types::StreamSelection> {
        self.stream_selection.as_ref()
    }
}
impl HlsManifest {
    /// Creates a new builder-style object to manufacture [`HlsManifest`](crate::types::HlsManifest).
    pub fn builder() -> crate::types::builders::HlsManifestBuilder {
        crate::types::builders::HlsManifestBuilder::default()
    }
}

/// A builder for [`HlsManifest`](crate::types::HlsManifest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsManifestBuilder {
    pub(crate) ad_markers: std::option::Option<crate::types::AdMarkers>,
    pub(crate) include_iframe_only_stream: std::option::Option<bool>,
    pub(crate) manifest_name: std::option::Option<std::string::String>,
    pub(crate) program_date_time_interval_seconds: std::option::Option<i32>,
    pub(crate) repeat_ext_x_key: std::option::Option<bool>,
    pub(crate) stream_selection: std::option::Option<crate::types::StreamSelection>,
}
impl HlsManifestBuilder {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
    pub fn ad_markers(mut self, input: crate::types::AdMarkers) -> Self {
        self.ad_markers = Some(input);
        self
    }
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
    pub fn set_ad_markers(mut self, input: std::option::Option<crate::types::AdMarkers>) -> Self {
        self.ad_markers = input;
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(mut self, input: bool) -> Self {
        self.include_iframe_only_stream = Some(input);
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn set_include_iframe_only_stream(mut self, input: std::option::Option<bool>) -> Self {
        self.include_iframe_only_stream = input;
        self
    }
    /// An optional string to include in the name of the manifest.
    pub fn manifest_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.manifest_name = Some(input.into());
        self
    }
    /// An optional string to include in the name of the manifest.
    pub fn set_manifest_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn program_date_time_interval_seconds(mut self, input: i32) -> Self {
        self.program_date_time_interval_seconds = Some(input);
        self
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn set_program_date_time_interval_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.program_date_time_interval_seconds = input;
        self
    }
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    pub fn repeat_ext_x_key(mut self, input: bool) -> Self {
        self.repeat_ext_x_key = Some(input);
        self
    }
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    pub fn set_repeat_ext_x_key(mut self, input: std::option::Option<bool>) -> Self {
        self.repeat_ext_x_key = input;
        self
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(mut self, input: crate::types::StreamSelection) -> Self {
        self.stream_selection = Some(input);
        self
    }
    /// A StreamSelection configuration.
    pub fn set_stream_selection(
        mut self,
        input: std::option::Option<crate::types::StreamSelection>,
    ) -> Self {
        self.stream_selection = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsManifest`](crate::types::HlsManifest).
    pub fn build(self) -> crate::types::HlsManifest {
        crate::types::HlsManifest {
            ad_markers: self.ad_markers,
            include_iframe_only_stream: self.include_iframe_only_stream.unwrap_or_default(),
            manifest_name: self.manifest_name,
            program_date_time_interval_seconds: self
                .program_date_time_interval_seconds
                .unwrap_or_default(),
            repeat_ext_x_key: self.repeat_ext_x_key.unwrap_or_default(),
            stream_selection: self.stream_selection,
        }
    }
}
