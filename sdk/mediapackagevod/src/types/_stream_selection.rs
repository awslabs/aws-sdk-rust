// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A StreamSelection configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamSelection {
    /// The maximum video bitrate (bps) to include in output.
    #[doc(hidden)]
    pub max_video_bits_per_second: i32,
    /// The minimum video bitrate (bps) to include in output.
    #[doc(hidden)]
    pub min_video_bits_per_second: i32,
    /// A directive that determines the order of streams in the output.
    #[doc(hidden)]
    pub stream_order: std::option::Option<crate::types::StreamOrder>,
}
impl StreamSelection {
    /// The maximum video bitrate (bps) to include in output.
    pub fn max_video_bits_per_second(&self) -> i32 {
        self.max_video_bits_per_second
    }
    /// The minimum video bitrate (bps) to include in output.
    pub fn min_video_bits_per_second(&self) -> i32 {
        self.min_video_bits_per_second
    }
    /// A directive that determines the order of streams in the output.
    pub fn stream_order(&self) -> std::option::Option<&crate::types::StreamOrder> {
        self.stream_order.as_ref()
    }
}
impl StreamSelection {
    /// Creates a new builder-style object to manufacture [`StreamSelection`](crate::types::StreamSelection).
    pub fn builder() -> crate::types::builders::StreamSelectionBuilder {
        crate::types::builders::StreamSelectionBuilder::default()
    }
}

/// A builder for [`StreamSelection`](crate::types::StreamSelection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamSelectionBuilder {
    pub(crate) max_video_bits_per_second: std::option::Option<i32>,
    pub(crate) min_video_bits_per_second: std::option::Option<i32>,
    pub(crate) stream_order: std::option::Option<crate::types::StreamOrder>,
}
impl StreamSelectionBuilder {
    /// The maximum video bitrate (bps) to include in output.
    pub fn max_video_bits_per_second(mut self, input: i32) -> Self {
        self.max_video_bits_per_second = Some(input);
        self
    }
    /// The maximum video bitrate (bps) to include in output.
    pub fn set_max_video_bits_per_second(mut self, input: std::option::Option<i32>) -> Self {
        self.max_video_bits_per_second = input;
        self
    }
    /// The minimum video bitrate (bps) to include in output.
    pub fn min_video_bits_per_second(mut self, input: i32) -> Self {
        self.min_video_bits_per_second = Some(input);
        self
    }
    /// The minimum video bitrate (bps) to include in output.
    pub fn set_min_video_bits_per_second(mut self, input: std::option::Option<i32>) -> Self {
        self.min_video_bits_per_second = input;
        self
    }
    /// A directive that determines the order of streams in the output.
    pub fn stream_order(mut self, input: crate::types::StreamOrder) -> Self {
        self.stream_order = Some(input);
        self
    }
    /// A directive that determines the order of streams in the output.
    pub fn set_stream_order(
        mut self,
        input: std::option::Option<crate::types::StreamOrder>,
    ) -> Self {
        self.stream_order = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamSelection`](crate::types::StreamSelection).
    pub fn build(self) -> crate::types::StreamSelection {
        crate::types::StreamSelection {
            max_video_bits_per_second: self.max_video_bits_per_second.unwrap_or_default(),
            min_video_bits_per_second: self.min_video_bits_per_second.unwrap_or_default(),
            stream_order: self.stream_order,
        }
    }
}
