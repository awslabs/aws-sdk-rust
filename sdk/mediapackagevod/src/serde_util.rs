// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn authorization_correct_errors(
    mut builder: crate::types::builders::AuthorizationBuilder,
) -> crate::types::builders::AuthorizationBuilder {
    if builder.cdn_identifier_secret.is_none() {
        builder.cdn_identifier_secret = Some(Default::default())
    }
    if builder.secrets_role_arn.is_none() {
        builder.secrets_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cmaf_package_correct_errors(mut builder: crate::types::builders::CmafPackageBuilder) -> crate::types::builders::CmafPackageBuilder {
    if builder.hls_manifests.is_none() {
        builder.hls_manifests = Some(Default::default())
    }
    builder
}

pub(crate) fn dash_package_correct_errors(mut builder: crate::types::builders::DashPackageBuilder) -> crate::types::builders::DashPackageBuilder {
    if builder.dash_manifests.is_none() {
        builder.dash_manifests = Some(Default::default())
    }
    builder
}

pub(crate) fn hls_package_correct_errors(mut builder: crate::types::builders::HlsPackageBuilder) -> crate::types::builders::HlsPackageBuilder {
    if builder.hls_manifests.is_none() {
        builder.hls_manifests = Some(Default::default())
    }
    builder
}

pub(crate) fn mss_package_correct_errors(mut builder: crate::types::builders::MssPackageBuilder) -> crate::types::builders::MssPackageBuilder {
    if builder.mss_manifests.is_none() {
        builder.mss_manifests = Some(Default::default())
    }
    builder
}

pub(crate) fn cmaf_encryption_correct_errors(
    mut builder: crate::types::builders::CmafEncryptionBuilder,
) -> crate::types::builders::CmafEncryptionBuilder {
    if builder.speke_key_provider.is_none() {
        builder.speke_key_provider = {
            let builder = crate::types::builders::SpekeKeyProviderBuilder::default();
            Some(crate::serde_util::speke_key_provider_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn dash_encryption_correct_errors(
    mut builder: crate::types::builders::DashEncryptionBuilder,
) -> crate::types::builders::DashEncryptionBuilder {
    if builder.speke_key_provider.is_none() {
        builder.speke_key_provider = {
            let builder = crate::types::builders::SpekeKeyProviderBuilder::default();
            Some(crate::serde_util::speke_key_provider_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn hls_encryption_correct_errors(
    mut builder: crate::types::builders::HlsEncryptionBuilder,
) -> crate::types::builders::HlsEncryptionBuilder {
    if builder.speke_key_provider.is_none() {
        builder.speke_key_provider = {
            let builder = crate::types::builders::SpekeKeyProviderBuilder::default();
            Some(crate::serde_util::speke_key_provider_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn mss_encryption_correct_errors(
    mut builder: crate::types::builders::MssEncryptionBuilder,
) -> crate::types::builders::MssEncryptionBuilder {
    if builder.speke_key_provider.is_none() {
        builder.speke_key_provider = {
            let builder = crate::types::builders::SpekeKeyProviderBuilder::default();
            Some(crate::serde_util::speke_key_provider_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn speke_key_provider_correct_errors(
    mut builder: crate::types::builders::SpekeKeyProviderBuilder,
) -> crate::types::builders::SpekeKeyProviderBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.system_ids.is_none() {
        builder.system_ids = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_contract_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionContractConfigurationBuilder,
) -> crate::types::builders::EncryptionContractConfigurationBuilder {
    if builder.preset_speke20_audio.is_none() {
        builder.preset_speke20_audio = "no value was set".parse::<crate::types::PresetSpeke20Audio>().ok()
    }
    if builder.preset_speke20_video.is_none() {
        builder.preset_speke20_video = "no value was set".parse::<crate::types::PresetSpeke20Video>().ok()
    }
    builder
}
