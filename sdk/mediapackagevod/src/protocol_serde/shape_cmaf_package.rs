// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_cmaf_package<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CmafPackage>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CmafPackageBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "encryption" => {
                            builder = builder.set_encryption(crate::protocol_serde::shape_cmaf_encryption::de_cmaf_encryption(tokens)?);
                        }
                        "hlsManifests" => {
                            builder = builder.set_hls_manifests(crate::protocol_serde::shape_list_of_hls_manifest::de_list_of_hls_manifest(tokens)?);
                        }
                        "includeEncoderConfigurationInSegments" => {
                            builder = builder.set_include_encoder_configuration_in_segments(
                                ::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?,
                            );
                        }
                        "segmentDurationSeconds" => {
                            builder = builder.set_segment_duration_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::cmaf_package_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_cmaf_package(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CmafPackage,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_2 = object.key("encryption").start_object();
        crate::protocol_serde::shape_cmaf_encryption::ser_cmaf_encryption(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.hls_manifests {
        let mut array_4 = object.key("hlsManifests").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_hls_manifest::ser_hls_manifest(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.include_encoder_configuration_in_segments {
        object.key("includeEncoderConfigurationInSegments").boolean(*var_7);
    }
    if let Some(var_8) = &input.segment_duration_seconds {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    Ok(())
}
