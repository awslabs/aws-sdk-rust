// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_hls_package<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::HlsPackage>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::HlsPackageBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "encryption" => {
                                builder = builder.set_encryption(
                                    crate::protocol_serde::shape_hls_encryption::de_hls_encryption(
                                        tokens,
                                    )?,
                                );
                            }
                            "hlsManifests" => {
                                builder = builder.set_hls_manifests(
                                    crate::protocol_serde::shape___list_of_hls_manifest::de___list_of_hls_manifest(tokens)?
                                );
                            }
                            "includeDvbSubtitles" => {
                                builder = builder.set_include_dvb_subtitles(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "segmentDurationSeconds" => {
                                builder = builder.set_segment_duration_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "useAudioRenditionGroup" => {
                                builder = builder.set_use_audio_rendition_group(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_hls_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::HlsPackage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_2 = object.key("encryption").start_object();
        crate::protocol_serde::shape_hls_encryption::ser_hls_encryption(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.hls_manifests {
        let mut array_4 = object.key("hlsManifests").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_hls_manifest::ser_hls_manifest(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if input.include_dvb_subtitles {
        object
            .key("includeDvbSubtitles")
            .boolean(input.include_dvb_subtitles);
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    if input.use_audio_rendition_group {
        object
            .key("useAudioRenditionGroup")
            .boolean(input.use_audio_rendition_group);
    }
    Ok(())
}
