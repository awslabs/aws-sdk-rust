// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_hls_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::HlsManifest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.ad_markers {
        object.key("adMarkers").string(var_1.as_str());
    }
    if input.include_iframe_only_stream {
        object
            .key("includeIframeOnlyStream")
            .boolean(input.include_iframe_only_stream);
    }
    if let Some(var_2) = &input.manifest_name {
        object.key("manifestName").string(var_2.as_str());
    }
    if input.program_date_time_interval_seconds != 0 {
        object.key("programDateTimeIntervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_date_time_interval_seconds).into()),
        );
    }
    if input.repeat_ext_x_key {
        object.key("repeatExtXKey").boolean(input.repeat_ext_x_key);
    }
    if let Some(var_3) = &input.stream_selection {
        #[allow(unused_mut)]
        let mut object_4 = object.key("streamSelection").start_object();
        crate::protocol_serde::shape_stream_selection::ser_stream_selection(&mut object_4, var_3)?;
        object_4.finish();
    }
    Ok(())
}

pub(crate) fn de_hls_manifest<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::HlsManifest>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::HlsManifestBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adMarkers" => {
                                builder = builder.set_ad_markers(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::AdMarkers::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "includeIframeOnlyStream" => {
                                builder = builder.set_include_iframe_only_stream(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "manifestName" => {
                                builder = builder.set_manifest_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "programDateTimeIntervalSeconds" => {
                                builder = builder.set_program_date_time_interval_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "repeatExtXKey" => {
                                builder = builder.set_repeat_ext_x_key(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "streamSelection" => {
                                builder = builder.set_stream_selection(
                                    crate::protocol_serde::shape_stream_selection::de_stream_selection(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
