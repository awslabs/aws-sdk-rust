// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Facility containing destinations, workers, activities, and tasks.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Site {
    /// Site ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// The name of the site. Mutable after creation and unique within a given account.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    #[doc(hidden)]
    pub country_code: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl Site {
    /// Site ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The name of the site. Mutable after creation and unique within a given account.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    pub fn country_code(&self) -> std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
/// See [`Site`](crate::model::Site).
pub mod site {

    /// A builder for [`Site`](crate::model::Site).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) country_code: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// Site ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// The name of the site. Mutable after creation and unique within a given account.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// The name of the site. Mutable after creation and unique within a given account.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn country_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.country_code = Some(input.into());
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn set_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.country_code = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Consumes the builder and constructs a [`Site`](crate::model::Site).
        pub fn build(self) -> crate::model::Site {
            crate::model::Site {
                arn: self.arn,
                name: self.name,
                country_code: self.country_code,
                created_at: self.created_at,
            }
        }
    }
}
impl Site {
    /// Creates a new builder-style object to manufacture [`Site`](crate::model::Site).
    pub fn builder() -> crate::model::site::Builder {
        crate::model::site::Builder::default()
    }
}

/// A collection of workers organized within a facility.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkerFleet {
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the worker fleet's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// JSON blob containing additional fixed properties regarding the worker fleet
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
}
impl WorkerFleet {
    /// Full ARN of the worker fleet.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the worker fleet's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// JSON blob containing additional fixed properties regarding the worker fleet
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
/// See [`WorkerFleet`](crate::model::WorkerFleet).
pub mod worker_fleet {

    /// A builder for [`WorkerFleet`](crate::model::WorkerFleet).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Full ARN of the worker fleet.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        /// Consumes the builder and constructs a [`WorkerFleet`](crate::model::WorkerFleet).
        pub fn build(self) -> crate::model::WorkerFleet {
            crate::model::WorkerFleet {
                arn: self.arn,
                id: self.id,
                name: self.name,
                site: self.site,
                created_at: self.created_at,
                updated_at: self.updated_at,
                additional_fixed_properties: self.additional_fixed_properties,
            }
        }
    }
}
impl WorkerFleet {
    /// Creates a new builder-style object to manufacture [`WorkerFleet`](crate::model::WorkerFleet).
    pub fn builder() -> crate::model::worker_fleet::Builder {
        crate::model::worker_fleet::Builder::default()
    }
}

/// Area within a facility where work can be performed.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Destination {
    /// Destination ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the destination's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// State of the destination.
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::DestinationState>,
    /// JSON document containing additional fixed properties regarding the destination
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
}
impl Destination {
    /// Destination ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the destination's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// State of the destination.
    pub fn state(&self) -> std::option::Option<&crate::model::DestinationState> {
        self.state.as_ref()
    }
    /// JSON document containing additional fixed properties regarding the destination
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
/// See [`Destination`](crate::model::Destination).
pub mod destination {

    /// A builder for [`Destination`](crate::model::Destination).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::DestinationState>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Destination ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Destination ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the destination's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the destination's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// State of the destination.
        pub fn state(mut self, input: crate::model::DestinationState) -> Self {
            self.state = Some(input);
            self
        }
        /// State of the destination.
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::DestinationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        /// Consumes the builder and constructs a [`Destination`](crate::model::Destination).
        pub fn build(self) -> crate::model::Destination {
            crate::model::Destination {
                arn: self.arn,
                id: self.id,
                name: self.name,
                site: self.site,
                created_at: self.created_at,
                updated_at: self.updated_at,
                state: self.state,
                additional_fixed_properties: self.additional_fixed_properties,
            }
        }
    }
}
impl Destination {
    /// Creates a new builder-style object to manufacture [`Destination`](crate::model::Destination).
    pub fn builder() -> crate::model::destination::Builder {
        crate::model::destination::Builder::default()
    }
}

/// When writing a match expression against `DestinationState`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let destinationstate = unimplemented!();
/// match destinationstate {
///     DestinationState::Decommissioned => { /* ... */ },
///     DestinationState::Disabled => { /* ... */ },
///     DestinationState::Enabled => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `destinationstate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DestinationState::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DestinationState::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DestinationState::NewFeature` is defined.
/// Specifically, when `destinationstate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DestinationState::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// State of the destination.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DestinationState {
    #[allow(missing_docs)] // documentation missing in model
    Decommissioned,
    #[allow(missing_docs)] // documentation missing in model
    Disabled,
    #[allow(missing_docs)] // documentation missing in model
    Enabled,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for DestinationState {
    fn from(s: &str) -> Self {
        match s {
            "DECOMMISSIONED" => DestinationState::Decommissioned,
            "DISABLED" => DestinationState::Disabled,
            "ENABLED" => DestinationState::Enabled,
            other => DestinationState::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for DestinationState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DestinationState::from(s))
    }
}
impl DestinationState {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DestinationState::Decommissioned => "DECOMMISSIONED",
            DestinationState::Disabled => "DISABLED",
            DestinationState::Enabled => "ENABLED",
            DestinationState::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["DECOMMISSIONED", "DISABLED", "ENABLED"]
    }
}
impl AsRef<str> for DestinationState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// Supported coordinates for worker position.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum PositionCoordinates {
    /// Cartesian coordinates.
    CartesianCoordinates(crate::model::CartesianCoordinates),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PositionCoordinates {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`CartesianCoordinates`](crate::model::PositionCoordinates::CartesianCoordinates), extracting the inner [`CartesianCoordinates`](crate::model::CartesianCoordinates).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cartesian_coordinates(
        &self,
    ) -> std::result::Result<&crate::model::CartesianCoordinates, &Self> {
        if let PositionCoordinates::CartesianCoordinates(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CartesianCoordinates`](crate::model::PositionCoordinates::CartesianCoordinates).
    pub fn is_cartesian_coordinates(&self) -> bool {
        self.as_cartesian_coordinates().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

/// Cartesian coordinates in 3D space relative to the RoboRunner origin.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CartesianCoordinates {
    /// X coordinate.
    #[doc(hidden)]
    pub x: std::option::Option<f64>,
    /// Y coordinate.
    #[doc(hidden)]
    pub y: std::option::Option<f64>,
    /// Z coordinate.
    #[doc(hidden)]
    pub z: std::option::Option<f64>,
}
impl CartesianCoordinates {
    /// X coordinate.
    pub fn x(&self) -> std::option::Option<f64> {
        self.x
    }
    /// Y coordinate.
    pub fn y(&self) -> std::option::Option<f64> {
        self.y
    }
    /// Z coordinate.
    pub fn z(&self) -> std::option::Option<f64> {
        self.z
    }
}
/// See [`CartesianCoordinates`](crate::model::CartesianCoordinates).
pub mod cartesian_coordinates {

    /// A builder for [`CartesianCoordinates`](crate::model::CartesianCoordinates).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) x: std::option::Option<f64>,
        pub(crate) y: std::option::Option<f64>,
        pub(crate) z: std::option::Option<f64>,
    }
    impl Builder {
        /// X coordinate.
        pub fn x(mut self, input: f64) -> Self {
            self.x = Some(input);
            self
        }
        /// X coordinate.
        pub fn set_x(mut self, input: std::option::Option<f64>) -> Self {
            self.x = input;
            self
        }
        /// Y coordinate.
        pub fn y(mut self, input: f64) -> Self {
            self.y = Some(input);
            self
        }
        /// Y coordinate.
        pub fn set_y(mut self, input: std::option::Option<f64>) -> Self {
            self.y = input;
            self
        }
        /// Z coordinate.
        pub fn z(mut self, input: f64) -> Self {
            self.z = Some(input);
            self
        }
        /// Z coordinate.
        pub fn set_z(mut self, input: std::option::Option<f64>) -> Self {
            self.z = input;
            self
        }
        /// Consumes the builder and constructs a [`CartesianCoordinates`](crate::model::CartesianCoordinates).
        pub fn build(self) -> crate::model::CartesianCoordinates {
            crate::model::CartesianCoordinates {
                x: self.x,
                y: self.y,
                z: self.z,
            }
        }
    }
}
impl CartesianCoordinates {
    /// Creates a new builder-style object to manufacture [`CartesianCoordinates`](crate::model::CartesianCoordinates).
    pub fn builder() -> crate::model::cartesian_coordinates::Builder {
        crate::model::cartesian_coordinates::Builder::default()
    }
}

/// Properties of the worker that are provided by the vendor FMS.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VendorProperties {
    /// The worker ID defined by the vendor FMS.
    #[doc(hidden)]
    pub vendor_worker_id: std::option::Option<std::string::String>,
    /// The worker IP address defined by the vendor FMS.
    #[doc(hidden)]
    pub vendor_worker_ip_address: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured vendor properties that are transient and may change during regular operation.
    #[doc(hidden)]
    pub vendor_additional_transient_properties: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation.
    #[doc(hidden)]
    pub vendor_additional_fixed_properties: std::option::Option<std::string::String>,
}
impl VendorProperties {
    /// The worker ID defined by the vendor FMS.
    pub fn vendor_worker_id(&self) -> std::option::Option<&str> {
        self.vendor_worker_id.as_deref()
    }
    /// The worker IP address defined by the vendor FMS.
    pub fn vendor_worker_ip_address(&self) -> std::option::Option<&str> {
        self.vendor_worker_ip_address.as_deref()
    }
    /// JSON blob containing unstructured vendor properties that are transient and may change during regular operation.
    pub fn vendor_additional_transient_properties(&self) -> std::option::Option<&str> {
        self.vendor_additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation.
    pub fn vendor_additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.vendor_additional_fixed_properties.as_deref()
    }
}
/// See [`VendorProperties`](crate::model::VendorProperties).
pub mod vendor_properties {

    /// A builder for [`VendorProperties`](crate::model::VendorProperties).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vendor_worker_id: std::option::Option<std::string::String>,
        pub(crate) vendor_worker_ip_address: std::option::Option<std::string::String>,
        pub(crate) vendor_additional_transient_properties: std::option::Option<std::string::String>,
        pub(crate) vendor_additional_fixed_properties: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// The worker ID defined by the vendor FMS.
        pub fn vendor_worker_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vendor_worker_id = Some(input.into());
            self
        }
        /// The worker ID defined by the vendor FMS.
        pub fn set_vendor_worker_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vendor_worker_id = input;
            self
        }
        /// The worker IP address defined by the vendor FMS.
        pub fn vendor_worker_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
            self.vendor_worker_ip_address = Some(input.into());
            self
        }
        /// The worker IP address defined by the vendor FMS.
        pub fn set_vendor_worker_ip_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vendor_worker_ip_address = input;
            self
        }
        /// JSON blob containing unstructured vendor properties that are transient and may change during regular operation.
        pub fn vendor_additional_transient_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.vendor_additional_transient_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured vendor properties that are transient and may change during regular operation.
        pub fn set_vendor_additional_transient_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vendor_additional_transient_properties = input;
            self
        }
        /// JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation.
        pub fn vendor_additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.vendor_additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation.
        pub fn set_vendor_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vendor_additional_fixed_properties = input;
            self
        }
        /// Consumes the builder and constructs a [`VendorProperties`](crate::model::VendorProperties).
        pub fn build(self) -> crate::model::VendorProperties {
            crate::model::VendorProperties {
                vendor_worker_id: self.vendor_worker_id,
                vendor_worker_ip_address: self.vendor_worker_ip_address,
                vendor_additional_transient_properties: self.vendor_additional_transient_properties,
                vendor_additional_fixed_properties: self.vendor_additional_fixed_properties,
            }
        }
    }
}
impl VendorProperties {
    /// Creates a new builder-style object to manufacture [`VendorProperties`](crate::model::VendorProperties).
    pub fn builder() -> crate::model::vendor_properties::Builder {
        crate::model::vendor_properties::Builder::default()
    }
}

/// Worker orientation measured in units clockwise from north.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum Orientation {
    /// Degrees, limited on [0, 360)
    Degrees(f64),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Orientation {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`Degrees`](crate::model::Orientation::Degrees), extracting the inner [`f64`](f64).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_degrees(&self) -> std::result::Result<&f64, &Self> {
        if let Orientation::Degrees(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Degrees`](crate::model::Orientation::Degrees).
    pub fn is_degrees(&self) -> bool {
        self.as_degrees().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

/// A unit capable of performing tasks.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Worker {
    /// Full ARN of the worker.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the workers identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    #[doc(hidden)]
    pub additional_transient_properties: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    /// Properties of the worker that are provided by the vendor FMS.
    #[doc(hidden)]
    pub vendor_properties: std::option::Option<crate::model::VendorProperties>,
    /// Supported coordinates for worker position.
    #[doc(hidden)]
    pub position: std::option::Option<crate::model::PositionCoordinates>,
    /// Worker orientation measured in units clockwise from north.
    #[doc(hidden)]
    pub orientation: std::option::Option<crate::model::Orientation>,
}
impl Worker {
    /// Full ARN of the worker.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> std::option::Option<&crate::model::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> std::option::Option<&crate::model::PositionCoordinates> {
        self.position.as_ref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> std::option::Option<&crate::model::Orientation> {
        self.orientation.as_ref()
    }
}
/// See [`Worker`](crate::model::Worker).
pub mod worker {

    /// A builder for [`Worker`](crate::model::Worker).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) fleet: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) additional_transient_properties: std::option::Option<std::string::String>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        pub(crate) vendor_properties: std::option::Option<crate::model::VendorProperties>,
        pub(crate) position: std::option::Option<crate::model::PositionCoordinates>,
        pub(crate) orientation: std::option::Option<crate::model::Orientation>,
    }
    impl Builder {
        /// Full ARN of the worker.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the workers identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the workers identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Full ARN of the worker fleet.
        pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn additional_transient_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn set_additional_transient_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn vendor_properties(mut self, input: crate::model::VendorProperties) -> Self {
            self.vendor_properties = Some(input);
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn set_vendor_properties(
            mut self,
            input: std::option::Option<crate::model::VendorProperties>,
        ) -> Self {
            self.vendor_properties = input;
            self
        }
        /// Supported coordinates for worker position.
        pub fn position(mut self, input: crate::model::PositionCoordinates) -> Self {
            self.position = Some(input);
            self
        }
        /// Supported coordinates for worker position.
        pub fn set_position(
            mut self,
            input: std::option::Option<crate::model::PositionCoordinates>,
        ) -> Self {
            self.position = input;
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn orientation(mut self, input: crate::model::Orientation) -> Self {
            self.orientation = Some(input);
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn set_orientation(
            mut self,
            input: std::option::Option<crate::model::Orientation>,
        ) -> Self {
            self.orientation = input;
            self
        }
        /// Consumes the builder and constructs a [`Worker`](crate::model::Worker).
        pub fn build(self) -> crate::model::Worker {
            crate::model::Worker {
                arn: self.arn,
                id: self.id,
                fleet: self.fleet,
                created_at: self.created_at,
                updated_at: self.updated_at,
                name: self.name,
                site: self.site,
                additional_transient_properties: self.additional_transient_properties,
                additional_fixed_properties: self.additional_fixed_properties,
                vendor_properties: self.vendor_properties,
                position: self.position,
                orientation: self.orientation,
            }
        }
    }
}
impl Worker {
    /// Creates a new builder-style object to manufacture [`Worker`](crate::model::Worker).
    pub fn builder() -> crate::model::worker::Builder {
        crate::model::worker::Builder::default()
    }
}
