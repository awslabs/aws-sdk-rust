// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// User does not have sufficient access to perform this action.
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// Exception thrown if a resource in a create request already exists.
    ConflictException(crate::types::error::ConflictException),
    /// Exception thrown if something goes wrong within the service.
    InternalServerException(crate::types::error::InternalServerException),
    /// Exception thrown if a resource referenced in the request doesn't exist.
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// Exception thrown if the user's AWS account has reached a service limit and the operation cannot proceed.
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// Exception thrown if the api has been called too quickly be the client.
    ThrottlingException(crate::types::error::ThrottlingException),
    /// Exception thrown if an invalid parameter is provided to an API.
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_destination::CreateDestinationError> for Error {
    fn from(err: crate::operation::create_destination::CreateDestinationError) -> Self {
        match err {
            crate::operation::create_destination::CreateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_destination::CreateDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_destination::CreateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_destination::CreateDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_destination::CreateDestinationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_destination::CreateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_destination::CreateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_destination::CreateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_site::CreateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_site::CreateSiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_site::CreateSiteError> for Error {
    fn from(err: crate::operation::create_site::CreateSiteError) -> Self {
        match err {
            crate::operation::create_site::CreateSiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_site::CreateSiteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_site::CreateSiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_site::CreateSiteError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_site::CreateSiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_site::CreateSiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_site::CreateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker::CreateWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker::CreateWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_worker::CreateWorkerError> for Error {
    fn from(err: crate::operation::create_worker::CreateWorkerError) -> Self {
        match err {
            crate::operation::create_worker::CreateWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_worker::CreateWorkerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_worker::CreateWorkerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_worker::CreateWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_worker::CreateWorkerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_worker::CreateWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_worker::CreateWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_worker::CreateWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker_fleet::CreateWorkerFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker_fleet::CreateWorkerFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_worker_fleet::CreateWorkerFleetError> for Error {
    fn from(err: crate::operation::create_worker_fleet::CreateWorkerFleetError) -> Self {
        match err {
            crate::operation::create_worker_fleet::CreateWorkerFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_worker_fleet::CreateWorkerFleetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_worker_fleet::CreateWorkerFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_worker_fleet::CreateWorkerFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_worker_fleet::CreateWorkerFleetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_worker_fleet::CreateWorkerFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_worker_fleet::CreateWorkerFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_worker_fleet::CreateWorkerFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_destination::DeleteDestinationError> for Error {
    fn from(err: crate::operation::delete_destination::DeleteDestinationError) -> Self {
        match err {
            crate::operation::delete_destination::DeleteDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_destination::DeleteDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_destination::DeleteDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_site::DeleteSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_site::DeleteSiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_site::DeleteSiteError> for Error {
    fn from(err: crate::operation::delete_site::DeleteSiteError) -> Self {
        match err {
            crate::operation::delete_site::DeleteSiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_site::DeleteSiteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_site::DeleteSiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_site::DeleteSiteError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_site::DeleteSiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_site::DeleteSiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_site::DeleteSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker::DeleteWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker::DeleteWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_worker::DeleteWorkerError> for Error {
    fn from(err: crate::operation::delete_worker::DeleteWorkerError) -> Self {
        match err {
            crate::operation::delete_worker::DeleteWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_worker::DeleteWorkerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_worker::DeleteWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker_fleet::DeleteWorkerFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker_fleet::DeleteWorkerFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_worker_fleet::DeleteWorkerFleetError> for Error {
    fn from(err: crate::operation::delete_worker_fleet::DeleteWorkerFleetError) -> Self {
        match err {
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_worker_fleet::DeleteWorkerFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_destination::GetDestinationError> for Error {
    fn from(err: crate::operation::get_destination::GetDestinationError) -> Self {
        match err {
            crate::operation::get_destination::GetDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_destination::GetDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_destination::GetDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_destination::GetDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_destination::GetDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_destination::GetDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_site::GetSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_site::GetSiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_site::GetSiteError> for Error {
    fn from(err: crate::operation::get_site::GetSiteError) -> Self {
        match err {
            crate::operation::get_site::GetSiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_site::GetSiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_site::GetSiteError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_site::GetSiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_site::GetSiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_site::GetSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker::GetWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker::GetWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_worker::GetWorkerError> for Error {
    fn from(err: crate::operation::get_worker::GetWorkerError) -> Self {
        match err {
            crate::operation::get_worker::GetWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_worker::GetWorkerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_worker::GetWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_worker::GetWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_worker::GetWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_worker::GetWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker_fleet::GetWorkerFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker_fleet::GetWorkerFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_worker_fleet::GetWorkerFleetError> for Error {
    fn from(err: crate::operation::get_worker_fleet::GetWorkerFleetError) -> Self {
        match err {
            crate::operation::get_worker_fleet::GetWorkerFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_worker_fleet::GetWorkerFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_worker_fleet::GetWorkerFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_worker_fleet::GetWorkerFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_worker_fleet::GetWorkerFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_worker_fleet::GetWorkerFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_destinations::ListDestinationsError> for Error {
    fn from(err: crate::operation::list_destinations::ListDestinationsError) -> Self {
        match err {
            crate::operation::list_destinations::ListDestinationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_destinations::ListDestinationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_destinations::ListDestinationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_destinations::ListDestinationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_destinations::ListDestinationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_destinations::ListDestinationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sites::ListSitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sites::ListSitesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sites::ListSitesError> for Error {
    fn from(err: crate::operation::list_sites::ListSitesError) -> Self {
        match err {
            crate::operation::list_sites::ListSitesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sites::ListSitesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sites::ListSitesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sites::ListSitesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sites::ListSitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_worker_fleets::ListWorkerFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_worker_fleets::ListWorkerFleetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_worker_fleets::ListWorkerFleetsError> for Error {
    fn from(err: crate::operation::list_worker_fleets::ListWorkerFleetsError) -> Self {
        match err {
            crate::operation::list_worker_fleets::ListWorkerFleetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_worker_fleets::ListWorkerFleetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_worker_fleets::ListWorkerFleetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_worker_fleets::ListWorkerFleetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_worker_fleets::ListWorkerFleetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_worker_fleets::ListWorkerFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workers::ListWorkersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workers::ListWorkersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workers::ListWorkersError> for Error {
    fn from(err: crate::operation::list_workers::ListWorkersError) -> Self {
        match err {
            crate::operation::list_workers::ListWorkersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workers::ListWorkersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workers::ListWorkersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_workers::ListWorkersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workers::ListWorkersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workers::ListWorkersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_destination::UpdateDestinationError> for Error {
    fn from(err: crate::operation::update_destination::UpdateDestinationError) -> Self {
        match err {
            crate::operation::update_destination::UpdateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_destination::UpdateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_destination::UpdateDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_destination::UpdateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_destination::UpdateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_destination::UpdateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_site::UpdateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_site::UpdateSiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_site::UpdateSiteError> for Error {
    fn from(err: crate::operation::update_site::UpdateSiteError) -> Self {
        match err {
            crate::operation::update_site::UpdateSiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_site::UpdateSiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_site::UpdateSiteError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_site::UpdateSiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_site::UpdateSiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_site::UpdateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker::UpdateWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker::UpdateWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_worker::UpdateWorkerError> for Error {
    fn from(err: crate::operation::update_worker::UpdateWorkerError) -> Self {
        match err {
            crate::operation::update_worker::UpdateWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_worker::UpdateWorkerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_worker::UpdateWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_worker::UpdateWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_worker::UpdateWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_worker::UpdateWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker_fleet::UpdateWorkerFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker_fleet::UpdateWorkerFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_worker_fleet::UpdateWorkerFleetError> for Error {
    fn from(err: crate::operation::update_worker_fleet::UpdateWorkerFleetError) -> Self {
        match err {
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_worker_fleet::UpdateWorkerFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
