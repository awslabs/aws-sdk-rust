// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkersInput {
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Maximum number of results to retrieve in a single ListWorkers call.
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
}
impl ListWorkersInput {
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Maximum number of results to retrieve in a single ListWorkers call.
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
}
impl ListWorkersInput {
    /// Creates a new builder-style object to manufacture [`ListWorkersInput`](crate::operation::list_workers::ListWorkersInput).
    pub fn builder() -> crate::operation::list_workers::builders::ListWorkersInputBuilder {
        crate::operation::list_workers::builders::ListWorkersInputBuilder::default()
    }
}

/// A builder for [`ListWorkersInput`](crate::operation::list_workers::ListWorkersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListWorkersInputBuilder {
    pub(crate) site: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) fleet: std::option::Option<std::string::String>,
}
impl ListWorkersInputBuilder {
    /// Site ARN.
    pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
        self.site = Some(input.into());
        self
    }
    /// Site ARN.
    pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.site = input;
        self
    }
    /// Maximum number of results to retrieve in a single ListWorkers call.
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// Maximum number of results to retrieve in a single ListWorkers call.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet = Some(input.into());
        self
    }
    /// Full ARN of the worker fleet.
    pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkersInput`](crate::operation::list_workers::ListWorkersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_workers::ListWorkersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_workers::ListWorkersInput {
            site: self.site,
            max_results: self.max_results,
            next_token: self.next_token,
            fleet: self.fleet,
        })
    }
}
