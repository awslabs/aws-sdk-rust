// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkerOutput {
    /// Full ARN of the worker.
    pub arn: ::std::string::String,
    /// Filters access by the workers identifier
    pub id: ::std::string::String,
    /// Full ARN of the worker fleet.
    pub fleet: ::std::string::String,
    /// Site ARN.
    pub site: ::std::string::String,
    /// Timestamp at which the resource was created.
    pub created_at: ::aws_smithy_types::DateTime,
    /// Timestamp at which the resource was last updated.
    pub updated_at: ::aws_smithy_types::DateTime,
    /// Human friendly name of the resource.
    pub name: ::std::string::String,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub additional_transient_properties: ::std::option::Option<::std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub additional_fixed_properties: ::std::option::Option<::std::string::String>,
    /// Properties of the worker that are provided by the vendor FMS.
    pub vendor_properties: ::std::option::Option<crate::types::VendorProperties>,
    /// Supported coordinates for worker position.
    pub position: ::std::option::Option<crate::types::PositionCoordinates>,
    /// Worker orientation measured in units clockwise from north.
    pub orientation: ::std::option::Option<crate::types::Orientation>,
    _request_id: Option<String>,
}
impl GetWorkerOutput {
    /// Full ARN of the worker.
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> &str {
        use std::ops::Deref;
        self.fleet.deref()
    }
    /// Site ARN.
    pub fn site(&self) -> &str {
        use std::ops::Deref;
        self.site.deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> ::std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> ::std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> ::std::option::Option<&crate::types::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> ::std::option::Option<&crate::types::PositionCoordinates> {
        self.position.as_ref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> ::std::option::Option<&crate::types::Orientation> {
        self.orientation.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkerOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkerOutput`](crate::operation::get_worker::GetWorkerOutput).
    pub fn builder() -> crate::operation::get_worker::builders::GetWorkerOutputBuilder {
        crate::operation::get_worker::builders::GetWorkerOutputBuilder::default()
    }
}

/// A builder for [`GetWorkerOutput`](crate::operation::get_worker::GetWorkerOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetWorkerOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet: ::std::option::Option<::std::string::String>,
    pub(crate) site: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) additional_transient_properties: ::std::option::Option<::std::string::String>,
    pub(crate) additional_fixed_properties: ::std::option::Option<::std::string::String>,
    pub(crate) vendor_properties: ::std::option::Option<crate::types::VendorProperties>,
    pub(crate) position: ::std::option::Option<crate::types::PositionCoordinates>,
    pub(crate) orientation: ::std::option::Option<crate::types::Orientation>,
    _request_id: Option<String>,
}
impl GetWorkerOutputBuilder {
    /// Full ARN of the worker.
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Full ARN of the worker.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Full ARN of the worker.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Filters access by the workers identifier
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// Filters access by the workers identifier
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Filters access by the workers identifier
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Full ARN of the worker fleet.
    /// This field is required.
    pub fn fleet(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet = ::std::option::Option::Some(input.into());
        self
    }
    /// Full ARN of the worker fleet.
    pub fn set_fleet(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// Full ARN of the worker fleet.
    pub fn get_fleet(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet
    }
    /// Site ARN.
    /// This field is required.
    pub fn site(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.site = ::std::option::Option::Some(input.into());
        self
    }
    /// Site ARN.
    pub fn set_site(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.site = input;
        self
    }
    /// Site ARN.
    pub fn get_site(&self) -> &::std::option::Option<::std::string::String> {
        &self.site
    }
    /// Timestamp at which the resource was created.
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// Timestamp at which the resource was created.
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// Timestamp at which the resource was created.
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Timestamp at which the resource was last updated.
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// Timestamp at which the resource was last updated.
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// Timestamp at which the resource was last updated.
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Human friendly name of the resource.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Human friendly name of the resource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Human friendly name of the resource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_transient_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn set_additional_transient_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_transient_properties = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn get_additional_transient_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_transient_properties
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_fixed_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn set_additional_fixed_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_fixed_properties = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn get_additional_fixed_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_fixed_properties
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(mut self, input: crate::types::VendorProperties) -> Self {
        self.vendor_properties = ::std::option::Option::Some(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn set_vendor_properties(mut self, input: ::std::option::Option<crate::types::VendorProperties>) -> Self {
        self.vendor_properties = input;
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn get_vendor_properties(&self) -> &::std::option::Option<crate::types::VendorProperties> {
        &self.vendor_properties
    }
    /// Supported coordinates for worker position.
    pub fn position(mut self, input: crate::types::PositionCoordinates) -> Self {
        self.position = ::std::option::Option::Some(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn set_position(mut self, input: ::std::option::Option<crate::types::PositionCoordinates>) -> Self {
        self.position = input;
        self
    }
    /// Supported coordinates for worker position.
    pub fn get_position(&self) -> &::std::option::Option<crate::types::PositionCoordinates> {
        &self.position
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(mut self, input: crate::types::Orientation) -> Self {
        self.orientation = ::std::option::Option::Some(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn set_orientation(mut self, input: ::std::option::Option<crate::types::Orientation>) -> Self {
        self.orientation = input;
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn get_orientation(&self) -> &::std::option::Option<crate::types::Orientation> {
        &self.orientation
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkerOutput`](crate::operation::get_worker::GetWorkerOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::arn)
    /// - [`id`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::id)
    /// - [`fleet`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::fleet)
    /// - [`site`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::site)
    /// - [`created_at`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::updated_at)
    /// - [`name`](crate::operation::get_worker::builders::GetWorkerOutputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_worker::GetWorkerOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_worker::GetWorkerOutput {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            fleet: self.fleet.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fleet",
                    "fleet was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            site: self.site.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "site",
                    "site was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetWorkerOutput",
                )
            })?,
            additional_transient_properties: self.additional_transient_properties,
            additional_fixed_properties: self.additional_fixed_properties,
            vendor_properties: self.vendor_properties,
            position: self.position,
            orientation: self.orientation,
            _request_id: self._request_id,
        })
    }
}
