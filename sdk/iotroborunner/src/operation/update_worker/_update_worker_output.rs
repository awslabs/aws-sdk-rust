// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkerOutput {
    /// Full ARN of the worker.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the workers identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    #[doc(hidden)]
    pub additional_transient_properties: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    /// Worker orientation measured in units clockwise from north.
    #[doc(hidden)]
    pub orientation: std::option::Option<crate::types::Orientation>,
    /// Properties of the worker that are provided by the vendor FMS.
    #[doc(hidden)]
    pub vendor_properties: std::option::Option<crate::types::VendorProperties>,
    /// Supported coordinates for worker position.
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::PositionCoordinates>,
    _request_id: Option<String>,
}
impl UpdateWorkerOutput {
    /// Full ARN of the worker.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> std::option::Option<&crate::types::Orientation> {
        self.orientation.as_ref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> std::option::Option<&crate::types::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> std::option::Option<&crate::types::PositionCoordinates> {
        self.position.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWorkerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerOutput`](crate::operation::update_worker::UpdateWorkerOutput).
    pub fn builder() -> crate::operation::update_worker::builders::UpdateWorkerOutputBuilder {
        crate::operation::update_worker::builders::UpdateWorkerOutputBuilder::default()
    }
}

/// A builder for [`UpdateWorkerOutput`](crate::operation::update_worker::UpdateWorkerOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkerOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) fleet: std::option::Option<std::string::String>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) additional_transient_properties: std::option::Option<std::string::String>,
    pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
    pub(crate) orientation: std::option::Option<crate::types::Orientation>,
    pub(crate) vendor_properties: std::option::Option<crate::types::VendorProperties>,
    pub(crate) position: std::option::Option<crate::types::PositionCoordinates>,
    _request_id: Option<String>,
}
impl UpdateWorkerOutputBuilder {
    /// Full ARN of the worker.
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// Full ARN of the worker.
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Filters access by the workers identifier
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// Filters access by the workers identifier
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet = Some(input.into());
        self
    }
    /// Full ARN of the worker fleet.
    pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// Timestamp at which the resource was last updated.
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Human friendly name of the resource.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// Human friendly name of the resource.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.additional_transient_properties = Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn set_additional_transient_properties(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_transient_properties = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_fixed_properties = Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn set_additional_fixed_properties(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_fixed_properties = input;
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(mut self, input: crate::types::Orientation) -> Self {
        self.orientation = Some(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn set_orientation(
        mut self,
        input: std::option::Option<crate::types::Orientation>,
    ) -> Self {
        self.orientation = input;
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(mut self, input: crate::types::VendorProperties) -> Self {
        self.vendor_properties = Some(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn set_vendor_properties(
        mut self,
        input: std::option::Option<crate::types::VendorProperties>,
    ) -> Self {
        self.vendor_properties = input;
        self
    }
    /// Supported coordinates for worker position.
    pub fn position(mut self, input: crate::types::PositionCoordinates) -> Self {
        self.position = Some(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn set_position(
        mut self,
        input: std::option::Option<crate::types::PositionCoordinates>,
    ) -> Self {
        self.position = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkerOutput`](crate::operation::update_worker::UpdateWorkerOutput).
    pub fn build(self) -> crate::operation::update_worker::UpdateWorkerOutput {
        crate::operation::update_worker::UpdateWorkerOutput {
            arn: self.arn,
            id: self.id,
            fleet: self.fleet,
            updated_at: self.updated_at,
            name: self.name,
            additional_transient_properties: self.additional_transient_properties,
            additional_fixed_properties: self.additional_fixed_properties,
            orientation: self.orientation,
            vendor_properties: self.vendor_properties,
            position: self.position,
            _request_id: self._request_id,
        }
    }
}
