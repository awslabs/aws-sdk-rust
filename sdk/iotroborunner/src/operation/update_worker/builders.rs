// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_worker::_update_worker_output::UpdateWorkerOutputBuilder;

pub use crate::operation::update_worker::_update_worker_input::UpdateWorkerInputBuilder;

/// Fluent builder constructing a request to `UpdateWorker`.
///
/// Grants permission to update a worker
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_worker::builders::UpdateWorkerInputBuilder,
}
impl UpdateWorkerFluentBuilder {
    /// Creates a new `UpdateWorker`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_worker::UpdateWorker,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_worker::UpdateWorkerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_worker::UpdateWorkerOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_worker::UpdateWorkerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Full ARN of the worker.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// Full ARN of the worker.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// Human friendly name of the resource.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// Human friendly name of the resource.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_transient_properties(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn set_additional_transient_properties(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_additional_transient_properties(input);
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.additional_fixed_properties(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn set_additional_fixed_properties(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_additional_fixed_properties(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(mut self, input: crate::types::VendorProperties) -> Self {
        self.inner = self.inner.vendor_properties(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn set_vendor_properties(
        mut self,
        input: std::option::Option<crate::types::VendorProperties>,
    ) -> Self {
        self.inner = self.inner.set_vendor_properties(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn position(mut self, input: crate::types::PositionCoordinates) -> Self {
        self.inner = self.inner.position(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn set_position(
        mut self,
        input: std::option::Option<crate::types::PositionCoordinates>,
    ) -> Self {
        self.inner = self.inner.set_position(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(mut self, input: crate::types::Orientation) -> Self {
        self.inner = self.inner.orientation(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn set_orientation(
        mut self,
        input: std::option::Option<crate::types::Orientation>,
    ) -> Self {
        self.inner = self.inner.set_orientation(input);
        self
    }
}
