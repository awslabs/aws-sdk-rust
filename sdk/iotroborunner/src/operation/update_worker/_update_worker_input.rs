// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkerInput {
    /// Full ARN of the worker.
    pub id: ::std::option::Option<::std::string::String>,
    /// Human friendly name of the resource.
    pub name: ::std::option::Option<::std::string::String>,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub additional_transient_properties: ::std::option::Option<::std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub additional_fixed_properties: ::std::option::Option<::std::string::String>,
    /// Properties of the worker that are provided by the vendor FMS.
    pub vendor_properties: ::std::option::Option<crate::types::VendorProperties>,
    /// Supported coordinates for worker position.
    pub position: ::std::option::Option<crate::types::PositionCoordinates>,
    /// Worker orientation measured in units clockwise from north.
    pub orientation: ::std::option::Option<crate::types::Orientation>,
}
impl UpdateWorkerInput {
    /// Full ARN of the worker.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> ::std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> ::std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> ::std::option::Option<&crate::types::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> ::std::option::Option<&crate::types::PositionCoordinates> {
        self.position.as_ref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> ::std::option::Option<&crate::types::Orientation> {
        self.orientation.as_ref()
    }
}
impl UpdateWorkerInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerInput`](crate::operation::update_worker::UpdateWorkerInput).
    pub fn builder() -> crate::operation::update_worker::builders::UpdateWorkerInputBuilder {
        crate::operation::update_worker::builders::UpdateWorkerInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkerInput`](crate::operation::update_worker::UpdateWorkerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWorkerInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) additional_transient_properties: ::std::option::Option<::std::string::String>,
    pub(crate) additional_fixed_properties: ::std::option::Option<::std::string::String>,
    pub(crate) vendor_properties: ::std::option::Option<crate::types::VendorProperties>,
    pub(crate) position: ::std::option::Option<crate::types::PositionCoordinates>,
    pub(crate) orientation: ::std::option::Option<crate::types::Orientation>,
}
impl UpdateWorkerInputBuilder {
    /// Full ARN of the worker.
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// Full ARN of the worker.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Full ARN of the worker.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Human friendly name of the resource.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Human friendly name of the resource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Human friendly name of the resource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_transient_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn set_additional_transient_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_transient_properties = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn get_additional_transient_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_transient_properties
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_fixed_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn set_additional_fixed_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_fixed_properties = input;
        self
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn get_additional_fixed_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_fixed_properties
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(mut self, input: crate::types::VendorProperties) -> Self {
        self.vendor_properties = ::std::option::Option::Some(input);
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn set_vendor_properties(mut self, input: ::std::option::Option<crate::types::VendorProperties>) -> Self {
        self.vendor_properties = input;
        self
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn get_vendor_properties(&self) -> &::std::option::Option<crate::types::VendorProperties> {
        &self.vendor_properties
    }
    /// Supported coordinates for worker position.
    pub fn position(mut self, input: crate::types::PositionCoordinates) -> Self {
        self.position = ::std::option::Option::Some(input);
        self
    }
    /// Supported coordinates for worker position.
    pub fn set_position(mut self, input: ::std::option::Option<crate::types::PositionCoordinates>) -> Self {
        self.position = input;
        self
    }
    /// Supported coordinates for worker position.
    pub fn get_position(&self) -> &::std::option::Option<crate::types::PositionCoordinates> {
        &self.position
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(mut self, input: crate::types::Orientation) -> Self {
        self.orientation = ::std::option::Option::Some(input);
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn set_orientation(mut self, input: ::std::option::Option<crate::types::Orientation>) -> Self {
        self.orientation = input;
        self
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn get_orientation(&self) -> &::std::option::Option<crate::types::Orientation> {
        &self.orientation
    }
    /// Consumes the builder and constructs a [`UpdateWorkerInput`](crate::operation::update_worker::UpdateWorkerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_worker::UpdateWorkerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_worker::UpdateWorkerInput {
            id: self.id,
            name: self.name,
            additional_transient_properties: self.additional_transient_properties,
            additional_fixed_properties: self.additional_fixed_properties,
            vendor_properties: self.vendor_properties,
            position: self.position,
            orientation: self.orientation,
        })
    }
}
