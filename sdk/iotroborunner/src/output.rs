// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSiteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSiteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
    pub fn builder() -> crate::output::delete_site_output::Builder {
        crate::output::delete_site_output::Builder::default()
    }
}

/// See [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
pub mod delete_site_output {

    /// A builder for [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
        pub fn build(self) -> crate::output::DeleteSiteOutput {
            crate::output::DeleteSiteOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSitesOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// List of facilities.
    #[doc(hidden)]
    pub sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
    _request_id: Option<String>,
}
impl ListSitesOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// List of facilities.
    pub fn sites(&self) -> std::option::Option<&[crate::model::Site]> {
        self.sites.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSitesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSitesOutput {
    /// Creates a new builder-style object to manufacture [`ListSitesOutput`](crate::output::ListSitesOutput).
    pub fn builder() -> crate::output::list_sites_output::Builder {
        crate::output::list_sites_output::Builder::default()
    }
}

/// See [`ListSitesOutput`](crate::output::ListSitesOutput).
pub mod list_sites_output {

    /// A builder for [`ListSitesOutput`](crate::output::ListSitesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `sites`.
        ///
        /// To override the contents of this collection use [`set_sites`](Self::set_sites).
        ///
        /// List of facilities.
        pub fn sites(mut self, input: crate::model::Site) -> Self {
            let mut v = self.sites.unwrap_or_default();
            v.push(input);
            self.sites = Some(v);
            self
        }
        /// List of facilities.
        pub fn set_sites(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Site>>,
        ) -> Self {
            self.sites = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSitesOutput`](crate::output::ListSitesOutput).
        pub fn build(self) -> crate::output::ListSitesOutput {
            crate::output::ListSitesOutput {
                next_token: self.next_token,
                sites: self.sites,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSiteOutput {
    /// Site ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the site's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateSiteOutput {
    /// Site ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the site's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSiteOutput {
    /// Creates a new builder-style object to manufacture [`CreateSiteOutput`](crate::output::CreateSiteOutput).
    pub fn builder() -> crate::output::create_site_output::Builder {
        crate::output::create_site_output::Builder::default()
    }
}

/// See [`CreateSiteOutput`](crate::output::CreateSiteOutput).
pub mod create_site_output {

    /// A builder for [`CreateSiteOutput`](crate::output::CreateSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Site ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the site's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the site's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSiteOutput`](crate::output::CreateSiteOutput).
        pub fn build(self) -> crate::output::CreateSiteOutput {
            crate::output::CreateSiteOutput {
                arn: self.arn,
                id: self.id,
                created_at: self.created_at,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSiteOutput {
    /// Site ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the site's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    #[doc(hidden)]
    pub country_code: std::option::Option<std::string::String>,
    /// A high-level description of the site.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateSiteOutput {
    /// Site ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the site's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    pub fn country_code(&self) -> std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// A high-level description of the site.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSiteOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
    pub fn builder() -> crate::output::update_site_output::Builder {
        crate::output::update_site_output::Builder::default()
    }
}

/// See [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
pub mod update_site_output {

    /// A builder for [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) country_code: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Site ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the site's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the site's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn country_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.country_code = Some(input.into());
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn set_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.country_code = input;
            self
        }
        /// A high-level description of the site.
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// A high-level description of the site.
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
        pub fn build(self) -> crate::output::UpdateSiteOutput {
            crate::output::UpdateSiteOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                country_code: self.country_code,
                description: self.description,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSiteOutput {
    /// Site ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the site's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    #[doc(hidden)]
    pub country_code: std::option::Option<std::string::String>,
    /// A high-level description of the site.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSiteOutput {
    /// Site ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the site's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
    pub fn country_code(&self) -> std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// A high-level description of the site.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSiteOutput {
    /// Creates a new builder-style object to manufacture [`GetSiteOutput`](crate::output::GetSiteOutput).
    pub fn builder() -> crate::output::get_site_output::Builder {
        crate::output::get_site_output::Builder::default()
    }
}

/// See [`GetSiteOutput`](crate::output::GetSiteOutput).
pub mod get_site_output {

    /// A builder for [`GetSiteOutput`](crate::output::GetSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) country_code: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Site ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the site's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the site's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn country_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.country_code = Some(input.into());
            self
        }
        /// A valid ISO 3166-1 alpha-2 code for the country in which the site resides. e.g., US.
        pub fn set_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.country_code = input;
            self
        }
        /// A high-level description of the site.
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// A high-level description of the site.
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSiteOutput`](crate::output::GetSiteOutput).
        pub fn build(self) -> crate::output::GetSiteOutput {
            crate::output::GetSiteOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                country_code: self.country_code,
                description: self.description,
                created_at: self.created_at,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkerFleetsOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// List of worker fleets.
    #[doc(hidden)]
    pub worker_fleets: std::option::Option<std::vec::Vec<crate::model::WorkerFleet>>,
    _request_id: Option<String>,
}
impl ListWorkerFleetsOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// List of worker fleets.
    pub fn worker_fleets(&self) -> std::option::Option<&[crate::model::WorkerFleet]> {
        self.worker_fleets.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkerFleetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkerFleetsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkerFleetsOutput`](crate::output::ListWorkerFleetsOutput).
    pub fn builder() -> crate::output::list_worker_fleets_output::Builder {
        crate::output::list_worker_fleets_output::Builder::default()
    }
}

/// See [`ListWorkerFleetsOutput`](crate::output::ListWorkerFleetsOutput).
pub mod list_worker_fleets_output {

    /// A builder for [`ListWorkerFleetsOutput`](crate::output::ListWorkerFleetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) worker_fleets: std::option::Option<std::vec::Vec<crate::model::WorkerFleet>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `worker_fleets`.
        ///
        /// To override the contents of this collection use [`set_worker_fleets`](Self::set_worker_fleets).
        ///
        /// List of worker fleets.
        pub fn worker_fleets(mut self, input: crate::model::WorkerFleet) -> Self {
            let mut v = self.worker_fleets.unwrap_or_default();
            v.push(input);
            self.worker_fleets = Some(v);
            self
        }
        /// List of worker fleets.
        pub fn set_worker_fleets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkerFleet>>,
        ) -> Self {
            self.worker_fleets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkerFleetsOutput`](crate::output::ListWorkerFleetsOutput).
        pub fn build(self) -> crate::output::ListWorkerFleetsOutput {
            crate::output::ListWorkerFleetsOutput {
                next_token: self.next_token,
                worker_fleets: self.worker_fleets,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkerFleetOutput {
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the worker fleet's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateWorkerFleetOutput {
    /// Full ARN of the worker fleet.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the worker fleet's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkerFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkerFleetOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkerFleetOutput`](crate::output::CreateWorkerFleetOutput).
    pub fn builder() -> crate::output::create_worker_fleet_output::Builder {
        crate::output::create_worker_fleet_output::Builder::default()
    }
}

/// See [`CreateWorkerFleetOutput`](crate::output::CreateWorkerFleetOutput).
pub mod create_worker_fleet_output {

    /// A builder for [`CreateWorkerFleetOutput`](crate::output::CreateWorkerFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Full ARN of the worker fleet.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkerFleetOutput`](crate::output::CreateWorkerFleetOutput).
        pub fn build(self) -> crate::output::CreateWorkerFleetOutput {
            crate::output::CreateWorkerFleetOutput {
                arn: self.arn,
                id: self.id,
                created_at: self.created_at,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDestinationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDestinationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput).
    pub fn builder() -> crate::output::delete_destination_output::Builder {
        crate::output::delete_destination_output::Builder::default()
    }
}

/// See [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput).
pub mod delete_destination_output {

    /// A builder for [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput).
        pub fn build(self) -> crate::output::DeleteDestinationOutput {
            crate::output::DeleteDestinationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDestinationsOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// List of destinations.
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::model::Destination>>,
    _request_id: Option<String>,
}
impl ListDestinationsOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// List of destinations.
    pub fn destinations(&self) -> std::option::Option<&[crate::model::Destination]> {
        self.destinations.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDestinationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDestinationsOutput {
    /// Creates a new builder-style object to manufacture [`ListDestinationsOutput`](crate::output::ListDestinationsOutput).
    pub fn builder() -> crate::output::list_destinations_output::Builder {
        crate::output::list_destinations_output::Builder::default()
    }
}

/// See [`ListDestinationsOutput`](crate::output::ListDestinationsOutput).
pub mod list_destinations_output {

    /// A builder for [`ListDestinationsOutput`](crate::output::ListDestinationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) destinations: std::option::Option<std::vec::Vec<crate::model::Destination>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `destinations`.
        ///
        /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
        ///
        /// List of destinations.
        pub fn destinations(mut self, input: crate::model::Destination) -> Self {
            let mut v = self.destinations.unwrap_or_default();
            v.push(input);
            self.destinations = Some(v);
            self
        }
        /// List of destinations.
        pub fn set_destinations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Destination>>,
        ) -> Self {
            self.destinations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListDestinationsOutput`](crate::output::ListDestinationsOutput).
        pub fn build(self) -> crate::output::ListDestinationsOutput {
            crate::output::ListDestinationsOutput {
                next_token: self.next_token,
                destinations: self.destinations,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDestinationOutput {
    /// Destination ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the destination's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// State of the destination.
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::DestinationState>,
    _request_id: Option<String>,
}
impl CreateDestinationOutput {
    /// Destination ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the destination's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// State of the destination.
    pub fn state(&self) -> std::option::Option<&crate::model::DestinationState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDestinationOutput {
    /// Creates a new builder-style object to manufacture [`CreateDestinationOutput`](crate::output::CreateDestinationOutput).
    pub fn builder() -> crate::output::create_destination_output::Builder {
        crate::output::create_destination_output::Builder::default()
    }
}

/// See [`CreateDestinationOutput`](crate::output::CreateDestinationOutput).
pub mod create_destination_output {

    /// A builder for [`CreateDestinationOutput`](crate::output::CreateDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::DestinationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Destination ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Destination ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the destination's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the destination's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// State of the destination.
        pub fn state(mut self, input: crate::model::DestinationState) -> Self {
            self.state = Some(input);
            self
        }
        /// State of the destination.
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::DestinationState>,
        ) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDestinationOutput`](crate::output::CreateDestinationOutput).
        pub fn build(self) -> crate::output::CreateDestinationOutput {
            crate::output::CreateDestinationOutput {
                arn: self.arn,
                id: self.id,
                created_at: self.created_at,
                updated_at: self.updated_at,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDestinationOutput {
    /// Destination ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the destination's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// State of the destination.
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::DestinationState>,
    /// JSON document containing additional fixed properties regarding the destination
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateDestinationOutput {
    /// Destination ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the destination's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// State of the destination.
    pub fn state(&self) -> std::option::Option<&crate::model::DestinationState> {
        self.state.as_ref()
    }
    /// JSON document containing additional fixed properties regarding the destination
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDestinationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput).
    pub fn builder() -> crate::output::update_destination_output::Builder {
        crate::output::update_destination_output::Builder::default()
    }
}

/// See [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput).
pub mod update_destination_output {

    /// A builder for [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::DestinationState>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Destination ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Destination ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the destination's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the destination's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// State of the destination.
        pub fn state(mut self, input: crate::model::DestinationState) -> Self {
            self.state = Some(input);
            self
        }
        /// State of the destination.
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::DestinationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput).
        pub fn build(self) -> crate::output::UpdateDestinationOutput {
            crate::output::UpdateDestinationOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                updated_at: self.updated_at,
                state: self.state,
                additional_fixed_properties: self.additional_fixed_properties,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDestinationOutput {
    /// Destination ARN.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the destination's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// State of the destination.
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::DestinationState>,
    /// JSON document containing additional fixed properties regarding the destination
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDestinationOutput {
    /// Destination ARN.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the destination's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// State of the destination.
    pub fn state(&self) -> std::option::Option<&crate::model::DestinationState> {
        self.state.as_ref()
    }
    /// JSON document containing additional fixed properties regarding the destination
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDestinationOutput {
    /// Creates a new builder-style object to manufacture [`GetDestinationOutput`](crate::output::GetDestinationOutput).
    pub fn builder() -> crate::output::get_destination_output::Builder {
        crate::output::get_destination_output::Builder::default()
    }
}

/// See [`GetDestinationOutput`](crate::output::GetDestinationOutput).
pub mod get_destination_output {

    /// A builder for [`GetDestinationOutput`](crate::output::GetDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::DestinationState>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Destination ARN.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Destination ARN.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the destination's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the destination's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// State of the destination.
        pub fn state(mut self, input: crate::model::DestinationState) -> Self {
            self.state = Some(input);
            self
        }
        /// State of the destination.
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::DestinationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON document containing additional fixed properties regarding the destination
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDestinationOutput`](crate::output::GetDestinationOutput).
        pub fn build(self) -> crate::output::GetDestinationOutput {
            crate::output::GetDestinationOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                site: self.site,
                created_at: self.created_at,
                updated_at: self.updated_at,
                state: self.state,
                additional_fixed_properties: self.additional_fixed_properties,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkerFleetOutput {
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the worker fleet's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// JSON blob containing additional fixed properties regarding the worker fleet
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateWorkerFleetOutput {
    /// Full ARN of the worker fleet.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the worker fleet's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// JSON blob containing additional fixed properties regarding the worker fleet
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkerFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWorkerFleetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerFleetOutput`](crate::output::UpdateWorkerFleetOutput).
    pub fn builder() -> crate::output::update_worker_fleet_output::Builder {
        crate::output::update_worker_fleet_output::Builder::default()
    }
}

/// See [`UpdateWorkerFleetOutput`](crate::output::UpdateWorkerFleetOutput).
pub mod update_worker_fleet_output {

    /// A builder for [`UpdateWorkerFleetOutput`](crate::output::UpdateWorkerFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Full ARN of the worker fleet.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkerFleetOutput`](crate::output::UpdateWorkerFleetOutput).
        pub fn build(self) -> crate::output::UpdateWorkerFleetOutput {
            crate::output::UpdateWorkerFleetOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                updated_at: self.updated_at,
                additional_fixed_properties: self.additional_fixed_properties,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkerOutput {
    /// Full ARN of the worker.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the workers identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    #[doc(hidden)]
    pub additional_transient_properties: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    /// Worker orientation measured in units clockwise from north.
    #[doc(hidden)]
    pub orientation: std::option::Option<crate::model::Orientation>,
    /// Properties of the worker that are provided by the vendor FMS.
    #[doc(hidden)]
    pub vendor_properties: std::option::Option<crate::model::VendorProperties>,
    /// Supported coordinates for worker position.
    #[doc(hidden)]
    pub position: std::option::Option<crate::model::PositionCoordinates>,
    _request_id: Option<String>,
}
impl UpdateWorkerOutput {
    /// Full ARN of the worker.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> std::option::Option<&crate::model::Orientation> {
        self.orientation.as_ref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> std::option::Option<&crate::model::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> std::option::Option<&crate::model::PositionCoordinates> {
        self.position.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateWorkerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkerOutput`](crate::output::UpdateWorkerOutput).
    pub fn builder() -> crate::output::update_worker_output::Builder {
        crate::output::update_worker_output::Builder::default()
    }
}

/// See [`UpdateWorkerOutput`](crate::output::UpdateWorkerOutput).
pub mod update_worker_output {

    /// A builder for [`UpdateWorkerOutput`](crate::output::UpdateWorkerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) fleet: std::option::Option<std::string::String>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) additional_transient_properties: std::option::Option<std::string::String>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        pub(crate) orientation: std::option::Option<crate::model::Orientation>,
        pub(crate) vendor_properties: std::option::Option<crate::model::VendorProperties>,
        pub(crate) position: std::option::Option<crate::model::PositionCoordinates>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Full ARN of the worker.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the workers identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the workers identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Full ARN of the worker fleet.
        pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn additional_transient_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn set_additional_transient_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn orientation(mut self, input: crate::model::Orientation) -> Self {
            self.orientation = Some(input);
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn set_orientation(
            mut self,
            input: std::option::Option<crate::model::Orientation>,
        ) -> Self {
            self.orientation = input;
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn vendor_properties(mut self, input: crate::model::VendorProperties) -> Self {
            self.vendor_properties = Some(input);
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn set_vendor_properties(
            mut self,
            input: std::option::Option<crate::model::VendorProperties>,
        ) -> Self {
            self.vendor_properties = input;
            self
        }
        /// Supported coordinates for worker position.
        pub fn position(mut self, input: crate::model::PositionCoordinates) -> Self {
            self.position = Some(input);
            self
        }
        /// Supported coordinates for worker position.
        pub fn set_position(
            mut self,
            input: std::option::Option<crate::model::PositionCoordinates>,
        ) -> Self {
            self.position = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkerOutput`](crate::output::UpdateWorkerOutput).
        pub fn build(self) -> crate::output::UpdateWorkerOutput {
            crate::output::UpdateWorkerOutput {
                arn: self.arn,
                id: self.id,
                fleet: self.fleet,
                updated_at: self.updated_at,
                name: self.name,
                additional_transient_properties: self.additional_transient_properties,
                additional_fixed_properties: self.additional_fixed_properties,
                orientation: self.orientation,
                vendor_properties: self.vendor_properties,
                position: self.position,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkersOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// List of workers.
    #[doc(hidden)]
    pub workers: std::option::Option<std::vec::Vec<crate::model::Worker>>,
    _request_id: Option<String>,
}
impl ListWorkersOutput {
    /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// List of workers.
    pub fn workers(&self) -> std::option::Option<&[crate::model::Worker]> {
        self.workers.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkersOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkersOutput`](crate::output::ListWorkersOutput).
    pub fn builder() -> crate::output::list_workers_output::Builder {
        crate::output::list_workers_output::Builder::default()
    }
}

/// See [`ListWorkersOutput`](crate::output::ListWorkersOutput).
pub mod list_workers_output {

    /// A builder for [`ListWorkersOutput`](crate::output::ListWorkersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) workers: std::option::Option<std::vec::Vec<crate::model::Worker>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `workers`.
        ///
        /// To override the contents of this collection use [`set_workers`](Self::set_workers).
        ///
        /// List of workers.
        pub fn workers(mut self, input: crate::model::Worker) -> Self {
            let mut v = self.workers.unwrap_or_default();
            v.push(input);
            self.workers = Some(v);
            self
        }
        /// List of workers.
        pub fn set_workers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Worker>>,
        ) -> Self {
            self.workers = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkersOutput`](crate::output::ListWorkersOutput).
        pub fn build(self) -> crate::output::ListWorkersOutput {
            crate::output::ListWorkersOutput {
                next_token: self.next_token,
                workers: self.workers,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkerFleetOutput {
    /// Filters access by the worker fleet's identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// JSON blob containing additional fixed properties regarding the worker fleet
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetWorkerFleetOutput {
    /// Filters access by the worker fleet's identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// JSON blob containing additional fixed properties regarding the worker fleet
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetWorkerFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkerFleetOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkerFleetOutput`](crate::output::GetWorkerFleetOutput).
    pub fn builder() -> crate::output::get_worker_fleet_output::Builder {
        crate::output::get_worker_fleet_output::Builder::default()
    }
}

/// See [`GetWorkerFleetOutput`](crate::output::GetWorkerFleetOutput).
pub mod get_worker_fleet_output {

    /// A builder for [`GetWorkerFleetOutput`](crate::output::GetWorkerFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Filters access by the worker fleet's identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the worker fleet's identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Full ARN of the worker fleet.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing additional fixed properties regarding the worker fleet
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkerFleetOutput`](crate::output::GetWorkerFleetOutput).
        pub fn build(self) -> crate::output::GetWorkerFleetOutput {
            crate::output::GetWorkerFleetOutput {
                id: self.id,
                arn: self.arn,
                name: self.name,
                site: self.site,
                created_at: self.created_at,
                updated_at: self.updated_at,
                additional_fixed_properties: self.additional_fixed_properties,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkerOutput {
    /// Full ARN of the worker.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the workers identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Full ARN of the worker fleet.
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Human friendly name of the resource.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    #[doc(hidden)]
    pub additional_transient_properties: std::option::Option<std::string::String>,
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    #[doc(hidden)]
    pub additional_fixed_properties: std::option::Option<std::string::String>,
    /// Properties of the worker that are provided by the vendor FMS.
    #[doc(hidden)]
    pub vendor_properties: std::option::Option<crate::model::VendorProperties>,
    /// Supported coordinates for worker position.
    #[doc(hidden)]
    pub position: std::option::Option<crate::model::PositionCoordinates>,
    /// Worker orientation measured in units clockwise from north.
    #[doc(hidden)]
    pub orientation: std::option::Option<crate::model::Orientation>,
    _request_id: Option<String>,
}
impl GetWorkerOutput {
    /// Full ARN of the worker.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Full ARN of the worker fleet.
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// Human friendly name of the resource.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
    pub fn additional_transient_properties(&self) -> std::option::Option<&str> {
        self.additional_transient_properties.as_deref()
    }
    /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
    pub fn additional_fixed_properties(&self) -> std::option::Option<&str> {
        self.additional_fixed_properties.as_deref()
    }
    /// Properties of the worker that are provided by the vendor FMS.
    pub fn vendor_properties(&self) -> std::option::Option<&crate::model::VendorProperties> {
        self.vendor_properties.as_ref()
    }
    /// Supported coordinates for worker position.
    pub fn position(&self) -> std::option::Option<&crate::model::PositionCoordinates> {
        self.position.as_ref()
    }
    /// Worker orientation measured in units clockwise from north.
    pub fn orientation(&self) -> std::option::Option<&crate::model::Orientation> {
        self.orientation.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkerOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkerOutput`](crate::output::GetWorkerOutput).
    pub fn builder() -> crate::output::get_worker_output::Builder {
        crate::output::get_worker_output::Builder::default()
    }
}

/// See [`GetWorkerOutput`](crate::output::GetWorkerOutput).
pub mod get_worker_output {

    /// A builder for [`GetWorkerOutput`](crate::output::GetWorkerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) fleet: std::option::Option<std::string::String>,
        pub(crate) site: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) additional_transient_properties: std::option::Option<std::string::String>,
        pub(crate) additional_fixed_properties: std::option::Option<std::string::String>,
        pub(crate) vendor_properties: std::option::Option<crate::model::VendorProperties>,
        pub(crate) position: std::option::Option<crate::model::PositionCoordinates>,
        pub(crate) orientation: std::option::Option<crate::model::Orientation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Full ARN of the worker.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the workers identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the workers identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Full ARN of the worker fleet.
        pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet = Some(input.into());
            self
        }
        /// Full ARN of the worker fleet.
        pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// Human friendly name of the resource.
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Human friendly name of the resource.
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn additional_transient_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are transient and may change during regular operation.
        pub fn set_additional_transient_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_transient_properties = input;
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn additional_fixed_properties(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = Some(input.into());
            self
        }
        /// JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
        pub fn set_additional_fixed_properties(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.additional_fixed_properties = input;
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn vendor_properties(mut self, input: crate::model::VendorProperties) -> Self {
            self.vendor_properties = Some(input);
            self
        }
        /// Properties of the worker that are provided by the vendor FMS.
        pub fn set_vendor_properties(
            mut self,
            input: std::option::Option<crate::model::VendorProperties>,
        ) -> Self {
            self.vendor_properties = input;
            self
        }
        /// Supported coordinates for worker position.
        pub fn position(mut self, input: crate::model::PositionCoordinates) -> Self {
            self.position = Some(input);
            self
        }
        /// Supported coordinates for worker position.
        pub fn set_position(
            mut self,
            input: std::option::Option<crate::model::PositionCoordinates>,
        ) -> Self {
            self.position = input;
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn orientation(mut self, input: crate::model::Orientation) -> Self {
            self.orientation = Some(input);
            self
        }
        /// Worker orientation measured in units clockwise from north.
        pub fn set_orientation(
            mut self,
            input: std::option::Option<crate::model::Orientation>,
        ) -> Self {
            self.orientation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkerOutput`](crate::output::GetWorkerOutput).
        pub fn build(self) -> crate::output::GetWorkerOutput {
            crate::output::GetWorkerOutput {
                arn: self.arn,
                id: self.id,
                fleet: self.fleet,
                site: self.site,
                created_at: self.created_at,
                updated_at: self.updated_at,
                name: self.name,
                additional_transient_properties: self.additional_transient_properties,
                additional_fixed_properties: self.additional_fixed_properties,
                vendor_properties: self.vendor_properties,
                position: self.position,
                orientation: self.orientation,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkerFleetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkerFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteWorkerFleetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkerFleetOutput`](crate::output::DeleteWorkerFleetOutput).
    pub fn builder() -> crate::output::delete_worker_fleet_output::Builder {
        crate::output::delete_worker_fleet_output::Builder::default()
    }
}

/// See [`DeleteWorkerFleetOutput`](crate::output::DeleteWorkerFleetOutput).
pub mod delete_worker_fleet_output {

    /// A builder for [`DeleteWorkerFleetOutput`](crate::output::DeleteWorkerFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkerFleetOutput`](crate::output::DeleteWorkerFleetOutput).
        pub fn build(self) -> crate::output::DeleteWorkerFleetOutput {
            crate::output::DeleteWorkerFleetOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteWorkerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkerOutput`](crate::output::DeleteWorkerOutput).
    pub fn builder() -> crate::output::delete_worker_output::Builder {
        crate::output::delete_worker_output::Builder::default()
    }
}

/// See [`DeleteWorkerOutput`](crate::output::DeleteWorkerOutput).
pub mod delete_worker_output {

    /// A builder for [`DeleteWorkerOutput`](crate::output::DeleteWorkerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkerOutput`](crate::output::DeleteWorkerOutput).
        pub fn build(self) -> crate::output::DeleteWorkerOutput {
            crate::output::DeleteWorkerOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkerOutput {
    /// Full ARN of the worker.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// Filters access by the workers identifier
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Timestamp at which the resource was created.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Timestamp at which the resource was last updated.
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// Site ARN.
    #[doc(hidden)]
    pub site: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkerOutput {
    /// Full ARN of the worker.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Filters access by the workers identifier
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Timestamp at which the resource was created.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// Timestamp at which the resource was last updated.
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// Site ARN.
    pub fn site(&self) -> std::option::Option<&str> {
        self.site.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkerOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkerOutput`](crate::output::CreateWorkerOutput).
    pub fn builder() -> crate::output::create_worker_output::Builder {
        crate::output::create_worker_output::Builder::default()
    }
}

/// See [`CreateWorkerOutput`](crate::output::CreateWorkerOutput).
pub mod create_worker_output {

    /// A builder for [`CreateWorkerOutput`](crate::output::CreateWorkerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) site: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Full ARN of the worker.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// Full ARN of the worker.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Filters access by the workers identifier
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Filters access by the workers identifier
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Timestamp at which the resource was created.
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// Timestamp at which the resource was created.
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// Timestamp at which the resource was last updated.
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        /// Site ARN.
        pub fn site(mut self, input: impl Into<std::string::String>) -> Self {
            self.site = Some(input.into());
            self
        }
        /// Site ARN.
        pub fn set_site(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkerOutput`](crate::output::CreateWorkerOutput).
        pub fn build(self) -> crate::output::CreateWorkerOutput {
            crate::output::CreateWorkerOutput {
                arn: self.arn,
                id: self.id,
                created_at: self.created_at,
                updated_at: self.updated_at,
                site: self.site,
                _request_id: self._request_id,
            }
        }
    }
}
