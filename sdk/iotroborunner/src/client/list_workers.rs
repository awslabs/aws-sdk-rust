// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListWorkers`](crate::client::fluent_builders::ListWorkers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`site(impl Into<String>)`](crate::client::fluent_builders::ListWorkers::site) / [`set_site(Option<String>)`](crate::client::fluent_builders::ListWorkers::set_site): Site ARN.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListWorkers::set_max_results): Maximum number of results to retrieve in a single ListWorkers call.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkers::set_next_token): Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    ///   - [`fleet(impl Into<String>)`](crate::client::fluent_builders::ListWorkers::fleet) / [`set_fleet(Option<String>)`](crate::client::fluent_builders::ListWorkers::set_fleet): Full ARN of the worker fleet.
    /// - On success, responds with [`ListWorkersOutput`](crate::output::ListWorkersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkersOutput::next_token): Pagination token returned when another page of data exists. Provide it in your next call to the API to receive the next page.
    ///   - [`workers(Option<Vec<Worker>>)`](crate::output::ListWorkersOutput::workers): List of workers.
    /// - On failure, responds with [`SdkError<ListWorkersError>`](crate::error::ListWorkersError)
    pub fn list_workers(&self) -> crate::client::fluent_builders::ListWorkers {
        crate::client::fluent_builders::ListWorkers::new(self.handle.clone())
    }
}
