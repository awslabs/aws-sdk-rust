// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Cartesian coordinates in 3D space relative to the RoboRunner origin.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CartesianCoordinates {
    /// X coordinate.
    pub x: f64,
    /// Y coordinate.
    pub y: f64,
    /// Z coordinate.
    pub z: ::std::option::Option<f64>,
}
impl CartesianCoordinates {
    /// X coordinate.
    pub fn x(&self) -> f64 {
        self.x
    }
    /// Y coordinate.
    pub fn y(&self) -> f64 {
        self.y
    }
    /// Z coordinate.
    pub fn z(&self) -> ::std::option::Option<f64> {
        self.z
    }
}
impl CartesianCoordinates {
    /// Creates a new builder-style object to manufacture [`CartesianCoordinates`](crate::types::CartesianCoordinates).
    pub fn builder() -> crate::types::builders::CartesianCoordinatesBuilder {
        crate::types::builders::CartesianCoordinatesBuilder::default()
    }
}

/// A builder for [`CartesianCoordinates`](crate::types::CartesianCoordinates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CartesianCoordinatesBuilder {
    pub(crate) x: ::std::option::Option<f64>,
    pub(crate) y: ::std::option::Option<f64>,
    pub(crate) z: ::std::option::Option<f64>,
}
impl CartesianCoordinatesBuilder {
    /// X coordinate.
    /// This field is required.
    pub fn x(mut self, input: f64) -> Self {
        self.x = ::std::option::Option::Some(input);
        self
    }
    /// X coordinate.
    pub fn set_x(mut self, input: ::std::option::Option<f64>) -> Self {
        self.x = input;
        self
    }
    /// X coordinate.
    pub fn get_x(&self) -> &::std::option::Option<f64> {
        &self.x
    }
    /// Y coordinate.
    /// This field is required.
    pub fn y(mut self, input: f64) -> Self {
        self.y = ::std::option::Option::Some(input);
        self
    }
    /// Y coordinate.
    pub fn set_y(mut self, input: ::std::option::Option<f64>) -> Self {
        self.y = input;
        self
    }
    /// Y coordinate.
    pub fn get_y(&self) -> &::std::option::Option<f64> {
        &self.y
    }
    /// Z coordinate.
    pub fn z(mut self, input: f64) -> Self {
        self.z = ::std::option::Option::Some(input);
        self
    }
    /// Z coordinate.
    pub fn set_z(mut self, input: ::std::option::Option<f64>) -> Self {
        self.z = input;
        self
    }
    /// Z coordinate.
    pub fn get_z(&self) -> &::std::option::Option<f64> {
        &self.z
    }
    /// Consumes the builder and constructs a [`CartesianCoordinates`](crate::types::CartesianCoordinates).
    /// This method will fail if any of the following fields are not set:
    /// - [`x`](crate::types::builders::CartesianCoordinatesBuilder::x)
    /// - [`y`](crate::types::builders::CartesianCoordinatesBuilder::y)
    pub fn build(self) -> ::std::result::Result<crate::types::CartesianCoordinates, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CartesianCoordinates {
            x: self.x.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "x",
                    "x was not specified but it is required when building CartesianCoordinates",
                )
            })?,
            y: self.y.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "y",
                    "y was not specified but it is required when building CartesianCoordinates",
                )
            })?,
            z: self.z,
        })
    }
}
