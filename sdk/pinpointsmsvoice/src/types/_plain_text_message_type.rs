// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An object that defines a message that contains unformatted text.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PlainTextMessageType {
    /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
    /// The plain (not SSML-formatted) text to deliver to the recipient.
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
    #[doc(hidden)]
    pub voice_id: std::option::Option<std::string::String>,
}
impl PlainTextMessageType {
    /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// The plain (not SSML-formatted) text to deliver to the recipient.
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
    pub fn voice_id(&self) -> std::option::Option<&str> {
        self.voice_id.as_deref()
    }
}
impl PlainTextMessageType {
    /// Creates a new builder-style object to manufacture [`PlainTextMessageType`](crate::types::PlainTextMessageType).
    pub fn builder() -> crate::types::builders::PlainTextMessageTypeBuilder {
        crate::types::builders::PlainTextMessageTypeBuilder::default()
    }
}

/// A builder for [`PlainTextMessageType`](crate::types::PlainTextMessageType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PlainTextMessageTypeBuilder {
    pub(crate) language_code: std::option::Option<std::string::String>,
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) voice_id: std::option::Option<std::string::String>,
}
impl PlainTextMessageTypeBuilder {
    /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// The language to use when delivering the message. For a complete list of supported languages, see the Amazon Polly Developer Guide.
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// The plain (not SSML-formatted) text to deliver to the recipient.
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// The plain (not SSML-formatted) text to deliver to the recipient.
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
    pub fn voice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.voice_id = Some(input.into());
        self
    }
    /// The name of the voice that you want to use to deliver the message. For a complete list of supported voices, see the Amazon Polly Developer Guide.
    pub fn set_voice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.voice_id = input;
        self
    }
    /// Consumes the builder and constructs a [`PlainTextMessageType`](crate::types::PlainTextMessageType).
    pub fn build(self) -> crate::types::PlainTextMessageType {
        crate::types::PlainTextMessageType {
            language_code: self.language_code,
            text: self.text,
            voice_id: self.voice_id,
        }
    }
}
