// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An object that contains information about an event destination.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConfigurationSetEventDestinationsOutput {
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    pub event_destinations: ::std::option::Option<::std::vec::Vec<crate::types::EventDestination>>,
    _request_id: Option<String>,
}
impl GetConfigurationSetEventDestinationsOutput {
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_destinations.is_none()`.
    pub fn event_destinations(&self) -> &[crate::types::EventDestination] {
        self.event_destinations.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetConfigurationSetEventDestinationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfigurationSetEventDestinationsOutput {
    /// Creates a new builder-style object to manufacture [`GetConfigurationSetEventDestinationsOutput`](crate::operation::get_configuration_set_event_destinations::GetConfigurationSetEventDestinationsOutput).
    pub fn builder() -> crate::operation::get_configuration_set_event_destinations::builders::GetConfigurationSetEventDestinationsOutputBuilder {
        crate::operation::get_configuration_set_event_destinations::builders::GetConfigurationSetEventDestinationsOutputBuilder::default()
    }
}

/// A builder for [`GetConfigurationSetEventDestinationsOutput`](crate::operation::get_configuration_set_event_destinations::GetConfigurationSetEventDestinationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetConfigurationSetEventDestinationsOutputBuilder {
    pub(crate) event_destinations: ::std::option::Option<::std::vec::Vec<crate::types::EventDestination>>,
    _request_id: Option<String>,
}
impl GetConfigurationSetEventDestinationsOutputBuilder {
    /// Appends an item to `event_destinations`.
    ///
    /// To override the contents of this collection use [`set_event_destinations`](Self::set_event_destinations).
    ///
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    pub fn event_destinations(mut self, input: crate::types::EventDestination) -> Self {
        let mut v = self.event_destinations.unwrap_or_default();
        v.push(input);
        self.event_destinations = ::std::option::Option::Some(v);
        self
    }
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    pub fn set_event_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventDestination>>) -> Self {
        self.event_destinations = input;
        self
    }
    /// An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.
    pub fn get_event_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventDestination>> {
        &self.event_destinations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConfigurationSetEventDestinationsOutput`](crate::operation::get_configuration_set_event_destinations::GetConfigurationSetEventDestinationsOutput).
    pub fn build(self) -> crate::operation::get_configuration_set_event_destinations::GetConfigurationSetEventDestinationsOutput {
        crate::operation::get_configuration_set_event_destinations::GetConfigurationSetEventDestinationsOutput {
            event_destinations: self.event_destinations,
            _request_id: self._request_id,
        }
    }
}
