// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_event_destination_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EventDestinationDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cloud_watch_logs_destination {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CloudWatchLogsDestination").start_object();
        crate::protocol_serde::shape_cloud_watch_logs_destination::ser_cloud_watch_logs_destination(&mut object_2, var_1)?;
        object_2.finish();
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_3) = &input.kinesis_firehose_destination {
        #[allow(unused_mut)]
        let mut object_4 = object.key("KinesisFirehoseDestination").start_object();
        crate::protocol_serde::shape_kinesis_firehose_destination::ser_kinesis_firehose_destination(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.matching_event_types {
        let mut array_6 = object.key("MatchingEventTypes").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.sns_destination {
        #[allow(unused_mut)]
        let mut object_9 = object.key("SnsDestination").start_object();
        crate::protocol_serde::shape_sns_destination::ser_sns_destination(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
