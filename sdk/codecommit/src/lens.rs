// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_merge_conflicts_output_next_token(
    input: &crate::output::DescribeMergeConflictsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_pull_request_events_output_next_token(
    input: &crate::output::DescribePullRequestEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_comment_reactions_output_next_token(
    input: &crate::output::GetCommentReactionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_comments_for_compared_commit_output_next_token(
    input: &crate::output::GetCommentsForComparedCommitOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_comments_for_pull_request_output_next_token(
    input: &crate::output::GetCommentsForPullRequestOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_differences_output_next_token(
    input: &crate::output::GetDifferencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_merge_conflicts_output_next_token(
    input: &crate::output::GetMergeConflictsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_approval_rule_templates_output_next_token(
    input: &crate::output::ListApprovalRuleTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_associated_approval_rule_templates_for_repository_output_next_token(
    input: &crate::output::ListAssociatedApprovalRuleTemplatesForRepositoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_branches_output_next_token(
    input: &crate::output::ListBranchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_pull_requests_output_next_token(
    input: &crate::output::ListPullRequestsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_repositories_output_next_token(
    input: &crate::output::ListRepositoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_repositories_for_approval_rule_template_output_next_token(
    input: &crate::output::ListRepositoriesForApprovalRuleTemplateOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_branches_output_branches(
    input: crate::output::ListBranchesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.branches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_repositories_output_repositories(
    input: crate::output::ListRepositoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RepositoryNameIdPair>> {
    let input = match input.repositories {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
