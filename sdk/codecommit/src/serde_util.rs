// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_associate_approval_rule_template_with_repositories_output_correct_errors(mut builder: crate::operation::batch_associate_approval_rule_template_with_repositories::builders::BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder) -> crate::operation::batch_associate_approval_rule_template_with_repositories::builders::BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder{
    if builder.associated_repository_names.is_none() {
        builder.associated_repository_names = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_describe_merge_conflicts_output_correct_errors(
    mut builder: crate::operation::batch_describe_merge_conflicts::builders::BatchDescribeMergeConflictsOutputBuilder,
) -> crate::operation::batch_describe_merge_conflicts::builders::BatchDescribeMergeConflictsOutputBuilder {
    if builder.conflicts.is_none() {
        builder.conflicts = Some(Default::default())
    }
    if builder.destination_commit_id.is_none() {
        builder.destination_commit_id = Some(Default::default())
    }
    if builder.source_commit_id.is_none() {
        builder.source_commit_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_disassociate_approval_rule_template_from_repositories_output_correct_errors(mut builder: crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder) -> crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder{
    if builder.disassociated_repository_names.is_none() {
        builder.disassociated_repository_names = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn create_approval_rule_template_output_correct_errors(
    mut builder: crate::operation::create_approval_rule_template::builders::CreateApprovalRuleTemplateOutputBuilder,
) -> crate::operation::create_approval_rule_template::builders::CreateApprovalRuleTemplateOutputBuilder {
    if builder.approval_rule_template.is_none() {
        builder.approval_rule_template = {
            let builder = crate::types::builders::ApprovalRuleTemplateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_pull_request_output_correct_errors(
    mut builder: crate::operation::create_pull_request::builders::CreatePullRequestOutputBuilder,
) -> crate::operation::create_pull_request::builders::CreatePullRequestOutputBuilder {
    if builder.pull_request.is_none() {
        builder.pull_request = {
            let builder = crate::types::builders::PullRequestBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_pull_request_approval_rule_output_correct_errors(
    mut builder: crate::operation::create_pull_request_approval_rule::builders::CreatePullRequestApprovalRuleOutputBuilder,
) -> crate::operation::create_pull_request_approval_rule::builders::CreatePullRequestApprovalRuleOutputBuilder {
    if builder.approval_rule.is_none() {
        builder.approval_rule = {
            let builder = crate::types::builders::ApprovalRuleBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_approval_rule_template_output_correct_errors(
    mut builder: crate::operation::delete_approval_rule_template::builders::DeleteApprovalRuleTemplateOutputBuilder,
) -> crate::operation::delete_approval_rule_template::builders::DeleteApprovalRuleTemplateOutputBuilder {
    if builder.approval_rule_template_id.is_none() {
        builder.approval_rule_template_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_file_output_correct_errors(
    mut builder: crate::operation::delete_file::builders::DeleteFileOutputBuilder,
) -> crate::operation::delete_file::builders::DeleteFileOutputBuilder {
    if builder.commit_id.is_none() {
        builder.commit_id = Some(Default::default())
    }
    if builder.blob_id.is_none() {
        builder.blob_id = Some(Default::default())
    }
    if builder.tree_id.is_none() {
        builder.tree_id = Some(Default::default())
    }
    if builder.file_path.is_none() {
        builder.file_path = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_pull_request_approval_rule_output_correct_errors(
    mut builder: crate::operation::delete_pull_request_approval_rule::builders::DeletePullRequestApprovalRuleOutputBuilder,
) -> crate::operation::delete_pull_request_approval_rule::builders::DeletePullRequestApprovalRuleOutputBuilder {
    if builder.approval_rule_id.is_none() {
        builder.approval_rule_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_merge_conflicts_output_correct_errors(
    mut builder: crate::operation::describe_merge_conflicts::builders::DescribeMergeConflictsOutputBuilder,
) -> crate::operation::describe_merge_conflicts::builders::DescribeMergeConflictsOutputBuilder {
    if builder.conflict_metadata.is_none() {
        builder.conflict_metadata = {
            let builder = crate::types::builders::ConflictMetadataBuilder::default();
            Some(builder.build())
        }
    }
    if builder.merge_hunks.is_none() {
        builder.merge_hunks = Some(Default::default())
    }
    if builder.destination_commit_id.is_none() {
        builder.destination_commit_id = Some(Default::default())
    }
    if builder.source_commit_id.is_none() {
        builder.source_commit_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_pull_request_events_output_correct_errors(
    mut builder: crate::operation::describe_pull_request_events::builders::DescribePullRequestEventsOutputBuilder,
) -> crate::operation::describe_pull_request_events::builders::DescribePullRequestEventsOutputBuilder {
    if builder.pull_request_events.is_none() {
        builder.pull_request_events = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluate_pull_request_approval_rules_output_correct_errors(
    mut builder: crate::operation::evaluate_pull_request_approval_rules::builders::EvaluatePullRequestApprovalRulesOutputBuilder,
) -> crate::operation::evaluate_pull_request_approval_rules::builders::EvaluatePullRequestApprovalRulesOutputBuilder {
    if builder.evaluation.is_none() {
        builder.evaluation = {
            let builder = crate::types::builders::EvaluationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_approval_rule_template_output_correct_errors(
    mut builder: crate::operation::get_approval_rule_template::builders::GetApprovalRuleTemplateOutputBuilder,
) -> crate::operation::get_approval_rule_template::builders::GetApprovalRuleTemplateOutputBuilder {
    if builder.approval_rule_template.is_none() {
        builder.approval_rule_template = {
            let builder = crate::types::builders::ApprovalRuleTemplateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_blob_output_correct_errors(
    mut builder: crate::operation::get_blob::builders::GetBlobOutputBuilder,
) -> crate::operation::get_blob::builders::GetBlobOutputBuilder {
    if builder.content.is_none() {
        builder.content = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn get_comment_reactions_output_correct_errors(
    mut builder: crate::operation::get_comment_reactions::builders::GetCommentReactionsOutputBuilder,
) -> crate::operation::get_comment_reactions::builders::GetCommentReactionsOutputBuilder {
    if builder.reactions_for_comment.is_none() {
        builder.reactions_for_comment = Some(Default::default())
    }
    builder
}

pub(crate) fn get_commit_output_correct_errors(
    mut builder: crate::operation::get_commit::builders::GetCommitOutputBuilder,
) -> crate::operation::get_commit::builders::GetCommitOutputBuilder {
    if builder.commit.is_none() {
        builder.commit = {
            let builder = crate::types::builders::CommitBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_file_output_correct_errors(
    mut builder: crate::operation::get_file::builders::GetFileOutputBuilder,
) -> crate::operation::get_file::builders::GetFileOutputBuilder {
    if builder.commit_id.is_none() {
        builder.commit_id = Some(Default::default())
    }
    if builder.blob_id.is_none() {
        builder.blob_id = Some(Default::default())
    }
    if builder.file_path.is_none() {
        builder.file_path = Some(Default::default())
    }
    if builder.file_mode.is_none() {
        builder.file_mode = "no value was set".parse::<crate::types::FileModeTypeEnum>().ok()
    }
    if builder.file_size.is_none() {
        builder.file_size = Some(Default::default())
    }
    if builder.file_content.is_none() {
        builder.file_content = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn get_folder_output_correct_errors(
    mut builder: crate::operation::get_folder::builders::GetFolderOutputBuilder,
) -> crate::operation::get_folder::builders::GetFolderOutputBuilder {
    if builder.commit_id.is_none() {
        builder.commit_id = Some(Default::default())
    }
    if builder.folder_path.is_none() {
        builder.folder_path = Some(Default::default())
    }
    builder
}

pub(crate) fn get_merge_conflicts_output_correct_errors(
    mut builder: crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder,
) -> crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder {
    if builder.mergeable.is_none() {
        builder.mergeable = Some(Default::default())
    }
    if builder.destination_commit_id.is_none() {
        builder.destination_commit_id = Some(Default::default())
    }
    if builder.source_commit_id.is_none() {
        builder.source_commit_id = Some(Default::default())
    }
    if builder.conflict_metadata_list.is_none() {
        builder.conflict_metadata_list = Some(Default::default())
    }
    builder
}

pub(crate) fn get_merge_options_output_correct_errors(
    mut builder: crate::operation::get_merge_options::builders::GetMergeOptionsOutputBuilder,
) -> crate::operation::get_merge_options::builders::GetMergeOptionsOutputBuilder {
    if builder.merge_options.is_none() {
        builder.merge_options = Some(Default::default())
    }
    if builder.source_commit_id.is_none() {
        builder.source_commit_id = Some(Default::default())
    }
    if builder.destination_commit_id.is_none() {
        builder.destination_commit_id = Some(Default::default())
    }
    if builder.base_commit_id.is_none() {
        builder.base_commit_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_pull_request_output_correct_errors(
    mut builder: crate::operation::get_pull_request::builders::GetPullRequestOutputBuilder,
) -> crate::operation::get_pull_request::builders::GetPullRequestOutputBuilder {
    if builder.pull_request.is_none() {
        builder.pull_request = {
            let builder = crate::types::builders::PullRequestBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn list_file_commit_history_output_correct_errors(
    mut builder: crate::operation::list_file_commit_history::builders::ListFileCommitHistoryOutputBuilder,
) -> crate::operation::list_file_commit_history::builders::ListFileCommitHistoryOutputBuilder {
    if builder.revision_dag.is_none() {
        builder.revision_dag = Some(Default::default())
    }
    builder
}

pub(crate) fn list_pull_requests_output_correct_errors(
    mut builder: crate::operation::list_pull_requests::builders::ListPullRequestsOutputBuilder,
) -> crate::operation::list_pull_requests::builders::ListPullRequestsOutputBuilder {
    if builder.pull_request_ids.is_none() {
        builder.pull_request_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn put_file_output_correct_errors(
    mut builder: crate::operation::put_file::builders::PutFileOutputBuilder,
) -> crate::operation::put_file::builders::PutFileOutputBuilder {
    if builder.commit_id.is_none() {
        builder.commit_id = Some(Default::default())
    }
    if builder.blob_id.is_none() {
        builder.blob_id = Some(Default::default())
    }
    if builder.tree_id.is_none() {
        builder.tree_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_approval_rule_template_content_output_correct_errors(
    mut builder: crate::operation::update_approval_rule_template_content::builders::UpdateApprovalRuleTemplateContentOutputBuilder,
) -> crate::operation::update_approval_rule_template_content::builders::UpdateApprovalRuleTemplateContentOutputBuilder {
    if builder.approval_rule_template.is_none() {
        builder.approval_rule_template = {
            let builder = crate::types::builders::ApprovalRuleTemplateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_approval_rule_template_description_output_correct_errors(
    mut builder: crate::operation::update_approval_rule_template_description::builders::UpdateApprovalRuleTemplateDescriptionOutputBuilder,
) -> crate::operation::update_approval_rule_template_description::builders::UpdateApprovalRuleTemplateDescriptionOutputBuilder {
    if builder.approval_rule_template.is_none() {
        builder.approval_rule_template = {
            let builder = crate::types::builders::ApprovalRuleTemplateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_approval_rule_template_name_output_correct_errors(
    mut builder: crate::operation::update_approval_rule_template_name::builders::UpdateApprovalRuleTemplateNameOutputBuilder,
) -> crate::operation::update_approval_rule_template_name::builders::UpdateApprovalRuleTemplateNameOutputBuilder {
    if builder.approval_rule_template.is_none() {
        builder.approval_rule_template = {
            let builder = crate::types::builders::ApprovalRuleTemplateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_pull_request_approval_rule_content_output_correct_errors(
    mut builder: crate::operation::update_pull_request_approval_rule_content::builders::UpdatePullRequestApprovalRuleContentOutputBuilder,
) -> crate::operation::update_pull_request_approval_rule_content::builders::UpdatePullRequestApprovalRuleContentOutputBuilder {
    if builder.approval_rule.is_none() {
        builder.approval_rule = {
            let builder = crate::types::builders::ApprovalRuleBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_pull_request_description_output_correct_errors(
    mut builder: crate::operation::update_pull_request_description::builders::UpdatePullRequestDescriptionOutputBuilder,
) -> crate::operation::update_pull_request_description::builders::UpdatePullRequestDescriptionOutputBuilder {
    if builder.pull_request.is_none() {
        builder.pull_request = {
            let builder = crate::types::builders::PullRequestBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_pull_request_status_output_correct_errors(
    mut builder: crate::operation::update_pull_request_status::builders::UpdatePullRequestStatusOutputBuilder,
) -> crate::operation::update_pull_request_status::builders::UpdatePullRequestStatusOutputBuilder {
    if builder.pull_request.is_none() {
        builder.pull_request = {
            let builder = crate::types::builders::PullRequestBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_pull_request_title_output_correct_errors(
    mut builder: crate::operation::update_pull_request_title::builders::UpdatePullRequestTitleOutputBuilder,
) -> crate::operation::update_pull_request_title::builders::UpdatePullRequestTitleOutputBuilder {
    if builder.pull_request.is_none() {
        builder.pull_request = {
            let builder = crate::types::builders::PullRequestBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_describe_merge_conflicts_error_correct_errors(
    mut builder: crate::types::builders::BatchDescribeMergeConflictsErrorBuilder,
) -> crate::types::builders::BatchDescribeMergeConflictsErrorBuilder {
    if builder.file_path.is_none() {
        builder.file_path = Some(Default::default())
    }
    if builder.exception_name.is_none() {
        builder.exception_name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_trigger_correct_errors(
    mut builder: crate::types::builders::RepositoryTriggerBuilder,
) -> crate::types::builders::RepositoryTriggerBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}
