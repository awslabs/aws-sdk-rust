// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_file::_delete_file_output::DeleteFileOutputBuilder;

pub use crate::operation::delete_file::_delete_file_input::DeleteFileInputBuilder;

/// Fluent builder constructing a request to `DeleteFile`.
///
/// <p>Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_file::builders::DeleteFileInputBuilder,
}
impl DeleteFileFluentBuilder {
    /// Creates a new `DeleteFile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_file::DeleteFile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::delete_file::DeleteFileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_file::DeleteFileOutput,
        aws_smithy_http::result::SdkError<crate::operation::delete_file::DeleteFileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the repository that contains the file to delete.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository that contains the file to delete.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The name of the branch where the commit that deletes the file is made.</p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p>The name of the branch where the commit that deletes the file is made.</p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p>The fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.</p>
    pub fn file_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.file_path(input.into());
        self
    }
    /// <p>The fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.</p>
    pub fn set_file_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_file_path(input);
        self
    }
    /// <p>The ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID.</p>
    pub fn parent_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parent_commit_id(input.into());
        self
    }
    /// <p>The ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID.</p>
    pub fn set_parent_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_parent_commit_id(input);
        self
    }
    /// <p>If a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.</p>
    pub fn keep_empty_folders(mut self, input: bool) -> Self {
        self.inner = self.inner.keep_empty_folders(input);
        self
    }
    /// <p>If a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.</p>
    pub fn set_keep_empty_folders(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_keep_empty_folders(input);
        self
    }
    /// <p>The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn commit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p>The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn set_commit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p>The name of the author of the commit that deletes the file. If no name is specified, the user's ARN is used as the author name and committer name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the author of the commit that deletes the file. If no name is specified, the user's ARN is used as the author name and committer name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The email address for the commit that deletes the file. If no email address is specified, the email address is left blank.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.email(input.into());
        self
    }
    /// <p>The email address for the commit that deletes the file. If no email address is specified, the email address is left blank.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_email(input);
        self
    }
}
