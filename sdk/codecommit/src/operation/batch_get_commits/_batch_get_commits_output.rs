// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetCommitsOutput {
    /// <p>An array of commit data type objects, each of which contains information about a specified commit.</p>
    #[doc(hidden)]
    pub commits: std::option::Option<std::vec::Vec<crate::types::Commit>>,
    /// <p>Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::BatchGetCommitsError>>,
    _request_id: Option<String>,
}
impl BatchGetCommitsOutput {
    /// <p>An array of commit data type objects, each of which contains information about a specified commit.</p>
    pub fn commits(&self) -> std::option::Option<&[crate::types::Commit]> {
        self.commits.as_deref()
    }
    /// <p>Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::BatchGetCommitsError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetCommitsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetCommitsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetCommitsOutput`](crate::operation::batch_get_commits::BatchGetCommitsOutput).
    pub fn builder() -> crate::operation::batch_get_commits::builders::BatchGetCommitsOutputBuilder
    {
        crate::operation::batch_get_commits::builders::BatchGetCommitsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetCommitsOutput`](crate::operation::batch_get_commits::BatchGetCommitsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetCommitsOutputBuilder {
    pub(crate) commits: std::option::Option<std::vec::Vec<crate::types::Commit>>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::BatchGetCommitsError>>,
    _request_id: Option<String>,
}
impl BatchGetCommitsOutputBuilder {
    /// Appends an item to `commits`.
    ///
    /// To override the contents of this collection use [`set_commits`](Self::set_commits).
    ///
    /// <p>An array of commit data type objects, each of which contains information about a specified commit.</p>
    pub fn commits(mut self, input: crate::types::Commit) -> Self {
        let mut v = self.commits.unwrap_or_default();
        v.push(input);
        self.commits = Some(v);
        self
    }
    /// <p>An array of commit data type objects, each of which contains information about a specified commit.</p>
    pub fn set_commits(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Commit>>,
    ) -> Self {
        self.commits = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.</p>
    pub fn errors(mut self, input: crate::types::BatchGetCommitsError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchGetCommitsError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetCommitsOutput`](crate::operation::batch_get_commits::BatchGetCommitsOutput).
    pub fn build(self) -> crate::operation::batch_get_commits::BatchGetCommitsOutput {
        crate::operation::batch_get_commits::BatchGetCommitsOutput {
            commits: self.commits,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
