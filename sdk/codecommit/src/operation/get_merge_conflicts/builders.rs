// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_merge_conflicts::_get_merge_conflicts_output::GetMergeConflictsOutputBuilder;

pub use crate::operation::get_merge_conflicts::_get_merge_conflicts_input::GetMergeConflictsInputBuilder;

/// Fluent builder constructing a request to `GetMergeConflicts`.
///
/// <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMergeConflictsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_merge_conflicts::builders::GetMergeConflictsInputBuilder,
}
impl GetMergeConflictsFluentBuilder {
    /// Creates a new `GetMergeConflicts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_merge_conflicts::GetMergeConflicts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_merge_conflicts::GetMergeConflictsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_merge_conflicts::GetMergeConflictsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_merge_conflicts::GetMergeConflictsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_merge_conflicts::paginator::GetMergeConflictsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_merge_conflicts::paginator::GetMergeConflictsPaginator {
        crate::operation::get_merge_conflicts::paginator::GetMergeConflictsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The name of the repository where the pull request was created.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository where the pull request was created.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn destination_commit_specifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_commit_specifier(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_destination_commit_specifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_commit_specifier(input);
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn source_commit_specifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_commit_specifier(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_source_commit_specifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_commit_specifier(input);
        self
    }
    /// <p>The merge option or strategy you want to use to merge the code. </p>
    pub fn merge_option(mut self, input: crate::types::MergeOptionTypeEnum) -> Self {
        self.inner = self.inner.merge_option(input);
        self
    }
    /// <p>The merge option or strategy you want to use to merge the code. </p>
    pub fn set_merge_option(
        mut self,
        input: std::option::Option<crate::types::MergeOptionTypeEnum>,
    ) -> Self {
        self.inner = self.inner.set_merge_option(input);
        self
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn conflict_detail_level(
        mut self,
        input: crate::types::ConflictDetailLevelTypeEnum,
    ) -> Self {
        self.inner = self.inner.conflict_detail_level(input);
        self
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn set_conflict_detail_level(
        mut self,
        input: std::option::Option<crate::types::ConflictDetailLevelTypeEnum>,
    ) -> Self {
        self.inner = self.inner.set_conflict_detail_level(input);
        self
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn max_conflict_files(mut self, input: i32) -> Self {
        self.inner = self.inner.max_conflict_files(input);
        self
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn set_max_conflict_files(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_conflict_files(input);
        self
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn conflict_resolution_strategy(
        mut self,
        input: crate::types::ConflictResolutionStrategyTypeEnum,
    ) -> Self {
        self.inner = self.inner.conflict_resolution_strategy(input);
        self
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn set_conflict_resolution_strategy(
        mut self,
        input: std::option::Option<crate::types::ConflictResolutionStrategyTypeEnum>,
    ) -> Self {
        self.inner = self.inner.set_conflict_resolution_strategy(input);
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
