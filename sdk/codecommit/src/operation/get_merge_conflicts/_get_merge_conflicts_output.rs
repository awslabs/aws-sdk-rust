// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMergeConflictsOutput {
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    pub mergeable: bool,
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    pub destination_commit_id: ::std::string::String,
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    pub source_commit_id: ::std::string::String,
    /// <p>The commit ID of the merge base.</p>
    pub base_commit_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    pub conflict_metadata_list: ::std::vec::Vec<crate::types::ConflictMetadata>,
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMergeConflictsOutput {
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    pub fn mergeable(&self) -> bool {
        self.mergeable
    }
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    pub fn destination_commit_id(&self) -> &str {
        use std::ops::Deref;
        self.destination_commit_id.deref()
    }
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    pub fn source_commit_id(&self) -> &str {
        use std::ops::Deref;
        self.source_commit_id.deref()
    }
    /// <p>The commit ID of the merge base.</p>
    pub fn base_commit_id(&self) -> ::std::option::Option<&str> {
        self.base_commit_id.as_deref()
    }
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    pub fn conflict_metadata_list(&self) -> &[crate::types::ConflictMetadata] {
        use std::ops::Deref;
        self.conflict_metadata_list.deref()
    }
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetMergeConflictsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMergeConflictsOutput {
    /// Creates a new builder-style object to manufacture [`GetMergeConflictsOutput`](crate::operation::get_merge_conflicts::GetMergeConflictsOutput).
    pub fn builder() -> crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder {
        crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder::default()
    }
}

/// A builder for [`GetMergeConflictsOutput`](crate::operation::get_merge_conflicts::GetMergeConflictsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMergeConflictsOutputBuilder {
    pub(crate) mergeable: ::std::option::Option<bool>,
    pub(crate) destination_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) base_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) conflict_metadata_list: ::std::option::Option<::std::vec::Vec<crate::types::ConflictMetadata>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetMergeConflictsOutputBuilder {
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    /// This field is required.
    pub fn mergeable(mut self, input: bool) -> Self {
        self.mergeable = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    pub fn set_mergeable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.mergeable = input;
        self
    }
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    pub fn get_mergeable(&self) -> &::std::option::Option<bool> {
        &self.mergeable
    }
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    /// This field is required.
    pub fn destination_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    pub fn set_destination_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_commit_id = input;
        self
    }
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    pub fn get_destination_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_commit_id
    }
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    /// This field is required.
    pub fn source_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    pub fn set_source_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_commit_id = input;
        self
    }
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    pub fn get_source_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_commit_id
    }
    /// <p>The commit ID of the merge base.</p>
    pub fn base_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The commit ID of the merge base.</p>
    pub fn set_base_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_commit_id = input;
        self
    }
    /// <p>The commit ID of the merge base.</p>
    pub fn get_base_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_commit_id
    }
    /// Appends an item to `conflict_metadata_list`.
    ///
    /// To override the contents of this collection use [`set_conflict_metadata_list`](Self::set_conflict_metadata_list).
    ///
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    pub fn conflict_metadata_list(mut self, input: crate::types::ConflictMetadata) -> Self {
        let mut v = self.conflict_metadata_list.unwrap_or_default();
        v.push(input);
        self.conflict_metadata_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    pub fn set_conflict_metadata_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConflictMetadata>>) -> Self {
        self.conflict_metadata_list = input;
        self
    }
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    pub fn get_conflict_metadata_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConflictMetadata>> {
        &self.conflict_metadata_list
    }
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMergeConflictsOutput`](crate::operation::get_merge_conflicts::GetMergeConflictsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination_commit_id`](crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder::destination_commit_id)
    /// - [`source_commit_id`](crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder::source_commit_id)
    /// - [`conflict_metadata_list`](crate::operation::get_merge_conflicts::builders::GetMergeConflictsOutputBuilder::conflict_metadata_list)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_merge_conflicts::GetMergeConflictsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_merge_conflicts::GetMergeConflictsOutput {
            mergeable: self.mergeable.unwrap_or_default(),
            destination_commit_id: self.destination_commit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_commit_id",
                    "destination_commit_id was not specified but it is required when building GetMergeConflictsOutput",
                )
            })?,
            source_commit_id: self.source_commit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_commit_id",
                    "source_commit_id was not specified but it is required when building GetMergeConflictsOutput",
                )
            })?,
            base_commit_id: self.base_commit_id,
            conflict_metadata_list: self.conflict_metadata_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conflict_metadata_list",
                    "conflict_metadata_list was not specified but it is required when building GetMergeConflictsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
