// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MergeBranchesByFastForwardInput {
    /// <p>The name of the repository where you want to merge two branches.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub source_commit_specifier: ::std::option::Option<::std::string::String>,
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub destination_commit_specifier: ::std::option::Option<::std::string::String>,
    /// <p>The branch where the merge is applied.</p>
    pub target_branch: ::std::option::Option<::std::string::String>,
}
impl MergeBranchesByFastForwardInput {
    /// <p>The name of the repository where you want to merge two branches.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn source_commit_specifier(&self) -> ::std::option::Option<&str> {
        self.source_commit_specifier.as_deref()
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn destination_commit_specifier(&self) -> ::std::option::Option<&str> {
        self.destination_commit_specifier.as_deref()
    }
    /// <p>The branch where the merge is applied.</p>
    pub fn target_branch(&self) -> ::std::option::Option<&str> {
        self.target_branch.as_deref()
    }
}
impl MergeBranchesByFastForwardInput {
    /// Creates a new builder-style object to manufacture [`MergeBranchesByFastForwardInput`](crate::operation::merge_branches_by_fast_forward::MergeBranchesByFastForwardInput).
    pub fn builder() -> crate::operation::merge_branches_by_fast_forward::builders::MergeBranchesByFastForwardInputBuilder {
        crate::operation::merge_branches_by_fast_forward::builders::MergeBranchesByFastForwardInputBuilder::default()
    }
}

/// A builder for [`MergeBranchesByFastForwardInput`](crate::operation::merge_branches_by_fast_forward::MergeBranchesByFastForwardInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MergeBranchesByFastForwardInputBuilder {
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_commit_specifier: ::std::option::Option<::std::string::String>,
    pub(crate) destination_commit_specifier: ::std::option::Option<::std::string::String>,
    pub(crate) target_branch: ::std::option::Option<::std::string::String>,
}
impl MergeBranchesByFastForwardInputBuilder {
    /// <p>The name of the repository where you want to merge two branches.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository where you want to merge two branches.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository where you want to merge two branches.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    /// This field is required.
    pub fn source_commit_specifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_commit_specifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_source_commit_specifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_commit_specifier = input;
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn get_source_commit_specifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_commit_specifier
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    /// This field is required.
    pub fn destination_commit_specifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_commit_specifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_destination_commit_specifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_commit_specifier = input;
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn get_destination_commit_specifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_commit_specifier
    }
    /// <p>The branch where the merge is applied.</p>
    pub fn target_branch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_branch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch where the merge is applied.</p>
    pub fn set_target_branch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_branch = input;
        self
    }
    /// <p>The branch where the merge is applied.</p>
    pub fn get_target_branch(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_branch
    }
    /// Consumes the builder and constructs a [`MergeBranchesByFastForwardInput`](crate::operation::merge_branches_by_fast_forward::MergeBranchesByFastForwardInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::merge_branches_by_fast_forward::MergeBranchesByFastForwardInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::merge_branches_by_fast_forward::MergeBranchesByFastForwardInput {
            repository_name: self.repository_name,
            source_commit_specifier: self.source_commit_specifier,
            destination_commit_specifier: self.destination_commit_specifier,
            target_branch: self.target_branch,
        })
    }
}
