// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
    /// <p>A list of repository names that have had their association with the template removed.</p>
    pub disassociated_repository_names: ::std::vec::Vec<::std::string::String>,
    /// <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
    pub errors: ::std::vec::Vec<crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError>,
    _request_id: Option<String>,
}
impl BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
    /// <p>A list of repository names that have had their association with the template removed.</p>
    pub fn disassociated_repository_names(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.disassociated_repository_names.deref()
    }
    /// <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
    pub fn errors(&self) -> &[crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError] {
        use std::ops::Deref;
        self.errors.deref()
    }
}
impl ::aws_http::request_id::RequestId for BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput`](crate::operation::batch_disassociate_approval_rule_template_from_repositories::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput).
    pub fn builder() -> crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder{
        crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder::default()
    }
}

/// A builder for [`BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput`](crate::operation::batch_disassociate_approval_rule_template_from_repositories::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder {
    pub(crate) disassociated_repository_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError>>,
    _request_id: Option<String>,
}
impl BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder {
    /// Appends an item to `disassociated_repository_names`.
    ///
    /// To override the contents of this collection use [`set_disassociated_repository_names`](Self::set_disassociated_repository_names).
    ///
    /// <p>A list of repository names that have had their association with the template removed.</p>
    pub fn disassociated_repository_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.disassociated_repository_names.unwrap_or_default();
        v.push(input.into());
        self.disassociated_repository_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of repository names that have had their association with the template removed.</p>
    pub fn set_disassociated_repository_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.disassociated_repository_names = input;
        self
    }
    /// <p>A list of repository names that have had their association with the template removed.</p>
    pub fn get_disassociated_repository_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.disassociated_repository_names
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
    pub fn errors(mut self, input: crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
    pub fn set_errors(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchDisassociateApprovalRuleTemplateFromRepositoriesError>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput`](crate::operation::batch_disassociate_approval_rule_template_from_repositories::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`disassociated_repository_names`](crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder::disassociated_repository_names)
    /// - [`errors`](crate::operation::batch_disassociate_approval_rule_template_from_repositories::builders::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputBuilder::errors)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_disassociate_approval_rule_template_from_repositories::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_disassociate_approval_rule_template_from_repositories::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput {
                disassociated_repository_names: self.disassociated_repository_names
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("disassociated_repository_names", "disassociated_repository_names was not specified but it is required when building BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput")
                    )?
                ,
                errors: self.errors
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("errors", "errors was not specified but it is required when building BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput")
                    )?
                ,
                _request_id: self._request_id,
            }
        )
    }
}
