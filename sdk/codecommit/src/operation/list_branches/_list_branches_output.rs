// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a list branches operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBranchesOutput {
    /// <p>The list of branch names.</p>
    #[doc(hidden)]
    pub branches: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An enumeration token that returns the batch of the results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListBranchesOutput {
    /// <p>The list of branch names.</p>
    pub fn branches(&self) -> std::option::Option<&[std::string::String]> {
        self.branches.as_deref()
    }
    /// <p>An enumeration token that returns the batch of the results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListBranchesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListBranchesOutput {
    /// Creates a new builder-style object to manufacture [`ListBranchesOutput`](crate::operation::list_branches::ListBranchesOutput).
    pub fn builder() -> crate::operation::list_branches::builders::ListBranchesOutputBuilder {
        crate::operation::list_branches::builders::ListBranchesOutputBuilder::default()
    }
}

/// A builder for [`ListBranchesOutput`](crate::operation::list_branches::ListBranchesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListBranchesOutputBuilder {
    pub(crate) branches: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListBranchesOutputBuilder {
    /// Appends an item to `branches`.
    ///
    /// To override the contents of this collection use [`set_branches`](Self::set_branches).
    ///
    /// <p>The list of branch names.</p>
    pub fn branches(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.branches.unwrap_or_default();
        v.push(input.into());
        self.branches = Some(v);
        self
    }
    /// <p>The list of branch names.</p>
    pub fn set_branches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.branches = input;
        self
    }
    /// <p>An enumeration token that returns the batch of the results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An enumeration token that returns the batch of the results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListBranchesOutput`](crate::operation::list_branches::ListBranchesOutput).
    pub fn build(self) -> crate::operation::list_branches::ListBranchesOutput {
        crate::operation::list_branches::ListBranchesOutput {
            branches: self.branches,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
