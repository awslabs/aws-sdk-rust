// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDescribeMergeConflictsInput {
    /// <p>The name of the repository that contains the merge conflicts you want to review.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub destination_commit_specifier: ::std::option::Option<::std::string::String>,
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub source_commit_specifier: ::std::option::Option<::std::string::String>,
    /// <p>The merge option or strategy you want to use to merge the code.</p>
    pub merge_option: ::std::option::Option<crate::types::MergeOptionTypeEnum>,
    /// <p>The maximum number of merge hunks to include in the output.</p>
    pub max_merge_hunks: ::std::option::Option<i32>,
    /// <p>The maximum number of files to include in the output.</p>
    pub max_conflict_files: ::std::option::Option<i32>,
    /// <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
    pub file_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub conflict_detail_level: ::std::option::Option<crate::types::ConflictDetailLevelTypeEnum>,
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub conflict_resolution_strategy: ::std::option::Option<crate::types::ConflictResolutionStrategyTypeEnum>,
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl BatchDescribeMergeConflictsInput {
    /// <p>The name of the repository that contains the merge conflicts you want to review.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn destination_commit_specifier(&self) -> ::std::option::Option<&str> {
        self.destination_commit_specifier.as_deref()
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn source_commit_specifier(&self) -> ::std::option::Option<&str> {
        self.source_commit_specifier.as_deref()
    }
    /// <p>The merge option or strategy you want to use to merge the code.</p>
    pub fn merge_option(&self) -> ::std::option::Option<&crate::types::MergeOptionTypeEnum> {
        self.merge_option.as_ref()
    }
    /// <p>The maximum number of merge hunks to include in the output.</p>
    pub fn max_merge_hunks(&self) -> ::std::option::Option<i32> {
        self.max_merge_hunks
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn max_conflict_files(&self) -> ::std::option::Option<i32> {
        self.max_conflict_files
    }
    /// <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.file_paths.is_none()`.
    pub fn file_paths(&self) -> &[::std::string::String] {
        self.file_paths.as_deref().unwrap_or_default()
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn conflict_detail_level(&self) -> ::std::option::Option<&crate::types::ConflictDetailLevelTypeEnum> {
        self.conflict_detail_level.as_ref()
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn conflict_resolution_strategy(&self) -> ::std::option::Option<&crate::types::ConflictResolutionStrategyTypeEnum> {
        self.conflict_resolution_strategy.as_ref()
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl BatchDescribeMergeConflictsInput {
    /// Creates a new builder-style object to manufacture [`BatchDescribeMergeConflictsInput`](crate::operation::batch_describe_merge_conflicts::BatchDescribeMergeConflictsInput).
    pub fn builder() -> crate::operation::batch_describe_merge_conflicts::builders::BatchDescribeMergeConflictsInputBuilder {
        crate::operation::batch_describe_merge_conflicts::builders::BatchDescribeMergeConflictsInputBuilder::default()
    }
}

/// A builder for [`BatchDescribeMergeConflictsInput`](crate::operation::batch_describe_merge_conflicts::BatchDescribeMergeConflictsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDescribeMergeConflictsInputBuilder {
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_commit_specifier: ::std::option::Option<::std::string::String>,
    pub(crate) source_commit_specifier: ::std::option::Option<::std::string::String>,
    pub(crate) merge_option: ::std::option::Option<crate::types::MergeOptionTypeEnum>,
    pub(crate) max_merge_hunks: ::std::option::Option<i32>,
    pub(crate) max_conflict_files: ::std::option::Option<i32>,
    pub(crate) file_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) conflict_detail_level: ::std::option::Option<crate::types::ConflictDetailLevelTypeEnum>,
    pub(crate) conflict_resolution_strategy: ::std::option::Option<crate::types::ConflictResolutionStrategyTypeEnum>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl BatchDescribeMergeConflictsInputBuilder {
    /// <p>The name of the repository that contains the merge conflicts you want to review.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository that contains the merge conflicts you want to review.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository that contains the merge conflicts you want to review.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    /// This field is required.
    pub fn destination_commit_specifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_commit_specifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_destination_commit_specifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_commit_specifier = input;
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn get_destination_commit_specifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_commit_specifier
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    /// This field is required.
    pub fn source_commit_specifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_commit_specifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn set_source_commit_specifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_commit_specifier = input;
        self
    }
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    pub fn get_source_commit_specifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_commit_specifier
    }
    /// <p>The merge option or strategy you want to use to merge the code.</p>
    /// This field is required.
    pub fn merge_option(mut self, input: crate::types::MergeOptionTypeEnum) -> Self {
        self.merge_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The merge option or strategy you want to use to merge the code.</p>
    pub fn set_merge_option(mut self, input: ::std::option::Option<crate::types::MergeOptionTypeEnum>) -> Self {
        self.merge_option = input;
        self
    }
    /// <p>The merge option or strategy you want to use to merge the code.</p>
    pub fn get_merge_option(&self) -> &::std::option::Option<crate::types::MergeOptionTypeEnum> {
        &self.merge_option
    }
    /// <p>The maximum number of merge hunks to include in the output.</p>
    pub fn max_merge_hunks(mut self, input: i32) -> Self {
        self.max_merge_hunks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of merge hunks to include in the output.</p>
    pub fn set_max_merge_hunks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_merge_hunks = input;
        self
    }
    /// <p>The maximum number of merge hunks to include in the output.</p>
    pub fn get_max_merge_hunks(&self) -> &::std::option::Option<i32> {
        &self.max_merge_hunks
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn max_conflict_files(mut self, input: i32) -> Self {
        self.max_conflict_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn set_max_conflict_files(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_conflict_files = input;
        self
    }
    /// <p>The maximum number of files to include in the output.</p>
    pub fn get_max_conflict_files(&self) -> &::std::option::Option<i32> {
        &self.max_conflict_files
    }
    /// Appends an item to `file_paths`.
    ///
    /// To override the contents of this collection use [`set_file_paths`](Self::set_file_paths).
    ///
    /// <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
    pub fn file_paths(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.file_paths.unwrap_or_default();
        v.push(input.into());
        self.file_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
    pub fn set_file_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.file_paths = input;
        self
    }
    /// <p>The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.</p>
    pub fn get_file_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.file_paths
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn conflict_detail_level(mut self, input: crate::types::ConflictDetailLevelTypeEnum) -> Self {
        self.conflict_detail_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn set_conflict_detail_level(mut self, input: ::std::option::Option<crate::types::ConflictDetailLevelTypeEnum>) -> Self {
        self.conflict_detail_level = input;
        self
    }
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    pub fn get_conflict_detail_level(&self) -> &::std::option::Option<crate::types::ConflictDetailLevelTypeEnum> {
        &self.conflict_detail_level
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn conflict_resolution_strategy(mut self, input: crate::types::ConflictResolutionStrategyTypeEnum) -> Self {
        self.conflict_resolution_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn set_conflict_resolution_strategy(mut self, input: ::std::option::Option<crate::types::ConflictResolutionStrategyTypeEnum>) -> Self {
        self.conflict_resolution_strategy = input;
        self
    }
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    pub fn get_conflict_resolution_strategy(&self) -> &::std::option::Option<crate::types::ConflictResolutionStrategyTypeEnum> {
        &self.conflict_resolution_strategy
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`BatchDescribeMergeConflictsInput`](crate::operation::batch_describe_merge_conflicts::BatchDescribeMergeConflictsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_describe_merge_conflicts::BatchDescribeMergeConflictsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_describe_merge_conflicts::BatchDescribeMergeConflictsInput {
            repository_name: self.repository_name,
            destination_commit_specifier: self.destination_commit_specifier,
            source_commit_specifier: self.source_commit_specifier,
            merge_option: self.merge_option,
            max_merge_hunks: self.max_merge_hunks,
            max_conflict_files: self.max_conflict_files,
            file_paths: self.file_paths,
            conflict_detail_level: self.conflict_detail_level,
            conflict_resolution_strategy: self.conflict_resolution_strategy,
            next_token: self.next_token,
        })
    }
}
