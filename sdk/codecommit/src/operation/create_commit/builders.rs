// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_commit::_create_commit_output::CreateCommitOutputBuilder;

pub use crate::operation::create_commit::_create_commit_input::CreateCommitInputBuilder;

impl CreateCommitInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_commit::CreateCommitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_commit::CreateCommitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_commit();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCommit`.
///
/// <p>Creates a commit for a repository on the tip of a specified branch.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCommitFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_commit::builders::CreateCommitInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_commit::CreateCommitOutput,
        crate::operation::create_commit::CreateCommitError,
    > for CreateCommitFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_commit::CreateCommitOutput,
            crate::operation::create_commit::CreateCommitError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCommitFluentBuilder {
    /// Creates a new `CreateCommit`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCommit as a reference.
    pub fn as_input(&self) -> &crate::operation::create_commit::builders::CreateCommitInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_commit::CreateCommitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_commit::CreateCommitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_commit::CreateCommit::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_commit::CreateCommit::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_commit::CreateCommitOutput,
        crate::operation::create_commit::CreateCommitError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the repository where you create the commit.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository where you create the commit.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The name of the repository where you create the commit.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_repository_name()
    }
    /// <p>The name of the branch where you create the commit.</p>
    pub fn branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p>The name of the branch where you create the commit.</p>
    pub fn set_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p>The name of the branch where you create the commit.</p>
    pub fn get_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_branch_name()
    }
    /// <p>The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.</p>
    pub fn parent_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.parent_commit_id(input.into());
        self
    }
    /// <p>The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.</p>
    pub fn set_parent_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_parent_commit_id(input);
        self
    }
    /// <p>The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.</p>
    pub fn get_parent_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_parent_commit_id()
    }
    /// <p>The name of the author who created the commit. This information is used as both the author and committer for the commit.</p>
    pub fn author_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.author_name(input.into());
        self
    }
    /// <p>The name of the author who created the commit. This information is used as both the author and committer for the commit.</p>
    pub fn set_author_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_author_name(input);
        self
    }
    /// <p>The name of the author who created the commit. This information is used as both the author and committer for the commit.</p>
    pub fn get_author_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_author_name()
    }
    /// <p>The email address of the person who created the commit.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.email(input.into());
        self
    }
    /// <p>The email address of the person who created the commit.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_email(input);
        self
    }
    /// <p>The email address of the person who created the commit.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_email()
    }
    /// <p>The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p>The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p>The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_commit_message()
    }
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.</p>
    pub fn keep_empty_folders(mut self, input: bool) -> Self {
        self.inner = self.inner.keep_empty_folders(input);
        self
    }
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.</p>
    pub fn set_keep_empty_folders(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_keep_empty_folders(input);
        self
    }
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.</p>
    pub fn get_keep_empty_folders(&self) -> &::std::option::Option<bool> {
        self.inner.get_keep_empty_folders()
    }
    /// Appends an item to `putFiles`.
    ///
    /// To override the contents of this collection use [`set_put_files`](Self::set_put_files).
    ///
    /// <p>The files to add or update in this commit.</p>
    pub fn put_files(mut self, input: crate::types::PutFileEntry) -> Self {
        self.inner = self.inner.put_files(input);
        self
    }
    /// <p>The files to add or update in this commit.</p>
    pub fn set_put_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PutFileEntry>>) -> Self {
        self.inner = self.inner.set_put_files(input);
        self
    }
    /// <p>The files to add or update in this commit.</p>
    pub fn get_put_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PutFileEntry>> {
        self.inner.get_put_files()
    }
    /// Appends an item to `deleteFiles`.
    ///
    /// To override the contents of this collection use [`set_delete_files`](Self::set_delete_files).
    ///
    /// <p>The files to delete in this commit. These files still exist in earlier commits.</p>
    pub fn delete_files(mut self, input: crate::types::DeleteFileEntry) -> Self {
        self.inner = self.inner.delete_files(input);
        self
    }
    /// <p>The files to delete in this commit. These files still exist in earlier commits.</p>
    pub fn set_delete_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeleteFileEntry>>) -> Self {
        self.inner = self.inner.set_delete_files(input);
        self
    }
    /// <p>The files to delete in this commit. These files still exist in earlier commits.</p>
    pub fn get_delete_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeleteFileEntry>> {
        self.inner.get_delete_files()
    }
    /// Appends an item to `setFileModes`.
    ///
    /// To override the contents of this collection use [`set_set_file_modes`](Self::set_set_file_modes).
    ///
    /// <p>The file modes to update for files in this commit.</p>
    pub fn set_file_modes(mut self, input: crate::types::SetFileModeEntry) -> Self {
        self.inner = self.inner.set_file_modes(input);
        self
    }
    /// <p>The file modes to update for files in this commit.</p>
    pub fn set_set_file_modes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SetFileModeEntry>>) -> Self {
        self.inner = self.inner.set_set_file_modes(input);
        self
    }
    /// <p>The file modes to update for files in this commit.</p>
    pub fn get_set_file_modes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SetFileModeEntry>> {
        self.inner.get_set_file_modes()
    }
}
