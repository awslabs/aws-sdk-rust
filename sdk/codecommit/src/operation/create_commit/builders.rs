// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_commit::_create_commit_output::CreateCommitOutputBuilder;

pub use crate::operation::create_commit::_create_commit_input::CreateCommitInputBuilder;

/// Fluent builder constructing a request to `CreateCommit`.
///
/// <p>Creates a commit for a repository on the tip of a specified branch.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCommitFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_commit::builders::CreateCommitInputBuilder,
}
impl CreateCommitFluentBuilder {
    /// Creates a new `CreateCommit`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_commit::CreateCommit,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_commit::CreateCommitError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_commit::CreateCommitOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_commit::CreateCommitError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the repository where you create the commit.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository where you create the commit.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The name of the branch where you create the commit.</p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p>The name of the branch where you create the commit.</p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p>The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.</p>
    pub fn parent_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parent_commit_id(input.into());
        self
    }
    /// <p>The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.</p>
    pub fn set_parent_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_parent_commit_id(input);
        self
    }
    /// <p>The name of the author who created the commit. This information is used as both the author and committer for the commit.</p>
    pub fn author_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.author_name(input.into());
        self
    }
    /// <p>The name of the author who created the commit. This information is used as both the author and committer for the commit.</p>
    pub fn set_author_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_author_name(input);
        self
    }
    /// <p>The email address of the person who created the commit.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.email(input.into());
        self
    }
    /// <p>The email address of the person who created the commit.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_email(input);
        self
    }
    /// <p>The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn commit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commit_message(input.into());
        self
    }
    /// <p>The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.</p>
    pub fn set_commit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commit_message(input);
        self
    }
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.</p>
    pub fn keep_empty_folders(mut self, input: bool) -> Self {
        self.inner = self.inner.keep_empty_folders(input);
        self
    }
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.</p>
    pub fn set_keep_empty_folders(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_keep_empty_folders(input);
        self
    }
    /// Appends an item to `putFiles`.
    ///
    /// To override the contents of this collection use [`set_put_files`](Self::set_put_files).
    ///
    /// <p>The files to add or update in this commit.</p>
    pub fn put_files(mut self, input: crate::types::PutFileEntry) -> Self {
        self.inner = self.inner.put_files(input);
        self
    }
    /// <p>The files to add or update in this commit.</p>
    pub fn set_put_files(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PutFileEntry>>,
    ) -> Self {
        self.inner = self.inner.set_put_files(input);
        self
    }
    /// Appends an item to `deleteFiles`.
    ///
    /// To override the contents of this collection use [`set_delete_files`](Self::set_delete_files).
    ///
    /// <p>The files to delete in this commit. These files still exist in earlier commits.</p>
    pub fn delete_files(mut self, input: crate::types::DeleteFileEntry) -> Self {
        self.inner = self.inner.delete_files(input);
        self
    }
    /// <p>The files to delete in this commit. These files still exist in earlier commits.</p>
    pub fn set_delete_files(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeleteFileEntry>>,
    ) -> Self {
        self.inner = self.inner.set_delete_files(input);
        self
    }
    /// Appends an item to `setFileModes`.
    ///
    /// To override the contents of this collection use [`set_set_file_modes`](Self::set_set_file_modes).
    ///
    /// <p>The file modes to update for files in this commit.</p>
    pub fn set_file_modes(mut self, input: crate::types::SetFileModeEntry) -> Self {
        self.inner = self.inner.set_file_modes(input);
        self
    }
    /// <p>The file modes to update for files in this commit.</p>
    pub fn set_set_file_modes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SetFileModeEntry>>,
    ) -> Self {
        self.inner = self.inner.set_set_file_modes(input);
        self
    }
}
