// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::test_repository_triggers::_test_repository_triggers_output::TestRepositoryTriggersOutputBuilder;

pub use crate::operation::test_repository_triggers::_test_repository_triggers_input::TestRepositoryTriggersInputBuilder;

/// Fluent builder constructing a request to `TestRepositoryTriggers`.
///
/// <p>Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TestRepositoryTriggersFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::test_repository_triggers::builders::TestRepositoryTriggersInputBuilder,
}
impl TestRepositoryTriggersFluentBuilder {
    /// Creates a new `TestRepositoryTriggers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::test_repository_triggers::TestRepositoryTriggers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::test_repository_triggers::TestRepositoryTriggersError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::test_repository_triggers::TestRepositoryTriggersOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::test_repository_triggers::TestRepositoryTriggersError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the repository in which to test the triggers.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository in which to test the triggers.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The list of triggers to test.</p>
    pub fn triggers(mut self, input: crate::types::RepositoryTrigger) -> Self {
        self.inner = self.inner.triggers(input);
        self
    }
    /// <p>The list of triggers to test.</p>
    pub fn set_triggers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RepositoryTrigger>>,
    ) -> Self {
        self.inner = self.inner.set_triggers(input);
        self
    }
}
