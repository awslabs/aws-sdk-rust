// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PostCommentForPullRequestOutput {
    /// <p>The name of the repository where you posted a comment on a pull request.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The system-generated ID of the pull request. </p>
    #[doc(hidden)]
    pub pull_request_id: std::option::Option<std::string::String>,
    /// <p>The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>
    #[doc(hidden)]
    pub before_commit_id: std::option::Option<std::string::String>,
    /// <p>The full commit ID of the commit in the destination branch where the pull request is merged.</p>
    #[doc(hidden)]
    pub after_commit_id: std::option::Option<std::string::String>,
    /// <p>In the directionality of the pull request, the blob ID of the before blob.</p>
    #[doc(hidden)]
    pub before_blob_id: std::option::Option<std::string::String>,
    /// <p>In the directionality of the pull request, the blob ID of the after blob.</p>
    #[doc(hidden)]
    pub after_blob_id: std::option::Option<std::string::String>,
    /// <p>The location of the change where you posted your comment.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::Location>,
    /// <p>The content of the comment you posted.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<crate::types::Comment>,
    _request_id: Option<String>,
}
impl PostCommentForPullRequestOutput {
    /// <p>The name of the repository where you posted a comment on a pull request.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The system-generated ID of the pull request. </p>
    pub fn pull_request_id(&self) -> std::option::Option<&str> {
        self.pull_request_id.as_deref()
    }
    /// <p>The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>
    pub fn before_commit_id(&self) -> std::option::Option<&str> {
        self.before_commit_id.as_deref()
    }
    /// <p>The full commit ID of the commit in the destination branch where the pull request is merged.</p>
    pub fn after_commit_id(&self) -> std::option::Option<&str> {
        self.after_commit_id.as_deref()
    }
    /// <p>In the directionality of the pull request, the blob ID of the before blob.</p>
    pub fn before_blob_id(&self) -> std::option::Option<&str> {
        self.before_blob_id.as_deref()
    }
    /// <p>In the directionality of the pull request, the blob ID of the after blob.</p>
    pub fn after_blob_id(&self) -> std::option::Option<&str> {
        self.after_blob_id.as_deref()
    }
    /// <p>The location of the change where you posted your comment.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::Location> {
        self.location.as_ref()
    }
    /// <p>The content of the comment you posted.</p>
    pub fn comment(&self) -> std::option::Option<&crate::types::Comment> {
        self.comment.as_ref()
    }
}
impl aws_http::request_id::RequestId for PostCommentForPullRequestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PostCommentForPullRequestOutput {
    /// Creates a new builder-style object to manufacture [`PostCommentForPullRequestOutput`](crate::operation::post_comment_for_pull_request::PostCommentForPullRequestOutput).
    pub fn builder() -> crate::operation::post_comment_for_pull_request::builders::PostCommentForPullRequestOutputBuilder{
        crate::operation::post_comment_for_pull_request::builders::PostCommentForPullRequestOutputBuilder::default()
    }
}

/// A builder for [`PostCommentForPullRequestOutput`](crate::operation::post_comment_for_pull_request::PostCommentForPullRequestOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PostCommentForPullRequestOutputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) pull_request_id: std::option::Option<std::string::String>,
    pub(crate) before_commit_id: std::option::Option<std::string::String>,
    pub(crate) after_commit_id: std::option::Option<std::string::String>,
    pub(crate) before_blob_id: std::option::Option<std::string::String>,
    pub(crate) after_blob_id: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<crate::types::Location>,
    pub(crate) comment: std::option::Option<crate::types::Comment>,
    _request_id: Option<String>,
}
impl PostCommentForPullRequestOutputBuilder {
    /// <p>The name of the repository where you posted a comment on a pull request.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository where you posted a comment on a pull request.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The system-generated ID of the pull request. </p>
    pub fn pull_request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.pull_request_id = Some(input.into());
        self
    }
    /// <p>The system-generated ID of the pull request. </p>
    pub fn set_pull_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pull_request_id = input;
        self
    }
    /// <p>The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>
    pub fn before_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.before_commit_id = Some(input.into());
        self
    }
    /// <p>The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.</p>
    pub fn set_before_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.before_commit_id = input;
        self
    }
    /// <p>The full commit ID of the commit in the destination branch where the pull request is merged.</p>
    pub fn after_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.after_commit_id = Some(input.into());
        self
    }
    /// <p>The full commit ID of the commit in the destination branch where the pull request is merged.</p>
    pub fn set_after_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.after_commit_id = input;
        self
    }
    /// <p>In the directionality of the pull request, the blob ID of the before blob.</p>
    pub fn before_blob_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.before_blob_id = Some(input.into());
        self
    }
    /// <p>In the directionality of the pull request, the blob ID of the before blob.</p>
    pub fn set_before_blob_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.before_blob_id = input;
        self
    }
    /// <p>In the directionality of the pull request, the blob ID of the after blob.</p>
    pub fn after_blob_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.after_blob_id = Some(input.into());
        self
    }
    /// <p>In the directionality of the pull request, the blob ID of the after blob.</p>
    pub fn set_after_blob_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.after_blob_id = input;
        self
    }
    /// <p>The location of the change where you posted your comment.</p>
    pub fn location(mut self, input: crate::types::Location) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The location of the change where you posted your comment.</p>
    pub fn set_location(mut self, input: std::option::Option<crate::types::Location>) -> Self {
        self.location = input;
        self
    }
    /// <p>The content of the comment you posted.</p>
    pub fn comment(mut self, input: crate::types::Comment) -> Self {
        self.comment = Some(input);
        self
    }
    /// <p>The content of the comment you posted.</p>
    pub fn set_comment(mut self, input: std::option::Option<crate::types::Comment>) -> Self {
        self.comment = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PostCommentForPullRequestOutput`](crate::operation::post_comment_for_pull_request::PostCommentForPullRequestOutput).
    pub fn build(
        self,
    ) -> crate::operation::post_comment_for_pull_request::PostCommentForPullRequestOutput {
        crate::operation::post_comment_for_pull_request::PostCommentForPullRequestOutput {
            repository_name: self.repository_name,
            pull_request_id: self.pull_request_id,
            before_commit_id: self.before_commit_id,
            after_commit_id: self.after_commit_id,
            before_blob_id: self.before_blob_id,
            after_blob_id: self.after_blob_id,
            location: self.location,
            comment: self.comment,
            _request_id: self._request_id,
        }
    }
}
