// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCommentInput {
    /// <p>The system-generated ID of the comment you want to update. To get this ID, use <code>GetCommentsForComparedCommit</code> or <code>GetCommentsForPullRequest</code>.</p>
    #[doc(hidden)]
    pub comment_id: std::option::Option<std::string::String>,
    /// <p>The updated content to replace the existing content of the comment.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
}
impl UpdateCommentInput {
    /// <p>The system-generated ID of the comment you want to update. To get this ID, use <code>GetCommentsForComparedCommit</code> or <code>GetCommentsForPullRequest</code>.</p>
    pub fn comment_id(&self) -> std::option::Option<&str> {
        self.comment_id.as_deref()
    }
    /// <p>The updated content to replace the existing content of the comment.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl UpdateCommentInput {
    /// Creates a new builder-style object to manufacture [`UpdateCommentInput`](crate::operation::update_comment::UpdateCommentInput).
    pub fn builder() -> crate::operation::update_comment::builders::UpdateCommentInputBuilder {
        crate::operation::update_comment::builders::UpdateCommentInputBuilder::default()
    }
}

/// A builder for [`UpdateCommentInput`](crate::operation::update_comment::UpdateCommentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCommentInputBuilder {
    pub(crate) comment_id: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
}
impl UpdateCommentInputBuilder {
    /// <p>The system-generated ID of the comment you want to update. To get this ID, use <code>GetCommentsForComparedCommit</code> or <code>GetCommentsForPullRequest</code>.</p>
    pub fn comment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment_id = Some(input.into());
        self
    }
    /// <p>The system-generated ID of the comment you want to update. To get this ID, use <code>GetCommentsForComparedCommit</code> or <code>GetCommentsForPullRequest</code>.</p>
    pub fn set_comment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment_id = input;
        self
    }
    /// <p>The updated content to replace the existing content of the comment.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The updated content to replace the existing content of the comment.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCommentInput`](crate::operation::update_comment::UpdateCommentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_comment::UpdateCommentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_comment::UpdateCommentInput {
            comment_id: self.comment_id,
            content: self.content,
        })
    }
}
