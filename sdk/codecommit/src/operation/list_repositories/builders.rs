// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_repositories::_list_repositories_output::ListRepositoriesOutputBuilder;

pub use crate::operation::list_repositories::_list_repositories_input::ListRepositoriesInputBuilder;

/// Fluent builder constructing a request to `ListRepositories`.
///
/// <p>Gets information about one or more repositories.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListRepositoriesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_repositories::builders::ListRepositoriesInputBuilder,
}
impl ListRepositoriesFluentBuilder {
    /// Creates a new `ListRepositories`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_repositories::ListRepositories,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_repositories::ListRepositoriesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_repositories::paginator::ListRepositoriesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_repositories::paginator::ListRepositoriesPaginator {
        crate::operation::list_repositories::paginator::ListRepositoriesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The criteria used to sort the results of a list repositories operation.</p>
    pub fn sort_by(mut self, input: crate::types::SortByEnum) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The criteria used to sort the results of a list repositories operation.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::SortByEnum>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The order in which to sort the results of a list repositories operation.</p>
    pub fn order(mut self, input: crate::types::OrderEnum) -> Self {
        self.inner = self.inner.order(input);
        self
    }
    /// <p>The order in which to sort the results of a list repositories operation.</p>
    pub fn set_order(mut self, input: std::option::Option<crate::types::OrderEnum>) -> Self {
        self.inner = self.inner.set_order(input);
        self
    }
}
