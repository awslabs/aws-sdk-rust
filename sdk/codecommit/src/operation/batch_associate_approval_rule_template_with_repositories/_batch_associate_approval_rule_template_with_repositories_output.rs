// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
    /// <p>A list of names of the repositories that have been associated with the template.</p>
    #[doc(hidden)]
    pub associated_repository_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of any errors that might have occurred while attempting to create the association between the template and the repositories.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<
        std::vec::Vec<crate::types::BatchAssociateApprovalRuleTemplateWithRepositoriesError>,
    >,
    _request_id: Option<String>,
}
impl BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
    /// <p>A list of names of the repositories that have been associated with the template.</p>
    pub fn associated_repository_names(&self) -> std::option::Option<&[std::string::String]> {
        self.associated_repository_names.as_deref()
    }
    /// <p>A list of any errors that might have occurred while attempting to create the association between the template and the repositories.</p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::types::BatchAssociateApprovalRuleTemplateWithRepositoriesError]>
    {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateApprovalRuleTemplateWithRepositoriesOutput`](crate::operation::batch_associate_approval_rule_template_with_repositories::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput).
    pub fn builder() -> crate::operation::batch_associate_approval_rule_template_with_repositories::builders::BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder{
        crate::operation::batch_associate_approval_rule_template_with_repositories::builders::BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder::default()
    }
}

/// A builder for [`BatchAssociateApprovalRuleTemplateWithRepositoriesOutput`](crate::operation::batch_associate_approval_rule_template_with_repositories::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder {
    pub(crate) associated_repository_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) errors: std::option::Option<
        std::vec::Vec<crate::types::BatchAssociateApprovalRuleTemplateWithRepositoriesError>,
    >,
    _request_id: Option<String>,
}
impl BatchAssociateApprovalRuleTemplateWithRepositoriesOutputBuilder {
    /// Appends an item to `associated_repository_names`.
    ///
    /// To override the contents of this collection use [`set_associated_repository_names`](Self::set_associated_repository_names).
    ///
    /// <p>A list of names of the repositories that have been associated with the template.</p>
    pub fn associated_repository_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.associated_repository_names.unwrap_or_default();
        v.push(input.into());
        self.associated_repository_names = Some(v);
        self
    }
    /// <p>A list of names of the repositories that have been associated with the template.</p>
    pub fn set_associated_repository_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.associated_repository_names = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of any errors that might have occurred while attempting to create the association between the template and the repositories.</p>
    pub fn errors(
        mut self,
        input: crate::types::BatchAssociateApprovalRuleTemplateWithRepositoriesError,
    ) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>A list of any errors that might have occurred while attempting to create the association between the template and the repositories.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::BatchAssociateApprovalRuleTemplateWithRepositoriesError>,
        >,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchAssociateApprovalRuleTemplateWithRepositoriesOutput`](crate::operation::batch_associate_approval_rule_template_with_repositories::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput).
    pub fn build(self) -> crate::operation::batch_associate_approval_rule_template_with_repositories::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput{
        crate::operation::batch_associate_approval_rule_template_with_repositories::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput {
            associated_repository_names: self.associated_repository_names
            ,
            errors: self.errors
            ,
            _request_id: self._request_id,
        }
    }
}
