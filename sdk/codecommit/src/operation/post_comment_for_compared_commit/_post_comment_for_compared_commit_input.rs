// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PostCommentForComparedCommitInput {
    /// <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.</p>
    #[doc(hidden)]
    pub before_commit_id: std::option::Option<std::string::String>,
    /// <p>To establish the directionality of the comparison, the full commit ID of the after commit.</p>
    #[doc(hidden)]
    pub after_commit_id: std::option::Option<std::string::String>,
    /// <p>The location of the comparison where you want to comment.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::Location>,
    /// <p>The content of the comment you want to make.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
}
impl PostCommentForComparedCommitInput {
    /// <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.</p>
    pub fn before_commit_id(&self) -> std::option::Option<&str> {
        self.before_commit_id.as_deref()
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the after commit.</p>
    pub fn after_commit_id(&self) -> std::option::Option<&str> {
        self.after_commit_id.as_deref()
    }
    /// <p>The location of the comparison where you want to comment.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::Location> {
        self.location.as_ref()
    }
    /// <p>The content of the comment you want to make.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl PostCommentForComparedCommitInput {
    /// Creates a new builder-style object to manufacture [`PostCommentForComparedCommitInput`](crate::operation::post_comment_for_compared_commit::PostCommentForComparedCommitInput).
    pub fn builder() -> crate::operation::post_comment_for_compared_commit::builders::PostCommentForComparedCommitInputBuilder{
        crate::operation::post_comment_for_compared_commit::builders::PostCommentForComparedCommitInputBuilder::default()
    }
}

/// A builder for [`PostCommentForComparedCommitInput`](crate::operation::post_comment_for_compared_commit::PostCommentForComparedCommitInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PostCommentForComparedCommitInputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) before_commit_id: std::option::Option<std::string::String>,
    pub(crate) after_commit_id: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<crate::types::Location>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
}
impl PostCommentForComparedCommitInputBuilder {
    /// <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.</p>
    pub fn before_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.before_commit_id = Some(input.into());
        self
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.</p>
    pub fn set_before_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.before_commit_id = input;
        self
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the after commit.</p>
    pub fn after_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.after_commit_id = Some(input.into());
        self
    }
    /// <p>To establish the directionality of the comparison, the full commit ID of the after commit.</p>
    pub fn set_after_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.after_commit_id = input;
        self
    }
    /// <p>The location of the comparison where you want to comment.</p>
    pub fn location(mut self, input: crate::types::Location) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The location of the comparison where you want to comment.</p>
    pub fn set_location(mut self, input: std::option::Option<crate::types::Location>) -> Self {
        self.location = input;
        self
    }
    /// <p>The content of the comment you want to make.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The content of the comment you want to make.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// Consumes the builder and constructs a [`PostCommentForComparedCommitInput`](crate::operation::post_comment_for_compared_commit::PostCommentForComparedCommitInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::post_comment_for_compared_commit::PostCommentForComparedCommitInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::post_comment_for_compared_commit::PostCommentForComparedCommitInput {
                repository_name: self.repository_name,
                before_commit_id: self.before_commit_id,
                after_commit_id: self.after_commit_id,
                location: self.location,
                content: self.content,
                client_request_token: self.client_request_token,
            },
        )
    }
}
