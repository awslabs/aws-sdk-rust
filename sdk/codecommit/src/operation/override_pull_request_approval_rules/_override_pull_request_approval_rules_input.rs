// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OverridePullRequestApprovalRulesInput {
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub pull_request_id: ::std::option::Option<::std::string::String>,
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub revision_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub override_status: ::std::option::Option<crate::types::OverrideStatus>,
}
impl OverridePullRequestApprovalRulesInput {
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn pull_request_id(&self) -> ::std::option::Option<&str> {
        self.pull_request_id.as_deref()
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn revision_id(&self) -> ::std::option::Option<&str> {
        self.revision_id.as_deref()
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn override_status(&self) -> ::std::option::Option<&crate::types::OverrideStatus> {
        self.override_status.as_ref()
    }
}
impl OverridePullRequestApprovalRulesInput {
    /// Creates a new builder-style object to manufacture [`OverridePullRequestApprovalRulesInput`](crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput).
    pub fn builder() -> crate::operation::override_pull_request_approval_rules::builders::OverridePullRequestApprovalRulesInputBuilder {
        crate::operation::override_pull_request_approval_rules::builders::OverridePullRequestApprovalRulesInputBuilder::default()
    }
}

/// A builder for [`OverridePullRequestApprovalRulesInput`](crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OverridePullRequestApprovalRulesInputBuilder {
    pub(crate) pull_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) revision_id: ::std::option::Option<::std::string::String>,
    pub(crate) override_status: ::std::option::Option<crate::types::OverrideStatus>,
}
impl OverridePullRequestApprovalRulesInputBuilder {
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    /// This field is required.
    pub fn pull_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pull_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn set_pull_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pull_request_id = input;
        self
    }
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn get_pull_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pull_request_id
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    /// This field is required.
    pub fn revision_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn set_revision_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn get_revision_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision_id
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    /// This field is required.
    pub fn override_status(mut self, input: crate::types::OverrideStatus) -> Self {
        self.override_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn set_override_status(mut self, input: ::std::option::Option<crate::types::OverrideStatus>) -> Self {
        self.override_status = input;
        self
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn get_override_status(&self) -> &::std::option::Option<crate::types::OverrideStatus> {
        &self.override_status
    }
    /// Consumes the builder and constructs a [`OverridePullRequestApprovalRulesInput`](crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput {
                pull_request_id: self.pull_request_id,
                revision_id: self.revision_id,
                override_status: self.override_status,
            },
        )
    }
}
