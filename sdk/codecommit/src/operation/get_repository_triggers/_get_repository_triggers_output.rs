// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a get repository triggers operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRepositoryTriggersOutput {
    /// <p>The system-generated unique ID for the trigger.</p>
    pub configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>The JSON block of configuration information for each trigger.</p>
    pub triggers: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTrigger>>,
    _request_id: Option<String>,
}
impl GetRepositoryTriggersOutput {
    /// <p>The system-generated unique ID for the trigger.</p>
    pub fn configuration_id(&self) -> ::std::option::Option<&str> {
        self.configuration_id.as_deref()
    }
    /// <p>The JSON block of configuration information for each trigger.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggers.is_none()`.
    pub fn triggers(&self) -> &[crate::types::RepositoryTrigger] {
        self.triggers.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetRepositoryTriggersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRepositoryTriggersOutput {
    /// Creates a new builder-style object to manufacture [`GetRepositoryTriggersOutput`](crate::operation::get_repository_triggers::GetRepositoryTriggersOutput).
    pub fn builder() -> crate::operation::get_repository_triggers::builders::GetRepositoryTriggersOutputBuilder {
        crate::operation::get_repository_triggers::builders::GetRepositoryTriggersOutputBuilder::default()
    }
}

/// A builder for [`GetRepositoryTriggersOutput`](crate::operation::get_repository_triggers::GetRepositoryTriggersOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRepositoryTriggersOutputBuilder {
    pub(crate) configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) triggers: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTrigger>>,
    _request_id: Option<String>,
}
impl GetRepositoryTriggersOutputBuilder {
    /// <p>The system-generated unique ID for the trigger.</p>
    pub fn configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID for the trigger.</p>
    pub fn set_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_id = input;
        self
    }
    /// <p>The system-generated unique ID for the trigger.</p>
    pub fn get_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_id
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The JSON block of configuration information for each trigger.</p>
    pub fn triggers(mut self, input: crate::types::RepositoryTrigger) -> Self {
        let mut v = self.triggers.unwrap_or_default();
        v.push(input);
        self.triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The JSON block of configuration information for each trigger.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTrigger>>) -> Self {
        self.triggers = input;
        self
    }
    /// <p>The JSON block of configuration information for each trigger.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RepositoryTrigger>> {
        &self.triggers
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRepositoryTriggersOutput`](crate::operation::get_repository_triggers::GetRepositoryTriggersOutput).
    pub fn build(self) -> crate::operation::get_repository_triggers::GetRepositoryTriggersOutput {
        crate::operation::get_repository_triggers::GetRepositoryTriggersOutput {
            configuration_id: self.configuration_id,
            triggers: self.triggers,
            _request_id: self._request_id,
        }
    }
}
