// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCommentReactionsInput {
    /// <p>The ID of the comment for which you want to get reactions information.</p>
    #[doc(hidden)]
    pub comment_id: std::option::Option<std::string::String>,
    /// <p>Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.</p>
    #[doc(hidden)]
    pub reaction_user_arn: std::option::Option<std::string::String>,
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl GetCommentReactionsInput {
    /// <p>The ID of the comment for which you want to get reactions information.</p>
    pub fn comment_id(&self) -> std::option::Option<&str> {
        self.comment_id.as_deref()
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.</p>
    pub fn reaction_user_arn(&self) -> std::option::Option<&str> {
        self.reaction_user_arn.as_deref()
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl GetCommentReactionsInput {
    /// Creates a new builder-style object to manufacture [`GetCommentReactionsInput`](crate::operation::get_comment_reactions::GetCommentReactionsInput).
    pub fn builder(
    ) -> crate::operation::get_comment_reactions::builders::GetCommentReactionsInputBuilder {
        crate::operation::get_comment_reactions::builders::GetCommentReactionsInputBuilder::default(
        )
    }
}

/// A builder for [`GetCommentReactionsInput`](crate::operation::get_comment_reactions::GetCommentReactionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCommentReactionsInputBuilder {
    pub(crate) comment_id: std::option::Option<std::string::String>,
    pub(crate) reaction_user_arn: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl GetCommentReactionsInputBuilder {
    /// <p>The ID of the comment for which you want to get reactions information.</p>
    pub fn comment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment_id = Some(input.into());
        self
    }
    /// <p>The ID of the comment for which you want to get reactions information.</p>
    pub fn set_comment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment_id = input;
        self
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.</p>
    pub fn reaction_user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.reaction_user_arn = Some(input.into());
        self
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.</p>
    pub fn set_reaction_user_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reaction_user_arn = input;
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`GetCommentReactionsInput`](crate::operation::get_comment_reactions::GetCommentReactionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_comment_reactions::GetCommentReactionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_comment_reactions::GetCommentReactionsInput {
                comment_id: self.comment_id,
                reaction_user_arn: self.reaction_user_arn,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
