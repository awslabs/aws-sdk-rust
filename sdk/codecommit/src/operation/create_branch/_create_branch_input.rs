// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a create branch operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBranchInput {
    /// <p>The name of the repository in which you want to create the new branch.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The name of the new branch to create.</p>
    #[doc(hidden)]
    pub branch_name: std::option::Option<std::string::String>,
    /// <p>The ID of the commit to point the new branch to.</p>
    #[doc(hidden)]
    pub commit_id: std::option::Option<std::string::String>,
}
impl CreateBranchInput {
    /// <p>The name of the repository in which you want to create the new branch.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The name of the new branch to create.</p>
    pub fn branch_name(&self) -> std::option::Option<&str> {
        self.branch_name.as_deref()
    }
    /// <p>The ID of the commit to point the new branch to.</p>
    pub fn commit_id(&self) -> std::option::Option<&str> {
        self.commit_id.as_deref()
    }
}
impl CreateBranchInput {
    /// Creates a new builder-style object to manufacture [`CreateBranchInput`](crate::operation::create_branch::CreateBranchInput).
    pub fn builder() -> crate::operation::create_branch::builders::CreateBranchInputBuilder {
        crate::operation::create_branch::builders::CreateBranchInputBuilder::default()
    }
}

/// A builder for [`CreateBranchInput`](crate::operation::create_branch::CreateBranchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBranchInputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) branch_name: std::option::Option<std::string::String>,
    pub(crate) commit_id: std::option::Option<std::string::String>,
}
impl CreateBranchInputBuilder {
    /// <p>The name of the repository in which you want to create the new branch.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository in which you want to create the new branch.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the new branch to create.</p>
    pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch_name = Some(input.into());
        self
    }
    /// <p>The name of the new branch to create.</p>
    pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch_name = input;
        self
    }
    /// <p>The ID of the commit to point the new branch to.</p>
    pub fn commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.commit_id = Some(input.into());
        self
    }
    /// <p>The ID of the commit to point the new branch to.</p>
    pub fn set_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.commit_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBranchInput`](crate::operation::create_branch::CreateBranchInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_branch::CreateBranchInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_branch::CreateBranchInput {
            repository_name: self.repository_name,
            branch_name: self.branch_name,
            commit_id: self.commit_id,
        })
    }
}
