// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_unreferenced_merge_commit_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitOutput,
    crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CommitDoesNotExistException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::CommitDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CommitDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_commit_does_not_exist_exception::de_commit_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CommitMessageLengthExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::CommitMessageLengthExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CommitMessageLengthExceededExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_commit_message_length_exceeded_exception::de_commit_message_length_exceeded_exception_json_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CommitRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::CommitRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CommitRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_commit_required_exception::de_commit_required_exception_json_err(_response_body, output)
                        .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConcurrentReferenceUpdateException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::ConcurrentReferenceUpdateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConcurrentReferenceUpdateExceptionBuilder::default();
                    output = crate::protocol_serde::shape_concurrent_reference_update_exception::de_concurrent_reference_update_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionIntegrityChecksFailedException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::EncryptionIntegrityChecksFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyAccessDeniedException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::EncryptionKeyAccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyDisabledException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::EncryptionKeyDisabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyNotFoundException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::EncryptionKeyNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyUnavailableException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::EncryptionKeyUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "FileContentSizeLimitExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::FileContentSizeLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileContentSizeLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_file_content_size_limit_exceeded_exception::de_file_content_size_limit_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "FileModeRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::FileModeRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileModeRequiredExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_file_mode_required_exception::de_file_mode_required_exception_json_err(_response_body, output)
                            .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "FolderContentSizeLimitExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::FolderContentSizeLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FolderContentSizeLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_folder_content_size_limit_exceeded_exception::de_folder_content_size_limit_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidCommitException" => crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidCommitException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidCommitExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_commit_exception::de_invalid_commit_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidConflictDetailLevelException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidConflictDetailLevelException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidConflictDetailLevelExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_conflict_detail_level_exception::de_invalid_conflict_detail_level_exception_json_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidConflictResolutionException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidConflictResolutionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidConflictResolutionExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_conflict_resolution_exception::de_invalid_conflict_resolution_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidConflictResolutionStrategyException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidConflictResolutionStrategyException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidConflictResolutionStrategyExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_conflict_resolution_strategy_exception::de_invalid_conflict_resolution_strategy_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidEmailException" => crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidEmailException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidEmailExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_email_exception::de_invalid_email_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidFileModeException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidFileModeException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidFileModeExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_file_mode_exception::de_invalid_file_mode_exception_json_err(_response_body, output)
                            .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidMergeOptionException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidMergeOptionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidMergeOptionExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_merge_option_exception::de_invalid_merge_option_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidPathException" => crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidPathException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidPathExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_path_exception::de_invalid_path_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidReplacementContentException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidReplacementContentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidReplacementContentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_replacement_content_exception::de_invalid_replacement_content_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidReplacementTypeException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidReplacementTypeException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidReplacementTypeExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_replacement_type_exception::de_invalid_replacement_type_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidRepositoryNameException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::InvalidRepositoryNameException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRepositoryNameExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_repository_name_exception::de_invalid_repository_name_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ManualMergeRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::ManualMergeRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ManualMergeRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_manual_merge_required_exception::de_manual_merge_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MaximumConflictResolutionEntriesExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::MaximumConflictResolutionEntriesExceededException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::types::error::builders::MaximumConflictResolutionEntriesExceededExceptionBuilder::default();
                        output = crate::protocol_serde::shape_maximum_conflict_resolution_entries_exceeded_exception::de_maximum_conflict_resolution_entries_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        "MaximumFileContentToLoadExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::MaximumFileContentToLoadExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MaximumFileContentToLoadExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_maximum_file_content_to_load_exceeded_exception::de_maximum_file_content_to_load_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MaximumItemsToCompareExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::MaximumItemsToCompareExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MaximumItemsToCompareExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_maximum_items_to_compare_exceeded_exception::de_maximum_items_to_compare_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MergeOptionRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::MergeOptionRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MergeOptionRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_merge_option_required_exception::de_merge_option_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MultipleConflictResolutionEntriesException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::MultipleConflictResolutionEntriesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MultipleConflictResolutionEntriesExceptionBuilder::default();
                    output = crate::protocol_serde::shape_multiple_conflict_resolution_entries_exception::de_multiple_conflict_resolution_entries_exception_json_err(_response_body, output).map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "NameLengthExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::NameLengthExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NameLengthExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_name_length_exceeded_exception::de_name_length_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PathRequiredException" => crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::PathRequiredException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::PathRequiredExceptionBuilder::default();
                output = crate::protocol_serde::shape_path_required_exception::de_path_required_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ReplacementContentRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::ReplacementContentRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReplacementContentRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_replacement_content_required_exception::de_replacement_content_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ReplacementTypeRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::ReplacementTypeRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReplacementTypeRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_replacement_type_required_exception::de_replacement_type_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RepositoryDoesNotExistException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::RepositoryDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_repository_does_not_exist_exception::de_repository_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RepositoryNameRequiredException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::RepositoryNameRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryNameRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_repository_name_required_exception::de_repository_name_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TipsDivergenceExceededException" => {
            crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::TipsDivergenceExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TipsDivergenceExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_tips_divergence_exceeded_exception::de_tips_divergence_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_unreferenced_merge_commit_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitOutput,
    crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_unreferenced_merge_commit::builders::CreateUnreferencedMergeCommitOutputBuilder::default();
        output = crate::protocol_serde::shape_create_unreferenced_merge_commit::de_create_unreferenced_merge_commit(_response_body, output)
            .map_err(crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_unreferenced_merge_commit_input(
    input: &crate::operation::create_unreferenced_merge_commit::CreateUnreferencedMergeCommitInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_unreferenced_merge_commit_input::ser_create_unreferenced_merge_commit_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_create_unreferenced_merge_commit(
    value: &[u8],
    mut builder: crate::operation::create_unreferenced_merge_commit::builders::CreateUnreferencedMergeCommitOutputBuilder,
) -> Result<
    crate::operation::create_unreferenced_merge_commit::builders::CreateUnreferencedMergeCommitOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "commitId" => {
                    builder = builder.set_commit_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "treeId" => {
                    builder = builder.set_tree_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
