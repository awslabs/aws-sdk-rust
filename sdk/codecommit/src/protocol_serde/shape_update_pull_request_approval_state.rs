// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_pull_request_approval_state_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateOutput,
    crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ApprovalStateRequiredException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::ApprovalStateRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ApprovalStateRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_approval_state_required_exception::de_approval_state_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionIntegrityChecksFailedException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::EncryptionIntegrityChecksFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyAccessDeniedException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::EncryptionKeyAccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyDisabledException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::EncryptionKeyDisabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyNotFoundException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::EncryptionKeyNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyUnavailableException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::EncryptionKeyUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidApprovalStateException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::InvalidApprovalStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidApprovalStateExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_approval_state_exception::de_invalid_approval_state_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidPullRequestIdException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::InvalidPullRequestIdException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidPullRequestIdExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_pull_request_id_exception::de_invalid_pull_request_id_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidRevisionIdException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::InvalidRevisionIdException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRevisionIdExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_revision_id_exception::de_invalid_revision_id_exception_json_err(_response_body, output)
                            .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MaximumNumberOfApprovalsExceededException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::MaximumNumberOfApprovalsExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MaximumNumberOfApprovalsExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_maximum_number_of_approvals_exceeded_exception::de_maximum_number_of_approvals_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestAlreadyClosedException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::PullRequestAlreadyClosedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestAlreadyClosedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_already_closed_exception::de_pull_request_already_closed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestCannotBeApprovedByAuthorException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::PullRequestCannotBeApprovedByAuthorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestCannotBeApprovedByAuthorExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_cannot_be_approved_by_author_exception::de_pull_request_cannot_be_approved_by_author_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestDoesNotExistException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::PullRequestDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_does_not_exist_exception::de_pull_request_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestIdRequiredException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::PullRequestIdRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_id_required_exception::de_pull_request_id_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RevisionIdRequiredException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::RevisionIdRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RevisionIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_revision_id_required_exception::de_revision_id_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RevisionNotCurrentException" => {
            crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::RevisionNotCurrentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RevisionNotCurrentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_revision_not_current_exception::de_revision_not_current_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_pull_request_approval_state_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateOutput,
    crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_pull_request_approval_state::builders::UpdatePullRequestApprovalStateOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_pull_request_approval_state_input(
    input: &crate::operation::update_pull_request_approval_state::UpdatePullRequestApprovalStateInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_pull_request_approval_state_input::ser_update_pull_request_approval_state_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
