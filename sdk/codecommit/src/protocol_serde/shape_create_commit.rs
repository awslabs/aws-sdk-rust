// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_commit_input(
    input: &crate::operation::create_commit::CreateCommitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_commit_input::ser_create_commit_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_commit_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_commit::CreateCommitOutput,
    crate::operation::create_commit::CreateCommitError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_commit::CreateCommitError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BranchDoesNotExistException" => crate::operation::create_commit::CreateCommitError::BranchDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BranchDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_branch_does_not_exist_exception::de_branch_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "BranchNameIsTagNameException" => crate::operation::create_commit::CreateCommitError::BranchNameIsTagNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BranchNameIsTagNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_branch_name_is_tag_name_exception::de_branch_name_is_tag_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "BranchNameRequiredException" => crate::operation::create_commit::CreateCommitError::BranchNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BranchNameRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_branch_name_required_exception::de_branch_name_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CommitMessageLengthExceededException" => crate::operation::create_commit::CreateCommitError::CommitMessageLengthExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CommitMessageLengthExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_commit_message_length_exceeded_exception::de_commit_message_length_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "DirectoryNameConflictsWithFileNameException" => crate::operation::create_commit::CreateCommitError::DirectoryNameConflictsWithFileNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DirectoryNameConflictsWithFileNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_directory_name_conflicts_with_file_name_exception::de_directory_name_conflicts_with_file_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionIntegrityChecksFailedException" => crate::operation::create_commit::CreateCommitError::EncryptionIntegrityChecksFailedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyAccessDeniedException" => crate::operation::create_commit::CreateCommitError::EncryptionKeyAccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyDisabledException" => crate::operation::create_commit::CreateCommitError::EncryptionKeyDisabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyNotFoundException" => crate::operation::create_commit::CreateCommitError::EncryptionKeyNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyUnavailableException" => crate::operation::create_commit::CreateCommitError::EncryptionKeyUnavailableException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileContentAndSourceFileSpecifiedException" => crate::operation::create_commit::CreateCommitError::FileContentAndSourceFileSpecifiedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileContentAndSourceFileSpecifiedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_content_and_source_file_specified_exception::de_file_content_and_source_file_specified_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileContentSizeLimitExceededException" => crate::operation::create_commit::CreateCommitError::FileContentSizeLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileContentSizeLimitExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_content_size_limit_exceeded_exception::de_file_content_size_limit_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileDoesNotExistException" => crate::operation::create_commit::CreateCommitError::FileDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_does_not_exist_exception::de_file_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileEntryRequiredException" => crate::operation::create_commit::CreateCommitError::FileEntryRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileEntryRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_entry_required_exception::de_file_entry_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileModeRequiredException" => crate::operation::create_commit::CreateCommitError::FileModeRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileModeRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_mode_required_exception::de_file_mode_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FileNameConflictsWithDirectoryNameException" => crate::operation::create_commit::CreateCommitError::FileNameConflictsWithDirectoryNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FileNameConflictsWithDirectoryNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_name_conflicts_with_directory_name_exception::de_file_name_conflicts_with_directory_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FilePathConflictsWithSubmodulePathException" => crate::operation::create_commit::CreateCommitError::FilePathConflictsWithSubmodulePathException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FilePathConflictsWithSubmodulePathExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_file_path_conflicts_with_submodule_path_exception::de_file_path_conflicts_with_submodule_path_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FolderContentSizeLimitExceededException" => crate::operation::create_commit::CreateCommitError::FolderContentSizeLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FolderContentSizeLimitExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_folder_content_size_limit_exceeded_exception::de_folder_content_size_limit_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidBranchNameException" => crate::operation::create_commit::CreateCommitError::InvalidBranchNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidBranchNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_branch_name_exception::de_invalid_branch_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidDeletionParameterException" => crate::operation::create_commit::CreateCommitError::InvalidDeletionParameterException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidDeletionParameterExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_deletion_parameter_exception::de_invalid_deletion_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidEmailException" => crate::operation::create_commit::CreateCommitError::InvalidEmailException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidEmailExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_email_exception::de_invalid_email_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidFileModeException" => crate::operation::create_commit::CreateCommitError::InvalidFileModeException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidFileModeExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_file_mode_exception::de_invalid_file_mode_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidParentCommitIdException" => crate::operation::create_commit::CreateCommitError::InvalidParentCommitIdException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParentCommitIdExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_parent_commit_id_exception::de_invalid_parent_commit_id_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidPathException" => crate::operation::create_commit::CreateCommitError::InvalidPathException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidPathExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_path_exception::de_invalid_path_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidRepositoryNameException" => crate::operation::create_commit::CreateCommitError::InvalidRepositoryNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRepositoryNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_repository_name_exception::de_invalid_repository_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "MaximumFileEntriesExceededException" => crate::operation::create_commit::CreateCommitError::MaximumFileEntriesExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MaximumFileEntriesExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_maximum_file_entries_exceeded_exception::de_maximum_file_entries_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NameLengthExceededException" => crate::operation::create_commit::CreateCommitError::NameLengthExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NameLengthExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_name_length_exceeded_exception::de_name_length_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NoChangeException" => crate::operation::create_commit::CreateCommitError::NoChangeException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoChangeExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_change_exception::de_no_change_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ParentCommitDoesNotExistException" => crate::operation::create_commit::CreateCommitError::ParentCommitDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ParentCommitDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_parent_commit_does_not_exist_exception::de_parent_commit_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ParentCommitIdOutdatedException" => crate::operation::create_commit::CreateCommitError::ParentCommitIdOutdatedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ParentCommitIdOutdatedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_parent_commit_id_outdated_exception::de_parent_commit_id_outdated_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ParentCommitIdRequiredException" => crate::operation::create_commit::CreateCommitError::ParentCommitIdRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ParentCommitIdRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_parent_commit_id_required_exception::de_parent_commit_id_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "PathRequiredException" => crate::operation::create_commit::CreateCommitError::PathRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PathRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_path_required_exception::de_path_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "PutFileEntryConflictException" => crate::operation::create_commit::CreateCommitError::PutFileEntryConflictException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PutFileEntryConflictExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_put_file_entry_conflict_exception::de_put_file_entry_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "RepositoryDoesNotExistException" => crate::operation::create_commit::CreateCommitError::RepositoryDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_repository_does_not_exist_exception::de_repository_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "RepositoryNameRequiredException" => crate::operation::create_commit::CreateCommitError::RepositoryNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryNameRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_repository_name_required_exception::de_repository_name_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "RestrictedSourceFileException" => crate::operation::create_commit::CreateCommitError::RestrictedSourceFileException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RestrictedSourceFileExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_restricted_source_file_exception::de_restricted_source_file_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "SamePathRequestException" => crate::operation::create_commit::CreateCommitError::SamePathRequestException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::SamePathRequestExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_same_path_request_exception::de_same_path_request_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "SourceFileOrContentRequiredException" => crate::operation::create_commit::CreateCommitError::SourceFileOrContentRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::SourceFileOrContentRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_source_file_or_content_required_exception::de_source_file_or_content_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::create_commit::CreateCommitError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_commit_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_commit::CreateCommitOutput,
    crate::operation::create_commit::CreateCommitError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::create_commit::builders::CreateCommitOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_commit::de_create_commit(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::create_commit::CreateCommitError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_create_commit(
    value: &[u8],
    mut builder: crate::operation::create_commit::builders::CreateCommitOutputBuilder,
) -> Result<
    crate::operation::create_commit::builders::CreateCommitOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "commitId" => {
                        builder = builder.set_commit_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "treeId" => {
                        builder = builder.set_tree_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "filesAdded" => {
                        builder = builder.set_files_added(
                            crate::protocol_serde::shape_files_metadata::de_files_metadata(tokens)?,
                        );
                    }
                    "filesUpdated" => {
                        builder = builder.set_files_updated(
                            crate::protocol_serde::shape_files_metadata::de_files_metadata(tokens)?,
                        );
                    }
                    "filesDeleted" => {
                        builder = builder.set_files_deleted(
                            crate::protocol_serde::shape_files_metadata::de_files_metadata(tokens)?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
