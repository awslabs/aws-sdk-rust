// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_pull_request_approval_rule_content_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentOutput,
    crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ApprovalRuleContentRequiredException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::ApprovalRuleContentRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ApprovalRuleContentRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_approval_rule_content_required_exception::de_approval_rule_content_required_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ApprovalRuleDoesNotExistException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::ApprovalRuleDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ApprovalRuleDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_approval_rule_does_not_exist_exception::de_approval_rule_does_not_exist_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ApprovalRuleNameRequiredException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::ApprovalRuleNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ApprovalRuleNameRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_approval_rule_name_required_exception::de_approval_rule_name_required_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "CannotModifyApprovalRuleFromTemplateException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::CannotModifyApprovalRuleFromTemplateException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CannotModifyApprovalRuleFromTemplateExceptionBuilder::default();
                    output = crate::protocol_serde::shape_cannot_modify_approval_rule_from_template_exception::de_cannot_modify_approval_rule_from_template_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "EncryptionIntegrityChecksFailedException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::EncryptionIntegrityChecksFailedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "EncryptionKeyAccessDeniedException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::EncryptionKeyAccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "EncryptionKeyDisabledException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::EncryptionKeyDisabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "EncryptionKeyNotFoundException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::EncryptionKeyNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "EncryptionKeyUnavailableException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::EncryptionKeyUnavailableException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InvalidApprovalRuleContentException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::InvalidApprovalRuleContentException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidApprovalRuleContentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_approval_rule_content_exception::de_invalid_approval_rule_content_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InvalidApprovalRuleNameException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::InvalidApprovalRuleNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidApprovalRuleNameExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_approval_rule_name_exception::de_invalid_approval_rule_name_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InvalidPullRequestIdException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::InvalidPullRequestIdException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidPullRequestIdExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_pull_request_id_exception::de_invalid_pull_request_id_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InvalidRuleContentSha256Exception" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::InvalidRuleContentSha256Exception({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRuleContentSha256ExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_rule_content_sha256_exception::de_invalid_rule_content_sha256_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "PullRequestAlreadyClosedException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::PullRequestAlreadyClosedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestAlreadyClosedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_already_closed_exception::de_pull_request_already_closed_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "PullRequestDoesNotExistException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::PullRequestDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_does_not_exist_exception::de_pull_request_does_not_exist_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "PullRequestIdRequiredException" => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::PullRequestIdRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_id_required_exception::de_pull_request_id_required_exception_json_err(_response_body, output).map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_pull_request_approval_rule_content_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentOutput,
    crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::update_pull_request_approval_rule_content::builders::UpdatePullRequestApprovalRuleContentOutputBuilder::default();
        output = crate::protocol_serde::shape_update_pull_request_approval_rule_content::de_update_pull_request_approval_rule_content(
            _response_body,
            output,
        )
        .map_err(crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::update_pull_request_approval_rule_content_output_correct_errors(output).build()
    })
}

pub fn ser_update_pull_request_approval_rule_content_input(
    input: &crate::operation::update_pull_request_approval_rule_content::UpdatePullRequestApprovalRuleContentInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_pull_request_approval_rule_content_input::ser_update_pull_request_approval_rule_content_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_update_pull_request_approval_rule_content(
    value: &[u8],
    mut builder: crate::operation::update_pull_request_approval_rule_content::builders::UpdatePullRequestApprovalRuleContentOutputBuilder,
) -> Result<
    crate::operation::update_pull_request_approval_rule_content::builders::UpdatePullRequestApprovalRuleContentOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "approvalRule" => {
                    builder = builder.set_approval_rule(crate::protocol_serde::shape_approval_rule::de_approval_rule(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
