// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_merge_branches_by_squash_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::merge_branches_by_squash::MergeBranchesBySquashInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.repository_name {
        object.key("repositoryName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_commit_specifier {
        object.key("sourceCommitSpecifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination_commit_specifier {
        object.key("destinationCommitSpecifier").string(var_3.as_str());
    }
    if let Some(var_4) = &input.target_branch {
        object.key("targetBranch").string(var_4.as_str());
    }
    if let Some(var_5) = &input.conflict_detail_level {
        object.key("conflictDetailLevel").string(var_5.as_str());
    }
    if let Some(var_6) = &input.conflict_resolution_strategy {
        object.key("conflictResolutionStrategy").string(var_6.as_str());
    }
    if let Some(var_7) = &input.author_name {
        object.key("authorName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.email {
        object.key("email").string(var_8.as_str());
    }
    if let Some(var_9) = &input.commit_message {
        object.key("commitMessage").string(var_9.as_str());
    }
    if let Some(var_10) = &input.keep_empty_folders {
        object.key("keepEmptyFolders").boolean(*var_10);
    }
    if let Some(var_11) = &input.conflict_resolution {
        #[allow(unused_mut)]
        let mut object_12 = object.key("conflictResolution").start_object();
        crate::protocol_serde::shape_conflict_resolution::ser_conflict_resolution(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
