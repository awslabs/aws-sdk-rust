// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_override_pull_request_approval_rules_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesOutput,
    crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "EncryptionIntegrityChecksFailedException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::EncryptionIntegrityChecksFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(_response_body, output).map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyAccessDeniedException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::EncryptionKeyAccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyDisabledException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::EncryptionKeyDisabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyNotFoundException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::EncryptionKeyNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyUnavailableException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::EncryptionKeyUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidOverrideStatusException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::InvalidOverrideStatusException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidOverrideStatusExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_override_status_exception::de_invalid_override_status_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidPullRequestIdException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::InvalidPullRequestIdException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidPullRequestIdExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_pull_request_id_exception::de_invalid_pull_request_id_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidRevisionIdException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::InvalidRevisionIdException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRevisionIdExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_revision_id_exception::de_invalid_revision_id_exception_json_err(_response_body, output)
                            .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OverrideAlreadySetException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::OverrideAlreadySetException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OverrideAlreadySetExceptionBuilder::default();
                    output = crate::protocol_serde::shape_override_already_set_exception::de_override_already_set_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OverrideStatusRequiredException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::OverrideStatusRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OverrideStatusRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_override_status_required_exception::de_override_status_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestAlreadyClosedException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::PullRequestAlreadyClosedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestAlreadyClosedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_already_closed_exception::de_pull_request_already_closed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestDoesNotExistException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::PullRequestDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_does_not_exist_exception::de_pull_request_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestIdRequiredException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::PullRequestIdRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_id_required_exception::de_pull_request_id_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RevisionIdRequiredException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::RevisionIdRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RevisionIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_revision_id_required_exception::de_revision_id_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RevisionNotCurrentException" => {
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::RevisionNotCurrentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RevisionNotCurrentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_revision_not_current_exception::de_revision_not_current_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_override_pull_request_approval_rules_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesOutput,
    crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::override_pull_request_approval_rules::builders::OverridePullRequestApprovalRulesOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_override_pull_request_approval_rules_input(
    input: &crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_override_pull_request_approval_rules_input::ser_override_pull_request_approval_rules_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
