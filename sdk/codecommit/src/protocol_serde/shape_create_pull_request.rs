// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_pull_request_input(
    input: &crate::operation::create_pull_request::CreatePullRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_pull_request_input::ser_create_pull_request_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_pull_request_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_pull_request::CreatePullRequestOutput,
    crate::operation::create_pull_request::CreatePullRequestError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::create_pull_request::CreatePullRequestError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientRequestTokenRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::ClientRequestTokenRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ClientRequestTokenRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_client_request_token_required_exception::de_client_request_token_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionIntegrityChecksFailedException" => crate::operation::create_pull_request::CreatePullRequestError::EncryptionIntegrityChecksFailedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyAccessDeniedException" => crate::operation::create_pull_request::CreatePullRequestError::EncryptionKeyAccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyDisabledException" => crate::operation::create_pull_request::CreatePullRequestError::EncryptionKeyDisabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyNotFoundException" => crate::operation::create_pull_request::CreatePullRequestError::EncryptionKeyNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EncryptionKeyUnavailableException" => crate::operation::create_pull_request::CreatePullRequestError::EncryptionKeyUnavailableException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "IdempotencyParameterMismatchException" => crate::operation::create_pull_request::CreatePullRequestError::IdempotencyParameterMismatchException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IdempotencyParameterMismatchExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_idempotency_parameter_mismatch_exception::de_idempotency_parameter_mismatch_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidClientRequestTokenException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidClientRequestTokenException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidClientRequestTokenExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_client_request_token_exception::de_invalid_client_request_token_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidDescriptionException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidDescriptionException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidDescriptionExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_description_exception::de_invalid_description_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidReferenceNameException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidReferenceNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidReferenceNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_reference_name_exception::de_invalid_reference_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidRepositoryNameException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidRepositoryNameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRepositoryNameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_repository_name_exception::de_invalid_repository_name_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidTargetException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidTargetException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidTargetExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_target_exception::de_invalid_target_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidTargetsException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidTargetsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidTargetsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_targets_exception::de_invalid_targets_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidTitleException" => crate::operation::create_pull_request::CreatePullRequestError::InvalidTitleException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidTitleExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_title_exception::de_invalid_title_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "MaximumOpenPullRequestsExceededException" => crate::operation::create_pull_request::CreatePullRequestError::MaximumOpenPullRequestsExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MaximumOpenPullRequestsExceededExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_maximum_open_pull_requests_exceeded_exception::de_maximum_open_pull_requests_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "MultipleRepositoriesInPullRequestException" => crate::operation::create_pull_request::CreatePullRequestError::MultipleRepositoriesInPullRequestException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MultipleRepositoriesInPullRequestExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_multiple_repositories_in_pull_request_exception::de_multiple_repositories_in_pull_request_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ReferenceDoesNotExistException" => crate::operation::create_pull_request::CreatePullRequestError::ReferenceDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReferenceDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_reference_does_not_exist_exception::de_reference_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ReferenceNameRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::ReferenceNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReferenceNameRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_reference_name_required_exception::de_reference_name_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ReferenceTypeNotSupportedException" => crate::operation::create_pull_request::CreatePullRequestError::ReferenceTypeNotSupportedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReferenceTypeNotSupportedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_reference_type_not_supported_exception::de_reference_type_not_supported_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "RepositoryDoesNotExistException" => crate::operation::create_pull_request::CreatePullRequestError::RepositoryDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_repository_does_not_exist_exception::de_repository_does_not_exist_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "RepositoryNameRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::RepositoryNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::RepositoryNameRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_repository_name_required_exception::de_repository_name_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "SourceAndDestinationAreSameException" => crate::operation::create_pull_request::CreatePullRequestError::SourceAndDestinationAreSameException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::SourceAndDestinationAreSameExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_source_and_destination_are_same_exception::de_source_and_destination_are_same_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TargetRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::TargetRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TargetRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_target_required_exception::de_target_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TargetsRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::TargetsRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TargetsRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_targets_required_exception::de_targets_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TitleRequiredException" => crate::operation::create_pull_request::CreatePullRequestError::TitleRequiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TitleRequiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_title_required_exception::de_title_required_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::create_pull_request::CreatePullRequestError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_pull_request_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_pull_request::CreatePullRequestOutput,
    crate::operation::create_pull_request::CreatePullRequestError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_pull_request::builders::CreatePullRequestOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_pull_request::de_create_pull_request(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::create_pull_request::CreatePullRequestError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_create_pull_request(
    value: &[u8],
    mut builder: crate::operation::create_pull_request::builders::CreatePullRequestOutputBuilder,
) -> Result<
    crate::operation::create_pull_request::builders::CreatePullRequestOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "pullRequest" => {
                        builder = builder.set_pull_request(
                            crate::protocol_serde::shape_pull_request::de_pull_request(tokens)?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
