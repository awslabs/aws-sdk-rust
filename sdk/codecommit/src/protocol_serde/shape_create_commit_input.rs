// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_commit_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_commit::CreateCommitInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.repository_name {
        object.key("repositoryName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.branch_name {
        object.key("branchName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.parent_commit_id {
        object.key("parentCommitId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.author_name {
        object.key("authorName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.email {
        object.key("email").string(var_5.as_str());
    }
    if let Some(var_6) = &input.commit_message {
        object.key("commitMessage").string(var_6.as_str());
    }
    if input.keep_empty_folders {
        object
            .key("keepEmptyFolders")
            .boolean(input.keep_empty_folders);
    }
    if let Some(var_7) = &input.put_files {
        let mut array_8 = object.key("putFiles").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_put_file_entry::ser_put_file_entry(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.delete_files {
        let mut array_12 = object.key("deleteFiles").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_delete_file_entry::ser_delete_file_entry(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.set_file_modes {
        let mut array_16 = object.key("setFileModes").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_set_file_mode_entry::ser_set_file_mode_entry(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
