// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_commit_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_commit::CreateCommitInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.repository_name {
        object.key("repositoryName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.branch_name {
        object.key("branchName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.parent_commit_id {
        object.key("parentCommitId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.author_name {
        object.key("authorName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.email {
        object.key("email").string(var_5.as_str());
    }
    if let Some(var_6) = &input.commit_message {
        object.key("commitMessage").string(var_6.as_str());
    }
    if let Some(var_7) = &input.keep_empty_folders {
        object.key("keepEmptyFolders").boolean(*var_7);
    }
    if let Some(var_8) = &input.put_files {
        let mut array_9 = object.key("putFiles").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_put_file_entry::ser_put_file_entry(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.delete_files {
        let mut array_13 = object.key("deleteFiles").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_delete_file_entry::ser_delete_file_entry(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.set_file_modes {
        let mut array_17 = object.key("setFileModes").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_set_file_mode_entry::ser_set_file_mode_entry(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
