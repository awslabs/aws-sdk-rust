// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_pull_request_approval_rule_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleOutput,
    crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ApprovalRuleNameRequiredException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::ApprovalRuleNameRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ApprovalRuleNameRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_approval_rule_name_required_exception::de_approval_rule_name_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CannotDeleteApprovalRuleFromTemplateException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::CannotDeleteApprovalRuleFromTemplateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CannotDeleteApprovalRuleFromTemplateExceptionBuilder::default();
                    output = crate::protocol_serde::shape_cannot_delete_approval_rule_from_template_exception::de_cannot_delete_approval_rule_from_template_exception_json_err(_response_body, output).map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionIntegrityChecksFailedException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::EncryptionIntegrityChecksFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionIntegrityChecksFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_integrity_checks_failed_exception::de_encryption_integrity_checks_failed_exception_json_err(_response_body, output).map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyAccessDeniedException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::EncryptionKeyAccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyAccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_access_denied_exception::de_encryption_key_access_denied_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyDisabledException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::EncryptionKeyDisabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyDisabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_disabled_exception::de_encryption_key_disabled_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyNotFoundException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::EncryptionKeyNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_not_found_exception::de_encryption_key_not_found_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EncryptionKeyUnavailableException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::EncryptionKeyUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EncryptionKeyUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_encryption_key_unavailable_exception::de_encryption_key_unavailable_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidApprovalRuleNameException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::InvalidApprovalRuleNameException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidApprovalRuleNameExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_approval_rule_name_exception::de_invalid_approval_rule_name_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidPullRequestIdException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::InvalidPullRequestIdException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidPullRequestIdExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_pull_request_id_exception::de_invalid_pull_request_id_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestAlreadyClosedException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::PullRequestAlreadyClosedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestAlreadyClosedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_already_closed_exception::de_pull_request_already_closed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestDoesNotExistException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::PullRequestDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_does_not_exist_exception::de_pull_request_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PullRequestIdRequiredException" => {
            crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::PullRequestIdRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PullRequestIdRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_pull_request_id_required_exception::de_pull_request_id_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_pull_request_approval_rule_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleOutput,
    crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_pull_request_approval_rule::builders::DeletePullRequestApprovalRuleOutputBuilder::default();
        output = crate::protocol_serde::shape_delete_pull_request_approval_rule::de_delete_pull_request_approval_rule(_response_body, output)
            .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::delete_pull_request_approval_rule_output_correct_errors(output)
            .build()
            .map_err(crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleError::unhandled)?
    })
}

pub fn ser_delete_pull_request_approval_rule_input(
    input: &crate::operation::delete_pull_request_approval_rule::DeletePullRequestApprovalRuleInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_delete_pull_request_approval_rule_input::ser_delete_pull_request_approval_rule_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_delete_pull_request_approval_rule(
    value: &[u8],
    mut builder: crate::operation::delete_pull_request_approval_rule::builders::DeletePullRequestApprovalRuleOutputBuilder,
) -> Result<
    crate::operation::delete_pull_request_approval_rule::builders::DeletePullRequestApprovalRuleOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "approvalRuleId" => {
                    builder = builder.set_approval_rule_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
