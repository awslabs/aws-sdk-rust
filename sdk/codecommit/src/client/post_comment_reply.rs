// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PostCommentReply`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`in_reply_to(impl Into<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::in_reply_to) / [`set_in_reply_to(Option<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::set_in_reply_to): <p>The system-generated ID of the comment to which you want to reply. To get this ID, use <code>GetCommentsForComparedCommit</code> or <code>GetCommentsForPullRequest</code>.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::set_client_request_token): <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    ///   - [`content(impl Into<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::content) / [`set_content(Option<String>)`](crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::set_content): <p>The contents of your reply to a comment.</p>
    /// - On success, responds with [`PostCommentReplyOutput`](crate::operation::post_comment_reply::PostCommentReplyOutput) with field(s):
    ///   - [`comment(Option<Comment>)`](crate::operation::post_comment_reply::PostCommentReplyOutput::comment): <p>Information about the reply to a comment.</p>
    /// - On failure, responds with [`SdkError<PostCommentReplyError>`](crate::operation::post_comment_reply::PostCommentReplyError)
    pub fn post_comment_reply(
        &self,
    ) -> crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder {
        crate::operation::post_comment_reply::builders::PostCommentReplyFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
