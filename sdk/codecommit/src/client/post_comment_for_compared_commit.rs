// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PostCommentForComparedCommit`](crate::client::fluent_builders::PostCommentForComparedCommit) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_repository_name): <p>The name of the repository where you want to post a comment on the comparison between commits.</p>
    ///   - [`before_commit_id(impl Into<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::before_commit_id) / [`set_before_commit_id(Option<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_before_commit_id): <p>To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.</p>
    ///   - [`after_commit_id(impl Into<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::after_commit_id) / [`set_after_commit_id(Option<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_after_commit_id): <p>To establish the directionality of the comparison, the full commit ID of the after commit.</p>
    ///   - [`location(Location)`](crate::client::fluent_builders::PostCommentForComparedCommit::location) / [`set_location(Option<Location>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_location): <p>The location of the comparison where you want to comment.</p>
    ///   - [`content(impl Into<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::content) / [`set_content(Option<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_content): <p>The content of the comment you want to make.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::PostCommentForComparedCommit::set_client_request_token): <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p>
    /// - On success, responds with [`PostCommentForComparedCommitOutput`](crate::output::PostCommentForComparedCommitOutput) with field(s):
    ///   - [`repository_name(Option<String>)`](crate::output::PostCommentForComparedCommitOutput::repository_name): <p>The name of the repository where you posted a comment on the comparison between commits.</p>
    ///   - [`before_commit_id(Option<String>)`](crate::output::PostCommentForComparedCommitOutput::before_commit_id): <p>In the directionality you established, the full commit ID of the before commit.</p>
    ///   - [`after_commit_id(Option<String>)`](crate::output::PostCommentForComparedCommitOutput::after_commit_id): <p>In the directionality you established, the full commit ID of the after commit.</p>
    ///   - [`before_blob_id(Option<String>)`](crate::output::PostCommentForComparedCommitOutput::before_blob_id): <p>In the directionality you established, the blob ID of the before blob.</p>
    ///   - [`after_blob_id(Option<String>)`](crate::output::PostCommentForComparedCommitOutput::after_blob_id): <p>In the directionality you established, the blob ID of the after blob.</p>
    ///   - [`location(Option<Location>)`](crate::output::PostCommentForComparedCommitOutput::location): <p>The location of the comment in the comparison between the two commits.</p>
    ///   - [`comment(Option<Comment>)`](crate::output::PostCommentForComparedCommitOutput::comment): <p>The content of the comment you posted.</p>
    /// - On failure, responds with [`SdkError<PostCommentForComparedCommitError>`](crate::error::PostCommentForComparedCommitError)
    pub fn post_comment_for_compared_commit(
        &self,
    ) -> crate::client::fluent_builders::PostCommentForComparedCommit {
        crate::client::fluent_builders::PostCommentForComparedCommit::new(self.handle.clone())
    }
}
