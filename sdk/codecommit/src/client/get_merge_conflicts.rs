// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetMergeConflicts`](crate::client::fluent_builders::GetMergeConflicts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetMergeConflicts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::GetMergeConflicts::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::GetMergeConflicts::set_repository_name): <p>The name of the repository where the pull request was created.</p>
    ///   - [`destination_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::GetMergeConflicts::destination_commit_specifier) / [`set_destination_commit_specifier(Option<String>)`](crate::client::fluent_builders::GetMergeConflicts::set_destination_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`source_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::GetMergeConflicts::source_commit_specifier) / [`set_source_commit_specifier(Option<String>)`](crate::client::fluent_builders::GetMergeConflicts::set_source_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`merge_option(MergeOptionTypeEnum)`](crate::client::fluent_builders::GetMergeConflicts::merge_option) / [`set_merge_option(Option<MergeOptionTypeEnum>)`](crate::client::fluent_builders::GetMergeConflicts::set_merge_option): <p>The merge option or strategy you want to use to merge the code. </p>
    ///   - [`conflict_detail_level(ConflictDetailLevelTypeEnum)`](crate::client::fluent_builders::GetMergeConflicts::conflict_detail_level) / [`set_conflict_detail_level(Option<ConflictDetailLevelTypeEnum>)`](crate::client::fluent_builders::GetMergeConflicts::set_conflict_detail_level): <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    ///   - [`max_conflict_files(i32)`](crate::client::fluent_builders::GetMergeConflicts::max_conflict_files) / [`set_max_conflict_files(Option<i32>)`](crate::client::fluent_builders::GetMergeConflicts::set_max_conflict_files): <p>The maximum number of files to include in the output.</p>
    ///   - [`conflict_resolution_strategy(ConflictResolutionStrategyTypeEnum)`](crate::client::fluent_builders::GetMergeConflicts::conflict_resolution_strategy) / [`set_conflict_resolution_strategy(Option<ConflictResolutionStrategyTypeEnum>)`](crate::client::fluent_builders::GetMergeConflicts::set_conflict_resolution_strategy): <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetMergeConflicts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetMergeConflicts::set_next_token): <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    /// - On success, responds with [`GetMergeConflictsOutput`](crate::output::GetMergeConflictsOutput) with field(s):
    ///   - [`mergeable(bool)`](crate::output::GetMergeConflictsOutput::mergeable): <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    ///   - [`destination_commit_id(Option<String>)`](crate::output::GetMergeConflictsOutput::destination_commit_id): <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    ///   - [`source_commit_id(Option<String>)`](crate::output::GetMergeConflictsOutput::source_commit_id): <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    ///   - [`base_commit_id(Option<String>)`](crate::output::GetMergeConflictsOutput::base_commit_id): <p>The commit ID of the merge base.</p>
    ///   - [`conflict_metadata_list(Option<Vec<ConflictMetadata>>)`](crate::output::GetMergeConflictsOutput::conflict_metadata_list): <p>A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetMergeConflictsOutput::next_token): <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    /// - On failure, responds with [`SdkError<GetMergeConflictsError>`](crate::error::GetMergeConflictsError)
    pub fn get_merge_conflicts(&self) -> crate::client::fluent_builders::GetMergeConflicts {
        crate::client::fluent_builders::GetMergeConflicts::new(self.handle.clone())
    }
}
