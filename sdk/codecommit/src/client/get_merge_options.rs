// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetMergeOptions`](crate::client::fluent_builders::GetMergeOptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::GetMergeOptions::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::GetMergeOptions::set_repository_name): <p>The name of the repository that contains the commits about which you want to get merge options.</p>
    ///   - [`source_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::GetMergeOptions::source_commit_specifier) / [`set_source_commit_specifier(Option<String>)`](crate::client::fluent_builders::GetMergeOptions::set_source_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`destination_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::GetMergeOptions::destination_commit_specifier) / [`set_destination_commit_specifier(Option<String>)`](crate::client::fluent_builders::GetMergeOptions::set_destination_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`conflict_detail_level(ConflictDetailLevelTypeEnum)`](crate::client::fluent_builders::GetMergeOptions::conflict_detail_level) / [`set_conflict_detail_level(Option<ConflictDetailLevelTypeEnum>)`](crate::client::fluent_builders::GetMergeOptions::set_conflict_detail_level): <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    ///   - [`conflict_resolution_strategy(ConflictResolutionStrategyTypeEnum)`](crate::client::fluent_builders::GetMergeOptions::conflict_resolution_strategy) / [`set_conflict_resolution_strategy(Option<ConflictResolutionStrategyTypeEnum>)`](crate::client::fluent_builders::GetMergeOptions::set_conflict_resolution_strategy): <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    /// - On success, responds with [`GetMergeOptionsOutput`](crate::output::GetMergeOptionsOutput) with field(s):
    ///   - [`merge_options(Option<Vec<MergeOptionTypeEnum>>)`](crate::output::GetMergeOptionsOutput::merge_options): <p>The merge option or strategy used to merge the code.</p>
    ///   - [`source_commit_id(Option<String>)`](crate::output::GetMergeOptionsOutput::source_commit_id): <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    ///   - [`destination_commit_id(Option<String>)`](crate::output::GetMergeOptionsOutput::destination_commit_id): <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    ///   - [`base_commit_id(Option<String>)`](crate::output::GetMergeOptionsOutput::base_commit_id): <p>The commit ID of the merge base.</p>
    /// - On failure, responds with [`SdkError<GetMergeOptionsError>`](crate::error::GetMergeOptionsError)
    pub fn get_merge_options(&self) -> crate::client::fluent_builders::GetMergeOptions {
        crate::client::fluent_builders::GetMergeOptions::new(self.handle.clone())
    }
}
