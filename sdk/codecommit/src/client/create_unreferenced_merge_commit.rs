// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUnreferencedMergeCommit`](crate::client::fluent_builders::CreateUnreferencedMergeCommit) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_repository_name): <p>The name of the repository where you want to create the unreferenced merge commit.</p>
    ///   - [`source_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::source_commit_specifier) / [`set_source_commit_specifier(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_source_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`destination_commit_specifier(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::destination_commit_specifier) / [`set_destination_commit_specifier(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_destination_commit_specifier): <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).</p>
    ///   - [`merge_option(MergeOptionTypeEnum)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::merge_option) / [`set_merge_option(Option<MergeOptionTypeEnum>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_merge_option): <p>The merge option or strategy you want to use to merge the code.</p>
    ///   - [`conflict_detail_level(ConflictDetailLevelTypeEnum)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::conflict_detail_level) / [`set_conflict_detail_level(Option<ConflictDetailLevelTypeEnum>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_conflict_detail_level): <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.</p>
    ///   - [`conflict_resolution_strategy(ConflictResolutionStrategyTypeEnum)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::conflict_resolution_strategy) / [`set_conflict_resolution_strategy(Option<ConflictResolutionStrategyTypeEnum>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_conflict_resolution_strategy): <p>Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.</p>
    ///   - [`author_name(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::author_name) / [`set_author_name(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_author_name): <p>The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit.</p>
    ///   - [`email(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::email) / [`set_email(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_email): <p>The email address for the person who created the unreferenced commit.</p>
    ///   - [`commit_message(impl Into<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::commit_message) / [`set_commit_message(Option<String>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_commit_message): <p>The commit message for the unreferenced commit.</p>
    ///   - [`keep_empty_folders(bool)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::keep_empty_folders) / [`set_keep_empty_folders(bool)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_keep_empty_folders): <p>If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.</p>
    ///   - [`conflict_resolution(ConflictResolution)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::conflict_resolution) / [`set_conflict_resolution(Option<ConflictResolution>)`](crate::client::fluent_builders::CreateUnreferencedMergeCommit::set_conflict_resolution): <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.</p>
    /// - On success, responds with [`CreateUnreferencedMergeCommitOutput`](crate::output::CreateUnreferencedMergeCommitOutput) with field(s):
    ///   - [`commit_id(Option<String>)`](crate::output::CreateUnreferencedMergeCommitOutput::commit_id): <p>The full commit ID of the commit that contains your merge results.</p>
    ///   - [`tree_id(Option<String>)`](crate::output::CreateUnreferencedMergeCommitOutput::tree_id): <p>The full SHA-1 pointer of the tree information for the commit that contains the merge results.</p>
    /// - On failure, responds with [`SdkError<CreateUnreferencedMergeCommitError>`](crate::error::CreateUnreferencedMergeCommitError)
    pub fn create_unreferenced_merge_commit(
        &self,
    ) -> crate::client::fluent_builders::CreateUnreferencedMergeCommit {
        crate::client::fluent_builders::CreateUnreferencedMergeCommit::new(self.handle.clone())
    }
}
