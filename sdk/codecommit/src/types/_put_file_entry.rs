// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a file added or updated as part of a commit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutFileEntry {
    /// <p>The full path to the file in the repository, including the name of the file.</p>
    pub file_path: ::std::string::String,
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub file_mode: ::std::option::Option<crate::types::FileModeTypeEnum>,
    /// <p>The content of the file, if a source file is not specified.</p>
    pub file_content: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.</p>
    pub source_file: ::std::option::Option<crate::types::SourceFileSpecifier>,
}
impl PutFileEntry {
    /// <p>The full path to the file in the repository, including the name of the file.</p>
    pub fn file_path(&self) -> &str {
        use std::ops::Deref;
        self.file_path.deref()
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn file_mode(&self) -> ::std::option::Option<&crate::types::FileModeTypeEnum> {
        self.file_mode.as_ref()
    }
    /// <p>The content of the file, if a source file is not specified.</p>
    pub fn file_content(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.file_content.as_ref()
    }
    /// <p>The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.</p>
    pub fn source_file(&self) -> ::std::option::Option<&crate::types::SourceFileSpecifier> {
        self.source_file.as_ref()
    }
}
impl PutFileEntry {
    /// Creates a new builder-style object to manufacture [`PutFileEntry`](crate::types::PutFileEntry).
    pub fn builder() -> crate::types::builders::PutFileEntryBuilder {
        crate::types::builders::PutFileEntryBuilder::default()
    }
}

/// A builder for [`PutFileEntry`](crate::types::PutFileEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutFileEntryBuilder {
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) file_mode: ::std::option::Option<crate::types::FileModeTypeEnum>,
    pub(crate) file_content: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) source_file: ::std::option::Option<crate::types::SourceFileSpecifier>,
}
impl PutFileEntryBuilder {
    /// <p>The full path to the file in the repository, including the name of the file.</p>
    /// This field is required.
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full path to the file in the repository, including the name of the file.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The full path to the file in the repository, including the name of the file.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn file_mode(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.file_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn set_file_mode(mut self, input: ::std::option::Option<crate::types::FileModeTypeEnum>) -> Self {
        self.file_mode = input;
        self
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn get_file_mode(&self) -> &::std::option::Option<crate::types::FileModeTypeEnum> {
        &self.file_mode
    }
    /// <p>The content of the file, if a source file is not specified.</p>
    pub fn file_content(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.file_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the file, if a source file is not specified.</p>
    pub fn set_file_content(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.file_content = input;
        self
    }
    /// <p>The content of the file, if a source file is not specified.</p>
    pub fn get_file_content(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.file_content
    }
    /// <p>The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.</p>
    pub fn source_file(mut self, input: crate::types::SourceFileSpecifier) -> Self {
        self.source_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.</p>
    pub fn set_source_file(mut self, input: ::std::option::Option<crate::types::SourceFileSpecifier>) -> Self {
        self.source_file = input;
        self
    }
    /// <p>The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.</p>
    pub fn get_source_file(&self) -> &::std::option::Option<crate::types::SourceFileSpecifier> {
        &self.source_file
    }
    /// Consumes the builder and constructs a [`PutFileEntry`](crate::types::PutFileEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`file_path`](crate::types::builders::PutFileEntryBuilder::file_path)
    pub fn build(self) -> ::std::result::Result<crate::types::PutFileEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PutFileEntry {
            file_path: self.file_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_path",
                    "file_path was not specified but it is required when building PutFileEntry",
                )
            })?,
            file_mode: self.file_mode,
            file_content: self.file_content,
            source_file: self.source_file,
        })
    }
}
