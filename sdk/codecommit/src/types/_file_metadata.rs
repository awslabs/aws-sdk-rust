// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A file to be added, updated, or deleted as part of a commit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileMetadata {
    /// <p>The full path to the file to be added or updated, including the name of the file.</p>
    #[doc(hidden)]
    pub absolute_path: std::option::Option<std::string::String>,
    /// <p>The blob ID that contains the file information.</p>
    #[doc(hidden)]
    pub blob_id: std::option::Option<std::string::String>,
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    #[doc(hidden)]
    pub file_mode: std::option::Option<crate::types::FileModeTypeEnum>,
}
impl FileMetadata {
    /// <p>The full path to the file to be added or updated, including the name of the file.</p>
    pub fn absolute_path(&self) -> std::option::Option<&str> {
        self.absolute_path.as_deref()
    }
    /// <p>The blob ID that contains the file information.</p>
    pub fn blob_id(&self) -> std::option::Option<&str> {
        self.blob_id.as_deref()
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn file_mode(&self) -> std::option::Option<&crate::types::FileModeTypeEnum> {
        self.file_mode.as_ref()
    }
}
impl FileMetadata {
    /// Creates a new builder-style object to manufacture [`FileMetadata`](crate::types::FileMetadata).
    pub fn builder() -> crate::types::builders::FileMetadataBuilder {
        crate::types::builders::FileMetadataBuilder::default()
    }
}

/// A builder for [`FileMetadata`](crate::types::FileMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileMetadataBuilder {
    pub(crate) absolute_path: std::option::Option<std::string::String>,
    pub(crate) blob_id: std::option::Option<std::string::String>,
    pub(crate) file_mode: std::option::Option<crate::types::FileModeTypeEnum>,
}
impl FileMetadataBuilder {
    /// <p>The full path to the file to be added or updated, including the name of the file.</p>
    pub fn absolute_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.absolute_path = Some(input.into());
        self
    }
    /// <p>The full path to the file to be added or updated, including the name of the file.</p>
    pub fn set_absolute_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.absolute_path = input;
        self
    }
    /// <p>The blob ID that contains the file information.</p>
    pub fn blob_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.blob_id = Some(input.into());
        self
    }
    /// <p>The blob ID that contains the file information.</p>
    pub fn set_blob_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.blob_id = input;
        self
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn file_mode(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.file_mode = Some(input);
        self
    }
    /// <p>The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.</p>
    pub fn set_file_mode(
        mut self,
        input: std::option::Option<crate::types::FileModeTypeEnum>,
    ) -> Self {
        self.file_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`FileMetadata`](crate::types::FileMetadata).
    pub fn build(self) -> crate::types::FileMetadata {
        crate::types::FileMetadata {
            absolute_path: self.absolute_path,
            blob_id: self.blob_id,
            file_mode: self.file_mode,
        }
    }
}
