// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. The pull request might have been updated. Make sure that you have the latest changes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TipOfSourceReferenceIsDifferentException {
    /// <p>Any message associated with the exception.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl TipOfSourceReferenceIsDifferentException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TipOfSourceReferenceIsDifferentException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TipOfSourceReferenceIsDifferentException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for TipOfSourceReferenceIsDifferentException {}
impl aws_http::request_id::RequestId
    for crate::types::error::TipOfSourceReferenceIsDifferentException
{
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata
    for TipOfSourceReferenceIsDifferentException
{
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl TipOfSourceReferenceIsDifferentException {
    /// Creates a new builder-style object to manufacture [`TipOfSourceReferenceIsDifferentException`](crate::types::error::TipOfSourceReferenceIsDifferentException).
    pub fn builder(
    ) -> crate::types::error::builders::TipOfSourceReferenceIsDifferentExceptionBuilder {
        crate::types::error::builders::TipOfSourceReferenceIsDifferentExceptionBuilder::default()
    }
}

/// A builder for [`TipOfSourceReferenceIsDifferentException`](crate::types::error::TipOfSourceReferenceIsDifferentException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TipOfSourceReferenceIsDifferentExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl TipOfSourceReferenceIsDifferentExceptionBuilder {
    /// <p>Any message associated with the exception.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Any message associated with the exception.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`TipOfSourceReferenceIsDifferentException`](crate::types::error::TipOfSourceReferenceIsDifferentException).
    pub fn build(self) -> crate::types::error::TipOfSourceReferenceIsDifferentException {
        crate::types::error::TipOfSourceReferenceIsDifferentException {
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
