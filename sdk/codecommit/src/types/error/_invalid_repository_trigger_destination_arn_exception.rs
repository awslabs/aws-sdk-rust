// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InvalidRepositoryTriggerDestinationArnException {
    /// <p>Any message associated with the exception.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl InvalidRepositoryTriggerDestinationArnException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidRepositoryTriggerDestinationArnException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidRepositoryTriggerDestinationArnException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for InvalidRepositoryTriggerDestinationArnException {}
impl aws_http::request_id::RequestId
    for crate::types::error::InvalidRepositoryTriggerDestinationArnException
{
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata
    for InvalidRepositoryTriggerDestinationArnException
{
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl InvalidRepositoryTriggerDestinationArnException {
    /// Creates a new builder-style object to manufacture [`InvalidRepositoryTriggerDestinationArnException`](crate::types::error::InvalidRepositoryTriggerDestinationArnException).
    pub fn builder(
    ) -> crate::types::error::builders::InvalidRepositoryTriggerDestinationArnExceptionBuilder {
        crate::types::error::builders::InvalidRepositoryTriggerDestinationArnExceptionBuilder::default()
    }
}

/// A builder for [`InvalidRepositoryTriggerDestinationArnException`](crate::types::error::InvalidRepositoryTriggerDestinationArnException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InvalidRepositoryTriggerDestinationArnExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl InvalidRepositoryTriggerDestinationArnExceptionBuilder {
    /// <p>Any message associated with the exception.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Any message associated with the exception.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`InvalidRepositoryTriggerDestinationArnException`](crate::types::error::InvalidRepositoryTriggerDestinationArnException).
    pub fn build(self) -> crate::types::error::InvalidRepositoryTriggerDestinationArnException {
        crate::types::error::InvalidRepositoryTriggerDestinationArnException {
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
