// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConflictResolution {
    /// <p>Files to have content replaced as part of the merge conflict resolution.</p>
    #[doc(hidden)]
    pub replace_contents: std::option::Option<std::vec::Vec<crate::types::ReplaceContentEntry>>,
    /// <p>Files to be deleted as part of the merge conflict resolution.</p>
    #[doc(hidden)]
    pub delete_files: std::option::Option<std::vec::Vec<crate::types::DeleteFileEntry>>,
    /// <p>File modes that are set as part of the merge conflict resolution.</p>
    #[doc(hidden)]
    pub set_file_modes: std::option::Option<std::vec::Vec<crate::types::SetFileModeEntry>>,
}
impl ConflictResolution {
    /// <p>Files to have content replaced as part of the merge conflict resolution.</p>
    pub fn replace_contents(&self) -> std::option::Option<&[crate::types::ReplaceContentEntry]> {
        self.replace_contents.as_deref()
    }
    /// <p>Files to be deleted as part of the merge conflict resolution.</p>
    pub fn delete_files(&self) -> std::option::Option<&[crate::types::DeleteFileEntry]> {
        self.delete_files.as_deref()
    }
    /// <p>File modes that are set as part of the merge conflict resolution.</p>
    pub fn set_file_modes(&self) -> std::option::Option<&[crate::types::SetFileModeEntry]> {
        self.set_file_modes.as_deref()
    }
}
impl ConflictResolution {
    /// Creates a new builder-style object to manufacture [`ConflictResolution`](crate::types::ConflictResolution).
    pub fn builder() -> crate::types::builders::ConflictResolutionBuilder {
        crate::types::builders::ConflictResolutionBuilder::default()
    }
}

/// A builder for [`ConflictResolution`](crate::types::ConflictResolution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConflictResolutionBuilder {
    pub(crate) replace_contents:
        std::option::Option<std::vec::Vec<crate::types::ReplaceContentEntry>>,
    pub(crate) delete_files: std::option::Option<std::vec::Vec<crate::types::DeleteFileEntry>>,
    pub(crate) set_file_modes: std::option::Option<std::vec::Vec<crate::types::SetFileModeEntry>>,
}
impl ConflictResolutionBuilder {
    /// Appends an item to `replace_contents`.
    ///
    /// To override the contents of this collection use [`set_replace_contents`](Self::set_replace_contents).
    ///
    /// <p>Files to have content replaced as part of the merge conflict resolution.</p>
    pub fn replace_contents(mut self, input: crate::types::ReplaceContentEntry) -> Self {
        let mut v = self.replace_contents.unwrap_or_default();
        v.push(input);
        self.replace_contents = Some(v);
        self
    }
    /// <p>Files to have content replaced as part of the merge conflict resolution.</p>
    pub fn set_replace_contents(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReplaceContentEntry>>,
    ) -> Self {
        self.replace_contents = input;
        self
    }
    /// Appends an item to `delete_files`.
    ///
    /// To override the contents of this collection use [`set_delete_files`](Self::set_delete_files).
    ///
    /// <p>Files to be deleted as part of the merge conflict resolution.</p>
    pub fn delete_files(mut self, input: crate::types::DeleteFileEntry) -> Self {
        let mut v = self.delete_files.unwrap_or_default();
        v.push(input);
        self.delete_files = Some(v);
        self
    }
    /// <p>Files to be deleted as part of the merge conflict resolution.</p>
    pub fn set_delete_files(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeleteFileEntry>>,
    ) -> Self {
        self.delete_files = input;
        self
    }
    /// Appends an item to `set_file_modes`.
    ///
    /// To override the contents of this collection use [`set_set_file_modes`](Self::set_set_file_modes).
    ///
    /// <p>File modes that are set as part of the merge conflict resolution.</p>
    pub fn set_file_modes(mut self, input: crate::types::SetFileModeEntry) -> Self {
        let mut v = self.set_file_modes.unwrap_or_default();
        v.push(input);
        self.set_file_modes = Some(v);
        self
    }
    /// <p>File modes that are set as part of the merge conflict resolution.</p>
    pub fn set_set_file_modes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SetFileModeEntry>>,
    ) -> Self {
        self.set_file_modes = input;
        self
    }
    /// Consumes the builder and constructs a [`ConflictResolution`](crate::types::ConflictResolution).
    pub fn build(self) -> crate::types::ConflictResolution {
        crate::types::ConflictResolution {
            replace_contents: self.replace_contents,
            delete_files: self.delete_files,
            set_file_modes: self.set_file_modes,
        }
    }
}
