// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a repository name and ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryNameIdPair {
    /// <p>The name associated with the repository.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The ID associated with the repository.</p>
    #[doc(hidden)]
    pub repository_id: std::option::Option<std::string::String>,
}
impl RepositoryNameIdPair {
    /// <p>The name associated with the repository.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The ID associated with the repository.</p>
    pub fn repository_id(&self) -> std::option::Option<&str> {
        self.repository_id.as_deref()
    }
}
impl RepositoryNameIdPair {
    /// Creates a new builder-style object to manufacture [`RepositoryNameIdPair`](crate::types::RepositoryNameIdPair).
    pub fn builder() -> crate::types::builders::RepositoryNameIdPairBuilder {
        crate::types::builders::RepositoryNameIdPairBuilder::default()
    }
}

/// A builder for [`RepositoryNameIdPair`](crate::types::RepositoryNameIdPair).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryNameIdPairBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) repository_id: std::option::Option<std::string::String>,
}
impl RepositoryNameIdPairBuilder {
    /// <p>The name associated with the repository.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name associated with the repository.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The ID associated with the repository.</p>
    pub fn repository_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_id = Some(input.into());
        self
    }
    /// <p>The ID associated with the repository.</p>
    pub fn set_repository_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryNameIdPair`](crate::types::RepositoryNameIdPair).
    pub fn build(self) -> crate::types::RepositoryNameIdPair {
        crate::types::RepositoryNameIdPair {
            repository_name: self.repository_name,
            repository_id: self.repository_id,
        }
    }
}
