// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about a pull request target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PullRequestTarget {
    /// <p>The name of the repository that contains the pull request source and destination branches.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
    #[doc(hidden)]
    pub source_reference: std::option::Option<std::string::String>,
    /// <p>The branch of the repository where the pull request changes are merged. Also known as the destination branch. </p>
    #[doc(hidden)]
    pub destination_reference: std::option::Option<std::string::String>,
    /// <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>
    #[doc(hidden)]
    pub destination_commit: std::option::Option<std::string::String>,
    /// <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.</p>
    #[doc(hidden)]
    pub source_commit: std::option::Option<std::string::String>,
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    #[doc(hidden)]
    pub merge_base: std::option::Option<std::string::String>,
    /// <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>
    #[doc(hidden)]
    pub merge_metadata: std::option::Option<crate::types::MergeMetadata>,
}
impl PullRequestTarget {
    /// <p>The name of the repository that contains the pull request source and destination branches.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
    pub fn source_reference(&self) -> std::option::Option<&str> {
        self.source_reference.as_deref()
    }
    /// <p>The branch of the repository where the pull request changes are merged. Also known as the destination branch. </p>
    pub fn destination_reference(&self) -> std::option::Option<&str> {
        self.destination_reference.as_deref()
    }
    /// <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>
    pub fn destination_commit(&self) -> std::option::Option<&str> {
        self.destination_commit.as_deref()
    }
    /// <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.</p>
    pub fn source_commit(&self) -> std::option::Option<&str> {
        self.source_commit.as_deref()
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn merge_base(&self) -> std::option::Option<&str> {
        self.merge_base.as_deref()
    }
    /// <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>
    pub fn merge_metadata(&self) -> std::option::Option<&crate::types::MergeMetadata> {
        self.merge_metadata.as_ref()
    }
}
impl PullRequestTarget {
    /// Creates a new builder-style object to manufacture [`PullRequestTarget`](crate::types::PullRequestTarget).
    pub fn builder() -> crate::types::builders::PullRequestTargetBuilder {
        crate::types::builders::PullRequestTargetBuilder::default()
    }
}

/// A builder for [`PullRequestTarget`](crate::types::PullRequestTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PullRequestTargetBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) source_reference: std::option::Option<std::string::String>,
    pub(crate) destination_reference: std::option::Option<std::string::String>,
    pub(crate) destination_commit: std::option::Option<std::string::String>,
    pub(crate) source_commit: std::option::Option<std::string::String>,
    pub(crate) merge_base: std::option::Option<std::string::String>,
    pub(crate) merge_metadata: std::option::Option<crate::types::MergeMetadata>,
}
impl PullRequestTargetBuilder {
    /// <p>The name of the repository that contains the pull request source and destination branches.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository that contains the pull request source and destination branches.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
    pub fn source_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_reference = Some(input.into());
        self
    }
    /// <p>The branch of the repository that contains the changes for the pull request. Also known as the source branch.</p>
    pub fn set_source_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_reference = input;
        self
    }
    /// <p>The branch of the repository where the pull request changes are merged. Also known as the destination branch. </p>
    pub fn destination_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_reference = Some(input.into());
        self
    }
    /// <p>The branch of the repository where the pull request changes are merged. Also known as the destination branch. </p>
    pub fn set_destination_reference(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_reference = input;
        self
    }
    /// <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>
    pub fn destination_commit(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_commit = Some(input.into());
        self
    }
    /// <p>The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.</p>
    pub fn set_destination_commit(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_commit = input;
        self
    }
    /// <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.</p>
    pub fn source_commit(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_commit = Some(input.into());
        self
    }
    /// <p>The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.</p>
    pub fn set_source_commit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_commit = input;
        self
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn merge_base(mut self, input: impl Into<std::string::String>) -> Self {
        self.merge_base = Some(input.into());
        self
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn set_merge_base(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.merge_base = input;
        self
    }
    /// <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>
    pub fn merge_metadata(mut self, input: crate::types::MergeMetadata) -> Self {
        self.merge_metadata = Some(input);
        self
    }
    /// <p>Returns metadata about the state of the merge, including whether the merge has been made.</p>
    pub fn set_merge_metadata(
        mut self,
        input: std::option::Option<crate::types::MergeMetadata>,
    ) -> Self {
        self.merge_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`PullRequestTarget`](crate::types::PullRequestTarget).
    pub fn build(self) -> crate::types::PullRequestTarget {
        crate::types::PullRequestTarget {
            repository_name: self.repository_name,
            source_reference: self.source_reference,
            destination_reference: self.destination_reference,
            destination_commit: self.destination_commit,
            source_commit: self.source_commit,
            merge_base: self.merge_base,
            merge_metadata: self.merge_metadata,
        }
    }
}
