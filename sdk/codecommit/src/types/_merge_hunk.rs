// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about merge hunks in a merge or pull request operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MergeHunk {
    /// <p>A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.</p>
    #[doc(hidden)]
    pub is_conflict: bool,
    /// <p>Information about the merge hunk in the source of a merge or pull request.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::MergeHunkDetail>,
    /// <p>Information about the merge hunk in the destination of a merge or pull request.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::MergeHunkDetail>,
    /// <p>Information about the merge hunk in the base of a merge or pull request.</p>
    #[doc(hidden)]
    pub base: std::option::Option<crate::types::MergeHunkDetail>,
}
impl MergeHunk {
    /// <p>A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.</p>
    pub fn is_conflict(&self) -> bool {
        self.is_conflict
    }
    /// <p>Information about the merge hunk in the source of a merge or pull request.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::MergeHunkDetail> {
        self.source.as_ref()
    }
    /// <p>Information about the merge hunk in the destination of a merge or pull request.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::MergeHunkDetail> {
        self.destination.as_ref()
    }
    /// <p>Information about the merge hunk in the base of a merge or pull request.</p>
    pub fn base(&self) -> std::option::Option<&crate::types::MergeHunkDetail> {
        self.base.as_ref()
    }
}
impl MergeHunk {
    /// Creates a new builder-style object to manufacture [`MergeHunk`](crate::types::MergeHunk).
    pub fn builder() -> crate::types::builders::MergeHunkBuilder {
        crate::types::builders::MergeHunkBuilder::default()
    }
}

/// A builder for [`MergeHunk`](crate::types::MergeHunk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MergeHunkBuilder {
    pub(crate) is_conflict: std::option::Option<bool>,
    pub(crate) source: std::option::Option<crate::types::MergeHunkDetail>,
    pub(crate) destination: std::option::Option<crate::types::MergeHunkDetail>,
    pub(crate) base: std::option::Option<crate::types::MergeHunkDetail>,
}
impl MergeHunkBuilder {
    /// <p>A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.</p>
    pub fn is_conflict(mut self, input: bool) -> Self {
        self.is_conflict = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.</p>
    pub fn set_is_conflict(mut self, input: std::option::Option<bool>) -> Self {
        self.is_conflict = input;
        self
    }
    /// <p>Information about the merge hunk in the source of a merge or pull request.</p>
    pub fn source(mut self, input: crate::types::MergeHunkDetail) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>Information about the merge hunk in the source of a merge or pull request.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::MergeHunkDetail>) -> Self {
        self.source = input;
        self
    }
    /// <p>Information about the merge hunk in the destination of a merge or pull request.</p>
    pub fn destination(mut self, input: crate::types::MergeHunkDetail) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>Information about the merge hunk in the destination of a merge or pull request.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::MergeHunkDetail>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Information about the merge hunk in the base of a merge or pull request.</p>
    pub fn base(mut self, input: crate::types::MergeHunkDetail) -> Self {
        self.base = Some(input);
        self
    }
    /// <p>Information about the merge hunk in the base of a merge or pull request.</p>
    pub fn set_base(mut self, input: std::option::Option<crate::types::MergeHunkDetail>) -> Self {
        self.base = input;
        self
    }
    /// Consumes the builder and constructs a [`MergeHunk`](crate::types::MergeHunk).
    pub fn build(self) -> crate::types::MergeHunk {
        crate::types::MergeHunk {
            is_conflict: self.is_conflict.unwrap_or_default(),
            source: self.source,
            destination: self.destination,
            base: self.base,
        }
    }
}
