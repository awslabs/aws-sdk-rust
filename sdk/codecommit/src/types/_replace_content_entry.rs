// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a replacement content entry in the conflict of a merge or pull request operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceContentEntry {
    /// <p>The path of the conflicting file.</p>
    #[doc(hidden)]
    pub file_path: std::option::Option<std::string::String>,
    /// <p>The replacement type to use when determining how to resolve the conflict.</p>
    #[doc(hidden)]
    pub replacement_type: std::option::Option<crate::types::ReplacementTypeEnum>,
    /// <p>The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.</p>
    #[doc(hidden)]
    pub content: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The file mode to apply during conflict resoltion.</p>
    #[doc(hidden)]
    pub file_mode: std::option::Option<crate::types::FileModeTypeEnum>,
}
impl ReplaceContentEntry {
    /// <p>The path of the conflicting file.</p>
    pub fn file_path(&self) -> std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>The replacement type to use when determining how to resolve the conflict.</p>
    pub fn replacement_type(&self) -> std::option::Option<&crate::types::ReplacementTypeEnum> {
        self.replacement_type.as_ref()
    }
    /// <p>The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.</p>
    pub fn content(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.content.as_ref()
    }
    /// <p>The file mode to apply during conflict resoltion.</p>
    pub fn file_mode(&self) -> std::option::Option<&crate::types::FileModeTypeEnum> {
        self.file_mode.as_ref()
    }
}
impl ReplaceContentEntry {
    /// Creates a new builder-style object to manufacture [`ReplaceContentEntry`](crate::types::ReplaceContentEntry).
    pub fn builder() -> crate::types::builders::ReplaceContentEntryBuilder {
        crate::types::builders::ReplaceContentEntryBuilder::default()
    }
}

/// A builder for [`ReplaceContentEntry`](crate::types::ReplaceContentEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplaceContentEntryBuilder {
    pub(crate) file_path: std::option::Option<std::string::String>,
    pub(crate) replacement_type: std::option::Option<crate::types::ReplacementTypeEnum>,
    pub(crate) content: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) file_mode: std::option::Option<crate::types::FileModeTypeEnum>,
}
impl ReplaceContentEntryBuilder {
    /// <p>The path of the conflicting file.</p>
    pub fn file_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_path = Some(input.into());
        self
    }
    /// <p>The path of the conflicting file.</p>
    pub fn set_file_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The replacement type to use when determining how to resolve the conflict.</p>
    pub fn replacement_type(mut self, input: crate::types::ReplacementTypeEnum) -> Self {
        self.replacement_type = Some(input);
        self
    }
    /// <p>The replacement type to use when determining how to resolve the conflict.</p>
    pub fn set_replacement_type(
        mut self,
        input: std::option::Option<crate::types::ReplacementTypeEnum>,
    ) -> Self {
        self.replacement_type = input;
        self
    }
    /// <p>The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.</p>
    pub fn content(mut self, input: aws_smithy_types::Blob) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.</p>
    pub fn set_content(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.content = input;
        self
    }
    /// <p>The file mode to apply during conflict resoltion.</p>
    pub fn file_mode(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.file_mode = Some(input);
        self
    }
    /// <p>The file mode to apply during conflict resoltion.</p>
    pub fn set_file_mode(
        mut self,
        input: std::option::Option<crate::types::FileModeTypeEnum>,
    ) -> Self {
        self.file_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplaceContentEntry`](crate::types::ReplaceContentEntry).
    pub fn build(self) -> crate::types::ReplaceContentEntry {
        crate::types::ReplaceContentEntry {
            file_path: self.file_path,
            replacement_type: self.replacement_type,
            content: self.content,
            file_mode: self.file_mode,
        }
    }
}
