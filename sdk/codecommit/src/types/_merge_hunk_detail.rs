// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MergeHunkDetail {
    /// <p>The start position of the hunk in the merge result.</p>
    #[doc(hidden)]
    pub start_line: std::option::Option<i32>,
    /// <p>The end position of the hunk in the merge result.</p>
    #[doc(hidden)]
    pub end_line: std::option::Option<i32>,
    /// <p>The base-64 encoded content of the hunk merged region that might contain a conflict.</p>
    #[doc(hidden)]
    pub hunk_content: std::option::Option<std::string::String>,
}
impl MergeHunkDetail {
    /// <p>The start position of the hunk in the merge result.</p>
    pub fn start_line(&self) -> std::option::Option<i32> {
        self.start_line
    }
    /// <p>The end position of the hunk in the merge result.</p>
    pub fn end_line(&self) -> std::option::Option<i32> {
        self.end_line
    }
    /// <p>The base-64 encoded content of the hunk merged region that might contain a conflict.</p>
    pub fn hunk_content(&self) -> std::option::Option<&str> {
        self.hunk_content.as_deref()
    }
}
impl MergeHunkDetail {
    /// Creates a new builder-style object to manufacture [`MergeHunkDetail`](crate::types::MergeHunkDetail).
    pub fn builder() -> crate::types::builders::MergeHunkDetailBuilder {
        crate::types::builders::MergeHunkDetailBuilder::default()
    }
}

/// A builder for [`MergeHunkDetail`](crate::types::MergeHunkDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MergeHunkDetailBuilder {
    pub(crate) start_line: std::option::Option<i32>,
    pub(crate) end_line: std::option::Option<i32>,
    pub(crate) hunk_content: std::option::Option<std::string::String>,
}
impl MergeHunkDetailBuilder {
    /// <p>The start position of the hunk in the merge result.</p>
    pub fn start_line(mut self, input: i32) -> Self {
        self.start_line = Some(input);
        self
    }
    /// <p>The start position of the hunk in the merge result.</p>
    pub fn set_start_line(mut self, input: std::option::Option<i32>) -> Self {
        self.start_line = input;
        self
    }
    /// <p>The end position of the hunk in the merge result.</p>
    pub fn end_line(mut self, input: i32) -> Self {
        self.end_line = Some(input);
        self
    }
    /// <p>The end position of the hunk in the merge result.</p>
    pub fn set_end_line(mut self, input: std::option::Option<i32>) -> Self {
        self.end_line = input;
        self
    }
    /// <p>The base-64 encoded content of the hunk merged region that might contain a conflict.</p>
    pub fn hunk_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.hunk_content = Some(input.into());
        self
    }
    /// <p>The base-64 encoded content of the hunk merged region that might contain a conflict.</p>
    pub fn set_hunk_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hunk_content = input;
        self
    }
    /// Consumes the builder and constructs a [`MergeHunkDetail`](crate::types::MergeHunkDetail).
    pub fn build(self) -> crate::types::MergeHunkDetail {
        crate::types::MergeHunkDetail {
            start_line: self.start_line,
            end_line: self.end_line,
            hunk_content: self.hunk_content,
        }
    }
}
