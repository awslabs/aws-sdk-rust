// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateApprovalRuleTemplateWithRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_approval_rule_template_with_repository`](crate::client::fluent_builders::AssociateApprovalRuleTemplateWithRepository).
///
/// `ParseStrictResponse` impl for `AssociateApprovalRuleTemplateWithRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateApprovalRuleTemplateWithRepository {
    _private: (),
}
impl AssociateApprovalRuleTemplateWithRepository {
    /// Creates a new builder-style object to manufacture [`AssociateApprovalRuleTemplateWithRepositoryInput`](crate::input::AssociateApprovalRuleTemplateWithRepositoryInput).
    pub fn builder() -> crate::input::associate_approval_rule_template_with_repository_input::Builder
    {
        crate::input::associate_approval_rule_template_with_repository_input::Builder::default()
    }
    /// Creates a new `AssociateApprovalRuleTemplateWithRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for AssociateApprovalRuleTemplateWithRepository
{
    type Output = std::result::Result<
        crate::output::AssociateApprovalRuleTemplateWithRepositoryOutput,
        crate::error::AssociateApprovalRuleTemplateWithRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_approval_rule_template_with_repository::de_associate_approval_rule_template_with_repository_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_approval_rule_template_with_repository::de_associate_approval_rule_template_with_repository_http_response(response)
        }
    }
}

/// Operation shape for `BatchAssociateApprovalRuleTemplateWithRepositories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_associate_approval_rule_template_with_repositories`](crate::client::fluent_builders::BatchAssociateApprovalRuleTemplateWithRepositories).
///
/// `ParseStrictResponse` impl for `BatchAssociateApprovalRuleTemplateWithRepositories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchAssociateApprovalRuleTemplateWithRepositories {
    _private: (),
}
impl BatchAssociateApprovalRuleTemplateWithRepositories {
    /// Creates a new builder-style object to manufacture [`BatchAssociateApprovalRuleTemplateWithRepositoriesInput`](crate::input::BatchAssociateApprovalRuleTemplateWithRepositoriesInput).
    pub fn builder(
    ) -> crate::input::batch_associate_approval_rule_template_with_repositories_input::Builder {
        crate::input::batch_associate_approval_rule_template_with_repositories_input::Builder::default()
    }
    /// Creates a new `BatchAssociateApprovalRuleTemplateWithRepositories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for BatchAssociateApprovalRuleTemplateWithRepositories
{
    type Output = std::result::Result<
        crate::output::BatchAssociateApprovalRuleTemplateWithRepositoriesOutput,
        crate::error::BatchAssociateApprovalRuleTemplateWithRepositoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_associate_approval_rule_template_with_repositories::de_batch_associate_approval_rule_template_with_repositories_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_associate_approval_rule_template_with_repositories::de_batch_associate_approval_rule_template_with_repositories_http_response(response)
        }
    }
}

/// Operation shape for `BatchDescribeMergeConflicts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_describe_merge_conflicts`](crate::client::fluent_builders::BatchDescribeMergeConflicts).
///
/// `ParseStrictResponse` impl for `BatchDescribeMergeConflicts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchDescribeMergeConflicts {
    _private: (),
}
impl BatchDescribeMergeConflicts {
    /// Creates a new builder-style object to manufacture [`BatchDescribeMergeConflictsInput`](crate::input::BatchDescribeMergeConflictsInput).
    pub fn builder() -> crate::input::batch_describe_merge_conflicts_input::Builder {
        crate::input::batch_describe_merge_conflicts_input::Builder::default()
    }
    /// Creates a new `BatchDescribeMergeConflicts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchDescribeMergeConflicts {
    type Output = std::result::Result<
        crate::output::BatchDescribeMergeConflictsOutput,
        crate::error::BatchDescribeMergeConflictsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_describe_merge_conflicts::de_batch_describe_merge_conflicts_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_describe_merge_conflicts::de_batch_describe_merge_conflicts_http_response(response)
        }
    }
}

/// Operation shape for `BatchDisassociateApprovalRuleTemplateFromRepositories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_disassociate_approval_rule_template_from_repositories`](crate::client::fluent_builders::BatchDisassociateApprovalRuleTemplateFromRepositories).
///
/// `ParseStrictResponse` impl for `BatchDisassociateApprovalRuleTemplateFromRepositories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchDisassociateApprovalRuleTemplateFromRepositories {
    _private: (),
}
impl BatchDisassociateApprovalRuleTemplateFromRepositories {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateApprovalRuleTemplateFromRepositoriesInput`](crate::input::BatchDisassociateApprovalRuleTemplateFromRepositoriesInput).
    pub fn builder(
    ) -> crate::input::batch_disassociate_approval_rule_template_from_repositories_input::Builder
    {
        crate::input::batch_disassociate_approval_rule_template_from_repositories_input::Builder::default()
    }
    /// Creates a new `BatchDisassociateApprovalRuleTemplateFromRepositories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for BatchDisassociateApprovalRuleTemplateFromRepositories
{
    type Output = std::result::Result<
        crate::output::BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput,
        crate::error::BatchDisassociateApprovalRuleTemplateFromRepositoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_disassociate_approval_rule_template_from_repositories::de_batch_disassociate_approval_rule_template_from_repositories_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_disassociate_approval_rule_template_from_repositories::de_batch_disassociate_approval_rule_template_from_repositories_http_response(response)
        }
    }
}

/// Operation shape for `BatchGetCommits`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_commits`](crate::client::fluent_builders::BatchGetCommits).
///
/// `ParseStrictResponse` impl for `BatchGetCommits`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetCommits {
    _private: (),
}
impl BatchGetCommits {
    /// Creates a new builder-style object to manufacture [`BatchGetCommitsInput`](crate::input::BatchGetCommitsInput).
    pub fn builder() -> crate::input::batch_get_commits_input::Builder {
        crate::input::batch_get_commits_input::Builder::default()
    }
    /// Creates a new `BatchGetCommits` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetCommits {
    type Output = std::result::Result<
        crate::output::BatchGetCommitsOutput,
        crate::error::BatchGetCommitsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_commits::de_batch_get_commits_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_batch_get_commits::de_batch_get_commits_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `BatchGetRepositories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_repositories`](crate::client::fluent_builders::BatchGetRepositories).
///
/// `ParseStrictResponse` impl for `BatchGetRepositories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetRepositories {
    _private: (),
}
impl BatchGetRepositories {
    /// Creates a new builder-style object to manufacture [`BatchGetRepositoriesInput`](crate::input::BatchGetRepositoriesInput).
    pub fn builder() -> crate::input::batch_get_repositories_input::Builder {
        crate::input::batch_get_repositories_input::Builder::default()
    }
    /// Creates a new `BatchGetRepositories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetRepositories {
    type Output = std::result::Result<
        crate::output::BatchGetRepositoriesOutput,
        crate::error::BatchGetRepositoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_repositories::de_batch_get_repositories_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_get_repositories::de_batch_get_repositories_http_response(response)
        }
    }
}

/// Operation shape for `CreateApprovalRuleTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_approval_rule_template`](crate::client::fluent_builders::CreateApprovalRuleTemplate).
///
/// `ParseStrictResponse` impl for `CreateApprovalRuleTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateApprovalRuleTemplate {
    _private: (),
}
impl CreateApprovalRuleTemplate {
    /// Creates a new builder-style object to manufacture [`CreateApprovalRuleTemplateInput`](crate::input::CreateApprovalRuleTemplateInput).
    pub fn builder() -> crate::input::create_approval_rule_template_input::Builder {
        crate::input::create_approval_rule_template_input::Builder::default()
    }
    /// Creates a new `CreateApprovalRuleTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateApprovalRuleTemplate {
    type Output = std::result::Result<
        crate::output::CreateApprovalRuleTemplateOutput,
        crate::error::CreateApprovalRuleTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_approval_rule_template::de_create_approval_rule_template_http_error(response)
        } else {
            crate::protocol_serde::shape_create_approval_rule_template::de_create_approval_rule_template_http_response(response)
        }
    }
}

/// Operation shape for `CreateBranch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_branch`](crate::client::fluent_builders::CreateBranch).
///
/// `ParseStrictResponse` impl for `CreateBranch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateBranch {
    _private: (),
}
impl CreateBranch {
    /// Creates a new builder-style object to manufacture [`CreateBranchInput`](crate::input::CreateBranchInput).
    pub fn builder() -> crate::input::create_branch_input::Builder {
        crate::input::create_branch_input::Builder::default()
    }
    /// Creates a new `CreateBranch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateBranch {
    type Output =
        std::result::Result<crate::output::CreateBranchOutput, crate::error::CreateBranchError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_branch::de_create_branch_http_error(response)
        } else {
            crate::protocol_serde::shape_create_branch::de_create_branch_http_response(response)
        }
    }
}

/// Operation shape for `CreateCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_commit`](crate::client::fluent_builders::CreateCommit).
///
/// `ParseStrictResponse` impl for `CreateCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateCommit {
    _private: (),
}
impl CreateCommit {
    /// Creates a new builder-style object to manufacture [`CreateCommitInput`](crate::input::CreateCommitInput).
    pub fn builder() -> crate::input::create_commit_input::Builder {
        crate::input::create_commit_input::Builder::default()
    }
    /// Creates a new `CreateCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCommit {
    type Output =
        std::result::Result<crate::output::CreateCommitOutput, crate::error::CreateCommitError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_commit::de_create_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_create_commit::de_create_commit_http_response(response)
        }
    }
}

/// Operation shape for `CreatePullRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_pull_request`](crate::client::fluent_builders::CreatePullRequest).
///
/// `ParseStrictResponse` impl for `CreatePullRequest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreatePullRequest {
    _private: (),
}
impl CreatePullRequest {
    /// Creates a new builder-style object to manufacture [`CreatePullRequestInput`](crate::input::CreatePullRequestInput).
    pub fn builder() -> crate::input::create_pull_request_input::Builder {
        crate::input::create_pull_request_input::Builder::default()
    }
    /// Creates a new `CreatePullRequest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePullRequest {
    type Output = std::result::Result<
        crate::output::CreatePullRequestOutput,
        crate::error::CreatePullRequestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_pull_request::de_create_pull_request_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_pull_request::de_create_pull_request_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreatePullRequestApprovalRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_pull_request_approval_rule`](crate::client::fluent_builders::CreatePullRequestApprovalRule).
///
/// `ParseStrictResponse` impl for `CreatePullRequestApprovalRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreatePullRequestApprovalRule {
    _private: (),
}
impl CreatePullRequestApprovalRule {
    /// Creates a new builder-style object to manufacture [`CreatePullRequestApprovalRuleInput`](crate::input::CreatePullRequestApprovalRuleInput).
    pub fn builder() -> crate::input::create_pull_request_approval_rule_input::Builder {
        crate::input::create_pull_request_approval_rule_input::Builder::default()
    }
    /// Creates a new `CreatePullRequestApprovalRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePullRequestApprovalRule {
    type Output = std::result::Result<
        crate::output::CreatePullRequestApprovalRuleOutput,
        crate::error::CreatePullRequestApprovalRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_pull_request_approval_rule::de_create_pull_request_approval_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_create_pull_request_approval_rule::de_create_pull_request_approval_rule_http_response(response)
        }
    }
}

/// Operation shape for `CreateRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_repository`](crate::client::fluent_builders::CreateRepository).
///
/// `ParseStrictResponse` impl for `CreateRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateRepository {
    _private: (),
}
impl CreateRepository {
    /// Creates a new builder-style object to manufacture [`CreateRepositoryInput`](crate::input::CreateRepositoryInput).
    pub fn builder() -> crate::input::create_repository_input::Builder {
        crate::input::create_repository_input::Builder::default()
    }
    /// Creates a new `CreateRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateRepository {
    type Output = std::result::Result<
        crate::output::CreateRepositoryOutput,
        crate::error::CreateRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_repository::de_create_repository_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_repository::de_create_repository_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateUnreferencedMergeCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_unreferenced_merge_commit`](crate::client::fluent_builders::CreateUnreferencedMergeCommit).
///
/// `ParseStrictResponse` impl for `CreateUnreferencedMergeCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateUnreferencedMergeCommit {
    _private: (),
}
impl CreateUnreferencedMergeCommit {
    /// Creates a new builder-style object to manufacture [`CreateUnreferencedMergeCommitInput`](crate::input::CreateUnreferencedMergeCommitInput).
    pub fn builder() -> crate::input::create_unreferenced_merge_commit_input::Builder {
        crate::input::create_unreferenced_merge_commit_input::Builder::default()
    }
    /// Creates a new `CreateUnreferencedMergeCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateUnreferencedMergeCommit {
    type Output = std::result::Result<
        crate::output::CreateUnreferencedMergeCommitOutput,
        crate::error::CreateUnreferencedMergeCommitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_unreferenced_merge_commit::de_create_unreferenced_merge_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_create_unreferenced_merge_commit::de_create_unreferenced_merge_commit_http_response(response)
        }
    }
}

/// Operation shape for `DeleteApprovalRuleTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_approval_rule_template`](crate::client::fluent_builders::DeleteApprovalRuleTemplate).
///
/// `ParseStrictResponse` impl for `DeleteApprovalRuleTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteApprovalRuleTemplate {
    _private: (),
}
impl DeleteApprovalRuleTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteApprovalRuleTemplateInput`](crate::input::DeleteApprovalRuleTemplateInput).
    pub fn builder() -> crate::input::delete_approval_rule_template_input::Builder {
        crate::input::delete_approval_rule_template_input::Builder::default()
    }
    /// Creates a new `DeleteApprovalRuleTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteApprovalRuleTemplate {
    type Output = std::result::Result<
        crate::output::DeleteApprovalRuleTemplateOutput,
        crate::error::DeleteApprovalRuleTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_approval_rule_template::de_delete_approval_rule_template_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_approval_rule_template::de_delete_approval_rule_template_http_response(response)
        }
    }
}

/// Operation shape for `DeleteBranch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_branch`](crate::client::fluent_builders::DeleteBranch).
///
/// `ParseStrictResponse` impl for `DeleteBranch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteBranch {
    _private: (),
}
impl DeleteBranch {
    /// Creates a new builder-style object to manufacture [`DeleteBranchInput`](crate::input::DeleteBranchInput).
    pub fn builder() -> crate::input::delete_branch_input::Builder {
        crate::input::delete_branch_input::Builder::default()
    }
    /// Creates a new `DeleteBranch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteBranch {
    type Output =
        std::result::Result<crate::output::DeleteBranchOutput, crate::error::DeleteBranchError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_branch::de_delete_branch_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_branch::de_delete_branch_http_response(response)
        }
    }
}

/// Operation shape for `DeleteCommentContent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_comment_content`](crate::client::fluent_builders::DeleteCommentContent).
///
/// `ParseStrictResponse` impl for `DeleteCommentContent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCommentContent {
    _private: (),
}
impl DeleteCommentContent {
    /// Creates a new builder-style object to manufacture [`DeleteCommentContentInput`](crate::input::DeleteCommentContentInput).
    pub fn builder() -> crate::input::delete_comment_content_input::Builder {
        crate::input::delete_comment_content_input::Builder::default()
    }
    /// Creates a new `DeleteCommentContent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCommentContent {
    type Output = std::result::Result<
        crate::output::DeleteCommentContentOutput,
        crate::error::DeleteCommentContentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_comment_content::de_delete_comment_content_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_comment_content::de_delete_comment_content_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_file`](crate::client::fluent_builders::DeleteFile).
///
/// `ParseStrictResponse` impl for `DeleteFile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFile {
    _private: (),
}
impl DeleteFile {
    /// Creates a new builder-style object to manufacture [`DeleteFileInput`](crate::input::DeleteFileInput).
    pub fn builder() -> crate::input::delete_file_input::Builder {
        crate::input::delete_file_input::Builder::default()
    }
    /// Creates a new `DeleteFile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFile {
    type Output =
        std::result::Result<crate::output::DeleteFileOutput, crate::error::DeleteFileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_file::de_delete_file_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_file::de_delete_file_http_response(response)
        }
    }
}

/// Operation shape for `DeletePullRequestApprovalRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_pull_request_approval_rule`](crate::client::fluent_builders::DeletePullRequestApprovalRule).
///
/// `ParseStrictResponse` impl for `DeletePullRequestApprovalRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeletePullRequestApprovalRule {
    _private: (),
}
impl DeletePullRequestApprovalRule {
    /// Creates a new builder-style object to manufacture [`DeletePullRequestApprovalRuleInput`](crate::input::DeletePullRequestApprovalRuleInput).
    pub fn builder() -> crate::input::delete_pull_request_approval_rule_input::Builder {
        crate::input::delete_pull_request_approval_rule_input::Builder::default()
    }
    /// Creates a new `DeletePullRequestApprovalRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePullRequestApprovalRule {
    type Output = std::result::Result<
        crate::output::DeletePullRequestApprovalRuleOutput,
        crate::error::DeletePullRequestApprovalRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_pull_request_approval_rule::de_delete_pull_request_approval_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_pull_request_approval_rule::de_delete_pull_request_approval_rule_http_response(response)
        }
    }
}

/// Operation shape for `DeleteRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_repository`](crate::client::fluent_builders::DeleteRepository).
///
/// `ParseStrictResponse` impl for `DeleteRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteRepository {
    _private: (),
}
impl DeleteRepository {
    /// Creates a new builder-style object to manufacture [`DeleteRepositoryInput`](crate::input::DeleteRepositoryInput).
    pub fn builder() -> crate::input::delete_repository_input::Builder {
        crate::input::delete_repository_input::Builder::default()
    }
    /// Creates a new `DeleteRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteRepository {
    type Output = std::result::Result<
        crate::output::DeleteRepositoryOutput,
        crate::error::DeleteRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_repository::de_delete_repository_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_repository::de_delete_repository_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeMergeConflicts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_merge_conflicts`](crate::client::fluent_builders::DescribeMergeConflicts).
///
/// `ParseStrictResponse` impl for `DescribeMergeConflicts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeMergeConflicts {
    _private: (),
}
impl DescribeMergeConflicts {
    /// Creates a new builder-style object to manufacture [`DescribeMergeConflictsInput`](crate::input::DescribeMergeConflictsInput).
    pub fn builder() -> crate::input::describe_merge_conflicts_input::Builder {
        crate::input::describe_merge_conflicts_input::Builder::default()
    }
    /// Creates a new `DescribeMergeConflicts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeMergeConflicts {
    type Output = std::result::Result<
        crate::output::DescribeMergeConflictsOutput,
        crate::error::DescribeMergeConflictsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_merge_conflicts::de_describe_merge_conflicts_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_merge_conflicts::de_describe_merge_conflicts_http_response(response)
        }
    }
}

/// Operation shape for `DescribePullRequestEvents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_pull_request_events`](crate::client::fluent_builders::DescribePullRequestEvents).
///
/// `ParseStrictResponse` impl for `DescribePullRequestEvents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribePullRequestEvents {
    _private: (),
}
impl DescribePullRequestEvents {
    /// Creates a new builder-style object to manufacture [`DescribePullRequestEventsInput`](crate::input::DescribePullRequestEventsInput).
    pub fn builder() -> crate::input::describe_pull_request_events_input::Builder {
        crate::input::describe_pull_request_events_input::Builder::default()
    }
    /// Creates a new `DescribePullRequestEvents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribePullRequestEvents {
    type Output = std::result::Result<
        crate::output::DescribePullRequestEventsOutput,
        crate::error::DescribePullRequestEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_pull_request_events::de_describe_pull_request_events_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_pull_request_events::de_describe_pull_request_events_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateApprovalRuleTemplateFromRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_approval_rule_template_from_repository`](crate::client::fluent_builders::DisassociateApprovalRuleTemplateFromRepository).
///
/// `ParseStrictResponse` impl for `DisassociateApprovalRuleTemplateFromRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateApprovalRuleTemplateFromRepository {
    _private: (),
}
impl DisassociateApprovalRuleTemplateFromRepository {
    /// Creates a new builder-style object to manufacture [`DisassociateApprovalRuleTemplateFromRepositoryInput`](crate::input::DisassociateApprovalRuleTemplateFromRepositoryInput).
    pub fn builder(
    ) -> crate::input::disassociate_approval_rule_template_from_repository_input::Builder {
        crate::input::disassociate_approval_rule_template_from_repository_input::Builder::default()
    }
    /// Creates a new `DisassociateApprovalRuleTemplateFromRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DisassociateApprovalRuleTemplateFromRepository
{
    type Output = std::result::Result<
        crate::output::DisassociateApprovalRuleTemplateFromRepositoryOutput,
        crate::error::DisassociateApprovalRuleTemplateFromRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_approval_rule_template_from_repository::de_disassociate_approval_rule_template_from_repository_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_approval_rule_template_from_repository::de_disassociate_approval_rule_template_from_repository_http_response(response)
        }
    }
}

/// Operation shape for `EvaluatePullRequestApprovalRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`evaluate_pull_request_approval_rules`](crate::client::fluent_builders::EvaluatePullRequestApprovalRules).
///
/// `ParseStrictResponse` impl for `EvaluatePullRequestApprovalRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EvaluatePullRequestApprovalRules {
    _private: (),
}
impl EvaluatePullRequestApprovalRules {
    /// Creates a new builder-style object to manufacture [`EvaluatePullRequestApprovalRulesInput`](crate::input::EvaluatePullRequestApprovalRulesInput).
    pub fn builder() -> crate::input::evaluate_pull_request_approval_rules_input::Builder {
        crate::input::evaluate_pull_request_approval_rules_input::Builder::default()
    }
    /// Creates a new `EvaluatePullRequestApprovalRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EvaluatePullRequestApprovalRules {
    type Output = std::result::Result<
        crate::output::EvaluatePullRequestApprovalRulesOutput,
        crate::error::EvaluatePullRequestApprovalRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_evaluate_pull_request_approval_rules::de_evaluate_pull_request_approval_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_evaluate_pull_request_approval_rules::de_evaluate_pull_request_approval_rules_http_response(response)
        }
    }
}

/// Operation shape for `GetApprovalRuleTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_approval_rule_template`](crate::client::fluent_builders::GetApprovalRuleTemplate).
///
/// `ParseStrictResponse` impl for `GetApprovalRuleTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetApprovalRuleTemplate {
    _private: (),
}
impl GetApprovalRuleTemplate {
    /// Creates a new builder-style object to manufacture [`GetApprovalRuleTemplateInput`](crate::input::GetApprovalRuleTemplateInput).
    pub fn builder() -> crate::input::get_approval_rule_template_input::Builder {
        crate::input::get_approval_rule_template_input::Builder::default()
    }
    /// Creates a new `GetApprovalRuleTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetApprovalRuleTemplate {
    type Output = std::result::Result<
        crate::output::GetApprovalRuleTemplateOutput,
        crate::error::GetApprovalRuleTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_approval_rule_template::de_get_approval_rule_template_http_error(response)
        } else {
            crate::protocol_serde::shape_get_approval_rule_template::de_get_approval_rule_template_http_response(response)
        }
    }
}

/// Operation shape for `GetBlob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_blob`](crate::client::fluent_builders::GetBlob).
///
/// `ParseStrictResponse` impl for `GetBlob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetBlob {
    _private: (),
}
impl GetBlob {
    /// Creates a new builder-style object to manufacture [`GetBlobInput`](crate::input::GetBlobInput).
    pub fn builder() -> crate::input::get_blob_input::Builder {
        crate::input::get_blob_input::Builder::default()
    }
    /// Creates a new `GetBlob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetBlob {
    type Output = std::result::Result<crate::output::GetBlobOutput, crate::error::GetBlobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_blob::de_get_blob_http_error(response)
        } else {
            crate::protocol_serde::shape_get_blob::de_get_blob_http_response(response)
        }
    }
}

/// Operation shape for `GetBranch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_branch`](crate::client::fluent_builders::GetBranch).
///
/// `ParseStrictResponse` impl for `GetBranch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetBranch {
    _private: (),
}
impl GetBranch {
    /// Creates a new builder-style object to manufacture [`GetBranchInput`](crate::input::GetBranchInput).
    pub fn builder() -> crate::input::get_branch_input::Builder {
        crate::input::get_branch_input::Builder::default()
    }
    /// Creates a new `GetBranch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetBranch {
    type Output = std::result::Result<crate::output::GetBranchOutput, crate::error::GetBranchError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_branch::de_get_branch_http_error(response)
        } else {
            crate::protocol_serde::shape_get_branch::de_get_branch_http_response(response)
        }
    }
}

/// Operation shape for `GetComment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_comment`](crate::client::fluent_builders::GetComment).
///
/// `ParseStrictResponse` impl for `GetComment`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetComment {
    _private: (),
}
impl GetComment {
    /// Creates a new builder-style object to manufacture [`GetCommentInput`](crate::input::GetCommentInput).
    pub fn builder() -> crate::input::get_comment_input::Builder {
        crate::input::get_comment_input::Builder::default()
    }
    /// Creates a new `GetComment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetComment {
    type Output =
        std::result::Result<crate::output::GetCommentOutput, crate::error::GetCommentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_comment::de_get_comment_http_error(response)
        } else {
            crate::protocol_serde::shape_get_comment::de_get_comment_http_response(response)
        }
    }
}

/// Operation shape for `GetCommentReactions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_comment_reactions`](crate::client::fluent_builders::GetCommentReactions).
///
/// `ParseStrictResponse` impl for `GetCommentReactions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCommentReactions {
    _private: (),
}
impl GetCommentReactions {
    /// Creates a new builder-style object to manufacture [`GetCommentReactionsInput`](crate::input::GetCommentReactionsInput).
    pub fn builder() -> crate::input::get_comment_reactions_input::Builder {
        crate::input::get_comment_reactions_input::Builder::default()
    }
    /// Creates a new `GetCommentReactions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCommentReactions {
    type Output = std::result::Result<
        crate::output::GetCommentReactionsOutput,
        crate::error::GetCommentReactionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_comment_reactions::de_get_comment_reactions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_comment_reactions::de_get_comment_reactions_http_response(response)
        }
    }
}

/// Operation shape for `GetCommentsForComparedCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_comments_for_compared_commit`](crate::client::fluent_builders::GetCommentsForComparedCommit).
///
/// `ParseStrictResponse` impl for `GetCommentsForComparedCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCommentsForComparedCommit {
    _private: (),
}
impl GetCommentsForComparedCommit {
    /// Creates a new builder-style object to manufacture [`GetCommentsForComparedCommitInput`](crate::input::GetCommentsForComparedCommitInput).
    pub fn builder() -> crate::input::get_comments_for_compared_commit_input::Builder {
        crate::input::get_comments_for_compared_commit_input::Builder::default()
    }
    /// Creates a new `GetCommentsForComparedCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCommentsForComparedCommit {
    type Output = std::result::Result<
        crate::output::GetCommentsForComparedCommitOutput,
        crate::error::GetCommentsForComparedCommitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_comments_for_compared_commit::de_get_comments_for_compared_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_get_comments_for_compared_commit::de_get_comments_for_compared_commit_http_response(response)
        }
    }
}

/// Operation shape for `GetCommentsForPullRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_comments_for_pull_request`](crate::client::fluent_builders::GetCommentsForPullRequest).
///
/// `ParseStrictResponse` impl for `GetCommentsForPullRequest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCommentsForPullRequest {
    _private: (),
}
impl GetCommentsForPullRequest {
    /// Creates a new builder-style object to manufacture [`GetCommentsForPullRequestInput`](crate::input::GetCommentsForPullRequestInput).
    pub fn builder() -> crate::input::get_comments_for_pull_request_input::Builder {
        crate::input::get_comments_for_pull_request_input::Builder::default()
    }
    /// Creates a new `GetCommentsForPullRequest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCommentsForPullRequest {
    type Output = std::result::Result<
        crate::output::GetCommentsForPullRequestOutput,
        crate::error::GetCommentsForPullRequestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_comments_for_pull_request::de_get_comments_for_pull_request_http_error(response)
        } else {
            crate::protocol_serde::shape_get_comments_for_pull_request::de_get_comments_for_pull_request_http_response(response)
        }
    }
}

/// Operation shape for `GetCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_commit`](crate::client::fluent_builders::GetCommit).
///
/// `ParseStrictResponse` impl for `GetCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCommit {
    _private: (),
}
impl GetCommit {
    /// Creates a new builder-style object to manufacture [`GetCommitInput`](crate::input::GetCommitInput).
    pub fn builder() -> crate::input::get_commit_input::Builder {
        crate::input::get_commit_input::Builder::default()
    }
    /// Creates a new `GetCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCommit {
    type Output = std::result::Result<crate::output::GetCommitOutput, crate::error::GetCommitError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_commit::de_get_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_get_commit::de_get_commit_http_response(response)
        }
    }
}

/// Operation shape for `GetDifferences`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_differences`](crate::client::fluent_builders::GetDifferences).
///
/// `ParseStrictResponse` impl for `GetDifferences`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDifferences {
    _private: (),
}
impl GetDifferences {
    /// Creates a new builder-style object to manufacture [`GetDifferencesInput`](crate::input::GetDifferencesInput).
    pub fn builder() -> crate::input::get_differences_input::Builder {
        crate::input::get_differences_input::Builder::default()
    }
    /// Creates a new `GetDifferences` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDifferences {
    type Output =
        std::result::Result<crate::output::GetDifferencesOutput, crate::error::GetDifferencesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_differences::de_get_differences_http_error(response)
        } else {
            crate::protocol_serde::shape_get_differences::de_get_differences_http_response(response)
        }
    }
}

/// Operation shape for `GetFile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_file`](crate::client::fluent_builders::GetFile).
///
/// `ParseStrictResponse` impl for `GetFile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFile {
    _private: (),
}
impl GetFile {
    /// Creates a new builder-style object to manufacture [`GetFileInput`](crate::input::GetFileInput).
    pub fn builder() -> crate::input::get_file_input::Builder {
        crate::input::get_file_input::Builder::default()
    }
    /// Creates a new `GetFile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFile {
    type Output = std::result::Result<crate::output::GetFileOutput, crate::error::GetFileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_file::de_get_file_http_error(response)
        } else {
            crate::protocol_serde::shape_get_file::de_get_file_http_response(response)
        }
    }
}

/// Operation shape for `GetFolder`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_folder`](crate::client::fluent_builders::GetFolder).
///
/// `ParseStrictResponse` impl for `GetFolder`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFolder {
    _private: (),
}
impl GetFolder {
    /// Creates a new builder-style object to manufacture [`GetFolderInput`](crate::input::GetFolderInput).
    pub fn builder() -> crate::input::get_folder_input::Builder {
        crate::input::get_folder_input::Builder::default()
    }
    /// Creates a new `GetFolder` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFolder {
    type Output = std::result::Result<crate::output::GetFolderOutput, crate::error::GetFolderError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_folder::de_get_folder_http_error(response)
        } else {
            crate::protocol_serde::shape_get_folder::de_get_folder_http_response(response)
        }
    }
}

/// Operation shape for `GetMergeCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_merge_commit`](crate::client::fluent_builders::GetMergeCommit).
///
/// `ParseStrictResponse` impl for `GetMergeCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMergeCommit {
    _private: (),
}
impl GetMergeCommit {
    /// Creates a new builder-style object to manufacture [`GetMergeCommitInput`](crate::input::GetMergeCommitInput).
    pub fn builder() -> crate::input::get_merge_commit_input::Builder {
        crate::input::get_merge_commit_input::Builder::default()
    }
    /// Creates a new `GetMergeCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMergeCommit {
    type Output =
        std::result::Result<crate::output::GetMergeCommitOutput, crate::error::GetMergeCommitError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_merge_commit::de_get_merge_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_get_merge_commit::de_get_merge_commit_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetMergeConflicts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_merge_conflicts`](crate::client::fluent_builders::GetMergeConflicts).
///
/// `ParseStrictResponse` impl for `GetMergeConflicts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMergeConflicts {
    _private: (),
}
impl GetMergeConflicts {
    /// Creates a new builder-style object to manufacture [`GetMergeConflictsInput`](crate::input::GetMergeConflictsInput).
    pub fn builder() -> crate::input::get_merge_conflicts_input::Builder {
        crate::input::get_merge_conflicts_input::Builder::default()
    }
    /// Creates a new `GetMergeConflicts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMergeConflicts {
    type Output = std::result::Result<
        crate::output::GetMergeConflictsOutput,
        crate::error::GetMergeConflictsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_merge_conflicts::de_get_merge_conflicts_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_merge_conflicts::de_get_merge_conflicts_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetMergeOptions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_merge_options`](crate::client::fluent_builders::GetMergeOptions).
///
/// `ParseStrictResponse` impl for `GetMergeOptions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMergeOptions {
    _private: (),
}
impl GetMergeOptions {
    /// Creates a new builder-style object to manufacture [`GetMergeOptionsInput`](crate::input::GetMergeOptionsInput).
    pub fn builder() -> crate::input::get_merge_options_input::Builder {
        crate::input::get_merge_options_input::Builder::default()
    }
    /// Creates a new `GetMergeOptions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMergeOptions {
    type Output = std::result::Result<
        crate::output::GetMergeOptionsOutput,
        crate::error::GetMergeOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_merge_options::de_get_merge_options_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_merge_options::de_get_merge_options_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetPullRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_pull_request`](crate::client::fluent_builders::GetPullRequest).
///
/// `ParseStrictResponse` impl for `GetPullRequest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPullRequest {
    _private: (),
}
impl GetPullRequest {
    /// Creates a new builder-style object to manufacture [`GetPullRequestInput`](crate::input::GetPullRequestInput).
    pub fn builder() -> crate::input::get_pull_request_input::Builder {
        crate::input::get_pull_request_input::Builder::default()
    }
    /// Creates a new `GetPullRequest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPullRequest {
    type Output =
        std::result::Result<crate::output::GetPullRequestOutput, crate::error::GetPullRequestError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_pull_request::de_get_pull_request_http_error(response)
        } else {
            crate::protocol_serde::shape_get_pull_request::de_get_pull_request_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetPullRequestApprovalStates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_pull_request_approval_states`](crate::client::fluent_builders::GetPullRequestApprovalStates).
///
/// `ParseStrictResponse` impl for `GetPullRequestApprovalStates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPullRequestApprovalStates {
    _private: (),
}
impl GetPullRequestApprovalStates {
    /// Creates a new builder-style object to manufacture [`GetPullRequestApprovalStatesInput`](crate::input::GetPullRequestApprovalStatesInput).
    pub fn builder() -> crate::input::get_pull_request_approval_states_input::Builder {
        crate::input::get_pull_request_approval_states_input::Builder::default()
    }
    /// Creates a new `GetPullRequestApprovalStates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPullRequestApprovalStates {
    type Output = std::result::Result<
        crate::output::GetPullRequestApprovalStatesOutput,
        crate::error::GetPullRequestApprovalStatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_pull_request_approval_states::de_get_pull_request_approval_states_http_error(response)
        } else {
            crate::protocol_serde::shape_get_pull_request_approval_states::de_get_pull_request_approval_states_http_response(response)
        }
    }
}

/// Operation shape for `GetPullRequestOverrideState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_pull_request_override_state`](crate::client::fluent_builders::GetPullRequestOverrideState).
///
/// `ParseStrictResponse` impl for `GetPullRequestOverrideState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPullRequestOverrideState {
    _private: (),
}
impl GetPullRequestOverrideState {
    /// Creates a new builder-style object to manufacture [`GetPullRequestOverrideStateInput`](crate::input::GetPullRequestOverrideStateInput).
    pub fn builder() -> crate::input::get_pull_request_override_state_input::Builder {
        crate::input::get_pull_request_override_state_input::Builder::default()
    }
    /// Creates a new `GetPullRequestOverrideState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPullRequestOverrideState {
    type Output = std::result::Result<
        crate::output::GetPullRequestOverrideStateOutput,
        crate::error::GetPullRequestOverrideStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_pull_request_override_state::de_get_pull_request_override_state_http_error(response)
        } else {
            crate::protocol_serde::shape_get_pull_request_override_state::de_get_pull_request_override_state_http_response(response)
        }
    }
}

/// Operation shape for `GetRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_repository`](crate::client::fluent_builders::GetRepository).
///
/// `ParseStrictResponse` impl for `GetRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRepository {
    _private: (),
}
impl GetRepository {
    /// Creates a new builder-style object to manufacture [`GetRepositoryInput`](crate::input::GetRepositoryInput).
    pub fn builder() -> crate::input::get_repository_input::Builder {
        crate::input::get_repository_input::Builder::default()
    }
    /// Creates a new `GetRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRepository {
    type Output =
        std::result::Result<crate::output::GetRepositoryOutput, crate::error::GetRepositoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_repository::de_get_repository_http_error(response)
        } else {
            crate::protocol_serde::shape_get_repository::de_get_repository_http_response(response)
        }
    }
}

/// Operation shape for `GetRepositoryTriggers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_repository_triggers`](crate::client::fluent_builders::GetRepositoryTriggers).
///
/// `ParseStrictResponse` impl for `GetRepositoryTriggers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRepositoryTriggers {
    _private: (),
}
impl GetRepositoryTriggers {
    /// Creates a new builder-style object to manufacture [`GetRepositoryTriggersInput`](crate::input::GetRepositoryTriggersInput).
    pub fn builder() -> crate::input::get_repository_triggers_input::Builder {
        crate::input::get_repository_triggers_input::Builder::default()
    }
    /// Creates a new `GetRepositoryTriggers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRepositoryTriggers {
    type Output = std::result::Result<
        crate::output::GetRepositoryTriggersOutput,
        crate::error::GetRepositoryTriggersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_repository_triggers::de_get_repository_triggers_http_error(response)
        } else {
            crate::protocol_serde::shape_get_repository_triggers::de_get_repository_triggers_http_response(response)
        }
    }
}

/// Operation shape for `ListApprovalRuleTemplates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_approval_rule_templates`](crate::client::fluent_builders::ListApprovalRuleTemplates).
///
/// `ParseStrictResponse` impl for `ListApprovalRuleTemplates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListApprovalRuleTemplates {
    _private: (),
}
impl ListApprovalRuleTemplates {
    /// Creates a new builder-style object to manufacture [`ListApprovalRuleTemplatesInput`](crate::input::ListApprovalRuleTemplatesInput).
    pub fn builder() -> crate::input::list_approval_rule_templates_input::Builder {
        crate::input::list_approval_rule_templates_input::Builder::default()
    }
    /// Creates a new `ListApprovalRuleTemplates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListApprovalRuleTemplates {
    type Output = std::result::Result<
        crate::output::ListApprovalRuleTemplatesOutput,
        crate::error::ListApprovalRuleTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_approval_rule_templates::de_list_approval_rule_templates_http_error(response)
        } else {
            crate::protocol_serde::shape_list_approval_rule_templates::de_list_approval_rule_templates_http_response(response)
        }
    }
}

/// Operation shape for `ListAssociatedApprovalRuleTemplatesForRepository`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_associated_approval_rule_templates_for_repository`](crate::client::fluent_builders::ListAssociatedApprovalRuleTemplatesForRepository).
///
/// `ParseStrictResponse` impl for `ListAssociatedApprovalRuleTemplatesForRepository`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssociatedApprovalRuleTemplatesForRepository {
    _private: (),
}
impl ListAssociatedApprovalRuleTemplatesForRepository {
    /// Creates a new builder-style object to manufacture [`ListAssociatedApprovalRuleTemplatesForRepositoryInput`](crate::input::ListAssociatedApprovalRuleTemplatesForRepositoryInput).
    pub fn builder(
    ) -> crate::input::list_associated_approval_rule_templates_for_repository_input::Builder {
        crate::input::list_associated_approval_rule_templates_for_repository_input::Builder::default(
        )
    }
    /// Creates a new `ListAssociatedApprovalRuleTemplatesForRepository` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for ListAssociatedApprovalRuleTemplatesForRepository
{
    type Output = std::result::Result<
        crate::output::ListAssociatedApprovalRuleTemplatesForRepositoryOutput,
        crate::error::ListAssociatedApprovalRuleTemplatesForRepositoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_associated_approval_rule_templates_for_repository::de_list_associated_approval_rule_templates_for_repository_http_error(response)
        } else {
            crate::protocol_serde::shape_list_associated_approval_rule_templates_for_repository::de_list_associated_approval_rule_templates_for_repository_http_response(response)
        }
    }
}

/// Operation shape for `ListBranches`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_branches`](crate::client::fluent_builders::ListBranches).
///
/// `ParseStrictResponse` impl for `ListBranches`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListBranches {
    _private: (),
}
impl ListBranches {
    /// Creates a new builder-style object to manufacture [`ListBranchesInput`](crate::input::ListBranchesInput).
    pub fn builder() -> crate::input::list_branches_input::Builder {
        crate::input::list_branches_input::Builder::default()
    }
    /// Creates a new `ListBranches` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListBranches {
    type Output =
        std::result::Result<crate::output::ListBranchesOutput, crate::error::ListBranchesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_branches::de_list_branches_http_error(response)
        } else {
            crate::protocol_serde::shape_list_branches::de_list_branches_http_response(response)
        }
    }
}

/// Operation shape for `ListPullRequests`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_pull_requests`](crate::client::fluent_builders::ListPullRequests).
///
/// `ParseStrictResponse` impl for `ListPullRequests`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPullRequests {
    _private: (),
}
impl ListPullRequests {
    /// Creates a new builder-style object to manufacture [`ListPullRequestsInput`](crate::input::ListPullRequestsInput).
    pub fn builder() -> crate::input::list_pull_requests_input::Builder {
        crate::input::list_pull_requests_input::Builder::default()
    }
    /// Creates a new `ListPullRequests` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPullRequests {
    type Output = std::result::Result<
        crate::output::ListPullRequestsOutput,
        crate::error::ListPullRequestsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_pull_requests::de_list_pull_requests_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_pull_requests::de_list_pull_requests_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListRepositories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_repositories`](crate::client::fluent_builders::ListRepositories).
///
/// `ParseStrictResponse` impl for `ListRepositories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRepositories {
    _private: (),
}
impl ListRepositories {
    /// Creates a new builder-style object to manufacture [`ListRepositoriesInput`](crate::input::ListRepositoriesInput).
    pub fn builder() -> crate::input::list_repositories_input::Builder {
        crate::input::list_repositories_input::Builder::default()
    }
    /// Creates a new `ListRepositories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRepositories {
    type Output = std::result::Result<
        crate::output::ListRepositoriesOutput,
        crate::error::ListRepositoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_repositories::de_list_repositories_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_repositories::de_list_repositories_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListRepositoriesForApprovalRuleTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_repositories_for_approval_rule_template`](crate::client::fluent_builders::ListRepositoriesForApprovalRuleTemplate).
///
/// `ParseStrictResponse` impl for `ListRepositoriesForApprovalRuleTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRepositoriesForApprovalRuleTemplate {
    _private: (),
}
impl ListRepositoriesForApprovalRuleTemplate {
    /// Creates a new builder-style object to manufacture [`ListRepositoriesForApprovalRuleTemplateInput`](crate::input::ListRepositoriesForApprovalRuleTemplateInput).
    pub fn builder() -> crate::input::list_repositories_for_approval_rule_template_input::Builder {
        crate::input::list_repositories_for_approval_rule_template_input::Builder::default()
    }
    /// Creates a new `ListRepositoriesForApprovalRuleTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRepositoriesForApprovalRuleTemplate {
    type Output = std::result::Result<
        crate::output::ListRepositoriesForApprovalRuleTemplateOutput,
        crate::error::ListRepositoriesForApprovalRuleTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_repositories_for_approval_rule_template::de_list_repositories_for_approval_rule_template_http_error(response)
        } else {
            crate::protocol_serde::shape_list_repositories_for_approval_rule_template::de_list_repositories_for_approval_rule_template_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `MergeBranchesByFastForward`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_branches_by_fast_forward`](crate::client::fluent_builders::MergeBranchesByFastForward).
///
/// `ParseStrictResponse` impl for `MergeBranchesByFastForward`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergeBranchesByFastForward {
    _private: (),
}
impl MergeBranchesByFastForward {
    /// Creates a new builder-style object to manufacture [`MergeBranchesByFastForwardInput`](crate::input::MergeBranchesByFastForwardInput).
    pub fn builder() -> crate::input::merge_branches_by_fast_forward_input::Builder {
        crate::input::merge_branches_by_fast_forward_input::Builder::default()
    }
    /// Creates a new `MergeBranchesByFastForward` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergeBranchesByFastForward {
    type Output = std::result::Result<
        crate::output::MergeBranchesByFastForwardOutput,
        crate::error::MergeBranchesByFastForwardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_branches_by_fast_forward::de_merge_branches_by_fast_forward_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_branches_by_fast_forward::de_merge_branches_by_fast_forward_http_response(response)
        }
    }
}

/// Operation shape for `MergeBranchesBySquash`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_branches_by_squash`](crate::client::fluent_builders::MergeBranchesBySquash).
///
/// `ParseStrictResponse` impl for `MergeBranchesBySquash`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergeBranchesBySquash {
    _private: (),
}
impl MergeBranchesBySquash {
    /// Creates a new builder-style object to manufacture [`MergeBranchesBySquashInput`](crate::input::MergeBranchesBySquashInput).
    pub fn builder() -> crate::input::merge_branches_by_squash_input::Builder {
        crate::input::merge_branches_by_squash_input::Builder::default()
    }
    /// Creates a new `MergeBranchesBySquash` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergeBranchesBySquash {
    type Output = std::result::Result<
        crate::output::MergeBranchesBySquashOutput,
        crate::error::MergeBranchesBySquashError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_branches_by_squash::de_merge_branches_by_squash_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_branches_by_squash::de_merge_branches_by_squash_http_response(response)
        }
    }
}

/// Operation shape for `MergeBranchesByThreeWay`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_branches_by_three_way`](crate::client::fluent_builders::MergeBranchesByThreeWay).
///
/// `ParseStrictResponse` impl for `MergeBranchesByThreeWay`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergeBranchesByThreeWay {
    _private: (),
}
impl MergeBranchesByThreeWay {
    /// Creates a new builder-style object to manufacture [`MergeBranchesByThreeWayInput`](crate::input::MergeBranchesByThreeWayInput).
    pub fn builder() -> crate::input::merge_branches_by_three_way_input::Builder {
        crate::input::merge_branches_by_three_way_input::Builder::default()
    }
    /// Creates a new `MergeBranchesByThreeWay` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergeBranchesByThreeWay {
    type Output = std::result::Result<
        crate::output::MergeBranchesByThreeWayOutput,
        crate::error::MergeBranchesByThreeWayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_branches_by_three_way::de_merge_branches_by_three_way_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_branches_by_three_way::de_merge_branches_by_three_way_http_response(response)
        }
    }
}

/// Operation shape for `MergePullRequestByFastForward`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_pull_request_by_fast_forward`](crate::client::fluent_builders::MergePullRequestByFastForward).
///
/// `ParseStrictResponse` impl for `MergePullRequestByFastForward`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergePullRequestByFastForward {
    _private: (),
}
impl MergePullRequestByFastForward {
    /// Creates a new builder-style object to manufacture [`MergePullRequestByFastForwardInput`](crate::input::MergePullRequestByFastForwardInput).
    pub fn builder() -> crate::input::merge_pull_request_by_fast_forward_input::Builder {
        crate::input::merge_pull_request_by_fast_forward_input::Builder::default()
    }
    /// Creates a new `MergePullRequestByFastForward` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergePullRequestByFastForward {
    type Output = std::result::Result<
        crate::output::MergePullRequestByFastForwardOutput,
        crate::error::MergePullRequestByFastForwardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_pull_request_by_fast_forward::de_merge_pull_request_by_fast_forward_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_pull_request_by_fast_forward::de_merge_pull_request_by_fast_forward_http_response(response)
        }
    }
}

/// Operation shape for `MergePullRequestBySquash`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_pull_request_by_squash`](crate::client::fluent_builders::MergePullRequestBySquash).
///
/// `ParseStrictResponse` impl for `MergePullRequestBySquash`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergePullRequestBySquash {
    _private: (),
}
impl MergePullRequestBySquash {
    /// Creates a new builder-style object to manufacture [`MergePullRequestBySquashInput`](crate::input::MergePullRequestBySquashInput).
    pub fn builder() -> crate::input::merge_pull_request_by_squash_input::Builder {
        crate::input::merge_pull_request_by_squash_input::Builder::default()
    }
    /// Creates a new `MergePullRequestBySquash` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergePullRequestBySquash {
    type Output = std::result::Result<
        crate::output::MergePullRequestBySquashOutput,
        crate::error::MergePullRequestBySquashError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_pull_request_by_squash::de_merge_pull_request_by_squash_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_pull_request_by_squash::de_merge_pull_request_by_squash_http_response(response)
        }
    }
}

/// Operation shape for `MergePullRequestByThreeWay`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`merge_pull_request_by_three_way`](crate::client::fluent_builders::MergePullRequestByThreeWay).
///
/// `ParseStrictResponse` impl for `MergePullRequestByThreeWay`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MergePullRequestByThreeWay {
    _private: (),
}
impl MergePullRequestByThreeWay {
    /// Creates a new builder-style object to manufacture [`MergePullRequestByThreeWayInput`](crate::input::MergePullRequestByThreeWayInput).
    pub fn builder() -> crate::input::merge_pull_request_by_three_way_input::Builder {
        crate::input::merge_pull_request_by_three_way_input::Builder::default()
    }
    /// Creates a new `MergePullRequestByThreeWay` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MergePullRequestByThreeWay {
    type Output = std::result::Result<
        crate::output::MergePullRequestByThreeWayOutput,
        crate::error::MergePullRequestByThreeWayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_merge_pull_request_by_three_way::de_merge_pull_request_by_three_way_http_error(response)
        } else {
            crate::protocol_serde::shape_merge_pull_request_by_three_way::de_merge_pull_request_by_three_way_http_response(response)
        }
    }
}

/// Operation shape for `OverridePullRequestApprovalRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`override_pull_request_approval_rules`](crate::client::fluent_builders::OverridePullRequestApprovalRules).
///
/// `ParseStrictResponse` impl for `OverridePullRequestApprovalRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct OverridePullRequestApprovalRules {
    _private: (),
}
impl OverridePullRequestApprovalRules {
    /// Creates a new builder-style object to manufacture [`OverridePullRequestApprovalRulesInput`](crate::input::OverridePullRequestApprovalRulesInput).
    pub fn builder() -> crate::input::override_pull_request_approval_rules_input::Builder {
        crate::input::override_pull_request_approval_rules_input::Builder::default()
    }
    /// Creates a new `OverridePullRequestApprovalRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for OverridePullRequestApprovalRules {
    type Output = std::result::Result<
        crate::output::OverridePullRequestApprovalRulesOutput,
        crate::error::OverridePullRequestApprovalRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_override_pull_request_approval_rules::de_override_pull_request_approval_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_override_pull_request_approval_rules::de_override_pull_request_approval_rules_http_response(response)
        }
    }
}

/// Operation shape for `PostCommentForComparedCommit`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`post_comment_for_compared_commit`](crate::client::fluent_builders::PostCommentForComparedCommit).
///
/// `ParseStrictResponse` impl for `PostCommentForComparedCommit`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PostCommentForComparedCommit {
    _private: (),
}
impl PostCommentForComparedCommit {
    /// Creates a new builder-style object to manufacture [`PostCommentForComparedCommitInput`](crate::input::PostCommentForComparedCommitInput).
    pub fn builder() -> crate::input::post_comment_for_compared_commit_input::Builder {
        crate::input::post_comment_for_compared_commit_input::Builder::default()
    }
    /// Creates a new `PostCommentForComparedCommit` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PostCommentForComparedCommit {
    type Output = std::result::Result<
        crate::output::PostCommentForComparedCommitOutput,
        crate::error::PostCommentForComparedCommitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_post_comment_for_compared_commit::de_post_comment_for_compared_commit_http_error(response)
        } else {
            crate::protocol_serde::shape_post_comment_for_compared_commit::de_post_comment_for_compared_commit_http_response(response)
        }
    }
}

/// Operation shape for `PostCommentForPullRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`post_comment_for_pull_request`](crate::client::fluent_builders::PostCommentForPullRequest).
///
/// `ParseStrictResponse` impl for `PostCommentForPullRequest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PostCommentForPullRequest {
    _private: (),
}
impl PostCommentForPullRequest {
    /// Creates a new builder-style object to manufacture [`PostCommentForPullRequestInput`](crate::input::PostCommentForPullRequestInput).
    pub fn builder() -> crate::input::post_comment_for_pull_request_input::Builder {
        crate::input::post_comment_for_pull_request_input::Builder::default()
    }
    /// Creates a new `PostCommentForPullRequest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PostCommentForPullRequest {
    type Output = std::result::Result<
        crate::output::PostCommentForPullRequestOutput,
        crate::error::PostCommentForPullRequestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_post_comment_for_pull_request::de_post_comment_for_pull_request_http_error(response)
        } else {
            crate::protocol_serde::shape_post_comment_for_pull_request::de_post_comment_for_pull_request_http_response(response)
        }
    }
}

/// Operation shape for `PostCommentReply`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`post_comment_reply`](crate::client::fluent_builders::PostCommentReply).
///
/// `ParseStrictResponse` impl for `PostCommentReply`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PostCommentReply {
    _private: (),
}
impl PostCommentReply {
    /// Creates a new builder-style object to manufacture [`PostCommentReplyInput`](crate::input::PostCommentReplyInput).
    pub fn builder() -> crate::input::post_comment_reply_input::Builder {
        crate::input::post_comment_reply_input::Builder::default()
    }
    /// Creates a new `PostCommentReply` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PostCommentReply {
    type Output = std::result::Result<
        crate::output::PostCommentReplyOutput,
        crate::error::PostCommentReplyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_post_comment_reply::de_post_comment_reply_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_post_comment_reply::de_post_comment_reply_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutCommentReaction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_comment_reaction`](crate::client::fluent_builders::PutCommentReaction).
///
/// `ParseStrictResponse` impl for `PutCommentReaction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutCommentReaction {
    _private: (),
}
impl PutCommentReaction {
    /// Creates a new builder-style object to manufacture [`PutCommentReactionInput`](crate::input::PutCommentReactionInput).
    pub fn builder() -> crate::input::put_comment_reaction_input::Builder {
        crate::input::put_comment_reaction_input::Builder::default()
    }
    /// Creates a new `PutCommentReaction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutCommentReaction {
    type Output = std::result::Result<
        crate::output::PutCommentReactionOutput,
        crate::error::PutCommentReactionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_comment_reaction::de_put_comment_reaction_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_comment_reaction::de_put_comment_reaction_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutFile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_file`](crate::client::fluent_builders::PutFile).
///
/// `ParseStrictResponse` impl for `PutFile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutFile {
    _private: (),
}
impl PutFile {
    /// Creates a new builder-style object to manufacture [`PutFileInput`](crate::input::PutFileInput).
    pub fn builder() -> crate::input::put_file_input::Builder {
        crate::input::put_file_input::Builder::default()
    }
    /// Creates a new `PutFile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutFile {
    type Output = std::result::Result<crate::output::PutFileOutput, crate::error::PutFileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_file::de_put_file_http_error(response)
        } else {
            crate::protocol_serde::shape_put_file::de_put_file_http_response(response)
        }
    }
}

/// Operation shape for `PutRepositoryTriggers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_repository_triggers`](crate::client::fluent_builders::PutRepositoryTriggers).
///
/// `ParseStrictResponse` impl for `PutRepositoryTriggers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutRepositoryTriggers {
    _private: (),
}
impl PutRepositoryTriggers {
    /// Creates a new builder-style object to manufacture [`PutRepositoryTriggersInput`](crate::input::PutRepositoryTriggersInput).
    pub fn builder() -> crate::input::put_repository_triggers_input::Builder {
        crate::input::put_repository_triggers_input::Builder::default()
    }
    /// Creates a new `PutRepositoryTriggers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutRepositoryTriggers {
    type Output = std::result::Result<
        crate::output::PutRepositoryTriggersOutput,
        crate::error::PutRepositoryTriggersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_repository_triggers::de_put_repository_triggers_http_error(response)
        } else {
            crate::protocol_serde::shape_put_repository_triggers::de_put_repository_triggers_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TestRepositoryTriggers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`test_repository_triggers`](crate::client::fluent_builders::TestRepositoryTriggers).
///
/// `ParseStrictResponse` impl for `TestRepositoryTriggers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TestRepositoryTriggers {
    _private: (),
}
impl TestRepositoryTriggers {
    /// Creates a new builder-style object to manufacture [`TestRepositoryTriggersInput`](crate::input::TestRepositoryTriggersInput).
    pub fn builder() -> crate::input::test_repository_triggers_input::Builder {
        crate::input::test_repository_triggers_input::Builder::default()
    }
    /// Creates a new `TestRepositoryTriggers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TestRepositoryTriggers {
    type Output = std::result::Result<
        crate::output::TestRepositoryTriggersOutput,
        crate::error::TestRepositoryTriggersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_test_repository_triggers::de_test_repository_triggers_http_error(response)
        } else {
            crate::protocol_serde::shape_test_repository_triggers::de_test_repository_triggers_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateApprovalRuleTemplateContent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_approval_rule_template_content`](crate::client::fluent_builders::UpdateApprovalRuleTemplateContent).
///
/// `ParseStrictResponse` impl for `UpdateApprovalRuleTemplateContent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateApprovalRuleTemplateContent {
    _private: (),
}
impl UpdateApprovalRuleTemplateContent {
    /// Creates a new builder-style object to manufacture [`UpdateApprovalRuleTemplateContentInput`](crate::input::UpdateApprovalRuleTemplateContentInput).
    pub fn builder() -> crate::input::update_approval_rule_template_content_input::Builder {
        crate::input::update_approval_rule_template_content_input::Builder::default()
    }
    /// Creates a new `UpdateApprovalRuleTemplateContent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateApprovalRuleTemplateContent {
    type Output = std::result::Result<
        crate::output::UpdateApprovalRuleTemplateContentOutput,
        crate::error::UpdateApprovalRuleTemplateContentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_approval_rule_template_content::de_update_approval_rule_template_content_http_error(response)
        } else {
            crate::protocol_serde::shape_update_approval_rule_template_content::de_update_approval_rule_template_content_http_response(response)
        }
    }
}

/// Operation shape for `UpdateApprovalRuleTemplateDescription`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_approval_rule_template_description`](crate::client::fluent_builders::UpdateApprovalRuleTemplateDescription).
///
/// `ParseStrictResponse` impl for `UpdateApprovalRuleTemplateDescription`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateApprovalRuleTemplateDescription {
    _private: (),
}
impl UpdateApprovalRuleTemplateDescription {
    /// Creates a new builder-style object to manufacture [`UpdateApprovalRuleTemplateDescriptionInput`](crate::input::UpdateApprovalRuleTemplateDescriptionInput).
    pub fn builder() -> crate::input::update_approval_rule_template_description_input::Builder {
        crate::input::update_approval_rule_template_description_input::Builder::default()
    }
    /// Creates a new `UpdateApprovalRuleTemplateDescription` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateApprovalRuleTemplateDescription {
    type Output = std::result::Result<
        crate::output::UpdateApprovalRuleTemplateDescriptionOutput,
        crate::error::UpdateApprovalRuleTemplateDescriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_approval_rule_template_description::de_update_approval_rule_template_description_http_error(response)
        } else {
            crate::protocol_serde::shape_update_approval_rule_template_description::de_update_approval_rule_template_description_http_response(response)
        }
    }
}

/// Operation shape for `UpdateApprovalRuleTemplateName`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_approval_rule_template_name`](crate::client::fluent_builders::UpdateApprovalRuleTemplateName).
///
/// `ParseStrictResponse` impl for `UpdateApprovalRuleTemplateName`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateApprovalRuleTemplateName {
    _private: (),
}
impl UpdateApprovalRuleTemplateName {
    /// Creates a new builder-style object to manufacture [`UpdateApprovalRuleTemplateNameInput`](crate::input::UpdateApprovalRuleTemplateNameInput).
    pub fn builder() -> crate::input::update_approval_rule_template_name_input::Builder {
        crate::input::update_approval_rule_template_name_input::Builder::default()
    }
    /// Creates a new `UpdateApprovalRuleTemplateName` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateApprovalRuleTemplateName {
    type Output = std::result::Result<
        crate::output::UpdateApprovalRuleTemplateNameOutput,
        crate::error::UpdateApprovalRuleTemplateNameError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_approval_rule_template_name::de_update_approval_rule_template_name_http_error(response)
        } else {
            crate::protocol_serde::shape_update_approval_rule_template_name::de_update_approval_rule_template_name_http_response(response)
        }
    }
}

/// Operation shape for `UpdateComment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_comment`](crate::client::fluent_builders::UpdateComment).
///
/// `ParseStrictResponse` impl for `UpdateComment`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateComment {
    _private: (),
}
impl UpdateComment {
    /// Creates a new builder-style object to manufacture [`UpdateCommentInput`](crate::input::UpdateCommentInput).
    pub fn builder() -> crate::input::update_comment_input::Builder {
        crate::input::update_comment_input::Builder::default()
    }
    /// Creates a new `UpdateComment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateComment {
    type Output =
        std::result::Result<crate::output::UpdateCommentOutput, crate::error::UpdateCommentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_comment::de_update_comment_http_error(response)
        } else {
            crate::protocol_serde::shape_update_comment::de_update_comment_http_response(response)
        }
    }
}

/// Operation shape for `UpdateDefaultBranch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_default_branch`](crate::client::fluent_builders::UpdateDefaultBranch).
///
/// `ParseStrictResponse` impl for `UpdateDefaultBranch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateDefaultBranch {
    _private: (),
}
impl UpdateDefaultBranch {
    /// Creates a new builder-style object to manufacture [`UpdateDefaultBranchInput`](crate::input::UpdateDefaultBranchInput).
    pub fn builder() -> crate::input::update_default_branch_input::Builder {
        crate::input::update_default_branch_input::Builder::default()
    }
    /// Creates a new `UpdateDefaultBranch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDefaultBranch {
    type Output = std::result::Result<
        crate::output::UpdateDefaultBranchOutput,
        crate::error::UpdateDefaultBranchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_default_branch::de_update_default_branch_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_default_branch::de_update_default_branch_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePullRequestApprovalRuleContent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_pull_request_approval_rule_content`](crate::client::fluent_builders::UpdatePullRequestApprovalRuleContent).
///
/// `ParseStrictResponse` impl for `UpdatePullRequestApprovalRuleContent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePullRequestApprovalRuleContent {
    _private: (),
}
impl UpdatePullRequestApprovalRuleContent {
    /// Creates a new builder-style object to manufacture [`UpdatePullRequestApprovalRuleContentInput`](crate::input::UpdatePullRequestApprovalRuleContentInput).
    pub fn builder() -> crate::input::update_pull_request_approval_rule_content_input::Builder {
        crate::input::update_pull_request_approval_rule_content_input::Builder::default()
    }
    /// Creates a new `UpdatePullRequestApprovalRuleContent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePullRequestApprovalRuleContent {
    type Output = std::result::Result<
        crate::output::UpdatePullRequestApprovalRuleContentOutput,
        crate::error::UpdatePullRequestApprovalRuleContentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_pull_request_approval_rule_content::de_update_pull_request_approval_rule_content_http_error(response)
        } else {
            crate::protocol_serde::shape_update_pull_request_approval_rule_content::de_update_pull_request_approval_rule_content_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePullRequestApprovalState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_pull_request_approval_state`](crate::client::fluent_builders::UpdatePullRequestApprovalState).
///
/// `ParseStrictResponse` impl for `UpdatePullRequestApprovalState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePullRequestApprovalState {
    _private: (),
}
impl UpdatePullRequestApprovalState {
    /// Creates a new builder-style object to manufacture [`UpdatePullRequestApprovalStateInput`](crate::input::UpdatePullRequestApprovalStateInput).
    pub fn builder() -> crate::input::update_pull_request_approval_state_input::Builder {
        crate::input::update_pull_request_approval_state_input::Builder::default()
    }
    /// Creates a new `UpdatePullRequestApprovalState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePullRequestApprovalState {
    type Output = std::result::Result<
        crate::output::UpdatePullRequestApprovalStateOutput,
        crate::error::UpdatePullRequestApprovalStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_pull_request_approval_state::de_update_pull_request_approval_state_http_error(response)
        } else {
            crate::protocol_serde::shape_update_pull_request_approval_state::de_update_pull_request_approval_state_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePullRequestDescription`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_pull_request_description`](crate::client::fluent_builders::UpdatePullRequestDescription).
///
/// `ParseStrictResponse` impl for `UpdatePullRequestDescription`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePullRequestDescription {
    _private: (),
}
impl UpdatePullRequestDescription {
    /// Creates a new builder-style object to manufacture [`UpdatePullRequestDescriptionInput`](crate::input::UpdatePullRequestDescriptionInput).
    pub fn builder() -> crate::input::update_pull_request_description_input::Builder {
        crate::input::update_pull_request_description_input::Builder::default()
    }
    /// Creates a new `UpdatePullRequestDescription` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePullRequestDescription {
    type Output = std::result::Result<
        crate::output::UpdatePullRequestDescriptionOutput,
        crate::error::UpdatePullRequestDescriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_pull_request_description::de_update_pull_request_description_http_error(response)
        } else {
            crate::protocol_serde::shape_update_pull_request_description::de_update_pull_request_description_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePullRequestStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_pull_request_status`](crate::client::fluent_builders::UpdatePullRequestStatus).
///
/// `ParseStrictResponse` impl for `UpdatePullRequestStatus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePullRequestStatus {
    _private: (),
}
impl UpdatePullRequestStatus {
    /// Creates a new builder-style object to manufacture [`UpdatePullRequestStatusInput`](crate::input::UpdatePullRequestStatusInput).
    pub fn builder() -> crate::input::update_pull_request_status_input::Builder {
        crate::input::update_pull_request_status_input::Builder::default()
    }
    /// Creates a new `UpdatePullRequestStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePullRequestStatus {
    type Output = std::result::Result<
        crate::output::UpdatePullRequestStatusOutput,
        crate::error::UpdatePullRequestStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_pull_request_status::de_update_pull_request_status_http_error(response)
        } else {
            crate::protocol_serde::shape_update_pull_request_status::de_update_pull_request_status_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePullRequestTitle`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_pull_request_title`](crate::client::fluent_builders::UpdatePullRequestTitle).
///
/// `ParseStrictResponse` impl for `UpdatePullRequestTitle`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePullRequestTitle {
    _private: (),
}
impl UpdatePullRequestTitle {
    /// Creates a new builder-style object to manufacture [`UpdatePullRequestTitleInput`](crate::input::UpdatePullRequestTitleInput).
    pub fn builder() -> crate::input::update_pull_request_title_input::Builder {
        crate::input::update_pull_request_title_input::Builder::default()
    }
    /// Creates a new `UpdatePullRequestTitle` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePullRequestTitle {
    type Output = std::result::Result<
        crate::output::UpdatePullRequestTitleOutput,
        crate::error::UpdatePullRequestTitleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_pull_request_title::de_update_pull_request_title_http_error(response)
        } else {
            crate::protocol_serde::shape_update_pull_request_title::de_update_pull_request_title_http_response(response)
        }
    }
}

/// Operation shape for `UpdateRepositoryDescription`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_repository_description`](crate::client::fluent_builders::UpdateRepositoryDescription).
///
/// `ParseStrictResponse` impl for `UpdateRepositoryDescription`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateRepositoryDescription {
    _private: (),
}
impl UpdateRepositoryDescription {
    /// Creates a new builder-style object to manufacture [`UpdateRepositoryDescriptionInput`](crate::input::UpdateRepositoryDescriptionInput).
    pub fn builder() -> crate::input::update_repository_description_input::Builder {
        crate::input::update_repository_description_input::Builder::default()
    }
    /// Creates a new `UpdateRepositoryDescription` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateRepositoryDescription {
    type Output = std::result::Result<
        crate::output::UpdateRepositoryDescriptionOutput,
        crate::error::UpdateRepositoryDescriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_repository_description::de_update_repository_description_http_error(response)
        } else {
            crate::protocol_serde::shape_update_repository_description::de_update_repository_description_http_response(response)
        }
    }
}

/// Operation shape for `UpdateRepositoryName`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_repository_name`](crate::client::fluent_builders::UpdateRepositoryName).
///
/// `ParseStrictResponse` impl for `UpdateRepositoryName`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateRepositoryName {
    _private: (),
}
impl UpdateRepositoryName {
    /// Creates a new builder-style object to manufacture [`UpdateRepositoryNameInput`](crate::input::UpdateRepositoryNameInput).
    pub fn builder() -> crate::input::update_repository_name_input::Builder {
        crate::input::update_repository_name_input::Builder::default()
    }
    /// Creates a new `UpdateRepositoryName` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateRepositoryName {
    type Output = std::result::Result<
        crate::output::UpdateRepositoryNameOutput,
        crate::error::UpdateRepositoryNameError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_repository_name::de_update_repository_name_http_error(response)
        } else {
            crate::protocol_serde::shape_update_repository_name::de_update_repository_name_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
