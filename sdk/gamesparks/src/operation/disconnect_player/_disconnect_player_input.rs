// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisconnectPlayerInput {
    /// <p>The unique identifier representing a player.</p>
    #[doc(hidden)]
    pub player_id: std::option::Option<std::string::String>,
    /// <p>The name of the game.</p>
    #[doc(hidden)]
    pub game_name: std::option::Option<std::string::String>,
    /// <p>The name of the stage.</p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
}
impl DisconnectPlayerInput {
    /// <p>The unique identifier representing a player.</p>
    pub fn player_id(&self) -> std::option::Option<&str> {
        self.player_id.as_deref()
    }
    /// <p>The name of the game.</p>
    pub fn game_name(&self) -> std::option::Option<&str> {
        self.game_name.as_deref()
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
}
impl DisconnectPlayerInput {
    /// Creates a new builder-style object to manufacture [`DisconnectPlayerInput`](crate::operation::disconnect_player::DisconnectPlayerInput).
    pub fn builder() -> crate::operation::disconnect_player::builders::DisconnectPlayerInputBuilder
    {
        crate::operation::disconnect_player::builders::DisconnectPlayerInputBuilder::default()
    }
}

/// A builder for [`DisconnectPlayerInput`](crate::operation::disconnect_player::DisconnectPlayerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisconnectPlayerInputBuilder {
    pub(crate) player_id: std::option::Option<std::string::String>,
    pub(crate) game_name: std::option::Option<std::string::String>,
    pub(crate) stage_name: std::option::Option<std::string::String>,
}
impl DisconnectPlayerInputBuilder {
    /// <p>The unique identifier representing a player.</p>
    pub fn player_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.player_id = Some(input.into());
        self
    }
    /// <p>The unique identifier representing a player.</p>
    pub fn set_player_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.player_id = input;
        self
    }
    /// <p>The name of the game.</p>
    pub fn game_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.game_name = Some(input.into());
        self
    }
    /// <p>The name of the game.</p>
    pub fn set_game_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.game_name = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DisconnectPlayerInput`](crate::operation::disconnect_player::DisconnectPlayerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disconnect_player::DisconnectPlayerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::disconnect_player::DisconnectPlayerInput {
            player_id: self.player_id,
            game_name: self.game_name,
            stage_name: self.stage_name,
        })
    }
}
