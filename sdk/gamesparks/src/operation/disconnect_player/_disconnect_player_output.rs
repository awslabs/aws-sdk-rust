// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisconnectPlayerOutput {
    /// <p>The list of the connection ids that were disconnected.</p>
    #[doc(hidden)]
    pub disconnect_successes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The list of the connection ids that could not be disconnected.</p>
    #[doc(hidden)]
    pub disconnect_failures: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DisconnectPlayerOutput {
    /// <p>The list of the connection ids that were disconnected.</p>
    pub fn disconnect_successes(&self) -> std::option::Option<&[std::string::String]> {
        self.disconnect_successes.as_deref()
    }
    /// <p>The list of the connection ids that could not be disconnected.</p>
    pub fn disconnect_failures(&self) -> std::option::Option<&[std::string::String]> {
        self.disconnect_failures.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisconnectPlayerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisconnectPlayerOutput {
    /// Creates a new builder-style object to manufacture [`DisconnectPlayerOutput`](crate::operation::disconnect_player::DisconnectPlayerOutput).
    pub fn builder() -> crate::operation::disconnect_player::builders::DisconnectPlayerOutputBuilder
    {
        crate::operation::disconnect_player::builders::DisconnectPlayerOutputBuilder::default()
    }
}

/// A builder for [`DisconnectPlayerOutput`](crate::operation::disconnect_player::DisconnectPlayerOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisconnectPlayerOutputBuilder {
    pub(crate) disconnect_successes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) disconnect_failures: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DisconnectPlayerOutputBuilder {
    /// Appends an item to `disconnect_successes`.
    ///
    /// To override the contents of this collection use [`set_disconnect_successes`](Self::set_disconnect_successes).
    ///
    /// <p>The list of the connection ids that were disconnected.</p>
    pub fn disconnect_successes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.disconnect_successes.unwrap_or_default();
        v.push(input.into());
        self.disconnect_successes = Some(v);
        self
    }
    /// <p>The list of the connection ids that were disconnected.</p>
    pub fn set_disconnect_successes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.disconnect_successes = input;
        self
    }
    /// Appends an item to `disconnect_failures`.
    ///
    /// To override the contents of this collection use [`set_disconnect_failures`](Self::set_disconnect_failures).
    ///
    /// <p>The list of the connection ids that could not be disconnected.</p>
    pub fn disconnect_failures(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.disconnect_failures.unwrap_or_default();
        v.push(input.into());
        self.disconnect_failures = Some(v);
        self
    }
    /// <p>The list of the connection ids that could not be disconnected.</p>
    pub fn set_disconnect_failures(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.disconnect_failures = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DisconnectPlayerOutput`](crate::operation::disconnect_player::DisconnectPlayerOutput).
    pub fn build(self) -> crate::operation::disconnect_player::DisconnectPlayerOutput {
        crate::operation::disconnect_player::DisconnectPlayerOutput {
            disconnect_successes: self.disconnect_successes,
            disconnect_failures: self.disconnect_failures,
            _request_id: self._request_id,
        }
    }
}
