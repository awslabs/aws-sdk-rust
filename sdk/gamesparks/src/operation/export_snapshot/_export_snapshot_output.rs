// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportSnapshotOutput {
    /// <p>The presigned URL for the snapshot data.</p>
    /// <p> This URL will be available for 10 minutes, and can be used to download the snapshot content. If the URL expires, a new one can be requested using the same operation. </p>
    #[doc(hidden)]
    pub s3_url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportSnapshotOutput {
    /// <p>The presigned URL for the snapshot data.</p>
    /// <p> This URL will be available for 10 minutes, and can be used to download the snapshot content. If the URL expires, a new one can be requested using the same operation. </p>
    pub fn s3_url(&self) -> std::option::Option<&str> {
        self.s3_url.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ExportSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`ExportSnapshotOutput`](crate::operation::export_snapshot::ExportSnapshotOutput).
    pub fn builder() -> crate::operation::export_snapshot::builders::ExportSnapshotOutputBuilder {
        crate::operation::export_snapshot::builders::ExportSnapshotOutputBuilder::default()
    }
}

/// A builder for [`ExportSnapshotOutput`](crate::operation::export_snapshot::ExportSnapshotOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportSnapshotOutputBuilder {
    pub(crate) s3_url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportSnapshotOutputBuilder {
    /// <p>The presigned URL for the snapshot data.</p>
    /// <p> This URL will be available for 10 minutes, and can be used to download the snapshot content. If the URL expires, a new one can be requested using the same operation. </p>
    pub fn s3_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_url = Some(input.into());
        self
    }
    /// <p>The presigned URL for the snapshot data.</p>
    /// <p> This URL will be available for 10 minutes, and can be used to download the snapshot content. If the URL expires, a new one can be requested using the same operation. </p>
    pub fn set_s3_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_url = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ExportSnapshotOutput`](crate::operation::export_snapshot::ExportSnapshotOutput).
    pub fn build(self) -> crate::operation::export_snapshot::ExportSnapshotOutput {
        crate::operation::export_snapshot::ExportSnapshotOutput {
            s3_url: self.s3_url,
            _request_id: self._request_id,
        }
    }
}
