// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListExtensionVersionsInput {
    /// <p>The namespace (qualifier) of the extension.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The name of the extension.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The token that indicates the start of the next sequential page of results.</p>
    /// <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return.</p>
    /// <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListExtensionVersionsInput {
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The name of the extension.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The token that indicates the start of the next sequential page of results.</p>
    /// <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    /// <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListExtensionVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListExtensionVersionsInput`](crate::operation::list_extension_versions::ListExtensionVersionsInput).
    pub fn builder(
    ) -> crate::operation::list_extension_versions::builders::ListExtensionVersionsInputBuilder
    {
        crate::operation::list_extension_versions::builders::ListExtensionVersionsInputBuilder::default()
    }
}

/// A builder for [`ListExtensionVersionsInput`](crate::operation::list_extension_versions::ListExtensionVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListExtensionVersionsInputBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListExtensionVersionsInputBuilder {
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the extension.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the extension.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The token that indicates the start of the next sequential page of results.</p>
    /// <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that indicates the start of the next sequential page of results.</p>
    /// <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    /// <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    /// <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListExtensionVersionsInput`](crate::operation::list_extension_versions::ListExtensionVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_extension_versions::ListExtensionVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_extension_versions::ListExtensionVersionsInput {
                namespace: self.namespace,
                name: self.name,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
