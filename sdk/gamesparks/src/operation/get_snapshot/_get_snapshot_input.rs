// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSnapshotInput {
    /// <p>The name of the game.</p>
    #[doc(hidden)]
    pub game_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The list of game configuration sections to be described.</p>
    #[doc(hidden)]
    pub sections: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetSnapshotInput {
    /// <p>The name of the game.</p>
    pub fn game_name(&self) -> std::option::Option<&str> {
        self.game_name.as_deref()
    }
    /// <p>The identifier of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The list of game configuration sections to be described.</p>
    pub fn sections(&self) -> std::option::Option<&[std::string::String]> {
        self.sections.as_deref()
    }
}
impl GetSnapshotInput {
    /// Creates a new builder-style object to manufacture [`GetSnapshotInput`](crate::operation::get_snapshot::GetSnapshotInput).
    pub fn builder() -> crate::operation::get_snapshot::builders::GetSnapshotInputBuilder {
        crate::operation::get_snapshot::builders::GetSnapshotInputBuilder::default()
    }
}

/// A builder for [`GetSnapshotInput`](crate::operation::get_snapshot::GetSnapshotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSnapshotInputBuilder {
    pub(crate) game_name: std::option::Option<std::string::String>,
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) sections: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetSnapshotInputBuilder {
    /// <p>The name of the game.</p>
    pub fn game_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.game_name = Some(input.into());
        self
    }
    /// <p>The name of the game.</p>
    pub fn set_game_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.game_name = input;
        self
    }
    /// <p>The identifier of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// Appends an item to `sections`.
    ///
    /// To override the contents of this collection use [`set_sections`](Self::set_sections).
    ///
    /// <p>The list of game configuration sections to be described.</p>
    pub fn sections(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.sections.unwrap_or_default();
        v.push(input.into());
        self.sections = Some(v);
        self
    }
    /// <p>The list of game configuration sections to be described.</p>
    pub fn set_sections(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.sections = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSnapshotInput`](crate::operation::get_snapshot::GetSnapshotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_snapshot::GetSnapshotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_snapshot::GetSnapshotInput {
            game_name: self.game_name,
            snapshot_id: self.snapshot_id,
            sections: self.sections,
        })
    }
}
