// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateGame`](crate::operation::create_game::builders::CreateGameFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_name(impl Into<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::game_name) / [`set_game_name(Option<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::set_game_name): <p>The name of the game.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::set_description): <p>The description of the game.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::set_client_token): <p> A client-defined token. With an active client token in the request, this action is idempotent. </p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_game::builders::CreateGameFluentBuilder::set_tags): <p>The list of tags to apply to the game.</p>
    /// - On success, responds with [`CreateGameOutput`](crate::operation::create_game::CreateGameOutput) with field(s):
    ///   - [`game(Option<GameDetails>)`](crate::operation::create_game::CreateGameOutput::game): <p>Details about the game that was created.</p>
    /// - On failure, responds with [`SdkError<CreateGameError>`](crate::operation::create_game::CreateGameError)
    pub fn create_game(&self) -> crate::operation::create_game::builders::CreateGameFluentBuilder {
        crate::operation::create_game::builders::CreateGameFluentBuilder::new(self.handle.clone())
    }
}
