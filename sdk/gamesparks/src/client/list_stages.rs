// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListStages`](crate::client::fluent_builders::ListStages) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListStages::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_name(impl Into<String>)`](crate::client::fluent_builders::ListStages::game_name) / [`set_game_name(Option<String>)`](crate::client::fluent_builders::ListStages::set_game_name): <p>The name of the game.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListStages::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListStages::set_max_results): <p>The maximum number of results to return.</p>  <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListStages::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListStages::set_next_token): <p>The token that indicates the start of the next sequential page of results.</p>  <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
    /// - On success, responds with [`ListStagesOutput`](crate::output::ListStagesOutput) with field(s):
    ///   - [`stages(Option<Vec<StageSummary>>)`](crate::output::ListStagesOutput::stages): <p> A list of stage summaries. You can use the stage names in the <code>UpdateStage</code> and <code>GetStage</code> actions. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListStagesOutput::next_token): <p>The token that indicates the start of the next sequential page of results.</p>  <p> Use this value when making the next call to this operation to continue where the last one finished. </p>
    /// - On failure, responds with [`SdkError<ListStagesError>`](crate::error::ListStagesError)
    pub fn list_stages(&self) -> crate::client::fluent_builders::ListStages {
        crate::client::fluent_builders::ListStages::new(self.handle.clone())
    }
}
