// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisconnectPlayer`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`player_id(impl Into<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::player_id) / [`set_player_id(Option<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::set_player_id): <p>The unique identifier representing a player.</p>
    ///   - [`game_name(impl Into<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::game_name) / [`set_game_name(Option<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::set_game_name): <p>The name of the game.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::stage_name) / [`set_stage_name(Option<String>)`](crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::set_stage_name): <p>The name of the stage.</p>
    /// - On success, responds with [`DisconnectPlayerOutput`](crate::operation::disconnect_player::DisconnectPlayerOutput) with field(s):
    ///   - [`disconnect_successes(Option<Vec<String>>)`](crate::operation::disconnect_player::DisconnectPlayerOutput::disconnect_successes): <p>The list of the connection ids that were disconnected.</p>
    ///   - [`disconnect_failures(Option<Vec<String>>)`](crate::operation::disconnect_player::DisconnectPlayerOutput::disconnect_failures): <p>The list of the connection ids that could not be disconnected.</p>
    /// - On failure, responds with [`SdkError<DisconnectPlayerError>`](crate::operation::disconnect_player::DisconnectPlayerError)
    pub fn disconnect_player(
        &self,
    ) -> crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder {
        crate::operation::disconnect_player::builders::DisconnectPlayerFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
