// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_extensions_output_next_token(
    input: &crate::output::ListExtensionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_extension_versions_output_next_token(
    input: &crate::output::ListExtensionVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_games_output_next_token(
    input: &crate::output::ListGamesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_generated_code_jobs_output_next_token(
    input: &crate::output::ListGeneratedCodeJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_snapshots_output_next_token(
    input: &crate::output::ListSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stage_deployments_output_next_token(
    input: &crate::output::ListStageDeploymentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stages_output_next_token(
    input: &crate::output::ListStagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_extensions_output_extensions(
    input: crate::output::ListExtensionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ExtensionDetails>> {
    let input = match input.extensions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_extension_versions_output_extension_versions(
    input: crate::output::ListExtensionVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ExtensionVersionDetails>> {
    let input = match input.extension_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_games_output_games(
    input: crate::output::ListGamesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GameSummary>> {
    let input = match input.games {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_generated_code_jobs_output_generated_code_jobs(
    input: crate::output::ListGeneratedCodeJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GeneratedCodeJobDetails>> {
    let input = match input.generated_code_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_snapshots_output_snapshots(
    input: crate::output::ListSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SnapshotSummary>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stage_deployments_output_stage_deployments(
    input: crate::output::ListStageDeploymentsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StageDeploymentSummary>> {
    let input = match input.stage_deployments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_stages_output_stages(
    input: crate::output::ListStagesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::StageSummary>> {
    let input = match input.stages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
