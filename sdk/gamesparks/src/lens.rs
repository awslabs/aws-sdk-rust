// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_extension_versions_output_next_token(
    input: &crate::operation::list_extension_versions::ListExtensionVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_extensions_output_next_token(
    input: &crate::operation::list_extensions::ListExtensionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_games_output_next_token(
    input: &crate::operation::list_games::ListGamesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_generated_code_jobs_output_next_token(
    input: &crate::operation::list_generated_code_jobs::ListGeneratedCodeJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_snapshots_output_next_token(
    input: &crate::operation::list_snapshots::ListSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stage_deployments_output_next_token(
    input: &crate::operation::list_stage_deployments::ListStageDeploymentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stages_output_next_token(
    input: &crate::operation::list_stages::ListStagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_extension_versions_output_extension_versions(
    input: crate::operation::list_extension_versions::ListExtensionVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExtensionVersionDetails>> {
    let input = match input.extension_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_extensions_output_extensions(
    input: crate::operation::list_extensions::ListExtensionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExtensionDetails>> {
    let input = match input.extensions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_games_output_games(
    input: crate::operation::list_games::ListGamesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameSummary>> {
    let input = match input.games {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_generated_code_jobs_output_generated_code_jobs(
    input: crate::operation::list_generated_code_jobs::ListGeneratedCodeJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GeneratedCodeJobDetails>> {
    let input = match input.generated_code_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_snapshots_output_snapshots(
    input: crate::operation::list_snapshots::ListSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SnapshotSummary>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stage_deployments_output_stage_deployments(
    input: crate::operation::list_stage_deployments::ListStageDeploymentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StageDeploymentSummary>> {
    let input = match input.stage_deployments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_stages_output_stages(
    input: crate::operation::list_stages::ListStagesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StageSummary>> {
    let input = match input.stages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
