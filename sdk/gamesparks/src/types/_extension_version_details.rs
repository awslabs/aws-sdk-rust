// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the extension version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExtensionVersionDetails {
    /// <p>The namespace (qualifier) of the extension.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The name of the extension.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The model that defines the interface for this extension version.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>The version of the extension.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl ExtensionVersionDetails {
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The name of the extension.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The model that defines the interface for this extension version.</p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>The version of the extension.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl ExtensionVersionDetails {
    /// Creates a new builder-style object to manufacture [`ExtensionVersionDetails`](crate::types::ExtensionVersionDetails).
    pub fn builder() -> crate::types::builders::ExtensionVersionDetailsBuilder {
        crate::types::builders::ExtensionVersionDetailsBuilder::default()
    }
}

/// A builder for [`ExtensionVersionDetails`](crate::types::ExtensionVersionDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExtensionVersionDetailsBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl ExtensionVersionDetailsBuilder {
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace (qualifier) of the extension.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the extension.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the extension.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The model that defines the interface for this extension version.</p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>The model that defines the interface for this extension version.</p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The version of the extension.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the extension.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`ExtensionVersionDetails`](crate::types::ExtensionVersionDetails).
    pub fn build(self) -> crate::types::ExtensionVersionDetails {
        crate::types::ExtensionVersionDetails {
            namespace: self.namespace,
            name: self.name,
            schema: self.schema,
            version: self.version,
        }
    }
}
