// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_segment<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Segment>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SegmentBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SegmentDurationSeconds" => {
                            builder = builder.set_segment_duration_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SegmentName" => {
                            builder = builder.set_segment_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TsUseAudioRenditionGroup" => {
                            builder =
                                builder.set_ts_use_audio_rendition_group(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeIframeOnlyStreams" => {
                            builder =
                                builder.set_include_iframe_only_streams(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "TsIncludeDvbSubtitles" => {
                            builder =
                                builder.set_ts_include_dvb_subtitles(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Scte" => {
                            builder = builder.set_scte(crate::protocol_serde::shape_scte::de_scte(tokens)?);
                        }
                        "Encryption" => {
                            builder = builder.set_encryption(crate::protocol_serde::shape_encryption::de_encryption(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_segment(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Segment,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.segment_duration_seconds {
        object.key("SegmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.segment_name {
        object.key("SegmentName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ts_use_audio_rendition_group {
        object.key("TsUseAudioRenditionGroup").boolean(*var_3);
    }
    if let Some(var_4) = &input.include_iframe_only_streams {
        object.key("IncludeIframeOnlyStreams").boolean(*var_4);
    }
    if let Some(var_5) = &input.ts_include_dvb_subtitles {
        object.key("TsIncludeDvbSubtitles").boolean(*var_5);
    }
    if let Some(var_6) = &input.scte {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Scte").start_object();
        crate::protocol_serde::shape_scte::ser_scte(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Encryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
