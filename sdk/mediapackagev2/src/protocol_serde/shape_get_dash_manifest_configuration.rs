// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_get_dash_manifest_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::GetDashManifestConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GetDashManifestConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ManifestName" => {
                            builder = builder.set_manifest_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Url" => {
                            builder = builder.set_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ManifestWindowSeconds" => {
                            builder = builder.set_manifest_window_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "FilterConfiguration" => {
                            builder =
                                builder.set_filter_configuration(crate::protocol_serde::shape_filter_configuration::de_filter_configuration(tokens)?);
                        }
                        "MinUpdatePeriodSeconds" => {
                            builder = builder.set_min_update_period_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MinBufferTimeSeconds" => {
                            builder = builder.set_min_buffer_time_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SuggestedPresentationDelaySeconds" => {
                            builder = builder.set_suggested_presentation_delay_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SegmentTemplateFormat" => {
                            builder = builder.set_segment_template_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashSegmentTemplateFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PeriodTriggers" => {
                            builder =
                                builder.set_period_triggers(crate::protocol_serde::shape_dash_period_triggers::de_dash_period_triggers(tokens)?);
                        }
                        "ScteDash" => {
                            builder = builder.set_scte_dash(crate::protocol_serde::shape_scte_dash::de_scte_dash(tokens)?);
                        }
                        "DrmSignaling" => {
                            builder = builder.set_drm_signaling(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashDrmSignaling::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UtcTiming" => {
                            builder = builder.set_utc_timing(crate::protocol_serde::shape_dash_utc_timing::de_dash_utc_timing(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::get_dash_manifest_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
