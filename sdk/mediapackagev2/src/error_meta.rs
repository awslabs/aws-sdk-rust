// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see Access Management in the IAM User Guide.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting this resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Indicates that an error from the service occurred while trying to process a request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request throughput limit was exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input failed to meet the constraints specified by the AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel::CreateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel::CreateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_channel::CreateChannelError> for Error {
    fn from(err: crate::operation::create_channel::CreateChannelError) -> Self {
        match err {
            crate::operation::create_channel::CreateChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_channel::CreateChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_channel::CreateChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_channel::CreateChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_channel::CreateChannelError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_channel::CreateChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_channel::CreateChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_channel::CreateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel_group::CreateChannelGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel_group::CreateChannelGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_channel_group::CreateChannelGroupError> for Error {
    fn from(err: crate::operation::create_channel_group::CreateChannelGroupError) -> Self {
        match err {
            crate::operation::create_channel_group::CreateChannelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_channel_group::CreateChannelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_channel_group::CreateChannelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_channel_group::CreateChannelGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_channel_group::CreateChannelGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_channel_group::CreateChannelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_channel_group::CreateChannelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_channel_group::CreateChannelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_origin_endpoint::CreateOriginEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_origin_endpoint::CreateOriginEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_origin_endpoint::CreateOriginEndpointError> for Error {
    fn from(err: crate::operation::create_origin_endpoint::CreateOriginEndpointError) -> Self {
        match err {
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_origin_endpoint::CreateOriginEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel::DeleteChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel::DeleteChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_channel::DeleteChannelError> for Error {
    fn from(err: crate::operation::delete_channel::DeleteChannelError) -> Self {
        match err {
            crate::operation::delete_channel::DeleteChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_channel::DeleteChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_channel::DeleteChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_channel::DeleteChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_channel::DeleteChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_channel::DeleteChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel_group::DeleteChannelGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel_group::DeleteChannelGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_channel_group::DeleteChannelGroupError> for Error {
    fn from(err: crate::operation::delete_channel_group::DeleteChannelGroupError) -> Self {
        match err {
            crate::operation::delete_channel_group::DeleteChannelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_channel_group::DeleteChannelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_channel_group::DeleteChannelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_channel_group::DeleteChannelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_channel_group::DeleteChannelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_channel_group::DeleteChannelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel_policy::DeleteChannelPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel_policy::DeleteChannelPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_channel_policy::DeleteChannelPolicyError> for Error {
    fn from(err: crate::operation::delete_channel_policy::DeleteChannelPolicyError) -> Self {
        match err {
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_channel_policy::DeleteChannelPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_origin_endpoint::DeleteOriginEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_origin_endpoint::DeleteOriginEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_origin_endpoint::DeleteOriginEndpointError> for Error {
    fn from(err: crate::operation::delete_origin_endpoint::DeleteOriginEndpointError) -> Self {
        match err {
            crate::operation::delete_origin_endpoint::DeleteOriginEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_origin_endpoint::DeleteOriginEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_origin_endpoint::DeleteOriginEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_origin_endpoint::DeleteOriginEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_origin_endpoint::DeleteOriginEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError> for Error {
    fn from(err: crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError) -> Self {
        match err {
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_origin_endpoint_policy::DeleteOriginEndpointPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel::GetChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel::GetChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_channel::GetChannelError> for Error {
    fn from(err: crate::operation::get_channel::GetChannelError) -> Self {
        match err {
            crate::operation::get_channel::GetChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_channel::GetChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_channel::GetChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_channel::GetChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_channel::GetChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_channel::GetChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel_group::GetChannelGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel_group::GetChannelGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_channel_group::GetChannelGroupError> for Error {
    fn from(err: crate::operation::get_channel_group::GetChannelGroupError) -> Self {
        match err {
            crate::operation::get_channel_group::GetChannelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_channel_group::GetChannelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_channel_group::GetChannelGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_channel_group::GetChannelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_channel_group::GetChannelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_channel_group::GetChannelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel_policy::GetChannelPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_channel_policy::GetChannelPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_channel_policy::GetChannelPolicyError> for Error {
    fn from(err: crate::operation::get_channel_policy::GetChannelPolicyError) -> Self {
        match err {
            crate::operation::get_channel_policy::GetChannelPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_channel_policy::GetChannelPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_channel_policy::GetChannelPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_channel_policy::GetChannelPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_channel_policy::GetChannelPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_channel_policy::GetChannelPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_origin_endpoint::GetOriginEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_origin_endpoint::GetOriginEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_origin_endpoint::GetOriginEndpointError> for Error {
    fn from(err: crate::operation::get_origin_endpoint::GetOriginEndpointError) -> Self {
        match err {
            crate::operation::get_origin_endpoint::GetOriginEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_origin_endpoint::GetOriginEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_origin_endpoint::GetOriginEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_origin_endpoint::GetOriginEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_origin_endpoint::GetOriginEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_origin_endpoint::GetOriginEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError> for Error {
    fn from(err: crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError) -> Self {
        match err {
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_origin_endpoint_policy::GetOriginEndpointPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channel_groups::ListChannelGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channel_groups::ListChannelGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_channel_groups::ListChannelGroupsError> for Error {
    fn from(err: crate::operation::list_channel_groups::ListChannelGroupsError) -> Self {
        match err {
            crate::operation::list_channel_groups::ListChannelGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_channel_groups::ListChannelGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_channel_groups::ListChannelGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_channel_groups::ListChannelGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_channel_groups::ListChannelGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_channels::ListChannelsError> for Error {
    fn from(err: crate::operation::list_channels::ListChannelsError) -> Self {
        match err {
            crate::operation::list_channels::ListChannelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_channels::ListChannelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_channels::ListChannelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_channels::ListChannelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_channels::ListChannelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_channels::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_origin_endpoints::ListOriginEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_origin_endpoints::ListOriginEndpointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_origin_endpoints::ListOriginEndpointsError> for Error {
    fn from(err: crate::operation::list_origin_endpoints::ListOriginEndpointsError) -> Self {
        match err {
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_origin_endpoints::ListOriginEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_channel_policy::PutChannelPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_channel_policy::PutChannelPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_channel_policy::PutChannelPolicyError> for Error {
    fn from(err: crate::operation::put_channel_policy::PutChannelPolicyError) -> Self {
        match err {
            crate::operation::put_channel_policy::PutChannelPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_channel_policy::PutChannelPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError> for Error {
    fn from(err: crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError) -> Self {
        match err {
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_origin_endpoint_policy::PutOriginEndpointPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel::UpdateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel::UpdateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_channel::UpdateChannelError> for Error {
    fn from(err: crate::operation::update_channel::UpdateChannelError) -> Self {
        match err {
            crate::operation::update_channel::UpdateChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_channel::UpdateChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_channel::UpdateChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_channel::UpdateChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_channel::UpdateChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_channel::UpdateChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_channel::UpdateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel_group::UpdateChannelGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel_group::UpdateChannelGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_channel_group::UpdateChannelGroupError> for Error {
    fn from(err: crate::operation::update_channel_group::UpdateChannelGroupError) -> Self {
        match err {
            crate::operation::update_channel_group::UpdateChannelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_channel_group::UpdateChannelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_channel_group::UpdateChannelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_channel_group::UpdateChannelGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_channel_group::UpdateChannelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_channel_group::UpdateChannelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_channel_group::UpdateChannelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_origin_endpoint::UpdateOriginEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_origin_endpoint::UpdateOriginEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_origin_endpoint::UpdateOriginEndpointError> for Error {
    fn from(err: crate::operation::update_origin_endpoint::UpdateOriginEndpointError) -> Self {
        match err {
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
