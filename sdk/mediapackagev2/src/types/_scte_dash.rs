// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SCTE configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScteDash {
    /// <p>Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>Binary</code> - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.</p></li>
    /// <li>
    /// <p><code>XML</code> - The SCTE marker is expressed fully in XML.</p></li>
    /// </ul>
    pub ad_marker_dash: ::std::option::Option<crate::types::AdMarkerDash>,
}
impl ScteDash {
    /// <p>Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>Binary</code> - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.</p></li>
    /// <li>
    /// <p><code>XML</code> - The SCTE marker is expressed fully in XML.</p></li>
    /// </ul>
    pub fn ad_marker_dash(&self) -> ::std::option::Option<&crate::types::AdMarkerDash> {
        self.ad_marker_dash.as_ref()
    }
}
impl ScteDash {
    /// Creates a new builder-style object to manufacture [`ScteDash`](crate::types::ScteDash).
    pub fn builder() -> crate::types::builders::ScteDashBuilder {
        crate::types::builders::ScteDashBuilder::default()
    }
}

/// A builder for [`ScteDash`](crate::types::ScteDash).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScteDashBuilder {
    pub(crate) ad_marker_dash: ::std::option::Option<crate::types::AdMarkerDash>,
}
impl ScteDashBuilder {
    /// <p>Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>Binary</code> - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.</p></li>
    /// <li>
    /// <p><code>XML</code> - The SCTE marker is expressed fully in XML.</p></li>
    /// </ul>
    pub fn ad_marker_dash(mut self, input: crate::types::AdMarkerDash) -> Self {
        self.ad_marker_dash = ::std::option::Option::Some(input);
        self
    }
    /// <p>Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>Binary</code> - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.</p></li>
    /// <li>
    /// <p><code>XML</code> - The SCTE marker is expressed fully in XML.</p></li>
    /// </ul>
    pub fn set_ad_marker_dash(mut self, input: ::std::option::Option<crate::types::AdMarkerDash>) -> Self {
        self.ad_marker_dash = input;
        self
    }
    /// <p>Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>Binary</code> - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.</p></li>
    /// <li>
    /// <p><code>XML</code> - The SCTE marker is expressed fully in XML.</p></li>
    /// </ul>
    pub fn get_ad_marker_dash(&self) -> &::std::option::Option<crate::types::AdMarkerDash> {
        &self.ad_marker_dash
    }
    /// Consumes the builder and constructs a [`ScteDash`](crate::types::ScteDash).
    pub fn build(self) -> crate::types::ScteDash {
        crate::types::ScteDash {
            ad_marker_dash: self.ad_marker_dash,
        }
    }
}
