// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieve the DASH manifest configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDashManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub manifest_name: ::std::string::String,
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub url: ::std::string::String,
    /// <p>The total duration (in seconds) of the manifest's content.</p>
    pub manifest_window_seconds: ::std::option::Option<i32>,
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
    pub min_update_period_seconds: ::std::option::Option<i32>,
    /// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
    pub min_buffer_time_seconds: ::std::option::Option<i32>,
    /// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
    pub suggested_presentation_delay_seconds: ::std::option::Option<i32>,
    /// <p>Determines the type of variable used in the <code>media</code> URL of the <code>SegmentTemplate</code> tag in the manifest. Also specifies if segment timeline information is included in <code>SegmentTimeline</code> or <code>SegmentTemplate</code>.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>NUMBER_WITH_TIMELINE</code> - The <code>$Number$</code> variable is used in the <code>media</code> URL. The value of this variable is the sequential number of the segment. A full <code>SegmentTimeline</code> object is presented in each <code>SegmentTemplate</code>.</p></li>
    /// </ul>
    pub segment_template_format: ::std::option::Option<crate::types::DashSegmentTemplateFormat>,
    /// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
    pub period_triggers: ::std::option::Option<::std::vec::Vec<crate::types::DashPeriodTrigger>>,
    /// <p>The SCTE configuration.</p>
    pub scte_dash: ::std::option::Option<crate::types::ScteDash>,
    /// <p>Determines how the DASH manifest signals the DRM content.</p>
    pub drm_signaling: ::std::option::Option<crate::types::DashDrmSignaling>,
    /// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
    pub utc_timing: ::std::option::Option<crate::types::DashUtcTiming>,
}
impl GetDashManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn manifest_name(&self) -> &str {
        use std::ops::Deref;
        self.manifest_name.deref()
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The total duration (in seconds) of the manifest's content.</p>
    pub fn manifest_window_seconds(&self) -> ::std::option::Option<i32> {
        self.manifest_window_seconds
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(&self) -> ::std::option::Option<&crate::types::FilterConfiguration> {
        self.filter_configuration.as_ref()
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
    pub fn min_update_period_seconds(&self) -> ::std::option::Option<i32> {
        self.min_update_period_seconds
    }
    /// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
    pub fn min_buffer_time_seconds(&self) -> ::std::option::Option<i32> {
        self.min_buffer_time_seconds
    }
    /// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
    pub fn suggested_presentation_delay_seconds(&self) -> ::std::option::Option<i32> {
        self.suggested_presentation_delay_seconds
    }
    /// <p>Determines the type of variable used in the <code>media</code> URL of the <code>SegmentTemplate</code> tag in the manifest. Also specifies if segment timeline information is included in <code>SegmentTimeline</code> or <code>SegmentTemplate</code>.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>NUMBER_WITH_TIMELINE</code> - The <code>$Number$</code> variable is used in the <code>media</code> URL. The value of this variable is the sequential number of the segment. A full <code>SegmentTimeline</code> object is presented in each <code>SegmentTemplate</code>.</p></li>
    /// </ul>
    pub fn segment_template_format(&self) -> ::std::option::Option<&crate::types::DashSegmentTemplateFormat> {
        self.segment_template_format.as_ref()
    }
    /// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.period_triggers.is_none()`.
    pub fn period_triggers(&self) -> &[crate::types::DashPeriodTrigger] {
        self.period_triggers.as_deref().unwrap_or_default()
    }
    /// <p>The SCTE configuration.</p>
    pub fn scte_dash(&self) -> ::std::option::Option<&crate::types::ScteDash> {
        self.scte_dash.as_ref()
    }
    /// <p>Determines how the DASH manifest signals the DRM content.</p>
    pub fn drm_signaling(&self) -> ::std::option::Option<&crate::types::DashDrmSignaling> {
        self.drm_signaling.as_ref()
    }
    /// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
    pub fn utc_timing(&self) -> ::std::option::Option<&crate::types::DashUtcTiming> {
        self.utc_timing.as_ref()
    }
}
impl GetDashManifestConfiguration {
    /// Creates a new builder-style object to manufacture [`GetDashManifestConfiguration`](crate::types::GetDashManifestConfiguration).
    pub fn builder() -> crate::types::builders::GetDashManifestConfigurationBuilder {
        crate::types::builders::GetDashManifestConfigurationBuilder::default()
    }
}

/// A builder for [`GetDashManifestConfiguration`](crate::types::GetDashManifestConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDashManifestConfigurationBuilder {
    pub(crate) manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) manifest_window_seconds: ::std::option::Option<i32>,
    pub(crate) filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    pub(crate) min_update_period_seconds: ::std::option::Option<i32>,
    pub(crate) min_buffer_time_seconds: ::std::option::Option<i32>,
    pub(crate) suggested_presentation_delay_seconds: ::std::option::Option<i32>,
    pub(crate) segment_template_format: ::std::option::Option<crate::types::DashSegmentTemplateFormat>,
    pub(crate) period_triggers: ::std::option::Option<::std::vec::Vec<crate::types::DashPeriodTrigger>>,
    pub(crate) scte_dash: ::std::option::Option<crate::types::ScteDash>,
    pub(crate) drm_signaling: ::std::option::Option<crate::types::DashDrmSignaling>,
    pub(crate) utc_timing: ::std::option::Option<crate::types::DashUtcTiming>,
}
impl GetDashManifestConfigurationBuilder {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    /// This field is required.
    pub fn manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn set_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn get_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_name
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The total duration (in seconds) of the manifest's content.</p>
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total duration (in seconds) of the manifest's content.</p>
    pub fn set_manifest_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// <p>The total duration (in seconds) of the manifest's content.</p>
    pub fn get_manifest_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.manifest_window_seconds
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(mut self, input: crate::types::FilterConfiguration) -> Self {
        self.filter_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<crate::types::FilterConfiguration>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<crate::types::FilterConfiguration> {
        &self.filter_configuration
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
    pub fn min_update_period_seconds(mut self, input: i32) -> Self {
        self.min_update_period_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
    pub fn set_min_update_period_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_update_period_seconds = input;
        self
    }
    /// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
    pub fn get_min_update_period_seconds(&self) -> &::std::option::Option<i32> {
        &self.min_update_period_seconds
    }
    /// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
    pub fn min_buffer_time_seconds(mut self, input: i32) -> Self {
        self.min_buffer_time_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
    pub fn set_min_buffer_time_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_buffer_time_seconds = input;
        self
    }
    /// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
    pub fn get_min_buffer_time_seconds(&self) -> &::std::option::Option<i32> {
        &self.min_buffer_time_seconds
    }
    /// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
    pub fn suggested_presentation_delay_seconds(mut self, input: i32) -> Self {
        self.suggested_presentation_delay_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
    pub fn set_suggested_presentation_delay_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.suggested_presentation_delay_seconds = input;
        self
    }
    /// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
    pub fn get_suggested_presentation_delay_seconds(&self) -> &::std::option::Option<i32> {
        &self.suggested_presentation_delay_seconds
    }
    /// <p>Determines the type of variable used in the <code>media</code> URL of the <code>SegmentTemplate</code> tag in the manifest. Also specifies if segment timeline information is included in <code>SegmentTimeline</code> or <code>SegmentTemplate</code>.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>NUMBER_WITH_TIMELINE</code> - The <code>$Number$</code> variable is used in the <code>media</code> URL. The value of this variable is the sequential number of the segment. A full <code>SegmentTimeline</code> object is presented in each <code>SegmentTemplate</code>.</p></li>
    /// </ul>
    pub fn segment_template_format(mut self, input: crate::types::DashSegmentTemplateFormat) -> Self {
        self.segment_template_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the type of variable used in the <code>media</code> URL of the <code>SegmentTemplate</code> tag in the manifest. Also specifies if segment timeline information is included in <code>SegmentTimeline</code> or <code>SegmentTemplate</code>.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>NUMBER_WITH_TIMELINE</code> - The <code>$Number$</code> variable is used in the <code>media</code> URL. The value of this variable is the sequential number of the segment. A full <code>SegmentTimeline</code> object is presented in each <code>SegmentTemplate</code>.</p></li>
    /// </ul>
    pub fn set_segment_template_format(mut self, input: ::std::option::Option<crate::types::DashSegmentTemplateFormat>) -> Self {
        self.segment_template_format = input;
        self
    }
    /// <p>Determines the type of variable used in the <code>media</code> URL of the <code>SegmentTemplate</code> tag in the manifest. Also specifies if segment timeline information is included in <code>SegmentTimeline</code> or <code>SegmentTemplate</code>.</p>
    /// <p>Value description:</p>
    /// <ul>
    /// <li>
    /// <p><code>NUMBER_WITH_TIMELINE</code> - The <code>$Number$</code> variable is used in the <code>media</code> URL. The value of this variable is the sequential number of the segment. A full <code>SegmentTimeline</code> object is presented in each <code>SegmentTemplate</code>.</p></li>
    /// </ul>
    pub fn get_segment_template_format(&self) -> &::std::option::Option<crate::types::DashSegmentTemplateFormat> {
        &self.segment_template_format
    }
    /// Appends an item to `period_triggers`.
    ///
    /// To override the contents of this collection use [`set_period_triggers`](Self::set_period_triggers).
    ///
    /// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
    pub fn period_triggers(mut self, input: crate::types::DashPeriodTrigger) -> Self {
        let mut v = self.period_triggers.unwrap_or_default();
        v.push(input);
        self.period_triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
    pub fn set_period_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DashPeriodTrigger>>) -> Self {
        self.period_triggers = input;
        self
    }
    /// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
    pub fn get_period_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DashPeriodTrigger>> {
        &self.period_triggers
    }
    /// <p>The SCTE configuration.</p>
    pub fn scte_dash(mut self, input: crate::types::ScteDash) -> Self {
        self.scte_dash = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SCTE configuration.</p>
    pub fn set_scte_dash(mut self, input: ::std::option::Option<crate::types::ScteDash>) -> Self {
        self.scte_dash = input;
        self
    }
    /// <p>The SCTE configuration.</p>
    pub fn get_scte_dash(&self) -> &::std::option::Option<crate::types::ScteDash> {
        &self.scte_dash
    }
    /// <p>Determines how the DASH manifest signals the DRM content.</p>
    pub fn drm_signaling(mut self, input: crate::types::DashDrmSignaling) -> Self {
        self.drm_signaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines how the DASH manifest signals the DRM content.</p>
    pub fn set_drm_signaling(mut self, input: ::std::option::Option<crate::types::DashDrmSignaling>) -> Self {
        self.drm_signaling = input;
        self
    }
    /// <p>Determines how the DASH manifest signals the DRM content.</p>
    pub fn get_drm_signaling(&self) -> &::std::option::Option<crate::types::DashDrmSignaling> {
        &self.drm_signaling
    }
    /// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
    pub fn utc_timing(mut self, input: crate::types::DashUtcTiming) -> Self {
        self.utc_timing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
    pub fn set_utc_timing(mut self, input: ::std::option::Option<crate::types::DashUtcTiming>) -> Self {
        self.utc_timing = input;
        self
    }
    /// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
    pub fn get_utc_timing(&self) -> &::std::option::Option<crate::types::DashUtcTiming> {
        &self.utc_timing
    }
    /// Consumes the builder and constructs a [`GetDashManifestConfiguration`](crate::types::GetDashManifestConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`manifest_name`](crate::types::builders::GetDashManifestConfigurationBuilder::manifest_name)
    /// - [`url`](crate::types::builders::GetDashManifestConfigurationBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::GetDashManifestConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GetDashManifestConfiguration {
            manifest_name: self.manifest_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_name",
                    "manifest_name was not specified but it is required when building GetDashManifestConfiguration",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building GetDashManifestConfiguration",
                )
            })?,
            manifest_window_seconds: self.manifest_window_seconds,
            filter_configuration: self.filter_configuration,
            min_update_period_seconds: self.min_update_period_seconds,
            min_buffer_time_seconds: self.min_buffer_time_seconds,
            suggested_presentation_delay_seconds: self.suggested_presentation_delay_seconds,
            segment_template_format: self.segment_template_format,
            period_triggers: self.period_triggers,
            scte_dash: self.scte_dash,
            drm_signaling: self.drm_signaling,
            utc_timing: self.utc_timing,
        })
    }
}
