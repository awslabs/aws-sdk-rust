// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List the DASH manifest configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDashManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub manifest_name: ::std::string::String,
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl ListDashManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn manifest_name(&self) -> &str {
        use std::ops::Deref;
        self.manifest_name.deref()
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ListDashManifestConfiguration {
    /// Creates a new builder-style object to manufacture [`ListDashManifestConfiguration`](crate::types::ListDashManifestConfiguration).
    pub fn builder() -> crate::types::builders::ListDashManifestConfigurationBuilder {
        crate::types::builders::ListDashManifestConfigurationBuilder::default()
    }
}

/// A builder for [`ListDashManifestConfiguration`](crate::types::ListDashManifestConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDashManifestConfigurationBuilder {
    pub(crate) manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl ListDashManifestConfigurationBuilder {
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    /// This field is required.
    pub fn manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn set_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.</p>
    pub fn get_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_name
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`ListDashManifestConfiguration`](crate::types::ListDashManifestConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`manifest_name`](crate::types::builders::ListDashManifestConfigurationBuilder::manifest_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ListDashManifestConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListDashManifestConfiguration {
            manifest_name: self.manifest_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_name",
                    "manifest_name was not specified but it is required when building ListDashManifestConfiguration",
                )
            })?,
            url: self.url,
        })
    }
}
