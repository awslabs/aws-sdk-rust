// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ValidationExceptionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let validationexceptiontype = unimplemented!();
/// match validationexceptiontype {
///     ValidationExceptionType::CencIvIncompatible => { /* ... */ },
///     ValidationExceptionType::ContainerTypeImmutable => { /* ... */ },
///     ValidationExceptionType::DrmSystemsEncryptionMethodIncompatible => { /* ... */ },
///     ValidationExceptionType::EncryptionContractShared => { /* ... */ },
///     ValidationExceptionType::EncryptionContractUnencrypted => { /* ... */ },
///     ValidationExceptionType::EncryptionContractWithoutAudioRenditionIncompatible => { /* ... */ },
///     ValidationExceptionType::EncryptionMethodContainerTypeMismatch => { /* ... */ },
///     ValidationExceptionType::EndTimeEarlierThanStartTime => { /* ... */ },
///     ValidationExceptionType::InvalidManifestFilter => { /* ... */ },
///     ValidationExceptionType::InvalidPaginationMaxResults => { /* ... */ },
///     ValidationExceptionType::InvalidPaginationToken => { /* ... */ },
///     ValidationExceptionType::InvalidPolicy => { /* ... */ },
///     ValidationExceptionType::InvalidRoleArn => { /* ... */ },
///     ValidationExceptionType::InvalidTimeDelaySeconds => { /* ... */ },
///     ValidationExceptionType::ManifestNameCollision => { /* ... */ },
///     ValidationExceptionType::MemberDoesNotMatchPattern => { /* ... */ },
///     ValidationExceptionType::MemberInvalid => { /* ... */ },
///     ValidationExceptionType::MemberInvalidEnumValue => { /* ... */ },
///     ValidationExceptionType::MemberMaxLength => { /* ... */ },
///     ValidationExceptionType::MemberMaxValue => { /* ... */ },
///     ValidationExceptionType::MemberMinLength => { /* ... */ },
///     ValidationExceptionType::MemberMinValue => { /* ... */ },
///     ValidationExceptionType::MemberMissing => { /* ... */ },
///     ValidationExceptionType::NumManifestsHigh => { /* ... */ },
///     ValidationExceptionType::NumManifestsLow => { /* ... */ },
///     ValidationExceptionType::RoleArnInvalidFormat => { /* ... */ },
///     ValidationExceptionType::RoleArnLengthOutOfRange => { /* ... */ },
///     ValidationExceptionType::RoleArnNotAssumable => { /* ... */ },
///     ValidationExceptionType::UrlInvalid => { /* ... */ },
///     ValidationExceptionType::UrlLinkLocalAddress => { /* ... */ },
///     ValidationExceptionType::UrlLocalAddress => { /* ... */ },
///     ValidationExceptionType::UrlLoopbackAddress => { /* ... */ },
///     ValidationExceptionType::UrlMulticastAddress => { /* ... */ },
///     ValidationExceptionType::UrlPort => { /* ... */ },
///     ValidationExceptionType::UrlScheme => { /* ... */ },
///     ValidationExceptionType::UrlUnknownHost => { /* ... */ },
///     ValidationExceptionType::UrlUserInfo => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `validationexceptiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ValidationExceptionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ValidationExceptionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ValidationExceptionType::NewFeature` is defined.
/// Specifically, when `validationexceptiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ValidationExceptionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ValidationExceptionType {
    #[allow(missing_docs)] // documentation missing in model
    CencIvIncompatible,
    #[allow(missing_docs)] // documentation missing in model
    ContainerTypeImmutable,
    #[allow(missing_docs)] // documentation missing in model
    DrmSystemsEncryptionMethodIncompatible,
    #[allow(missing_docs)] // documentation missing in model
    EncryptionContractShared,
    #[allow(missing_docs)] // documentation missing in model
    EncryptionContractUnencrypted,
    #[allow(missing_docs)] // documentation missing in model
    EncryptionContractWithoutAudioRenditionIncompatible,
    #[allow(missing_docs)] // documentation missing in model
    EncryptionMethodContainerTypeMismatch,
    #[allow(missing_docs)] // documentation missing in model
    EndTimeEarlierThanStartTime,
    #[allow(missing_docs)] // documentation missing in model
    InvalidManifestFilter,
    #[allow(missing_docs)] // documentation missing in model
    InvalidPaginationMaxResults,
    #[allow(missing_docs)] // documentation missing in model
    InvalidPaginationToken,
    #[allow(missing_docs)] // documentation missing in model
    InvalidPolicy,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRoleArn,
    #[allow(missing_docs)] // documentation missing in model
    InvalidTimeDelaySeconds,
    #[allow(missing_docs)] // documentation missing in model
    ManifestNameCollision,
    #[allow(missing_docs)] // documentation missing in model
    MemberDoesNotMatchPattern,
    #[allow(missing_docs)] // documentation missing in model
    MemberInvalid,
    #[allow(missing_docs)] // documentation missing in model
    MemberInvalidEnumValue,
    #[allow(missing_docs)] // documentation missing in model
    MemberMaxLength,
    #[allow(missing_docs)] // documentation missing in model
    MemberMaxValue,
    #[allow(missing_docs)] // documentation missing in model
    MemberMinLength,
    #[allow(missing_docs)] // documentation missing in model
    MemberMinValue,
    #[allow(missing_docs)] // documentation missing in model
    MemberMissing,
    #[allow(missing_docs)] // documentation missing in model
    NumManifestsHigh,
    #[allow(missing_docs)] // documentation missing in model
    NumManifestsLow,
    #[allow(missing_docs)] // documentation missing in model
    RoleArnInvalidFormat,
    #[allow(missing_docs)] // documentation missing in model
    RoleArnLengthOutOfRange,
    #[allow(missing_docs)] // documentation missing in model
    RoleArnNotAssumable,
    #[allow(missing_docs)] // documentation missing in model
    UrlInvalid,
    #[allow(missing_docs)] // documentation missing in model
    UrlLinkLocalAddress,
    #[allow(missing_docs)] // documentation missing in model
    UrlLocalAddress,
    #[allow(missing_docs)] // documentation missing in model
    UrlLoopbackAddress,
    #[allow(missing_docs)] // documentation missing in model
    UrlMulticastAddress,
    #[allow(missing_docs)] // documentation missing in model
    UrlPort,
    #[allow(missing_docs)] // documentation missing in model
    UrlScheme,
    #[allow(missing_docs)] // documentation missing in model
    UrlUnknownHost,
    #[allow(missing_docs)] // documentation missing in model
    UrlUserInfo,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ValidationExceptionType {
    fn from(s: &str) -> Self {
        match s {
            "CENC_IV_INCOMPATIBLE" => ValidationExceptionType::CencIvIncompatible,
            "CONTAINER_TYPE_IMMUTABLE" => ValidationExceptionType::ContainerTypeImmutable,
            "DRM_SYSTEMS_ENCRYPTION_METHOD_INCOMPATIBLE" => ValidationExceptionType::DrmSystemsEncryptionMethodIncompatible,
            "ENCRYPTION_CONTRACT_SHARED" => ValidationExceptionType::EncryptionContractShared,
            "ENCRYPTION_CONTRACT_UNENCRYPTED" => ValidationExceptionType::EncryptionContractUnencrypted,
            "ENCRYPTION_CONTRACT_WITHOUT_AUDIO_RENDITION_INCOMPATIBLE" => {
                ValidationExceptionType::EncryptionContractWithoutAudioRenditionIncompatible
            }
            "ENCRYPTION_METHOD_CONTAINER_TYPE_MISMATCH" => ValidationExceptionType::EncryptionMethodContainerTypeMismatch,
            "END_TIME_EARLIER_THAN_START_TIME" => ValidationExceptionType::EndTimeEarlierThanStartTime,
            "INVALID_MANIFEST_FILTER" => ValidationExceptionType::InvalidManifestFilter,
            "INVALID_PAGINATION_MAX_RESULTS" => ValidationExceptionType::InvalidPaginationMaxResults,
            "INVALID_PAGINATION_TOKEN" => ValidationExceptionType::InvalidPaginationToken,
            "INVALID_POLICY" => ValidationExceptionType::InvalidPolicy,
            "INVALID_ROLE_ARN" => ValidationExceptionType::InvalidRoleArn,
            "INVALID_TIME_DELAY_SECONDS" => ValidationExceptionType::InvalidTimeDelaySeconds,
            "MANIFEST_NAME_COLLISION" => ValidationExceptionType::ManifestNameCollision,
            "MEMBER_DOES_NOT_MATCH_PATTERN" => ValidationExceptionType::MemberDoesNotMatchPattern,
            "MEMBER_INVALID" => ValidationExceptionType::MemberInvalid,
            "MEMBER_INVALID_ENUM_VALUE" => ValidationExceptionType::MemberInvalidEnumValue,
            "MEMBER_MAX_LENGTH" => ValidationExceptionType::MemberMaxLength,
            "MEMBER_MAX_VALUE" => ValidationExceptionType::MemberMaxValue,
            "MEMBER_MIN_LENGTH" => ValidationExceptionType::MemberMinLength,
            "MEMBER_MIN_VALUE" => ValidationExceptionType::MemberMinValue,
            "MEMBER_MISSING" => ValidationExceptionType::MemberMissing,
            "NUM_MANIFESTS_HIGH" => ValidationExceptionType::NumManifestsHigh,
            "NUM_MANIFESTS_LOW" => ValidationExceptionType::NumManifestsLow,
            "ROLE_ARN_INVALID_FORMAT" => ValidationExceptionType::RoleArnInvalidFormat,
            "ROLE_ARN_LENGTH_OUT_OF_RANGE" => ValidationExceptionType::RoleArnLengthOutOfRange,
            "ROLE_ARN_NOT_ASSUMABLE" => ValidationExceptionType::RoleArnNotAssumable,
            "URL_INVALID" => ValidationExceptionType::UrlInvalid,
            "URL_LINK_LOCAL_ADDRESS" => ValidationExceptionType::UrlLinkLocalAddress,
            "URL_LOCAL_ADDRESS" => ValidationExceptionType::UrlLocalAddress,
            "URL_LOOPBACK_ADDRESS" => ValidationExceptionType::UrlLoopbackAddress,
            "URL_MULTICAST_ADDRESS" => ValidationExceptionType::UrlMulticastAddress,
            "URL_PORT" => ValidationExceptionType::UrlPort,
            "URL_SCHEME" => ValidationExceptionType::UrlScheme,
            "URL_UNKNOWN_HOST" => ValidationExceptionType::UrlUnknownHost,
            "URL_USER_INFO" => ValidationExceptionType::UrlUserInfo,
            other => ValidationExceptionType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ValidationExceptionType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ValidationExceptionType::from(s))
    }
}
impl ValidationExceptionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ValidationExceptionType::CencIvIncompatible => "CENC_IV_INCOMPATIBLE",
            ValidationExceptionType::ContainerTypeImmutable => "CONTAINER_TYPE_IMMUTABLE",
            ValidationExceptionType::DrmSystemsEncryptionMethodIncompatible => "DRM_SYSTEMS_ENCRYPTION_METHOD_INCOMPATIBLE",
            ValidationExceptionType::EncryptionContractShared => "ENCRYPTION_CONTRACT_SHARED",
            ValidationExceptionType::EncryptionContractUnencrypted => "ENCRYPTION_CONTRACT_UNENCRYPTED",
            ValidationExceptionType::EncryptionContractWithoutAudioRenditionIncompatible => {
                "ENCRYPTION_CONTRACT_WITHOUT_AUDIO_RENDITION_INCOMPATIBLE"
            }
            ValidationExceptionType::EncryptionMethodContainerTypeMismatch => "ENCRYPTION_METHOD_CONTAINER_TYPE_MISMATCH",
            ValidationExceptionType::EndTimeEarlierThanStartTime => "END_TIME_EARLIER_THAN_START_TIME",
            ValidationExceptionType::InvalidManifestFilter => "INVALID_MANIFEST_FILTER",
            ValidationExceptionType::InvalidPaginationMaxResults => "INVALID_PAGINATION_MAX_RESULTS",
            ValidationExceptionType::InvalidPaginationToken => "INVALID_PAGINATION_TOKEN",
            ValidationExceptionType::InvalidPolicy => "INVALID_POLICY",
            ValidationExceptionType::InvalidRoleArn => "INVALID_ROLE_ARN",
            ValidationExceptionType::InvalidTimeDelaySeconds => "INVALID_TIME_DELAY_SECONDS",
            ValidationExceptionType::ManifestNameCollision => "MANIFEST_NAME_COLLISION",
            ValidationExceptionType::MemberDoesNotMatchPattern => "MEMBER_DOES_NOT_MATCH_PATTERN",
            ValidationExceptionType::MemberInvalid => "MEMBER_INVALID",
            ValidationExceptionType::MemberInvalidEnumValue => "MEMBER_INVALID_ENUM_VALUE",
            ValidationExceptionType::MemberMaxLength => "MEMBER_MAX_LENGTH",
            ValidationExceptionType::MemberMaxValue => "MEMBER_MAX_VALUE",
            ValidationExceptionType::MemberMinLength => "MEMBER_MIN_LENGTH",
            ValidationExceptionType::MemberMinValue => "MEMBER_MIN_VALUE",
            ValidationExceptionType::MemberMissing => "MEMBER_MISSING",
            ValidationExceptionType::NumManifestsHigh => "NUM_MANIFESTS_HIGH",
            ValidationExceptionType::NumManifestsLow => "NUM_MANIFESTS_LOW",
            ValidationExceptionType::RoleArnInvalidFormat => "ROLE_ARN_INVALID_FORMAT",
            ValidationExceptionType::RoleArnLengthOutOfRange => "ROLE_ARN_LENGTH_OUT_OF_RANGE",
            ValidationExceptionType::RoleArnNotAssumable => "ROLE_ARN_NOT_ASSUMABLE",
            ValidationExceptionType::UrlInvalid => "URL_INVALID",
            ValidationExceptionType::UrlLinkLocalAddress => "URL_LINK_LOCAL_ADDRESS",
            ValidationExceptionType::UrlLocalAddress => "URL_LOCAL_ADDRESS",
            ValidationExceptionType::UrlLoopbackAddress => "URL_LOOPBACK_ADDRESS",
            ValidationExceptionType::UrlMulticastAddress => "URL_MULTICAST_ADDRESS",
            ValidationExceptionType::UrlPort => "URL_PORT",
            ValidationExceptionType::UrlScheme => "URL_SCHEME",
            ValidationExceptionType::UrlUnknownHost => "URL_UNKNOWN_HOST",
            ValidationExceptionType::UrlUserInfo => "URL_USER_INFO",
            ValidationExceptionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CENC_IV_INCOMPATIBLE",
            "CONTAINER_TYPE_IMMUTABLE",
            "DRM_SYSTEMS_ENCRYPTION_METHOD_INCOMPATIBLE",
            "ENCRYPTION_CONTRACT_SHARED",
            "ENCRYPTION_CONTRACT_UNENCRYPTED",
            "ENCRYPTION_CONTRACT_WITHOUT_AUDIO_RENDITION_INCOMPATIBLE",
            "ENCRYPTION_METHOD_CONTAINER_TYPE_MISMATCH",
            "END_TIME_EARLIER_THAN_START_TIME",
            "INVALID_MANIFEST_FILTER",
            "INVALID_PAGINATION_MAX_RESULTS",
            "INVALID_PAGINATION_TOKEN",
            "INVALID_POLICY",
            "INVALID_ROLE_ARN",
            "INVALID_TIME_DELAY_SECONDS",
            "MANIFEST_NAME_COLLISION",
            "MEMBER_DOES_NOT_MATCH_PATTERN",
            "MEMBER_INVALID",
            "MEMBER_INVALID_ENUM_VALUE",
            "MEMBER_MAX_LENGTH",
            "MEMBER_MAX_VALUE",
            "MEMBER_MIN_LENGTH",
            "MEMBER_MIN_VALUE",
            "MEMBER_MISSING",
            "NUM_MANIFESTS_HIGH",
            "NUM_MANIFESTS_LOW",
            "ROLE_ARN_INVALID_FORMAT",
            "ROLE_ARN_LENGTH_OUT_OF_RANGE",
            "ROLE_ARN_NOT_ASSUMABLE",
            "URL_INVALID",
            "URL_LINK_LOCAL_ADDRESS",
            "URL_LOCAL_ADDRESS",
            "URL_LOOPBACK_ADDRESS",
            "URL_MULTICAST_ADDRESS",
            "URL_PORT",
            "URL_SCHEME",
            "URL_UNKNOWN_HOST",
            "URL_USER_INFO",
        ]
    }
}
impl ::std::convert::AsRef<str> for ValidationExceptionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
