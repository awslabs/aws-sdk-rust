// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashUtcTiming {
    /// <p>The UTC timing mode.</p>
    pub timing_mode: ::std::option::Option<crate::types::DashUtcTimingMode>,
    /// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
    pub timing_source: ::std::option::Option<::std::string::String>,
}
impl DashUtcTiming {
    /// <p>The UTC timing mode.</p>
    pub fn timing_mode(&self) -> ::std::option::Option<&crate::types::DashUtcTimingMode> {
        self.timing_mode.as_ref()
    }
    /// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
    pub fn timing_source(&self) -> ::std::option::Option<&str> {
        self.timing_source.as_deref()
    }
}
impl DashUtcTiming {
    /// Creates a new builder-style object to manufacture [`DashUtcTiming`](crate::types::DashUtcTiming).
    pub fn builder() -> crate::types::builders::DashUtcTimingBuilder {
        crate::types::builders::DashUtcTimingBuilder::default()
    }
}

/// A builder for [`DashUtcTiming`](crate::types::DashUtcTiming).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DashUtcTimingBuilder {
    pub(crate) timing_mode: ::std::option::Option<crate::types::DashUtcTimingMode>,
    pub(crate) timing_source: ::std::option::Option<::std::string::String>,
}
impl DashUtcTimingBuilder {
    /// <p>The UTC timing mode.</p>
    pub fn timing_mode(mut self, input: crate::types::DashUtcTimingMode) -> Self {
        self.timing_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC timing mode.</p>
    pub fn set_timing_mode(mut self, input: ::std::option::Option<crate::types::DashUtcTimingMode>) -> Self {
        self.timing_mode = input;
        self
    }
    /// <p>The UTC timing mode.</p>
    pub fn get_timing_mode(&self) -> &::std::option::Option<crate::types::DashUtcTimingMode> {
        &self.timing_mode
    }
    /// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
    pub fn timing_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timing_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
    pub fn set_timing_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timing_source = input;
        self
    }
    /// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
    pub fn get_timing_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.timing_source
    }
    /// Consumes the builder and constructs a [`DashUtcTiming`](crate::types::DashUtcTiming).
    pub fn build(self) -> crate::types::DashUtcTiming {
        crate::types::DashUtcTiming {
            timing_mode: self.timing_mode,
            timing_source: self.timing_source,
        }
    }
}
