// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterConfiguration {
    /// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
    pub manifest_filter: ::std::option::Option<::std::string::String>,
    /// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
    pub start: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
    pub end: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
    pub time_delay_seconds: ::std::option::Option<i32>,
}
impl FilterConfiguration {
    /// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
    pub fn manifest_filter(&self) -> ::std::option::Option<&str> {
        self.manifest_filter.as_deref()
    }
    /// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
    pub fn start(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start.as_ref()
    }
    /// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
    pub fn end(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end.as_ref()
    }
    /// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
    pub fn time_delay_seconds(&self) -> ::std::option::Option<i32> {
        self.time_delay_seconds
    }
}
impl FilterConfiguration {
    /// Creates a new builder-style object to manufacture [`FilterConfiguration`](crate::types::FilterConfiguration).
    pub fn builder() -> crate::types::builders::FilterConfigurationBuilder {
        crate::types::builders::FilterConfigurationBuilder::default()
    }
}

/// A builder for [`FilterConfiguration`](crate::types::FilterConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterConfigurationBuilder {
    pub(crate) manifest_filter: ::std::option::Option<::std::string::String>,
    pub(crate) start: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_delay_seconds: ::std::option::Option<i32>,
}
impl FilterConfigurationBuilder {
    /// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
    pub fn manifest_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
    pub fn set_manifest_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_filter = input;
        self
    }
    /// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
    pub fn get_manifest_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_filter
    }
    /// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
    pub fn start(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
    pub fn set_start(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start = input;
        self
    }
    /// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
    pub fn get_start(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start
    }
    /// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
    pub fn end(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
    pub fn set_end(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end = input;
        self
    }
    /// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
    pub fn get_end(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end
    }
    /// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
    pub fn time_delay_seconds(mut self, input: i32) -> Self {
        self.time_delay_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
    pub fn set_time_delay_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.time_delay_seconds = input;
        self
    }
    /// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
    pub fn get_time_delay_seconds(&self) -> &::std::option::Option<i32> {
        &self.time_delay_seconds
    }
    /// Consumes the builder and constructs a [`FilterConfiguration`](crate::types::FilterConfiguration).
    pub fn build(self) -> crate::types::FilterConfiguration {
        crate::types::FilterConfiguration {
            manifest_filter: self.manifest_filter,
            start: self.start,
            end: self.end,
            time_delay_seconds: self.time_delay_seconds,
        }
    }
}
