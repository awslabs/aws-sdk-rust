// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_origin_endpoint::_create_origin_endpoint_output::CreateOriginEndpointOutputBuilder;

pub use crate::operation::create_origin_endpoint::_create_origin_endpoint_input::CreateOriginEndpointInputBuilder;

impl CreateOriginEndpointInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_origin_endpoint::CreateOriginEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_origin_endpoint();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateOriginEndpoint`.
///
/// <p>The endpoint is attached to a channel, and represents the output of the live content. You can associate multiple endpoints to a single channel. Each endpoint gives players and downstream CDNs (such as Amazon CloudFront) access to the content for playback. Content can't be served from a channel until it has an endpoint. You can create only one endpoint with each request. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateOriginEndpointFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_origin_endpoint::builders::CreateOriginEndpointInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
        crate::operation::create_origin_endpoint::CreateOriginEndpointError,
    > for CreateOriginEndpointFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
            crate::operation::create_origin_endpoint::CreateOriginEndpointError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateOriginEndpointFluentBuilder {
    /// Creates a new `CreateOriginEndpoint`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateOriginEndpoint as a reference.
    pub fn as_input(&self) -> &crate::operation::create_origin_endpoint::builders::CreateOriginEndpointInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_origin_endpoint::CreateOriginEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_origin_endpoint::CreateOriginEndpoint::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_origin_endpoint::CreateOriginEndpoint::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
        crate::operation::create_origin_endpoint::CreateOriginEndpointError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_group_name(input.into());
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_group_name(input);
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_group_name()
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. </p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_name(input.into());
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. </p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_name(input);
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. </p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_name()
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and must be unique for your account in the AWS Region and channel. You can't use spaces in the name. You can't change the name after you create the endpoint.</p>
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.origin_endpoint_name(input.into());
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and must be unique for your account in the AWS Region and channel. You can't use spaces in the name. You can't change the name after you create the endpoint.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_origin_endpoint_name(input);
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and must be unique for your account in the AWS Region and channel. You can't use spaces in the name. You can't change the name after you create the endpoint.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_origin_endpoint_name()
    }
    /// <p>The type of container to attach to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file. You can't change the container type after you create the endpoint.</p>
    pub fn container_type(mut self, input: crate::types::ContainerType) -> Self {
        self.inner = self.inner.container_type(input);
        self
    }
    /// <p>The type of container to attach to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file. You can't change the container type after you create the endpoint.</p>
    pub fn set_container_type(mut self, input: ::std::option::Option<crate::types::ContainerType>) -> Self {
        self.inner = self.inner.set_container_type(input);
        self
    }
    /// <p>The type of container to attach to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file. You can't change the container type after you create the endpoint.</p>
    pub fn get_container_type(&self) -> &::std::option::Option<crate::types::ContainerType> {
        self.inner.get_container_type()
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn segment(mut self, input: crate::types::Segment) -> Self {
        self.inner = self.inner.segment(input);
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn set_segment(mut self, input: ::std::option::Option<crate::types::Segment>) -> Self {
        self.inner = self.inner.set_segment(input);
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn get_segment(&self) -> &::std::option::Option<crate::types::Segment> {
        self.inner.get_segment()
    }
    /// <p>A unique, case-sensitive token that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.startover_window_seconds(input);
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn set_startover_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_startover_window_seconds(input);
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn get_startover_window_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_startover_window_seconds()
    }
    /// Appends an item to `HlsManifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn hls_manifests(mut self, input: crate::types::CreateHlsManifestConfiguration) -> Self {
        self.inner = self.inner.hls_manifests(input);
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>>) -> Self {
        self.inner = self.inner.set_hls_manifests(input);
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>> {
        self.inner.get_hls_manifests()
    }
    /// Appends an item to `LowLatencyHlsManifests`.
    ///
    /// To override the contents of this collection use [`set_low_latency_hls_manifests`](Self::set_low_latency_hls_manifests).
    ///
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn low_latency_hls_manifests(mut self, input: crate::types::CreateLowLatencyHlsManifestConfiguration) -> Self {
        self.inner = self.inner.low_latency_hls_manifests(input);
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn set_low_latency_hls_manifests(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_low_latency_hls_manifests(input);
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn get_low_latency_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>> {
        self.inner.get_low_latency_hls_manifests()
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A comma-separated list of tag key:value pairs that you define. For example:</p>
    /// <p> <code>"Key1": "Value1",</code> </p>
    /// <p> <code>"Key2": "Value2"</code> </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A comma-separated list of tag key:value pairs that you define. For example:</p>
    /// <p> <code>"Key1": "Value1",</code> </p>
    /// <p> <code>"Key2": "Value2"</code> </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A comma-separated list of tag key:value pairs that you define. For example:</p>
    /// <p> <code>"Key1": "Value1",</code> </p>
    /// <p> <code>"Key2": "Value2"</code> </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
