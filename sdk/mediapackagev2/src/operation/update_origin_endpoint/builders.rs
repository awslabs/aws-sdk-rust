// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_origin_endpoint::_update_origin_endpoint_output::UpdateOriginEndpointOutputBuilder;

pub use crate::operation::update_origin_endpoint::_update_origin_endpoint_input::UpdateOriginEndpointInputBuilder;

impl crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_origin_endpoint::UpdateOriginEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_origin_endpoint();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateOriginEndpoint`.
///
/// <p>Update the specified origin endpoint. Edit the packaging preferences on an endpoint to optimize the viewing experience. You can't edit the name of the endpoint.</p>
/// <p>Any edits you make that impact the video output may not be reflected for a few minutes.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateOriginEndpointFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_origin_endpoint::UpdateOriginEndpointOutput,
        crate::operation::update_origin_endpoint::UpdateOriginEndpointError,
    > for UpdateOriginEndpointFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_origin_endpoint::UpdateOriginEndpointOutput,
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateOriginEndpointFluentBuilder {
    /// Creates a new `UpdateOriginEndpoint`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateOriginEndpoint as a reference.
    pub fn as_input(&self) -> &crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_origin_endpoint::UpdateOriginEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_origin_endpoint::UpdateOriginEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_origin_endpoint::UpdateOriginEndpoint::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_origin_endpoint::UpdateOriginEndpoint::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_origin_endpoint::UpdateOriginEndpointOutput,
        crate::operation::update_origin_endpoint::UpdateOriginEndpointError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_group_name(input.into());
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_group_name(input);
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_group_name()
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_name(input.into());
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_name(input);
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_name()
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.origin_endpoint_name(input.into());
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_origin_endpoint_name(input);
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_origin_endpoint_name()
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn container_type(mut self, input: crate::types::ContainerType) -> Self {
        self.inner = self.inner.container_type(input);
        self
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn set_container_type(mut self, input: ::std::option::Option<crate::types::ContainerType>) -> Self {
        self.inner = self.inner.set_container_type(input);
        self
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn get_container_type(&self) -> &::std::option::Option<crate::types::ContainerType> {
        self.inner.get_container_type()
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn segment(mut self, input: crate::types::Segment) -> Self {
        self.inner = self.inner.segment(input);
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn set_segment(mut self, input: ::std::option::Option<crate::types::Segment>) -> Self {
        self.inner = self.inner.set_segment(input);
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn get_segment(&self) -> &::std::option::Option<crate::types::Segment> {
        self.inner.get_segment()
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.startover_window_seconds(input);
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn set_startover_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_startover_window_seconds(input);
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn get_startover_window_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_startover_window_seconds()
    }
    ///
    /// Appends an item to `HlsManifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn hls_manifests(mut self, input: crate::types::CreateHlsManifestConfiguration) -> Self {
        self.inner = self.inner.hls_manifests(input);
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>>) -> Self {
        self.inner = self.inner.set_hls_manifests(input);
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>> {
        self.inner.get_hls_manifests()
    }
    ///
    /// Appends an item to `LowLatencyHlsManifests`.
    ///
    /// To override the contents of this collection use [`set_low_latency_hls_manifests`](Self::set_low_latency_hls_manifests).
    ///
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn low_latency_hls_manifests(mut self, input: crate::types::CreateLowLatencyHlsManifestConfiguration) -> Self {
        self.inner = self.inner.low_latency_hls_manifests(input);
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn set_low_latency_hls_manifests(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_low_latency_hls_manifests(input);
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn get_low_latency_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>> {
        self.inner.get_low_latency_hls_manifests()
    }
    ///
    /// Appends an item to `DashManifests`.
    ///
    /// To override the contents of this collection use [`set_dash_manifests`](Self::set_dash_manifests).
    ///
    /// <p>A DASH manifest configuration.</p>
    pub fn dash_manifests(mut self, input: crate::types::CreateDashManifestConfiguration) -> Self {
        self.inner = self.inner.dash_manifests(input);
        self
    }
    /// <p>A DASH manifest configuration.</p>
    pub fn set_dash_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>>) -> Self {
        self.inner = self.inner.set_dash_manifests(input);
        self
    }
    /// <p>A DASH manifest configuration.</p>
    pub fn get_dash_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>> {
        self.inner.get_dash_manifests()
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.e_tag(input.into());
        self
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_e_tag(input);
        self
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_e_tag()
    }
}
