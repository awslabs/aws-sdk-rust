// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOriginEndpointInput {
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub channel_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub origin_endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub container_type: ::std::option::Option<crate::types::ContainerType>,
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub segment: ::std::option::Option<crate::types::Segment>,
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub startover_window_seconds: ::std::option::Option<i32>,
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>>,
    /// <p>A low-latency HLS manifest configuration.</p>
    pub low_latency_hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>>,
    /// <p>A DASH manifest configuration.</p>
    pub dash_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>>,
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
}
impl UpdateOriginEndpointInput {
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn channel_group_name(&self) -> ::std::option::Option<&str> {
        self.channel_group_name.as_deref()
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn origin_endpoint_name(&self) -> ::std::option::Option<&str> {
        self.origin_endpoint_name.as_deref()
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn container_type(&self) -> ::std::option::Option<&crate::types::ContainerType> {
        self.container_type.as_ref()
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn segment(&self) -> ::std::option::Option<&crate::types::Segment> {
        self.segment.as_ref()
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn startover_window_seconds(&self) -> ::std::option::Option<i32> {
        self.startover_window_seconds
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hls_manifests.is_none()`.
    pub fn hls_manifests(&self) -> &[crate::types::CreateHlsManifestConfiguration] {
        self.hls_manifests.as_deref().unwrap_or_default()
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.low_latency_hls_manifests.is_none()`.
    pub fn low_latency_hls_manifests(&self) -> &[crate::types::CreateLowLatencyHlsManifestConfiguration] {
        self.low_latency_hls_manifests.as_deref().unwrap_or_default()
    }
    /// <p>A DASH manifest configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dash_manifests.is_none()`.
    pub fn dash_manifests(&self) -> &[crate::types::CreateDashManifestConfiguration] {
        self.dash_manifests.as_deref().unwrap_or_default()
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl UpdateOriginEndpointInput {
    /// Creates a new builder-style object to manufacture [`UpdateOriginEndpointInput`](crate::operation::update_origin_endpoint::UpdateOriginEndpointInput).
    pub fn builder() -> crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointInputBuilder {
        crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointInputBuilder::default()
    }
}

/// A builder for [`UpdateOriginEndpointInput`](crate::operation::update_origin_endpoint::UpdateOriginEndpointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateOriginEndpointInputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) container_type: ::std::option::Option<crate::types::ContainerType>,
    pub(crate) segment: ::std::option::Option<crate::types::Segment>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) startover_window_seconds: ::std::option::Option<i32>,
    pub(crate) hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>>,
    pub(crate) low_latency_hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>>,
    pub(crate) dash_manifests: ::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
}
impl UpdateOriginEndpointInputBuilder {
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    /// This field is required.
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    /// This field is required.
    pub fn container_type(mut self, input: crate::types::ContainerType) -> Self {
        self.container_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn set_container_type(mut self, input: ::std::option::Option<crate::types::ContainerType>) -> Self {
        self.container_type = input;
        self
    }
    /// <p>The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file.</p>
    pub fn get_container_type(&self) -> &::std::option::Option<crate::types::ContainerType> {
        &self.container_type
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn segment(mut self, input: crate::types::Segment) -> Self {
        self.segment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn set_segment(mut self, input: ::std::option::Option<crate::types::Segment>) -> Self {
        self.segment = input;
        self
    }
    /// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
    pub fn get_segment(&self) -> &::std::option::Option<crate::types::Segment> {
        &self.segment
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Any descriptive information that you want to add to the origin endpoint for future identification purposes.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.startover_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn set_startover_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.startover_window_seconds = input;
        self
    }
    /// <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
    pub fn get_startover_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.startover_window_seconds
    }
    /// Appends an item to `hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn hls_manifests(mut self, input: crate::types::CreateHlsManifestConfiguration) -> Self {
        let mut v = self.hls_manifests.unwrap_or_default();
        v.push(input);
        self.hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>>) -> Self {
        self.hls_manifests = input;
        self
    }
    /// <p>An HTTP live streaming (HLS) manifest configuration.</p>
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateHlsManifestConfiguration>> {
        &self.hls_manifests
    }
    /// Appends an item to `low_latency_hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_low_latency_hls_manifests`](Self::set_low_latency_hls_manifests).
    ///
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn low_latency_hls_manifests(mut self, input: crate::types::CreateLowLatencyHlsManifestConfiguration) -> Self {
        let mut v = self.low_latency_hls_manifests.unwrap_or_default();
        v.push(input);
        self.low_latency_hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn set_low_latency_hls_manifests(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>>,
    ) -> Self {
        self.low_latency_hls_manifests = input;
        self
    }
    /// <p>A low-latency HLS manifest configuration.</p>
    pub fn get_low_latency_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateLowLatencyHlsManifestConfiguration>> {
        &self.low_latency_hls_manifests
    }
    /// Appends an item to `dash_manifests`.
    ///
    /// To override the contents of this collection use [`set_dash_manifests`](Self::set_dash_manifests).
    ///
    /// <p>A DASH manifest configuration.</p>
    pub fn dash_manifests(mut self, input: crate::types::CreateDashManifestConfiguration) -> Self {
        let mut v = self.dash_manifests.unwrap_or_default();
        v.push(input);
        self.dash_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A DASH manifest configuration.</p>
    pub fn set_dash_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>>) -> Self {
        self.dash_manifests = input;
        self
    }
    /// <p>A DASH manifest configuration.</p>
    pub fn get_dash_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateDashManifestConfiguration>> {
        &self.dash_manifests
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The expected current Entity Tag (ETag) for the resource. If the specified ETag does not match the resource's current entity tag, the update request will be rejected.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// Consumes the builder and constructs a [`UpdateOriginEndpointInput`](crate::operation::update_origin_endpoint::UpdateOriginEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_origin_endpoint::UpdateOriginEndpointInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_origin_endpoint::UpdateOriginEndpointInput {
            channel_group_name: self.channel_group_name,
            channel_name: self.channel_name,
            origin_endpoint_name: self.origin_endpoint_name,
            container_type: self.container_type,
            segment: self.segment,
            description: self.description,
            startover_window_seconds: self.startover_window_seconds,
            hls_manifests: self.hls_manifests,
            low_latency_hls_manifests: self.low_latency_hls_manifests,
            dash_manifests: self.dash_manifests,
            e_tag: self.e_tag,
        })
    }
}
