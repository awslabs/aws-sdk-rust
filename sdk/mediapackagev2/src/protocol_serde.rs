// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_channel;

pub(crate) mod shape_create_channel_group;

pub(crate) mod shape_create_origin_endpoint;

pub(crate) mod shape_delete_channel;

pub(crate) mod shape_delete_channel_group;

pub(crate) mod shape_delete_channel_policy;

pub(crate) mod shape_delete_origin_endpoint;

pub(crate) mod shape_delete_origin_endpoint_policy;

pub(crate) mod shape_get_channel;

pub(crate) mod shape_get_channel_group;

pub(crate) mod shape_get_channel_policy;

pub(crate) mod shape_get_origin_endpoint;

pub(crate) mod shape_get_origin_endpoint_policy;

pub(crate) mod shape_list_channel_groups;

pub(crate) mod shape_list_channels;

pub(crate) mod shape_list_origin_endpoints;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_put_channel_policy;

pub(crate) mod shape_put_origin_endpoint_policy;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_channel;

pub(crate) mod shape_update_channel_group;

pub(crate) mod shape_update_origin_endpoint;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_channel_group_input;

pub(crate) mod shape_create_channel_input;

pub(crate) mod shape_create_origin_endpoint_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_put_channel_policy_input;

pub(crate) mod shape_put_origin_endpoint_policy_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_channel_group_input;

pub(crate) mod shape_update_channel_input;

pub(crate) mod shape_update_origin_endpoint_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_channel_groups_list;

pub(crate) mod shape_channel_list;

pub(crate) mod shape_create_dash_manifest_configuration;

pub(crate) mod shape_create_hls_manifest_configuration;

pub(crate) mod shape_create_low_latency_hls_manifest_configuration;

pub(crate) mod shape_get_dash_manifests;

pub(crate) mod shape_get_hls_manifests;

pub(crate) mod shape_get_low_latency_hls_manifests;

pub(crate) mod shape_ingest_endpoint_list;

pub(crate) mod shape_origin_endpoints_list;

pub(crate) mod shape_segment;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_channel_group_list_configuration;

pub(crate) mod shape_channel_list_configuration;

pub(crate) mod shape_dash_utc_timing;

pub(crate) mod shape_encryption;

pub(crate) mod shape_filter_configuration;

pub(crate) mod shape_get_dash_manifest_configuration;

pub(crate) mod shape_get_hls_manifest_configuration;

pub(crate) mod shape_get_low_latency_hls_manifest_configuration;

pub(crate) mod shape_ingest_endpoint;

pub(crate) mod shape_origin_endpoint_list_configuration;

pub(crate) mod shape_scte;

pub(crate) mod shape_scte_dash;

pub(crate) mod shape_scte_hls;

pub(crate) mod shape_dash_period_triggers;

pub(crate) mod shape_encryption_method;

pub(crate) mod shape_list_dash_manifests;

pub(crate) mod shape_list_hls_manifests;

pub(crate) mod shape_list_low_latency_hls_manifests;

pub(crate) mod shape_scte_filter_list;

pub(crate) mod shape_speke_key_provider;

pub(crate) mod shape_drm_systems;

pub(crate) mod shape_encryption_contract_configuration;

pub(crate) mod shape_list_dash_manifest_configuration;

pub(crate) mod shape_list_hls_manifest_configuration;

pub(crate) mod shape_list_low_latency_hls_manifest_configuration;
