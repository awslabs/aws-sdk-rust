// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetBrowserOutput {
    /// <p>The unique identifier of the browser.</p>
    pub browser_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the browser.</p>
    pub browser_arn: ::std::string::String,
    /// <p>The name of the browser.</p>
    pub name: ::std::string::String,
    /// <p>The description of the browser.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role ARN that provides permissions for the browser.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The network configuration for a browser. This structure defines how the browser connects to the network.</p>
    pub network_configuration: ::std::option::Option<crate::types::BrowserNetworkConfiguration>,
    /// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
    pub recording: ::std::option::Option<crate::types::RecordingConfig>,
    /// <p>The browser signing configuration that shows whether cryptographic agent identification is enabled for web bot authentication.</p>
    pub browser_signing: ::std::option::Option<crate::types::BrowserSigningConfigOutput>,
    /// <p>The current status of the browser.</p>
    pub status: crate::types::BrowserStatus,
    /// <p>The reason for failure if the browser is in a failed state.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the browser was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the browser was last updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetBrowserOutput {
    /// <p>The unique identifier of the browser.</p>
    pub fn browser_id(&self) -> &str {
        use std::ops::Deref;
        self.browser_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the browser.</p>
    pub fn browser_arn(&self) -> &str {
        use std::ops::Deref;
        self.browser_arn.deref()
    }
    /// <p>The name of the browser.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the browser.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IAM role ARN that provides permissions for the browser.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The network configuration for a browser. This structure defines how the browser connects to the network.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::BrowserNetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
    pub fn recording(&self) -> ::std::option::Option<&crate::types::RecordingConfig> {
        self.recording.as_ref()
    }
    /// <p>The browser signing configuration that shows whether cryptographic agent identification is enabled for web bot authentication.</p>
    pub fn browser_signing(&self) -> ::std::option::Option<&crate::types::BrowserSigningConfigOutput> {
        self.browser_signing.as_ref()
    }
    /// <p>The current status of the browser.</p>
    pub fn status(&self) -> &crate::types::BrowserStatus {
        &self.status
    }
    /// <p>The reason for failure if the browser is in a failed state.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the browser was last updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
}
impl ::std::fmt::Debug for GetBrowserOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetBrowserOutput");
        formatter.field("browser_id", &self.browser_id);
        formatter.field("browser_arn", &self.browser_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("recording", &self.recording);
        formatter.field("browser_signing", &self.browser_signing);
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetBrowserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBrowserOutput {
    /// Creates a new builder-style object to manufacture [`GetBrowserOutput`](crate::operation::get_browser::GetBrowserOutput).
    pub fn builder() -> crate::operation::get_browser::builders::GetBrowserOutputBuilder {
        crate::operation::get_browser::builders::GetBrowserOutputBuilder::default()
    }
}

/// A builder for [`GetBrowserOutput`](crate::operation::get_browser::GetBrowserOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetBrowserOutputBuilder {
    pub(crate) browser_id: ::std::option::Option<::std::string::String>,
    pub(crate) browser_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::BrowserNetworkConfiguration>,
    pub(crate) recording: ::std::option::Option<crate::types::RecordingConfig>,
    pub(crate) browser_signing: ::std::option::Option<crate::types::BrowserSigningConfigOutput>,
    pub(crate) status: ::std::option::Option<crate::types::BrowserStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetBrowserOutputBuilder {
    /// <p>The unique identifier of the browser.</p>
    /// This field is required.
    pub fn browser_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the browser.</p>
    pub fn set_browser_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_id = input;
        self
    }
    /// <p>The unique identifier of the browser.</p>
    pub fn get_browser_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_id
    }
    /// <p>The Amazon Resource Name (ARN) of the browser.</p>
    /// This field is required.
    pub fn browser_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the browser.</p>
    pub fn set_browser_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the browser.</p>
    pub fn get_browser_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_arn
    }
    /// <p>The name of the browser.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the browser.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the browser.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the browser.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the browser.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the browser.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The IAM role ARN that provides permissions for the browser.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that provides permissions for the browser.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The IAM role ARN that provides permissions for the browser.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The network configuration for a browser. This structure defines how the browser connects to the network.</p>
    /// This field is required.
    pub fn network_configuration(mut self, input: crate::types::BrowserNetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for a browser. This structure defines how the browser connects to the network.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::BrowserNetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for a browser. This structure defines how the browser connects to the network.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::BrowserNetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
    pub fn recording(mut self, input: crate::types::RecordingConfig) -> Self {
        self.recording = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
    pub fn set_recording(mut self, input: ::std::option::Option<crate::types::RecordingConfig>) -> Self {
        self.recording = input;
        self
    }
    /// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
    pub fn get_recording(&self) -> &::std::option::Option<crate::types::RecordingConfig> {
        &self.recording
    }
    /// <p>The browser signing configuration that shows whether cryptographic agent identification is enabled for web bot authentication.</p>
    pub fn browser_signing(mut self, input: crate::types::BrowserSigningConfigOutput) -> Self {
        self.browser_signing = ::std::option::Option::Some(input);
        self
    }
    /// <p>The browser signing configuration that shows whether cryptographic agent identification is enabled for web bot authentication.</p>
    pub fn set_browser_signing(mut self, input: ::std::option::Option<crate::types::BrowserSigningConfigOutput>) -> Self {
        self.browser_signing = input;
        self
    }
    /// <p>The browser signing configuration that shows whether cryptographic agent identification is enabled for web bot authentication.</p>
    pub fn get_browser_signing(&self) -> &::std::option::Option<crate::types::BrowserSigningConfigOutput> {
        &self.browser_signing
    }
    /// <p>The current status of the browser.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::BrowserStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the browser.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BrowserStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the browser.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BrowserStatus> {
        &self.status
    }
    /// <p>The reason for failure if the browser is in a failed state.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for failure if the browser is in a failed state.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason for failure if the browser is in a failed state.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The timestamp when the browser was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the browser was last updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the browser was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp when the browser was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBrowserOutput`](crate::operation::get_browser::GetBrowserOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_id`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::browser_id)
    /// - [`browser_arn`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::browser_arn)
    /// - [`name`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::name)
    /// - [`status`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::status)
    /// - [`created_at`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::created_at)
    /// - [`last_updated_at`](crate::operation::get_browser::builders::GetBrowserOutputBuilder::last_updated_at)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_browser::GetBrowserOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_browser::GetBrowserOutput {
            browser_id: self.browser_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_id",
                    "browser_id was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            browser_arn: self.browser_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_arn",
                    "browser_arn was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            description: self.description,
            execution_role_arn: self.execution_role_arn,
            network_configuration: self.network_configuration,
            recording: self.recording,
            browser_signing: self.browser_signing,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            failure_reason: self.failure_reason,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building GetBrowserOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetBrowserOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetBrowserOutputBuilder");
        formatter.field("browser_id", &self.browser_id);
        formatter.field("browser_arn", &self.browser_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("recording", &self.recording);
        formatter.field("browser_signing", &self.browser_signing);
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
