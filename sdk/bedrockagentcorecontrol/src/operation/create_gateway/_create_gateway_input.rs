// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGatewayInput {
    /// <p>The name of the gateway. The name must be unique within your account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the gateway.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If you don't specify this field, a value is randomly generated for you. If this token matches a previous request, the service ignores the request, but doesn't return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the gateway to access Amazon Web Services services.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The protocol type for the gateway.</p>
    pub protocol_type: ::std::option::Option<crate::types::GatewayProtocolType>,
    /// <p>The configuration settings for the protocol specified in the <code>protocolType</code> parameter.</p>
    pub protocol_configuration: ::std::option::Option<crate::types::GatewayProtocolConfiguration>,
    /// <p>The type of authorizer to use for the gateway.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_JWT</code> - Authorize with a bearer token.</p></li>
    /// <li>
    /// <p><code>AWS_IAM</code> - Authorize with your Amazon Web Services IAM credentials.</p></li>
    /// </ul>
    pub authorizer_type: ::std::option::Option<crate::types::AuthorizerType>,
    /// <p>The authorizer configuration for the gateway. Required if <code>authorizerType</code> is <code>CUSTOM_JWT</code>.</p>
    pub authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt data associated with the gateway.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub exception_level: ::std::option::Option<crate::types::ExceptionLevel>,
    /// <p>A map of key-value pairs to associate with the gateway as metadata tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateGatewayInput {
    /// <p>The name of the gateway. The name must be unique within your account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the gateway.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If you don't specify this field, a value is randomly generated for you. If this token matches a previous request, the service ignores the request, but doesn't return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the gateway to access Amazon Web Services services.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The protocol type for the gateway.</p>
    pub fn protocol_type(&self) -> ::std::option::Option<&crate::types::GatewayProtocolType> {
        self.protocol_type.as_ref()
    }
    /// <p>The configuration settings for the protocol specified in the <code>protocolType</code> parameter.</p>
    pub fn protocol_configuration(&self) -> ::std::option::Option<&crate::types::GatewayProtocolConfiguration> {
        self.protocol_configuration.as_ref()
    }
    /// <p>The type of authorizer to use for the gateway.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_JWT</code> - Authorize with a bearer token.</p></li>
    /// <li>
    /// <p><code>AWS_IAM</code> - Authorize with your Amazon Web Services IAM credentials.</p></li>
    /// </ul>
    pub fn authorizer_type(&self) -> ::std::option::Option<&crate::types::AuthorizerType> {
        self.authorizer_type.as_ref()
    }
    /// <p>The authorizer configuration for the gateway. Required if <code>authorizerType</code> is <code>CUSTOM_JWT</code>.</p>
    pub fn authorizer_configuration(&self) -> ::std::option::Option<&crate::types::AuthorizerConfiguration> {
        self.authorizer_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt data associated with the gateway.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn exception_level(&self) -> ::std::option::Option<&crate::types::ExceptionLevel> {
        self.exception_level.as_ref()
    }
    /// <p>A map of key-value pairs to associate with the gateway as metadata tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateGatewayInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGatewayInput");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("protocol_type", &self.protocol_type);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("authorizer_type", &self.authorizer_type);
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("exception_level", &self.exception_level);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateGatewayInput {
    /// Creates a new builder-style object to manufacture [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
    pub fn builder() -> crate::operation::create_gateway::builders::CreateGatewayInputBuilder {
        crate::operation::create_gateway::builders::CreateGatewayInputBuilder::default()
    }
}

/// A builder for [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateGatewayInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) protocol_type: ::std::option::Option<crate::types::GatewayProtocolType>,
    pub(crate) protocol_configuration: ::std::option::Option<crate::types::GatewayProtocolConfiguration>,
    pub(crate) authorizer_type: ::std::option::Option<crate::types::AuthorizerType>,
    pub(crate) authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) exception_level: ::std::option::Option<crate::types::ExceptionLevel>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateGatewayInputBuilder {
    /// <p>The name of the gateway. The name must be unique within your account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the gateway. The name must be unique within your account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the gateway. The name must be unique within your account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the gateway.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If you don't specify this field, a value is randomly generated for you. If this token matches a previous request, the service ignores the request, but doesn't return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If you don't specify this field, a value is randomly generated for you. If this token matches a previous request, the service ignores the request, but doesn't return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If you don't specify this field, a value is randomly generated for you. If this token matches a previous request, the service ignores the request, but doesn't return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the gateway to access Amazon Web Services services.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the gateway to access Amazon Web Services services.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the gateway to access Amazon Web Services services.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The protocol type for the gateway.</p>
    /// This field is required.
    pub fn protocol_type(mut self, input: crate::types::GatewayProtocolType) -> Self {
        self.protocol_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol type for the gateway.</p>
    pub fn set_protocol_type(mut self, input: ::std::option::Option<crate::types::GatewayProtocolType>) -> Self {
        self.protocol_type = input;
        self
    }
    /// <p>The protocol type for the gateway.</p>
    pub fn get_protocol_type(&self) -> &::std::option::Option<crate::types::GatewayProtocolType> {
        &self.protocol_type
    }
    /// <p>The configuration settings for the protocol specified in the <code>protocolType</code> parameter.</p>
    pub fn protocol_configuration(mut self, input: crate::types::GatewayProtocolConfiguration) -> Self {
        self.protocol_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for the protocol specified in the <code>protocolType</code> parameter.</p>
    pub fn set_protocol_configuration(mut self, input: ::std::option::Option<crate::types::GatewayProtocolConfiguration>) -> Self {
        self.protocol_configuration = input;
        self
    }
    /// <p>The configuration settings for the protocol specified in the <code>protocolType</code> parameter.</p>
    pub fn get_protocol_configuration(&self) -> &::std::option::Option<crate::types::GatewayProtocolConfiguration> {
        &self.protocol_configuration
    }
    /// <p>The type of authorizer to use for the gateway.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_JWT</code> - Authorize with a bearer token.</p></li>
    /// <li>
    /// <p><code>AWS_IAM</code> - Authorize with your Amazon Web Services IAM credentials.</p></li>
    /// </ul>
    /// This field is required.
    pub fn authorizer_type(mut self, input: crate::types::AuthorizerType) -> Self {
        self.authorizer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authorizer to use for the gateway.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_JWT</code> - Authorize with a bearer token.</p></li>
    /// <li>
    /// <p><code>AWS_IAM</code> - Authorize with your Amazon Web Services IAM credentials.</p></li>
    /// </ul>
    pub fn set_authorizer_type(mut self, input: ::std::option::Option<crate::types::AuthorizerType>) -> Self {
        self.authorizer_type = input;
        self
    }
    /// <p>The type of authorizer to use for the gateway.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_JWT</code> - Authorize with a bearer token.</p></li>
    /// <li>
    /// <p><code>AWS_IAM</code> - Authorize with your Amazon Web Services IAM credentials.</p></li>
    /// </ul>
    pub fn get_authorizer_type(&self) -> &::std::option::Option<crate::types::AuthorizerType> {
        &self.authorizer_type
    }
    /// <p>The authorizer configuration for the gateway. Required if <code>authorizerType</code> is <code>CUSTOM_JWT</code>.</p>
    pub fn authorizer_configuration(mut self, input: crate::types::AuthorizerConfiguration) -> Self {
        self.authorizer_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorizer configuration for the gateway. Required if <code>authorizerType</code> is <code>CUSTOM_JWT</code>.</p>
    pub fn set_authorizer_configuration(mut self, input: ::std::option::Option<crate::types::AuthorizerConfiguration>) -> Self {
        self.authorizer_configuration = input;
        self
    }
    /// <p>The authorizer configuration for the gateway. Required if <code>authorizerType</code> is <code>CUSTOM_JWT</code>.</p>
    pub fn get_authorizer_configuration(&self) -> &::std::option::Option<crate::types::AuthorizerConfiguration> {
        &self.authorizer_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt data associated with the gateway.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt data associated with the gateway.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt data associated with the gateway.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn exception_level(mut self, input: crate::types::ExceptionLevel) -> Self {
        self.exception_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn set_exception_level(mut self, input: ::std::option::Option<crate::types::ExceptionLevel>) -> Self {
        self.exception_level = input;
        self
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn get_exception_level(&self) -> &::std::option::Option<crate::types::ExceptionLevel> {
        &self.exception_level
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of key-value pairs to associate with the gateway as metadata tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs to associate with the gateway as metadata tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of key-value pairs to associate with the gateway as metadata tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_gateway::CreateGatewayInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_gateway::CreateGatewayInput {
            name: self.name,
            description: self.description,
            client_token: self.client_token,
            role_arn: self.role_arn,
            protocol_type: self.protocol_type,
            protocol_configuration: self.protocol_configuration,
            authorizer_type: self.authorizer_type,
            authorizer_configuration: self.authorizer_configuration,
            kms_key_arn: self.kms_key_arn,
            exception_level: self.exception_level,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateGatewayInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGatewayInputBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("protocol_type", &self.protocol_type);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("authorizer_type", &self.authorizer_type);
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("exception_level", &self.exception_level);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
