// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetGatewayTargetOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub gateway_arn: ::std::string::String,
    /// <p>The unique identifier of the gateway target.</p>
    pub target_id: ::std::string::String,
    /// <p>The timestamp when the gateway target was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the gateway target was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The current status of the gateway target.</p>
    pub status: crate::types::TargetStatus,
    /// <p>The reasons for the current status of the gateway target.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the gateway target.</p>
    pub name: ::std::string::String,
    /// <p>The description of the gateway target.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
    pub target_configuration: ::std::option::Option<crate::types::TargetConfiguration>,
    /// <p>The credential provider configurations for the gateway target.</p>
    pub credential_provider_configurations: ::std::vec::Vec<crate::types::CredentialProviderConfiguration>,
    /// <p>The last synchronization of the target.</p>
    pub last_synchronized_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetGatewayTargetOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn gateway_arn(&self) -> &str {
        use std::ops::Deref;
        self.gateway_arn.deref()
    }
    /// <p>The unique identifier of the gateway target.</p>
    pub fn target_id(&self) -> &str {
        use std::ops::Deref;
        self.target_id.deref()
    }
    /// <p>The timestamp when the gateway target was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the gateway target was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The current status of the gateway target.</p>
    pub fn status(&self) -> &crate::types::TargetStatus {
        &self.status
    }
    /// <p>The reasons for the current status of the gateway target.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[::std::string::String] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
    /// <p>The name of the gateway target.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the gateway target.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
    pub fn target_configuration(&self) -> ::std::option::Option<&crate::types::TargetConfiguration> {
        self.target_configuration.as_ref()
    }
    /// <p>The credential provider configurations for the gateway target.</p>
    pub fn credential_provider_configurations(&self) -> &[crate::types::CredentialProviderConfiguration] {
        use std::ops::Deref;
        self.credential_provider_configurations.deref()
    }
    /// <p>The last synchronization of the target.</p>
    pub fn last_synchronized_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_synchronized_at.as_ref()
    }
}
impl ::std::fmt::Debug for GetGatewayTargetOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGatewayTargetOutput");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("target_id", &self.target_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("target_configuration", &self.target_configuration);
        formatter.field("credential_provider_configurations", &self.credential_provider_configurations);
        formatter.field("last_synchronized_at", &self.last_synchronized_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetGatewayTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGatewayTargetOutput {
    /// Creates a new builder-style object to manufacture [`GetGatewayTargetOutput`](crate::operation::get_gateway_target::GetGatewayTargetOutput).
    pub fn builder() -> crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder {
        crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::default()
    }
}

/// A builder for [`GetGatewayTargetOutput`](crate::operation::get_gateway_target::GetGatewayTargetOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetGatewayTargetOutputBuilder {
    pub(crate) gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::TargetStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) target_configuration: ::std::option::Option<crate::types::TargetConfiguration>,
    pub(crate) credential_provider_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CredentialProviderConfiguration>>,
    pub(crate) last_synchronized_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetGatewayTargetOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    /// This field is required.
    pub fn gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn set_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn get_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_arn
    }
    /// <p>The unique identifier of the gateway target.</p>
    /// This field is required.
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway target.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The unique identifier of the gateway target.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>The timestamp when the gateway target was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the gateway target was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the gateway target was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the gateway target was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the gateway target was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the gateway target was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The current status of the gateway target.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TargetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the gateway target.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TargetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the gateway target.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TargetStatus> {
        &self.status
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>The reasons for the current status of the gateway target.</p>
    pub fn status_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input.into());
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reasons for the current status of the gateway target.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>The reasons for the current status of the gateway target.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.status_reasons
    }
    /// <p>The name of the gateway target.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the gateway target.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the gateway target.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the gateway target.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the gateway target.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the gateway target.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
    /// This field is required.
    pub fn target_configuration(mut self, input: crate::types::TargetConfiguration) -> Self {
        self.target_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
    pub fn set_target_configuration(mut self, input: ::std::option::Option<crate::types::TargetConfiguration>) -> Self {
        self.target_configuration = input;
        self
    }
    /// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
    pub fn get_target_configuration(&self) -> &::std::option::Option<crate::types::TargetConfiguration> {
        &self.target_configuration
    }
    /// Appends an item to `credential_provider_configurations`.
    ///
    /// To override the contents of this collection use [`set_credential_provider_configurations`](Self::set_credential_provider_configurations).
    ///
    /// <p>The credential provider configurations for the gateway target.</p>
    pub fn credential_provider_configurations(mut self, input: crate::types::CredentialProviderConfiguration) -> Self {
        let mut v = self.credential_provider_configurations.unwrap_or_default();
        v.push(input);
        self.credential_provider_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The credential provider configurations for the gateway target.</p>
    pub fn set_credential_provider_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CredentialProviderConfiguration>>,
    ) -> Self {
        self.credential_provider_configurations = input;
        self
    }
    /// <p>The credential provider configurations for the gateway target.</p>
    pub fn get_credential_provider_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CredentialProviderConfiguration>> {
        &self.credential_provider_configurations
    }
    /// <p>The last synchronization of the target.</p>
    pub fn last_synchronized_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_synchronized_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last synchronization of the target.</p>
    pub fn set_last_synchronized_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_synchronized_at = input;
        self
    }
    /// <p>The last synchronization of the target.</p>
    pub fn get_last_synchronized_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_synchronized_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGatewayTargetOutput`](crate::operation::get_gateway_target::GetGatewayTargetOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`gateway_arn`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::gateway_arn)
    /// - [`target_id`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::target_id)
    /// - [`created_at`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::updated_at)
    /// - [`status`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::status)
    /// - [`name`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::name)
    /// - [`credential_provider_configurations`](crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder::credential_provider_configurations)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_gateway_target::GetGatewayTargetOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_gateway_target::GetGatewayTargetOutput {
            gateway_arn: self.gateway_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gateway_arn",
                    "gateway_arn was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            target_id: self.target_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_id",
                    "target_id was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            status_reasons: self.status_reasons,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            description: self.description,
            target_configuration: self.target_configuration,
            credential_provider_configurations: self.credential_provider_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credential_provider_configurations",
                    "credential_provider_configurations was not specified but it is required when building GetGatewayTargetOutput",
                )
            })?,
            last_synchronized_at: self.last_synchronized_at,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetGatewayTargetOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGatewayTargetOutputBuilder");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("target_id", &self.target_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("target_configuration", &self.target_configuration);
        formatter.field("credential_provider_configurations", &self.credential_provider_configurations);
        formatter.field("last_synchronized_at", &self.last_synchronized_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
