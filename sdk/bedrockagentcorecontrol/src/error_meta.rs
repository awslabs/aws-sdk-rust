// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>This exception is thrown when a request is denied per access permissions</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Exception thrown when a resource is modified concurrently by multiple requests.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>This exception is thrown when there is a conflict performing an operation</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Exception thrown when decryption of a secret fails.</p>
    DecryptionFailure(crate::types::error::DecryptionFailure),
    /// <p>Exception thrown when encryption of a secret fails.</p>
    EncryptionFailure(crate::types::error::EncryptionFailure),
    /// <p>This exception is thrown if there was an unexpected error during processing of request</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Exception thrown when a resource limit is exceeded.</p>
    ResourceLimitExceededException(crate::types::error::ResourceLimitExceededException),
    /// <p>This exception is thrown when a resource referenced by the operation does not exist</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>An internal error occurred.</p>
    ServiceException(crate::types::error::ServiceException),
    /// <p>This exception is thrown when a request is made beyond the service quota</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>API rate limit has been exceeded.</p>
    ThrottledException(crate::types::error::ThrottledException),
    /// <p>This exception is thrown when the number of requests exceeds the limit</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>This exception is thrown when the JWT bearer token is invalid or not found for OAuth bearer token based access</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The input fails to satisfy the constraints specified by the service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DecryptionFailure(inner) => inner.fmt(f),
            Error::EncryptionFailure(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottledException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConcurrentModificationException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::DecryptionFailure(inner) => inner.meta(),
            Self::EncryptionFailure(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceLimitExceededException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottledException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_runtime::CreateAgentRuntimeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_runtime::CreateAgentRuntimeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_agent_runtime::CreateAgentRuntimeError> for Error {
    fn from(err: crate::operation::create_agent_runtime::CreateAgentRuntimeError) -> Self {
        match err {
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_agent_runtime::CreateAgentRuntimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError> for Error {
    fn from(err: crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError) -> Self {
        match err {
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_agent_runtime_endpoint::CreateAgentRuntimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError> for Error {
    fn from(err: crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError) -> Self {
        match err {
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::EncryptionFailure(inner) => {
                Error::EncryptionFailure(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_api_key_credential_provider::CreateApiKeyCredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_browser::CreateBrowserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_browser::CreateBrowserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_browser::CreateBrowserError> for Error {
    fn from(err: crate::operation::create_browser::CreateBrowserError) -> Self {
        match err {
            crate::operation::create_browser::CreateBrowserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_browser::CreateBrowserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_browser::CreateBrowserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_browser::CreateBrowserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_browser::CreateBrowserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_browser::CreateBrowserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_browser::CreateBrowserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_code_interpreter::CreateCodeInterpreterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_code_interpreter::CreateCodeInterpreterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_code_interpreter::CreateCodeInterpreterError> for Error {
    fn from(err: crate::operation::create_code_interpreter::CreateCodeInterpreterError) -> Self {
        match err {
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_code_interpreter::CreateCodeInterpreterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway::CreateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway::CreateGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_gateway::CreateGatewayError> for Error {
    fn from(err: crate::operation::create_gateway::CreateGatewayError) -> Self {
        match err {
            crate::operation::create_gateway::CreateGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_gateway::CreateGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_gateway::CreateGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_gateway::CreateGatewayError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_gateway::CreateGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_gateway::CreateGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_gateway::CreateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway_target::CreateGatewayTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_gateway_target::CreateGatewayTargetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_gateway_target::CreateGatewayTargetError> for Error {
    fn from(err: crate::operation::create_gateway_target::CreateGatewayTargetError) -> Self {
        match err {
            crate::operation::create_gateway_target::CreateGatewayTargetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_gateway_target::CreateGatewayTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_gateway_target::CreateGatewayTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_gateway_target::CreateGatewayTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_gateway_target::CreateGatewayTargetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_gateway_target::CreateGatewayTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_gateway_target::CreateGatewayTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_gateway_target::CreateGatewayTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_memory::CreateMemoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_memory::CreateMemoryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_memory::CreateMemoryError> for Error {
    fn from(err: crate::operation::create_memory::CreateMemoryError) -> Self {
        match err {
            crate::operation::create_memory::CreateMemoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_memory::CreateMemoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_memory::CreateMemoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_memory::CreateMemoryError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::create_memory::CreateMemoryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_memory::CreateMemoryError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::create_memory::CreateMemoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_memory::CreateMemoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError> for Error {
    fn from(err: crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError) -> Self {
        match err {
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::EncryptionFailure(inner) => {
                Error::EncryptionFailure(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_oauth2_credential_provider::CreateOauth2CredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_identity::CreateWorkloadIdentityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_identity::CreateWorkloadIdentityError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_workload_identity::CreateWorkloadIdentityError> for Error {
    fn from(err: crate::operation::create_workload_identity::CreateWorkloadIdentityError) -> Self {
        match err {
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workload_identity::CreateWorkloadIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_runtime::DeleteAgentRuntimeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_runtime::DeleteAgentRuntimeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent_runtime::DeleteAgentRuntimeError> for Error {
    fn from(err: crate::operation::delete_agent_runtime::DeleteAgentRuntimeError) -> Self {
        match err {
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_agent_runtime::DeleteAgentRuntimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError> for Error {
    fn from(err: crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError) -> Self {
        match err {
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError> for Error {
    fn from(err: crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError) -> Self {
        match err {
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_api_key_credential_provider::DeleteApiKeyCredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_browser::DeleteBrowserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_browser::DeleteBrowserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_browser::DeleteBrowserError> for Error {
    fn from(err: crate::operation::delete_browser::DeleteBrowserError) -> Self {
        match err {
            crate::operation::delete_browser::DeleteBrowserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_browser::DeleteBrowserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_browser::DeleteBrowserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_browser::DeleteBrowserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_browser::DeleteBrowserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_browser::DeleteBrowserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_browser::DeleteBrowserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_browser::DeleteBrowserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_code_interpreter::DeleteCodeInterpreterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_code_interpreter::DeleteCodeInterpreterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_code_interpreter::DeleteCodeInterpreterError> for Error {
    fn from(err: crate::operation::delete_code_interpreter::DeleteCodeInterpreterError) -> Self {
        match err {
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_code_interpreter::DeleteCodeInterpreterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway::DeleteGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway::DeleteGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_gateway::DeleteGatewayError> for Error {
    fn from(err: crate::operation::delete_gateway::DeleteGatewayError) -> Self {
        match err {
            crate::operation::delete_gateway::DeleteGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_gateway::DeleteGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway_target::DeleteGatewayTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway_target::DeleteGatewayTargetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_gateway_target::DeleteGatewayTargetError> for Error {
    fn from(err: crate::operation::delete_gateway_target::DeleteGatewayTargetError) -> Self {
        match err {
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_gateway_target::DeleteGatewayTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_memory::DeleteMemoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_memory::DeleteMemoryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_memory::DeleteMemoryError> for Error {
    fn from(err: crate::operation::delete_memory::DeleteMemoryError) -> Self {
        match err {
            crate::operation::delete_memory::DeleteMemoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_memory::DeleteMemoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_memory::DeleteMemoryError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::delete_memory::DeleteMemoryError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::delete_memory::DeleteMemoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_memory::DeleteMemoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError> for Error {
    fn from(err: crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError) -> Self {
        match err {
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_oauth2_credential_provider::DeleteOauth2CredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_identity::DeleteWorkloadIdentityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_identity::DeleteWorkloadIdentityError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_workload_identity::DeleteWorkloadIdentityError> for Error {
    fn from(err: crate::operation::delete_workload_identity::DeleteWorkloadIdentityError) -> Self {
        match err {
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workload_identity::DeleteWorkloadIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_runtime::GetAgentRuntimeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_runtime::GetAgentRuntimeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_runtime::GetAgentRuntimeError> for Error {
    fn from(err: crate::operation::get_agent_runtime::GetAgentRuntimeError) -> Self {
        match err {
            crate::operation::get_agent_runtime::GetAgentRuntimeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent_runtime::GetAgentRuntimeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_agent_runtime::GetAgentRuntimeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_agent_runtime::GetAgentRuntimeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_runtime::GetAgentRuntimeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_runtime::GetAgentRuntimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError> for Error {
    fn from(err: crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError) -> Self {
        match err {
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_agent_runtime_endpoint::GetAgentRuntimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError> for Error {
    fn from(err: crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError) -> Self {
        match err {
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_api_key_credential_provider::GetApiKeyCredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_browser::GetBrowserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_browser::GetBrowserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_browser::GetBrowserError> for Error {
    fn from(err: crate::operation::get_browser::GetBrowserError) -> Self {
        match err {
            crate::operation::get_browser::GetBrowserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_browser::GetBrowserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_browser::GetBrowserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_browser::GetBrowserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_browser::GetBrowserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_browser::GetBrowserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_interpreter::GetCodeInterpreterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_interpreter::GetCodeInterpreterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_code_interpreter::GetCodeInterpreterError> for Error {
    fn from(err: crate::operation::get_code_interpreter::GetCodeInterpreterError) -> Self {
        match err {
            crate::operation::get_code_interpreter::GetCodeInterpreterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_code_interpreter::GetCodeInterpreterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_code_interpreter::GetCodeInterpreterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_code_interpreter::GetCodeInterpreterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_code_interpreter::GetCodeInterpreterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_code_interpreter::GetCodeInterpreterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway::GetGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway::GetGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_gateway::GetGatewayError> for Error {
    fn from(err: crate::operation::get_gateway::GetGatewayError) -> Self {
        match err {
            crate::operation::get_gateway::GetGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_gateway::GetGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_gateway::GetGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_gateway::GetGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_gateway::GetGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_gateway::GetGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_target::GetGatewayTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_target::GetGatewayTargetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_gateway_target::GetGatewayTargetError> for Error {
    fn from(err: crate::operation::get_gateway_target::GetGatewayTargetError) -> Self {
        match err {
            crate::operation::get_gateway_target::GetGatewayTargetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_gateway_target::GetGatewayTargetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_gateway_target::GetGatewayTargetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_gateway_target::GetGatewayTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_gateway_target::GetGatewayTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_gateway_target::GetGatewayTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_memory::GetMemoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_memory::GetMemoryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_memory::GetMemoryError> for Error {
    fn from(err: crate::operation::get_memory::GetMemoryError) -> Self {
        match err {
            crate::operation::get_memory::GetMemoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_memory::GetMemoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_memory::GetMemoryError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::get_memory::GetMemoryError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::get_memory::GetMemoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_memory::GetMemoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError> for Error {
    fn from(err: crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError) -> Self {
        match err {
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_oauth2_credential_provider::GetOauth2CredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_token_vault::GetTokenVaultError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_token_vault::GetTokenVaultError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_token_vault::GetTokenVaultError> for Error {
    fn from(err: crate::operation::get_token_vault::GetTokenVaultError) -> Self {
        match err {
            crate::operation::get_token_vault::GetTokenVaultError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_token_vault::GetTokenVaultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_identity::GetWorkloadIdentityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_identity::GetWorkloadIdentityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload_identity::GetWorkloadIdentityError> for Error {
    fn from(err: crate::operation::get_workload_identity::GetWorkloadIdentityError) -> Self {
        match err {
            crate::operation::get_workload_identity::GetWorkloadIdentityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_workload_identity::GetWorkloadIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workload_identity::GetWorkloadIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workload_identity::GetWorkloadIdentityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workload_identity::GetWorkloadIdentityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_workload_identity::GetWorkloadIdentityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workload_identity::GetWorkloadIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError> for Error {
    fn from(err: crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError) -> Self {
        match err {
            crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtimes::ListAgentRuntimesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtimes::ListAgentRuntimesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_runtimes::ListAgentRuntimesError> for Error {
    fn from(err: crate::operation::list_agent_runtimes::ListAgentRuntimesError) -> Self {
        match err {
            crate::operation::list_agent_runtimes::ListAgentRuntimesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_agent_runtimes::ListAgentRuntimesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_agent_runtimes::ListAgentRuntimesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_agent_runtimes::ListAgentRuntimesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_agent_runtimes::ListAgentRuntimesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError> for Error {
    fn from(err: crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError) -> Self {
        match err {
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError> for Error {
    fn from(err: crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError) -> Self {
        match err {
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_browsers::ListBrowsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_browsers::ListBrowsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_browsers::ListBrowsersError> for Error {
    fn from(err: crate::operation::list_browsers::ListBrowsersError) -> Self {
        match err {
            crate::operation::list_browsers::ListBrowsersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_browsers::ListBrowsersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_browsers::ListBrowsersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_browsers::ListBrowsersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_browsers::ListBrowsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_code_interpreters::ListCodeInterpretersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_code_interpreters::ListCodeInterpretersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_code_interpreters::ListCodeInterpretersError> for Error {
    fn from(err: crate::operation::list_code_interpreters::ListCodeInterpretersError) -> Self {
        match err {
            crate::operation::list_code_interpreters::ListCodeInterpretersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_code_interpreters::ListCodeInterpretersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_code_interpreters::ListCodeInterpretersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_code_interpreters::ListCodeInterpretersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_code_interpreters::ListCodeInterpretersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateways::ListGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateways::ListGatewaysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_gateways::ListGatewaysError> for Error {
    fn from(err: crate::operation::list_gateways::ListGatewaysError) -> Self {
        match err {
            crate::operation::list_gateways::ListGatewaysError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_gateways::ListGatewaysError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_gateways::ListGatewaysError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_gateways::ListGatewaysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_gateways::ListGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateway_targets::ListGatewayTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gateway_targets::ListGatewayTargetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_gateway_targets::ListGatewayTargetsError> for Error {
    fn from(err: crate::operation::list_gateway_targets::ListGatewayTargetsError) -> Self {
        match err {
            crate::operation::list_gateway_targets::ListGatewayTargetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_gateway_targets::ListGatewayTargetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_gateway_targets::ListGatewayTargetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_gateway_targets::ListGatewayTargetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_gateway_targets::ListGatewayTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memories::ListMemoriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memories::ListMemoriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_memories::ListMemoriesError> for Error {
    fn from(err: crate::operation::list_memories::ListMemoriesError) -> Self {
        match err {
            crate::operation::list_memories::ListMemoriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_memories::ListMemoriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_memories::ListMemoriesError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::list_memories::ListMemoriesError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::list_memories::ListMemoriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_memories::ListMemoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError> for Error {
    fn from(err: crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError) -> Self {
        match err {
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_identities::ListWorkloadIdentitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_identities::ListWorkloadIdentitiesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workload_identities::ListWorkloadIdentitiesError> for Error {
    fn from(err: crate::operation::list_workload_identities::ListWorkloadIdentitiesError) -> Self {
        match err {
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workload_identities::ListWorkloadIdentitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_token_vault_cmk::SetTokenVaultCMKError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_token_vault_cmk::SetTokenVaultCMKError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::set_token_vault_cmk::SetTokenVaultCMKError> for Error {
    fn from(err: crate::operation::set_token_vault_cmk::SetTokenVaultCMKError) -> Self {
        match err {
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::set_token_vault_cmk::SetTokenVaultCMKError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError> for Error {
    fn from(err: crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError) -> Self {
        match err {
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::synchronize_gateway_targets::SynchronizeGatewayTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_runtime::UpdateAgentRuntimeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_runtime::UpdateAgentRuntimeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent_runtime::UpdateAgentRuntimeError> for Error {
    fn from(err: crate::operation::update_agent_runtime::UpdateAgentRuntimeError) -> Self {
        match err {
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_agent_runtime::UpdateAgentRuntimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError> for Error {
    fn from(err: crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError) -> Self {
        match err {
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_agent_runtime_endpoint::UpdateAgentRuntimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError> for Error {
    fn from(err: crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError) -> Self {
        match err {
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::EncryptionFailure(inner) => {
                Error::EncryptionFailure(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway::UpdateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway::UpdateGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_gateway::UpdateGatewayError> for Error {
    fn from(err: crate::operation::update_gateway::UpdateGatewayError) -> Self {
        match err {
            crate::operation::update_gateway::UpdateGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_gateway::UpdateGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_gateway::UpdateGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_gateway::UpdateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway_target::UpdateGatewayTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway_target::UpdateGatewayTargetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_gateway_target::UpdateGatewayTargetError> for Error {
    fn from(err: crate::operation::update_gateway_target::UpdateGatewayTargetError) -> Self {
        match err {
            crate::operation::update_gateway_target::UpdateGatewayTargetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_gateway_target::UpdateGatewayTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_gateway_target::UpdateGatewayTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_gateway_target::UpdateGatewayTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_gateway_target::UpdateGatewayTargetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_gateway_target::UpdateGatewayTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_gateway_target::UpdateGatewayTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_gateway_target::UpdateGatewayTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_memory::UpdateMemoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_memory::UpdateMemoryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_memory::UpdateMemoryError> for Error {
    fn from(err: crate::operation::update_memory::UpdateMemoryError) -> Self {
        match err {
            crate::operation::update_memory::UpdateMemoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_memory::UpdateMemoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_memory::UpdateMemoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_memory::UpdateMemoryError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::update_memory::UpdateMemoryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_memory::UpdateMemoryError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::update_memory::UpdateMemoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_memory::UpdateMemoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError> for Error {
    fn from(err: crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError) -> Self {
        match err {
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::DecryptionFailure(inner) => {
                Error::DecryptionFailure(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::EncryptionFailure(inner) => {
                Error::EncryptionFailure(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_oauth2_credential_provider::UpdateOauth2CredentialProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_identity::UpdateWorkloadIdentityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_identity::UpdateWorkloadIdentityError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workload_identity::UpdateWorkloadIdentityError> for Error {
    fn from(err: crate::operation::update_workload_identity::UpdateWorkloadIdentityError) -> Self {
        match err {
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workload_identity::UpdateWorkloadIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConcurrentModificationException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::DecryptionFailure(inner) => inner.source(),
            Error::EncryptionFailure(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceLimitExceededException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottledException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DecryptionFailure(e) => e.request_id(),
            Self::EncryptionFailure(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottledException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
