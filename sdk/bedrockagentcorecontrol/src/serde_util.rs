// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_agent_runtime_output_output_correct_errors(
    mut builder: crate::operation::create_agent_runtime::builders::CreateAgentRuntimeOutputBuilder,
) -> crate::operation::create_agent_runtime::builders::CreateAgentRuntimeOutputBuilder {
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.agent_runtime_id.is_none() {
        builder.agent_runtime_id = Some(Default::default())
    }
    if builder.agent_runtime_version.is_none() {
        builder.agent_runtime_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeStatus>().ok()
    }
    builder
}

pub(crate) fn create_agent_runtime_endpoint_output_output_correct_errors(
    mut builder: crate::operation::create_agent_runtime_endpoint::builders::CreateAgentRuntimeEndpointOutputBuilder,
) -> crate::operation::create_agent_runtime_endpoint::builders::CreateAgentRuntimeEndpointOutputBuilder {
    if builder.target_version.is_none() {
        builder.target_version = Some(Default::default())
    }
    if builder.agent_runtime_endpoint_arn.is_none() {
        builder.agent_runtime_endpoint_arn = Some(Default::default())
    }
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeEndpointStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn decryption_failure_correct_errors(
    mut builder: crate::types::error::builders::DecryptionFailureBuilder,
) -> crate::types::error::builders::DecryptionFailureBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_failure_correct_errors(
    mut builder: crate::types::error::builders::EncryptionFailureBuilder,
) -> crate::types::error::builders::EncryptionFailureBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_api_key_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::create_api_key_credential_provider::builders::CreateApiKeyCredentialProviderOutputBuilder,
) -> crate::operation::create_api_key_credential_provider::builders::CreateApiKeyCredentialProviderOutputBuilder {
    if builder.api_key_secret_arn.is_none() {
        builder.api_key_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_browser_output_output_correct_errors(
    mut builder: crate::operation::create_browser::builders::CreateBrowserOutputBuilder,
) -> crate::operation::create_browser::builders::CreateBrowserOutputBuilder {
    if builder.browser_id.is_none() {
        builder.browser_id = Some(Default::default())
    }
    if builder.browser_arn.is_none() {
        builder.browser_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BrowserStatus>().ok()
    }
    builder
}

pub(crate) fn create_code_interpreter_output_output_correct_errors(
    mut builder: crate::operation::create_code_interpreter::builders::CreateCodeInterpreterOutputBuilder,
) -> crate::operation::create_code_interpreter::builders::CreateCodeInterpreterOutputBuilder {
    if builder.code_interpreter_id.is_none() {
        builder.code_interpreter_id = Some(Default::default())
    }
    if builder.code_interpreter_arn.is_none() {
        builder.code_interpreter_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CodeInterpreterStatus>().ok()
    }
    builder
}

pub(crate) fn create_gateway_output_output_correct_errors(
    mut builder: crate::operation::create_gateway::builders::CreateGatewayOutputBuilder,
) -> crate::operation::create_gateway::builders::CreateGatewayOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GatewayStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::GatewayProtocolType>().ok()
    }
    if builder.authorizer_type.is_none() {
        builder.authorizer_type = "no value was set".parse::<crate::types::AuthorizerType>().ok()
    }
    builder
}

pub(crate) fn create_gateway_target_output_output_correct_errors(
    mut builder: crate::operation::create_gateway_target::builders::CreateGatewayTargetOutputBuilder,
) -> crate::operation::create_gateway_target::builders::CreateGatewayTargetOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_configuration.is_none() {
        builder.target_configuration = Some(crate::types::TargetConfiguration::Unknown)
    }
    if builder.credential_provider_configurations.is_none() {
        builder.credential_provider_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn create_oauth2_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::create_oauth2_credential_provider::builders::CreateOauth2CredentialProviderOutputBuilder,
) -> crate::operation::create_oauth2_credential_provider::builders::CreateOauth2CredentialProviderOutputBuilder {
    if builder.client_secret_arn.is_none() {
        builder.client_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_workload_identity_output_output_correct_errors(
    mut builder: crate::operation::create_workload_identity::builders::CreateWorkloadIdentityOutputBuilder,
) -> crate::operation::create_workload_identity::builders::CreateWorkloadIdentityOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.workload_identity_arn.is_none() {
        builder.workload_identity_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_agent_runtime_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_runtime::builders::DeleteAgentRuntimeOutputBuilder,
) -> crate::operation::delete_agent_runtime::builders::DeleteAgentRuntimeOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeStatus>().ok()
    }
    builder
}

pub(crate) fn delete_agent_runtime_endpoint_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_runtime_endpoint::builders::DeleteAgentRuntimeEndpointOutputBuilder,
) -> crate::operation::delete_agent_runtime_endpoint::builders::DeleteAgentRuntimeEndpointOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeEndpointStatus>().ok()
    }
    builder
}

pub(crate) fn delete_browser_output_output_correct_errors(
    mut builder: crate::operation::delete_browser::builders::DeleteBrowserOutputBuilder,
) -> crate::operation::delete_browser::builders::DeleteBrowserOutputBuilder {
    if builder.browser_id.is_none() {
        builder.browser_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BrowserStatus>().ok()
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_code_interpreter_output_output_correct_errors(
    mut builder: crate::operation::delete_code_interpreter::builders::DeleteCodeInterpreterOutputBuilder,
) -> crate::operation::delete_code_interpreter::builders::DeleteCodeInterpreterOutputBuilder {
    if builder.code_interpreter_id.is_none() {
        builder.code_interpreter_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CodeInterpreterStatus>().ok()
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_gateway_output_output_correct_errors(
    mut builder: crate::operation::delete_gateway::builders::DeleteGatewayOutputBuilder,
) -> crate::operation::delete_gateway::builders::DeleteGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GatewayStatus>().ok()
    }
    builder
}

pub(crate) fn delete_gateway_target_output_output_correct_errors(
    mut builder: crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder,
) -> crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    builder
}

pub(crate) fn delete_memory_output_output_correct_errors(
    mut builder: crate::operation::delete_memory::builders::DeleteMemoryOutputBuilder,
) -> crate::operation::delete_memory::builders::DeleteMemoryOutputBuilder {
    if builder.memory_id.is_none() {
        builder.memory_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_agent_runtime_output_output_correct_errors(
    mut builder: crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder,
) -> crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder {
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.agent_runtime_name.is_none() {
        builder.agent_runtime_name = Some(Default::default())
    }
    if builder.agent_runtime_id.is_none() {
        builder.agent_runtime_id = Some(Default::default())
    }
    if builder.agent_runtime_version.is_none() {
        builder.agent_runtime_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.network_configuration.is_none() {
        builder.network_configuration = {
            let builder = crate::types::builders::NetworkConfigurationBuilder::default();
            crate::serde_util::network_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeStatus>().ok()
    }
    if builder.lifecycle_configuration.is_none() {
        builder.lifecycle_configuration = {
            let builder = crate::types::builders::LifecycleConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_agent_runtime_endpoint_output_output_correct_errors(
    mut builder: crate::operation::get_agent_runtime_endpoint::builders::GetAgentRuntimeEndpointOutputBuilder,
) -> crate::operation::get_agent_runtime_endpoint::builders::GetAgentRuntimeEndpointOutputBuilder {
    if builder.agent_runtime_endpoint_arn.is_none() {
        builder.agent_runtime_endpoint_arn = Some(Default::default())
    }
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeEndpointStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_api_key_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::get_api_key_credential_provider::builders::GetApiKeyCredentialProviderOutputBuilder,
) -> crate::operation::get_api_key_credential_provider::builders::GetApiKeyCredentialProviderOutputBuilder {
    if builder.api_key_secret_arn.is_none() {
        builder.api_key_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_browser_output_output_correct_errors(
    mut builder: crate::operation::get_browser::builders::GetBrowserOutputBuilder,
) -> crate::operation::get_browser::builders::GetBrowserOutputBuilder {
    if builder.browser_id.is_none() {
        builder.browser_id = Some(Default::default())
    }
    if builder.browser_arn.is_none() {
        builder.browser_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_configuration.is_none() {
        builder.network_configuration = {
            let builder = crate::types::builders::BrowserNetworkConfigurationBuilder::default();
            Some(crate::serde_util::browser_network_configuration_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BrowserStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_code_interpreter_output_output_correct_errors(
    mut builder: crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder,
) -> crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder {
    if builder.code_interpreter_id.is_none() {
        builder.code_interpreter_id = Some(Default::default())
    }
    if builder.code_interpreter_arn.is_none() {
        builder.code_interpreter_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_configuration.is_none() {
        builder.network_configuration = {
            let builder = crate::types::builders::CodeInterpreterNetworkConfigurationBuilder::default();
            Some(crate::serde_util::code_interpreter_network_configuration_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CodeInterpreterStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_gateway_output_output_correct_errors(
    mut builder: crate::operation::get_gateway::builders::GetGatewayOutputBuilder,
) -> crate::operation::get_gateway::builders::GetGatewayOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GatewayStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::GatewayProtocolType>().ok()
    }
    if builder.authorizer_type.is_none() {
        builder.authorizer_type = "no value was set".parse::<crate::types::AuthorizerType>().ok()
    }
    builder
}

pub(crate) fn get_gateway_target_output_output_correct_errors(
    mut builder: crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder,
) -> crate::operation::get_gateway_target::builders::GetGatewayTargetOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_configuration.is_none() {
        builder.target_configuration = Some(crate::types::TargetConfiguration::Unknown)
    }
    if builder.credential_provider_configurations.is_none() {
        builder.credential_provider_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn get_memory_output_output_correct_errors(
    mut builder: crate::operation::get_memory::builders::GetMemoryOutputBuilder,
) -> crate::operation::get_memory::builders::GetMemoryOutputBuilder {
    if builder.memory.is_none() {
        builder.memory = {
            let builder = crate::types::builders::MemoryBuilder::default();
            crate::serde_util::memory_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_oauth2_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::get_oauth2_credential_provider::builders::GetOauth2CredentialProviderOutputBuilder,
) -> crate::operation::get_oauth2_credential_provider::builders::GetOauth2CredentialProviderOutputBuilder {
    if builder.client_secret_arn.is_none() {
        builder.client_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.credential_provider_vendor.is_none() {
        builder.credential_provider_vendor = "no value was set".parse::<crate::types::CredentialProviderVendorType>().ok()
    }
    if builder.oauth2_provider_config_output.is_none() {
        builder.oauth2_provider_config_output = Some(crate::types::Oauth2ProviderConfigOutput::Unknown)
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_token_vault_output_output_correct_errors(
    mut builder: crate::operation::get_token_vault::builders::GetTokenVaultOutputBuilder,
) -> crate::operation::get_token_vault::builders::GetTokenVaultOutputBuilder {
    if builder.token_vault_id.is_none() {
        builder.token_vault_id = Some(Default::default())
    }
    if builder.kms_configuration.is_none() {
        builder.kms_configuration = {
            let builder = crate::types::builders::KmsConfigurationBuilder::default();
            crate::serde_util::kms_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_workload_identity_output_output_correct_errors(
    mut builder: crate::operation::get_workload_identity::builders::GetWorkloadIdentityOutputBuilder,
) -> crate::operation::get_workload_identity::builders::GetWorkloadIdentityOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.workload_identity_arn.is_none() {
        builder.workload_identity_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_agent_runtime_endpoints_output_output_correct_errors(
    mut builder: crate::operation::list_agent_runtime_endpoints::builders::ListAgentRuntimeEndpointsOutputBuilder,
) -> crate::operation::list_agent_runtime_endpoints::builders::ListAgentRuntimeEndpointsOutputBuilder {
    if builder.runtime_endpoints.is_none() {
        builder.runtime_endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_runtime_versions_output_output_correct_errors(
    mut builder: crate::operation::list_agent_runtime_versions::builders::ListAgentRuntimeVersionsOutputBuilder,
) -> crate::operation::list_agent_runtime_versions::builders::ListAgentRuntimeVersionsOutputBuilder {
    if builder.agent_runtimes.is_none() {
        builder.agent_runtimes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_runtimes_output_output_correct_errors(
    mut builder: crate::operation::list_agent_runtimes::builders::ListAgentRuntimesOutputBuilder,
) -> crate::operation::list_agent_runtimes::builders::ListAgentRuntimesOutputBuilder {
    if builder.agent_runtimes.is_none() {
        builder.agent_runtimes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_api_key_credential_providers_output_output_correct_errors(
    mut builder: crate::operation::list_api_key_credential_providers::builders::ListApiKeyCredentialProvidersOutputBuilder,
) -> crate::operation::list_api_key_credential_providers::builders::ListApiKeyCredentialProvidersOutputBuilder {
    if builder.credential_providers.is_none() {
        builder.credential_providers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_browsers_output_output_correct_errors(
    mut builder: crate::operation::list_browsers::builders::ListBrowsersOutputBuilder,
) -> crate::operation::list_browsers::builders::ListBrowsersOutputBuilder {
    if builder.browser_summaries.is_none() {
        builder.browser_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_code_interpreters_output_output_correct_errors(
    mut builder: crate::operation::list_code_interpreters::builders::ListCodeInterpretersOutputBuilder,
) -> crate::operation::list_code_interpreters::builders::ListCodeInterpretersOutputBuilder {
    if builder.code_interpreter_summaries.is_none() {
        builder.code_interpreter_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_gateway_targets_output_output_correct_errors(
    mut builder: crate::operation::list_gateway_targets::builders::ListGatewayTargetsOutputBuilder,
) -> crate::operation::list_gateway_targets::builders::ListGatewayTargetsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_gateways_output_output_correct_errors(
    mut builder: crate::operation::list_gateways::builders::ListGatewaysOutputBuilder,
) -> crate::operation::list_gateways::builders::ListGatewaysOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_memories_output_output_correct_errors(
    mut builder: crate::operation::list_memories::builders::ListMemoriesOutputBuilder,
) -> crate::operation::list_memories::builders::ListMemoriesOutputBuilder {
    if builder.memories.is_none() {
        builder.memories = Some(Default::default())
    }
    builder
}

pub(crate) fn list_oauth2_credential_providers_output_output_correct_errors(
    mut builder: crate::operation::list_oauth2_credential_providers::builders::ListOauth2CredentialProvidersOutputBuilder,
) -> crate::operation::list_oauth2_credential_providers::builders::ListOauth2CredentialProvidersOutputBuilder {
    if builder.credential_providers.is_none() {
        builder.credential_providers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workload_identities_output_output_correct_errors(
    mut builder: crate::operation::list_workload_identities::builders::ListWorkloadIdentitiesOutputBuilder,
) -> crate::operation::list_workload_identities::builders::ListWorkloadIdentitiesOutputBuilder {
    if builder.workload_identities.is_none() {
        builder.workload_identities = Some(Default::default())
    }
    builder
}

pub(crate) fn concurrent_modification_exception_correct_errors(
    mut builder: crate::types::error::builders::ConcurrentModificationExceptionBuilder,
) -> crate::types::error::builders::ConcurrentModificationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn set_token_vault_cmk_output_output_correct_errors(
    mut builder: crate::operation::set_token_vault_cmk::builders::SetTokenVaultCmkOutputBuilder,
) -> crate::operation::set_token_vault_cmk::builders::SetTokenVaultCmkOutputBuilder {
    if builder.token_vault_id.is_none() {
        builder.token_vault_id = Some(Default::default())
    }
    if builder.kms_configuration.is_none() {
        builder.kms_configuration = {
            let builder = crate::types::builders::KmsConfigurationBuilder::default();
            crate::serde_util::kms_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_agent_runtime_output_output_correct_errors(
    mut builder: crate::operation::update_agent_runtime::builders::UpdateAgentRuntimeOutputBuilder,
) -> crate::operation::update_agent_runtime::builders::UpdateAgentRuntimeOutputBuilder {
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.agent_runtime_id.is_none() {
        builder.agent_runtime_id = Some(Default::default())
    }
    if builder.agent_runtime_version.is_none() {
        builder.agent_runtime_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeStatus>().ok()
    }
    builder
}

pub(crate) fn update_agent_runtime_endpoint_output_output_correct_errors(
    mut builder: crate::operation::update_agent_runtime_endpoint::builders::UpdateAgentRuntimeEndpointOutputBuilder,
) -> crate::operation::update_agent_runtime_endpoint::builders::UpdateAgentRuntimeEndpointOutputBuilder {
    if builder.agent_runtime_endpoint_arn.is_none() {
        builder.agent_runtime_endpoint_arn = Some(Default::default())
    }
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeEndpointStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_api_key_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::update_api_key_credential_provider::builders::UpdateApiKeyCredentialProviderOutputBuilder,
) -> crate::operation::update_api_key_credential_provider::builders::UpdateApiKeyCredentialProviderOutputBuilder {
    if builder.api_key_secret_arn.is_none() {
        builder.api_key_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_gateway_output_output_correct_errors(
    mut builder: crate::operation::update_gateway::builders::UpdateGatewayOutputBuilder,
) -> crate::operation::update_gateway::builders::UpdateGatewayOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GatewayStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::GatewayProtocolType>().ok()
    }
    if builder.authorizer_type.is_none() {
        builder.authorizer_type = "no value was set".parse::<crate::types::AuthorizerType>().ok()
    }
    builder
}

pub(crate) fn update_gateway_target_output_output_correct_errors(
    mut builder: crate::operation::update_gateway_target::builders::UpdateGatewayTargetOutputBuilder,
) -> crate::operation::update_gateway_target::builders::UpdateGatewayTargetOutputBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_configuration.is_none() {
        builder.target_configuration = Some(crate::types::TargetConfiguration::Unknown)
    }
    if builder.credential_provider_configurations.is_none() {
        builder.credential_provider_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn update_oauth2_credential_provider_output_output_correct_errors(
    mut builder: crate::operation::update_oauth2_credential_provider::builders::UpdateOauth2CredentialProviderOutputBuilder,
) -> crate::operation::update_oauth2_credential_provider::builders::UpdateOauth2CredentialProviderOutputBuilder {
    if builder.client_secret_arn.is_none() {
        builder.client_secret_arn = {
            let builder = crate::types::builders::SecretBuilder::default();
            crate::serde_util::secret_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_vendor.is_none() {
        builder.credential_provider_vendor = "no value was set".parse::<crate::types::CredentialProviderVendorType>().ok()
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.oauth2_provider_config_output.is_none() {
        builder.oauth2_provider_config_output = Some(crate::types::Oauth2ProviderConfigOutput::Unknown)
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_workload_identity_output_output_correct_errors(
    mut builder: crate::operation::update_workload_identity::builders::UpdateWorkloadIdentityOutputBuilder,
) -> crate::operation::update_workload_identity::builders::UpdateWorkloadIdentityOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.workload_identity_arn.is_none() {
        builder.workload_identity_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn secret_correct_errors(mut builder: crate::types::builders::SecretBuilder) -> crate::types::builders::SecretBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn network_configuration_correct_errors(
    mut builder: crate::types::builders::NetworkConfigurationBuilder,
) -> crate::types::builders::NetworkConfigurationBuilder {
    if builder.network_mode.is_none() {
        builder.network_mode = "no value was set".parse::<crate::types::NetworkMode>().ok()
    }
    builder
}

pub(crate) fn browser_network_configuration_correct_errors(
    mut builder: crate::types::builders::BrowserNetworkConfigurationBuilder,
) -> crate::types::builders::BrowserNetworkConfigurationBuilder {
    if builder.network_mode.is_none() {
        builder.network_mode = "no value was set".parse::<crate::types::BrowserNetworkMode>().ok()
    }
    builder
}

pub(crate) fn code_interpreter_network_configuration_correct_errors(
    mut builder: crate::types::builders::CodeInterpreterNetworkConfigurationBuilder,
) -> crate::types::builders::CodeInterpreterNetworkConfigurationBuilder {
    if builder.network_mode.is_none() {
        builder.network_mode = "no value was set".parse::<crate::types::CodeInterpreterNetworkMode>().ok()
    }
    builder
}

pub(crate) fn memory_correct_errors(mut builder: crate::types::builders::MemoryBuilder) -> crate::types::builders::MemoryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.event_expiry_duration.is_none() {
        builder.event_expiry_duration = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MemoryStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn kms_configuration_correct_errors(
    mut builder: crate::types::builders::KmsConfigurationBuilder,
) -> crate::types::builders::KmsConfigurationBuilder {
    if builder.key_type.is_none() {
        builder.key_type = "no value was set".parse::<crate::types::KeyType>().ok()
    }
    builder
}

pub(crate) fn protocol_configuration_correct_errors(
    mut builder: crate::types::builders::ProtocolConfigurationBuilder,
) -> crate::types::builders::ProtocolConfigurationBuilder {
    if builder.server_protocol.is_none() {
        builder.server_protocol = "no value was set".parse::<crate::types::ServerProtocol>().ok()
    }
    builder
}

pub(crate) fn workload_identity_details_correct_errors(
    mut builder: crate::types::builders::WorkloadIdentityDetailsBuilder,
) -> crate::types::builders::WorkloadIdentityDetailsBuilder {
    if builder.workload_identity_arn.is_none() {
        builder.workload_identity_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn agent_runtime_correct_errors(mut builder: crate::types::builders::AgentRuntimeBuilder) -> crate::types::builders::AgentRuntimeBuilder {
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.agent_runtime_id.is_none() {
        builder.agent_runtime_id = Some(Default::default())
    }
    if builder.agent_runtime_version.is_none() {
        builder.agent_runtime_version = Some(Default::default())
    }
    if builder.agent_runtime_name.is_none() {
        builder.agent_runtime_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeStatus>().ok()
    }
    builder
}

pub(crate) fn agent_runtime_endpoint_correct_errors(
    mut builder: crate::types::builders::AgentRuntimeEndpointBuilder,
) -> crate::types::builders::AgentRuntimeEndpointBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.agent_runtime_endpoint_arn.is_none() {
        builder.agent_runtime_endpoint_arn = Some(Default::default())
    }
    if builder.agent_runtime_arn.is_none() {
        builder.agent_runtime_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgentRuntimeEndpointStatus>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn api_key_credential_provider_item_correct_errors(
    mut builder: crate::types::builders::ApiKeyCredentialProviderItemBuilder,
) -> crate::types::builders::ApiKeyCredentialProviderItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn atlassian_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::AtlassianOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::AtlassianOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn browser_summary_correct_errors(
    mut builder: crate::types::builders::BrowserSummaryBuilder,
) -> crate::types::builders::BrowserSummaryBuilder {
    if builder.browser_id.is_none() {
        builder.browser_id = Some(Default::default())
    }
    if builder.browser_arn.is_none() {
        builder.browser_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BrowserStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn code_interpreter_summary_correct_errors(
    mut builder: crate::types::builders::CodeInterpreterSummaryBuilder,
) -> crate::types::builders::CodeInterpreterSummaryBuilder {
    if builder.code_interpreter_id.is_none() {
        builder.code_interpreter_id = Some(Default::default())
    }
    if builder.code_interpreter_arn.is_none() {
        builder.code_interpreter_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CodeInterpreterStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn container_configuration_correct_errors(
    mut builder: crate::types::builders::ContainerConfigurationBuilder,
) -> crate::types::builders::ContainerConfigurationBuilder {
    if builder.container_uri.is_none() {
        builder.container_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn credential_provider_configuration_correct_errors(
    mut builder: crate::types::builders::CredentialProviderConfigurationBuilder,
) -> crate::types::builders::CredentialProviderConfigurationBuilder {
    if builder.credential_provider_type.is_none() {
        builder.credential_provider_type = "no value was set".parse::<crate::types::CredentialProviderType>().ok()
    }
    builder
}

pub(crate) fn custom_jwt_authorizer_configuration_correct_errors(
    mut builder: crate::types::builders::CustomJwtAuthorizerConfigurationBuilder,
) -> crate::types::builders::CustomJwtAuthorizerConfigurationBuilder {
    if builder.discovery_url.is_none() {
        builder.discovery_url = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::CustomOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::CustomOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn gateway_summary_correct_errors(
    mut builder: crate::types::builders::GatewaySummaryBuilder,
) -> crate::types::builders::GatewaySummaryBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GatewayStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.authorizer_type.is_none() {
        builder.authorizer_type = "no value was set".parse::<crate::types::AuthorizerType>().ok()
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::GatewayProtocolType>().ok()
    }
    builder
}

pub(crate) fn gateway_target_correct_errors(
    mut builder: crate::types::builders::GatewayTargetBuilder,
) -> crate::types::builders::GatewayTargetBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_configuration.is_none() {
        builder.target_configuration = Some(crate::types::TargetConfiguration::Unknown)
    }
    if builder.credential_provider_configurations.is_none() {
        builder.credential_provider_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn github_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::GithubOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::GithubOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn google_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::GoogleOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::GoogleOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn included_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::IncludedOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::IncludedOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn linkedin_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::LinkedinOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::LinkedinOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn memory_summary_correct_errors(
    mut builder: crate::types::builders::MemorySummaryBuilder,
) -> crate::types::builders::MemorySummaryBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn microsoft_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::MicrosoftOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::MicrosoftOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn oauth2_credential_provider_item_correct_errors(
    mut builder: crate::types::builders::Oauth2CredentialProviderItemBuilder,
) -> crate::types::builders::Oauth2CredentialProviderItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.credential_provider_vendor.is_none() {
        builder.credential_provider_vendor = "no value was set".parse::<crate::types::CredentialProviderVendorType>().ok()
    }
    if builder.credential_provider_arn.is_none() {
        builder.credential_provider_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::SalesforceOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::SalesforceOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn slack_oauth2_provider_config_output_correct_errors(
    mut builder: crate::types::builders::SlackOauth2ProviderConfigOutputBuilder,
) -> crate::types::builders::SlackOauth2ProviderConfigOutputBuilder {
    if builder.oauth_discovery.is_none() {
        builder.oauth_discovery = Some(crate::types::Oauth2Discovery::Unknown)
    }
    builder
}

pub(crate) fn target_summary_correct_errors(
    mut builder: crate::types::builders::TargetSummaryBuilder,
) -> crate::types::builders::TargetSummaryBuilder {
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TargetStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.security_groups.is_none() {
        builder.security_groups = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn workload_identity_type_correct_errors(
    mut builder: crate::types::builders::WorkloadIdentityTypeBuilder,
) -> crate::types::builders::WorkloadIdentityTypeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.workload_identity_arn.is_none() {
        builder.workload_identity_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn mcp_lambda_target_configuration_correct_errors(
    mut builder: crate::types::builders::McpLambdaTargetConfigurationBuilder,
) -> crate::types::builders::McpLambdaTargetConfigurationBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    if builder.tool_schema.is_none() {
        builder.tool_schema = Some(crate::types::ToolSchema::Unknown)
    }
    builder
}

pub(crate) fn mcp_server_target_configuration_correct_errors(
    mut builder: crate::types::builders::McpServerTargetConfigurationBuilder,
) -> crate::types::builders::McpServerTargetConfigurationBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn memory_strategy_correct_errors(
    mut builder: crate::types::builders::MemoryStrategyBuilder,
) -> crate::types::builders::MemoryStrategyBuilder {
    if builder.strategy_id.is_none() {
        builder.strategy_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MemoryStrategyType>().ok()
    }
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn gateway_api_key_credential_provider_correct_errors(
    mut builder: crate::types::builders::GatewayApiKeyCredentialProviderBuilder,
) -> crate::types::builders::GatewayApiKeyCredentialProviderBuilder {
    if builder.provider_arn.is_none() {
        builder.provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn o_auth_credential_provider_correct_errors(
    mut builder: crate::types::builders::OAuthCredentialProviderBuilder,
) -> crate::types::builders::OAuthCredentialProviderBuilder {
    if builder.provider_arn.is_none() {
        builder.provider_arn = Some(Default::default())
    }
    if builder.scopes.is_none() {
        builder.scopes = Some(Default::default())
    }
    builder
}

pub(crate) fn oauth2_authorization_server_metadata_correct_errors(
    mut builder: crate::types::builders::Oauth2AuthorizationServerMetadataBuilder,
) -> crate::types::builders::Oauth2AuthorizationServerMetadataBuilder {
    if builder.issuer.is_none() {
        builder.issuer = Some(Default::default())
    }
    if builder.authorization_endpoint.is_none() {
        builder.authorization_endpoint = Some(Default::default())
    }
    if builder.token_endpoint.is_none() {
        builder.token_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn self_managed_configuration_correct_errors(
    mut builder: crate::types::builders::SelfManagedConfigurationBuilder,
) -> crate::types::builders::SelfManagedConfigurationBuilder {
    if builder.trigger_conditions.is_none() {
        builder.trigger_conditions = Some(Default::default())
    }
    if builder.invocation_configuration.is_none() {
        builder.invocation_configuration = {
            let builder = crate::types::builders::InvocationConfigurationBuilder::default();
            crate::serde_util::invocation_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.historical_context_window_size.is_none() {
        builder.historical_context_window_size = Some(Default::default())
    }
    builder
}

pub(crate) fn invocation_configuration_correct_errors(
    mut builder: crate::types::builders::InvocationConfigurationBuilder,
) -> crate::types::builders::InvocationConfigurationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    if builder.payload_delivery_bucket_name.is_none() {
        builder.payload_delivery_bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tool_definition_correct_errors(
    mut builder: crate::types::builders::ToolDefinitionBuilder,
) -> crate::types::builders::ToolDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.input_schema.is_none() {
        builder.input_schema = {
            let builder = crate::types::builders::SchemaDefinitionBuilder::default();
            crate::serde_util::schema_definition_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn schema_definition_correct_errors(
    mut builder: crate::types::builders::SchemaDefinitionBuilder,
) -> crate::types::builders::SchemaDefinitionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SchemaType>().ok()
    }
    builder
}

pub(crate) fn semantic_consolidation_override_correct_errors(
    mut builder: crate::types::builders::SemanticConsolidationOverrideBuilder,
) -> crate::types::builders::SemanticConsolidationOverrideBuilder {
    if builder.append_to_prompt.is_none() {
        builder.append_to_prompt = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn semantic_extraction_override_correct_errors(
    mut builder: crate::types::builders::SemanticExtractionOverrideBuilder,
) -> crate::types::builders::SemanticExtractionOverrideBuilder {
    if builder.append_to_prompt.is_none() {
        builder.append_to_prompt = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn summary_consolidation_override_correct_errors(
    mut builder: crate::types::builders::SummaryConsolidationOverrideBuilder,
) -> crate::types::builders::SummaryConsolidationOverrideBuilder {
    if builder.append_to_prompt.is_none() {
        builder.append_to_prompt = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn user_preference_consolidation_override_correct_errors(
    mut builder: crate::types::builders::UserPreferenceConsolidationOverrideBuilder,
) -> crate::types::builders::UserPreferenceConsolidationOverrideBuilder {
    if builder.append_to_prompt.is_none() {
        builder.append_to_prompt = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn user_preference_extraction_override_correct_errors(
    mut builder: crate::types::builders::UserPreferenceExtractionOverrideBuilder,
) -> crate::types::builders::UserPreferenceExtractionOverrideBuilder {
    if builder.append_to_prompt.is_none() {
        builder.append_to_prompt = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}
