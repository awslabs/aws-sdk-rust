// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_trigger_condition_input(
    object_4: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TriggerConditionInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::TriggerConditionInput::MessageBasedTrigger(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("messageBasedTrigger").start_object();
            crate::protocol_serde::shape_message_based_trigger_input::ser_message_based_trigger_input(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::TriggerConditionInput::TokenBasedTrigger(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_4.key("tokenBasedTrigger").start_object();
            crate::protocol_serde::shape_token_based_trigger_input::ser_token_based_trigger_input(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::TriggerConditionInput::TimeBasedTrigger(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_4.key("timeBasedTrigger").start_object();
            crate::protocol_serde::shape_time_based_trigger_input::ser_time_based_trigger_input(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::TriggerConditionInput::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "TriggerConditionInput",
            ))
        }
    }
    Ok(())
}
