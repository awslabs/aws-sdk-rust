// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Model Context Protocol (MCP) configuration for a target. This structure defines how the gateway uses MCP to communicate with the target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum McpTargetConfiguration {
    /// <p>The Lambda configuration for the Model Context Protocol target. This configuration defines how the gateway uses a Lambda function to communicate with the target.</p>
    Lambda(crate::types::McpLambdaTargetConfiguration),
    /// <p>The MCP server specified as the gateway target.</p>
    McpServer(crate::types::McpServerTargetConfiguration),
    /// <p>The OpenAPI schema for the Model Context Protocol target. This schema defines the API structure of the target.</p>
    OpenApiSchema(crate::types::ApiSchemaConfiguration),
    /// <p>The Smithy model for the Model Context Protocol target. This model defines the API structure of the target using the Smithy specification.</p>
    SmithyModel(crate::types::ApiSchemaConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl McpTargetConfiguration {
    /// Tries to convert the enum instance into [`Lambda`](crate::types::McpTargetConfiguration::Lambda), extracting the inner [`McpLambdaTargetConfiguration`](crate::types::McpLambdaTargetConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_lambda(&self) -> ::std::result::Result<&crate::types::McpLambdaTargetConfiguration, &Self> {
        if let McpTargetConfiguration::Lambda(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Lambda`](crate::types::McpTargetConfiguration::Lambda).
    pub fn is_lambda(&self) -> bool {
        self.as_lambda().is_ok()
    }
    /// Tries to convert the enum instance into [`McpServer`](crate::types::McpTargetConfiguration::McpServer), extracting the inner [`McpServerTargetConfiguration`](crate::types::McpServerTargetConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mcp_server(&self) -> ::std::result::Result<&crate::types::McpServerTargetConfiguration, &Self> {
        if let McpTargetConfiguration::McpServer(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`McpServer`](crate::types::McpTargetConfiguration::McpServer).
    pub fn is_mcp_server(&self) -> bool {
        self.as_mcp_server().is_ok()
    }
    /// Tries to convert the enum instance into [`OpenApiSchema`](crate::types::McpTargetConfiguration::OpenApiSchema), extracting the inner [`ApiSchemaConfiguration`](crate::types::ApiSchemaConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_open_api_schema(&self) -> ::std::result::Result<&crate::types::ApiSchemaConfiguration, &Self> {
        if let McpTargetConfiguration::OpenApiSchema(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OpenApiSchema`](crate::types::McpTargetConfiguration::OpenApiSchema).
    pub fn is_open_api_schema(&self) -> bool {
        self.as_open_api_schema().is_ok()
    }
    /// Tries to convert the enum instance into [`SmithyModel`](crate::types::McpTargetConfiguration::SmithyModel), extracting the inner [`ApiSchemaConfiguration`](crate::types::ApiSchemaConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_smithy_model(&self) -> ::std::result::Result<&crate::types::ApiSchemaConfiguration, &Self> {
        if let McpTargetConfiguration::SmithyModel(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SmithyModel`](crate::types::McpTargetConfiguration::SmithyModel).
    pub fn is_smithy_model(&self) -> bool {
        self.as_smithy_model().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
