// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Trigger configuration based on tokens.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TokenBasedTriggerInput {
    /// <p>Number of tokens that trigger memory processing.</p>
    pub token_count: i32,
}
impl TokenBasedTriggerInput {
    /// <p>Number of tokens that trigger memory processing.</p>
    pub fn token_count(&self) -> i32 {
        self.token_count
    }
}
impl TokenBasedTriggerInput {
    /// Creates a new builder-style object to manufacture [`TokenBasedTriggerInput`](crate::types::TokenBasedTriggerInput).
    pub fn builder() -> crate::types::builders::TokenBasedTriggerInputBuilder {
        crate::types::builders::TokenBasedTriggerInputBuilder::default()
    }
}

/// A builder for [`TokenBasedTriggerInput`](crate::types::TokenBasedTriggerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TokenBasedTriggerInputBuilder {
    pub(crate) token_count: ::std::option::Option<i32>,
}
impl TokenBasedTriggerInputBuilder {
    /// <p>Number of tokens that trigger memory processing.</p>
    pub fn token_count(mut self, input: i32) -> Self {
        self.token_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of tokens that trigger memory processing.</p>
    pub fn set_token_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.token_count = input;
        self
    }
    /// <p>Number of tokens that trigger memory processing.</p>
    pub fn get_token_count(&self) -> &::std::option::Option<i32> {
        &self.token_count
    }
    /// Consumes the builder and constructs a [`TokenBasedTriggerInput`](crate::types::TokenBasedTriggerInput).
    pub fn build(self) -> crate::types::TokenBasedTriggerInput {
        crate::types::TokenBasedTriggerInput {
            token_count: self.token_count.unwrap_or(5000),
        }
    }
}
