// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Condition that triggers memory processing.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TriggerConditionInput {
    /// <p>Message based trigger configuration.</p>
    MessageBasedTrigger(crate::types::MessageBasedTriggerInput),
    /// <p>Time based trigger configuration.</p>
    TimeBasedTrigger(crate::types::TimeBasedTriggerInput),
    /// <p>Token based trigger configuration.</p>
    TokenBasedTrigger(crate::types::TokenBasedTriggerInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TriggerConditionInput {
    /// Tries to convert the enum instance into [`MessageBasedTrigger`](crate::types::TriggerConditionInput::MessageBasedTrigger), extracting the inner [`MessageBasedTriggerInput`](crate::types::MessageBasedTriggerInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_message_based_trigger(&self) -> ::std::result::Result<&crate::types::MessageBasedTriggerInput, &Self> {
        if let TriggerConditionInput::MessageBasedTrigger(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MessageBasedTrigger`](crate::types::TriggerConditionInput::MessageBasedTrigger).
    pub fn is_message_based_trigger(&self) -> bool {
        self.as_message_based_trigger().is_ok()
    }
    /// Tries to convert the enum instance into [`TimeBasedTrigger`](crate::types::TriggerConditionInput::TimeBasedTrigger), extracting the inner [`TimeBasedTriggerInput`](crate::types::TimeBasedTriggerInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_time_based_trigger(&self) -> ::std::result::Result<&crate::types::TimeBasedTriggerInput, &Self> {
        if let TriggerConditionInput::TimeBasedTrigger(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TimeBasedTrigger`](crate::types::TriggerConditionInput::TimeBasedTrigger).
    pub fn is_time_based_trigger(&self) -> bool {
        self.as_time_based_trigger().is_ok()
    }
    /// Tries to convert the enum instance into [`TokenBasedTrigger`](crate::types::TriggerConditionInput::TokenBasedTrigger), extracting the inner [`TokenBasedTriggerInput`](crate::types::TokenBasedTriggerInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_token_based_trigger(&self) -> ::std::result::Result<&crate::types::TokenBasedTriggerInput, &Self> {
        if let TriggerConditionInput::TokenBasedTrigger(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TokenBasedTrigger`](crate::types::TriggerConditionInput::TokenBasedTrigger).
    pub fn is_token_based_trigger(&self) -> bool {
        self.as_token_based_trigger().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
