// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the input configuration for an OAuth2 provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum Oauth2ProviderConfigInput {
    /// <p>Configuration settings for Atlassian OAuth2 provider integration.</p>
    AtlassianOauth2ProviderConfig(crate::types::AtlassianOauth2ProviderConfigInput),
    /// <p>The configuration for a custom OAuth2 provider.</p>
    CustomOauth2ProviderConfig(crate::types::CustomOauth2ProviderConfigInput),
    /// <p>The configuration for a GitHub OAuth2 provider.</p>
    GithubOauth2ProviderConfig(crate::types::GithubOauth2ProviderConfigInput),
    /// <p>The configuration for a Google OAuth2 provider.</p>
    GoogleOauth2ProviderConfig(crate::types::GoogleOauth2ProviderConfigInput),
    /// <p>The configuration for a non-custom OAuth2 provider. This includes settings for supported OAuth2 providers that have built-in integration support.</p>
    IncludedOauth2ProviderConfig(crate::types::IncludedOauth2ProviderConfigInput),
    /// <p>Configuration settings for LinkedIn OAuth2 provider integration.</p>
    LinkedinOauth2ProviderConfig(crate::types::LinkedinOauth2ProviderConfigInput),
    /// <p>The configuration for a Microsoft OAuth2 provider.</p>
    MicrosoftOauth2ProviderConfig(crate::types::MicrosoftOauth2ProviderConfigInput),
    /// <p>The configuration for a Salesforce OAuth2 provider.</p>
    SalesforceOauth2ProviderConfig(crate::types::SalesforceOauth2ProviderConfigInput),
    /// <p>The configuration for a Slack OAuth2 provider.</p>
    SlackOauth2ProviderConfig(crate::types::SlackOauth2ProviderConfigInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Oauth2ProviderConfigInput {
    /// Tries to convert the enum instance into [`AtlassianOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::AtlassianOauth2ProviderConfig), extracting the inner [`AtlassianOauth2ProviderConfigInput`](crate::types::AtlassianOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_atlassian_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::AtlassianOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::AtlassianOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AtlassianOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::AtlassianOauth2ProviderConfig).
    pub fn is_atlassian_oauth2_provider_config(&self) -> bool {
        self.as_atlassian_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`CustomOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::CustomOauth2ProviderConfig), extracting the inner [`CustomOauth2ProviderConfigInput`](crate::types::CustomOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::CustomOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::CustomOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CustomOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::CustomOauth2ProviderConfig).
    pub fn is_custom_oauth2_provider_config(&self) -> bool {
        self.as_custom_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`GithubOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::GithubOauth2ProviderConfig), extracting the inner [`GithubOauth2ProviderConfigInput`](crate::types::GithubOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_github_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::GithubOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::GithubOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GithubOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::GithubOauth2ProviderConfig).
    pub fn is_github_oauth2_provider_config(&self) -> bool {
        self.as_github_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`GoogleOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::GoogleOauth2ProviderConfig), extracting the inner [`GoogleOauth2ProviderConfigInput`](crate::types::GoogleOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_google_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::GoogleOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::GoogleOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GoogleOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::GoogleOauth2ProviderConfig).
    pub fn is_google_oauth2_provider_config(&self) -> bool {
        self.as_google_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`IncludedOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::IncludedOauth2ProviderConfig), extracting the inner [`IncludedOauth2ProviderConfigInput`](crate::types::IncludedOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_included_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::IncludedOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::IncludedOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IncludedOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::IncludedOauth2ProviderConfig).
    pub fn is_included_oauth2_provider_config(&self) -> bool {
        self.as_included_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`LinkedinOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::LinkedinOauth2ProviderConfig), extracting the inner [`LinkedinOauth2ProviderConfigInput`](crate::types::LinkedinOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_linkedin_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::LinkedinOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::LinkedinOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LinkedinOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::LinkedinOauth2ProviderConfig).
    pub fn is_linkedin_oauth2_provider_config(&self) -> bool {
        self.as_linkedin_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`MicrosoftOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::MicrosoftOauth2ProviderConfig), extracting the inner [`MicrosoftOauth2ProviderConfigInput`](crate::types::MicrosoftOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_microsoft_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::MicrosoftOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::MicrosoftOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MicrosoftOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::MicrosoftOauth2ProviderConfig).
    pub fn is_microsoft_oauth2_provider_config(&self) -> bool {
        self.as_microsoft_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`SalesforceOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::SalesforceOauth2ProviderConfig), extracting the inner [`SalesforceOauth2ProviderConfigInput`](crate::types::SalesforceOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_salesforce_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::SalesforceOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::SalesforceOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SalesforceOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::SalesforceOauth2ProviderConfig).
    pub fn is_salesforce_oauth2_provider_config(&self) -> bool {
        self.as_salesforce_oauth2_provider_config().is_ok()
    }
    /// Tries to convert the enum instance into [`SlackOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::SlackOauth2ProviderConfig), extracting the inner [`SlackOauth2ProviderConfigInput`](crate::types::SlackOauth2ProviderConfigInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_slack_oauth2_provider_config(&self) -> ::std::result::Result<&crate::types::SlackOauth2ProviderConfigInput, &Self> {
        if let Oauth2ProviderConfigInput::SlackOauth2ProviderConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SlackOauth2ProviderConfig`](crate::types::Oauth2ProviderConfigInput::SlackOauth2ProviderConfig).
    pub fn is_slack_oauth2_provider_config(&self) -> bool {
        self.as_slack_oauth2_provider_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
