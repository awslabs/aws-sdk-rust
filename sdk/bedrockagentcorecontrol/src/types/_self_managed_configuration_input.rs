// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input configuration for a self-managed memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelfManagedConfigurationInput {
    /// <p>A list of conditions that trigger memory processing.</p>
    pub trigger_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConditionInput>>,
    /// <p>Configuration to invoke a self-managed memory processing pipeline with.</p>
    pub invocation_configuration: ::std::option::Option<crate::types::InvocationConfigurationInput>,
    /// <p>Number of historical messages to include in processing context.</p>
    pub historical_context_window_size: i32,
}
impl SelfManagedConfigurationInput {
    /// <p>A list of conditions that trigger memory processing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trigger_conditions.is_none()`.
    pub fn trigger_conditions(&self) -> &[crate::types::TriggerConditionInput] {
        self.trigger_conditions.as_deref().unwrap_or_default()
    }
    /// <p>Configuration to invoke a self-managed memory processing pipeline with.</p>
    pub fn invocation_configuration(&self) -> ::std::option::Option<&crate::types::InvocationConfigurationInput> {
        self.invocation_configuration.as_ref()
    }
    /// <p>Number of historical messages to include in processing context.</p>
    pub fn historical_context_window_size(&self) -> i32 {
        self.historical_context_window_size
    }
}
impl SelfManagedConfigurationInput {
    /// Creates a new builder-style object to manufacture [`SelfManagedConfigurationInput`](crate::types::SelfManagedConfigurationInput).
    pub fn builder() -> crate::types::builders::SelfManagedConfigurationInputBuilder {
        crate::types::builders::SelfManagedConfigurationInputBuilder::default()
    }
}

/// A builder for [`SelfManagedConfigurationInput`](crate::types::SelfManagedConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SelfManagedConfigurationInputBuilder {
    pub(crate) trigger_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConditionInput>>,
    pub(crate) invocation_configuration: ::std::option::Option<crate::types::InvocationConfigurationInput>,
    pub(crate) historical_context_window_size: ::std::option::Option<i32>,
}
impl SelfManagedConfigurationInputBuilder {
    /// Appends an item to `trigger_conditions`.
    ///
    /// To override the contents of this collection use [`set_trigger_conditions`](Self::set_trigger_conditions).
    ///
    /// <p>A list of conditions that trigger memory processing.</p>
    pub fn trigger_conditions(mut self, input: crate::types::TriggerConditionInput) -> Self {
        let mut v = self.trigger_conditions.unwrap_or_default();
        v.push(input);
        self.trigger_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions that trigger memory processing.</p>
    pub fn set_trigger_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConditionInput>>) -> Self {
        self.trigger_conditions = input;
        self
    }
    /// <p>A list of conditions that trigger memory processing.</p>
    pub fn get_trigger_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TriggerConditionInput>> {
        &self.trigger_conditions
    }
    /// <p>Configuration to invoke a self-managed memory processing pipeline with.</p>
    /// This field is required.
    pub fn invocation_configuration(mut self, input: crate::types::InvocationConfigurationInput) -> Self {
        self.invocation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to invoke a self-managed memory processing pipeline with.</p>
    pub fn set_invocation_configuration(mut self, input: ::std::option::Option<crate::types::InvocationConfigurationInput>) -> Self {
        self.invocation_configuration = input;
        self
    }
    /// <p>Configuration to invoke a self-managed memory processing pipeline with.</p>
    pub fn get_invocation_configuration(&self) -> &::std::option::Option<crate::types::InvocationConfigurationInput> {
        &self.invocation_configuration
    }
    /// <p>Number of historical messages to include in processing context.</p>
    pub fn historical_context_window_size(mut self, input: i32) -> Self {
        self.historical_context_window_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of historical messages to include in processing context.</p>
    pub fn set_historical_context_window_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.historical_context_window_size = input;
        self
    }
    /// <p>Number of historical messages to include in processing context.</p>
    pub fn get_historical_context_window_size(&self) -> &::std::option::Option<i32> {
        &self.historical_context_window_size
    }
    /// Consumes the builder and constructs a [`SelfManagedConfigurationInput`](crate::types::SelfManagedConfigurationInput).
    pub fn build(self) -> crate::types::SelfManagedConfigurationInput {
        crate::types::SelfManagedConfigurationInput {
            trigger_conditions: self.trigger_conditions,
            invocation_configuration: self.invocation_configuration,
            historical_context_window_size: self.historical_context_window_size.unwrap_or(4),
        }
    }
}
