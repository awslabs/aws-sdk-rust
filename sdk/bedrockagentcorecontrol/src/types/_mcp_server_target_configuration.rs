// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target configuration for the MCP server.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct McpServerTargetConfiguration {
    /// <p>The endpoint for the MCP server target configuration.</p>
    pub endpoint: ::std::string::String,
}
impl McpServerTargetConfiguration {
    /// <p>The endpoint for the MCP server target configuration.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
}
impl McpServerTargetConfiguration {
    /// Creates a new builder-style object to manufacture [`McpServerTargetConfiguration`](crate::types::McpServerTargetConfiguration).
    pub fn builder() -> crate::types::builders::McpServerTargetConfigurationBuilder {
        crate::types::builders::McpServerTargetConfigurationBuilder::default()
    }
}

/// A builder for [`McpServerTargetConfiguration`](crate::types::McpServerTargetConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct McpServerTargetConfigurationBuilder {
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
}
impl McpServerTargetConfigurationBuilder {
    /// <p>The endpoint for the MCP server target configuration.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint for the MCP server target configuration.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint for the MCP server target configuration.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// Consumes the builder and constructs a [`McpServerTargetConfiguration`](crate::types::McpServerTargetConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint`](crate::types::builders::McpServerTargetConfigurationBuilder::endpoint)
    pub fn build(self) -> ::std::result::Result<crate::types::McpServerTargetConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::McpServerTargetConfiguration {
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building McpServerTargetConfiguration",
                )
            })?,
        })
    }
}
