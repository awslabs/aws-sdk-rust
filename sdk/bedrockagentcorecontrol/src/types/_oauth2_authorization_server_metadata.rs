// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the authorization server metadata for an OAuth2 provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Oauth2AuthorizationServerMetadata {
    /// <p>The issuer URL for the OAuth2 authorization server.</p>
    pub issuer: ::std::string::String,
    /// <p>The authorization endpoint URL for the OAuth2 authorization server.</p>
    pub authorization_endpoint: ::std::string::String,
    /// <p>The token endpoint URL for the OAuth2 authorization server.</p>
    pub token_endpoint: ::std::string::String,
    /// <p>The supported response types for the OAuth2 authorization server.</p>
    pub response_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The authentication methods supported by the token endpoint. This specifies how clients can authenticate when requesting tokens from the authorization server.</p>
    pub token_endpoint_auth_methods: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Oauth2AuthorizationServerMetadata {
    /// <p>The issuer URL for the OAuth2 authorization server.</p>
    pub fn issuer(&self) -> &str {
        use std::ops::Deref;
        self.issuer.deref()
    }
    /// <p>The authorization endpoint URL for the OAuth2 authorization server.</p>
    pub fn authorization_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.authorization_endpoint.deref()
    }
    /// <p>The token endpoint URL for the OAuth2 authorization server.</p>
    pub fn token_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.token_endpoint.deref()
    }
    /// <p>The supported response types for the OAuth2 authorization server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.response_types.is_none()`.
    pub fn response_types(&self) -> &[::std::string::String] {
        self.response_types.as_deref().unwrap_or_default()
    }
    /// <p>The authentication methods supported by the token endpoint. This specifies how clients can authenticate when requesting tokens from the authorization server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.token_endpoint_auth_methods.is_none()`.
    pub fn token_endpoint_auth_methods(&self) -> &[::std::string::String] {
        self.token_endpoint_auth_methods.as_deref().unwrap_or_default()
    }
}
impl Oauth2AuthorizationServerMetadata {
    /// Creates a new builder-style object to manufacture [`Oauth2AuthorizationServerMetadata`](crate::types::Oauth2AuthorizationServerMetadata).
    pub fn builder() -> crate::types::builders::Oauth2AuthorizationServerMetadataBuilder {
        crate::types::builders::Oauth2AuthorizationServerMetadataBuilder::default()
    }
}

/// A builder for [`Oauth2AuthorizationServerMetadata`](crate::types::Oauth2AuthorizationServerMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Oauth2AuthorizationServerMetadataBuilder {
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) response_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) token_endpoint_auth_methods: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Oauth2AuthorizationServerMetadataBuilder {
    /// <p>The issuer URL for the OAuth2 authorization server.</p>
    /// This field is required.
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The issuer URL for the OAuth2 authorization server.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The issuer URL for the OAuth2 authorization server.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The authorization endpoint URL for the OAuth2 authorization server.</p>
    /// This field is required.
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization endpoint URL for the OAuth2 authorization server.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The authorization endpoint URL for the OAuth2 authorization server.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// <p>The token endpoint URL for the OAuth2 authorization server.</p>
    /// This field is required.
    pub fn token_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint URL for the OAuth2 authorization server.</p>
    pub fn set_token_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_endpoint = input;
        self
    }
    /// <p>The token endpoint URL for the OAuth2 authorization server.</p>
    pub fn get_token_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_endpoint
    }
    /// Appends an item to `response_types`.
    ///
    /// To override the contents of this collection use [`set_response_types`](Self::set_response_types).
    ///
    /// <p>The supported response types for the OAuth2 authorization server.</p>
    pub fn response_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.response_types.unwrap_or_default();
        v.push(input.into());
        self.response_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported response types for the OAuth2 authorization server.</p>
    pub fn set_response_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.response_types = input;
        self
    }
    /// <p>The supported response types for the OAuth2 authorization server.</p>
    pub fn get_response_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.response_types
    }
    /// Appends an item to `token_endpoint_auth_methods`.
    ///
    /// To override the contents of this collection use [`set_token_endpoint_auth_methods`](Self::set_token_endpoint_auth_methods).
    ///
    /// <p>The authentication methods supported by the token endpoint. This specifies how clients can authenticate when requesting tokens from the authorization server.</p>
    pub fn token_endpoint_auth_methods(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.token_endpoint_auth_methods.unwrap_or_default();
        v.push(input.into());
        self.token_endpoint_auth_methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>The authentication methods supported by the token endpoint. This specifies how clients can authenticate when requesting tokens from the authorization server.</p>
    pub fn set_token_endpoint_auth_methods(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.token_endpoint_auth_methods = input;
        self
    }
    /// <p>The authentication methods supported by the token endpoint. This specifies how clients can authenticate when requesting tokens from the authorization server.</p>
    pub fn get_token_endpoint_auth_methods(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.token_endpoint_auth_methods
    }
    /// Consumes the builder and constructs a [`Oauth2AuthorizationServerMetadata`](crate::types::Oauth2AuthorizationServerMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`issuer`](crate::types::builders::Oauth2AuthorizationServerMetadataBuilder::issuer)
    /// - [`authorization_endpoint`](crate::types::builders::Oauth2AuthorizationServerMetadataBuilder::authorization_endpoint)
    /// - [`token_endpoint`](crate::types::builders::Oauth2AuthorizationServerMetadataBuilder::token_endpoint)
    pub fn build(self) -> ::std::result::Result<crate::types::Oauth2AuthorizationServerMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Oauth2AuthorizationServerMetadata {
            issuer: self.issuer.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "issuer",
                    "issuer was not specified but it is required when building Oauth2AuthorizationServerMetadata",
                )
            })?,
            authorization_endpoint: self.authorization_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_endpoint",
                    "authorization_endpoint was not specified but it is required when building Oauth2AuthorizationServerMetadata",
                )
            })?,
            token_endpoint: self.token_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_endpoint",
                    "token_endpoint was not specified but it is required when building Oauth2AuthorizationServerMetadata",
                )
            })?,
            response_types: self.response_types,
            token_endpoint_auth_methods: self.token_endpoint_auth_methods,
        })
    }
}
