// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration information for a memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StrategyConfiguration {
    /// <p>The type of override for the strategy configuration.</p>
    pub r#type: ::std::option::Option<crate::types::OverrideType>,
    /// <p>The extraction configuration for the memory strategy.</p>
    pub extraction: ::std::option::Option<crate::types::ExtractionConfiguration>,
    /// <p>The consolidation configuration for the memory strategy.</p>
    pub consolidation: ::std::option::Option<crate::types::ConsolidationConfiguration>,
    /// <p>Self-managed configuration settings.</p>
    pub self_managed_configuration: ::std::option::Option<crate::types::SelfManagedConfiguration>,
}
impl StrategyConfiguration {
    /// <p>The type of override for the strategy configuration.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::OverrideType> {
        self.r#type.as_ref()
    }
    /// <p>The extraction configuration for the memory strategy.</p>
    pub fn extraction(&self) -> ::std::option::Option<&crate::types::ExtractionConfiguration> {
        self.extraction.as_ref()
    }
    /// <p>The consolidation configuration for the memory strategy.</p>
    pub fn consolidation(&self) -> ::std::option::Option<&crate::types::ConsolidationConfiguration> {
        self.consolidation.as_ref()
    }
    /// <p>Self-managed configuration settings.</p>
    pub fn self_managed_configuration(&self) -> ::std::option::Option<&crate::types::SelfManagedConfiguration> {
        self.self_managed_configuration.as_ref()
    }
}
impl StrategyConfiguration {
    /// Creates a new builder-style object to manufacture [`StrategyConfiguration`](crate::types::StrategyConfiguration).
    pub fn builder() -> crate::types::builders::StrategyConfigurationBuilder {
        crate::types::builders::StrategyConfigurationBuilder::default()
    }
}

/// A builder for [`StrategyConfiguration`](crate::types::StrategyConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StrategyConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::OverrideType>,
    pub(crate) extraction: ::std::option::Option<crate::types::ExtractionConfiguration>,
    pub(crate) consolidation: ::std::option::Option<crate::types::ConsolidationConfiguration>,
    pub(crate) self_managed_configuration: ::std::option::Option<crate::types::SelfManagedConfiguration>,
}
impl StrategyConfigurationBuilder {
    /// <p>The type of override for the strategy configuration.</p>
    pub fn r#type(mut self, input: crate::types::OverrideType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of override for the strategy configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OverrideType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of override for the strategy configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OverrideType> {
        &self.r#type
    }
    /// <p>The extraction configuration for the memory strategy.</p>
    pub fn extraction(mut self, input: crate::types::ExtractionConfiguration) -> Self {
        self.extraction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The extraction configuration for the memory strategy.</p>
    pub fn set_extraction(mut self, input: ::std::option::Option<crate::types::ExtractionConfiguration>) -> Self {
        self.extraction = input;
        self
    }
    /// <p>The extraction configuration for the memory strategy.</p>
    pub fn get_extraction(&self) -> &::std::option::Option<crate::types::ExtractionConfiguration> {
        &self.extraction
    }
    /// <p>The consolidation configuration for the memory strategy.</p>
    pub fn consolidation(mut self, input: crate::types::ConsolidationConfiguration) -> Self {
        self.consolidation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The consolidation configuration for the memory strategy.</p>
    pub fn set_consolidation(mut self, input: ::std::option::Option<crate::types::ConsolidationConfiguration>) -> Self {
        self.consolidation = input;
        self
    }
    /// <p>The consolidation configuration for the memory strategy.</p>
    pub fn get_consolidation(&self) -> &::std::option::Option<crate::types::ConsolidationConfiguration> {
        &self.consolidation
    }
    /// <p>Self-managed configuration settings.</p>
    pub fn self_managed_configuration(mut self, input: crate::types::SelfManagedConfiguration) -> Self {
        self.self_managed_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Self-managed configuration settings.</p>
    pub fn set_self_managed_configuration(mut self, input: ::std::option::Option<crate::types::SelfManagedConfiguration>) -> Self {
        self.self_managed_configuration = input;
        self
    }
    /// <p>Self-managed configuration settings.</p>
    pub fn get_self_managed_configuration(&self) -> &::std::option::Option<crate::types::SelfManagedConfiguration> {
        &self.self_managed_configuration
    }
    /// Consumes the builder and constructs a [`StrategyConfiguration`](crate::types::StrategyConfiguration).
    pub fn build(self) -> crate::types::StrategyConfiguration {
        crate::types::StrategyConfiguration {
            r#type: self.r#type,
            extraction: self.extraction,
            consolidation: self.consolidation,
            self_managed_configuration: self.self_managed_configuration,
        }
    }
}
