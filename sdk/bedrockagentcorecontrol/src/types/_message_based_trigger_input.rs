// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The trigger configuration based on a message.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageBasedTriggerInput {
    /// <p>The number of messages that trigger memory processing.</p>
    pub message_count: i32,
}
impl MessageBasedTriggerInput {
    /// <p>The number of messages that trigger memory processing.</p>
    pub fn message_count(&self) -> i32 {
        self.message_count
    }
}
impl MessageBasedTriggerInput {
    /// Creates a new builder-style object to manufacture [`MessageBasedTriggerInput`](crate::types::MessageBasedTriggerInput).
    pub fn builder() -> crate::types::builders::MessageBasedTriggerInputBuilder {
        crate::types::builders::MessageBasedTriggerInputBuilder::default()
    }
}

/// A builder for [`MessageBasedTriggerInput`](crate::types::MessageBasedTriggerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MessageBasedTriggerInputBuilder {
    pub(crate) message_count: ::std::option::Option<i32>,
}
impl MessageBasedTriggerInputBuilder {
    /// <p>The number of messages that trigger memory processing.</p>
    pub fn message_count(mut self, input: i32) -> Self {
        self.message_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of messages that trigger memory processing.</p>
    pub fn set_message_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.message_count = input;
        self
    }
    /// <p>The number of messages that trigger memory processing.</p>
    pub fn get_message_count(&self) -> &::std::option::Option<i32> {
        &self.message_count
    }
    /// Consumes the builder and constructs a [`MessageBasedTriggerInput`](crate::types::MessageBasedTriggerInput).
    pub fn build(self) -> crate::types::MessageBasedTriggerInput {
        crate::types::MessageBasedTriggerInput {
            message_count: self.message_count.unwrap_or(6),
        }
    }
}
