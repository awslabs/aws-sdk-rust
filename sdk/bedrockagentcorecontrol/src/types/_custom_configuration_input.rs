// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for custom configuration of a memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum CustomConfigurationInput {
    /// <p>The self managed configuration for a custom memory strategy.</p>
    SelfManagedConfiguration(crate::types::SelfManagedConfigurationInput),
    /// <p>The semantic override configuration for a custom memory strategy.</p>
    SemanticOverride(crate::types::SemanticOverrideConfigurationInput),
    /// <p>The summary override configuration for a custom memory strategy.</p>
    SummaryOverride(crate::types::SummaryOverrideConfigurationInput),
    /// <p>The user preference override configuration for a custom memory strategy.</p>
    UserPreferenceOverride(crate::types::UserPreferenceOverrideConfigurationInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CustomConfigurationInput {
    /// Tries to convert the enum instance into [`SelfManagedConfiguration`](crate::types::CustomConfigurationInput::SelfManagedConfiguration), extracting the inner [`SelfManagedConfigurationInput`](crate::types::SelfManagedConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_self_managed_configuration(&self) -> ::std::result::Result<&crate::types::SelfManagedConfigurationInput, &Self> {
        if let CustomConfigurationInput::SelfManagedConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SelfManagedConfiguration`](crate::types::CustomConfigurationInput::SelfManagedConfiguration).
    pub fn is_self_managed_configuration(&self) -> bool {
        self.as_self_managed_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`SemanticOverride`](crate::types::CustomConfigurationInput::SemanticOverride), extracting the inner [`SemanticOverrideConfigurationInput`](crate::types::SemanticOverrideConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_semantic_override(&self) -> ::std::result::Result<&crate::types::SemanticOverrideConfigurationInput, &Self> {
        if let CustomConfigurationInput::SemanticOverride(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SemanticOverride`](crate::types::CustomConfigurationInput::SemanticOverride).
    pub fn is_semantic_override(&self) -> bool {
        self.as_semantic_override().is_ok()
    }
    /// Tries to convert the enum instance into [`SummaryOverride`](crate::types::CustomConfigurationInput::SummaryOverride), extracting the inner [`SummaryOverrideConfigurationInput`](crate::types::SummaryOverrideConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_summary_override(&self) -> ::std::result::Result<&crate::types::SummaryOverrideConfigurationInput, &Self> {
        if let CustomConfigurationInput::SummaryOverride(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SummaryOverride`](crate::types::CustomConfigurationInput::SummaryOverride).
    pub fn is_summary_override(&self) -> bool {
        self.as_summary_override().is_ok()
    }
    /// Tries to convert the enum instance into [`UserPreferenceOverride`](crate::types::CustomConfigurationInput::UserPreferenceOverride), extracting the inner [`UserPreferenceOverrideConfigurationInput`](crate::types::UserPreferenceOverrideConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_preference_override(&self) -> ::std::result::Result<&crate::types::UserPreferenceOverrideConfigurationInput, &Self> {
        if let CustomConfigurationInput::UserPreferenceOverride(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserPreferenceOverride`](crate::types::CustomConfigurationInput::UserPreferenceOverride).
    pub fn is_user_preference_override(&self) -> bool {
        self.as_user_preference_override().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
