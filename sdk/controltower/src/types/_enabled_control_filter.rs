// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that returns a set of control identifiers, the control status for each control in the set, and the drift status for each control in the set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnabledControlFilter {
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of <code>EnablementStatus</code> items.</p>
    pub statuses: ::std::option::Option<::std::vec::Vec<crate::types::EnablementStatus>>,
    /// <p>A list of <code>DriftStatus</code> items.</p>
    pub drift_statuses: ::std::option::Option<::std::vec::Vec<crate::types::DriftStatus>>,
}
impl EnabledControlFilter {
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_identifiers.is_none()`.
    pub fn control_identifiers(&self) -> &[::std::string::String] {
        self.control_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>A list of <code>EnablementStatus</code> items.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statuses.is_none()`.
    pub fn statuses(&self) -> &[crate::types::EnablementStatus] {
        self.statuses.as_deref().unwrap_or_default()
    }
    /// <p>A list of <code>DriftStatus</code> items.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.drift_statuses.is_none()`.
    pub fn drift_statuses(&self) -> &[crate::types::DriftStatus] {
        self.drift_statuses.as_deref().unwrap_or_default()
    }
}
impl EnabledControlFilter {
    /// Creates a new builder-style object to manufacture [`EnabledControlFilter`](crate::types::EnabledControlFilter).
    pub fn builder() -> crate::types::builders::EnabledControlFilterBuilder {
        crate::types::builders::EnabledControlFilterBuilder::default()
    }
}

/// A builder for [`EnabledControlFilter`](crate::types::EnabledControlFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnabledControlFilterBuilder {
    pub(crate) control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) statuses: ::std::option::Option<::std::vec::Vec<crate::types::EnablementStatus>>,
    pub(crate) drift_statuses: ::std::option::Option<::std::vec::Vec<crate::types::DriftStatus>>,
}
impl EnabledControlFilterBuilder {
    /// Appends an item to `control_identifiers`.
    ///
    /// To override the contents of this collection use [`set_control_identifiers`](Self::set_control_identifiers).
    ///
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn control_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.control_identifiers.unwrap_or_default();
        v.push(input.into());
        self.control_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn set_control_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.control_identifiers = input;
        self
    }
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn get_control_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.control_identifiers
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p>A list of <code>EnablementStatus</code> items.</p>
    pub fn statuses(mut self, input: crate::types::EnablementStatus) -> Self {
        let mut v = self.statuses.unwrap_or_default();
        v.push(input);
        self.statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>EnablementStatus</code> items.</p>
    pub fn set_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnablementStatus>>) -> Self {
        self.statuses = input;
        self
    }
    /// <p>A list of <code>EnablementStatus</code> items.</p>
    pub fn get_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnablementStatus>> {
        &self.statuses
    }
    /// Appends an item to `drift_statuses`.
    ///
    /// To override the contents of this collection use [`set_drift_statuses`](Self::set_drift_statuses).
    ///
    /// <p>A list of <code>DriftStatus</code> items.</p>
    pub fn drift_statuses(mut self, input: crate::types::DriftStatus) -> Self {
        let mut v = self.drift_statuses.unwrap_or_default();
        v.push(input);
        self.drift_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>DriftStatus</code> items.</p>
    pub fn set_drift_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DriftStatus>>) -> Self {
        self.drift_statuses = input;
        self
    }
    /// <p>A list of <code>DriftStatus</code> items.</p>
    pub fn get_drift_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DriftStatus>> {
        &self.drift_statuses
    }
    /// Consumes the builder and constructs a [`EnabledControlFilter`](crate::types::EnabledControlFilter).
    pub fn build(self) -> crate::types::EnabledControlFilter {
        crate::types::EnabledControlFilter {
            control_identifiers: self.control_identifiers,
            statuses: self.statuses,
            drift_statuses: self.drift_statuses,
        }
    }
}
