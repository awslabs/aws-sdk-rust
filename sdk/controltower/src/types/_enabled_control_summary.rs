// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of enabled controls.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnabledControlSummary {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    #[doc(hidden)]
    pub control_identifier: std::option::Option<std::string::String>,
}
impl EnabledControlSummary {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn control_identifier(&self) -> std::option::Option<&str> {
        self.control_identifier.as_deref()
    }
}
impl EnabledControlSummary {
    /// Creates a new builder-style object to manufacture [`EnabledControlSummary`](crate::types::EnabledControlSummary).
    pub fn builder() -> crate::types::builders::EnabledControlSummaryBuilder {
        crate::types::builders::EnabledControlSummaryBuilder::default()
    }
}

/// A builder for [`EnabledControlSummary`](crate::types::EnabledControlSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnabledControlSummaryBuilder {
    pub(crate) control_identifier: std::option::Option<std::string::String>,
}
impl EnabledControlSummaryBuilder {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn control_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.control_identifier = Some(input.into());
        self
    }
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn set_control_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.control_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`EnabledControlSummary`](crate::types::EnabledControlSummary).
    pub fn build(self) -> crate::types::EnabledControlSummary {
        crate::types::EnabledControlSummary {
            control_identifier: self.control_identifier,
        }
    }
}
