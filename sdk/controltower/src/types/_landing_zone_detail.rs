// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the landing zone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LandingZoneDetail {
    /// <p>The landing zone's current deployed version.</p>
    pub version: ::std::string::String,
    /// <p>The landing zone manifest JSON text file that specifies the landing zone configurations.</p>
    pub manifest: ::aws_smithy_types::Document,
    /// <p>The ARN of the landing zone.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The landing zone deployment status. One of <code>ACTIVE</code>, <code>PROCESSING</code>, <code>FAILED</code>.</p>
    pub status: ::std::option::Option<crate::types::LandingZoneStatus>,
    /// <p>The latest available version of the landing zone.</p>
    pub latest_available_version: ::std::option::Option<::std::string::String>,
    /// <p>The drift status of the landing zone.</p>
    pub drift_status: ::std::option::Option<crate::types::LandingZoneDriftStatusSummary>,
}
impl LandingZoneDetail {
    /// <p>The landing zone's current deployed version.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The landing zone manifest JSON text file that specifies the landing zone configurations.</p>
    pub fn manifest(&self) -> &::aws_smithy_types::Document {
        &self.manifest
    }
    /// <p>The ARN of the landing zone.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The landing zone deployment status. One of <code>ACTIVE</code>, <code>PROCESSING</code>, <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LandingZoneStatus> {
        self.status.as_ref()
    }
    /// <p>The latest available version of the landing zone.</p>
    pub fn latest_available_version(&self) -> ::std::option::Option<&str> {
        self.latest_available_version.as_deref()
    }
    /// <p>The drift status of the landing zone.</p>
    pub fn drift_status(&self) -> ::std::option::Option<&crate::types::LandingZoneDriftStatusSummary> {
        self.drift_status.as_ref()
    }
}
impl LandingZoneDetail {
    /// Creates a new builder-style object to manufacture [`LandingZoneDetail`](crate::types::LandingZoneDetail).
    pub fn builder() -> crate::types::builders::LandingZoneDetailBuilder {
        crate::types::builders::LandingZoneDetailBuilder::default()
    }
}

/// A builder for [`LandingZoneDetail`](crate::types::LandingZoneDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LandingZoneDetailBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) manifest: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LandingZoneStatus>,
    pub(crate) latest_available_version: ::std::option::Option<::std::string::String>,
    pub(crate) drift_status: ::std::option::Option<crate::types::LandingZoneDriftStatusSummary>,
}
impl LandingZoneDetailBuilder {
    /// <p>The landing zone's current deployed version.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The landing zone's current deployed version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The landing zone's current deployed version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The landing zone manifest JSON text file that specifies the landing zone configurations.</p>
    /// This field is required.
    pub fn manifest(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.manifest = ::std::option::Option::Some(input);
        self
    }
    /// <p>The landing zone manifest JSON text file that specifies the landing zone configurations.</p>
    pub fn set_manifest(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.manifest = input;
        self
    }
    /// <p>The landing zone manifest JSON text file that specifies the landing zone configurations.</p>
    pub fn get_manifest(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.manifest
    }
    /// <p>The ARN of the landing zone.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the landing zone.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the landing zone.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The landing zone deployment status. One of <code>ACTIVE</code>, <code>PROCESSING</code>, <code>FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::LandingZoneStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The landing zone deployment status. One of <code>ACTIVE</code>, <code>PROCESSING</code>, <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LandingZoneStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The landing zone deployment status. One of <code>ACTIVE</code>, <code>PROCESSING</code>, <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LandingZoneStatus> {
        &self.status
    }
    /// <p>The latest available version of the landing zone.</p>
    pub fn latest_available_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_available_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest available version of the landing zone.</p>
    pub fn set_latest_available_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_available_version = input;
        self
    }
    /// <p>The latest available version of the landing zone.</p>
    pub fn get_latest_available_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_available_version
    }
    /// <p>The drift status of the landing zone.</p>
    pub fn drift_status(mut self, input: crate::types::LandingZoneDriftStatusSummary) -> Self {
        self.drift_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The drift status of the landing zone.</p>
    pub fn set_drift_status(mut self, input: ::std::option::Option<crate::types::LandingZoneDriftStatusSummary>) -> Self {
        self.drift_status = input;
        self
    }
    /// <p>The drift status of the landing zone.</p>
    pub fn get_drift_status(&self) -> &::std::option::Option<crate::types::LandingZoneDriftStatusSummary> {
        &self.drift_status
    }
    /// Consumes the builder and constructs a [`LandingZoneDetail`](crate::types::LandingZoneDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`version`](crate::types::builders::LandingZoneDetailBuilder::version)
    /// - [`manifest`](crate::types::builders::LandingZoneDetailBuilder::manifest)
    pub fn build(self) -> ::std::result::Result<crate::types::LandingZoneDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LandingZoneDetail {
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building LandingZoneDetail",
                )
            })?,
            manifest: self.manifest.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest",
                    "manifest was not specified but it is required when building LandingZoneDetail",
                )
            })?,
            arn: self.arn,
            status: self.status,
            latest_available_version: self.latest_available_version,
            drift_status: self.drift_status,
        })
    }
}
