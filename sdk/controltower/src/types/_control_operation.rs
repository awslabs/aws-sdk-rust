// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An operation performed by the control.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlOperation {
    /// <p>One of <code>ENABLE_CONTROL</code> or <code>DISABLE_CONTROL</code>.</p>
    pub operation_type: ::std::option::Option<crate::types::ControlOperationType>,
    /// <p>The time that the operation began.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the operation finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>One of <code>IN_PROGRESS</code>, <code>SUCEEDED</code>, or <code>FAILED</code>.</p>
    pub status: ::std::option::Option<crate::types::ControlOperationStatus>,
    /// <p>If the operation result is <code>FAILED</code>, this string contains a message explaining why the operation failed.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the specified operation.</p>
    pub operation_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>controlIdentifier</code> of the control for the operation.</p>
    pub control_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The target upon which the control operation is working.</p>
    pub target_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>controlIdentifier</code> of the enabled control.</p>
    pub enabled_control_identifier: ::std::option::Option<::std::string::String>,
}
impl ControlOperation {
    /// <p>One of <code>ENABLE_CONTROL</code> or <code>DISABLE_CONTROL</code>.</p>
    pub fn operation_type(&self) -> ::std::option::Option<&crate::types::ControlOperationType> {
        self.operation_type.as_ref()
    }
    /// <p>The time that the operation began.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the operation finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>One of <code>IN_PROGRESS</code>, <code>SUCEEDED</code>, or <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ControlOperationStatus> {
        self.status.as_ref()
    }
    /// <p>If the operation result is <code>FAILED</code>, this string contains a message explaining why the operation failed.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn operation_identifier(&self) -> ::std::option::Option<&str> {
        self.operation_identifier.as_deref()
    }
    /// <p>The <code>controlIdentifier</code> of the control for the operation.</p>
    pub fn control_identifier(&self) -> ::std::option::Option<&str> {
        self.control_identifier.as_deref()
    }
    /// <p>The target upon which the control operation is working.</p>
    pub fn target_identifier(&self) -> ::std::option::Option<&str> {
        self.target_identifier.as_deref()
    }
    /// <p>The <code>controlIdentifier</code> of the enabled control.</p>
    pub fn enabled_control_identifier(&self) -> ::std::option::Option<&str> {
        self.enabled_control_identifier.as_deref()
    }
}
impl ControlOperation {
    /// Creates a new builder-style object to manufacture [`ControlOperation`](crate::types::ControlOperation).
    pub fn builder() -> crate::types::builders::ControlOperationBuilder {
        crate::types::builders::ControlOperationBuilder::default()
    }
}

/// A builder for [`ControlOperation`](crate::types::ControlOperation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ControlOperationBuilder {
    pub(crate) operation_type: ::std::option::Option<crate::types::ControlOperationType>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ControlOperationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) operation_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) control_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) target_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) enabled_control_identifier: ::std::option::Option<::std::string::String>,
}
impl ControlOperationBuilder {
    /// <p>One of <code>ENABLE_CONTROL</code> or <code>DISABLE_CONTROL</code>.</p>
    pub fn operation_type(mut self, input: crate::types::ControlOperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>One of <code>ENABLE_CONTROL</code> or <code>DISABLE_CONTROL</code>.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::ControlOperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>One of <code>ENABLE_CONTROL</code> or <code>DISABLE_CONTROL</code>.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::ControlOperationType> {
        &self.operation_type
    }
    /// <p>The time that the operation began.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the operation began.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the operation began.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time that the operation finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the operation finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time that the operation finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>One of <code>IN_PROGRESS</code>, <code>SUCEEDED</code>, or <code>FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::ControlOperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>One of <code>IN_PROGRESS</code>, <code>SUCEEDED</code>, or <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ControlOperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>One of <code>IN_PROGRESS</code>, <code>SUCEEDED</code>, or <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ControlOperationStatus> {
        &self.status
    }
    /// <p>If the operation result is <code>FAILED</code>, this string contains a message explaining why the operation failed.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the operation result is <code>FAILED</code>, this string contains a message explaining why the operation failed.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>If the operation result is <code>FAILED</code>, this string contains a message explaining why the operation failed.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn operation_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn set_operation_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_identifier = input;
        self
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn get_operation_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_identifier
    }
    /// <p>The <code>controlIdentifier</code> of the control for the operation.</p>
    pub fn control_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>controlIdentifier</code> of the control for the operation.</p>
    pub fn set_control_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_identifier = input;
        self
    }
    /// <p>The <code>controlIdentifier</code> of the control for the operation.</p>
    pub fn get_control_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_identifier
    }
    /// <p>The target upon which the control operation is working.</p>
    pub fn target_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target upon which the control operation is working.</p>
    pub fn set_target_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_identifier = input;
        self
    }
    /// <p>The target upon which the control operation is working.</p>
    pub fn get_target_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_identifier
    }
    /// <p>The <code>controlIdentifier</code> of the enabled control.</p>
    pub fn enabled_control_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.enabled_control_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>controlIdentifier</code> of the enabled control.</p>
    pub fn set_enabled_control_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.enabled_control_identifier = input;
        self
    }
    /// <p>The <code>controlIdentifier</code> of the enabled control.</p>
    pub fn get_enabled_control_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.enabled_control_identifier
    }
    /// Consumes the builder and constructs a [`ControlOperation`](crate::types::ControlOperation).
    pub fn build(self) -> crate::types::ControlOperation {
        crate::types::ControlOperation {
            operation_type: self.operation_type,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            status_message: self.status_message,
            operation_identifier: self.operation_identifier,
            control_identifier: self.control_identifier,
            target_identifier: self.target_identifier,
            enabled_control_identifier: self.enabled_control_identifier,
        }
    }
}
