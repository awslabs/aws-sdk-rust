// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter object that lets you call <code>ListCOntrolOperations</code> with a specific filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlOperationFilter {
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The set of <code>targetIdentifier</code> objects returned by the filter.</p>
    pub target_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The set <code>controlIdentifier</code> of enabled controls selected by the filter.</p>
    pub enabled_control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Lists the status of control operations.</p>
    pub statuses: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationStatus>>,
    /// <p>The set of <code>ControlOperation</code> objects returned by the filter.</p>
    pub control_operation_types: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationType>>,
}
impl ControlOperationFilter {
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_identifiers.is_none()`.
    pub fn control_identifiers(&self) -> &[::std::string::String] {
        self.control_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The set of <code>targetIdentifier</code> objects returned by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_identifiers.is_none()`.
    pub fn target_identifiers(&self) -> &[::std::string::String] {
        self.target_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The set <code>controlIdentifier</code> of enabled controls selected by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_control_identifiers.is_none()`.
    pub fn enabled_control_identifiers(&self) -> &[::std::string::String] {
        self.enabled_control_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>Lists the status of control operations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statuses.is_none()`.
    pub fn statuses(&self) -> &[crate::types::ControlOperationStatus] {
        self.statuses.as_deref().unwrap_or_default()
    }
    /// <p>The set of <code>ControlOperation</code> objects returned by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_operation_types.is_none()`.
    pub fn control_operation_types(&self) -> &[crate::types::ControlOperationType] {
        self.control_operation_types.as_deref().unwrap_or_default()
    }
}
impl ControlOperationFilter {
    /// Creates a new builder-style object to manufacture [`ControlOperationFilter`](crate::types::ControlOperationFilter).
    pub fn builder() -> crate::types::builders::ControlOperationFilterBuilder {
        crate::types::builders::ControlOperationFilterBuilder::default()
    }
}

/// A builder for [`ControlOperationFilter`](crate::types::ControlOperationFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ControlOperationFilterBuilder {
    pub(crate) control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) target_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enabled_control_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) statuses: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationStatus>>,
    pub(crate) control_operation_types: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationType>>,
}
impl ControlOperationFilterBuilder {
    /// Appends an item to `control_identifiers`.
    ///
    /// To override the contents of this collection use [`set_control_identifiers`](Self::set_control_identifiers).
    ///
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn control_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.control_identifiers.unwrap_or_default();
        v.push(input.into());
        self.control_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn set_control_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.control_identifiers = input;
        self
    }
    /// <p>The set of <code>controlIdentifier</code> returned by the filter.</p>
    pub fn get_control_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.control_identifiers
    }
    /// Appends an item to `target_identifiers`.
    ///
    /// To override the contents of this collection use [`set_target_identifiers`](Self::set_target_identifiers).
    ///
    /// <p>The set of <code>targetIdentifier</code> objects returned by the filter.</p>
    pub fn target_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target_identifiers.unwrap_or_default();
        v.push(input.into());
        self.target_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>targetIdentifier</code> objects returned by the filter.</p>
    pub fn set_target_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.target_identifiers = input;
        self
    }
    /// <p>The set of <code>targetIdentifier</code> objects returned by the filter.</p>
    pub fn get_target_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.target_identifiers
    }
    /// Appends an item to `enabled_control_identifiers`.
    ///
    /// To override the contents of this collection use [`set_enabled_control_identifiers`](Self::set_enabled_control_identifiers).
    ///
    /// <p>The set <code>controlIdentifier</code> of enabled controls selected by the filter.</p>
    pub fn enabled_control_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enabled_control_identifiers.unwrap_or_default();
        v.push(input.into());
        self.enabled_control_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set <code>controlIdentifier</code> of enabled controls selected by the filter.</p>
    pub fn set_enabled_control_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enabled_control_identifiers = input;
        self
    }
    /// <p>The set <code>controlIdentifier</code> of enabled controls selected by the filter.</p>
    pub fn get_enabled_control_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enabled_control_identifiers
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p>Lists the status of control operations.</p>
    pub fn statuses(mut self, input: crate::types::ControlOperationStatus) -> Self {
        let mut v = self.statuses.unwrap_or_default();
        v.push(input);
        self.statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists the status of control operations.</p>
    pub fn set_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationStatus>>) -> Self {
        self.statuses = input;
        self
    }
    /// <p>Lists the status of control operations.</p>
    pub fn get_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ControlOperationStatus>> {
        &self.statuses
    }
    /// Appends an item to `control_operation_types`.
    ///
    /// To override the contents of this collection use [`set_control_operation_types`](Self::set_control_operation_types).
    ///
    /// <p>The set of <code>ControlOperation</code> objects returned by the filter.</p>
    pub fn control_operation_types(mut self, input: crate::types::ControlOperationType) -> Self {
        let mut v = self.control_operation_types.unwrap_or_default();
        v.push(input);
        self.control_operation_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>ControlOperation</code> objects returned by the filter.</p>
    pub fn set_control_operation_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ControlOperationType>>) -> Self {
        self.control_operation_types = input;
        self
    }
    /// <p>The set of <code>ControlOperation</code> objects returned by the filter.</p>
    pub fn get_control_operation_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ControlOperationType>> {
        &self.control_operation_types
    }
    /// Consumes the builder and constructs a [`ControlOperationFilter`](crate::types::ControlOperationFilter).
    pub fn build(self) -> crate::types::ControlOperationFilter {
        crate::types::ControlOperationFilter {
            control_identifiers: self.control_identifiers,
            target_identifiers: self.target_identifiers,
            enabled_control_identifiers: self.enabled_control_identifiers,
            statuses: self.statuses,
            control_operation_types: self.control_operation_types,
        }
    }
}
