// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting the resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred during processing of a request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request references a resource that does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause a service quota to be exceeded. The limit is 10 concurrent operations.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input does not satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_landing_zone::CreateLandingZoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_landing_zone::CreateLandingZoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_landing_zone::CreateLandingZoneError> for Error {
    fn from(err: crate::operation::create_landing_zone::CreateLandingZoneError) -> Self {
        match err {
            crate::operation::create_landing_zone::CreateLandingZoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_landing_zone::CreateLandingZoneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_landing_zone::CreateLandingZoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_landing_zone::CreateLandingZoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_landing_zone::CreateLandingZoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_landing_zone::CreateLandingZoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_landing_zone::DeleteLandingZoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_landing_zone::DeleteLandingZoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_landing_zone::DeleteLandingZoneError> for Error {
    fn from(err: crate::operation::delete_landing_zone::DeleteLandingZoneError) -> Self {
        match err {
            crate::operation::delete_landing_zone::DeleteLandingZoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_landing_zone::DeleteLandingZoneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_landing_zone::DeleteLandingZoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_landing_zone::DeleteLandingZoneError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_landing_zone::DeleteLandingZoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_landing_zone::DeleteLandingZoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_landing_zone::DeleteLandingZoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable_baseline::DisableBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable_baseline::DisableBaselineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disable_baseline::DisableBaselineError> for Error {
    fn from(err: crate::operation::disable_baseline::DisableBaselineError) -> Self {
        match err {
            crate::operation::disable_baseline::DisableBaselineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disable_baseline::DisableBaselineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disable_baseline::DisableBaselineError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disable_baseline::DisableBaselineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disable_baseline::DisableBaselineError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::disable_baseline::DisableBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disable_baseline::DisableBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disable_baseline::DisableBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable_control::DisableControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable_control::DisableControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disable_control::DisableControlError> for Error {
    fn from(err: crate::operation::disable_control::DisableControlError) -> Self {
        match err {
            crate::operation::disable_control::DisableControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disable_control::DisableControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disable_control::DisableControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disable_control::DisableControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disable_control::DisableControlError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::disable_control::DisableControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disable_control::DisableControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disable_control::DisableControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable_baseline::EnableBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable_baseline::EnableBaselineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::enable_baseline::EnableBaselineError> for Error {
    fn from(err: crate::operation::enable_baseline::EnableBaselineError) -> Self {
        match err {
            crate::operation::enable_baseline::EnableBaselineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::enable_baseline::EnableBaselineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::enable_baseline::EnableBaselineError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::enable_baseline::EnableBaselineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::enable_baseline::EnableBaselineError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::enable_baseline::EnableBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::enable_baseline::EnableBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::enable_baseline::EnableBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable_control::EnableControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable_control::EnableControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::enable_control::EnableControlError> for Error {
    fn from(err: crate::operation::enable_control::EnableControlError) -> Self {
        match err {
            crate::operation::enable_control::EnableControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::enable_control::EnableControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::enable_control::EnableControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::enable_control::EnableControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::enable_control::EnableControlError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::enable_control::EnableControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::enable_control::EnableControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::enable_control::EnableControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_baseline::GetBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_baseline::GetBaselineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_baseline::GetBaselineError> for Error {
    fn from(err: crate::operation::get_baseline::GetBaselineError) -> Self {
        match err {
            crate::operation::get_baseline::GetBaselineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_baseline::GetBaselineError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_baseline::GetBaselineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_baseline::GetBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_baseline::GetBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_baseline::GetBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_baseline_operation::GetBaselineOperationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_baseline_operation::GetBaselineOperationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_baseline_operation::GetBaselineOperationError> for Error {
    fn from(err: crate::operation::get_baseline_operation::GetBaselineOperationError) -> Self {
        match err {
            crate::operation::get_baseline_operation::GetBaselineOperationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_baseline_operation::GetBaselineOperationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_baseline_operation::GetBaselineOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_baseline_operation::GetBaselineOperationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_baseline_operation::GetBaselineOperationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_baseline_operation::GetBaselineOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_control_operation::GetControlOperationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_control_operation::GetControlOperationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_control_operation::GetControlOperationError> for Error {
    fn from(err: crate::operation::get_control_operation::GetControlOperationError) -> Self {
        match err {
            crate::operation::get_control_operation::GetControlOperationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_control_operation::GetControlOperationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_control_operation::GetControlOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_control_operation::GetControlOperationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_control_operation::GetControlOperationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_control_operation::GetControlOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_enabled_baseline::GetEnabledBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_enabled_baseline::GetEnabledBaselineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_enabled_baseline::GetEnabledBaselineError> for Error {
    fn from(err: crate::operation::get_enabled_baseline::GetEnabledBaselineError) -> Self {
        match err {
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_enabled_baseline::GetEnabledBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_enabled_control::GetEnabledControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_enabled_control::GetEnabledControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_enabled_control::GetEnabledControlError> for Error {
    fn from(err: crate::operation::get_enabled_control::GetEnabledControlError) -> Self {
        match err {
            crate::operation::get_enabled_control::GetEnabledControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_enabled_control::GetEnabledControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_enabled_control::GetEnabledControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_enabled_control::GetEnabledControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_enabled_control::GetEnabledControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_enabled_control::GetEnabledControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_landing_zone::GetLandingZoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_landing_zone::GetLandingZoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_landing_zone::GetLandingZoneError> for Error {
    fn from(err: crate::operation::get_landing_zone::GetLandingZoneError) -> Self {
        match err {
            crate::operation::get_landing_zone::GetLandingZoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_landing_zone::GetLandingZoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_landing_zone::GetLandingZoneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_landing_zone::GetLandingZoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_landing_zone::GetLandingZoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_landing_zone::GetLandingZoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_landing_zone_operation::GetLandingZoneOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_landing_zone_operation::GetLandingZoneOperationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_landing_zone_operation::GetLandingZoneOperationError> for Error {
    fn from(err: crate::operation::get_landing_zone_operation::GetLandingZoneOperationError) -> Self {
        match err {
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_landing_zone_operation::GetLandingZoneOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_baselines::ListBaselinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_baselines::ListBaselinesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_baselines::ListBaselinesError> for Error {
    fn from(err: crate::operation::list_baselines::ListBaselinesError) -> Self {
        match err {
            crate::operation::list_baselines::ListBaselinesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_baselines::ListBaselinesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_baselines::ListBaselinesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_baselines::ListBaselinesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_baselines::ListBaselinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_control_operations::ListControlOperationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_control_operations::ListControlOperationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_control_operations::ListControlOperationsError> for Error {
    fn from(err: crate::operation::list_control_operations::ListControlOperationsError) -> Self {
        match err {
            crate::operation::list_control_operations::ListControlOperationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_control_operations::ListControlOperationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_control_operations::ListControlOperationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_control_operations::ListControlOperationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_control_operations::ListControlOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_enabled_baselines::ListEnabledBaselinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_enabled_baselines::ListEnabledBaselinesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_enabled_baselines::ListEnabledBaselinesError> for Error {
    fn from(err: crate::operation::list_enabled_baselines::ListEnabledBaselinesError) -> Self {
        match err {
            crate::operation::list_enabled_baselines::ListEnabledBaselinesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_enabled_baselines::ListEnabledBaselinesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_enabled_baselines::ListEnabledBaselinesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_enabled_baselines::ListEnabledBaselinesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_enabled_baselines::ListEnabledBaselinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_enabled_controls::ListEnabledControlsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_enabled_controls::ListEnabledControlsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_enabled_controls::ListEnabledControlsError> for Error {
    fn from(err: crate::operation::list_enabled_controls::ListEnabledControlsError) -> Self {
        match err {
            crate::operation::list_enabled_controls::ListEnabledControlsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_enabled_controls::ListEnabledControlsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_enabled_controls::ListEnabledControlsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_enabled_controls::ListEnabledControlsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_enabled_controls::ListEnabledControlsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_enabled_controls::ListEnabledControlsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_landing_zones::ListLandingZonesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_landing_zones::ListLandingZonesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_landing_zones::ListLandingZonesError> for Error {
    fn from(err: crate::operation::list_landing_zones::ListLandingZonesError) -> Self {
        match err {
            crate::operation::list_landing_zones::ListLandingZonesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_landing_zones::ListLandingZonesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_landing_zones::ListLandingZonesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_landing_zones::ListLandingZonesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_landing_zones::ListLandingZonesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_enabled_baseline::ResetEnabledBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_enabled_baseline::ResetEnabledBaselineError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_enabled_baseline::ResetEnabledBaselineError> for Error {
    fn from(err: crate::operation::reset_enabled_baseline::ResetEnabledBaselineError) -> Self {
        match err {
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reset_enabled_baseline::ResetEnabledBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_landing_zone::ResetLandingZoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_landing_zone::ResetLandingZoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_landing_zone::ResetLandingZoneError> for Error {
    fn from(err: crate::operation::reset_landing_zone::ResetLandingZoneError) -> Self {
        match err {
            crate::operation::reset_landing_zone::ResetLandingZoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reset_landing_zone::ResetLandingZoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_enabled_baseline::UpdateEnabledBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_enabled_baseline::UpdateEnabledBaselineError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_enabled_baseline::UpdateEnabledBaselineError> for Error {
    fn from(err: crate::operation::update_enabled_baseline::UpdateEnabledBaselineError) -> Self {
        match err {
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_enabled_baseline::UpdateEnabledBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_enabled_control::UpdateEnabledControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_enabled_control::UpdateEnabledControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_enabled_control::UpdateEnabledControlError> for Error {
    fn from(err: crate::operation::update_enabled_control::UpdateEnabledControlError) -> Self {
        match err {
            crate::operation::update_enabled_control::UpdateEnabledControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_enabled_control::UpdateEnabledControlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_enabled_control::UpdateEnabledControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_enabled_control::UpdateEnabledControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_enabled_control::UpdateEnabledControlError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_enabled_control::UpdateEnabledControlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_enabled_control::UpdateEnabledControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_enabled_control::UpdateEnabledControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_landing_zone::UpdateLandingZoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_landing_zone::UpdateLandingZoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_landing_zone::UpdateLandingZoneError> for Error {
    fn from(err: crate::operation::update_landing_zone::UpdateLandingZoneError) -> Self {
        match err {
            crate::operation::update_landing_zone::UpdateLandingZoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_landing_zone::UpdateLandingZoneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_landing_zone::UpdateLandingZoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_landing_zone::UpdateLandingZoneError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_landing_zone::UpdateLandingZoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_landing_zone::UpdateLandingZoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_landing_zone::UpdateLandingZoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
