// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLandingZoneInput {
    /// <p>The landing zone version, for example, 3.0.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The manifest JSON file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch">Launch your landing zone</a>.</p>
    pub manifest: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>Tags to be applied to the landing zone.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLandingZoneInput {
    /// <p>The landing zone version, for example, 3.0.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The manifest JSON file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch">Launch your landing zone</a>.</p>
    pub fn manifest(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.manifest.as_ref()
    }
    /// <p>Tags to be applied to the landing zone.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateLandingZoneInput {
    /// Creates a new builder-style object to manufacture [`CreateLandingZoneInput`](crate::operation::create_landing_zone::CreateLandingZoneInput).
    pub fn builder() -> crate::operation::create_landing_zone::builders::CreateLandingZoneInputBuilder {
        crate::operation::create_landing_zone::builders::CreateLandingZoneInputBuilder::default()
    }
}

/// A builder for [`CreateLandingZoneInput`](crate::operation::create_landing_zone::CreateLandingZoneInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateLandingZoneInputBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) manifest: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLandingZoneInputBuilder {
    /// <p>The landing zone version, for example, 3.0.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The landing zone version, for example, 3.0.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The landing zone version, for example, 3.0.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The manifest JSON file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch">Launch your landing zone</a>.</p>
    /// This field is required.
    pub fn manifest(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.manifest = ::std::option::Option::Some(input);
        self
    }
    /// <p>The manifest JSON file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch">Launch your landing zone</a>.</p>
    pub fn set_manifest(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.manifest = input;
        self
    }
    /// <p>The manifest JSON file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch">Launch your landing zone</a>.</p>
    pub fn get_manifest(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.manifest
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be applied to the landing zone.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags to be applied to the landing zone.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags to be applied to the landing zone.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateLandingZoneInput`](crate::operation::create_landing_zone::CreateLandingZoneInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_landing_zone::CreateLandingZoneInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_landing_zone::CreateLandingZoneInput {
            version: self.version,
            manifest: self.manifest,
            tags: self.tags,
        })
    }
}
