// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableControlInput {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    #[doc(hidden)]
    pub control_identifier: std::option::Option<std::string::String>,
    /// <p>The ARN of the organizational unit.</p>
    #[doc(hidden)]
    pub target_identifier: std::option::Option<std::string::String>,
}
impl DisableControlInput {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn control_identifier(&self) -> std::option::Option<&str> {
        self.control_identifier.as_deref()
    }
    /// <p>The ARN of the organizational unit.</p>
    pub fn target_identifier(&self) -> std::option::Option<&str> {
        self.target_identifier.as_deref()
    }
}
impl DisableControlInput {
    /// Creates a new builder-style object to manufacture [`DisableControlInput`](crate::operation::disable_control::DisableControlInput).
    pub fn builder() -> crate::operation::disable_control::builders::DisableControlInputBuilder {
        crate::operation::disable_control::builders::DisableControlInputBuilder::default()
    }
}

/// A builder for [`DisableControlInput`](crate::operation::disable_control::DisableControlInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisableControlInputBuilder {
    pub(crate) control_identifier: std::option::Option<std::string::String>,
    pub(crate) target_identifier: std::option::Option<std::string::String>,
}
impl DisableControlInputBuilder {
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn control_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.control_identifier = Some(input.into());
        self
    }
    /// <p>The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.</p>
    pub fn set_control_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.control_identifier = input;
        self
    }
    /// <p>The ARN of the organizational unit.</p>
    pub fn target_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_identifier = Some(input.into());
        self
    }
    /// <p>The ARN of the organizational unit.</p>
    pub fn set_target_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`DisableControlInput`](crate::operation::disable_control::DisableControlInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disable_control::DisableControlInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::disable_control::DisableControlInput {
            control_identifier: self.control_identifier,
            target_identifier: self.target_identifier,
        })
    }
}
