// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_landing_zone::_update_landing_zone_output::UpdateLandingZoneOutputBuilder;

pub use crate::operation::update_landing_zone::_update_landing_zone_input::UpdateLandingZoneInputBuilder;

impl crate::operation::update_landing_zone::builders::UpdateLandingZoneInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_landing_zone::UpdateLandingZoneOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_landing_zone::UpdateLandingZoneError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_landing_zone();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateLandingZone`.
///
/// <p>This API call updates the landing zone. It starts an asynchronous operation that updates the landing zone based on the new landing zone version, or on the changed parameters specified in the updated manifest file.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateLandingZoneFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_landing_zone::builders::UpdateLandingZoneInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_landing_zone::UpdateLandingZoneOutput,
        crate::operation::update_landing_zone::UpdateLandingZoneError,
    > for UpdateLandingZoneFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_landing_zone::UpdateLandingZoneOutput,
            crate::operation::update_landing_zone::UpdateLandingZoneError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateLandingZoneFluentBuilder {
    /// Creates a new `UpdateLandingZone`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateLandingZone as a reference.
    pub fn as_input(&self) -> &crate::operation::update_landing_zone::builders::UpdateLandingZoneInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_landing_zone::UpdateLandingZoneOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_landing_zone::UpdateLandingZoneError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_landing_zone::UpdateLandingZone::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_landing_zone::UpdateLandingZone::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_landing_zone::UpdateLandingZoneOutput,
        crate::operation::update_landing_zone::UpdateLandingZoneError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The landing zone version, for example, 3.2.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.version(input.into());
        self
    }
    /// <p>The landing zone version, for example, 3.2.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_version(input);
        self
    }
    /// <p>The landing zone version, for example, 3.2.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_version()
    }
    /// <p>The <code>manifest.yaml</code> file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/the-manifest-file">The manifest file</a>.</p>
    pub fn manifest(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.inner = self.inner.manifest(input);
        self
    }
    /// <p>The <code>manifest.yaml</code> file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/the-manifest-file">The manifest file</a>.</p>
    pub fn set_manifest(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.inner = self.inner.set_manifest(input);
        self
    }
    /// <p>The <code>manifest.yaml</code> file is a text file that describes your Amazon Web Services resources. For examples, review <a href="https://docs.aws.amazon.com/controltower/latest/userguide/the-manifest-file">The manifest file</a>.</p>
    pub fn get_manifest(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        self.inner.get_manifest()
    }
    /// <p>The unique identifier of the landing zone.</p>
    pub fn landing_zone_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.landing_zone_identifier(input.into());
        self
    }
    /// <p>The unique identifier of the landing zone.</p>
    pub fn set_landing_zone_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_landing_zone_identifier(input);
        self
    }
    /// <p>The unique identifier of the landing zone.</p>
    pub fn get_landing_zone_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_landing_zone_identifier()
    }
}
