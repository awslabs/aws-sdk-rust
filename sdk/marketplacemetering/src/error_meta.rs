// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    CustomerNotEntitledException(crate::error::CustomerNotEntitledException),
    DisabledApiException(crate::error::DisabledApiException),
    DuplicateRequestException(crate::error::DuplicateRequestException),
    ExpiredTokenException(crate::error::ExpiredTokenException),
    InternalServiceErrorException(crate::error::InternalServiceErrorException),
    InvalidCustomerIdentifierException(crate::error::InvalidCustomerIdentifierException),
    InvalidEndpointRegionException(crate::error::InvalidEndpointRegionException),
    InvalidProductCodeException(crate::error::InvalidProductCodeException),
    InvalidPublicKeyVersionException(crate::error::InvalidPublicKeyVersionException),
    InvalidRegionException(crate::error::InvalidRegionException),
    InvalidTagException(crate::error::InvalidTagException),
    InvalidTokenException(crate::error::InvalidTokenException),
    InvalidUsageAllocationsException(crate::error::InvalidUsageAllocationsException),
    InvalidUsageDimensionException(crate::error::InvalidUsageDimensionException),
    PlatformNotSupportedException(crate::error::PlatformNotSupportedException),
    ThrottlingException(crate::error::ThrottlingException),
    TimestampOutOfBoundsException(crate::error::TimestampOutOfBoundsException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CustomerNotEntitledException(inner) => inner.fmt(f),
            Error::DisabledApiException(inner) => inner.fmt(f),
            Error::DuplicateRequestException(inner) => inner.fmt(f),
            Error::ExpiredTokenException(inner) => inner.fmt(f),
            Error::InternalServiceErrorException(inner) => inner.fmt(f),
            Error::InvalidCustomerIdentifierException(inner) => inner.fmt(f),
            Error::InvalidEndpointRegionException(inner) => inner.fmt(f),
            Error::InvalidProductCodeException(inner) => inner.fmt(f),
            Error::InvalidPublicKeyVersionException(inner) => inner.fmt(f),
            Error::InvalidRegionException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::InvalidTokenException(inner) => inner.fmt(f),
            Error::InvalidUsageAllocationsException(inner) => inner.fmt(f),
            Error::InvalidUsageDimensionException(inner) => inner.fmt(f),
            Error::PlatformNotSupportedException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TimestampOutOfBoundsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchMeterUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchMeterUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchMeterUsageErrorKind::DisabledApiException(inner) => {
                    Error::DisabledApiException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::InternalServiceErrorException(inner) => {
                    Error::InternalServiceErrorException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::InvalidCustomerIdentifierException(
                    inner,
                ) => Error::InvalidCustomerIdentifierException(inner),
                crate::error::BatchMeterUsageErrorKind::InvalidProductCodeException(inner) => {
                    Error::InvalidProductCodeException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::InvalidTagException(inner) => {
                    Error::InvalidTagException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::InvalidUsageAllocationsException(inner) => {
                    Error::InvalidUsageAllocationsException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::InvalidUsageDimensionException(inner) => {
                    Error::InvalidUsageDimensionException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::ThrottlingException(inner) => {
                    Error::ThrottlingException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::TimestampOutOfBoundsException(inner) => {
                    Error::TimestampOutOfBoundsException(inner)
                }
                crate::error::BatchMeterUsageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::MeterUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::MeterUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::MeterUsageErrorKind::CustomerNotEntitledException(inner) => {
                    Error::CustomerNotEntitledException(inner)
                }
                crate::error::MeterUsageErrorKind::DuplicateRequestException(inner) => {
                    Error::DuplicateRequestException(inner)
                }
                crate::error::MeterUsageErrorKind::InternalServiceErrorException(inner) => {
                    Error::InternalServiceErrorException(inner)
                }
                crate::error::MeterUsageErrorKind::InvalidEndpointRegionException(inner) => {
                    Error::InvalidEndpointRegionException(inner)
                }
                crate::error::MeterUsageErrorKind::InvalidProductCodeException(inner) => {
                    Error::InvalidProductCodeException(inner)
                }
                crate::error::MeterUsageErrorKind::InvalidTagException(inner) => {
                    Error::InvalidTagException(inner)
                }
                crate::error::MeterUsageErrorKind::InvalidUsageAllocationsException(inner) => {
                    Error::InvalidUsageAllocationsException(inner)
                }
                crate::error::MeterUsageErrorKind::InvalidUsageDimensionException(inner) => {
                    Error::InvalidUsageDimensionException(inner)
                }
                crate::error::MeterUsageErrorKind::ThrottlingException(inner) => {
                    Error::ThrottlingException(inner)
                }
                crate::error::MeterUsageErrorKind::TimestampOutOfBoundsException(inner) => {
                    Error::TimestampOutOfBoundsException(inner)
                }
                crate::error::MeterUsageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterUsageErrorKind::CustomerNotEntitledException(inner) => {
                    Error::CustomerNotEntitledException(inner)
                }
                crate::error::RegisterUsageErrorKind::DisabledApiException(inner) => {
                    Error::DisabledApiException(inner)
                }
                crate::error::RegisterUsageErrorKind::InternalServiceErrorException(inner) => {
                    Error::InternalServiceErrorException(inner)
                }
                crate::error::RegisterUsageErrorKind::InvalidProductCodeException(inner) => {
                    Error::InvalidProductCodeException(inner)
                }
                crate::error::RegisterUsageErrorKind::InvalidPublicKeyVersionException(inner) => {
                    Error::InvalidPublicKeyVersionException(inner)
                }
                crate::error::RegisterUsageErrorKind::InvalidRegionException(inner) => {
                    Error::InvalidRegionException(inner)
                }
                crate::error::RegisterUsageErrorKind::PlatformNotSupportedException(inner) => {
                    Error::PlatformNotSupportedException(inner)
                }
                crate::error::RegisterUsageErrorKind::ThrottlingException(inner) => {
                    Error::ThrottlingException(inner)
                }
                crate::error::RegisterUsageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResolveCustomerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResolveCustomerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResolveCustomerErrorKind::DisabledApiException(inner) => {
                    Error::DisabledApiException(inner)
                }
                crate::error::ResolveCustomerErrorKind::ExpiredTokenException(inner) => {
                    Error::ExpiredTokenException(inner)
                }
                crate::error::ResolveCustomerErrorKind::InternalServiceErrorException(inner) => {
                    Error::InternalServiceErrorException(inner)
                }
                crate::error::ResolveCustomerErrorKind::InvalidTokenException(inner) => {
                    Error::InvalidTokenException(inner)
                }
                crate::error::ResolveCustomerErrorKind::ThrottlingException(inner) => {
                    Error::ThrottlingException(inner)
                }
                crate::error::ResolveCustomerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
