// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`MeterUsage`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`product_code(impl Into<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::product_code) / [`set_product_code(Option<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_product_code):<br>required: **true**<br><p>Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.</p><br>
    ///   - [`timestamp(DateTime)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::timestamp) / [`set_timestamp(Option<DateTime>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_timestamp):<br>required: **true**<br><p>Timestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p><br>
    ///   - [`usage_dimension(impl Into<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::usage_dimension) / [`set_usage_dimension(Option<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_usage_dimension):<br>required: **true**<br><p>It will be one of the fcp dimension name provided during the publishing of the product.</p><br>
    ///   - [`usage_quantity(i32)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::usage_quantity) / [`set_usage_quantity(Option<i32>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_usage_quantity):<br>required: **false**<br><p>Consumption value for the hour. Defaults to <code>0</code> if not specified.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns <code>DryRunOperation</code>; otherwise, it returns <code>UnauthorizedException</code>. Defaults to <code>false</code> if not specified.</p><br>
    ///   - [`usage_allocations(UsageAllocation)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::usage_allocations) / [`set_usage_allocations(Option<Vec::<UsageAllocation>>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_usage_allocations):<br>required: **false**<br><p>The set of <code>UsageAllocations</code> to submit.</p> <p>The sum of all <code>UsageAllocation</code> quantities must equal the <code>UsageQuantity</code> of the <code>MeterUsage</code> request, and each <code>UsageAllocation</code> must have a unique set of tags (include no tags).</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::meter_usage::builders::MeterUsageFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p> <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p> <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotencyConflictException</code> error.</p><br>
    /// - On success, responds with [`MeterUsageOutput`](crate::operation::meter_usage::MeterUsageOutput) with field(s):
    ///   - [`metering_record_id(Option<String>)`](crate::operation::meter_usage::MeterUsageOutput::metering_record_id): <p>Metering record id.</p>
    /// - On failure, responds with [`SdkError<MeterUsageError>`](crate::operation::meter_usage::MeterUsageError)
    pub fn meter_usage(&self) -> crate::operation::meter_usage::builders::MeterUsageFluentBuilder {
        crate::operation::meter_usage::builders::MeterUsageFluentBuilder::new(self.handle.clone())
    }
}
