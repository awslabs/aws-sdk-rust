// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ResolveCustomer`](crate::operation::resolve_customer::builders::ResolveCustomerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`registration_token(impl Into<String>)`](crate::operation::resolve_customer::builders::ResolveCustomerFluentBuilder::registration_token) / [`set_registration_token(Option<String>)`](crate::operation::resolve_customer::builders::ResolveCustomerFluentBuilder::set_registration_token):<br>required: **true**<br><p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p><br>
    /// - On success, responds with [`ResolveCustomerOutput`](crate::operation::resolve_customer::ResolveCustomerOutput) with field(s):
    ///   - [`customer_identifier(Option<String>)`](crate::operation::resolve_customer::ResolveCustomerOutput::customer_identifier): <p>The <code>CustomerIdentifier</code> is used to identify an individual customer in your application. Calls to <code>BatchMeterUsage</code> require <code>CustomerIdentifiers</code> for each <code>UsageRecord</code>.</p>
    ///   - [`product_code(Option<String>)`](crate::operation::resolve_customer::ResolveCustomerOutput::product_code): <p>The product code is returned to confirm that the buyer is registering for your product. Subsequent <code>BatchMeterUsage</code> calls should be made using this product code.</p>
    ///   - [`customer_aws_account_id(Option<String>)`](crate::operation::resolve_customer::ResolveCustomerOutput::customer_aws_account_id): <p>The <code>CustomerAWSAccountId</code> provides the AWS account ID associated with the <code>CustomerIdentifier</code> for the individual customer.</p>
    /// - On failure, responds with [`SdkError<ResolveCustomerError>`](crate::operation::resolve_customer::ResolveCustomerError)
    pub fn resolve_customer(&self) -> crate::operation::resolve_customer::builders::ResolveCustomerFluentBuilder {
        crate::operation::resolve_customer::builders::ResolveCustomerFluentBuilder::new(self.handle.clone())
    }
}
