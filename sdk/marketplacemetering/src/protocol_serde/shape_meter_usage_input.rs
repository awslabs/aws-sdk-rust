// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_meter_usage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::meter_usage::MeterUsageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.product_code {
        object.key("ProductCode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.timestamp {
        object
            .key("Timestamp")
            .date_time(var_2, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_3) = &input.usage_dimension {
        object.key("UsageDimension").string(var_3.as_str());
    }
    if let Some(var_4) = &input.usage_quantity {
        object.key("UsageQuantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.dry_run {
        object.key("DryRun").boolean(*var_5);
    }
    if let Some(var_6) = &input.usage_allocations {
        let mut array_7 = object.key("UsageAllocations").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_usage_allocation::ser_usage_allocation(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
