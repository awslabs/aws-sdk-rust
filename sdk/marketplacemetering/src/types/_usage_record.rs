// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>UsageRecord</code> indicates a quantity of usage for a given product, customer, dimension and time.</p>
/// <p>Multiple requests with the same <code>UsageRecords</code> as input will be de-duplicated to prevent double charges.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageRecord {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub customer_identifier: ::std::string::String,
    /// <p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub dimension: ::std::string::String,
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub quantity: ::std::option::Option<i32>,
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub usage_allocations: ::std::option::Option<::std::vec::Vec<crate::types::UsageAllocation>>,
    /// <p>The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer.</p>
    pub customer_aws_account_id: ::std::option::Option<::std::string::String>,
}
impl UsageRecord {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn customer_identifier(&self) -> &str {
        use std::ops::Deref;
        self.customer_identifier.deref()
    }
    /// <p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn dimension(&self) -> &str {
        use std::ops::Deref;
        self.dimension.deref()
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn quantity(&self) -> ::std::option::Option<i32> {
        self.quantity
    }
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.usage_allocations.is_none()`.
    pub fn usage_allocations(&self) -> &[crate::types::UsageAllocation] {
        self.usage_allocations.as_deref().unwrap_or_default()
    }
    /// <p>The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer.</p>
    pub fn customer_aws_account_id(&self) -> ::std::option::Option<&str> {
        self.customer_aws_account_id.as_deref()
    }
}
impl UsageRecord {
    /// Creates a new builder-style object to manufacture [`UsageRecord`](crate::types::UsageRecord).
    pub fn builder() -> crate::types::builders::UsageRecordBuilder {
        crate::types::builders::UsageRecordBuilder::default()
    }
}

/// A builder for [`UsageRecord`](crate::types::UsageRecord).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UsageRecordBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) customer_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) dimension: ::std::option::Option<::std::string::String>,
    pub(crate) quantity: ::std::option::Option<i32>,
    pub(crate) usage_allocations: ::std::option::Option<::std::vec::Vec<crate::types::UsageAllocation>>,
    pub(crate) customer_aws_account_id: ::std::option::Option<::std::string::String>,
}
impl UsageRecordBuilder {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn customer_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn set_customer_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_identifier = input;
        self
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn get_customer_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_identifier
    }
    /// <p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    /// This field is required.
    pub fn dimension(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dimension = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<::std::string::String> {
        &self.dimension
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i32> {
        &self.quantity
    }
    /// Appends an item to `usage_allocations`.
    ///
    /// To override the contents of this collection use [`set_usage_allocations`](Self::set_usage_allocations).
    ///
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn usage_allocations(mut self, input: crate::types::UsageAllocation) -> Self {
        let mut v = self.usage_allocations.unwrap_or_default();
        v.push(input);
        self.usage_allocations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn set_usage_allocations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageAllocation>>) -> Self {
        self.usage_allocations = input;
        self
    }
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn get_usage_allocations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageAllocation>> {
        &self.usage_allocations
    }
    /// <p>The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer.</p>
    pub fn customer_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer.</p>
    pub fn set_customer_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_aws_account_id = input;
        self
    }
    /// <p>The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer.</p>
    pub fn get_customer_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_aws_account_id
    }
    /// Consumes the builder and constructs a [`UsageRecord`](crate::types::UsageRecord).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::UsageRecordBuilder::timestamp)
    /// - [`dimension`](crate::types::builders::UsageRecordBuilder::dimension)
    pub fn build(self) -> ::std::result::Result<crate::types::UsageRecord, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UsageRecord {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building UsageRecord",
                )
            })?,
            customer_identifier: self.customer_identifier.unwrap_or_default(),
            dimension: self.dimension.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension",
                    "dimension was not specified but it is required when building UsageRecord",
                )
            })?,
            quantity: self.quantity,
            usage_allocations: self.usage_allocations,
            customer_aws_account_id: self.customer_aws_account_id,
        })
    }
}
