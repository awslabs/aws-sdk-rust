// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>UsageRecord</code> indicates a quantity of usage for a given product, customer, dimension and time.</p>
/// <p>Multiple requests with the same <code>UsageRecords</code> as input will be de-duplicated to prevent double charges.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageRecord {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    #[doc(hidden)]
    pub customer_identifier: std::option::Option<std::string::String>,
    /// <p>During the process of registering a product on AWS Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    #[doc(hidden)]
    pub dimension: std::option::Option<std::string::String>,
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    #[doc(hidden)]
    pub usage_allocations: std::option::Option<std::vec::Vec<crate::types::UsageAllocation>>,
}
impl UsageRecord {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn customer_identifier(&self) -> std::option::Option<&str> {
        self.customer_identifier.as_deref()
    }
    /// <p>During the process of registering a product on AWS Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn dimension(&self) -> std::option::Option<&str> {
        self.dimension.as_deref()
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn usage_allocations(&self) -> std::option::Option<&[crate::types::UsageAllocation]> {
        self.usage_allocations.as_deref()
    }
}
impl UsageRecord {
    /// Creates a new builder-style object to manufacture [`UsageRecord`](crate::types::UsageRecord).
    pub fn builder() -> crate::types::builders::UsageRecordBuilder {
        crate::types::builders::UsageRecordBuilder::default()
    }
}

/// A builder for [`UsageRecord`](crate::types::UsageRecord).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageRecordBuilder {
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) customer_identifier: std::option::Option<std::string::String>,
    pub(crate) dimension: std::option::Option<std::string::String>,
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) usage_allocations: std::option::Option<std::vec::Vec<crate::types::UsageAllocation>>,
}
impl UsageRecordBuilder {
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>Timestamp, in UTC, for which the usage is being reported.</p>
    /// <p>Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn customer_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_identifier = Some(input.into());
        self
    }
    /// <p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>
    pub fn set_customer_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.customer_identifier = input;
        self
    }
    /// <p>During the process of registering a product on AWS Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn dimension(mut self, input: impl Into<std::string::String>) -> Self {
        self.dimension = Some(input.into());
        self
    }
    /// <p>During the process of registering a product on AWS Marketplace, dimensions are specified. These represent different units of value in your application.</p>
    pub fn set_dimension(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// Appends an item to `usage_allocations`.
    ///
    /// To override the contents of this collection use [`set_usage_allocations`](Self::set_usage_allocations).
    ///
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn usage_allocations(mut self, input: crate::types::UsageAllocation) -> Self {
        let mut v = self.usage_allocations.unwrap_or_default();
        v.push(input);
        self.usage_allocations = Some(v);
        self
    }
    /// <p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>
    pub fn set_usage_allocations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsageAllocation>>,
    ) -> Self {
        self.usage_allocations = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageRecord`](crate::types::UsageRecord).
    pub fn build(self) -> crate::types::UsageRecord {
        crate::types::UsageRecord {
            timestamp: self.timestamp,
            customer_identifier: self.customer_identifier,
            dimension: self.dimension,
            quantity: self.quantity,
            usage_allocations: self.usage_allocations,
        }
    }
}
