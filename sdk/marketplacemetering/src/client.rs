// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn batch_meter_usage(&self) -> fluent_builders::BatchMeterUsage<C> {
        fluent_builders::BatchMeterUsage::new(self.handle.clone())
    }
    pub fn meter_usage(&self) -> fluent_builders::MeterUsage<C> {
        fluent_builders::MeterUsage::new(self.handle.clone())
    }
    pub fn register_usage(&self) -> fluent_builders::RegisterUsage<C> {
        fluent_builders::RegisterUsage::new(self.handle.clone())
    }
    pub fn resolve_customer(&self) -> fluent_builders::ResolveCustomer<C> {
        fluent_builders::ResolveCustomer::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct BatchMeterUsage<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::batch_meter_usage_input::Builder,
    }
    impl<C> BatchMeterUsage<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchMeterUsageOutput,
            smithy_http::result::SdkError<crate::error::BatchMeterUsageError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at
        /// a time.</p>
        pub fn usage_records(mut self, inp: impl Into<crate::model::UsageRecord>) -> Self {
            self.inner = self.inner.usage_records(inp);
            self
        }
        pub fn set_usage_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UsageRecord>>,
        ) -> Self {
            self.inner = self.inner.set_usage_records(input);
            self
        }
        /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
        /// code should be the same as the one used during the publishing of a new
        /// product.</p>
        pub fn product_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_code(input);
            self
        }
        pub fn set_product_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_code(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct MeterUsage<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::meter_usage_input::Builder,
    }
    impl<C> MeterUsage<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::MeterUsageOutput,
            smithy_http::result::SdkError<crate::error::MeterUsageError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
        /// code should be the same as the one used during the publishing of a new
        /// product.</p>
        pub fn product_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_code(input);
            self
        }
        pub fn set_product_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_code(input);
            self
        }
        /// <p>Timestamp, in UTC, for which the usage is being reported. Your application can
        /// meter usage for up to one hour in the past. Make sure the timestamp value is not before
        /// the start of the software usage.</p>
        pub fn timestamp(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.timestamp(input);
            self
        }
        pub fn set_timestamp(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_timestamp(input);
            self
        }
        /// <p>It will be one of the fcp dimension name provided during the publishing of the
        /// product.</p>
        pub fn usage_dimension(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.usage_dimension(input);
            self
        }
        pub fn set_usage_dimension(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_usage_dimension(input);
            self
        }
        /// <p>Consumption value for the hour. Defaults to <code>0</code> if not
        /// specified.</p>
        pub fn usage_quantity(mut self, input: i32) -> Self {
            self.inner = self.inner.usage_quantity(input);
            self
        }
        pub fn set_usage_quantity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_usage_quantity(input);
            self
        }
        /// <p>Checks whether you have the permissions required for the action, but does not make
        /// the request. If you have the permissions, the request returns DryRunOperation;
        /// otherwise, it returns UnauthorizedException. Defaults to <code>false</code> if not
        /// specified.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
        /// <p>The set of UsageAllocations to submit.</p>
        /// <p>The sum of all UsageAllocation quantities must equal the
        /// UsageQuantity of the MeterUsage request, and each UsageAllocation must have a
        /// unique set of tags (include no tags).</p>
        pub fn usage_allocations(mut self, inp: impl Into<crate::model::UsageAllocation>) -> Self {
            self.inner = self.inner.usage_allocations(inp);
            self
        }
        pub fn set_usage_allocations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UsageAllocation>>,
        ) -> Self {
            self.inner = self.inner.set_usage_allocations(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterUsage<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::register_usage_input::Builder,
    }
    impl<C> RegisterUsage<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterUsageOutput,
            smithy_http::result::SdkError<crate::error::RegisterUsageError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
        /// code should be the same as the one used during the publishing of a new
        /// product.</p>
        pub fn product_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_code(input);
            self
        }
        pub fn set_product_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_code(input);
            self
        }
        /// <p>Public Key Version provided by AWS Marketplace</p>
        pub fn public_key_version(mut self, input: i32) -> Self {
            self.inner = self.inner.public_key_version(input);
            self
        }
        pub fn set_public_key_version(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_public_key_version(input);
            self
        }
        /// <p>(Optional) To scope down the registration to a specific running software instance
        /// and guard against replay attacks.</p>
        pub fn nonce(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nonce(input);
            self
        }
        pub fn set_nonce(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_nonce(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ResolveCustomer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::resolve_customer_input::Builder,
    }
    impl<C> ResolveCustomer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ResolveCustomerOutput,
            smithy_http::result::SdkError<crate::error::ResolveCustomerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>When a buyer visits your website during the registration process, the buyer submits
        /// a registration token through the browser. The registration token is resolved to obtain a
        /// CustomerIdentifier and product code.</p>
        pub fn registration_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.registration_token(input);
            self
        }
        pub fn set_registration_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_registration_token(input);
            self
        }
    }
}
