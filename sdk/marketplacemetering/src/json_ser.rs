// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_meter_usage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchMeterUsageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.usage_records {
        let mut array_2 = object.key("UsageRecords").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_usage_record(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.product_code {
        object.key("ProductCode").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_meter_usage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MeterUsageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.product_code {
        object.key("ProductCode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.timestamp {
        object
            .key("Timestamp")
            .date_time(var_7, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_8) = &input.usage_dimension {
        object.key("UsageDimension").string(var_8.as_str());
    }
    if let Some(var_9) = &input.usage_quantity {
        object.key("UsageQuantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.dry_run {
        object.key("DryRun").boolean(*var_10);
    }
    if let Some(var_11) = &input.usage_allocations {
        let mut array_12 = object.key("UsageAllocations").start_array();
        for item_13 in var_11 {
            {
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_structure_crate_model_usage_allocation(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_usage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUsageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.product_code {
        object.key("ProductCode").string(var_15.as_str());
    }
    if let Some(var_16) = &input.public_key_version {
        object.key("PublicKeyVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.nonce {
        object.key("Nonce").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resolve_customer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResolveCustomerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.registration_token {
        object.key("RegistrationToken").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsageRecord,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.timestamp {
        object
            .key("Timestamp")
            .date_time(var_19, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_20) = &input.customer_identifier {
        object.key("CustomerIdentifier").string(var_20.as_str());
    }
    if let Some(var_21) = &input.dimension {
        object.key("Dimension").string(var_21.as_str());
    }
    if let Some(var_22) = &input.quantity {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.usage_allocations {
        let mut array_24 = object.key("UsageAllocations").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_usage_allocation(
                    &mut object_26,
                    item_25,
                )?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_allocation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsageAllocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.allocated_usage_quantity {
        object.key("AllocatedUsageQuantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.key {
        object.key("Key").string(var_32.as_str());
    }
    if let Some(var_33) = &input.value {
        object.key("Value").string(var_33.as_str());
    }
    Ok(())
}
