// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterUsageInput {
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    #[doc(hidden)]
    pub product_code: std::option::Option<std::string::String>,
    /// <p>Public Key Version provided by AWS Marketplace</p>
    #[doc(hidden)]
    pub public_key_version: std::option::Option<i32>,
    /// <p>(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.</p>
    #[doc(hidden)]
    pub nonce: std::option::Option<std::string::String>,
}
impl RegisterUsageInput {
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn product_code(&self) -> std::option::Option<&str> {
        self.product_code.as_deref()
    }
    /// <p>Public Key Version provided by AWS Marketplace</p>
    pub fn public_key_version(&self) -> std::option::Option<i32> {
        self.public_key_version
    }
    /// <p>(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.</p>
    pub fn nonce(&self) -> std::option::Option<&str> {
        self.nonce.as_deref()
    }
}
impl RegisterUsageInput {
    /// Creates a new builder-style object to manufacture [`RegisterUsageInput`](crate::operation::register_usage::RegisterUsageInput).
    pub fn builder() -> crate::operation::register_usage::builders::RegisterUsageInputBuilder {
        crate::operation::register_usage::builders::RegisterUsageInputBuilder::default()
    }
}

/// A builder for [`RegisterUsageInput`](crate::operation::register_usage::RegisterUsageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterUsageInputBuilder {
    pub(crate) product_code: std::option::Option<std::string::String>,
    pub(crate) public_key_version: std::option::Option<i32>,
    pub(crate) nonce: std::option::Option<std::string::String>,
}
impl RegisterUsageInputBuilder {
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn product_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_code = Some(input.into());
        self
    }
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn set_product_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_code = input;
        self
    }
    /// <p>Public Key Version provided by AWS Marketplace</p>
    pub fn public_key_version(mut self, input: i32) -> Self {
        self.public_key_version = Some(input);
        self
    }
    /// <p>Public Key Version provided by AWS Marketplace</p>
    pub fn set_public_key_version(mut self, input: std::option::Option<i32>) -> Self {
        self.public_key_version = input;
        self
    }
    /// <p>(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.</p>
    pub fn nonce(mut self, input: impl Into<std::string::String>) -> Self {
        self.nonce = Some(input.into());
        self
    }
    /// <p>(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.</p>
    pub fn set_nonce(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.nonce = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisterUsageInput`](crate::operation::register_usage::RegisterUsageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::register_usage::RegisterUsageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::register_usage::RegisterUsageInput {
            product_code: self.product_code,
            public_key_version: self.public_key_version,
            nonce: self.nonce,
        })
    }
}
