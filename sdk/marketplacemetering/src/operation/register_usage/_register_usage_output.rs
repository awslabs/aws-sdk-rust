// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterUsageOutput {
    /// <p>(Optional) Only included when public key version has expired</p>
    #[doc(hidden)]
    pub public_key_rotation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>JWT Token</p>
    #[doc(hidden)]
    pub signature: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterUsageOutput {
    /// <p>(Optional) Only included when public key version has expired</p>
    pub fn public_key_rotation_timestamp(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.public_key_rotation_timestamp.as_ref()
    }
    /// <p>JWT Token</p>
    pub fn signature(&self) -> std::option::Option<&str> {
        self.signature.as_deref()
    }
}
impl aws_http::request_id::RequestId for RegisterUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterUsageOutput {
    /// Creates a new builder-style object to manufacture [`RegisterUsageOutput`](crate::operation::register_usage::RegisterUsageOutput).
    pub fn builder() -> crate::operation::register_usage::builders::RegisterUsageOutputBuilder {
        crate::operation::register_usage::builders::RegisterUsageOutputBuilder::default()
    }
}

/// A builder for [`RegisterUsageOutput`](crate::operation::register_usage::RegisterUsageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterUsageOutputBuilder {
    pub(crate) public_key_rotation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) signature: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterUsageOutputBuilder {
    /// <p>(Optional) Only included when public key version has expired</p>
    pub fn public_key_rotation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.public_key_rotation_timestamp = Some(input);
        self
    }
    /// <p>(Optional) Only included when public key version has expired</p>
    pub fn set_public_key_rotation_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.public_key_rotation_timestamp = input;
        self
    }
    /// <p>JWT Token</p>
    pub fn signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.signature = Some(input.into());
        self
    }
    /// <p>JWT Token</p>
    pub fn set_signature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signature = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterUsageOutput`](crate::operation::register_usage::RegisterUsageOutput).
    pub fn build(self) -> crate::operation::register_usage::RegisterUsageOutput {
        crate::operation::register_usage::RegisterUsageOutput {
            public_key_rotation_timestamp: self.public_key_rotation_timestamp,
            signature: self.signature,
            _request_id: self._request_id,
        }
    }
}
