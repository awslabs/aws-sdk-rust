// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains input to the <code>ResolveCustomer</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResolveCustomerInput {
    /// <p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>
    pub registration_token: ::std::option::Option<::std::string::String>,
}
impl ResolveCustomerInput {
    /// <p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>
    pub fn registration_token(&self) -> ::std::option::Option<&str> {
        self.registration_token.as_deref()
    }
}
impl ResolveCustomerInput {
    /// Creates a new builder-style object to manufacture [`ResolveCustomerInput`](crate::operation::resolve_customer::ResolveCustomerInput).
    pub fn builder() -> crate::operation::resolve_customer::builders::ResolveCustomerInputBuilder {
        crate::operation::resolve_customer::builders::ResolveCustomerInputBuilder::default()
    }
}

/// A builder for [`ResolveCustomerInput`](crate::operation::resolve_customer::ResolveCustomerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResolveCustomerInputBuilder {
    pub(crate) registration_token: ::std::option::Option<::std::string::String>,
}
impl ResolveCustomerInputBuilder {
    /// <p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>
    /// This field is required.
    pub fn registration_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>
    pub fn set_registration_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_token = input;
        self
    }
    /// <p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>
    pub fn get_registration_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_token
    }
    /// Consumes the builder and constructs a [`ResolveCustomerInput`](crate::operation::resolve_customer::ResolveCustomerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::resolve_customer::ResolveCustomerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::resolve_customer::ResolveCustomerInput {
            registration_token: self.registration_token,
        })
    }
}
