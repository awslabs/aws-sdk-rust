// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>BatchMeterUsageRequest</code> contains <code>UsageRecords</code>, which indicate quantities of usage within your application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchMeterUsageInput {
    /// <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>
    pub usage_records: ::std::option::Option<::std::vec::Vec<crate::types::UsageRecord>>,
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub product_code: ::std::option::Option<::std::string::String>,
}
impl BatchMeterUsageInput {
    /// <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.usage_records.is_none()`.
    pub fn usage_records(&self) -> &[crate::types::UsageRecord] {
        self.usage_records.as_deref().unwrap_or_default()
    }
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn product_code(&self) -> ::std::option::Option<&str> {
        self.product_code.as_deref()
    }
}
impl BatchMeterUsageInput {
    /// Creates a new builder-style object to manufacture [`BatchMeterUsageInput`](crate::operation::batch_meter_usage::BatchMeterUsageInput).
    pub fn builder() -> crate::operation::batch_meter_usage::builders::BatchMeterUsageInputBuilder {
        crate::operation::batch_meter_usage::builders::BatchMeterUsageInputBuilder::default()
    }
}

/// A builder for [`BatchMeterUsageInput`](crate::operation::batch_meter_usage::BatchMeterUsageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchMeterUsageInputBuilder {
    pub(crate) usage_records: ::std::option::Option<::std::vec::Vec<crate::types::UsageRecord>>,
    pub(crate) product_code: ::std::option::Option<::std::string::String>,
}
impl BatchMeterUsageInputBuilder {
    /// Appends an item to `usage_records`.
    ///
    /// To override the contents of this collection use [`set_usage_records`](Self::set_usage_records).
    ///
    /// <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>
    pub fn usage_records(mut self, input: crate::types::UsageRecord) -> Self {
        let mut v = self.usage_records.unwrap_or_default();
        v.push(input);
        self.usage_records = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>
    pub fn set_usage_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageRecord>>) -> Self {
        self.usage_records = input;
        self
    }
    /// <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>
    pub fn get_usage_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageRecord>> {
        &self.usage_records
    }
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    /// This field is required.
    pub fn product_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn set_product_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_code = input;
        self
    }
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>
    pub fn get_product_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_code
    }
    /// Consumes the builder and constructs a [`BatchMeterUsageInput`](crate::operation::batch_meter_usage::BatchMeterUsageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_meter_usage::BatchMeterUsageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_meter_usage::BatchMeterUsageInput {
            usage_records: self.usage_records,
            product_code: self.product_code,
        })
    }
}
