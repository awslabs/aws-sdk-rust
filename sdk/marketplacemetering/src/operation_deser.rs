// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_meter_usage_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchMeterUsageOutput, crate::error::BatchMeterUsageError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchMeterUsageError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchMeterUsageError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DisabledApiException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::DisabledApiException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::disabled_api_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_disabled_api_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServiceErrorException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::InternalServiceErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::internal_service_error_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_internal_service_error_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCustomerIdentifierException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::InvalidCustomerIdentifierException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_customer_identifier_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_customer_identifier_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidProductCodeException" => {
            crate::error::BatchMeterUsageError {
                meta: generic,
                kind: crate::error::BatchMeterUsageErrorKind::InvalidProductCodeException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::invalid_product_code_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_invalid_product_code_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidTagException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::InvalidTagException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_tag_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_tag_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidUsageAllocationsException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::InvalidUsageAllocationsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_usage_allocations_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_usage_allocations_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidUsageDimensionException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::InvalidUsageDimensionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_usage_dimension_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_usage_dimension_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_throttling_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TimestampOutOfBoundsException" => crate::error::BatchMeterUsageError {
            meta: generic,
            kind: crate::error::BatchMeterUsageErrorKind::TimestampOutOfBoundsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::timestamp_out_of_bounds_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_timestamp_out_of_bounds_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::BatchMeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::BatchMeterUsageError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_meter_usage_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchMeterUsageOutput, crate::error::BatchMeterUsageError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_meter_usage_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_batch_meter_usage(response.body().as_ref(), output)
                .map_err(crate::error::BatchMeterUsageError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_meter_usage_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::MeterUsageOutput, crate::error::MeterUsageError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::MeterUsageError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::MeterUsageError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CustomerNotEntitledException" => {
            crate::error::MeterUsageError {
                meta: generic,
                kind: crate::error::MeterUsageErrorKind::CustomerNotEntitledException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::customer_not_entitled_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_customer_not_entitled_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "DuplicateRequestException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::DuplicateRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::duplicate_request_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_duplicate_request_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServiceErrorException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::InternalServiceErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::internal_service_error_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_internal_service_error_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidEndpointRegionException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::InvalidEndpointRegionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_endpoint_region_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_endpoint_region_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidProductCodeException" => {
            crate::error::MeterUsageError {
                meta: generic,
                kind: crate::error::MeterUsageErrorKind::InvalidProductCodeException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::invalid_product_code_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_invalid_product_code_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidTagException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::InvalidTagException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_tag_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_tag_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidUsageAllocationsException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::InvalidUsageAllocationsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_usage_allocations_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_usage_allocations_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidUsageDimensionException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::InvalidUsageDimensionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_usage_dimension_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_usage_dimension_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_throttling_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TimestampOutOfBoundsException" => crate::error::MeterUsageError {
            meta: generic,
            kind: crate::error::MeterUsageErrorKind::TimestampOutOfBoundsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::timestamp_out_of_bounds_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_timestamp_out_of_bounds_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::MeterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::MeterUsageError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_meter_usage_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::MeterUsageOutput, crate::error::MeterUsageError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::meter_usage_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_meter_usage(response.body().as_ref(), output)
            .map_err(crate::error::MeterUsageError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_usage_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterUsageOutput, crate::error::RegisterUsageError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RegisterUsageError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterUsageError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CustomerNotEntitledException" => {
            crate::error::RegisterUsageError {
                meta: generic,
                kind: crate::error::RegisterUsageErrorKind::CustomerNotEntitledException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::customer_not_entitled_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_customer_not_entitled_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterUsageError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "DisabledApiException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::DisabledApiException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::disabled_api_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_disabled_api_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServiceErrorException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::InternalServiceErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::internal_service_error_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_internal_service_error_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidProductCodeException" => {
            crate::error::RegisterUsageError {
                meta: generic,
                kind: crate::error::RegisterUsageErrorKind::InvalidProductCodeException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::invalid_product_code_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_invalid_product_code_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterUsageError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidPublicKeyVersionException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::InvalidPublicKeyVersionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_public_key_version_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_public_key_version_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRegionException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::InvalidRegionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_region_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_region_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "PlatformNotSupportedException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::PlatformNotSupportedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::platform_not_supported_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_platform_not_supported_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::RegisterUsageError {
            meta: generic,
            kind: crate::error::RegisterUsageErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_throttling_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterUsageError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RegisterUsageError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_usage_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterUsageOutput, crate::error::RegisterUsageError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_usage_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_register_usage(response.body().as_ref(), output)
                .map_err(crate::error::RegisterUsageError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resolve_customer_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResolveCustomerOutput, crate::error::ResolveCustomerError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ResolveCustomerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResolveCustomerError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DisabledApiException" => crate::error::ResolveCustomerError {
            meta: generic,
            kind: crate::error::ResolveCustomerErrorKind::DisabledApiException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::disabled_api_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_disabled_api_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResolveCustomerError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ExpiredTokenException" => crate::error::ResolveCustomerError {
            meta: generic,
            kind: crate::error::ResolveCustomerErrorKind::ExpiredTokenException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::expired_token_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_expired_token_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResolveCustomerError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServiceErrorException" => crate::error::ResolveCustomerError {
            meta: generic,
            kind: crate::error::ResolveCustomerErrorKind::InternalServiceErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::internal_service_error_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_internal_service_error_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ResolveCustomerError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidTokenException" => crate::error::ResolveCustomerError {
            meta: generic,
            kind: crate::error::ResolveCustomerErrorKind::InvalidTokenException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_token_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_token_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResolveCustomerError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::ResolveCustomerError {
            meta: generic,
            kind: crate::error::ResolveCustomerErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_throttling_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResolveCustomerError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ResolveCustomerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resolve_customer_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResolveCustomerOutput, crate::error::ResolveCustomerError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::resolve_customer_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_resolve_customer(response.body().as_ref(), output)
                .map_err(crate::error::ResolveCustomerError::unhandled)?;
        output.build()
    })
}
