// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLicenseRecommendations`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arns(impl Into<String>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::resource_arns) / [`set_resource_arns(Option<Vec::<String>>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::set_resource_arns):<br>required: **false**<br><p> The ARN that identifies the Amazon EC2 instance. </p>  <p> The following is the format of the ARN: </p>  <p> <code>arn:aws:ec2:region:aws_account_id:instance/instance-id</code> </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::set_next_token):<br>required: **false**<br><p> The token to advance to the next page of license recommendations. </p><br>
    ///   - [`max_results(i32)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::set_max_results):<br>required: **false**<br><p> The maximum number of license recommendations to return with a single request. </p>  <p> To retrieve the remaining results, make another request with the returned <code>nextToken</code> value. </p><br>
    ///   - [`filters(LicenseRecommendationFilter)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::filters) / [`set_filters(Option<Vec::<LicenseRecommendationFilter>>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::set_filters):<br>required: **false**<br><p> An array of objects to specify a filter that returns a more specific list of license recommendations. </p><br>
    ///   - [`account_ids(impl Into<String>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::account_ids) / [`set_account_ids(Option<Vec::<String>>)`](crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::set_account_ids):<br>required: **false**<br><p>The ID of the Amazon Web Services account for which to return license recommendations.</p>  <p>If your account is the management account of an organization, use this parameter to specify the member account for which you want to return license recommendations.</p>  <p>Only one account ID can be specified per request.</p><br>
    /// - On success, responds with [`GetLicenseRecommendationsOutput`](crate::operation::get_license_recommendations::GetLicenseRecommendationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::get_license_recommendations::GetLicenseRecommendationsOutput::next_token): <p> The token to use to advance to the next page of license recommendations. </p>
    ///   - [`license_recommendations(Option<Vec::<LicenseRecommendation>>)`](crate::operation::get_license_recommendations::GetLicenseRecommendationsOutput::license_recommendations): <p> An array of objects that describe license recommendations. </p>
    ///   - [`errors(Option<Vec::<GetRecommendationError>>)`](crate::operation::get_license_recommendations::GetLicenseRecommendationsOutput::errors): <p> An array of objects that describe errors of the request. </p>
    /// - On failure, responds with [`SdkError<GetLicenseRecommendationsError>`](crate::operation::get_license_recommendations::GetLicenseRecommendationsError)
    pub fn get_license_recommendations(&self) -> crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder {
        crate::operation::get_license_recommendations::builders::GetLicenseRecommendationsFluentBuilder::new(self.handle.clone())
    }
}
