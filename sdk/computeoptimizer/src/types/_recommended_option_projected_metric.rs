// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a projected utilization metric of a recommendation option.</p> <note>
/// <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected utilization metrics returned when you run the <code>GetEC2RecommendationProjectedMetrics</code> action. Additionally, the <code>Memory</code> metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory Utilization with the CloudWatch Agent</a>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendedOptionProjectedMetric {
    /// <p>The recommended instance type.</p>
    pub recommended_instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The rank of the recommendation option projected metric.</p>
    /// <p>The top recommendation option is ranked as <code>1</code>.</p>
    /// <p>The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as <code>1</code> is related to the recommendation option that is also ranked as <code>1</code> in the same response.</p>
    pub rank: i32,
    /// <p>An array of objects that describe a projected utilization metric.</p>
    pub projected_metrics: ::std::option::Option<::std::vec::Vec<crate::types::ProjectedMetric>>,
}
impl RecommendedOptionProjectedMetric {
    /// <p>The recommended instance type.</p>
    pub fn recommended_instance_type(&self) -> ::std::option::Option<&str> {
        self.recommended_instance_type.as_deref()
    }
    /// <p>The rank of the recommendation option projected metric.</p>
    /// <p>The top recommendation option is ranked as <code>1</code>.</p>
    /// <p>The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as <code>1</code> is related to the recommendation option that is also ranked as <code>1</code> in the same response.</p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
    /// <p>An array of objects that describe a projected utilization metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.projected_metrics.is_none()`.
    pub fn projected_metrics(&self) -> &[crate::types::ProjectedMetric] {
        self.projected_metrics.as_deref().unwrap_or_default()
    }
}
impl RecommendedOptionProjectedMetric {
    /// Creates a new builder-style object to manufacture [`RecommendedOptionProjectedMetric`](crate::types::RecommendedOptionProjectedMetric).
    pub fn builder() -> crate::types::builders::RecommendedOptionProjectedMetricBuilder {
        crate::types::builders::RecommendedOptionProjectedMetricBuilder::default()
    }
}

/// A builder for [`RecommendedOptionProjectedMetric`](crate::types::RecommendedOptionProjectedMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendedOptionProjectedMetricBuilder {
    pub(crate) recommended_instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) rank: ::std::option::Option<i32>,
    pub(crate) projected_metrics: ::std::option::Option<::std::vec::Vec<crate::types::ProjectedMetric>>,
}
impl RecommendedOptionProjectedMetricBuilder {
    /// <p>The recommended instance type.</p>
    pub fn recommended_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended instance type.</p>
    pub fn set_recommended_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_instance_type = input;
        self
    }
    /// <p>The recommended instance type.</p>
    pub fn get_recommended_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_instance_type
    }
    /// <p>The rank of the recommendation option projected metric.</p>
    /// <p>The top recommendation option is ranked as <code>1</code>.</p>
    /// <p>The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as <code>1</code> is related to the recommendation option that is also ranked as <code>1</code> in the same response.</p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rank of the recommendation option projected metric.</p>
    /// <p>The top recommendation option is ranked as <code>1</code>.</p>
    /// <p>The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as <code>1</code> is related to the recommendation option that is also ranked as <code>1</code> in the same response.</p>
    pub fn set_rank(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// <p>The rank of the recommendation option projected metric.</p>
    /// <p>The top recommendation option is ranked as <code>1</code>.</p>
    /// <p>The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as <code>1</code> is related to the recommendation option that is also ranked as <code>1</code> in the same response.</p>
    pub fn get_rank(&self) -> &::std::option::Option<i32> {
        &self.rank
    }
    /// Appends an item to `projected_metrics`.
    ///
    /// To override the contents of this collection use [`set_projected_metrics`](Self::set_projected_metrics).
    ///
    /// <p>An array of objects that describe a projected utilization metric.</p>
    pub fn projected_metrics(mut self, input: crate::types::ProjectedMetric) -> Self {
        let mut v = self.projected_metrics.unwrap_or_default();
        v.push(input);
        self.projected_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe a projected utilization metric.</p>
    pub fn set_projected_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectedMetric>>) -> Self {
        self.projected_metrics = input;
        self
    }
    /// <p>An array of objects that describe a projected utilization metric.</p>
    pub fn get_projected_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectedMetric>> {
        &self.projected_metrics
    }
    /// Consumes the builder and constructs a [`RecommendedOptionProjectedMetric`](crate::types::RecommendedOptionProjectedMetric).
    pub fn build(self) -> crate::types::RecommendedOptionProjectedMetric {
        crate::types::RecommendedOptionProjectedMetric {
            recommended_instance_type: self.recommended_instance_type,
            rank: self.rank.unwrap_or_default(),
            projected_metrics: self.projected_metrics,
        }
    }
}
