// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Elastic Block Store (Amazon EBS) volume recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VolumeRecommendation {
    /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
    pub volume_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the volume.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>An array of objects that describe the current configuration of the volume.</p>
    pub current_configuration: ::std::option::Option<crate::types::VolumeConfiguration>,
    /// <p>The finding classification of the volume.</p>
    /// <p>Findings for volumes include:</p>
    /// <ul>
    /// <li> <p> <b> <code>NotOptimized</code> </b>—A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.</p> </li>
    /// <li> <p> <b> <code>Optimized</code> </b>—An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.</p> </li>
    /// </ul>
    pub finding: ::std::option::Option<crate::types::EbsFinding>,
    /// <p>An array of objects that describe the utilization metrics of the volume.</p>
    pub utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::EbsUtilizationMetric>>,
    /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
    pub look_back_period_in_days: f64,
    /// <p>An array of objects that describe the recommendation options for the volume.</p>
    pub volume_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::VolumeRecommendationOption>>,
    /// <p>The timestamp of when the volume recommendation was last generated.</p>
    pub last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.</p>
    pub current_performance_risk: ::std::option::Option<crate::types::CurrentPerformanceRisk>,
    /// <p> A list of tags assigned to your Amazon EBS volume recommendations. </p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VolumeRecommendation {
    /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
    pub fn volume_arn(&self) -> ::std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the volume.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An array of objects that describe the current configuration of the volume.</p>
    pub fn current_configuration(&self) -> ::std::option::Option<&crate::types::VolumeConfiguration> {
        self.current_configuration.as_ref()
    }
    /// <p>The finding classification of the volume.</p>
    /// <p>Findings for volumes include:</p>
    /// <ul>
    /// <li> <p> <b> <code>NotOptimized</code> </b>—A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.</p> </li>
    /// <li> <p> <b> <code>Optimized</code> </b>—An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.</p> </li>
    /// </ul>
    pub fn finding(&self) -> ::std::option::Option<&crate::types::EbsFinding> {
        self.finding.as_ref()
    }
    /// <p>An array of objects that describe the utilization metrics of the volume.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.utilization_metrics.is_none()`.
    pub fn utilization_metrics(&self) -> &[crate::types::EbsUtilizationMetric] {
        self.utilization_metrics.as_deref().unwrap_or_default()
    }
    /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
    pub fn look_back_period_in_days(&self) -> f64 {
        self.look_back_period_in_days
    }
    /// <p>An array of objects that describe the recommendation options for the volume.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.volume_recommendation_options.is_none()`.
    pub fn volume_recommendation_options(&self) -> &[crate::types::VolumeRecommendationOption] {
        self.volume_recommendation_options.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp of when the volume recommendation was last generated.</p>
    pub fn last_refresh_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_refresh_timestamp.as_ref()
    }
    /// <p>The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.</p>
    pub fn current_performance_risk(&self) -> ::std::option::Option<&crate::types::CurrentPerformanceRisk> {
        self.current_performance_risk.as_ref()
    }
    /// <p> A list of tags assigned to your Amazon EBS volume recommendations. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VolumeRecommendation {
    /// Creates a new builder-style object to manufacture [`VolumeRecommendation`](crate::types::VolumeRecommendation).
    pub fn builder() -> crate::types::builders::VolumeRecommendationBuilder {
        crate::types::builders::VolumeRecommendationBuilder::default()
    }
}

/// A builder for [`VolumeRecommendation`](crate::types::VolumeRecommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VolumeRecommendationBuilder {
    pub(crate) volume_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) current_configuration: ::std::option::Option<crate::types::VolumeConfiguration>,
    pub(crate) finding: ::std::option::Option<crate::types::EbsFinding>,
    pub(crate) utilization_metrics: ::std::option::Option<::std::vec::Vec<crate::types::EbsUtilizationMetric>>,
    pub(crate) look_back_period_in_days: ::std::option::Option<f64>,
    pub(crate) volume_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::VolumeRecommendationOption>>,
    pub(crate) last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) current_performance_risk: ::std::option::Option<crate::types::CurrentPerformanceRisk>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VolumeRecommendationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
    pub fn volume_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
    pub fn set_volume_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
    pub fn get_volume_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_arn
    }
    /// <p>The Amazon Web Services account ID of the volume.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the volume.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the volume.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>An array of objects that describe the current configuration of the volume.</p>
    pub fn current_configuration(mut self, input: crate::types::VolumeConfiguration) -> Self {
        self.current_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>An array of objects that describe the current configuration of the volume.</p>
    pub fn set_current_configuration(mut self, input: ::std::option::Option<crate::types::VolumeConfiguration>) -> Self {
        self.current_configuration = input;
        self
    }
    /// <p>An array of objects that describe the current configuration of the volume.</p>
    pub fn get_current_configuration(&self) -> &::std::option::Option<crate::types::VolumeConfiguration> {
        &self.current_configuration
    }
    /// <p>The finding classification of the volume.</p>
    /// <p>Findings for volumes include:</p>
    /// <ul>
    /// <li> <p> <b> <code>NotOptimized</code> </b>—A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.</p> </li>
    /// <li> <p> <b> <code>Optimized</code> </b>—An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.</p> </li>
    /// </ul>
    pub fn finding(mut self, input: crate::types::EbsFinding) -> Self {
        self.finding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding classification of the volume.</p>
    /// <p>Findings for volumes include:</p>
    /// <ul>
    /// <li> <p> <b> <code>NotOptimized</code> </b>—A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.</p> </li>
    /// <li> <p> <b> <code>Optimized</code> </b>—An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.</p> </li>
    /// </ul>
    pub fn set_finding(mut self, input: ::std::option::Option<crate::types::EbsFinding>) -> Self {
        self.finding = input;
        self
    }
    /// <p>The finding classification of the volume.</p>
    /// <p>Findings for volumes include:</p>
    /// <ul>
    /// <li> <p> <b> <code>NotOptimized</code> </b>—A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.</p> </li>
    /// <li> <p> <b> <code>Optimized</code> </b>—An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.</p> </li>
    /// </ul>
    pub fn get_finding(&self) -> &::std::option::Option<crate::types::EbsFinding> {
        &self.finding
    }
    /// Appends an item to `utilization_metrics`.
    ///
    /// To override the contents of this collection use [`set_utilization_metrics`](Self::set_utilization_metrics).
    ///
    /// <p>An array of objects that describe the utilization metrics of the volume.</p>
    pub fn utilization_metrics(mut self, input: crate::types::EbsUtilizationMetric) -> Self {
        let mut v = self.utilization_metrics.unwrap_or_default();
        v.push(input);
        self.utilization_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the volume.</p>
    pub fn set_utilization_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EbsUtilizationMetric>>) -> Self {
        self.utilization_metrics = input;
        self
    }
    /// <p>An array of objects that describe the utilization metrics of the volume.</p>
    pub fn get_utilization_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EbsUtilizationMetric>> {
        &self.utilization_metrics
    }
    /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
    pub fn look_back_period_in_days(mut self, input: f64) -> Self {
        self.look_back_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
    pub fn set_look_back_period_in_days(mut self, input: ::std::option::Option<f64>) -> Self {
        self.look_back_period_in_days = input;
        self
    }
    /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
    pub fn get_look_back_period_in_days(&self) -> &::std::option::Option<f64> {
        &self.look_back_period_in_days
    }
    /// Appends an item to `volume_recommendation_options`.
    ///
    /// To override the contents of this collection use [`set_volume_recommendation_options`](Self::set_volume_recommendation_options).
    ///
    /// <p>An array of objects that describe the recommendation options for the volume.</p>
    pub fn volume_recommendation_options(mut self, input: crate::types::VolumeRecommendationOption) -> Self {
        let mut v = self.volume_recommendation_options.unwrap_or_default();
        v.push(input);
        self.volume_recommendation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the recommendation options for the volume.</p>
    pub fn set_volume_recommendation_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeRecommendationOption>>,
    ) -> Self {
        self.volume_recommendation_options = input;
        self
    }
    /// <p>An array of objects that describe the recommendation options for the volume.</p>
    pub fn get_volume_recommendation_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeRecommendationOption>> {
        &self.volume_recommendation_options
    }
    /// <p>The timestamp of when the volume recommendation was last generated.</p>
    pub fn last_refresh_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_refresh_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the volume recommendation was last generated.</p>
    pub fn set_last_refresh_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_refresh_timestamp = input;
        self
    }
    /// <p>The timestamp of when the volume recommendation was last generated.</p>
    pub fn get_last_refresh_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_refresh_timestamp
    }
    /// <p>The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.</p>
    pub fn current_performance_risk(mut self, input: crate::types::CurrentPerformanceRisk) -> Self {
        self.current_performance_risk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.</p>
    pub fn set_current_performance_risk(mut self, input: ::std::option::Option<crate::types::CurrentPerformanceRisk>) -> Self {
        self.current_performance_risk = input;
        self
    }
    /// <p>The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.</p>
    pub fn get_current_performance_risk(&self) -> &::std::option::Option<crate::types::CurrentPerformanceRisk> {
        &self.current_performance_risk
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A list of tags assigned to your Amazon EBS volume recommendations. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of tags assigned to your Amazon EBS volume recommendations. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> A list of tags assigned to your Amazon EBS volume recommendations. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VolumeRecommendation`](crate::types::VolumeRecommendation).
    pub fn build(self) -> crate::types::VolumeRecommendation {
        crate::types::VolumeRecommendation {
            volume_arn: self.volume_arn,
            account_id: self.account_id,
            current_configuration: self.current_configuration,
            finding: self.finding,
            utilization_metrics: self.utilization_metrics,
            look_back_period_in_days: self.look_back_period_in_days.unwrap_or_default(),
            volume_recommendation_options: self.volume_recommendation_options,
            last_refresh_timestamp: self.last_refresh_timestamp,
            current_performance_risk: self.current_performance_risk,
            tags: self.tags,
        }
    }
}
