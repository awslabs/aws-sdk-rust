// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of an Amazon Elastic Block Store (Amazon EBS) volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeConfiguration {
    /// <p>The volume type.</p>
    /// <p>This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub volume_size: i32,
    /// <p>The baseline IOPS of the volume.</p>
    #[doc(hidden)]
    pub volume_baseline_iops: i32,
    /// <p>The burst IOPS of the volume.</p>
    #[doc(hidden)]
    pub volume_burst_iops: i32,
    /// <p>The baseline throughput of the volume.</p>
    #[doc(hidden)]
    pub volume_baseline_throughput: i32,
    /// <p>The burst throughput of the volume.</p>
    #[doc(hidden)]
    pub volume_burst_throughput: i32,
}
impl VolumeConfiguration {
    /// <p>The volume type.</p>
    /// <p>This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
    pub fn volume_type(&self) -> std::option::Option<&str> {
        self.volume_type.as_deref()
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(&self) -> i32 {
        self.volume_size
    }
    /// <p>The baseline IOPS of the volume.</p>
    pub fn volume_baseline_iops(&self) -> i32 {
        self.volume_baseline_iops
    }
    /// <p>The burst IOPS of the volume.</p>
    pub fn volume_burst_iops(&self) -> i32 {
        self.volume_burst_iops
    }
    /// <p>The baseline throughput of the volume.</p>
    pub fn volume_baseline_throughput(&self) -> i32 {
        self.volume_baseline_throughput
    }
    /// <p>The burst throughput of the volume.</p>
    pub fn volume_burst_throughput(&self) -> i32 {
        self.volume_burst_throughput
    }
}
impl VolumeConfiguration {
    /// Creates a new builder-style object to manufacture [`VolumeConfiguration`](crate::types::VolumeConfiguration).
    pub fn builder() -> crate::types::builders::VolumeConfigurationBuilder {
        crate::types::builders::VolumeConfigurationBuilder::default()
    }
}

/// A builder for [`VolumeConfiguration`](crate::types::VolumeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeConfigurationBuilder {
    pub(crate) volume_type: std::option::Option<std::string::String>,
    pub(crate) volume_size: std::option::Option<i32>,
    pub(crate) volume_baseline_iops: std::option::Option<i32>,
    pub(crate) volume_burst_iops: std::option::Option<i32>,
    pub(crate) volume_baseline_throughput: std::option::Option<i32>,
    pub(crate) volume_burst_throughput: std::option::Option<i32>,
}
impl VolumeConfigurationBuilder {
    /// <p>The volume type.</p>
    /// <p>This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
    pub fn volume_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_type = Some(input.into());
        self
    }
    /// <p>The volume type.</p>
    /// <p>This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(mut self, input: i32) -> Self {
        self.volume_size = Some(input);
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>The baseline IOPS of the volume.</p>
    pub fn volume_baseline_iops(mut self, input: i32) -> Self {
        self.volume_baseline_iops = Some(input);
        self
    }
    /// <p>The baseline IOPS of the volume.</p>
    pub fn set_volume_baseline_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_baseline_iops = input;
        self
    }
    /// <p>The burst IOPS of the volume.</p>
    pub fn volume_burst_iops(mut self, input: i32) -> Self {
        self.volume_burst_iops = Some(input);
        self
    }
    /// <p>The burst IOPS of the volume.</p>
    pub fn set_volume_burst_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_burst_iops = input;
        self
    }
    /// <p>The baseline throughput of the volume.</p>
    pub fn volume_baseline_throughput(mut self, input: i32) -> Self {
        self.volume_baseline_throughput = Some(input);
        self
    }
    /// <p>The baseline throughput of the volume.</p>
    pub fn set_volume_baseline_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_baseline_throughput = input;
        self
    }
    /// <p>The burst throughput of the volume.</p>
    pub fn volume_burst_throughput(mut self, input: i32) -> Self {
        self.volume_burst_throughput = Some(input);
        self
    }
    /// <p>The burst throughput of the volume.</p>
    pub fn set_volume_burst_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_burst_throughput = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeConfiguration`](crate::types::VolumeConfiguration).
    pub fn build(self) -> crate::types::VolumeConfiguration {
        crate::types::VolumeConfiguration {
            volume_type: self.volume_type,
            volume_size: self.volume_size.unwrap_or_default(),
            volume_baseline_iops: self.volume_baseline_iops.unwrap_or_default(),
            volume_burst_iops: self.volume_burst_iops.unwrap_or_default(),
            volume_baseline_throughput: self.volume_baseline_throughput.unwrap_or_default(),
            volume_burst_throughput: self.volume_burst_throughput.unwrap_or_default(),
        }
    }
}
