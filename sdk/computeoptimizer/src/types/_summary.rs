// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of a recommendation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Summary {
    /// <p>The finding classification of the recommendation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::Finding>,
    /// <p>The value of the recommendation summary.</p>
    #[doc(hidden)]
    pub value: f64,
    /// <p>An array of objects that summarize a finding reason code.</p>
    #[doc(hidden)]
    pub reason_code_summaries: std::option::Option<std::vec::Vec<crate::types::ReasonCodeSummary>>,
}
impl Summary {
    /// <p>The finding classification of the recommendation.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::Finding> {
        self.name.as_ref()
    }
    /// <p>The value of the recommendation summary.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
    /// <p>An array of objects that summarize a finding reason code.</p>
    pub fn reason_code_summaries(&self) -> std::option::Option<&[crate::types::ReasonCodeSummary]> {
        self.reason_code_summaries.as_deref()
    }
}
impl Summary {
    /// Creates a new builder-style object to manufacture [`Summary`](crate::types::Summary).
    pub fn builder() -> crate::types::builders::SummaryBuilder {
        crate::types::builders::SummaryBuilder::default()
    }
}

/// A builder for [`Summary`](crate::types::Summary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SummaryBuilder {
    pub(crate) name: std::option::Option<crate::types::Finding>,
    pub(crate) value: std::option::Option<f64>,
    pub(crate) reason_code_summaries:
        std::option::Option<std::vec::Vec<crate::types::ReasonCodeSummary>>,
}
impl SummaryBuilder {
    /// <p>The finding classification of the recommendation.</p>
    pub fn name(mut self, input: crate::types::Finding) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The finding classification of the recommendation.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::Finding>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the recommendation summary.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of the recommendation summary.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Appends an item to `reason_code_summaries`.
    ///
    /// To override the contents of this collection use [`set_reason_code_summaries`](Self::set_reason_code_summaries).
    ///
    /// <p>An array of objects that summarize a finding reason code.</p>
    pub fn reason_code_summaries(mut self, input: crate::types::ReasonCodeSummary) -> Self {
        let mut v = self.reason_code_summaries.unwrap_or_default();
        v.push(input);
        self.reason_code_summaries = Some(v);
        self
    }
    /// <p>An array of objects that summarize a finding reason code.</p>
    pub fn set_reason_code_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReasonCodeSummary>>,
    ) -> Self {
        self.reason_code_summaries = input;
        self
    }
    /// Consumes the builder and constructs a [`Summary`](crate::types::Summary).
    pub fn build(self) -> crate::types::Summary {
        crate::types::Summary {
            name: self.name,
            value: self.value.unwrap_or_default(),
            reason_code_summaries: self.reason_code_summaries,
        }
    }
}
