// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RdsdbMetricName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let rdsdbmetricname = unimplemented!();
/// match rdsdbmetricname {
///     RdsdbMetricName::AuroraMemoryHealthState => { /* ... */ },
///     RdsdbMetricName::AuroraMemoryNumDeclinedSql => { /* ... */ },
///     RdsdbMetricName::AuroraMemoryNumKillConnTotal => { /* ... */ },
///     RdsdbMetricName::AuroraMemoryNumKillQueryTotal => { /* ... */ },
///     RdsdbMetricName::Cpu => { /* ... */ },
///     RdsdbMetricName::DatabaseConnections => { /* ... */ },
///     RdsdbMetricName::EbsVolumeReadIops => { /* ... */ },
///     RdsdbMetricName::EbsVolumeReadThroughput => { /* ... */ },
///     RdsdbMetricName::EbsVolumeStorageSpaceUtilization => { /* ... */ },
///     RdsdbMetricName::EbsVolumeWriteIops => { /* ... */ },
///     RdsdbMetricName::EbsVolumeWriteThroughput => { /* ... */ },
///     RdsdbMetricName::Memory => { /* ... */ },
///     RdsdbMetricName::NetworkReceiveThroughput => { /* ... */ },
///     RdsdbMetricName::NetworkTransmitThroughput => { /* ... */ },
///     RdsdbMetricName::ReadIopsEphemeralStorage => { /* ... */ },
///     RdsdbMetricName::StorageNetworkReceiveThroughput => { /* ... */ },
///     RdsdbMetricName::StorageNetworkTransmitThroughput => { /* ... */ },
///     RdsdbMetricName::VolumeBytesUsed => { /* ... */ },
///     RdsdbMetricName::VolumeReadIops => { /* ... */ },
///     RdsdbMetricName::VolumeWriteIops => { /* ... */ },
///     RdsdbMetricName::WriteIopsEphemeralStorage => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `rdsdbmetricname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RdsdbMetricName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RdsdbMetricName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RdsdbMetricName::NewFeature` is defined.
/// Specifically, when `rdsdbmetricname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RdsdbMetricName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum RdsdbMetricName {
    #[allow(missing_docs)] // documentation missing in model
    AuroraMemoryHealthState,
    #[allow(missing_docs)] // documentation missing in model
    AuroraMemoryNumDeclinedSql,
    #[allow(missing_docs)] // documentation missing in model
    AuroraMemoryNumKillConnTotal,
    #[allow(missing_docs)] // documentation missing in model
    AuroraMemoryNumKillQueryTotal,
    #[allow(missing_docs)] // documentation missing in model
    Cpu,
    #[allow(missing_docs)] // documentation missing in model
    DatabaseConnections,
    #[allow(missing_docs)] // documentation missing in model
    EbsVolumeReadIops,
    #[allow(missing_docs)] // documentation missing in model
    EbsVolumeReadThroughput,
    #[allow(missing_docs)] // documentation missing in model
    EbsVolumeStorageSpaceUtilization,
    #[allow(missing_docs)] // documentation missing in model
    EbsVolumeWriteIops,
    #[allow(missing_docs)] // documentation missing in model
    EbsVolumeWriteThroughput,
    #[allow(missing_docs)] // documentation missing in model
    Memory,
    #[allow(missing_docs)] // documentation missing in model
    NetworkReceiveThroughput,
    #[allow(missing_docs)] // documentation missing in model
    NetworkTransmitThroughput,
    #[allow(missing_docs)] // documentation missing in model
    ReadIopsEphemeralStorage,
    #[allow(missing_docs)] // documentation missing in model
    StorageNetworkReceiveThroughput,
    #[allow(missing_docs)] // documentation missing in model
    StorageNetworkTransmitThroughput,
    #[allow(missing_docs)] // documentation missing in model
    VolumeBytesUsed,
    #[allow(missing_docs)] // documentation missing in model
    VolumeReadIops,
    #[allow(missing_docs)] // documentation missing in model
    VolumeWriteIops,
    #[allow(missing_docs)] // documentation missing in model
    WriteIopsEphemeralStorage,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RdsdbMetricName {
    fn from(s: &str) -> Self {
        match s {
            "AuroraMemoryHealthState" => RdsdbMetricName::AuroraMemoryHealthState,
            "AuroraMemoryNumDeclinedSql" => RdsdbMetricName::AuroraMemoryNumDeclinedSql,
            "AuroraMemoryNumKillConnTotal" => RdsdbMetricName::AuroraMemoryNumKillConnTotal,
            "AuroraMemoryNumKillQueryTotal" => RdsdbMetricName::AuroraMemoryNumKillQueryTotal,
            "CPU" => RdsdbMetricName::Cpu,
            "DatabaseConnections" => RdsdbMetricName::DatabaseConnections,
            "EBSVolumeReadIOPS" => RdsdbMetricName::EbsVolumeReadIops,
            "EBSVolumeReadThroughput" => RdsdbMetricName::EbsVolumeReadThroughput,
            "EBSVolumeStorageSpaceUtilization" => RdsdbMetricName::EbsVolumeStorageSpaceUtilization,
            "EBSVolumeWriteIOPS" => RdsdbMetricName::EbsVolumeWriteIops,
            "EBSVolumeWriteThroughput" => RdsdbMetricName::EbsVolumeWriteThroughput,
            "Memory" => RdsdbMetricName::Memory,
            "NetworkReceiveThroughput" => RdsdbMetricName::NetworkReceiveThroughput,
            "NetworkTransmitThroughput" => RdsdbMetricName::NetworkTransmitThroughput,
            "ReadIOPSEphemeralStorage" => RdsdbMetricName::ReadIopsEphemeralStorage,
            "StorageNetworkReceiveThroughput" => RdsdbMetricName::StorageNetworkReceiveThroughput,
            "StorageNetworkTransmitThroughput" => RdsdbMetricName::StorageNetworkTransmitThroughput,
            "VolumeBytesUsed" => RdsdbMetricName::VolumeBytesUsed,
            "VolumeReadIOPs" => RdsdbMetricName::VolumeReadIops,
            "VolumeWriteIOPs" => RdsdbMetricName::VolumeWriteIops,
            "WriteIOPSEphemeralStorage" => RdsdbMetricName::WriteIopsEphemeralStorage,
            other => RdsdbMetricName::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RdsdbMetricName {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RdsdbMetricName::from(s))
    }
}
impl RdsdbMetricName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RdsdbMetricName::AuroraMemoryHealthState => "AuroraMemoryHealthState",
            RdsdbMetricName::AuroraMemoryNumDeclinedSql => "AuroraMemoryNumDeclinedSql",
            RdsdbMetricName::AuroraMemoryNumKillConnTotal => "AuroraMemoryNumKillConnTotal",
            RdsdbMetricName::AuroraMemoryNumKillQueryTotal => "AuroraMemoryNumKillQueryTotal",
            RdsdbMetricName::Cpu => "CPU",
            RdsdbMetricName::DatabaseConnections => "DatabaseConnections",
            RdsdbMetricName::EbsVolumeReadIops => "EBSVolumeReadIOPS",
            RdsdbMetricName::EbsVolumeReadThroughput => "EBSVolumeReadThroughput",
            RdsdbMetricName::EbsVolumeStorageSpaceUtilization => "EBSVolumeStorageSpaceUtilization",
            RdsdbMetricName::EbsVolumeWriteIops => "EBSVolumeWriteIOPS",
            RdsdbMetricName::EbsVolumeWriteThroughput => "EBSVolumeWriteThroughput",
            RdsdbMetricName::Memory => "Memory",
            RdsdbMetricName::NetworkReceiveThroughput => "NetworkReceiveThroughput",
            RdsdbMetricName::NetworkTransmitThroughput => "NetworkTransmitThroughput",
            RdsdbMetricName::ReadIopsEphemeralStorage => "ReadIOPSEphemeralStorage",
            RdsdbMetricName::StorageNetworkReceiveThroughput => "StorageNetworkReceiveThroughput",
            RdsdbMetricName::StorageNetworkTransmitThroughput => "StorageNetworkTransmitThroughput",
            RdsdbMetricName::VolumeBytesUsed => "VolumeBytesUsed",
            RdsdbMetricName::VolumeReadIops => "VolumeReadIOPs",
            RdsdbMetricName::VolumeWriteIops => "VolumeWriteIOPs",
            RdsdbMetricName::WriteIopsEphemeralStorage => "WriteIOPSEphemeralStorage",
            RdsdbMetricName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AuroraMemoryHealthState",
            "AuroraMemoryNumDeclinedSql",
            "AuroraMemoryNumKillConnTotal",
            "AuroraMemoryNumKillQueryTotal",
            "CPU",
            "DatabaseConnections",
            "EBSVolumeReadIOPS",
            "EBSVolumeReadThroughput",
            "EBSVolumeStorageSpaceUtilization",
            "EBSVolumeWriteIOPS",
            "EBSVolumeWriteThroughput",
            "Memory",
            "NetworkReceiveThroughput",
            "NetworkTransmitThroughput",
            "ReadIOPSEphemeralStorage",
            "StorageNetworkReceiveThroughput",
            "StorageNetworkTransmitThroughput",
            "VolumeBytesUsed",
            "VolumeReadIOPs",
            "VolumeWriteIOPs",
            "WriteIOPSEphemeralStorage",
        ]
    }
}
impl ::std::convert::AsRef<str> for RdsdbMetricName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RdsdbMetricName {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RdsdbMetricName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RdsdbMetricName::AuroraMemoryHealthState => write!(f, "AuroraMemoryHealthState"),
            RdsdbMetricName::AuroraMemoryNumDeclinedSql => write!(f, "AuroraMemoryNumDeclinedSql"),
            RdsdbMetricName::AuroraMemoryNumKillConnTotal => write!(f, "AuroraMemoryNumKillConnTotal"),
            RdsdbMetricName::AuroraMemoryNumKillQueryTotal => write!(f, "AuroraMemoryNumKillQueryTotal"),
            RdsdbMetricName::Cpu => write!(f, "CPU"),
            RdsdbMetricName::DatabaseConnections => write!(f, "DatabaseConnections"),
            RdsdbMetricName::EbsVolumeReadIops => write!(f, "EBSVolumeReadIOPS"),
            RdsdbMetricName::EbsVolumeReadThroughput => write!(f, "EBSVolumeReadThroughput"),
            RdsdbMetricName::EbsVolumeStorageSpaceUtilization => write!(f, "EBSVolumeStorageSpaceUtilization"),
            RdsdbMetricName::EbsVolumeWriteIops => write!(f, "EBSVolumeWriteIOPS"),
            RdsdbMetricName::EbsVolumeWriteThroughput => write!(f, "EBSVolumeWriteThroughput"),
            RdsdbMetricName::Memory => write!(f, "Memory"),
            RdsdbMetricName::NetworkReceiveThroughput => write!(f, "NetworkReceiveThroughput"),
            RdsdbMetricName::NetworkTransmitThroughput => write!(f, "NetworkTransmitThroughput"),
            RdsdbMetricName::ReadIopsEphemeralStorage => write!(f, "ReadIOPSEphemeralStorage"),
            RdsdbMetricName::StorageNetworkReceiveThroughput => write!(f, "StorageNetworkReceiveThroughput"),
            RdsdbMetricName::StorageNetworkTransmitThroughput => write!(f, "StorageNetworkTransmitThroughput"),
            RdsdbMetricName::VolumeBytesUsed => write!(f, "VolumeBytesUsed"),
            RdsdbMetricName::VolumeReadIops => write!(f, "VolumeReadIOPs"),
            RdsdbMetricName::VolumeWriteIops => write!(f, "VolumeWriteIOPs"),
            RdsdbMetricName::WriteIopsEphemeralStorage => write!(f, "WriteIOPSEphemeralStorage"),
            RdsdbMetricName::Unknown(value) => write!(f, "{value}"),
        }
    }
}
