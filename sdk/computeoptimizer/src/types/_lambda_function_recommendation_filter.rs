// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter that returns a more specific list of Lambda function recommendations. Use this filter with the <code>GetLambdaFunctionRecommendations</code> action.</p>
/// <p>You can use <code>EBSFilter</code> with the <code>GetEBSVolumeRecommendations</code> action, <code>JobFilter</code> with the <code>DescribeRecommendationExportJobs</code> action, and <code>Filter</code> with the <code>GetAutoScalingGroupRecommendations</code> and <code>GetEC2InstanceRecommendations</code> actions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaFunctionRecommendationFilter {
    /// <p>The name of the filter.</p>
    /// <p>Specify <code>Finding</code> to return recommendations with a specific finding classification (for example, <code>NotOptimized</code>).</p>
    /// <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific finding reason code (for example, <code>MemoryUnderprovisioned</code>).</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::LambdaFunctionRecommendationFilterName>,
    /// <p>The value of the filter.</p>
    /// <p>The valid values for this parameter are as follows, depending on what you specify for the <code>name</code> parameter:</p>
    /// <ul>
    /// <li> <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or <code>Unavailable</code> if you specify the <code>name</code> parameter as <code>Finding</code>.</p> </li>
    /// <li> <p>Specify <code>MemoryOverprovisioned</code>, <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or <code>Inconclusive</code> if you specify the <code>name</code> parameter as <code>FindingReasonCode</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LambdaFunctionRecommendationFilter {
    /// <p>The name of the filter.</p>
    /// <p>Specify <code>Finding</code> to return recommendations with a specific finding classification (for example, <code>NotOptimized</code>).</p>
    /// <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific finding reason code (for example, <code>MemoryUnderprovisioned</code>).</p>
    pub fn name(
        &self,
    ) -> std::option::Option<&crate::types::LambdaFunctionRecommendationFilterName> {
        self.name.as_ref()
    }
    /// <p>The value of the filter.</p>
    /// <p>The valid values for this parameter are as follows, depending on what you specify for the <code>name</code> parameter:</p>
    /// <ul>
    /// <li> <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or <code>Unavailable</code> if you specify the <code>name</code> parameter as <code>Finding</code>.</p> </li>
    /// <li> <p>Specify <code>MemoryOverprovisioned</code>, <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or <code>Inconclusive</code> if you specify the <code>name</code> parameter as <code>FindingReasonCode</code>.</p> </li>
    /// </ul>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
}
impl LambdaFunctionRecommendationFilter {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionRecommendationFilter`](crate::types::LambdaFunctionRecommendationFilter).
    pub fn builder() -> crate::types::builders::LambdaFunctionRecommendationFilterBuilder {
        crate::types::builders::LambdaFunctionRecommendationFilterBuilder::default()
    }
}

/// A builder for [`LambdaFunctionRecommendationFilter`](crate::types::LambdaFunctionRecommendationFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaFunctionRecommendationFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::LambdaFunctionRecommendationFilterName>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LambdaFunctionRecommendationFilterBuilder {
    /// <p>The name of the filter.</p>
    /// <p>Specify <code>Finding</code> to return recommendations with a specific finding classification (for example, <code>NotOptimized</code>).</p>
    /// <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific finding reason code (for example, <code>MemoryUnderprovisioned</code>).</p>
    pub fn name(mut self, input: crate::types::LambdaFunctionRecommendationFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the filter.</p>
    /// <p>Specify <code>Finding</code> to return recommendations with a specific finding classification (for example, <code>NotOptimized</code>).</p>
    /// <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific finding reason code (for example, <code>MemoryUnderprovisioned</code>).</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::LambdaFunctionRecommendationFilterName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value of the filter.</p>
    /// <p>The valid values for this parameter are as follows, depending on what you specify for the <code>name</code> parameter:</p>
    /// <ul>
    /// <li> <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or <code>Unavailable</code> if you specify the <code>name</code> parameter as <code>Finding</code>.</p> </li>
    /// <li> <p>Specify <code>MemoryOverprovisioned</code>, <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or <code>Inconclusive</code> if you specify the <code>name</code> parameter as <code>FindingReasonCode</code>.</p> </li>
    /// </ul>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The value of the filter.</p>
    /// <p>The valid values for this parameter are as follows, depending on what you specify for the <code>name</code> parameter:</p>
    /// <ul>
    /// <li> <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or <code>Unavailable</code> if you specify the <code>name</code> parameter as <code>Finding</code>.</p> </li>
    /// <li> <p>Specify <code>MemoryOverprovisioned</code>, <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or <code>Inconclusive</code> if you specify the <code>name</code> parameter as <code>FindingReasonCode</code>.</p> </li>
    /// </ul>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaFunctionRecommendationFilter`](crate::types::LambdaFunctionRecommendationFilter).
    pub fn build(self) -> crate::types::LambdaFunctionRecommendationFilter {
        crate::types::LambdaFunctionRecommendationFilter {
            name: self.name,
            values: self.values,
        }
    }
}
