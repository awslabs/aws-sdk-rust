// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes the external metrics preferences for EC2 rightsizing recommendations. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExternalMetricsPreference {
    /// <p> Contains the source options for external metrics preferences. </p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::ExternalMetricsSource>,
}
impl ExternalMetricsPreference {
    /// <p> Contains the source options for external metrics preferences. </p>
    pub fn source(&self) -> std::option::Option<&crate::types::ExternalMetricsSource> {
        self.source.as_ref()
    }
}
impl ExternalMetricsPreference {
    /// Creates a new builder-style object to manufacture [`ExternalMetricsPreference`](crate::types::ExternalMetricsPreference).
    pub fn builder() -> crate::types::builders::ExternalMetricsPreferenceBuilder {
        crate::types::builders::ExternalMetricsPreferenceBuilder::default()
    }
}

/// A builder for [`ExternalMetricsPreference`](crate::types::ExternalMetricsPreference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExternalMetricsPreferenceBuilder {
    pub(crate) source: std::option::Option<crate::types::ExternalMetricsSource>,
}
impl ExternalMetricsPreferenceBuilder {
    /// <p> Contains the source options for external metrics preferences. </p>
    pub fn source(mut self, input: crate::types::ExternalMetricsSource) -> Self {
        self.source = Some(input);
        self
    }
    /// <p> Contains the source options for external metrics preferences. </p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::ExternalMetricsSource>,
    ) -> Self {
        self.source = input;
        self
    }
    /// Consumes the builder and constructs a [`ExternalMetricsPreference`](crate::types::ExternalMetricsPreference).
    pub fn build(self) -> crate::types::ExternalMetricsPreference {
        crate::types::ExternalMetricsPreference {
            source: self.source,
        }
    }
}
