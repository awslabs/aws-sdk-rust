// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes a license recommendation for an EC2 instance. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LicenseRecommendation {
    /// <p> The ARN that identifies the Amazon EC2 instance. </p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Web Services account ID of the license. </p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p> An object that describes the current configuration of an instance that runs on a license. </p>
    pub current_license_configuration: ::std::option::Option<crate::types::LicenseConfiguration>,
    /// <p> The number of days for which utilization metrics were analyzed for an instance that runs on a license. </p>
    pub lookback_period_in_days: f64,
    /// <p> The timestamp of when the license recommendation was last generated. </p>
    pub last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The finding classification for an instance that runs on a license. </p>
    /// <p>Findings include:</p>
    /// <ul>
    /// <li> <p> <code>InsufficentMetrics</code> — When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions. </p> </li>
    /// <li> <p> <code>NotOptimized</code> — When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.</p> </li>
    /// <li> <p> <code>Optimized</code> — When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload. </p> </li>
    /// </ul>
    pub finding: ::std::option::Option<crate::types::LicenseFinding>,
    /// <p> The reason for the finding classification for an instance that runs on a license. </p>
    /// <p>Finding reason codes include:</p>
    /// <ul>
    /// <li> <p> <code>Optimized</code> — All specifications of your license meet the performance requirements of your workload. </p> </li>
    /// <li> <p> <code>LicenseOverprovisioned</code> — A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.</p> </li>
    /// <li> <p> <code>InvalidCloudwatchApplicationInsights</code> — CloudWatch Application Insights isn't configured properly.</p> </li>
    /// <li> <p> <code>CloudwatchApplicationInsightsError</code> — There is a CloudWatch Application Insights error. </p> </li>
    /// </ul>
    pub finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::LicenseFindingReasonCode>>,
    /// <p> An array of objects that describe the license recommendation options. </p>
    pub license_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::LicenseRecommendationOption>>,
    /// <p> A list of tags assigned to an EC2 instance. </p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl LicenseRecommendation {
    /// <p> The ARN that identifies the Amazon EC2 instance. </p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p> The Amazon Web Services account ID of the license. </p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p> An object that describes the current configuration of an instance that runs on a license. </p>
    pub fn current_license_configuration(&self) -> ::std::option::Option<&crate::types::LicenseConfiguration> {
        self.current_license_configuration.as_ref()
    }
    /// <p> The number of days for which utilization metrics were analyzed for an instance that runs on a license. </p>
    pub fn lookback_period_in_days(&self) -> f64 {
        self.lookback_period_in_days
    }
    /// <p> The timestamp of when the license recommendation was last generated. </p>
    pub fn last_refresh_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_refresh_timestamp.as_ref()
    }
    /// <p> The finding classification for an instance that runs on a license. </p>
    /// <p>Findings include:</p>
    /// <ul>
    /// <li> <p> <code>InsufficentMetrics</code> — When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions. </p> </li>
    /// <li> <p> <code>NotOptimized</code> — When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.</p> </li>
    /// <li> <p> <code>Optimized</code> — When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload. </p> </li>
    /// </ul>
    pub fn finding(&self) -> ::std::option::Option<&crate::types::LicenseFinding> {
        self.finding.as_ref()
    }
    /// <p> The reason for the finding classification for an instance that runs on a license. </p>
    /// <p>Finding reason codes include:</p>
    /// <ul>
    /// <li> <p> <code>Optimized</code> — All specifications of your license meet the performance requirements of your workload. </p> </li>
    /// <li> <p> <code>LicenseOverprovisioned</code> — A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.</p> </li>
    /// <li> <p> <code>InvalidCloudwatchApplicationInsights</code> — CloudWatch Application Insights isn't configured properly.</p> </li>
    /// <li> <p> <code>CloudwatchApplicationInsightsError</code> — There is a CloudWatch Application Insights error. </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_reason_codes.is_none()`.
    pub fn finding_reason_codes(&self) -> &[crate::types::LicenseFindingReasonCode] {
        self.finding_reason_codes.as_deref().unwrap_or_default()
    }
    /// <p> An array of objects that describe the license recommendation options. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.license_recommendation_options.is_none()`.
    pub fn license_recommendation_options(&self) -> &[crate::types::LicenseRecommendationOption] {
        self.license_recommendation_options.as_deref().unwrap_or_default()
    }
    /// <p> A list of tags assigned to an EC2 instance. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl LicenseRecommendation {
    /// Creates a new builder-style object to manufacture [`LicenseRecommendation`](crate::types::LicenseRecommendation).
    pub fn builder() -> crate::types::builders::LicenseRecommendationBuilder {
        crate::types::builders::LicenseRecommendationBuilder::default()
    }
}

/// A builder for [`LicenseRecommendation`](crate::types::LicenseRecommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LicenseRecommendationBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) current_license_configuration: ::std::option::Option<crate::types::LicenseConfiguration>,
    pub(crate) lookback_period_in_days: ::std::option::Option<f64>,
    pub(crate) last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) finding: ::std::option::Option<crate::types::LicenseFinding>,
    pub(crate) finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::LicenseFindingReasonCode>>,
    pub(crate) license_recommendation_options: ::std::option::Option<::std::vec::Vec<crate::types::LicenseRecommendationOption>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl LicenseRecommendationBuilder {
    /// <p> The ARN that identifies the Amazon EC2 instance. </p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN that identifies the Amazon EC2 instance. </p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p> The ARN that identifies the Amazon EC2 instance. </p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p> The Amazon Web Services account ID of the license. </p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Web Services account ID of the license. </p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p> The Amazon Web Services account ID of the license. </p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p> An object that describes the current configuration of an instance that runs on a license. </p>
    pub fn current_license_configuration(mut self, input: crate::types::LicenseConfiguration) -> Self {
        self.current_license_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> An object that describes the current configuration of an instance that runs on a license. </p>
    pub fn set_current_license_configuration(mut self, input: ::std::option::Option<crate::types::LicenseConfiguration>) -> Self {
        self.current_license_configuration = input;
        self
    }
    /// <p> An object that describes the current configuration of an instance that runs on a license. </p>
    pub fn get_current_license_configuration(&self) -> &::std::option::Option<crate::types::LicenseConfiguration> {
        &self.current_license_configuration
    }
    /// <p> The number of days for which utilization metrics were analyzed for an instance that runs on a license. </p>
    pub fn lookback_period_in_days(mut self, input: f64) -> Self {
        self.lookback_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of days for which utilization metrics were analyzed for an instance that runs on a license. </p>
    pub fn set_lookback_period_in_days(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lookback_period_in_days = input;
        self
    }
    /// <p> The number of days for which utilization metrics were analyzed for an instance that runs on a license. </p>
    pub fn get_lookback_period_in_days(&self) -> &::std::option::Option<f64> {
        &self.lookback_period_in_days
    }
    /// <p> The timestamp of when the license recommendation was last generated. </p>
    pub fn last_refresh_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_refresh_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp of when the license recommendation was last generated. </p>
    pub fn set_last_refresh_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_refresh_timestamp = input;
        self
    }
    /// <p> The timestamp of when the license recommendation was last generated. </p>
    pub fn get_last_refresh_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_refresh_timestamp
    }
    /// <p> The finding classification for an instance that runs on a license. </p>
    /// <p>Findings include:</p>
    /// <ul>
    /// <li> <p> <code>InsufficentMetrics</code> — When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions. </p> </li>
    /// <li> <p> <code>NotOptimized</code> — When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.</p> </li>
    /// <li> <p> <code>Optimized</code> — When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload. </p> </li>
    /// </ul>
    pub fn finding(mut self, input: crate::types::LicenseFinding) -> Self {
        self.finding = ::std::option::Option::Some(input);
        self
    }
    /// <p> The finding classification for an instance that runs on a license. </p>
    /// <p>Findings include:</p>
    /// <ul>
    /// <li> <p> <code>InsufficentMetrics</code> — When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions. </p> </li>
    /// <li> <p> <code>NotOptimized</code> — When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.</p> </li>
    /// <li> <p> <code>Optimized</code> — When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload. </p> </li>
    /// </ul>
    pub fn set_finding(mut self, input: ::std::option::Option<crate::types::LicenseFinding>) -> Self {
        self.finding = input;
        self
    }
    /// <p> The finding classification for an instance that runs on a license. </p>
    /// <p>Findings include:</p>
    /// <ul>
    /// <li> <p> <code>InsufficentMetrics</code> — When Compute Optimizer detects that your CloudWatch Application Insights isn't enabled or is enabled with insufficient permissions. </p> </li>
    /// <li> <p> <code>NotOptimized</code> — When Compute Optimizer detects that your EC2 infrastructure isn't using any of the SQL server license features you're paying for, a license is considered not optimized.</p> </li>
    /// <li> <p> <code>Optimized</code> — When Compute Optimizer detects that all specifications of your license meet the performance requirements of your workload. </p> </li>
    /// </ul>
    pub fn get_finding(&self) -> &::std::option::Option<crate::types::LicenseFinding> {
        &self.finding
    }
    /// Appends an item to `finding_reason_codes`.
    ///
    /// To override the contents of this collection use [`set_finding_reason_codes`](Self::set_finding_reason_codes).
    ///
    /// <p> The reason for the finding classification for an instance that runs on a license. </p>
    /// <p>Finding reason codes include:</p>
    /// <ul>
    /// <li> <p> <code>Optimized</code> — All specifications of your license meet the performance requirements of your workload. </p> </li>
    /// <li> <p> <code>LicenseOverprovisioned</code> — A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.</p> </li>
    /// <li> <p> <code>InvalidCloudwatchApplicationInsights</code> — CloudWatch Application Insights isn't configured properly.</p> </li>
    /// <li> <p> <code>CloudwatchApplicationInsightsError</code> — There is a CloudWatch Application Insights error. </p> </li>
    /// </ul>
    pub fn finding_reason_codes(mut self, input: crate::types::LicenseFindingReasonCode) -> Self {
        let mut v = self.finding_reason_codes.unwrap_or_default();
        v.push(input);
        self.finding_reason_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p> The reason for the finding classification for an instance that runs on a license. </p>
    /// <p>Finding reason codes include:</p>
    /// <ul>
    /// <li> <p> <code>Optimized</code> — All specifications of your license meet the performance requirements of your workload. </p> </li>
    /// <li> <p> <code>LicenseOverprovisioned</code> — A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.</p> </li>
    /// <li> <p> <code>InvalidCloudwatchApplicationInsights</code> — CloudWatch Application Insights isn't configured properly.</p> </li>
    /// <li> <p> <code>CloudwatchApplicationInsightsError</code> — There is a CloudWatch Application Insights error. </p> </li>
    /// </ul>
    pub fn set_finding_reason_codes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LicenseFindingReasonCode>>) -> Self {
        self.finding_reason_codes = input;
        self
    }
    /// <p> The reason for the finding classification for an instance that runs on a license. </p>
    /// <p>Finding reason codes include:</p>
    /// <ul>
    /// <li> <p> <code>Optimized</code> — All specifications of your license meet the performance requirements of your workload. </p> </li>
    /// <li> <p> <code>LicenseOverprovisioned</code> — A license is considered over-provisioned when your license can be downgraded while still meeting the performance requirements of your workload.</p> </li>
    /// <li> <p> <code>InvalidCloudwatchApplicationInsights</code> — CloudWatch Application Insights isn't configured properly.</p> </li>
    /// <li> <p> <code>CloudwatchApplicationInsightsError</code> — There is a CloudWatch Application Insights error. </p> </li>
    /// </ul>
    pub fn get_finding_reason_codes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LicenseFindingReasonCode>> {
        &self.finding_reason_codes
    }
    /// Appends an item to `license_recommendation_options`.
    ///
    /// To override the contents of this collection use [`set_license_recommendation_options`](Self::set_license_recommendation_options).
    ///
    /// <p> An array of objects that describe the license recommendation options. </p>
    pub fn license_recommendation_options(mut self, input: crate::types::LicenseRecommendationOption) -> Self {
        let mut v = self.license_recommendation_options.unwrap_or_default();
        v.push(input);
        self.license_recommendation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p> An array of objects that describe the license recommendation options. </p>
    pub fn set_license_recommendation_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::LicenseRecommendationOption>>,
    ) -> Self {
        self.license_recommendation_options = input;
        self
    }
    /// <p> An array of objects that describe the license recommendation options. </p>
    pub fn get_license_recommendation_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LicenseRecommendationOption>> {
        &self.license_recommendation_options
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A list of tags assigned to an EC2 instance. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of tags assigned to an EC2 instance. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> A list of tags assigned to an EC2 instance. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`LicenseRecommendation`](crate::types::LicenseRecommendation).
    pub fn build(self) -> crate::types::LicenseRecommendation {
        crate::types::LicenseRecommendation {
            resource_arn: self.resource_arn,
            account_id: self.account_id,
            current_license_configuration: self.current_license_configuration,
            lookback_period_in_days: self.lookback_period_in_days.unwrap_or_default(),
            last_refresh_timestamp: self.last_refresh_timestamp,
            finding: self.finding,
            finding_reason_codes: self.finding_reason_codes,
            license_recommendation_options: self.license_recommendation_options,
            tags: self.tags,
        }
    }
}
