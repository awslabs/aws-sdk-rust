// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The Amazon ECS service configurations used for recommendations. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceConfiguration {
    /// <p> The amount of memory used by the tasks in the Amazon ECS service. </p>
    pub memory: ::std::option::Option<i32>,
    /// <p> The number of CPU units used by the tasks in the Amazon ECS service. </p>
    pub cpu: ::std::option::Option<i32>,
    /// <p> The container configurations within a task of an Amazon ECS service. </p>
    pub container_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ContainerConfiguration>>,
    /// <p> Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. </p>
    /// <p>The Auto Scaling configuration methods include:</p>
    /// <ul>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_CPU</code> — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.</p> </li>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_MEMORY</code> — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.</p> </li>
    /// </ul>
    /// <p>For more information about step scaling and target scaling, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html"> Step scaling policies for Application Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html"> Target tracking scaling policies for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    pub auto_scaling_configuration: ::std::option::Option<crate::types::AutoScalingConfiguration>,
    /// <p> The task definition ARN used by the tasks in the Amazon ECS service. </p>
    pub task_definition_arn: ::std::option::Option<::std::string::String>,
}
impl ServiceConfiguration {
    /// <p> The amount of memory used by the tasks in the Amazon ECS service. </p>
    pub fn memory(&self) -> ::std::option::Option<i32> {
        self.memory
    }
    /// <p> The number of CPU units used by the tasks in the Amazon ECS service. </p>
    pub fn cpu(&self) -> ::std::option::Option<i32> {
        self.cpu
    }
    /// <p> The container configurations within a task of an Amazon ECS service. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_configurations.is_none()`.
    pub fn container_configurations(&self) -> &[crate::types::ContainerConfiguration] {
        self.container_configurations.as_deref().unwrap_or_default()
    }
    /// <p> Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. </p>
    /// <p>The Auto Scaling configuration methods include:</p>
    /// <ul>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_CPU</code> — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.</p> </li>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_MEMORY</code> — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.</p> </li>
    /// </ul>
    /// <p>For more information about step scaling and target scaling, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html"> Step scaling policies for Application Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html"> Target tracking scaling policies for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    pub fn auto_scaling_configuration(&self) -> ::std::option::Option<&crate::types::AutoScalingConfiguration> {
        self.auto_scaling_configuration.as_ref()
    }
    /// <p> The task definition ARN used by the tasks in the Amazon ECS service. </p>
    pub fn task_definition_arn(&self) -> ::std::option::Option<&str> {
        self.task_definition_arn.as_deref()
    }
}
impl ServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`ServiceConfiguration`](crate::types::ServiceConfiguration).
    pub fn builder() -> crate::types::builders::ServiceConfigurationBuilder {
        crate::types::builders::ServiceConfigurationBuilder::default()
    }
}

/// A builder for [`ServiceConfiguration`](crate::types::ServiceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServiceConfigurationBuilder {
    pub(crate) memory: ::std::option::Option<i32>,
    pub(crate) cpu: ::std::option::Option<i32>,
    pub(crate) container_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ContainerConfiguration>>,
    pub(crate) auto_scaling_configuration: ::std::option::Option<crate::types::AutoScalingConfiguration>,
    pub(crate) task_definition_arn: ::std::option::Option<::std::string::String>,
}
impl ServiceConfigurationBuilder {
    /// <p> The amount of memory used by the tasks in the Amazon ECS service. </p>
    pub fn memory(mut self, input: i32) -> Self {
        self.memory = ::std::option::Option::Some(input);
        self
    }
    /// <p> The amount of memory used by the tasks in the Amazon ECS service. </p>
    pub fn set_memory(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory = input;
        self
    }
    /// <p> The amount of memory used by the tasks in the Amazon ECS service. </p>
    pub fn get_memory(&self) -> &::std::option::Option<i32> {
        &self.memory
    }
    /// <p> The number of CPU units used by the tasks in the Amazon ECS service. </p>
    pub fn cpu(mut self, input: i32) -> Self {
        self.cpu = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of CPU units used by the tasks in the Amazon ECS service. </p>
    pub fn set_cpu(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu = input;
        self
    }
    /// <p> The number of CPU units used by the tasks in the Amazon ECS service. </p>
    pub fn get_cpu(&self) -> &::std::option::Option<i32> {
        &self.cpu
    }
    /// Appends an item to `container_configurations`.
    ///
    /// To override the contents of this collection use [`set_container_configurations`](Self::set_container_configurations).
    ///
    /// <p> The container configurations within a task of an Amazon ECS service. </p>
    pub fn container_configurations(mut self, input: crate::types::ContainerConfiguration) -> Self {
        let mut v = self.container_configurations.unwrap_or_default();
        v.push(input);
        self.container_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p> The container configurations within a task of an Amazon ECS service. </p>
    pub fn set_container_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerConfiguration>>) -> Self {
        self.container_configurations = input;
        self
    }
    /// <p> The container configurations within a task of an Amazon ECS service. </p>
    pub fn get_container_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerConfiguration>> {
        &self.container_configurations
    }
    /// <p> Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. </p>
    /// <p>The Auto Scaling configuration methods include:</p>
    /// <ul>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_CPU</code> — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.</p> </li>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_MEMORY</code> — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.</p> </li>
    /// </ul>
    /// <p>For more information about step scaling and target scaling, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html"> Step scaling policies for Application Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html"> Target tracking scaling policies for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    pub fn auto_scaling_configuration(mut self, input: crate::types::AutoScalingConfiguration) -> Self {
        self.auto_scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. </p>
    /// <p>The Auto Scaling configuration methods include:</p>
    /// <ul>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_CPU</code> — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.</p> </li>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_MEMORY</code> — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.</p> </li>
    /// </ul>
    /// <p>For more information about step scaling and target scaling, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html"> Step scaling policies for Application Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html"> Target tracking scaling policies for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    pub fn set_auto_scaling_configuration(mut self, input: ::std::option::Option<crate::types::AutoScalingConfiguration>) -> Self {
        self.auto_scaling_configuration = input;
        self
    }
    /// <p> Describes the Auto Scaling configuration methods for an Amazon ECS service. This affects the generated recommendations. For example, if Auto Scaling is configured on a service’s CPU, then Compute Optimizer doesn’t generate CPU size recommendations. </p>
    /// <p>The Auto Scaling configuration methods include:</p>
    /// <ul>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_CPU</code> — If the Amazon ECS service is configured to use target scaling on CPU, Compute Optimizer doesn't generate CPU recommendations.</p> </li>
    /// <li> <p> <code>TARGET_TRACKING_SCALING_MEMORY</code> — If the Amazon ECS service is configured to use target scaling on memory, Compute Optimizer doesn't generate memory recommendations.</p> </li>
    /// </ul>
    /// <p>For more information about step scaling and target scaling, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html"> Step scaling policies for Application Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html"> Target tracking scaling policies for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    pub fn get_auto_scaling_configuration(&self) -> &::std::option::Option<crate::types::AutoScalingConfiguration> {
        &self.auto_scaling_configuration
    }
    /// <p> The task definition ARN used by the tasks in the Amazon ECS service. </p>
    pub fn task_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The task definition ARN used by the tasks in the Amazon ECS service. </p>
    pub fn set_task_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_definition_arn = input;
        self
    }
    /// <p> The task definition ARN used by the tasks in the Amazon ECS service. </p>
    pub fn get_task_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_definition_arn
    }
    /// Consumes the builder and constructs a [`ServiceConfiguration`](crate::types::ServiceConfiguration).
    pub fn build(self) -> crate::types::ServiceConfiguration {
        crate::types::ServiceConfiguration {
            memory: self.memory,
            cpu: self.cpu,
            container_configurations: self.container_configurations,
            auto_scaling_configuration: self.auto_scaling_configuration,
            task_definition_arn: self.task_definition_arn,
        }
    }
}
