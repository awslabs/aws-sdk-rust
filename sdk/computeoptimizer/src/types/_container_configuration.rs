// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes the container configurations within the tasks of your Amazon ECS service. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerConfiguration {
    /// <p> The name of the container. </p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
    /// <p> The memory size configurations for the container. </p>
    #[doc(hidden)]
    pub memory_size_configuration: std::option::Option<crate::types::MemorySizeConfiguration>,
    /// <p> The number of CPU units reserved for the container. </p>
    #[doc(hidden)]
    pub cpu: std::option::Option<i32>,
}
impl ContainerConfiguration {
    /// <p> The name of the container. </p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p> The memory size configurations for the container. </p>
    pub fn memory_size_configuration(
        &self,
    ) -> std::option::Option<&crate::types::MemorySizeConfiguration> {
        self.memory_size_configuration.as_ref()
    }
    /// <p> The number of CPU units reserved for the container. </p>
    pub fn cpu(&self) -> std::option::Option<i32> {
        self.cpu
    }
}
impl ContainerConfiguration {
    /// Creates a new builder-style object to manufacture [`ContainerConfiguration`](crate::types::ContainerConfiguration).
    pub fn builder() -> crate::types::builders::ContainerConfigurationBuilder {
        crate::types::builders::ContainerConfigurationBuilder::default()
    }
}

/// A builder for [`ContainerConfiguration`](crate::types::ContainerConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerConfigurationBuilder {
    pub(crate) container_name: std::option::Option<std::string::String>,
    pub(crate) memory_size_configuration:
        std::option::Option<crate::types::MemorySizeConfiguration>,
    pub(crate) cpu: std::option::Option<i32>,
}
impl ContainerConfigurationBuilder {
    /// <p> The name of the container. </p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p> The name of the container. </p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p> The memory size configurations for the container. </p>
    pub fn memory_size_configuration(
        mut self,
        input: crate::types::MemorySizeConfiguration,
    ) -> Self {
        self.memory_size_configuration = Some(input);
        self
    }
    /// <p> The memory size configurations for the container. </p>
    pub fn set_memory_size_configuration(
        mut self,
        input: std::option::Option<crate::types::MemorySizeConfiguration>,
    ) -> Self {
        self.memory_size_configuration = input;
        self
    }
    /// <p> The number of CPU units reserved for the container. </p>
    pub fn cpu(mut self, input: i32) -> Self {
        self.cpu = Some(input);
        self
    }
    /// <p> The number of CPU units reserved for the container. </p>
    pub fn set_cpu(mut self, input: std::option::Option<i32>) -> Self {
        self.cpu = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerConfiguration`](crate::types::ContainerConfiguration).
    pub fn build(self) -> crate::types::ContainerConfiguration {
        crate::types::ContainerConfiguration {
            container_name: self.container_name,
            memory_size_configuration: self.memory_size_configuration,
            cpu: self.cpu,
        }
    }
}
