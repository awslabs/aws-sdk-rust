// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the performance risk ratings for a given resource type.</p>
/// <p>Resources with a <code>high</code> or <code>medium</code> rating are at risk of not meeting the performance needs of their workloads, while resources with a <code>low</code> rating are performing well in their workloads.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CurrentPerformanceRiskRatings {
    /// <p>A count of the applicable resource types with a high performance risk rating.</p>
    #[doc(hidden)]
    pub high: i64,
    /// <p>A count of the applicable resource types with a medium performance risk rating.</p>
    #[doc(hidden)]
    pub medium: i64,
    /// <p>A count of the applicable resource types with a low performance risk rating.</p>
    #[doc(hidden)]
    pub low: i64,
    /// <p>A count of the applicable resource types with a very low performance risk rating.</p>
    #[doc(hidden)]
    pub very_low: i64,
}
impl CurrentPerformanceRiskRatings {
    /// <p>A count of the applicable resource types with a high performance risk rating.</p>
    pub fn high(&self) -> i64 {
        self.high
    }
    /// <p>A count of the applicable resource types with a medium performance risk rating.</p>
    pub fn medium(&self) -> i64 {
        self.medium
    }
    /// <p>A count of the applicable resource types with a low performance risk rating.</p>
    pub fn low(&self) -> i64 {
        self.low
    }
    /// <p>A count of the applicable resource types with a very low performance risk rating.</p>
    pub fn very_low(&self) -> i64 {
        self.very_low
    }
}
impl CurrentPerformanceRiskRatings {
    /// Creates a new builder-style object to manufacture [`CurrentPerformanceRiskRatings`](crate::types::CurrentPerformanceRiskRatings).
    pub fn builder() -> crate::types::builders::CurrentPerformanceRiskRatingsBuilder {
        crate::types::builders::CurrentPerformanceRiskRatingsBuilder::default()
    }
}

/// A builder for [`CurrentPerformanceRiskRatings`](crate::types::CurrentPerformanceRiskRatings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CurrentPerformanceRiskRatingsBuilder {
    pub(crate) high: std::option::Option<i64>,
    pub(crate) medium: std::option::Option<i64>,
    pub(crate) low: std::option::Option<i64>,
    pub(crate) very_low: std::option::Option<i64>,
}
impl CurrentPerformanceRiskRatingsBuilder {
    /// <p>A count of the applicable resource types with a high performance risk rating.</p>
    pub fn high(mut self, input: i64) -> Self {
        self.high = Some(input);
        self
    }
    /// <p>A count of the applicable resource types with a high performance risk rating.</p>
    pub fn set_high(mut self, input: std::option::Option<i64>) -> Self {
        self.high = input;
        self
    }
    /// <p>A count of the applicable resource types with a medium performance risk rating.</p>
    pub fn medium(mut self, input: i64) -> Self {
        self.medium = Some(input);
        self
    }
    /// <p>A count of the applicable resource types with a medium performance risk rating.</p>
    pub fn set_medium(mut self, input: std::option::Option<i64>) -> Self {
        self.medium = input;
        self
    }
    /// <p>A count of the applicable resource types with a low performance risk rating.</p>
    pub fn low(mut self, input: i64) -> Self {
        self.low = Some(input);
        self
    }
    /// <p>A count of the applicable resource types with a low performance risk rating.</p>
    pub fn set_low(mut self, input: std::option::Option<i64>) -> Self {
        self.low = input;
        self
    }
    /// <p>A count of the applicable resource types with a very low performance risk rating.</p>
    pub fn very_low(mut self, input: i64) -> Self {
        self.very_low = Some(input);
        self
    }
    /// <p>A count of the applicable resource types with a very low performance risk rating.</p>
    pub fn set_very_low(mut self, input: std::option::Option<i64>) -> Self {
        self.very_low = input;
        self
    }
    /// Consumes the builder and constructs a [`CurrentPerformanceRiskRatings`](crate::types::CurrentPerformanceRiskRatings).
    pub fn build(self) -> crate::types::CurrentPerformanceRiskRatings {
        crate::types::CurrentPerformanceRiskRatings {
            high: self.high.unwrap_or_default(),
            medium: self.medium.unwrap_or_default(),
            low: self.low.unwrap_or_default(),
            very_low: self.very_low.unwrap_or_default(),
        }
    }
}
