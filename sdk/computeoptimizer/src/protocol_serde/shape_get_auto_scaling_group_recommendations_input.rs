// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_auto_scaling_group_recommendations_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_auto_scaling_group_recommendations::GetAutoScalingGroupRecommendationsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("accountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.auto_scaling_group_arns {
        let mut array_5 = object.key("autoScalingGroupArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.next_token {
        object.key("nextToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.filters {
        let mut array_10 = object.key("filters").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_filter::ser_filter(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.recommendation_preferences {
        #[allow(unused_mut)]
        let mut object_14 = object.key("recommendationPreferences").start_object();
        crate::protocol_serde::shape_recommendation_preferences::ser_recommendation_preferences(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
