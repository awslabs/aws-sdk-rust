// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_instance_recommendation<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::InstanceRecommendation>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InstanceRecommendationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "instanceArn" => {
                                builder = builder.set_instance_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "accountId" => {
                                builder = builder.set_account_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "instanceName" => {
                                builder = builder.set_instance_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "currentInstanceType" => {
                                builder = builder.set_current_instance_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "finding" => {
                                builder = builder.set_finding(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Finding::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "findingReasonCodes" => {
                                builder = builder.set_finding_reason_codes(
                                    crate::protocol_serde::shape_instance_recommendation_finding_reason_codes::de_instance_recommendation_finding_reason_codes(tokens)?
                                );
                            }
                            "utilizationMetrics" => {
                                builder = builder.set_utilization_metrics(
                                    crate::protocol_serde::shape_utilization_metrics::de_utilization_metrics(tokens)?
                                );
                            }
                            "lookBackPeriodInDays" => {
                                builder = builder.set_look_back_period_in_days(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "recommendationOptions" => {
                                builder = builder.set_recommendation_options(
                                    crate::protocol_serde::shape_recommendation_options::de_recommendation_options(tokens)?
                                );
                            }
                            "recommendationSources" => {
                                builder = builder.set_recommendation_sources(
                                    crate::protocol_serde::shape_recommendation_sources::de_recommendation_sources(tokens)?
                                );
                            }
                            "lastRefreshTimestamp" => {
                                builder = builder.set_last_refresh_timestamp(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "currentPerformanceRisk" => {
                                builder = builder.set_current_performance_risk(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::CurrentPerformanceRisk::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "effectiveRecommendationPreferences" => {
                                builder = builder.set_effective_recommendation_preferences(
                                    crate::protocol_serde::shape_effective_recommendation_preferences::de_effective_recommendation_preferences(tokens)?
                                );
                            }
                            "inferredWorkloadTypes" => {
                                builder = builder.set_inferred_workload_types(
                                    crate::protocol_serde::shape_inferred_workload_types::de_inferred_workload_types(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
