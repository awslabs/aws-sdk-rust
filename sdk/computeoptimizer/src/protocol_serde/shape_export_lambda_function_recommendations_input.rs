// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_export_lambda_function_recommendations_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::export_lambda_function_recommendations::ExportLambdaFunctionRecommendationsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("accountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.filters {
        let mut array_5 = object.key("filters").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_lambda_function_recommendation_filter::ser_lambda_function_recommendation_filter(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.fields_to_export {
        let mut array_9 = object.key("fieldsToExport").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.s3_destination_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("s3DestinationConfig").start_object();
        crate::protocol_serde::shape_s3_destination_config::ser_s3_destination_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.file_format {
        object.key("fileFormat").string(var_13.as_str());
    }
    if let Some(var_14) = &input.include_member_accounts {
        object.key("includeMemberAccounts").boolean(*var_14);
    }
    Ok(())
}
