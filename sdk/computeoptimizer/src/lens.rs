// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_recommendation_export_jobs_output_next_token(
    input: &crate::output::DescribeRecommendationExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_enrollment_statuses_for_organization_output_next_token(
    input: &crate::output::GetEnrollmentStatusesForOrganizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_lambda_function_recommendations_output_next_token(
    input: &crate::output::GetLambdaFunctionRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_recommendation_preferences_output_next_token(
    input: &crate::output::GetRecommendationPreferencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_recommendation_summaries_output_next_token(
    input: &crate::output::GetRecommendationSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_recommendation_export_jobs_output_recommendation_export_jobs(
    input: crate::output::DescribeRecommendationExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecommendationExportJob>> {
    let input = match input.recommendation_export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_enrollment_statuses_for_organization_output_account_enrollment_statuses(
    input: crate::output::GetEnrollmentStatusesForOrganizationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccountEnrollmentStatus>> {
    let input = match input.account_enrollment_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_lambda_function_recommendations_output_lambda_function_recommendations(
    input: crate::output::GetLambdaFunctionRecommendationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LambdaFunctionRecommendation>> {
    let input = match input.lambda_function_recommendations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_recommendation_preferences_output_recommendation_preferences_details(
    input: crate::output::GetRecommendationPreferencesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecommendationPreferencesDetail>> {
    let input = match input.recommendation_preferences_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_recommendation_summaries_output_recommendation_summaries(
    input: crate::output::GetRecommendationSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecommendationSummary>> {
    let input = match input.recommendation_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
