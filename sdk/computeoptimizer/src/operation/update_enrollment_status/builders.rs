// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_enrollment_status::_update_enrollment_status_output::UpdateEnrollmentStatusOutputBuilder;

pub use crate::operation::update_enrollment_status::_update_enrollment_status_input::UpdateEnrollmentStatusInputBuilder;

impl crate::operation::update_enrollment_status::builders::UpdateEnrollmentStatusInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_enrollment_status::UpdateEnrollmentStatusError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_enrollment_status();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateEnrollmentStatus`.
///
/// <p>Updates the enrollment (opt in and opt out) status of an account to the Compute Optimizer service.</p>
/// <p>If the account is a management account of an organization, this action can also be used to enroll member accounts of the organization.</p>
/// <p>You must have the appropriate permissions to opt in to Compute Optimizer, to view its recommendations, and to opt out. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html">Controlling access with Amazon Web Services Identity and Access Management</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>When you opt in, Compute Optimizer automatically creates a service-linked role in your account to access its data. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/using-service-linked-roles.html">Using Service-Linked Roles for Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateEnrollmentStatusFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_enrollment_status::builders::UpdateEnrollmentStatusInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput,
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusError,
    > for UpdateEnrollmentStatusFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput,
            crate::operation::update_enrollment_status::UpdateEnrollmentStatusError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateEnrollmentStatusFluentBuilder {
    /// Creates a new `UpdateEnrollmentStatus`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateEnrollmentStatus as a reference.
    pub fn as_input(&self) -> &crate::operation::update_enrollment_status::builders::UpdateEnrollmentStatusInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_enrollment_status::UpdateEnrollmentStatusError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_enrollment_status::UpdateEnrollmentStatus::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_enrollment_status::UpdateEnrollmentStatus::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput,
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The new enrollment status of the account.</p>
    /// <p>The following status options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>Active</code> - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics analyzed by Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p></li>
    /// <li>
    /// <p><code>Inactive</code> - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.</p></li>
    /// </ul><note>
    /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.</p>
    /// </note>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The new enrollment status of the account.</p>
    /// <p>The following status options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>Active</code> - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics analyzed by Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p></li>
    /// <li>
    /// <p><code>Inactive</code> - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.</p></li>
    /// </ul><note>
    /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.</p>
    /// </note>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The new enrollment status of the account.</p>
    /// <p>The following status options are available:</p>
    /// <ul>
    /// <li>
    /// <p><code>Active</code> - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics analyzed by Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p></li>
    /// <li>
    /// <p><code>Inactive</code> - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.</p></li>
    /// </ul><note>
    /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.</p>
    /// </note>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        self.inner.get_status()
    }
    /// <p>Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.</p>
    pub fn include_member_accounts(mut self, input: bool) -> Self {
        self.inner = self.inner.include_member_accounts(input);
        self
    }
    /// <p>Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.</p>
    pub fn set_include_member_accounts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_member_accounts(input);
        self
    }
    /// <p>Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.</p>
    pub fn get_include_member_accounts(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_member_accounts()
    }
}
