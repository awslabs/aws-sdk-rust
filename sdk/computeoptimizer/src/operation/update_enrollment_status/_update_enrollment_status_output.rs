// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEnrollmentStatusOutput {
    /// <p>The enrollment status of the account.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>The reason for the enrollment status of the account. For example, an account might show a status of <code>Pending</code> because member accounts of an organization require more time to be enrolled in the service.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateEnrollmentStatusOutput {
    /// <p>The enrollment status of the account.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The reason for the enrollment status of the account. For example, an account might show a status of <code>Pending</code> because member accounts of an organization require more time to be enrolled in the service.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateEnrollmentStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateEnrollmentStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEnrollmentStatusOutput`](crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput).
    pub fn builder(
    ) -> crate::operation::update_enrollment_status::builders::UpdateEnrollmentStatusOutputBuilder
    {
        crate::operation::update_enrollment_status::builders::UpdateEnrollmentStatusOutputBuilder::default()
    }
}

/// A builder for [`UpdateEnrollmentStatusOutput`](crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateEnrollmentStatusOutputBuilder {
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateEnrollmentStatusOutputBuilder {
    /// <p>The enrollment status of the account.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The enrollment status of the account.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason for the enrollment status of the account. For example, an account might show a status of <code>Pending</code> because member accounts of an organization require more time to be enrolled in the service.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>The reason for the enrollment status of the account. For example, an account might show a status of <code>Pending</code> because member accounts of an organization require more time to be enrolled in the service.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEnrollmentStatusOutput`](crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput).
    pub fn build(self) -> crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput {
        crate::operation::update_enrollment_status::UpdateEnrollmentStatusOutput {
            status: self.status,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        }
    }
}
