// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEcsServiceRecommendationsOutput {
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> An array of objects that describe the ECS service recommendations. </p>
    #[doc(hidden)]
    pub ecs_service_recommendations:
        std::option::Option<std::vec::Vec<crate::types::EcsServiceRecommendation>>,
    /// <p> An array of objects that describe errors of the request. </p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::GetRecommendationError>>,
    _request_id: Option<String>,
}
impl GetEcsServiceRecommendationsOutput {
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> An array of objects that describe the ECS service recommendations. </p>
    pub fn ecs_service_recommendations(
        &self,
    ) -> std::option::Option<&[crate::types::EcsServiceRecommendation]> {
        self.ecs_service_recommendations.as_deref()
    }
    /// <p> An array of objects that describe errors of the request. </p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::GetRecommendationError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEcsServiceRecommendationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEcsServiceRecommendationsOutput {
    /// Creates a new builder-style object to manufacture [`GetEcsServiceRecommendationsOutput`](crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput).
    pub fn builder() -> crate::operation::get_ecs_service_recommendations::builders::GetEcsServiceRecommendationsOutputBuilder{
        crate::operation::get_ecs_service_recommendations::builders::GetEcsServiceRecommendationsOutputBuilder::default()
    }
}

/// A builder for [`GetEcsServiceRecommendationsOutput`](crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEcsServiceRecommendationsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) ecs_service_recommendations:
        std::option::Option<std::vec::Vec<crate::types::EcsServiceRecommendation>>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::GetRecommendationError>>,
    _request_id: Option<String>,
}
impl GetEcsServiceRecommendationsOutputBuilder {
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `ecs_service_recommendations`.
    ///
    /// To override the contents of this collection use [`set_ecs_service_recommendations`](Self::set_ecs_service_recommendations).
    ///
    /// <p> An array of objects that describe the ECS service recommendations. </p>
    pub fn ecs_service_recommendations(
        mut self,
        input: crate::types::EcsServiceRecommendation,
    ) -> Self {
        let mut v = self.ecs_service_recommendations.unwrap_or_default();
        v.push(input);
        self.ecs_service_recommendations = Some(v);
        self
    }
    /// <p> An array of objects that describe the ECS service recommendations. </p>
    pub fn set_ecs_service_recommendations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EcsServiceRecommendation>>,
    ) -> Self {
        self.ecs_service_recommendations = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p> An array of objects that describe errors of the request. </p>
    pub fn errors(mut self, input: crate::types::GetRecommendationError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p> An array of objects that describe errors of the request. </p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GetRecommendationError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEcsServiceRecommendationsOutput`](crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput {
        crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput {
            next_token: self.next_token,
            ecs_service_recommendations: self.ecs_service_recommendations,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
