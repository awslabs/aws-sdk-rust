// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ecs_service_recommendations::_get_ecs_service_recommendations_output::GetEcsServiceRecommendationsOutputBuilder;

pub use crate::operation::get_ecs_service_recommendations::_get_ecs_service_recommendations_input::GetEcsServiceRecommendationsInputBuilder;

/// Fluent builder constructing a request to `GetECSServiceRecommendations`.
///
/// <p> Returns Amazon ECS service recommendations. </p>
/// <p> Compute Optimizer generates recommendations for Amazon ECS services on Fargate that meet a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and requirements</a> in the <i>Compute Optimizer User Guide</i>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetECSServiceRecommendationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_ecs_service_recommendations::builders::GetEcsServiceRecommendationsInputBuilder
            }
impl GetECSServiceRecommendationsFluentBuilder {
    /// Creates a new `GetECSServiceRecommendations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_ecs_service_recommendations::GetECSServiceRecommendations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_ecs_service_recommendations::GetECSServiceRecommendationsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_ecs_service_recommendations::GetEcsServiceRecommendationsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_ecs_service_recommendations::GetECSServiceRecommendationsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `serviceArns`.
    ///
    /// To override the contents of this collection use [`set_service_arns`](Self::set_service_arns).
    ///
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    pub fn service_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_arns(input.into());
        self
    }
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    pub fn set_service_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_service_arns(input);
        self
    }
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token to advance to the next page of ECS service recommendations. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The maximum number of ECS service recommendations to return with a single request. </p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of ECS service recommendations to return with a single request. </p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p> An array of objects to specify a filter that returns a more specific list of ECS service recommendations. </p>
    pub fn filters(mut self, input: crate::types::EcsServiceRecommendationFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p> An array of objects to specify a filter that returns a more specific list of ECS service recommendations. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EcsServiceRecommendationFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// Appends an item to `accountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p> Return the ECS service recommendations to the specified Amazon Web Services account IDs. </p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to return the ECS service recommendations to specific member accounts.</p>
    /// <p>You can only specify one account ID per request.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p> Return the ECS service recommendations to the specified Amazon Web Services account IDs. </p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to return the ECS service recommendations to specific member accounts.</p>
    /// <p>You can only specify one account ID per request.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
}
