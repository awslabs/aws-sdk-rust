// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::export_ecs_service_recommendations::_export_ecs_service_recommendations_output::ExportEcsServiceRecommendationsOutputBuilder;

pub use crate::operation::export_ecs_service_recommendations::_export_ecs_service_recommendations_input::ExportEcsServiceRecommendationsInputBuilder;

/// Fluent builder constructing a request to `ExportECSServiceRecommendations`.
///
/// <p> Exports optimization recommendations for Amazon ECS services on Fargate. </p>
/// <p>Recommendations are exported in a CSV file, and its metadata in a JSON file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>You can only have one Amazon ECS service export job in progress per Amazon Web Services Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ExportECSServiceRecommendationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::export_ecs_service_recommendations::builders::ExportEcsServiceRecommendationsInputBuilder
            }
impl ExportECSServiceRecommendationsFluentBuilder {
    /// Creates a new `ExportECSServiceRecommendations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::export_ecs_service_recommendations::ExportECSServiceRecommendations, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::export_ecs_service_recommendations::ExportECSServiceRecommendationsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::export_ecs_service_recommendations::ExportEcsServiceRecommendationsOutput, aws_smithy_http::result::SdkError<crate::operation::export_ecs_service_recommendations::ExportECSServiceRecommendationsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `accountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p> The Amazon Web Services account IDs for the export ECS service recommendations. </p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to specify the member account you want to export recommendations to.</p>
    /// <p>This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive.</p>
    /// <p>If this parameter or the include member accounts parameter is omitted, the recommendations for member accounts aren't included in the export.</p>
    /// <p>You can specify multiple account IDs per request.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p> The Amazon Web Services account IDs for the export ECS service recommendations. </p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to specify the member account you want to export recommendations to.</p>
    /// <p>This parameter can't be specified together with the include member accounts parameter. The parameters are mutually exclusive.</p>
    /// <p>If this parameter or the include member accounts parameter is omitted, the recommendations for member accounts aren't included in the export.</p>
    /// <p>You can specify multiple account IDs per request.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p> An array of objects to specify a filter that exports a more specific set of ECS service recommendations. </p>
    pub fn filters(mut self, input: crate::types::EcsServiceRecommendationFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p> An array of objects to specify a filter that exports a more specific set of ECS service recommendations. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EcsServiceRecommendationFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// Appends an item to `fieldsToExport`.
    ///
    /// To override the contents of this collection use [`set_fields_to_export`](Self::set_fields_to_export).
    ///
    /// <p>The recommendations data to include in the export file. For more information about the fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn fields_to_export(mut self, input: crate::types::ExportableEcsServiceField) -> Self {
        self.inner = self.inner.fields_to_export(input);
        self
    }
    /// <p>The recommendations data to include in the export file. For more information about the fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn set_fields_to_export(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExportableEcsServiceField>>,
    ) -> Self {
        self.inner = self.inner.set_fields_to_export(input);
        self
    }
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job.</p>
    /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn s3_destination_config(mut self, input: crate::types::S3DestinationConfig) -> Self {
        self.inner = self.inner.s3_destination_config(input);
        self
    }
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a recommendations export job.</p>
    /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
    pub fn set_s3_destination_config(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfig>,
    ) -> Self {
        self.inner = self.inner.set_s3_destination_config(input);
        self
    }
    /// <p> The format of the export file. </p>
    /// <p>The CSV file is the only export file format currently supported.</p>
    pub fn file_format(mut self, input: crate::types::FileFormat) -> Self {
        self.inner = self.inner.file_format(input);
        self
    }
    /// <p> The format of the export file. </p>
    /// <p>The CSV file is the only export file format currently supported.</p>
    pub fn set_file_format(mut self, input: std::option::Option<crate::types::FileFormat>) -> Self {
        self.inner = self.inner.set_file_format(input);
        self
    }
    /// <p>If your account is the management account or the delegated administrator of an organization, this parameter indicates whether to include recommendations for resources in all member accounts of the organization.</p>
    /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the <i>Compute Optimizer User Guide</i>.</p>
    /// <p>If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file.</p>
    /// <p>If this parameter or the account ID parameter is omitted, recommendations for member accounts aren't included in the export.</p>
    pub fn include_member_accounts(mut self, input: bool) -> Self {
        self.inner = self.inner.include_member_accounts(input);
        self
    }
    /// <p>If your account is the management account or the delegated administrator of an organization, this parameter indicates whether to include recommendations for resources in all member accounts of the organization.</p>
    /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the <i>Compute Optimizer User Guide</i>.</p>
    /// <p>If this parameter is omitted, recommendations for member accounts of the organization aren't included in the export file.</p>
    /// <p>If this parameter or the account ID parameter is omitted, recommendations for member accounts aren't included in the export.</p>
    pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_member_accounts(input);
        self
    }
}
