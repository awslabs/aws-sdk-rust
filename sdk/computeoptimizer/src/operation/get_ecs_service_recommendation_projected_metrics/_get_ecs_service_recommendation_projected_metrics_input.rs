// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEcsServiceRecommendationProjectedMetricsInput {
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    #[doc(hidden)]
    pub service_arn: std::option::Option<std::string::String>,
    /// <p> The statistic of the projected metrics. </p>
    #[doc(hidden)]
    pub stat: std::option::Option<crate::types::MetricStatistic>,
    /// <p> The granularity, in seconds, of the projected metrics data points. </p>
    #[doc(hidden)]
    pub period: i32,
    /// <p> The timestamp of the first projected metrics data point to return. </p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The timestamp of the last projected metrics data point to return. </p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetEcsServiceRecommendationProjectedMetricsInput {
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    pub fn service_arn(&self) -> std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p> The statistic of the projected metrics. </p>
    pub fn stat(&self) -> std::option::Option<&crate::types::MetricStatistic> {
        self.stat.as_ref()
    }
    /// <p> The granularity, in seconds, of the projected metrics data points. </p>
    pub fn period(&self) -> i32 {
        self.period
    }
    /// <p> The timestamp of the first projected metrics data point to return. </p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p> The timestamp of the last projected metrics data point to return. </p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl GetEcsServiceRecommendationProjectedMetricsInput {
    /// Creates a new builder-style object to manufacture [`GetEcsServiceRecommendationProjectedMetricsInput`](crate::operation::get_ecs_service_recommendation_projected_metrics::GetEcsServiceRecommendationProjectedMetricsInput).
    pub fn builder() -> crate::operation::get_ecs_service_recommendation_projected_metrics::builders::GetEcsServiceRecommendationProjectedMetricsInputBuilder{
        crate::operation::get_ecs_service_recommendation_projected_metrics::builders::GetEcsServiceRecommendationProjectedMetricsInputBuilder::default()
    }
}

/// A builder for [`GetEcsServiceRecommendationProjectedMetricsInput`](crate::operation::get_ecs_service_recommendation_projected_metrics::GetEcsServiceRecommendationProjectedMetricsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEcsServiceRecommendationProjectedMetricsInputBuilder {
    pub(crate) service_arn: std::option::Option<std::string::String>,
    pub(crate) stat: std::option::Option<crate::types::MetricStatistic>,
    pub(crate) period: std::option::Option<i32>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetEcsServiceRecommendationProjectedMetricsInputBuilder {
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_arn = Some(input.into());
        self
    }
    /// <p> The ARN that identifies the ECS service. </p>
    /// <p> The following is the format of the ARN: </p>
    /// <p> <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code> </p>
    pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p> The statistic of the projected metrics. </p>
    pub fn stat(mut self, input: crate::types::MetricStatistic) -> Self {
        self.stat = Some(input);
        self
    }
    /// <p> The statistic of the projected metrics. </p>
    pub fn set_stat(mut self, input: std::option::Option<crate::types::MetricStatistic>) -> Self {
        self.stat = input;
        self
    }
    /// <p> The granularity, in seconds, of the projected metrics data points. </p>
    pub fn period(mut self, input: i32) -> Self {
        self.period = Some(input);
        self
    }
    /// <p> The granularity, in seconds, of the projected metrics data points. </p>
    pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// <p> The timestamp of the first projected metrics data point to return. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p> The timestamp of the first projected metrics data point to return. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p> The timestamp of the last projected metrics data point to return. </p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p> The timestamp of the last projected metrics data point to return. </p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEcsServiceRecommendationProjectedMetricsInput`](crate::operation::get_ecs_service_recommendation_projected_metrics::GetEcsServiceRecommendationProjectedMetricsInput).
    pub fn build(self) -> Result<crate::operation::get_ecs_service_recommendation_projected_metrics::GetEcsServiceRecommendationProjectedMetricsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::get_ecs_service_recommendation_projected_metrics::GetEcsServiceRecommendationProjectedMetricsInput {
                service_arn: self.service_arn
                ,
                stat: self.stat
                ,
                period: self.period
                    .unwrap_or_default()
                ,
                start_time: self.start_time
                ,
                end_time: self.end_time
                ,
            }
        )
    }
}
