// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEbsVolumeRecommendationsInput {
    /// <p>The Amazon Resource Name (ARN) of the volumes for which to return recommendations.</p>
    #[doc(hidden)]
    pub volume_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token to advance to the next page of volume recommendations.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of volume recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>An array of objects to specify a filter that returns a more specific list of volume recommendations.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::EbsFilter>>,
    /// <p>The ID of the Amazon Web Services account for which to return volume recommendations.</p>
    /// <p>If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations.</p>
    /// <p>Only one account ID can be specified per request.</p>
    #[doc(hidden)]
    pub account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetEbsVolumeRecommendationsInput {
    /// <p>The Amazon Resource Name (ARN) of the volumes for which to return recommendations.</p>
    pub fn volume_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.volume_arns.as_deref()
    }
    /// <p>The token to advance to the next page of volume recommendations.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of volume recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>An array of objects to specify a filter that returns a more specific list of volume recommendations.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::EbsFilter]> {
        self.filters.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account for which to return volume recommendations.</p>
    /// <p>If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations.</p>
    /// <p>Only one account ID can be specified per request.</p>
    pub fn account_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids.as_deref()
    }
}
impl GetEbsVolumeRecommendationsInput {
    /// Creates a new builder-style object to manufacture [`GetEbsVolumeRecommendationsInput`](crate::operation::get_ebs_volume_recommendations::GetEbsVolumeRecommendationsInput).
    pub fn builder() -> crate::operation::get_ebs_volume_recommendations::builders::GetEbsVolumeRecommendationsInputBuilder{
        crate::operation::get_ebs_volume_recommendations::builders::GetEbsVolumeRecommendationsInputBuilder::default()
    }
}

/// A builder for [`GetEbsVolumeRecommendationsInput`](crate::operation::get_ebs_volume_recommendations::GetEbsVolumeRecommendationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEbsVolumeRecommendationsInputBuilder {
    pub(crate) volume_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::EbsFilter>>,
    pub(crate) account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetEbsVolumeRecommendationsInputBuilder {
    /// Appends an item to `volume_arns`.
    ///
    /// To override the contents of this collection use [`set_volume_arns`](Self::set_volume_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) of the volumes for which to return recommendations.</p>
    pub fn volume_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.volume_arns.unwrap_or_default();
        v.push(input.into());
        self.volume_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the volumes for which to return recommendations.</p>
    pub fn set_volume_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.volume_arns = input;
        self
    }
    /// <p>The token to advance to the next page of volume recommendations.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to advance to the next page of volume recommendations.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of volume recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of volume recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of objects to specify a filter that returns a more specific list of volume recommendations.</p>
    pub fn filters(mut self, input: crate::types::EbsFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>An array of objects to specify a filter that returns a more specific list of volume recommendations.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EbsFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The ID of the Amazon Web Services account for which to return volume recommendations.</p>
    /// <p>If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations.</p>
    /// <p>Only one account ID can be specified per request.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = Some(v);
        self
    }
    /// <p>The ID of the Amazon Web Services account for which to return volume recommendations.</p>
    /// <p>If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations.</p>
    /// <p>Only one account ID can be specified per request.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.account_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEbsVolumeRecommendationsInput`](crate::operation::get_ebs_volume_recommendations::GetEbsVolumeRecommendationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_ebs_volume_recommendations::GetEbsVolumeRecommendationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_ebs_volume_recommendations::GetEbsVolumeRecommendationsInput {
                volume_arns: self.volume_arns,
                next_token: self.next_token,
                max_results: self.max_results,
                filters: self.filters,
                account_ids: self.account_ids,
            },
        )
    }
}
