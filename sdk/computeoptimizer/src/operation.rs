// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Describes recommendation export jobs created in the last seven days.</p>
/// <p>Use the <code>ExportAutoScalingGroupRecommendations</code> or
/// <code>ExportEC2InstanceRecommendations</code> actions to request an export of your
/// recommendations. Then use the <code>DescribeRecommendationExportJobs</code> action to
/// view your export jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRecommendationExportJobs {
    _private: (),
}
impl DescribeRecommendationExportJobs {
    /// Creates a new builder-style object to manufacture [`DescribeRecommendationExportJobsInput`](crate::input::DescribeRecommendationExportJobsInput)
    pub fn builder() -> crate::input::describe_recommendation_export_jobs_input::Builder {
        crate::input::describe_recommendation_export_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRecommendationExportJobs {
    type Output = std::result::Result<
        crate::output::DescribeRecommendationExportJobsOutput,
        crate::error::DescribeRecommendationExportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_recommendation_export_jobs_error(response)
        } else {
            crate::operation_deser::parse_describe_recommendation_export_jobs_response(response)
        }
    }
}

/// <p>Exports optimization recommendations for Auto Scaling groups.</p>
/// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
/// in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
/// you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
/// Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>You can have only one Auto Scaling group export job in progress per AWS
/// Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportAutoScalingGroupRecommendations {
    _private: (),
}
impl ExportAutoScalingGroupRecommendations {
    /// Creates a new builder-style object to manufacture [`ExportAutoScalingGroupRecommendationsInput`](crate::input::ExportAutoScalingGroupRecommendationsInput)
    pub fn builder() -> crate::input::export_auto_scaling_group_recommendations_input::Builder {
        crate::input::export_auto_scaling_group_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportAutoScalingGroupRecommendations {
    type Output = std::result::Result<
        crate::output::ExportAutoScalingGroupRecommendationsOutput,
        crate::error::ExportAutoScalingGroupRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_auto_scaling_group_recommendations_error(response)
        } else {
            crate::operation_deser::parse_export_auto_scaling_group_recommendations_response(
                response,
            )
        }
    }
}

/// <p>Exports optimization recommendations for Amazon EBS volumes.</p>
/// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
/// in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
/// you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
/// Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>You can have only one Amazon EBS volume export job in progress per AWS
/// Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportEBSVolumeRecommendations {
    _private: (),
}
impl ExportEBSVolumeRecommendations {
    /// Creates a new builder-style object to manufacture [`ExportEbsVolumeRecommendationsInput`](crate::input::ExportEbsVolumeRecommendationsInput)
    pub fn builder() -> crate::input::export_ebs_volume_recommendations_input::Builder {
        crate::input::export_ebs_volume_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportEBSVolumeRecommendations {
    type Output = std::result::Result<
        crate::output::ExportEbsVolumeRecommendationsOutput,
        crate::error::ExportEBSVolumeRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_ebs_volume_recommendations_error(response)
        } else {
            crate::operation_deser::parse_export_ebs_volume_recommendations_response(response)
        }
    }
}

/// <p>Exports optimization recommendations for Amazon EC2 instances.</p>
/// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
/// in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
/// you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
/// Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>You can have only one Amazon EC2 instance export job in progress per AWS
/// Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportEC2InstanceRecommendations {
    _private: (),
}
impl ExportEC2InstanceRecommendations {
    /// Creates a new builder-style object to manufacture [`ExportEc2InstanceRecommendationsInput`](crate::input::ExportEc2InstanceRecommendationsInput)
    pub fn builder() -> crate::input::export_ec2_instance_recommendations_input::Builder {
        crate::input::export_ec2_instance_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportEC2InstanceRecommendations {
    type Output = std::result::Result<
        crate::output::ExportEc2InstanceRecommendationsOutput,
        crate::error::ExportEC2InstanceRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_ec2_instance_recommendations_error(response)
        } else {
            crate::operation_deser::parse_export_ec2_instance_recommendations_response(response)
        }
    }
}

/// <p>Exports optimization recommendations for AWS Lambda functions.</p>
/// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
/// in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
/// you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
/// Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
/// <p>You can have only one Lambda function export job in progress per AWS
/// Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportLambdaFunctionRecommendations {
    _private: (),
}
impl ExportLambdaFunctionRecommendations {
    /// Creates a new builder-style object to manufacture [`ExportLambdaFunctionRecommendationsInput`](crate::input::ExportLambdaFunctionRecommendationsInput)
    pub fn builder() -> crate::input::export_lambda_function_recommendations_input::Builder {
        crate::input::export_lambda_function_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportLambdaFunctionRecommendations {
    type Output = std::result::Result<
        crate::output::ExportLambdaFunctionRecommendationsOutput,
        crate::error::ExportLambdaFunctionRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_lambda_function_recommendations_error(response)
        } else {
            crate::operation_deser::parse_export_lambda_function_recommendations_response(response)
        }
    }
}

/// <p>Returns Auto Scaling group recommendations.</p>
/// <p>AWS Compute Optimizer generates recommendations for Amazon EC2 Auto Scaling groups that meet a specific
/// set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
/// requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAutoScalingGroupRecommendations {
    _private: (),
}
impl GetAutoScalingGroupRecommendations {
    /// Creates a new builder-style object to manufacture [`GetAutoScalingGroupRecommendationsInput`](crate::input::GetAutoScalingGroupRecommendationsInput)
    pub fn builder() -> crate::input::get_auto_scaling_group_recommendations_input::Builder {
        crate::input::get_auto_scaling_group_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAutoScalingGroupRecommendations {
    type Output = std::result::Result<
        crate::output::GetAutoScalingGroupRecommendationsOutput,
        crate::error::GetAutoScalingGroupRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_auto_scaling_group_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_auto_scaling_group_recommendations_response(response)
        }
    }
}

/// <p>Returns Amazon Elastic Block Store (Amazon EBS) volume recommendations.</p>
/// <p>AWS Compute Optimizer generates recommendations for Amazon EBS volumes that meet a specific
/// set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
/// requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEBSVolumeRecommendations {
    _private: (),
}
impl GetEBSVolumeRecommendations {
    /// Creates a new builder-style object to manufacture [`GetEbsVolumeRecommendationsInput`](crate::input::GetEbsVolumeRecommendationsInput)
    pub fn builder() -> crate::input::get_ebs_volume_recommendations_input::Builder {
        crate::input::get_ebs_volume_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEBSVolumeRecommendations {
    type Output = std::result::Result<
        crate::output::GetEbsVolumeRecommendationsOutput,
        crate::error::GetEBSVolumeRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ebs_volume_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_ebs_volume_recommendations_response(response)
        }
    }
}

/// <p>Returns Amazon EC2 instance recommendations.</p>
/// <p>AWS Compute Optimizer generates recommendations for Amazon Elastic Compute Cloud (Amazon EC2) instances that meet
/// a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported
/// resources and requirements</a> in the <i>AWS Compute Optimizer User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEC2InstanceRecommendations {
    _private: (),
}
impl GetEC2InstanceRecommendations {
    /// Creates a new builder-style object to manufacture [`GetEc2InstanceRecommendationsInput`](crate::input::GetEc2InstanceRecommendationsInput)
    pub fn builder() -> crate::input::get_ec2_instance_recommendations_input::Builder {
        crate::input::get_ec2_instance_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEC2InstanceRecommendations {
    type Output = std::result::Result<
        crate::output::GetEc2InstanceRecommendationsOutput,
        crate::error::GetEC2InstanceRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ec2_instance_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_ec2_instance_recommendations_response(response)
        }
    }
}

/// <p>Returns the projected utilization metrics of Amazon EC2 instance recommendations.</p>
/// <note>
/// <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
/// utilization metrics returned when you run this action. Additionally, the
/// <code>Memory</code> metric is returned only for resources that have the unified
/// CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
/// Utilization with the CloudWatch Agent</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEC2RecommendationProjectedMetrics {
    _private: (),
}
impl GetEC2RecommendationProjectedMetrics {
    /// Creates a new builder-style object to manufacture [`GetEc2RecommendationProjectedMetricsInput`](crate::input::GetEc2RecommendationProjectedMetricsInput)
    pub fn builder() -> crate::input::get_ec2_recommendation_projected_metrics_input::Builder {
        crate::input::get_ec2_recommendation_projected_metrics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEC2RecommendationProjectedMetrics {
    type Output = std::result::Result<
        crate::output::GetEc2RecommendationProjectedMetricsOutput,
        crate::error::GetEC2RecommendationProjectedMetricsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ec2_recommendation_projected_metrics_error(response)
        } else {
            crate::operation_deser::parse_get_ec2_recommendation_projected_metrics_response(
                response,
            )
        }
    }
}

/// <p>Returns the enrollment (opt in) status of an account to the AWS Compute Optimizer
/// service.</p>
/// <p>If the account is the management account of an organization, this action also confirms
/// the enrollment status of member accounts within the organization.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnrollmentStatus {
    _private: (),
}
impl GetEnrollmentStatus {
    /// Creates a new builder-style object to manufacture [`GetEnrollmentStatusInput`](crate::input::GetEnrollmentStatusInput)
    pub fn builder() -> crate::input::get_enrollment_status_input::Builder {
        crate::input::get_enrollment_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnrollmentStatus {
    type Output = std::result::Result<
        crate::output::GetEnrollmentStatusOutput,
        crate::error::GetEnrollmentStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_enrollment_status_error(response)
        } else {
            crate::operation_deser::parse_get_enrollment_status_response(response)
        }
    }
}

/// <p>Returns AWS Lambda function recommendations.</p>
/// <p>AWS Compute Optimizer generates recommendations for functions that meet a specific set of
/// requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
/// requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetLambdaFunctionRecommendations {
    _private: (),
}
impl GetLambdaFunctionRecommendations {
    /// Creates a new builder-style object to manufacture [`GetLambdaFunctionRecommendationsInput`](crate::input::GetLambdaFunctionRecommendationsInput)
    pub fn builder() -> crate::input::get_lambda_function_recommendations_input::Builder {
        crate::input::get_lambda_function_recommendations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetLambdaFunctionRecommendations {
    type Output = std::result::Result<
        crate::output::GetLambdaFunctionRecommendationsOutput,
        crate::error::GetLambdaFunctionRecommendationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_lambda_function_recommendations_error(response)
        } else {
            crate::operation_deser::parse_get_lambda_function_recommendations_response(response)
        }
    }
}

/// <p>Returns the optimization findings for an account.</p>
/// <p>It returns the number of:</p>
/// <ul>
/// <li>
/// <p>Amazon EC2 instances in an account that are <code>Underprovisioned</code>,
/// <code>Overprovisioned</code>, or <code>Optimized</code>.</p>
/// </li>
/// <li>
/// <p>Auto Scaling groups in an account that are <code>NotOptimized</code>, or
/// <code>Optimized</code>.</p>
/// </li>
/// <li>
/// <p>Amazon EBS volumes in an account that are <code>NotOptimized</code>, or
/// <code>Optimized</code>.</p>
/// </li>
/// <li>
/// <p>Lambda functions in an account that are <code>NotOptimized</code>, or
/// <code>Optimized</code>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRecommendationSummaries {
    _private: (),
}
impl GetRecommendationSummaries {
    /// Creates a new builder-style object to manufacture [`GetRecommendationSummariesInput`](crate::input::GetRecommendationSummariesInput)
    pub fn builder() -> crate::input::get_recommendation_summaries_input::Builder {
        crate::input::get_recommendation_summaries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRecommendationSummaries {
    type Output = std::result::Result<
        crate::output::GetRecommendationSummariesOutput,
        crate::error::GetRecommendationSummariesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_recommendation_summaries_error(response)
        } else {
            crate::operation_deser::parse_get_recommendation_summaries_response(response)
        }
    }
}

/// <p>Updates the enrollment (opt in and opt out) status of an account to the
/// AWS Compute Optimizer service.</p>
/// <p>If the account is a management account of an organization, this action can also be used
/// to enroll member accounts within the organization.</p>
/// <p>You must have the appropriate permissions to opt in to Compute Optimizer, to view its
/// recommendations, and to opt out. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html">Controlling access with AWS
/// Identity and Access Management</a> in the <i>AWS Compute Optimizer User
/// Guide</i>.</p>
/// <p>When you opt in, Compute Optimizer automatically creates a Service-Linked Role in your
/// account to access its data. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/using-service-linked-roles.html">Using
/// Service-Linked Roles for AWS Compute Optimizer</a> in the <i>AWS Compute Optimizer User
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnrollmentStatus {
    _private: (),
}
impl UpdateEnrollmentStatus {
    /// Creates a new builder-style object to manufacture [`UpdateEnrollmentStatusInput`](crate::input::UpdateEnrollmentStatusInput)
    pub fn builder() -> crate::input::update_enrollment_status_input::Builder {
        crate::input::update_enrollment_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnrollmentStatus {
    type Output = std::result::Result<
        crate::output::UpdateEnrollmentStatusOutput,
        crate::error::UpdateEnrollmentStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_enrollment_status_error(response)
        } else {
            crate::operation_deser::parse_update_enrollment_status_response(response)
        }
    }
}
