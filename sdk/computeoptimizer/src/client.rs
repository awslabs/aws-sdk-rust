// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn describe_recommendation_export_jobs(
        &self,
    ) -> fluent_builders::DescribeRecommendationExportJobs<C> {
        fluent_builders::DescribeRecommendationExportJobs::new(self.handle.clone())
    }
    pub fn export_auto_scaling_group_recommendations(
        &self,
    ) -> fluent_builders::ExportAutoScalingGroupRecommendations<C> {
        fluent_builders::ExportAutoScalingGroupRecommendations::new(self.handle.clone())
    }
    pub fn export_ebs_volume_recommendations(
        &self,
    ) -> fluent_builders::ExportEBSVolumeRecommendations<C> {
        fluent_builders::ExportEBSVolumeRecommendations::new(self.handle.clone())
    }
    pub fn export_ec2_instance_recommendations(
        &self,
    ) -> fluent_builders::ExportEC2InstanceRecommendations<C> {
        fluent_builders::ExportEC2InstanceRecommendations::new(self.handle.clone())
    }
    pub fn export_lambda_function_recommendations(
        &self,
    ) -> fluent_builders::ExportLambdaFunctionRecommendations<C> {
        fluent_builders::ExportLambdaFunctionRecommendations::new(self.handle.clone())
    }
    pub fn get_auto_scaling_group_recommendations(
        &self,
    ) -> fluent_builders::GetAutoScalingGroupRecommendations<C> {
        fluent_builders::GetAutoScalingGroupRecommendations::new(self.handle.clone())
    }
    pub fn get_ebs_volume_recommendations(
        &self,
    ) -> fluent_builders::GetEBSVolumeRecommendations<C> {
        fluent_builders::GetEBSVolumeRecommendations::new(self.handle.clone())
    }
    pub fn get_ec2_instance_recommendations(
        &self,
    ) -> fluent_builders::GetEC2InstanceRecommendations<C> {
        fluent_builders::GetEC2InstanceRecommendations::new(self.handle.clone())
    }
    pub fn get_ec2_recommendation_projected_metrics(
        &self,
    ) -> fluent_builders::GetEC2RecommendationProjectedMetrics<C> {
        fluent_builders::GetEC2RecommendationProjectedMetrics::new(self.handle.clone())
    }
    pub fn get_enrollment_status(&self) -> fluent_builders::GetEnrollmentStatus<C> {
        fluent_builders::GetEnrollmentStatus::new(self.handle.clone())
    }
    pub fn get_lambda_function_recommendations(
        &self,
    ) -> fluent_builders::GetLambdaFunctionRecommendations<C> {
        fluent_builders::GetLambdaFunctionRecommendations::new(self.handle.clone())
    }
    pub fn get_recommendation_summaries(&self) -> fluent_builders::GetRecommendationSummaries<C> {
        fluent_builders::GetRecommendationSummaries::new(self.handle.clone())
    }
    pub fn update_enrollment_status(&self) -> fluent_builders::UpdateEnrollmentStatus<C> {
        fluent_builders::UpdateEnrollmentStatus::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct DescribeRecommendationExportJobs<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_recommendation_export_jobs_input::Builder,
    }
    impl<C> DescribeRecommendationExportJobs<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRecommendationExportJobsOutput,
            smithy_http::result::SdkError<crate::error::DescribeRecommendationExportJobsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identification numbers of the export jobs to return.</p>
        /// <p>An export job ID is returned when you create an export using the
        /// <code>ExportAutoScalingGroupRecommendations</code> or
        /// <code>ExportEC2InstanceRecommendations</code> actions.</p>
        /// <p>All export jobs created in the last seven days are returned if this parameter is
        /// omitted.</p>
        pub fn job_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_ids(inp);
            self
        }
        pub fn set_job_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter to return a more specific list of export
        /// jobs.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::JobFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The token to advance to the next page of export jobs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of export jobs to return with a single request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExportAutoScalingGroupRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::export_auto_scaling_group_recommendations_input::Builder,
    }
    impl<C> ExportAutoScalingGroupRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportAutoScalingGroupRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::ExportAutoScalingGroupRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IDs of the AWS accounts for which to export Auto Scaling group
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter to export a more specific set of Auto Scaling group
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableAutoScalingGroupField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ExportableAutoScalingGroupField>,
            >,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for
        /// the export job.</p>
        /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you
        /// create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
        /// S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
        /// export file to it. If you plan to specify an object prefix when you create the export
        /// job, you must include the object prefix in the policy that you add to the S3 bucket. For
        /// more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
        /// guide</i>.</p>
        pub fn s3_destination_config(mut self, input: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(input);
            self
        }
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, input: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(input);
            self
        }
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
        /// AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
        /// Guide</i>.</p>
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, input: bool) -> Self {
            self.inner = self.inner.include_member_accounts(input);
            self
        }
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExportEBSVolumeRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::export_ebs_volume_recommendations_input::Builder,
    }
    impl<C> ExportEBSVolumeRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportEbsVolumeRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::ExportEBSVolumeRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IDs of the AWS accounts for which to export Amazon EBS volume
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter to export a more specific set of Amazon EBS
        /// volume recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::EbsFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EbsFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableVolumeField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableVolumeField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a
        /// recommendations export job.</p>
        /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you
        /// create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
        /// S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
        /// export file to it. If you plan to specify an object prefix when you create the export
        /// job, you must include the object prefix in the policy that you add to the S3 bucket. For
        /// more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
        /// guide</i>.</p>
        pub fn s3_destination_config(mut self, input: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(input);
            self
        }
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, input: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(input);
            self
        }
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
        /// AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
        /// Guide</i>.</p>
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, input: bool) -> Self {
            self.inner = self.inner.include_member_accounts(input);
            self
        }
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExportEC2InstanceRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::export_ec2_instance_recommendations_input::Builder,
    }
    impl<C> ExportEC2InstanceRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportEc2InstanceRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::ExportEC2InstanceRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IDs of the AWS accounts for which to export instance
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter to export a more specific set of instance
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableInstanceField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableInstanceField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for
        /// the export job.</p>
        /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you
        /// create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
        /// S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
        /// export file to it. If you plan to specify an object prefix when you create the export
        /// job, you must include the object prefix in the policy that you add to the S3 bucket. For
        /// more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
        /// guide</i>.</p>
        pub fn s3_destination_config(mut self, input: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(input);
            self
        }
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, input: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(input);
            self
        }
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
        /// AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
        /// Guide</i>.</p>
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, input: bool) -> Self {
            self.inner = self.inner.include_member_accounts(input);
            self
        }
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExportLambdaFunctionRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::export_lambda_function_recommendations_input::Builder,
    }
    impl<C> ExportLambdaFunctionRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportLambdaFunctionRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::ExportLambdaFunctionRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IDs of the AWS accounts for which to export Lambda function
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter to export a more specific set of Lambda
        /// function recommendations.</p>
        pub fn filters(
            mut self,
            inp: impl Into<crate::model::LambdaFunctionRecommendationFilter>,
        ) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LambdaFunctionRecommendationFilter>,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableLambdaFunctionField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableLambdaFunctionField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a
        /// recommendations export job.</p>
        /// <p>You must create the destination Amazon S3 bucket for your recommendations export before you
        /// create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
        /// S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
        /// export file to it. If you plan to specify an object prefix when you create the export
        /// job, you must include the object prefix in the policy that you add to the S3 bucket. For
        /// more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
        /// guide</i>.</p>
        pub fn s3_destination_config(mut self, input: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(input);
            self
        }
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, input: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(input);
            self
        }
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
        /// AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
        /// Guide</i>.</p>
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, input: bool) -> Self {
            self.inner = self.inner.include_member_accounts(input);
            self
        }
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAutoScalingGroupRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_auto_scaling_group_recommendations_input::Builder,
    }
    impl<C> GetAutoScalingGroupRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAutoScalingGroupRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::GetAutoScalingGroupRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the AWS account for which to return Auto Scaling group
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return Auto Scaling group
        /// recommendations.</p>
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return
        /// recommendations.</p>
        pub fn auto_scaling_group_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.auto_scaling_group_arns(inp);
            self
        }
        pub fn set_auto_scaling_group_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_group_arns(input);
            self
        }
        /// <p>The token to advance to the next page of Auto Scaling group recommendations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of Auto Scaling group recommendations to return with a single
        /// request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>An array of objects that describe a filter that returns a more specific list of Auto Scaling
        /// group recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetEBSVolumeRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_ebs_volume_recommendations_input::Builder,
    }
    impl<C> GetEBSVolumeRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEbsVolumeRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::GetEBSVolumeRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the volumes for which to return
        /// recommendations.</p>
        pub fn volume_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_arns(inp);
            self
        }
        pub fn set_volume_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_volume_arns(input);
            self
        }
        /// <p>The token to advance to the next page of volume recommendations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of volume recommendations to return with a single request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>An array of objects that describe a filter that returns a more specific list of volume
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::EbsFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EbsFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The ID of the AWS account for which to return volume
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return volume recommendations.</p>
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetEC2InstanceRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_ec2_instance_recommendations_input::Builder,
    }
    impl<C> GetEC2InstanceRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEc2InstanceRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::GetEC2InstanceRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return
        /// recommendations.</p>
        pub fn instance_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_arns(inp);
            self
        }
        pub fn set_instance_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_arns(input);
            self
        }
        /// <p>The token to advance to the next page of instance recommendations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of instance recommendations to return with a single request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>An array of objects that describe a filter that returns a more specific list of
        /// instance recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The ID of the AWS account for which to return instance
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return instance recommendations.</p>
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetEC2RecommendationProjectedMetrics<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_ec2_recommendation_projected_metrics_input::Builder,
    }
    impl<C> GetEC2RecommendationProjectedMetrics<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEc2RecommendationProjectedMetricsOutput,
            smithy_http::result::SdkError<crate::error::GetEC2RecommendationProjectedMetricsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return recommendation
        /// projected metrics.</p>
        pub fn instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_arn(input);
            self
        }
        pub fn set_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_arn(input);
            self
        }
        /// <p>The statistic of the projected metrics.</p>
        pub fn stat(mut self, input: crate::model::MetricStatistic) -> Self {
            self.inner = self.inner.stat(input);
            self
        }
        pub fn set_stat(
            mut self,
            input: std::option::Option<crate::model::MetricStatistic>,
        ) -> Self {
            self.inner = self.inner.set_stat(input);
            self
        }
        /// <p>The granularity, in seconds, of the projected metrics data points.</p>
        pub fn period(mut self, input: i32) -> Self {
            self.inner = self.inner.period(input);
            self
        }
        pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_period(input);
            self
        }
        /// <p>The time stamp of the first projected metrics data point to return.</p>
        pub fn start_time(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.start_time(input);
            self
        }
        pub fn set_start_time(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_start_time(input);
            self
        }
        /// <p>The time stamp of the last projected metrics data point to return.</p>
        pub fn end_time(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.end_time(input);
            self
        }
        pub fn set_end_time(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_end_time(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetEnrollmentStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_enrollment_status_input::Builder,
    }
    impl<C> GetEnrollmentStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEnrollmentStatusOutput,
            smithy_http::result::SdkError<crate::error::GetEnrollmentStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetLambdaFunctionRecommendations<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_lambda_function_recommendations_input::Builder,
    }
    impl<C> GetLambdaFunctionRecommendations<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetLambdaFunctionRecommendationsOutput,
            smithy_http::result::SdkError<crate::error::GetLambdaFunctionRecommendationsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the functions for which to return
        /// recommendations.</p>
        /// <p>You can specify a qualified or unqualified ARN. If you specify an
        /// unqualified ARN without a function version suffix, Compute Optimizer will return recommendations for
        /// the latest (<code>$LATEST</code>) version of the function. If you specify a qualified
        /// ARN with a version suffix, Compute Optimizer will return recommendations for the specified function
        /// version. For more information about using function versions, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using">Using
        /// versions</a> in the <i>AWS Lambda Developer Guide</i>.</p>
        pub fn function_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.function_arns(inp);
            self
        }
        pub fn set_function_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_function_arns(input);
            self
        }
        /// <p>The ID of the AWS account for which to return function
        /// recommendations.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return function recommendations.</p>
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An array of objects that describe a filter that returns a more specific list of
        /// function recommendations.</p>
        pub fn filters(
            mut self,
            inp: impl Into<crate::model::LambdaFunctionRecommendationFilter>,
        ) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LambdaFunctionRecommendationFilter>,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The token to advance to the next page of function recommendations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of function recommendations to return with a single request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRecommendationSummaries<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_recommendation_summaries_input::Builder,
    }
    impl<C> GetRecommendationSummaries<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRecommendationSummariesOutput,
            smithy_http::result::SdkError<crate::error::GetRecommendationSummariesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the AWS account for which to return recommendation
        /// summaries.</p>
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return recommendation summaries.</p>
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>The token to advance to the next page of recommendation summaries.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of recommendation summaries to return with a single request.</p>
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateEnrollmentStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_enrollment_status_input::Builder,
    }
    impl<C> UpdateEnrollmentStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateEnrollmentStatusOutput,
            smithy_http::result::SdkError<crate::error::UpdateEnrollmentStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The new enrollment status of the account.</p>
        /// <p>The following status options are available:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Active</code> - Opts in your account to the Compute Optimizer service. Compute Optimizer
        /// begins analyzing the configuration and utilization metrics of your AWS
        /// resources after you opt in. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics
        /// analyzed by AWS Compute Optimizer</a> in the <i>AWS Compute Optimizer User
        /// Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Inactive</code> - Opts out your account from the Compute Optimizer service. Your
        /// account's recommendations and related metrics data will be deleted from Compute Optimizer
        /// after you opt out.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update
        /// the enrollment status of an account. They are returned in the response of a request
        /// to update the enrollment status of an account.</p>
        /// </note>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>Indicates whether to enroll member accounts of the organization if the account is the
        /// management account of an organization.</p>
        pub fn include_member_accounts(mut self, input: bool) -> Self {
            self.inner = self.inner.include_member_accounts(input);
            self
        }
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
}
