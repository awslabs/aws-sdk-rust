// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// Client for AWS Compute Optimizer
///
/// Client for invoking operations on AWS Compute Optimizer. Each operation on AWS Compute Optimizer is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_computeoptimizer::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operationname>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_computeoptimizer::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_computeoptimizer::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `DescribeRecommendationExportJobs` operation.
    ///
    /// See [`DescribeRecommendationExportJobs`](crate::client::fluent_builders::DescribeRecommendationExportJobs) for more information about the
    /// operation and its arguments.
    pub fn describe_recommendation_export_jobs(
        &self,
    ) -> fluent_builders::DescribeRecommendationExportJobs<C, M, R> {
        fluent_builders::DescribeRecommendationExportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ExportAutoScalingGroupRecommendations` operation.
    ///
    /// See [`ExportAutoScalingGroupRecommendations`](crate::client::fluent_builders::ExportAutoScalingGroupRecommendations) for more information about the
    /// operation and its arguments.
    pub fn export_auto_scaling_group_recommendations(
        &self,
    ) -> fluent_builders::ExportAutoScalingGroupRecommendations<C, M, R> {
        fluent_builders::ExportAutoScalingGroupRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ExportEBSVolumeRecommendations` operation.
    ///
    /// See [`ExportEBSVolumeRecommendations`](crate::client::fluent_builders::ExportEBSVolumeRecommendations) for more information about the
    /// operation and its arguments.
    pub fn export_ebs_volume_recommendations(
        &self,
    ) -> fluent_builders::ExportEBSVolumeRecommendations<C, M, R> {
        fluent_builders::ExportEBSVolumeRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ExportEC2InstanceRecommendations` operation.
    ///
    /// See [`ExportEC2InstanceRecommendations`](crate::client::fluent_builders::ExportEC2InstanceRecommendations) for more information about the
    /// operation and its arguments.
    pub fn export_ec2_instance_recommendations(
        &self,
    ) -> fluent_builders::ExportEC2InstanceRecommendations<C, M, R> {
        fluent_builders::ExportEC2InstanceRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ExportLambdaFunctionRecommendations` operation.
    ///
    /// See [`ExportLambdaFunctionRecommendations`](crate::client::fluent_builders::ExportLambdaFunctionRecommendations) for more information about the
    /// operation and its arguments.
    pub fn export_lambda_function_recommendations(
        &self,
    ) -> fluent_builders::ExportLambdaFunctionRecommendations<C, M, R> {
        fluent_builders::ExportLambdaFunctionRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetAutoScalingGroupRecommendations` operation.
    ///
    /// See [`GetAutoScalingGroupRecommendations`](crate::client::fluent_builders::GetAutoScalingGroupRecommendations) for more information about the
    /// operation and its arguments.
    pub fn get_auto_scaling_group_recommendations(
        &self,
    ) -> fluent_builders::GetAutoScalingGroupRecommendations<C, M, R> {
        fluent_builders::GetAutoScalingGroupRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetEBSVolumeRecommendations` operation.
    ///
    /// See [`GetEBSVolumeRecommendations`](crate::client::fluent_builders::GetEBSVolumeRecommendations) for more information about the
    /// operation and its arguments.
    pub fn get_ebs_volume_recommendations(
        &self,
    ) -> fluent_builders::GetEBSVolumeRecommendations<C, M, R> {
        fluent_builders::GetEBSVolumeRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetEC2InstanceRecommendations` operation.
    ///
    /// See [`GetEC2InstanceRecommendations`](crate::client::fluent_builders::GetEC2InstanceRecommendations) for more information about the
    /// operation and its arguments.
    pub fn get_ec2_instance_recommendations(
        &self,
    ) -> fluent_builders::GetEC2InstanceRecommendations<C, M, R> {
        fluent_builders::GetEC2InstanceRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetEC2RecommendationProjectedMetrics` operation.
    ///
    /// See [`GetEC2RecommendationProjectedMetrics`](crate::client::fluent_builders::GetEC2RecommendationProjectedMetrics) for more information about the
    /// operation and its arguments.
    pub fn get_ec2_recommendation_projected_metrics(
        &self,
    ) -> fluent_builders::GetEC2RecommendationProjectedMetrics<C, M, R> {
        fluent_builders::GetEC2RecommendationProjectedMetrics::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetEnrollmentStatus` operation.
    ///
    /// See [`GetEnrollmentStatus`](crate::client::fluent_builders::GetEnrollmentStatus) for more information about the
    /// operation and its arguments.
    pub fn get_enrollment_status(&self) -> fluent_builders::GetEnrollmentStatus<C, M, R> {
        fluent_builders::GetEnrollmentStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetEnrollmentStatusesForOrganization` operation.
    ///
    /// See [`GetEnrollmentStatusesForOrganization`](crate::client::fluent_builders::GetEnrollmentStatusesForOrganization) for more information about the
    /// operation and its arguments.
    pub fn get_enrollment_statuses_for_organization(
        &self,
    ) -> fluent_builders::GetEnrollmentStatusesForOrganization<C, M, R> {
        fluent_builders::GetEnrollmentStatusesForOrganization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetLambdaFunctionRecommendations` operation.
    ///
    /// See [`GetLambdaFunctionRecommendations`](crate::client::fluent_builders::GetLambdaFunctionRecommendations) for more information about the
    /// operation and its arguments.
    pub fn get_lambda_function_recommendations(
        &self,
    ) -> fluent_builders::GetLambdaFunctionRecommendations<C, M, R> {
        fluent_builders::GetLambdaFunctionRecommendations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetRecommendationSummaries` operation.
    ///
    /// See [`GetRecommendationSummaries`](crate::client::fluent_builders::GetRecommendationSummaries) for more information about the
    /// operation and its arguments.
    pub fn get_recommendation_summaries(
        &self,
    ) -> fluent_builders::GetRecommendationSummaries<C, M, R> {
        fluent_builders::GetRecommendationSummaries::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateEnrollmentStatus` operation.
    ///
    /// See [`UpdateEnrollmentStatus`](crate::client::fluent_builders::UpdateEnrollmentStatus) for more information about the
    /// operation and its arguments.
    pub fn update_enrollment_status(&self) -> fluent_builders::UpdateEnrollmentStatus<C, M, R> {
        fluent_builders::UpdateEnrollmentStatus::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `DescribeRecommendationExportJobs`.
    ///
    /// <p>Describes recommendation export jobs created in the last seven days.</p>
    ///
    /// <p>Use the <a>ExportAutoScalingGroupRecommendations</a> or <a>ExportEC2InstanceRecommendations</a> actions to request an export of your
    /// recommendations. Then use the <a>DescribeRecommendationExportJobs</a> action
    /// to view your export jobs.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeRecommendationExportJobs<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_recommendation_export_jobs_input::Builder,
    }
    impl<C, M, R> DescribeRecommendationExportJobs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeRecommendationExportJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRecommendationExportJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeRecommendationExportJobsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeRecommendationExportJobsInputOperationOutputAlias,
                crate::output::DescribeRecommendationExportJobsOutput,
                crate::error::DescribeRecommendationExportJobsError,
                crate::input::DescribeRecommendationExportJobsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `jobIds`.
        ///
        /// To override the contents of this collection use [`set_job_ids`](Self::set_job_ids).
        ///
        /// <p>The identification numbers of the export jobs to return.</p>
        ///
        /// <p>An export job ID is returned when you create an export using the <a>ExportAutoScalingGroupRecommendations</a> or <a>ExportEC2InstanceRecommendations</a> actions.</p>
        ///
        /// <p>All export jobs created in the last seven days are returned if this parameter is
        /// omitted.</p>
        pub fn job_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_ids(inp);
            self
        }
        /// <p>The identification numbers of the export jobs to return.</p>
        ///
        /// <p>An export job ID is returned when you create an export using the <a>ExportAutoScalingGroupRecommendations</a> or <a>ExportEC2InstanceRecommendations</a> actions.</p>
        ///
        /// <p>All export jobs created in the last seven days are returned if this parameter is
        /// omitted.</p>
        pub fn set_job_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of export
        /// jobs.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::JobFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of export
        /// jobs.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The token to advance to the next page of export jobs.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of export jobs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of export jobs to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of export jobs to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ExportAutoScalingGroupRecommendations`.
    ///
    /// <p>Exports optimization recommendations for Auto Scaling groups.</p>
    ///
    /// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    /// in a JavaScript Object Notation (JSON) (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    /// Recommendations</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    ///
    /// <p>You can have only one Auto Scaling group export job in progress per Amazon Web Services Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ExportAutoScalingGroupRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::export_auto_scaling_group_recommendations_input::Builder,
    }
    impl<C, M, R> ExportAutoScalingGroupRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ExportAutoScalingGroupRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportAutoScalingGroupRecommendationsOutput,
            aws_smithy_http::result::SdkError<
                crate::error::ExportAutoScalingGroupRecommendationsError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExportAutoScalingGroupRecommendationsInputOperationOutputAlias,
                crate::output::ExportAutoScalingGroupRecommendationsOutput,
                crate::error::ExportAutoScalingGroupRecommendationsError,
                crate::input::ExportAutoScalingGroupRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The IDs of the Amazon Web Services accounts for which to export Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The IDs of the Amazon Web Services accounts for which to export Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that exports a more specific set of Auto Scaling group recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that exports a more specific set of Auto Scaling group recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `fieldsToExport`.
        ///
        /// To override the contents of this collection use [`set_fields_to_export`](Self::set_fields_to_export).
        ///
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableAutoScalingGroupField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ExportableAutoScalingGroupField>,
            >,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket
        /// name and key prefix for the export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permissions
        /// policy  to allow Compute Optimizer to write the export file to it. If you plan to
        /// specify an object prefix when you create the export job, you must include the object
        /// prefix in the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn s3_destination_config(mut self, inp: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(inp);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket
        /// name and key prefix for the export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permissions
        /// policy  to allow Compute Optimizer to write the export file to it. If you plan to
        /// specify an object prefix when you create the export job, you must include the object
        /// prefix in the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, inp: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(inp);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_member_accounts(inp);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
        /// <p>An object to specify the preferences for the Auto Scaling group recommendations
        /// to export.</p>
        pub fn recommendation_preferences(
            mut self,
            inp: crate::model::RecommendationPreferences,
        ) -> Self {
            self.inner = self.inner.recommendation_preferences(inp);
            self
        }
        /// <p>An object to specify the preferences for the Auto Scaling group recommendations
        /// to export.</p>
        pub fn set_recommendation_preferences(
            mut self,
            input: std::option::Option<crate::model::RecommendationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_recommendation_preferences(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ExportEBSVolumeRecommendations`.
    ///
    /// <p>Exports optimization recommendations for Amazon EBS volumes.</p>
    ///
    /// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    /// in a JavaScript Object Notation (JSON)   (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that you specify. For more information, see
    /// <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    /// Recommendations</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    ///
    /// <p>You can have only one Amazon EBS volume export job in progress per Amazon Web Services Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ExportEBSVolumeRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::export_ebs_volume_recommendations_input::Builder,
    }
    impl<C, M, R> ExportEBSVolumeRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ExportEBSVolumeRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportEbsVolumeRecommendationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ExportEBSVolumeRecommendationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExportEbsVolumeRecommendationsInputOperationOutputAlias,
                crate::output::ExportEbsVolumeRecommendationsOutput,
                crate::error::ExportEBSVolumeRecommendationsError,
                crate::input::ExportEbsVolumeRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The IDs of the Amazon Web Services accounts for which to export Amazon EBS
        /// volume recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The IDs of the Amazon Web Services accounts for which to export Amazon EBS
        /// volume recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that exports a more specific set of Amazon EBS volume recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::EbsFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that exports a more specific set of Amazon EBS volume recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EbsFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `fieldsToExport`.
        ///
        /// To override the contents of this collection use [`set_fields_to_export`](Self::set_fields_to_export).
        ///
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableVolumeField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableVolumeField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and
        /// key prefix for a recommendations export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permission
        /// policy to allow Compute Optimizer to write the export file to it. If you plan to specify
        /// an object prefix when you create the export job, you must include the object prefix in
        /// the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn s3_destination_config(mut self, inp: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(inp);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and
        /// key prefix for a recommendations export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permission
        /// policy to allow Compute Optimizer to write the export file to it. If you plan to specify
        /// an object prefix when you create the export job, you must include the object prefix in
        /// the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, inp: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(inp);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_member_accounts(inp);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ExportEC2InstanceRecommendations`.
    ///
    /// <p>Exports optimization recommendations for Amazon EC2 instances.</p>
    ///
    /// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    /// in a JavaScript Object Notation (JSON)   (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that you specify. For more information, see
    /// <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    /// Recommendations</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    ///
    /// <p>You can have only one Amazon EC2 instance export job in progress per Amazon Web Services Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ExportEC2InstanceRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::export_ec2_instance_recommendations_input::Builder,
    }
    impl<C, M, R> ExportEC2InstanceRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ExportEC2InstanceRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportEc2InstanceRecommendationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ExportEC2InstanceRecommendationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExportEc2InstanceRecommendationsInputOperationOutputAlias,
                crate::output::ExportEc2InstanceRecommendationsOutput,
                crate::error::ExportEC2InstanceRecommendationsError,
                crate::input::ExportEc2InstanceRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The IDs of the Amazon Web Services accounts for which to export instance
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The IDs of the Amazon Web Services accounts for which to export instance
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that exports a more specific set of instance
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that exports a more specific set of instance
        /// recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `fieldsToExport`.
        ///
        /// To override the contents of this collection use [`set_fields_to_export`](Self::set_fields_to_export).
        ///
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableInstanceField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableInstanceField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket
        /// name and key prefix for the export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permissions
        /// policy policy to allow Compute Optimizer to write the export file to it. If you plan to
        /// specify an object prefix when you create the export job, you must include the object
        /// prefix in the  that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn s3_destination_config(mut self, inp: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(inp);
            self
        }
        /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket
        /// name and key prefix for the export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permissions
        /// policy policy to allow Compute Optimizer to write the export file to it. If you plan to
        /// specify an object prefix when you create the export job, you must include the object
        /// prefix in the  that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, inp: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(inp);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_member_accounts(inp);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 instance
        /// recommendations to export.</p>
        pub fn recommendation_preferences(
            mut self,
            inp: crate::model::RecommendationPreferences,
        ) -> Self {
            self.inner = self.inner.recommendation_preferences(inp);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 instance
        /// recommendations to export.</p>
        pub fn set_recommendation_preferences(
            mut self,
            input: std::option::Option<crate::model::RecommendationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_recommendation_preferences(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ExportLambdaFunctionRecommendations`.
    ///
    /// <p>Exports optimization recommendations for Lambda functions.</p>
    ///
    /// <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    /// in a JavaScript Object Notation (JSON)   (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that you specify. For more information, see
    /// <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    /// Recommendations</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    ///
    /// <p>You can have only one Lambda function export job in progress per Amazon Web Services Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ExportLambdaFunctionRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::export_lambda_function_recommendations_input::Builder,
    }
    impl<C, M, R> ExportLambdaFunctionRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ExportLambdaFunctionRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportLambdaFunctionRecommendationsOutput,
            aws_smithy_http::result::SdkError<
                crate::error::ExportLambdaFunctionRecommendationsError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExportLambdaFunctionRecommendationsInputOperationOutputAlias,
                crate::output::ExportLambdaFunctionRecommendationsOutput,
                crate::error::ExportLambdaFunctionRecommendationsError,
                crate::input::ExportLambdaFunctionRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The IDs of the Amazon Web Services accounts for which to export Lambda
        /// function recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The IDs of the Amazon Web Services accounts for which to export Lambda
        /// function recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to export recommendations.</p>
        ///
        /// <p>This parameter cannot be specified together with the include member accounts
        /// parameter. The parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the include member accounts parameter, is omitted.</p>
        ///
        /// <p>You can specify multiple account IDs per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that exports a more specific set of Lambda function recommendations.</p>
        pub fn filters(
            mut self,
            inp: impl Into<crate::model::LambdaFunctionRecommendationFilter>,
        ) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that exports a more specific set of Lambda function recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LambdaFunctionRecommendationFilter>,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `fieldsToExport`.
        ///
        /// To override the contents of this collection use [`set_fields_to_export`](Self::set_fields_to_export).
        ///
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn fields_to_export(
            mut self,
            inp: impl Into<crate::model::ExportableLambdaFunctionField>,
        ) -> Self {
            self.inner = self.inner.fields_to_export(inp);
            self
        }
        /// <p>The recommendations data to include in the export file. For more information about the
        /// fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User
        /// Guide</i>.</p>
        pub fn set_fields_to_export(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportableLambdaFunctionField>>,
        ) -> Self {
            self.inner = self.inner.set_fields_to_export(input);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and
        /// key prefix for a recommendations export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permission
        /// policy to allow Compute Optimizer to write the export file to it. If you plan to specify
        /// an object prefix when you create the export job, you must include the object prefix in
        /// the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn s3_destination_config(mut self, inp: crate::model::S3DestinationConfig) -> Self {
            self.inner = self.inner.s3_destination_config(inp);
            self
        }
        /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and
        /// key prefix for a recommendations export job.</p>
        ///
        /// <p>You must create the destination Amazon S3 bucket for your recommendations
        /// export before you create the export job. Compute Optimizer does not create the S3 bucket
        /// for you. After you create the S3 bucket, ensure that it has the required permission
        /// policy to allow Compute Optimizer to write the export file to it. If you plan to specify
        /// an object prefix when you create the export job, you must include the object prefix in
        /// the policy that you add to the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        pub fn set_s3_destination_config(
            mut self,
            input: std::option::Option<crate::model::S3DestinationConfig>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination_config(input);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn file_format(mut self, inp: crate::model::FileFormat) -> Self {
            self.inner = self.inner.file_format(inp);
            self
        }
        /// <p>The format of the export file.</p>
        ///
        /// <p>The only export file format currently supported is <code>Csv</code>.</p>
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FileFormat>,
        ) -> Self {
            self.inner = self.inner.set_file_format(input);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn include_member_accounts(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_member_accounts(inp);
            self
        }
        /// <p>Indicates whether to include recommendations for resources in all member accounts of
        /// the organization if your account is the management account of an organization.</p>
        ///
        /// <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
        /// Compute Optimizer must be enabled in the organization account. For more information,
        /// see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and Amazon Web Services Organizations trusted access</a> in the
        /// <i>Compute Optimizer User Guide</i>.</p>
        ///
        /// <p>Recommendations for member accounts of the organization are not included in the export
        /// file if this parameter is omitted.</p>
        ///
        /// <p>This parameter cannot be specified together with the account IDs parameter. The
        /// parameters are mutually exclusive.</p>
        ///
        /// <p>Recommendations for member accounts are not included in the export if this parameter,
        /// or the account IDs parameter, is omitted.</p>
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetAutoScalingGroupRecommendations`.
    ///
    /// <p>Returns Auto Scaling group recommendations.</p>
    ///
    /// <p>Compute Optimizer generates recommendations for Amazon EC2 Auto Scaling groups that
    /// meet a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported
    /// resources and requirements</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetAutoScalingGroupRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_auto_scaling_group_recommendations_input::Builder,
    }
    impl<C, M, R> GetAutoScalingGroupRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetAutoScalingGroupRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAutoScalingGroupRecommendationsOutput,
            aws_smithy_http::result::SdkError<
                crate::error::GetAutoScalingGroupRecommendationsError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAutoScalingGroupRecommendationsInputOperationOutputAlias,
                crate::output::GetAutoScalingGroupRecommendationsOutput,
                crate::error::GetAutoScalingGroupRecommendationsError,
                crate::input::GetAutoScalingGroupRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The ID of the Amazon Web Services account for which to return Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The ID of the Amazon Web Services account for which to return Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return Auto Scaling group
        /// recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `autoScalingGroupArns`.
        ///
        /// To override the contents of this collection use [`set_auto_scaling_group_arns`](Self::set_auto_scaling_group_arns).
        ///
        /// <p>The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return
        /// recommendations.</p>
        pub fn auto_scaling_group_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.auto_scaling_group_arns(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return
        /// recommendations.</p>
        pub fn set_auto_scaling_group_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_group_arns(input);
            self
        }
        /// <p>The token to advance to the next page of Auto Scaling group
        /// recommendations.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of Auto Scaling group
        /// recommendations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of Auto Scaling group recommendations to return with a single
        /// request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of Auto Scaling group recommendations to return with a single
        /// request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of Auto Scaling group recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of Auto Scaling group recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>An object to specify the preferences for the Auto Scaling group recommendations
        /// to return in the response.</p>
        pub fn recommendation_preferences(
            mut self,
            inp: crate::model::RecommendationPreferences,
        ) -> Self {
            self.inner = self.inner.recommendation_preferences(inp);
            self
        }
        /// <p>An object to specify the preferences for the Auto Scaling group recommendations
        /// to return in the response.</p>
        pub fn set_recommendation_preferences(
            mut self,
            input: std::option::Option<crate::model::RecommendationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_recommendation_preferences(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetEBSVolumeRecommendations`.
    ///
    /// <p>Returns Amazon Elastic Block Store (Amazon EBS) volume recommendations.</p>
    ///
    /// <p>Compute Optimizer generates recommendations for Amazon EBS volumes that
    /// meet a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported
    /// resources and requirements</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetEBSVolumeRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_ebs_volume_recommendations_input::Builder,
    }
    impl<C, M, R> GetEBSVolumeRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetEBSVolumeRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEbsVolumeRecommendationsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetEBSVolumeRecommendationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEbsVolumeRecommendationsInputOperationOutputAlias,
                crate::output::GetEbsVolumeRecommendationsOutput,
                crate::error::GetEBSVolumeRecommendationsError,
                crate::input::GetEbsVolumeRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `volumeArns`.
        ///
        /// To override the contents of this collection use [`set_volume_arns`](Self::set_volume_arns).
        ///
        /// <p>The Amazon Resource Name (ARN) of the volumes for which to return
        /// recommendations.</p>
        pub fn volume_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_arns(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the volumes for which to return
        /// recommendations.</p>
        pub fn set_volume_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_volume_arns(input);
            self
        }
        /// <p>The token to advance to the next page of volume recommendations.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of volume recommendations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of volume recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of volume recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of volume
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::EbsFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of volume
        /// recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EbsFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The ID of the Amazon Web Services account for which to return volume
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return volume recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The ID of the Amazon Web Services account for which to return volume
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return volume recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetEC2InstanceRecommendations`.
    ///
    /// <p>Returns Amazon EC2 instance recommendations.</p>
    ///
    /// <p>Compute Optimizer generates recommendations for Amazon Elastic Compute Cloud (Amazon EC2) instances that meet a specific set of requirements. For more
    /// information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
    /// requirements</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetEC2InstanceRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_ec2_instance_recommendations_input::Builder,
    }
    impl<C, M, R> GetEC2InstanceRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetEC2InstanceRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEc2InstanceRecommendationsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetEC2InstanceRecommendationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEc2InstanceRecommendationsInputOperationOutputAlias,
                crate::output::GetEc2InstanceRecommendationsOutput,
                crate::error::GetEC2InstanceRecommendationsError,
                crate::input::GetEc2InstanceRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `instanceArns`.
        ///
        /// To override the contents of this collection use [`set_instance_arns`](Self::set_instance_arns).
        ///
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return
        /// recommendations.</p>
        pub fn instance_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_arns(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return
        /// recommendations.</p>
        pub fn set_instance_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_arns(input);
            self
        }
        /// <p>The token to advance to the next page of instance recommendations.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of instance recommendations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of instance recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of instance recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of instance
        /// recommendations.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::Filter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of instance
        /// recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The ID of the Amazon Web Services account for which to return instance
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return instance recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The ID of the Amazon Web Services account for which to return instance
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return instance recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 instance
        /// recommendations to return in the response.</p>
        pub fn recommendation_preferences(
            mut self,
            inp: crate::model::RecommendationPreferences,
        ) -> Self {
            self.inner = self.inner.recommendation_preferences(inp);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 instance
        /// recommendations to return in the response.</p>
        pub fn set_recommendation_preferences(
            mut self,
            input: std::option::Option<crate::model::RecommendationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_recommendation_preferences(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetEC2RecommendationProjectedMetrics`.
    ///
    /// <p>Returns the projected utilization metrics of Amazon EC2 instance
    /// recommendations.</p>
    ///
    /// <note>
    /// <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
    /// utilization metrics returned when you run this action. Additionally, the
    /// <code>Memory</code> metric is returned only for resources that have the unified
    /// CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory Utilization with the CloudWatch Agent</a>.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct GetEC2RecommendationProjectedMetrics<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_ec2_recommendation_projected_metrics_input::Builder,
    }
    impl<C, M, R> GetEC2RecommendationProjectedMetrics<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetEC2RecommendationProjectedMetrics`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEc2RecommendationProjectedMetricsOutput,
            aws_smithy_http::result::SdkError<
                crate::error::GetEC2RecommendationProjectedMetricsError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEc2RecommendationProjectedMetricsInputOperationOutputAlias,
                crate::output::GetEc2RecommendationProjectedMetricsOutput,
                crate::error::GetEC2RecommendationProjectedMetricsError,
                crate::input::GetEc2RecommendationProjectedMetricsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return recommendation
        /// projected metrics.</p>
        pub fn instance_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the instances for which to return recommendation
        /// projected metrics.</p>
        pub fn set_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_arn(input);
            self
        }
        /// <p>The statistic of the projected metrics.</p>
        pub fn stat(mut self, inp: crate::model::MetricStatistic) -> Self {
            self.inner = self.inner.stat(inp);
            self
        }
        /// <p>The statistic of the projected metrics.</p>
        pub fn set_stat(
            mut self,
            input: std::option::Option<crate::model::MetricStatistic>,
        ) -> Self {
            self.inner = self.inner.set_stat(input);
            self
        }
        /// <p>The granularity, in seconds, of the projected metrics data points.</p>
        pub fn period(mut self, inp: i32) -> Self {
            self.inner = self.inner.period(inp);
            self
        }
        /// <p>The granularity, in seconds, of the projected metrics data points.</p>
        pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_period(input);
            self
        }
        /// <p>The timestamp of the first projected metrics data point to return.</p>
        pub fn start_time(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.start_time(inp);
            self
        }
        /// <p>The timestamp of the first projected metrics data point to return.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_start_time(input);
            self
        }
        /// <p>The timestamp of the last projected metrics data point to return.</p>
        pub fn end_time(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.end_time(inp);
            self
        }
        /// <p>The timestamp of the last projected metrics data point to return.</p>
        pub fn set_end_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_end_time(input);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 recommendation
        /// projected metrics to return in the response.</p>
        pub fn recommendation_preferences(
            mut self,
            inp: crate::model::RecommendationPreferences,
        ) -> Self {
            self.inner = self.inner.recommendation_preferences(inp);
            self
        }
        /// <p>An object to specify the preferences for the Amazon EC2 recommendation
        /// projected metrics to return in the response.</p>
        pub fn set_recommendation_preferences(
            mut self,
            input: std::option::Option<crate::model::RecommendationPreferences>,
        ) -> Self {
            self.inner = self.inner.set_recommendation_preferences(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetEnrollmentStatus`.
    ///
    /// <p>Returns the enrollment (opt in) status of an account to the Compute Optimizer
    /// service.</p>
    ///
    /// <p>If the account is the management account of an organization, this action also confirms
    /// the enrollment status of member accounts of the organization. Use the <a>GetEnrollmentStatusesForOrganization</a> action to get detailed information
    /// about the enrollment status of member accounts of an organization.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetEnrollmentStatus<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_enrollment_status_input::Builder,
    }
    impl<C, M, R> GetEnrollmentStatus<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetEnrollmentStatus`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEnrollmentStatusOutput,
            aws_smithy_http::result::SdkError<crate::error::GetEnrollmentStatusError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEnrollmentStatusInputOperationOutputAlias,
                crate::output::GetEnrollmentStatusOutput,
                crate::error::GetEnrollmentStatusError,
                crate::input::GetEnrollmentStatusInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `GetEnrollmentStatusesForOrganization`.
    ///
    /// <p>Returns the Compute Optimizer enrollment (opt-in) status of organization member
    /// accounts, if your account is an organization management account.</p>
    ///
    /// <p>To get the enrollment status of standalone accounts, use the <a>GetEnrollmentStatus</a> action.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetEnrollmentStatusesForOrganization<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_enrollment_statuses_for_organization_input::Builder,
    }
    impl<C, M, R> GetEnrollmentStatusesForOrganization<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetEnrollmentStatusesForOrganization`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEnrollmentStatusesForOrganizationOutput,
            aws_smithy_http::result::SdkError<
                crate::error::GetEnrollmentStatusesForOrganizationError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEnrollmentStatusesForOrganizationInputOperationOutputAlias,
                crate::output::GetEnrollmentStatusesForOrganizationOutput,
                crate::error::GetEnrollmentStatusesForOrganizationError,
                crate::input::GetEnrollmentStatusesForOrganizationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of account
        /// enrollment statuses.</p>
        pub fn filters(mut self, inp: impl Into<crate::model::EnrollmentFilter>) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of account
        /// enrollment statuses.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EnrollmentFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The token to advance to the next page of account enrollment statuses.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of account enrollment statuses.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of account enrollment statuses to return with a single request. You
        /// can specify up to 100 statuses to return with each request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of account enrollment statuses to return with a single request. You
        /// can specify up to 100 statuses to return with each request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetLambdaFunctionRecommendations`.
    ///
    /// <p>Returns Lambda function recommendations.</p>
    ///
    /// <p>Compute Optimizer generates recommendations for functions that meet a specific set
    /// of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
    /// requirements</a> in the <i>Compute Optimizer User
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetLambdaFunctionRecommendations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_lambda_function_recommendations_input::Builder,
    }
    impl<C, M, R> GetLambdaFunctionRecommendations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetLambdaFunctionRecommendations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetLambdaFunctionRecommendationsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetLambdaFunctionRecommendationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetLambdaFunctionRecommendationsInputOperationOutputAlias,
                crate::output::GetLambdaFunctionRecommendationsOutput,
                crate::error::GetLambdaFunctionRecommendationsError,
                crate::input::GetLambdaFunctionRecommendationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `functionArns`.
        ///
        /// To override the contents of this collection use [`set_function_arns`](Self::set_function_arns).
        ///
        /// <p>The Amazon Resource Name (ARN) of the functions for which to return
        /// recommendations.</p>
        ///
        /// <p>You can specify a qualified or unqualified ARN. If you specify an unqualified ARN
        /// without a function version suffix, Compute Optimizer will return recommendations for the
        /// latest (<code>$LATEST</code>) version of the function. If you specify a qualified ARN
        /// with a version suffix, Compute Optimizer will return recommendations for the specified
        /// function version. For more information about using function versions, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using">Using
        /// versions</a> in the <i>Lambda Developer
        /// Guide</i>.</p>
        pub fn function_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.function_arns(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the functions for which to return
        /// recommendations.</p>
        ///
        /// <p>You can specify a qualified or unqualified ARN. If you specify an unqualified ARN
        /// without a function version suffix, Compute Optimizer will return recommendations for the
        /// latest (<code>$LATEST</code>) version of the function. If you specify a qualified ARN
        /// with a version suffix, Compute Optimizer will return recommendations for the specified
        /// function version. For more information about using function versions, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using">Using
        /// versions</a> in the <i>Lambda Developer
        /// Guide</i>.</p>
        pub fn set_function_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_function_arns(input);
            self
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The ID of the Amazon Web Services account for which to return function
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return function recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The ID of the Amazon Web Services account for which to return function
        /// recommendations.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return function recommendations.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>An array of objects to specify a filter that returns a more specific list of function
        /// recommendations.</p>
        pub fn filters(
            mut self,
            inp: impl Into<crate::model::LambdaFunctionRecommendationFilter>,
        ) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>An array of objects to specify a filter that returns a more specific list of function
        /// recommendations.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LambdaFunctionRecommendationFilter>,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The token to advance to the next page of function recommendations.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of function recommendations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of function recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of function recommendations to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetRecommendationSummaries`.
    ///
    /// <p>Returns the optimization findings for an account.</p>
    ///
    /// <p>It returns the number of:</p>
    ///
    /// <ul>
    /// <li>
    /// <p>Amazon EC2 instances in an account that are
    /// <code>Underprovisioned</code>, <code>Overprovisioned</code>, or
    /// <code>Optimized</code>.</p>
    /// </li>
    /// <li>
    /// <p>Auto Scaling groups in an account that are <code>NotOptimized</code>, or
    /// <code>Optimized</code>.</p>
    /// </li>
    /// <li>
    /// <p>Amazon EBS volumes in an account that are <code>NotOptimized</code>,
    /// or <code>Optimized</code>.</p>
    /// </li>
    /// <li>
    /// <p>Lambda functions in an account that are <code>NotOptimized</code>,
    /// or <code>Optimized</code>.</p>
    /// </li>
    /// </ul>
    #[derive(std::fmt::Debug)]
    pub struct GetRecommendationSummaries<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_recommendation_summaries_input::Builder,
    }
    impl<C, M, R> GetRecommendationSummaries<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetRecommendationSummaries`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRecommendationSummariesOutput,
            aws_smithy_http::result::SdkError<crate::error::GetRecommendationSummariesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRecommendationSummariesInputOperationOutputAlias,
                crate::output::GetRecommendationSummariesOutput,
                crate::error::GetRecommendationSummariesError,
                crate::input::GetRecommendationSummariesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `accountIds`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The ID of the Amazon Web Services account for which to return recommendation
        /// summaries.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return recommendation summaries.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn account_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_ids(inp);
            self
        }
        /// <p>The ID of the Amazon Web Services account for which to return recommendation
        /// summaries.</p>
        ///
        /// <p>If your account is the management account of an organization, use this parameter to
        /// specify the member account for which you want to return recommendation summaries.</p>
        ///
        /// <p>Only one account ID can be specified per request.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_account_ids(input);
            self
        }
        /// <p>The token to advance to the next page of recommendation summaries.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The token to advance to the next page of recommendation summaries.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of recommendation summaries to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of recommendation summaries to return with a single request.</p>
        ///
        /// <p>To retrieve the remaining results, make another request with the returned
        /// <code>nextToken</code> value.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateEnrollmentStatus`.
    ///
    /// <p>Updates the enrollment (opt in and opt out) status of an account to the Compute Optimizer service.</p>
    ///
    /// <p>If the account is a management account of an organization, this action can also be
    /// used to enroll member accounts of the organization.</p>
    ///
    /// <p>You must have the appropriate permissions to opt in to Compute Optimizer, to view its
    /// recommendations, and to opt out. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html">Controlling access with Amazon Web Services Identity and Access Management</a> in the <i>Compute Optimizer User Guide</i>.</p>
    ///
    /// <p>When you opt in, Compute Optimizer automatically creates a service-linked role in your
    /// account to access its data. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/using-service-linked-roles.html">Using
    /// Service-Linked Roles for Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateEnrollmentStatus<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_enrollment_status_input::Builder,
    }
    impl<C, M, R> UpdateEnrollmentStatus<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateEnrollmentStatus`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateEnrollmentStatusOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateEnrollmentStatusError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateEnrollmentStatusInputOperationOutputAlias,
                crate::output::UpdateEnrollmentStatusOutput,
                crate::error::UpdateEnrollmentStatusError,
                crate::input::UpdateEnrollmentStatusInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The new enrollment status of the account.</p>
        ///
        /// <p>The following status options are available:</p>
        ///
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Active</code> - Opts in your account to the Compute Optimizer service.
        /// Compute Optimizer begins analyzing the configuration and utilization metrics
        /// of your Amazon Web Services resources after you opt in. For more information, see
        /// <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics analyzed by Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Inactive</code> - Opts out your account from the Compute Optimizer
        /// service. Your account's recommendations and related metrics data will be deleted
        /// from Compute Optimizer after you opt out.</p>
        /// </li>
        /// </ul>
        ///
        /// <note>
        /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update
        /// the enrollment status of an account. They are returned in the response of a request
        /// to update the enrollment status of an account.</p>
        /// </note>
        pub fn status(mut self, inp: crate::model::Status) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        /// <p>The new enrollment status of the account.</p>
        ///
        /// <p>The following status options are available:</p>
        ///
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Active</code> - Opts in your account to the Compute Optimizer service.
        /// Compute Optimizer begins analyzing the configuration and utilization metrics
        /// of your Amazon Web Services resources after you opt in. For more information, see
        /// <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics analyzed by Compute Optimizer</a> in the <i>Compute Optimizer User Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Inactive</code> - Opts out your account from the Compute Optimizer
        /// service. Your account's recommendations and related metrics data will be deleted
        /// from Compute Optimizer after you opt out.</p>
        /// </li>
        /// </ul>
        ///
        /// <note>
        /// <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update
        /// the enrollment status of an account. They are returned in the response of a request
        /// to update the enrollment status of an account.</p>
        /// </note>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>Indicates whether to enroll member accounts of the organization if the account is the
        /// management account of an organization.</p>
        pub fn include_member_accounts(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_member_accounts(inp);
            self
        }
        /// <p>Indicates whether to enroll member accounts of the organization if the account is the
        /// management account of an organization.</p>
        pub fn set_include_member_accounts(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_member_accounts(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::new(conn)
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::https()
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
