// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS IoT FleetWise
///
/// Client for invoking operations on AWS IoT FleetWise. Each operation on AWS IoT FleetWise is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_iotfleetwise::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_iotfleetwise::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_iotfleetwise::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateVehicleFleet`](crate::client::fluent_builders::AssociateVehicleFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::AssociateVehicleFleet::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::AssociateVehicleFleet::set_vehicle_name): <p> The unique ID of the vehicle to associate with the fleet. </p>
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::AssociateVehicleFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::AssociateVehicleFleet::set_fleet_id): <p> The ID of a fleet. </p>
    /// - On success, responds with [`AssociateVehicleFleetOutput`](crate::output::AssociateVehicleFleetOutput)

    /// - On failure, responds with [`SdkError<AssociateVehicleFleetError>`](crate::error::AssociateVehicleFleetError)
    pub fn associate_vehicle_fleet(&self) -> crate::client::fluent_builders::AssociateVehicleFleet {
        crate::client::fluent_builders::AssociateVehicleFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchCreateVehicle`](crate::client::fluent_builders::BatchCreateVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicles(Vec<CreateVehicleRequestItem>)`](crate::client::fluent_builders::BatchCreateVehicle::vehicles) / [`set_vehicles(Option<Vec<CreateVehicleRequestItem>>)`](crate::client::fluent_builders::BatchCreateVehicle::set_vehicles): <p> A list of information about each vehicle to create. For more information, see the API data type.</p>
    /// - On success, responds with [`BatchCreateVehicleOutput`](crate::output::BatchCreateVehicleOutput) with field(s):
    ///   - [`vehicles(Option<Vec<CreateVehicleResponseItem>>)`](crate::output::BatchCreateVehicleOutput::vehicles): <p> A list of information about a batch of created vehicles. For more information, see the API data type.</p>
    ///   - [`errors(Option<Vec<CreateVehicleError>>)`](crate::output::BatchCreateVehicleOutput::errors): <p>A list of information about creation errors, or an empty list if there aren't any errors. </p>
    /// - On failure, responds with [`SdkError<BatchCreateVehicleError>`](crate::error::BatchCreateVehicleError)
    pub fn batch_create_vehicle(&self) -> crate::client::fluent_builders::BatchCreateVehicle {
        crate::client::fluent_builders::BatchCreateVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchUpdateVehicle`](crate::client::fluent_builders::BatchUpdateVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicles(Vec<UpdateVehicleRequestItem>)`](crate::client::fluent_builders::BatchUpdateVehicle::vehicles) / [`set_vehicles(Option<Vec<UpdateVehicleRequestItem>>)`](crate::client::fluent_builders::BatchUpdateVehicle::set_vehicles): <p> A list of information about the vehicles to update. For more information, see the API data type.</p>
    /// - On success, responds with [`BatchUpdateVehicleOutput`](crate::output::BatchUpdateVehicleOutput) with field(s):
    ///   - [`vehicles(Option<Vec<UpdateVehicleResponseItem>>)`](crate::output::BatchUpdateVehicleOutput::vehicles): <p> A list of information about the batch of updated vehicles. </p> <note>   <p>This list contains only unique IDs for the vehicles that were updated.</p>  </note>
    ///   - [`errors(Option<Vec<UpdateVehicleError>>)`](crate::output::BatchUpdateVehicleOutput::errors): <p>A list of information about errors returned while updating a batch of vehicles, or, if there aren't any errors, an empty list.</p>
    /// - On failure, responds with [`SdkError<BatchUpdateVehicleError>`](crate::error::BatchUpdateVehicleError)
    pub fn batch_update_vehicle(&self) -> crate::client::fluent_builders::BatchUpdateVehicle {
        crate::client::fluent_builders::BatchUpdateVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCampaign`](crate::client::fluent_builders::CreateCampaign) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateCampaign::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateCampaign::set_name): <p> The name of the campaign to create. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateCampaign::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateCampaign::set_description): <p>An optional description of the campaign to help identify its purpose.</p>
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::client::fluent_builders::CreateCampaign::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::client::fluent_builders::CreateCampaign::set_signal_catalog_arn): <p>(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. </p>
    ///   - [`target_arn(impl Into<String>)`](crate::client::fluent_builders::CreateCampaign::target_arn) / [`set_target_arn(Option<String>)`](crate::client::fluent_builders::CreateCampaign::set_target_arn): <p> The ARN of the vehicle or fleet to deploy a campaign to. </p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::CreateCampaign::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::CreateCampaign::set_start_time): <p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it's not specified, <code>0</code> is used.</p>  <p>Default: <code>0</code> </p>
    ///   - [`expiry_time(DateTime)`](crate::client::fluent_builders::CreateCampaign::expiry_time) / [`set_expiry_time(Option<DateTime>)`](crate::client::fluent_builders::CreateCampaign::set_expiry_time): <p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires. </p>  <p>Default: 253402214400 (December 31, 9999, 00:00:00 UTC)</p>
    ///   - [`post_trigger_collection_duration(i64)`](crate::client::fluent_builders::CreateCampaign::post_trigger_collection_duration) / [`set_post_trigger_collection_duration(Option<i64>)`](crate::client::fluent_builders::CreateCampaign::set_post_trigger_collection_duration): <p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it's not specified, <code>0</code> is used.</p>  <p>Default: <code>0</code> </p>
    ///   - [`diagnostics_mode(DiagnosticsMode)`](crate::client::fluent_builders::CreateCampaign::diagnostics_mode) / [`set_diagnostics_mode(Option<DiagnosticsMode>)`](crate::client::fluent_builders::CreateCampaign::set_diagnostics_mode): <p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it's not specified, <code>OFF</code> is used.</p>  <p>Default: <code>OFF</code> </p>
    ///   - [`spooling_mode(SpoolingMode)`](crate::client::fluent_builders::CreateCampaign::spooling_mode) / [`set_spooling_mode(Option<SpoolingMode>)`](crate::client::fluent_builders::CreateCampaign::set_spooling_mode): <p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it's not specified, <code>OFF</code> is used.</p>  <p>Default: <code>OFF</code> </p>
    ///   - [`compression(Compression)`](crate::client::fluent_builders::CreateCampaign::compression) / [`set_compression(Option<Compression>)`](crate::client::fluent_builders::CreateCampaign::set_compression): <p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don't want to compress the signals, use <code>OFF</code>. If it's not specified, <code>SNAPPY</code> is used. </p>  <p>Default: <code>SNAPPY</code> </p>
    ///   - [`priority(i32)`](crate::client::fluent_builders::CreateCampaign::priority) / [`set_priority(Option<i32>)`](crate::client::fluent_builders::CreateCampaign::set_priority): <p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it's not specified, <code>0</code> is used. </p>  <p>Default: <code>0</code> </p>
    ///   - [`signals_to_collect(Vec<SignalInformation>)`](crate::client::fluent_builders::CreateCampaign::signals_to_collect) / [`set_signals_to_collect(Option<Vec<SignalInformation>>)`](crate::client::fluent_builders::CreateCampaign::set_signals_to_collect): <p>(Optional) A list of information about signals to collect. </p>
    ///   - [`collection_scheme(CollectionScheme)`](crate::client::fluent_builders::CreateCampaign::collection_scheme) / [`set_collection_scheme(Option<CollectionScheme>)`](crate::client::fluent_builders::CreateCampaign::set_collection_scheme): <p> The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event.</p>
    ///   - [`data_extra_dimensions(Vec<String>)`](crate::client::fluent_builders::CreateCampaign::data_extra_dimensions) / [`set_data_extra_dimensions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateCampaign::set_data_extra_dimensions): <p> (Optional) A list of vehicle attributes to associate with a campaign. </p>  <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p>  <p>Default: An empty array</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateCampaign::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateCampaign::set_tags): <p>Metadata that can be used to manage the campaign.</p>
    /// - On success, responds with [`CreateCampaignOutput`](crate::output::CreateCampaignOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateCampaignOutput::name): <p>The name of the created campaign.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateCampaignOutput::arn): <p> The ARN of the created campaign. </p>
    /// - On failure, responds with [`SdkError<CreateCampaignError>`](crate::error::CreateCampaignError)
    pub fn create_campaign(&self) -> crate::client::fluent_builders::CreateCampaign {
        crate::client::fluent_builders::CreateCampaign::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDecoderManifest`](crate::client::fluent_builders::CreateDecoderManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDecoderManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDecoderManifest::set_name): <p> The unique name of the decoder manifest to create.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDecoderManifest::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDecoderManifest::set_description): <p> A brief description of the decoder manifest. </p>
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::CreateDecoderManifest::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::client::fluent_builders::CreateDecoderManifest::set_model_manifest_arn): <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    ///   - [`signal_decoders(Vec<SignalDecoder>)`](crate::client::fluent_builders::CreateDecoderManifest::signal_decoders) / [`set_signal_decoders(Option<Vec<SignalDecoder>>)`](crate::client::fluent_builders::CreateDecoderManifest::set_signal_decoders): <p> A list of information about signal decoders. </p>
    ///   - [`network_interfaces(Vec<NetworkInterface>)`](crate::client::fluent_builders::CreateDecoderManifest::network_interfaces) / [`set_network_interfaces(Option<Vec<NetworkInterface>>)`](crate::client::fluent_builders::CreateDecoderManifest::set_network_interfaces): <p> A list of information about available network interfaces. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDecoderManifest::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDecoderManifest::set_tags): <p>Metadata that can be used to manage the decoder manifest.</p>
    /// - On success, responds with [`CreateDecoderManifestOutput`](crate::output::CreateDecoderManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateDecoderManifestOutput::name): <p> The name of the created decoder manifest. </p>
    ///   - [`arn(Option<String>)`](crate::output::CreateDecoderManifestOutput::arn): <p> The ARN of the created decoder manifest. </p>
    /// - On failure, responds with [`SdkError<CreateDecoderManifestError>`](crate::error::CreateDecoderManifestError)
    pub fn create_decoder_manifest(&self) -> crate::client::fluent_builders::CreateDecoderManifest {
        crate::client::fluent_builders::CreateDecoderManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFleet`](crate::client::fluent_builders::CreateFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_fleet_id): <p> The unique ID of the fleet to create. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_description): <p> A brief description of the fleet to create. </p>
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_signal_catalog_arn): <p> The Amazon Resource Name (ARN) of a signal catalog. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateFleet::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateFleet::set_tags): <p>Metadata that can be used to manage the fleet.</p>
    /// - On success, responds with [`CreateFleetOutput`](crate::output::CreateFleetOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateFleetOutput::id): <p> The ID of the created fleet. </p>
    ///   - [`arn(Option<String>)`](crate::output::CreateFleetOutput::arn): <p> The ARN of the created fleet. </p>
    /// - On failure, responds with [`SdkError<CreateFleetError>`](crate::error::CreateFleetError)
    pub fn create_fleet(&self) -> crate::client::fluent_builders::CreateFleet {
        crate::client::fluent_builders::CreateFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateModelManifest`](crate::client::fluent_builders::CreateModelManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_name): <p> The name of the vehicle model to create.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_description): <p> A brief description of the vehicle model. </p>
    ///   - [`nodes(Vec<String>)`](crate::client::fluent_builders::CreateModelManifest::nodes) / [`set_nodes(Option<Vec<String>>)`](crate::client::fluent_builders::CreateModelManifest::set_nodes): <p> A list of nodes, which are a general abstraction of signals. </p>
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_signal_catalog_arn): <p> The Amazon Resource Name (ARN) of a signal catalog. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModelManifest::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModelManifest::set_tags): <p>Metadata that can be used to manage the vehicle model.</p>
    /// - On success, responds with [`CreateModelManifestOutput`](crate::output::CreateModelManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateModelManifestOutput::name): <p> The name of the created vehicle model.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateModelManifestOutput::arn): <p> The ARN of the created vehicle model.</p>
    /// - On failure, responds with [`SdkError<CreateModelManifestError>`](crate::error::CreateModelManifestError)
    pub fn create_model_manifest(&self) -> crate::client::fluent_builders::CreateModelManifest {
        crate::client::fluent_builders::CreateModelManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSignalCatalog`](crate::client::fluent_builders::CreateSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSignalCatalog::set_name): <p> The name of the signal catalog to create. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSignalCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSignalCatalog::set_description): <p>A brief description of the signal catalog.</p>
    ///   - [`nodes(Vec<Node>)`](crate::client::fluent_builders::CreateSignalCatalog::nodes) / [`set_nodes(Option<Vec<Node>>)`](crate::client::fluent_builders::CreateSignalCatalog::set_nodes): <p> A list of information about nodes, which are a general abstraction of signals. For more information, see the API data type.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSignalCatalog::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSignalCatalog::set_tags): <p>Metadata that can be used to manage the signal catalog.</p>
    /// - On success, responds with [`CreateSignalCatalogOutput`](crate::output::CreateSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateSignalCatalogOutput::name): <p> The name of the created signal catalog. </p>
    ///   - [`arn(Option<String>)`](crate::output::CreateSignalCatalogOutput::arn): <p> The ARN of the created signal catalog. </p>
    /// - On failure, responds with [`SdkError<CreateSignalCatalogError>`](crate::error::CreateSignalCatalogError)
    pub fn create_signal_catalog(&self) -> crate::client::fluent_builders::CreateSignalCatalog {
        crate::client::fluent_builders::CreateSignalCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVehicle`](crate::client::fluent_builders::CreateVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::CreateVehicle::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::CreateVehicle::set_vehicle_name): <p> The unique ID of the vehicle to create. </p>
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::CreateVehicle::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::client::fluent_builders::CreateVehicle::set_model_manifest_arn): <p> The Amazon Resource Name ARN of a vehicle model. </p>
    ///   - [`decoder_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::CreateVehicle::decoder_manifest_arn) / [`set_decoder_manifest_arn(Option<String>)`](crate::client::fluent_builders::CreateVehicle::set_decoder_manifest_arn): <p> The ARN of a decoder manifest. </p>
    ///   - [`attributes(HashMap<String, String>)`](crate::client::fluent_builders::CreateVehicle::attributes) / [`set_attributes(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateVehicle::set_attributes): <p>Static information about a vehicle in a key-value pair. For example: <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    ///   - [`association_behavior(VehicleAssociationBehavior)`](crate::client::fluent_builders::CreateVehicle::association_behavior) / [`set_association_behavior(Option<VehicleAssociationBehavior>)`](crate::client::fluent_builders::CreateVehicle::set_association_behavior): <p> An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing Amazon Web Services IoT thing as a vehicle. </p>  <p>Default: <code></code> </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateVehicle::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateVehicle::set_tags): <p>Metadata that can be used to manage the vehicle.</p>
    /// - On success, responds with [`CreateVehicleOutput`](crate::output::CreateVehicleOutput) with field(s):
    ///   - [`vehicle_name(Option<String>)`](crate::output::CreateVehicleOutput::vehicle_name): <p>The unique ID of the created vehicle.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateVehicleOutput::arn): <p> The ARN of the created vehicle. </p>
    ///   - [`thing_arn(Option<String>)`](crate::output::CreateVehicleOutput::thing_arn): <p> The ARN of a created or validated Amazon Web Services IoT thing. </p>
    /// - On failure, responds with [`SdkError<CreateVehicleError>`](crate::error::CreateVehicleError)
    pub fn create_vehicle(&self) -> crate::client::fluent_builders::CreateVehicle {
        crate::client::fluent_builders::CreateVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCampaign`](crate::client::fluent_builders::DeleteCampaign) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteCampaign::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteCampaign::set_name): <p> The name of the campaign to delete. </p>
    /// - On success, responds with [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DeleteCampaignOutput::name): <p>The name of the deleted campaign.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteCampaignOutput::arn): <p> The Amazon Resource Name (ARN) of the deleted campaign.</p> <note>   <p>The ARN isn’t returned if a campaign doesn’t exist.</p>  </note>
    /// - On failure, responds with [`SdkError<DeleteCampaignError>`](crate::error::DeleteCampaignError)
    pub fn delete_campaign(&self) -> crate::client::fluent_builders::DeleteCampaign {
        crate::client::fluent_builders::DeleteCampaign::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDecoderManifest`](crate::client::fluent_builders::DeleteDecoderManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteDecoderManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteDecoderManifest::set_name): <p> The name of the decoder manifest to delete. </p>
    /// - On success, responds with [`DeleteDecoderManifestOutput`](crate::output::DeleteDecoderManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DeleteDecoderManifestOutput::name): <p>The name of the deleted decoder manifest.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteDecoderManifestOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted decoder manifest.</p>
    /// - On failure, responds with [`SdkError<DeleteDecoderManifestError>`](crate::error::DeleteDecoderManifestError)
    pub fn delete_decoder_manifest(&self) -> crate::client::fluent_builders::DeleteDecoderManifest {
        crate::client::fluent_builders::DeleteDecoderManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFleet`](crate::client::fluent_builders::DeleteFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeleteFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeleteFleet::set_fleet_id): <p> The ID of the fleet to delete. </p>
    /// - On success, responds with [`DeleteFleetOutput`](crate::output::DeleteFleetOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::DeleteFleetOutput::id): <p>The ID of the deleted fleet.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteFleetOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted fleet.</p>
    /// - On failure, responds with [`SdkError<DeleteFleetError>`](crate::error::DeleteFleetError)
    pub fn delete_fleet(&self) -> crate::client::fluent_builders::DeleteFleet {
        crate::client::fluent_builders::DeleteFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteModelManifest`](crate::client::fluent_builders::DeleteModelManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteModelManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteModelManifest::set_name): <p> The name of the model manifest to delete. </p>
    /// - On success, responds with [`DeleteModelManifestOutput`](crate::output::DeleteModelManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DeleteModelManifestOutput::name): <p>The name of the deleted model manifest.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteModelManifestOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted model manifest.</p>
    /// - On failure, responds with [`SdkError<DeleteModelManifestError>`](crate::error::DeleteModelManifestError)
    pub fn delete_model_manifest(&self) -> crate::client::fluent_builders::DeleteModelManifest {
        crate::client::fluent_builders::DeleteModelManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSignalCatalog`](crate::client::fluent_builders::DeleteSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteSignalCatalog::set_name): <p> The name of the signal catalog to delete. </p>
    /// - On success, responds with [`DeleteSignalCatalogOutput`](crate::output::DeleteSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DeleteSignalCatalogOutput::name): <p>The name of the deleted signal catalog.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteSignalCatalogOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted signal catalog.</p>
    /// - On failure, responds with [`SdkError<DeleteSignalCatalogError>`](crate::error::DeleteSignalCatalogError)
    pub fn delete_signal_catalog(&self) -> crate::client::fluent_builders::DeleteSignalCatalog {
        crate::client::fluent_builders::DeleteSignalCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVehicle`](crate::client::fluent_builders::DeleteVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::DeleteVehicle::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::DeleteVehicle::set_vehicle_name): <p>The ID of the vehicle to delete. </p>
    /// - On success, responds with [`DeleteVehicleOutput`](crate::output::DeleteVehicleOutput) with field(s):
    ///   - [`vehicle_name(Option<String>)`](crate::output::DeleteVehicleOutput::vehicle_name): <p>The ID of the deleted vehicle.</p>
    ///   - [`arn(Option<String>)`](crate::output::DeleteVehicleOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted vehicle.</p>
    /// - On failure, responds with [`SdkError<DeleteVehicleError>`](crate::error::DeleteVehicleError)
    pub fn delete_vehicle(&self) -> crate::client::fluent_builders::DeleteVehicle {
        crate::client::fluent_builders::DeleteVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateVehicleFleet`](crate::client::fluent_builders::DisassociateVehicleFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateVehicleFleet::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::DisassociateVehicleFleet::set_vehicle_name): <p> The unique ID of the vehicle to disassociate from the fleet.</p>
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateVehicleFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DisassociateVehicleFleet::set_fleet_id): <p> The unique ID of a fleet. </p>
    /// - On success, responds with [`DisassociateVehicleFleetOutput`](crate::output::DisassociateVehicleFleetOutput)

    /// - On failure, responds with [`SdkError<DisassociateVehicleFleetError>`](crate::error::DisassociateVehicleFleetError)
    pub fn disassociate_vehicle_fleet(
        &self,
    ) -> crate::client::fluent_builders::DisassociateVehicleFleet {
        crate::client::fluent_builders::DisassociateVehicleFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCampaign`](crate::client::fluent_builders::GetCampaign) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetCampaign::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetCampaign::set_name): <p> The name of the campaign to retrieve information about. </p>
    /// - On success, responds with [`GetCampaignOutput`](crate::output::GetCampaignOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetCampaignOutput::name): <p>The name of the campaign.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetCampaignOutput::arn): <p> The Amazon Resource Name (ARN) of the campaign. </p>
    ///   - [`description(Option<String>)`](crate::output::GetCampaignOutput::description): <p>The description of the campaign.</p>
    ///   - [`signal_catalog_arn(Option<String>)`](crate::output::GetCampaignOutput::signal_catalog_arn): <p> The ARN of a signal catalog. </p>
    ///   - [`target_arn(Option<String>)`](crate::output::GetCampaignOutput::target_arn): <p> The ARN of the vehicle or the fleet targeted by the campaign. </p>
    ///   - [`status(Option<CampaignStatus>)`](crate::output::GetCampaignOutput::status): <p>The state of the campaign. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, and <code>SUSPENDED</code>. </p>
    ///   - [`start_time(Option<DateTime>)`](crate::output::GetCampaignOutput::start_time): <p> The time, in milliseconds, to deliver a campaign after it was approved.</p>
    ///   - [`expiry_time(Option<DateTime>)`](crate::output::GetCampaignOutput::expiry_time): <p> The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires.</p>
    ///   - [`post_trigger_collection_duration(Option<i64>)`](crate::output::GetCampaignOutput::post_trigger_collection_duration): <p> How long (in seconds) to collect raw data after a triggering event initiates the collection. </p>
    ///   - [`diagnostics_mode(Option<DiagnosticsMode>)`](crate::output::GetCampaignOutput::diagnostics_mode): <p> Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. </p>
    ///   - [`spooling_mode(Option<SpoolingMode>)`](crate::output::GetCampaignOutput::spooling_mode): <p> Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. </p>
    ///   - [`compression(Option<Compression>)`](crate::output::GetCampaignOutput::compression): <p> Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If <code>OFF</code> is specified, the signals aren't compressed. If it's not specified, <code>SNAPPY</code> is used. </p>
    ///   - [`priority(Option<i32>)`](crate::output::GetCampaignOutput::priority): <p> A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns.</p>
    ///   - [`signals_to_collect(Option<Vec<SignalInformation>>)`](crate::output::GetCampaignOutput::signals_to_collect): <p> Information about a list of signals to collect data on. </p>
    ///   - [`collection_scheme(Option<CollectionScheme>)`](crate::output::GetCampaignOutput::collection_scheme): <p> Information about the data collection scheme associated with the campaign. </p>
    ///   - [`data_extra_dimensions(Option<Vec<String>>)`](crate::output::GetCampaignOutput::data_extra_dimensions): <p> A list of vehicle attributes associated with the campaign. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetCampaignOutput::creation_time): <p> The time the campaign was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetCampaignOutput::last_modification_time): <p>The last time the campaign was modified.</p>
    /// - On failure, responds with [`SdkError<GetCampaignError>`](crate::error::GetCampaignError)
    pub fn get_campaign(&self) -> crate::client::fluent_builders::GetCampaign {
        crate::client::fluent_builders::GetCampaign::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDecoderManifest`](crate::client::fluent_builders::GetDecoderManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetDecoderManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetDecoderManifest::set_name): <p> The name of the decoder manifest to retrieve information about. </p>
    /// - On success, responds with [`GetDecoderManifestOutput`](crate::output::GetDecoderManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetDecoderManifestOutput::name): <p> The name of the decoder manifest. </p>
    ///   - [`arn(Option<String>)`](crate::output::GetDecoderManifestOutput::arn): <p> The Amazon Resource Name (ARN) of the decoder manifest. </p>
    ///   - [`description(Option<String>)`](crate::output::GetDecoderManifestOutput::description): <p> A brief description of the decoder manifest.</p>
    ///   - [`model_manifest_arn(Option<String>)`](crate::output::GetDecoderManifestOutput::model_manifest_arn): <p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>
    ///   - [`status(Option<ManifestStatus>)`](crate::output::GetDecoderManifestOutput::status): <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetDecoderManifestOutput::creation_time): <p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetDecoderManifestOutput::last_modification_time): <p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    /// - On failure, responds with [`SdkError<GetDecoderManifestError>`](crate::error::GetDecoderManifestError)
    pub fn get_decoder_manifest(&self) -> crate::client::fluent_builders::GetDecoderManifest {
        crate::client::fluent_builders::GetDecoderManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetFleet`](crate::client::fluent_builders::GetFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::GetFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::GetFleet::set_fleet_id): <p> The ID of the fleet to retrieve information about. </p>
    /// - On success, responds with [`GetFleetOutput`](crate::output::GetFleetOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetFleetOutput::id): <p> The ID of the fleet.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetFleetOutput::arn): <p> The Amazon Resource Name (ARN) of the fleet. </p>
    ///   - [`description(Option<String>)`](crate::output::GetFleetOutput::description): <p> A brief description of the fleet. </p>
    ///   - [`signal_catalog_arn(Option<String>)`](crate::output::GetFleetOutput::signal_catalog_arn): <p> The ARN of a signal catalog associated with the fleet. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetFleetOutput::creation_time): <p> The time the fleet was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetFleetOutput::last_modification_time): <p> The time the fleet was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    /// - On failure, responds with [`SdkError<GetFleetError>`](crate::error::GetFleetError)
    pub fn get_fleet(&self) -> crate::client::fluent_builders::GetFleet {
        crate::client::fluent_builders::GetFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLoggingOptions`](crate::client::fluent_builders::GetLoggingOptions) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetLoggingOptions::send) it.

    /// - On success, responds with [`GetLoggingOptionsOutput`](crate::output::GetLoggingOptionsOutput) with field(s):
    ///   - [`cloud_watch_log_delivery(Option<CloudWatchLogDeliveryOptions>)`](crate::output::GetLoggingOptionsOutput::cloud_watch_log_delivery): <p>Returns information about log delivery to Amazon CloudWatch Logs.</p>
    /// - On failure, responds with [`SdkError<GetLoggingOptionsError>`](crate::error::GetLoggingOptionsError)
    pub fn get_logging_options(&self) -> crate::client::fluent_builders::GetLoggingOptions {
        crate::client::fluent_builders::GetLoggingOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetModelManifest`](crate::client::fluent_builders::GetModelManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetModelManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetModelManifest::set_name): <p> The name of the vehicle model to retrieve information about. </p>
    /// - On success, responds with [`GetModelManifestOutput`](crate::output::GetModelManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetModelManifestOutput::name): <p> The name of the vehicle model. </p>
    ///   - [`arn(Option<String>)`](crate::output::GetModelManifestOutput::arn): <p> The Amazon Resource Name (ARN) of the vehicle model. </p>
    ///   - [`description(Option<String>)`](crate::output::GetModelManifestOutput::description): <p> A brief description of the vehicle model. </p>
    ///   - [`signal_catalog_arn(Option<String>)`](crate::output::GetModelManifestOutput::signal_catalog_arn): <p> The ARN of the signal catalog associated with the vehicle model. </p>
    ///   - [`status(Option<ManifestStatus>)`](crate::output::GetModelManifestOutput::status): <p> The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. You can edit the vehicle model if the status is marked <code>DRAFT</code>.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetModelManifestOutput::creation_time): <p>The time the vehicle model was created, in seconds since epoch (January 1, 1970 at midnight UTC time).</p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetModelManifestOutput::last_modification_time): <p>The last time the vehicle model was modified.</p>
    /// - On failure, responds with [`SdkError<GetModelManifestError>`](crate::error::GetModelManifestError)
    pub fn get_model_manifest(&self) -> crate::client::fluent_builders::GetModelManifest {
        crate::client::fluent_builders::GetModelManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRegisterAccountStatus`](crate::client::fluent_builders::GetRegisterAccountStatus) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetRegisterAccountStatus::send) it.

    /// - On success, responds with [`GetRegisterAccountStatusOutput`](crate::output::GetRegisterAccountStatusOutput) with field(s):
    ///   - [`customer_account_id(Option<String>)`](crate::output::GetRegisterAccountStatusOutput::customer_account_id): <p> The unique ID of the Amazon Web Services account, provided at account creation. </p>
    ///   - [`account_status(Option<RegistrationStatus>)`](crate::output::GetRegisterAccountStatusOutput::account_status): <p> The status of registering your account and resources. The status can be one of:</p>  <ul>   <li> <p> <code>REGISTRATION_SUCCESS</code> - The Amazon Web Services resource is successfully registered.</p> </li>   <li> <p> <code>REGISTRATION_PENDING</code> - Amazon Web Services IoT FleetWise is processing the registration request. This process takes approximately five minutes to complete.</p> </li>   <li> <p> <code>REGISTRATION_FAILURE</code> - Amazon Web Services IoT FleetWise can't register the AWS resource. Try again later.</p> </li>  </ul>
    ///   - [`timestream_registration_response(Option<TimestreamRegistrationResponse>)`](crate::output::GetRegisterAccountStatusOutput::timestream_registration_response): <p> Information about the registered Amazon Timestream resources or errors, if any.</p>
    ///   - [`iam_registration_response(Option<IamRegistrationResponse>)`](crate::output::GetRegisterAccountStatusOutput::iam_registration_response): <p> Information about the registered IAM resources or errors, if any. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetRegisterAccountStatusOutput::creation_time): <p> The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetRegisterAccountStatusOutput::last_modification_time): <p> The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    /// - On failure, responds with [`SdkError<GetRegisterAccountStatusError>`](crate::error::GetRegisterAccountStatusError)
    pub fn get_register_account_status(
        &self,
    ) -> crate::client::fluent_builders::GetRegisterAccountStatus {
        crate::client::fluent_builders::GetRegisterAccountStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSignalCatalog`](crate::client::fluent_builders::GetSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetSignalCatalog::set_name): <p> The name of the signal catalog to retrieve information about. </p>
    /// - On success, responds with [`GetSignalCatalogOutput`](crate::output::GetSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetSignalCatalogOutput::name): <p> The name of the signal catalog. </p>
    ///   - [`arn(Option<String>)`](crate::output::GetSignalCatalogOutput::arn): <p> The Amazon Resource Name (ARN) of the signal catalog. </p>
    ///   - [`description(Option<String>)`](crate::output::GetSignalCatalogOutput::description): <p> A brief description of the signal catalog. </p>
    ///   - [`node_counts(Option<NodeCounts>)`](crate::output::GetSignalCatalogOutput::node_counts): <p> The total number of network nodes specified in a signal catalog. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetSignalCatalogOutput::creation_time): <p> The time the signal catalog was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetSignalCatalogOutput::last_modification_time): <p>The last time the signal catalog was modified.</p>
    /// - On failure, responds with [`SdkError<GetSignalCatalogError>`](crate::error::GetSignalCatalogError)
    pub fn get_signal_catalog(&self) -> crate::client::fluent_builders::GetSignalCatalog {
        crate::client::fluent_builders::GetSignalCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVehicle`](crate::client::fluent_builders::GetVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::GetVehicle::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::GetVehicle::set_vehicle_name): <p> The ID of the vehicle to retrieve information about. </p>
    /// - On success, responds with [`GetVehicleOutput`](crate::output::GetVehicleOutput) with field(s):
    ///   - [`vehicle_name(Option<String>)`](crate::output::GetVehicleOutput::vehicle_name): <p>The ID of the vehicle.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetVehicleOutput::arn): <p> The Amazon Resource Name (ARN) of the vehicle to retrieve information about. </p>
    ///   - [`model_manifest_arn(Option<String>)`](crate::output::GetVehicleOutput::model_manifest_arn): <p> The ARN of a vehicle model (model manifest) associated with the vehicle. </p>
    ///   - [`decoder_manifest_arn(Option<String>)`](crate::output::GetVehicleOutput::decoder_manifest_arn): <p> The ARN of a decoder manifest associated with the vehicle. </p>
    ///   - [`attributes(Option<HashMap<String, String>>)`](crate::output::GetVehicleOutput::attributes): <p>Static information about a vehicle in a key-value pair. For example:</p>  <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::GetVehicleOutput::creation_time): <p> The time the vehicle was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::GetVehicleOutput::last_modification_time): <p> The time the vehicle was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    /// - On failure, responds with [`SdkError<GetVehicleError>`](crate::error::GetVehicleError)
    pub fn get_vehicle(&self) -> crate::client::fluent_builders::GetVehicle {
        crate::client::fluent_builders::GetVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVehicleStatus`](crate::client::fluent_builders::GetVehicleStatus) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetVehicleStatus::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetVehicleStatus::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetVehicleStatus::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetVehicleStatus::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetVehicleStatus::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::GetVehicleStatus::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::GetVehicleStatus::set_vehicle_name): <p> The ID of the vehicle to retrieve information about. </p>
    /// - On success, responds with [`GetVehicleStatusOutput`](crate::output::GetVehicleStatusOutput) with field(s):
    ///   - [`campaigns(Option<Vec<VehicleStatus>>)`](crate::output::GetVehicleStatusOutput::campaigns): <p> Lists information about the state of the vehicle with deployed campaigns. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetVehicleStatusOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<GetVehicleStatusError>`](crate::error::GetVehicleStatusError)
    pub fn get_vehicle_status(&self) -> crate::client::fluent_builders::GetVehicleStatus {
        crate::client::fluent_builders::GetVehicleStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportDecoderManifest`](crate::client::fluent_builders::ImportDecoderManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportDecoderManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportDecoderManifest::set_name): <p> The name of the decoder manifest to import. </p>
    ///   - [`network_file_definitions(Vec<NetworkFileDefinition>)`](crate::client::fluent_builders::ImportDecoderManifest::network_file_definitions) / [`set_network_file_definitions(Option<Vec<NetworkFileDefinition>>)`](crate::client::fluent_builders::ImportDecoderManifest::set_network_file_definitions): <p> The file to load into an Amazon Web Services account. </p>
    /// - On success, responds with [`ImportDecoderManifestOutput`](crate::output::ImportDecoderManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::ImportDecoderManifestOutput::name): <p> The name of the imported decoder manifest. </p>
    ///   - [`arn(Option<String>)`](crate::output::ImportDecoderManifestOutput::arn): <p> The Amazon Resource Name (ARN) of the decoder manifest that was imported. </p>
    /// - On failure, responds with [`SdkError<ImportDecoderManifestError>`](crate::error::ImportDecoderManifestError)
    pub fn import_decoder_manifest(&self) -> crate::client::fluent_builders::ImportDecoderManifest {
        crate::client::fluent_builders::ImportDecoderManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportSignalCatalog`](crate::client::fluent_builders::ImportSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportSignalCatalog::set_name): <p>The name of the signal catalog to import.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::ImportSignalCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::ImportSignalCatalog::set_description): <p> A brief description of the signal catalog. </p>
    ///   - [`vss(FormattedVss)`](crate::client::fluent_builders::ImportSignalCatalog::vss) / [`set_vss(Option<FormattedVss>)`](crate::client::fluent_builders::ImportSignalCatalog::set_vss): <p>The contents of the Vehicle Signal Specification (VSS) configuration. VSS is a precise language used to describe and model signals in vehicle networks.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::ImportSignalCatalog::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::ImportSignalCatalog::set_tags): <p>Metadata that can be used to manage the signal catalog.</p>
    /// - On success, responds with [`ImportSignalCatalogOutput`](crate::output::ImportSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::ImportSignalCatalogOutput::name): <p> The name of the imported signal catalog. </p>
    ///   - [`arn(Option<String>)`](crate::output::ImportSignalCatalogOutput::arn): <p> The Amazon Resource Name (ARN) of the imported signal catalog.</p>
    /// - On failure, responds with [`SdkError<ImportSignalCatalogError>`](crate::error::ImportSignalCatalogError)
    pub fn import_signal_catalog(&self) -> crate::client::fluent_builders::ImportSignalCatalog {
        crate::client::fluent_builders::ImportSignalCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCampaigns`](crate::client::fluent_builders::ListCampaigns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCampaigns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCampaigns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCampaigns::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCampaigns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCampaigns::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    ///   - [`status(impl Into<String>)`](crate::client::fluent_builders::ListCampaigns::status) / [`set_status(Option<String>)`](crate::client::fluent_builders::ListCampaigns::set_status): <p>Optional parameter to filter the results by the status of each created campaign in your account. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, or <code>SUSPENDED</code>.</p>
    /// - On success, responds with [`ListCampaignsOutput`](crate::output::ListCampaignsOutput) with field(s):
    ///   - [`campaign_summaries(Option<Vec<CampaignSummary>>)`](crate::output::ListCampaignsOutput::campaign_summaries): <p> A summary of information about each campaign. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCampaignsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListCampaignsError>`](crate::error::ListCampaignsError)
    pub fn list_campaigns(&self) -> crate::client::fluent_builders::ListCampaigns {
        crate::client::fluent_builders::ListCampaigns::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDecoderManifestNetworkInterfaces`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::set_name): <p> The name of the decoder manifest to list information about. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListDecoderManifestNetworkInterfacesOutput`](crate::output::ListDecoderManifestNetworkInterfacesOutput) with field(s):
    ///   - [`network_interfaces(Option<Vec<NetworkInterface>>)`](crate::output::ListDecoderManifestNetworkInterfacesOutput::network_interfaces): <p> A list of information about network interfaces. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDecoderManifestNetworkInterfacesOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListDecoderManifestNetworkInterfacesError>`](crate::error::ListDecoderManifestNetworkInterfacesError)
    pub fn list_decoder_manifest_network_interfaces(
        &self,
    ) -> crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces {
        crate::client::fluent_builders::ListDecoderManifestNetworkInterfaces::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`ListDecoderManifests`](crate::client::fluent_builders::ListDecoderManifests) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDecoderManifests::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifests::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::client::fluent_builders::ListDecoderManifests::set_model_manifest_arn): <p> The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifests::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDecoderManifests::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDecoderManifests::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDecoderManifests::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListDecoderManifestsOutput`](crate::output::ListDecoderManifestsOutput) with field(s):
    ///   - [`summaries(Option<Vec<DecoderManifestSummary>>)`](crate::output::ListDecoderManifestsOutput::summaries): <p> A list of information about each decoder manifest. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDecoderManifestsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListDecoderManifestsError>`](crate::error::ListDecoderManifestsError)
    pub fn list_decoder_manifests(&self) -> crate::client::fluent_builders::ListDecoderManifests {
        crate::client::fluent_builders::ListDecoderManifests::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDecoderManifestSignals`](crate::client::fluent_builders::ListDecoderManifestSignals) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDecoderManifestSignals::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifestSignals::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListDecoderManifestSignals::set_name): <p> The name of the decoder manifest to list information about. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDecoderManifestSignals::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDecoderManifestSignals::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDecoderManifestSignals::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDecoderManifestSignals::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListDecoderManifestSignalsOutput`](crate::output::ListDecoderManifestSignalsOutput) with field(s):
    ///   - [`signal_decoders(Option<Vec<SignalDecoder>>)`](crate::output::ListDecoderManifestSignalsOutput::signal_decoders): <p> Information about a list of signals to decode. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDecoderManifestSignalsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListDecoderManifestSignalsError>`](crate::error::ListDecoderManifestSignalsError)
    pub fn list_decoder_manifest_signals(
        &self,
    ) -> crate::client::fluent_builders::ListDecoderManifestSignals {
        crate::client::fluent_builders::ListDecoderManifestSignals::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFleets`](crate::client::fluent_builders::ListFleets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFleets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFleets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFleets::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFleets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFleets::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListFleetsOutput`](crate::output::ListFleetsOutput) with field(s):
    ///   - [`fleet_summaries(Option<Vec<FleetSummary>>)`](crate::output::ListFleetsOutput::fleet_summaries): <p> A list of information for each fleet. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFleetsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListFleetsError>`](crate::error::ListFleetsError)
    pub fn list_fleets(&self) -> crate::client::fluent_builders::ListFleets {
        crate::client::fluent_builders::ListFleets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFleetsForVehicle`](crate::client::fluent_builders::ListFleetsForVehicle) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFleetsForVehicle::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::ListFleetsForVehicle::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::ListFleetsForVehicle::set_vehicle_name): <p> The ID of the vehicle to retrieve information about. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFleetsForVehicle::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFleetsForVehicle::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFleetsForVehicle::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFleetsForVehicle::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListFleetsForVehicleOutput`](crate::output::ListFleetsForVehicleOutput) with field(s):
    ///   - [`fleets(Option<Vec<String>>)`](crate::output::ListFleetsForVehicleOutput::fleets): <p> A list of fleet IDs that the vehicle is associated with. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFleetsForVehicleOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListFleetsForVehicleError>`](crate::error::ListFleetsForVehicleError)
    pub fn list_fleets_for_vehicle(&self) -> crate::client::fluent_builders::ListFleetsForVehicle {
        crate::client::fluent_builders::ListFleetsForVehicle::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListModelManifestNodes`](crate::client::fluent_builders::ListModelManifestNodes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListModelManifestNodes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListModelManifestNodes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListModelManifestNodes::set_name): <p> The name of the vehicle model to list information about. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListModelManifestNodes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListModelManifestNodes::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListModelManifestNodes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListModelManifestNodes::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListModelManifestNodesOutput`](crate::output::ListModelManifestNodesOutput) with field(s):
    ///   - [`nodes(Option<Vec<Node>>)`](crate::output::ListModelManifestNodesOutput::nodes): <p> A list of information about nodes. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListModelManifestNodesOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListModelManifestNodesError>`](crate::error::ListModelManifestNodesError)
    pub fn list_model_manifest_nodes(
        &self,
    ) -> crate::client::fluent_builders::ListModelManifestNodes {
        crate::client::fluent_builders::ListModelManifestNodes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListModelManifests`](crate::client::fluent_builders::ListModelManifests) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListModelManifests::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::client::fluent_builders::ListModelManifests::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::client::fluent_builders::ListModelManifests::set_signal_catalog_arn): <p> The ARN of a signal catalog. If you specify a signal catalog, only the vehicle models associated with it are returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListModelManifests::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListModelManifests::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListModelManifests::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListModelManifests::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListModelManifestsOutput`](crate::output::ListModelManifestsOutput) with field(s):
    ///   - [`summaries(Option<Vec<ModelManifestSummary>>)`](crate::output::ListModelManifestsOutput::summaries): <p> A list of information about vehicle models.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListModelManifestsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListModelManifestsError>`](crate::error::ListModelManifestsError)
    pub fn list_model_manifests(&self) -> crate::client::fluent_builders::ListModelManifests {
        crate::client::fluent_builders::ListModelManifests::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSignalCatalogNodes`](crate::client::fluent_builders::ListSignalCatalogNodes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSignalCatalogNodes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListSignalCatalogNodes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListSignalCatalogNodes::set_name): <p> The name of the signal catalog to list information about. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSignalCatalogNodes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSignalCatalogNodes::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSignalCatalogNodes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSignalCatalogNodes::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListSignalCatalogNodesOutput`](crate::output::ListSignalCatalogNodesOutput) with field(s):
    ///   - [`nodes(Option<Vec<Node>>)`](crate::output::ListSignalCatalogNodesOutput::nodes): <p> A list of information about nodes. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSignalCatalogNodesOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListSignalCatalogNodesError>`](crate::error::ListSignalCatalogNodesError)
    pub fn list_signal_catalog_nodes(
        &self,
    ) -> crate::client::fluent_builders::ListSignalCatalogNodes {
        crate::client::fluent_builders::ListSignalCatalogNodes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSignalCatalogs`](crate::client::fluent_builders::ListSignalCatalogs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSignalCatalogs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSignalCatalogs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSignalCatalogs::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSignalCatalogs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSignalCatalogs::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListSignalCatalogsOutput`](crate::output::ListSignalCatalogsOutput) with field(s):
    ///   - [`summaries(Option<Vec<SignalCatalogSummary>>)`](crate::output::ListSignalCatalogsOutput::summaries): <p> A list of information about each signal catalog. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSignalCatalogsOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListSignalCatalogsError>`](crate::error::ListSignalCatalogsError)
    pub fn list_signal_catalogs(&self) -> crate::client::fluent_builders::ListSignalCatalogs {
        crate::client::fluent_builders::ListSignalCatalogs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The list of tags assigned to the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVehicles`](crate::client::fluent_builders::ListVehicles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVehicles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::ListVehicles::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::client::fluent_builders::ListVehicles::set_model_manifest_arn): <p> The Amazon Resource Name (ARN) of a vehicle model (model manifest). You can use this optional parameter to list only the vehicles created from a certain vehicle model. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVehicles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVehicles::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVehicles::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVehicles::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListVehiclesOutput`](crate::output::ListVehiclesOutput) with field(s):
    ///   - [`vehicle_summaries(Option<Vec<VehicleSummary>>)`](crate::output::ListVehiclesOutput::vehicle_summaries): <p> A list of vehicles and information about them. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVehiclesOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListVehiclesError>`](crate::error::ListVehiclesError)
    pub fn list_vehicles(&self) -> crate::client::fluent_builders::ListVehicles {
        crate::client::fluent_builders::ListVehicles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVehiclesInFleet`](crate::client::fluent_builders::ListVehiclesInFleet) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVehiclesInFleet::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::ListVehiclesInFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::ListVehiclesInFleet::set_fleet_id): <p> The ID of a fleet. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVehiclesInFleet::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVehiclesInFleet::set_next_token): <p>A pagination token for the next set of results.</p>  <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVehiclesInFleet::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVehiclesInFleet::set_max_results): <p> The maximum number of items to return, between 1 and 100, inclusive. </p>
    /// - On success, responds with [`ListVehiclesInFleetOutput`](crate::output::ListVehiclesInFleetOutput) with field(s):
    ///   - [`vehicles(Option<Vec<String>>)`](crate::output::ListVehiclesInFleetOutput::vehicles): <p> A list of vehicles associated with the fleet. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVehiclesInFleetOutput::next_token): <p> The token to retrieve the next set of results, or <code>null</code> if there are no more results. </p>
    /// - On failure, responds with [`SdkError<ListVehiclesInFleetError>`](crate::error::ListVehiclesInFleetError)
    pub fn list_vehicles_in_fleet(&self) -> crate::client::fluent_builders::ListVehiclesInFleet {
        crate::client::fluent_builders::ListVehiclesInFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutLoggingOptions`](crate::client::fluent_builders::PutLoggingOptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cloud_watch_log_delivery(CloudWatchLogDeliveryOptions)`](crate::client::fluent_builders::PutLoggingOptions::cloud_watch_log_delivery) / [`set_cloud_watch_log_delivery(Option<CloudWatchLogDeliveryOptions>)`](crate::client::fluent_builders::PutLoggingOptions::set_cloud_watch_log_delivery): <p>Creates or updates the log delivery option to Amazon CloudWatch Logs.</p>
    /// - On success, responds with [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput)

    /// - On failure, responds with [`SdkError<PutLoggingOptionsError>`](crate::error::PutLoggingOptionsError)
    pub fn put_logging_options(&self) -> crate::client::fluent_builders::PutLoggingOptions {
        crate::client::fluent_builders::PutLoggingOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterAccount`](crate::client::fluent_builders::RegisterAccount) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`timestream_resources(TimestreamResources)`](crate::client::fluent_builders::RegisterAccount::timestream_resources) / [`set_timestream_resources(Option<TimestreamResources>)`](crate::client::fluent_builders::RegisterAccount::set_timestream_resources): <p>The registered Amazon Timestream resources that Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to.</p>
    ///   - [`iam_resources(IamResources)`](crate::client::fluent_builders::RegisterAccount::iam_resources) / [`set_iam_resources(Option<IamResources>)`](crate::client::fluent_builders::RegisterAccount::set_iam_resources): <p>The IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream.</p>
    /// - On success, responds with [`RegisterAccountOutput`](crate::output::RegisterAccountOutput) with field(s):
    ///   - [`register_account_status(Option<RegistrationStatus>)`](crate::output::RegisterAccountOutput::register_account_status): <p> The status of registering your Amazon Web Services account, IAM role, and Timestream resources. </p>
    ///   - [`timestream_resources(Option<TimestreamResources>)`](crate::output::RegisterAccountOutput::timestream_resources): <p>The registered Amazon Timestream resources that Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to.</p>
    ///   - [`iam_resources(Option<IamResources>)`](crate::output::RegisterAccountOutput::iam_resources): <p> The registered IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::RegisterAccountOutput::creation_time): <p> The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::output::RegisterAccountOutput::last_modification_time): <p> The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    /// - On failure, responds with [`SdkError<RegisterAccountError>`](crate::error::RegisterAccountError)
    pub fn register_account(&self) -> crate::client::fluent_builders::RegisterAccount {
        crate::client::fluent_builders::RegisterAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The new or modified tags for the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of the keys of the tags to be removed from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCampaign`](crate::client::fluent_builders::UpdateCampaign) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateCampaign::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateCampaign::set_name): <p> The name of the campaign to update. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateCampaign::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateCampaign::set_description): <p>The description of the campaign.</p>
    ///   - [`data_extra_dimensions(Vec<String>)`](crate::client::fluent_builders::UpdateCampaign::data_extra_dimensions) / [`set_data_extra_dimensions(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateCampaign::set_data_extra_dimensions): <p> A list of vehicle attributes to associate with a signal. </p>  <p>Default: An empty array</p>
    ///   - [`action(UpdateCampaignAction)`](crate::client::fluent_builders::UpdateCampaign::action) / [`set_action(Option<UpdateCampaignAction>)`](crate::client::fluent_builders::UpdateCampaign::set_action): <p> Specifies how to update a campaign. The action can be one of the following:</p>  <ul>   <li> <p> <code>APPROVE</code> - To approve delivering a data collection scheme to vehicles. </p> </li>   <li> <p> <code>SUSPEND</code> - To suspend collecting signal data. </p> </li>   <li> <p> <code>RESUME</code> - To resume collecting signal data. </p> </li>   <li> <p> <code>UPDATE</code> - To update a campaign. </p> </li>  </ul>
    /// - On success, responds with [`UpdateCampaignOutput`](crate::output::UpdateCampaignOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::UpdateCampaignOutput::arn): <p> The Amazon Resource Name (ARN) of the campaign. </p>
    ///   - [`name(Option<String>)`](crate::output::UpdateCampaignOutput::name): <p>The name of the updated campaign.</p>
    ///   - [`status(Option<CampaignStatus>)`](crate::output::UpdateCampaignOutput::status): <p>The state of a campaign. The status can be one of:</p>  <ul>   <li> <p> <code>CREATING</code> - Amazon Web Services IoT FleetWise is processing your request to create the campaign. </p> </li>   <li> <p> <code>WAITING_FOR_APPROVAL</code> - After a campaign is created, it enters the <code>WAITING_FOR_APPROVAL</code> state. To allow Amazon Web Services IoT FleetWise to deploy the campaign to the target vehicle or fleet, use the API operation to approve the campaign. </p> </li>   <li> <p> <code>RUNNING</code> - The campaign is active. </p> </li>   <li> <p> <code>SUSPENDED</code> - The campaign is suspended. To resume the campaign, use the API operation. </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<UpdateCampaignError>`](crate::error::UpdateCampaignError)
    pub fn update_campaign(&self) -> crate::client::fluent_builders::UpdateCampaign {
        crate::client::fluent_builders::UpdateCampaign::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDecoderManifest`](crate::client::fluent_builders::UpdateDecoderManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_name): <p> The name of the decoder manifest to update.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_description): <p> A brief description of the decoder manifest to update. </p>
    ///   - [`signal_decoders_to_add(Vec<SignalDecoder>)`](crate::client::fluent_builders::UpdateDecoderManifest::signal_decoders_to_add) / [`set_signal_decoders_to_add(Option<Vec<SignalDecoder>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_signal_decoders_to_add): <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    ///   - [`signal_decoders_to_update(Vec<SignalDecoder>)`](crate::client::fluent_builders::UpdateDecoderManifest::signal_decoders_to_update) / [`set_signal_decoders_to_update(Option<Vec<SignalDecoder>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_signal_decoders_to_update): <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    ///   - [`signal_decoders_to_remove(Vec<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::signal_decoders_to_remove) / [`set_signal_decoders_to_remove(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_signal_decoders_to_remove): <p> A list of signal decoders to remove from the decoder manifest. </p>
    ///   - [`network_interfaces_to_add(Vec<NetworkInterface>)`](crate::client::fluent_builders::UpdateDecoderManifest::network_interfaces_to_add) / [`set_network_interfaces_to_add(Option<Vec<NetworkInterface>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_network_interfaces_to_add): <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    ///   - [`network_interfaces_to_update(Vec<NetworkInterface>)`](crate::client::fluent_builders::UpdateDecoderManifest::network_interfaces_to_update) / [`set_network_interfaces_to_update(Option<Vec<NetworkInterface>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_network_interfaces_to_update): <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    ///   - [`network_interfaces_to_remove(Vec<String>)`](crate::client::fluent_builders::UpdateDecoderManifest::network_interfaces_to_remove) / [`set_network_interfaces_to_remove(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_network_interfaces_to_remove): <p> A list of network interfaces to remove from the decoder manifest.</p>
    ///   - [`status(ManifestStatus)`](crate::client::fluent_builders::UpdateDecoderManifest::status) / [`set_status(Option<ManifestStatus>)`](crate::client::fluent_builders::UpdateDecoderManifest::set_status): <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    /// - On success, responds with [`UpdateDecoderManifestOutput`](crate::output::UpdateDecoderManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::UpdateDecoderManifestOutput::name): <p> The name of the updated decoder manifest. </p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateDecoderManifestOutput::arn): <p> The Amazon Resource Name (ARN) of the updated decoder manifest. </p>
    /// - On failure, responds with [`SdkError<UpdateDecoderManifestError>`](crate::error::UpdateDecoderManifestError)
    pub fn update_decoder_manifest(&self) -> crate::client::fluent_builders::UpdateDecoderManifest {
        crate::client::fluent_builders::UpdateDecoderManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFleet`](crate::client::fluent_builders::UpdateFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::UpdateFleet::set_fleet_id): <p> The ID of the fleet to update. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFleet::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFleet::set_description): <p> An updated description of the fleet. </p>
    /// - On success, responds with [`UpdateFleetOutput`](crate::output::UpdateFleetOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateFleetOutput::id): <p>The ID of the updated fleet.</p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateFleetOutput::arn): <p>The Amazon Resource Name (ARN) of the updated fleet.</p>
    /// - On failure, responds with [`SdkError<UpdateFleetError>`](crate::error::UpdateFleetError)
    pub fn update_fleet(&self) -> crate::client::fluent_builders::UpdateFleet {
        crate::client::fluent_builders::UpdateFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateModelManifest`](crate::client::fluent_builders::UpdateModelManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateModelManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateModelManifest::set_name): <p> The name of the vehicle model to update. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateModelManifest::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateModelManifest::set_description): <p> A brief description of the vehicle model. </p>
    ///   - [`nodes_to_add(Vec<String>)`](crate::client::fluent_builders::UpdateModelManifest::nodes_to_add) / [`set_nodes_to_add(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateModelManifest::set_nodes_to_add): <p> A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to add to the vehicle model. </p>
    ///   - [`nodes_to_remove(Vec<String>)`](crate::client::fluent_builders::UpdateModelManifest::nodes_to_remove) / [`set_nodes_to_remove(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateModelManifest::set_nodes_to_remove): <p> A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to remove from the vehicle model. </p>
    ///   - [`status(ManifestStatus)`](crate::client::fluent_builders::UpdateModelManifest::status) / [`set_status(Option<ManifestStatus>)`](crate::client::fluent_builders::UpdateModelManifest::set_status): <p> The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model. </p>
    /// - On success, responds with [`UpdateModelManifestOutput`](crate::output::UpdateModelManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::UpdateModelManifestOutput::name): <p> The name of the updated vehicle model. </p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateModelManifestOutput::arn): <p> The Amazon Resource Name (ARN) of the updated vehicle model. </p>
    /// - On failure, responds with [`SdkError<UpdateModelManifestError>`](crate::error::UpdateModelManifestError)
    pub fn update_model_manifest(&self) -> crate::client::fluent_builders::UpdateModelManifest {
        crate::client::fluent_builders::UpdateModelManifest::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSignalCatalog`](crate::client::fluent_builders::UpdateSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateSignalCatalog::set_name): <p> The name of the signal catalog to update. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateSignalCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateSignalCatalog::set_description): <p> A brief description of the signal catalog to update.</p>
    ///   - [`nodes_to_add(Vec<Node>)`](crate::client::fluent_builders::UpdateSignalCatalog::nodes_to_add) / [`set_nodes_to_add(Option<Vec<Node>>)`](crate::client::fluent_builders::UpdateSignalCatalog::set_nodes_to_add): <p> A list of information about nodes to add to the signal catalog. </p>
    ///   - [`nodes_to_update(Vec<Node>)`](crate::client::fluent_builders::UpdateSignalCatalog::nodes_to_update) / [`set_nodes_to_update(Option<Vec<Node>>)`](crate::client::fluent_builders::UpdateSignalCatalog::set_nodes_to_update): <p> A list of information about nodes to update in the signal catalog. </p>
    ///   - [`nodes_to_remove(Vec<String>)`](crate::client::fluent_builders::UpdateSignalCatalog::nodes_to_remove) / [`set_nodes_to_remove(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateSignalCatalog::set_nodes_to_remove): <p> A list of <code>fullyQualifiedName</code> of nodes to remove from the signal catalog. </p>
    /// - On success, responds with [`UpdateSignalCatalogOutput`](crate::output::UpdateSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::UpdateSignalCatalogOutput::name): <p> The name of the updated signal catalog. </p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateSignalCatalogOutput::arn): <p> The ARN of the updated signal catalog. </p>
    /// - On failure, responds with [`SdkError<UpdateSignalCatalogError>`](crate::error::UpdateSignalCatalogError)
    pub fn update_signal_catalog(&self) -> crate::client::fluent_builders::UpdateSignalCatalog {
        crate::client::fluent_builders::UpdateSignalCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVehicle`](crate::client::fluent_builders::UpdateVehicle) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vehicle_name(impl Into<String>)`](crate::client::fluent_builders::UpdateVehicle::vehicle_name) / [`set_vehicle_name(Option<String>)`](crate::client::fluent_builders::UpdateVehicle::set_vehicle_name): <p>The unique ID of the vehicle to update.</p>
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateVehicle::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::client::fluent_builders::UpdateVehicle::set_model_manifest_arn): <p>The ARN of a vehicle model (model manifest) associated with the vehicle.</p>
    ///   - [`decoder_manifest_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateVehicle::decoder_manifest_arn) / [`set_decoder_manifest_arn(Option<String>)`](crate::client::fluent_builders::UpdateVehicle::set_decoder_manifest_arn): <p>The ARN of the decoder manifest associated with this vehicle.</p>
    ///   - [`attributes(HashMap<String, String>)`](crate::client::fluent_builders::UpdateVehicle::attributes) / [`set_attributes(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateVehicle::set_attributes): <p>Static information about a vehicle in a key-value pair. For example:</p>  <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    ///   - [`attribute_update_mode(UpdateMode)`](crate::client::fluent_builders::UpdateVehicle::attribute_update_mode) / [`set_attribute_update_mode(Option<UpdateMode>)`](crate::client::fluent_builders::UpdateVehicle::set_attribute_update_mode): <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>  <p>This is required if attributes are present in the input.</p>
    /// - On success, responds with [`UpdateVehicleOutput`](crate::output::UpdateVehicleOutput) with field(s):
    ///   - [`vehicle_name(Option<String>)`](crate::output::UpdateVehicleOutput::vehicle_name): <p>The ID of the updated vehicle.</p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateVehicleOutput::arn): <p>The ARN of the updated vehicle.</p>
    /// - On failure, responds with [`SdkError<UpdateVehicleError>`](crate::error::UpdateVehicleError)
    pub fn update_vehicle(&self) -> crate::client::fluent_builders::UpdateVehicle {
        crate::client::fluent_builders::UpdateVehicle::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
