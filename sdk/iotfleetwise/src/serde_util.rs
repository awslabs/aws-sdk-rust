// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::LimitExceededExceptionBuilder,
) -> crate::types::error::builders::LimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_decoder_manifest_output_correct_errors(
    mut builder: crate::operation::create_decoder_manifest::builders::CreateDecoderManifestOutputBuilder,
) -> crate::operation::create_decoder_manifest::builders::CreateDecoderManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_fleet_output_correct_errors(
    mut builder: crate::operation::create_fleet::builders::CreateFleetOutputBuilder,
) -> crate::operation::create_fleet::builders::CreateFleetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_manifest_output_correct_errors(
    mut builder: crate::operation::create_model_manifest::builders::CreateModelManifestOutputBuilder,
) -> crate::operation::create_model_manifest::builders::CreateModelManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_signal_catalog_output_correct_errors(
    mut builder: crate::operation::create_signal_catalog::builders::CreateSignalCatalogOutputBuilder,
) -> crate::operation::create_signal_catalog::builders::CreateSignalCatalogOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_decoder_manifest_output_correct_errors(
    mut builder: crate::operation::delete_decoder_manifest::builders::DeleteDecoderManifestOutputBuilder,
) -> crate::operation::delete_decoder_manifest::builders::DeleteDecoderManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_model_manifest_output_correct_errors(
    mut builder: crate::operation::delete_model_manifest::builders::DeleteModelManifestOutputBuilder,
) -> crate::operation::delete_model_manifest::builders::DeleteModelManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_signal_catalog_output_correct_errors(
    mut builder: crate::operation::delete_signal_catalog::builders::DeleteSignalCatalogOutputBuilder,
) -> crate::operation::delete_signal_catalog::builders::DeleteSignalCatalogOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_vehicle_output_correct_errors(
    mut builder: crate::operation::delete_vehicle::builders::DeleteVehicleOutputBuilder,
) -> crate::operation::delete_vehicle::builders::DeleteVehicleOutputBuilder {
    if builder.vehicle_name.is_none() {
        builder.vehicle_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_decoder_manifest_output_correct_errors(
    mut builder: crate::operation::get_decoder_manifest::builders::GetDecoderManifestOutputBuilder,
) -> crate::operation::get_decoder_manifest::builders::GetDecoderManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_encryption_configuration_output_correct_errors(
    mut builder: crate::operation::get_encryption_configuration::builders::GetEncryptionConfigurationOutputBuilder,
) -> crate::operation::get_encryption_configuration::builders::GetEncryptionConfigurationOutputBuilder {
    if builder.encryption_status.is_none() {
        builder.encryption_status = "no value was set".parse::<crate::types::EncryptionStatus>().ok()
    }
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    builder
}

pub(crate) fn get_fleet_output_correct_errors(
    mut builder: crate::operation::get_fleet::builders::GetFleetOutputBuilder,
) -> crate::operation::get_fleet::builders::GetFleetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.signal_catalog_arn.is_none() {
        builder.signal_catalog_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_logging_options_output_correct_errors(
    mut builder: crate::operation::get_logging_options::builders::GetLoggingOptionsOutputBuilder,
) -> crate::operation::get_logging_options::builders::GetLoggingOptionsOutputBuilder {
    if builder.cloud_watch_log_delivery.is_none() {
        builder.cloud_watch_log_delivery = {
            let builder = crate::types::builders::CloudWatchLogDeliveryOptionsBuilder::default();
            crate::serde_util::cloud_watch_log_delivery_options_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_model_manifest_output_correct_errors(
    mut builder: crate::operation::get_model_manifest::builders::GetModelManifestOutputBuilder,
) -> crate::operation::get_model_manifest::builders::GetModelManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_register_account_status_output_correct_errors(
    mut builder: crate::operation::get_register_account_status::builders::GetRegisterAccountStatusOutputBuilder,
) -> crate::operation::get_register_account_status::builders::GetRegisterAccountStatusOutputBuilder {
    if builder.customer_account_id.is_none() {
        builder.customer_account_id = Some(Default::default())
    }
    if builder.account_status.is_none() {
        builder.account_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.iam_registration_response.is_none() {
        builder.iam_registration_response = {
            let builder = crate::types::builders::IamRegistrationResponseBuilder::default();
            crate::serde_util::iam_registration_response_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_signal_catalog_output_correct_errors(
    mut builder: crate::operation::get_signal_catalog::builders::GetSignalCatalogOutputBuilder,
) -> crate::operation::get_signal_catalog::builders::GetSignalCatalogOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_decoder_manifest_output_correct_errors(
    mut builder: crate::operation::import_decoder_manifest::builders::ImportDecoderManifestOutputBuilder,
) -> crate::operation::import_decoder_manifest::builders::ImportDecoderManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn import_signal_catalog_output_correct_errors(
    mut builder: crate::operation::import_signal_catalog::builders::ImportSignalCatalogOutputBuilder,
) -> crate::operation::import_signal_catalog::builders::ImportSignalCatalogOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn put_encryption_configuration_output_correct_errors(
    mut builder: crate::operation::put_encryption_configuration::builders::PutEncryptionConfigurationOutputBuilder,
) -> crate::operation::put_encryption_configuration::builders::PutEncryptionConfigurationOutputBuilder {
    if builder.encryption_status.is_none() {
        builder.encryption_status = "no value was set".parse::<crate::types::EncryptionStatus>().ok()
    }
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    builder
}

pub(crate) fn register_account_output_correct_errors(
    mut builder: crate::operation::register_account::builders::RegisterAccountOutputBuilder,
) -> crate::operation::register_account::builders::RegisterAccountOutputBuilder {
    if builder.register_account_status.is_none() {
        builder.register_account_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.iam_resources.is_none() {
        builder.iam_resources = {
            let builder = crate::types::builders::IamResourcesBuilder::default();
            crate::serde_util::iam_resources_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_decoder_manifest_output_correct_errors(
    mut builder: crate::operation::update_decoder_manifest::builders::UpdateDecoderManifestOutputBuilder,
) -> crate::operation::update_decoder_manifest::builders::UpdateDecoderManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_model_manifest_output_correct_errors(
    mut builder: crate::operation::update_model_manifest::builders::UpdateModelManifestOutputBuilder,
) -> crate::operation::update_model_manifest::builders::UpdateModelManifestOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_signal_catalog_output_correct_errors(
    mut builder: crate::operation::update_signal_catalog::builders::UpdateSignalCatalogOutputBuilder,
) -> crate::operation::update_signal_catalog::builders::UpdateSignalCatalogOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_log_delivery_options_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogDeliveryOptionsBuilder,
) -> crate::types::builders::CloudWatchLogDeliveryOptionsBuilder {
    if builder.log_type.is_none() {
        builder.log_type = "no value was set".parse::<crate::types::LogType>().ok()
    }
    builder
}

pub(crate) fn iam_registration_response_correct_errors(
    mut builder: crate::types::builders::IamRegistrationResponseBuilder,
) -> crate::types::builders::IamRegistrationResponseBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.registration_status.is_none() {
        builder.registration_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    builder
}

pub(crate) fn iam_resources_correct_errors(mut builder: crate::types::builders::IamResourcesBuilder) -> crate::types::builders::IamResourcesBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_registration_response_correct_errors(
    mut builder: crate::types::builders::TimestreamRegistrationResponseBuilder,
) -> crate::types::builders::TimestreamRegistrationResponseBuilder {
    if builder.timestream_database_name.is_none() {
        builder.timestream_database_name = Some(Default::default())
    }
    if builder.timestream_table_name.is_none() {
        builder.timestream_table_name = Some(Default::default())
    }
    if builder.registration_status.is_none() {
        builder.registration_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    builder
}

pub(crate) fn timestream_resources_correct_errors(
    mut builder: crate::types::builders::TimestreamResourcesBuilder,
) -> crate::types::builders::TimestreamResourcesBuilder {
    if builder.timestream_database_name.is_none() {
        builder.timestream_database_name = Some(Default::default())
    }
    if builder.timestream_table_name.is_none() {
        builder.timestream_table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn campaign_summary_correct_errors(
    mut builder: crate::types::builders::CampaignSummaryBuilder,
) -> crate::types::builders::CampaignSummaryBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn condition_based_collection_scheme_correct_errors(
    mut builder: crate::types::builders::ConditionBasedCollectionSchemeBuilder,
) -> crate::types::builders::ConditionBasedCollectionSchemeBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn decoder_manifest_summary_correct_errors(
    mut builder: crate::types::builders::DecoderManifestSummaryBuilder,
) -> crate::types::builders::DecoderManifestSummaryBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn fleet_summary_correct_errors(mut builder: crate::types::builders::FleetSummaryBuilder) -> crate::types::builders::FleetSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.signal_catalog_arn.is_none() {
        builder.signal_catalog_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_manifest_summary_correct_errors(
    mut builder: crate::types::builders::ModelManifestSummaryBuilder,
) -> crate::types::builders::ModelManifestSummaryBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn network_interface_correct_errors(
    mut builder: crate::types::builders::NetworkInterfaceBuilder,
) -> crate::types::builders::NetworkInterfaceBuilder {
    if builder.interface_id.is_none() {
        builder.interface_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::NetworkInterfaceType>().ok()
    }
    builder
}

pub(crate) fn signal_decoder_correct_errors(
    mut builder: crate::types::builders::SignalDecoderBuilder,
) -> crate::types::builders::SignalDecoderBuilder {
    if builder.fully_qualified_name.is_none() {
        builder.fully_qualified_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SignalDecoderType>().ok()
    }
    if builder.interface_id.is_none() {
        builder.interface_id = Some(Default::default())
    }
    builder
}

pub(crate) fn signal_information_correct_errors(
    mut builder: crate::types::builders::SignalInformationBuilder,
) -> crate::types::builders::SignalInformationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn time_based_collection_scheme_correct_errors(
    mut builder: crate::types::builders::TimeBasedCollectionSchemeBuilder,
) -> crate::types::builders::TimeBasedCollectionSchemeBuilder {
    if builder.period_ms.is_none() {
        builder.period_ms = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vehicle_summary_correct_errors(
    mut builder: crate::types::builders::VehicleSummaryBuilder,
) -> crate::types::builders::VehicleSummaryBuilder {
    if builder.vehicle_name.is_none() {
        builder.vehicle_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.model_manifest_arn.is_none() {
        builder.model_manifest_arn = Some(Default::default())
    }
    if builder.decoder_manifest_arn.is_none() {
        builder.decoder_manifest_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_time.is_none() {
        builder.last_modification_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn actuator_correct_errors(mut builder: crate::types::builders::ActuatorBuilder) -> crate::types::builders::ActuatorBuilder {
    if builder.fully_qualified_name.is_none() {
        builder.fully_qualified_name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::NodeDataType>().ok()
    }
    builder
}

pub(crate) fn attribute_correct_errors(mut builder: crate::types::builders::AttributeBuilder) -> crate::types::builders::AttributeBuilder {
    if builder.fully_qualified_name.is_none() {
        builder.fully_qualified_name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::NodeDataType>().ok()
    }
    builder
}

pub(crate) fn branch_correct_errors(mut builder: crate::types::builders::BranchBuilder) -> crate::types::builders::BranchBuilder {
    if builder.fully_qualified_name.is_none() {
        builder.fully_qualified_name = Some(Default::default())
    }
    builder
}

pub(crate) fn can_interface_correct_errors(mut builder: crate::types::builders::CanInterfaceBuilder) -> crate::types::builders::CanInterfaceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn can_signal_correct_errors(mut builder: crate::types::builders::CanSignalBuilder) -> crate::types::builders::CanSignalBuilder {
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    if builder.is_big_endian.is_none() {
        builder.is_big_endian = Some(Default::default())
    }
    if builder.is_signed.is_none() {
        builder.is_signed = Some(Default::default())
    }
    if builder.start_bit.is_none() {
        builder.start_bit = Some(Default::default())
    }
    if builder.offset.is_none() {
        builder.offset = Some(Default::default())
    }
    if builder.factor.is_none() {
        builder.factor = Some(Default::default())
    }
    if builder.length.is_none() {
        builder.length = Some(Default::default())
    }
    builder
}

pub(crate) fn obd_interface_correct_errors(mut builder: crate::types::builders::ObdInterfaceBuilder) -> crate::types::builders::ObdInterfaceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.request_message_id.is_none() {
        builder.request_message_id = Some(Default::default())
    }
    builder
}

pub(crate) fn obd_signal_correct_errors(mut builder: crate::types::builders::ObdSignalBuilder) -> crate::types::builders::ObdSignalBuilder {
    if builder.pid_response_length.is_none() {
        builder.pid_response_length = Some(Default::default())
    }
    if builder.service_mode.is_none() {
        builder.service_mode = Some(Default::default())
    }
    if builder.pid.is_none() {
        builder.pid = Some(Default::default())
    }
    if builder.scaling.is_none() {
        builder.scaling = Some(Default::default())
    }
    if builder.offset.is_none() {
        builder.offset = Some(Default::default())
    }
    if builder.start_byte.is_none() {
        builder.start_byte = Some(Default::default())
    }
    if builder.byte_length.is_none() {
        builder.byte_length = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sensor_correct_errors(mut builder: crate::types::builders::SensorBuilder) -> crate::types::builders::SensorBuilder {
    if builder.fully_qualified_name.is_none() {
        builder.fully_qualified_name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::NodeDataType>().ok()
    }
    builder
}

pub(crate) fn timestream_config_correct_errors(
    mut builder: crate::types::builders::TimestreamConfigBuilder,
) -> crate::types::builders::TimestreamConfigBuilder {
    if builder.timestream_table_arn.is_none() {
        builder.timestream_table_arn = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    builder
}
