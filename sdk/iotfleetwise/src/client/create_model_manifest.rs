// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateModelManifest`](crate::client::fluent_builders::CreateModelManifest) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_name): <p> The name of the vehicle model to create.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_description): <p> A brief description of the vehicle model. </p>
    ///   - [`nodes(Vec<String>)`](crate::client::fluent_builders::CreateModelManifest::nodes) / [`set_nodes(Option<Vec<String>>)`](crate::client::fluent_builders::CreateModelManifest::set_nodes): <p> A list of nodes, which are a general abstraction of signals. </p>
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::client::fluent_builders::CreateModelManifest::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::client::fluent_builders::CreateModelManifest::set_signal_catalog_arn): <p> The Amazon Resource Name (ARN) of a signal catalog. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModelManifest::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModelManifest::set_tags): <p>Metadata that can be used to manage the vehicle model.</p>
    /// - On success, responds with [`CreateModelManifestOutput`](crate::output::CreateModelManifestOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateModelManifestOutput::name): <p> The name of the created vehicle model.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateModelManifestOutput::arn): <p> The ARN of the created vehicle model.</p>
    /// - On failure, responds with [`SdkError<CreateModelManifestError>`](crate::error::CreateModelManifestError)
    pub fn create_model_manifest(&self) -> crate::client::fluent_builders::CreateModelManifest {
        crate::client::fluent_builders::CreateModelManifest::new(self.handle.clone())
    }
}
