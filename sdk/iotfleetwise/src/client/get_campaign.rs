// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCampaign`](crate::operation::get_campaign::builders::GetCampaignFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::get_campaign::builders::GetCampaignFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_campaign::builders::GetCampaignFluentBuilder::set_name):<br>required: **true**<br><p> The name of the campaign to retrieve information about. </p><br>
    /// - On success, responds with [`GetCampaignOutput`](crate::operation::get_campaign::GetCampaignOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::operation::get_campaign::GetCampaignOutput::name): <p>The name of the campaign.</p>
    ///   - [`arn(Option<String>)`](crate::operation::get_campaign::GetCampaignOutput::arn): <p> The Amazon Resource Name (ARN) of the campaign. </p>
    ///   - [`description(Option<String>)`](crate::operation::get_campaign::GetCampaignOutput::description): <p>The description of the campaign.</p>
    ///   - [`signal_catalog_arn(Option<String>)`](crate::operation::get_campaign::GetCampaignOutput::signal_catalog_arn): <p> The ARN of a signal catalog. </p>
    ///   - [`target_arn(Option<String>)`](crate::operation::get_campaign::GetCampaignOutput::target_arn): <p> The ARN of the vehicle or the fleet targeted by the campaign. </p>
    ///   - [`status(Option<CampaignStatus>)`](crate::operation::get_campaign::GetCampaignOutput::status): <p>The state of the campaign. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, and <code>SUSPENDED</code>. </p>
    ///   - [`start_time(Option<DateTime>)`](crate::operation::get_campaign::GetCampaignOutput::start_time): <p> The time, in milliseconds, to deliver a campaign after it was approved.</p>
    ///   - [`expiry_time(Option<DateTime>)`](crate::operation::get_campaign::GetCampaignOutput::expiry_time): <p> The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires.</p>
    ///   - [`post_trigger_collection_duration(Option<i64>)`](crate::operation::get_campaign::GetCampaignOutput::post_trigger_collection_duration): <p> How long (in seconds) to collect raw data after a triggering event initiates the collection. </p>
    ///   - [`diagnostics_mode(Option<DiagnosticsMode>)`](crate::operation::get_campaign::GetCampaignOutput::diagnostics_mode): <p> Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. </p>
    ///   - [`spooling_mode(Option<SpoolingMode>)`](crate::operation::get_campaign::GetCampaignOutput::spooling_mode): <p> Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. </p>
    ///   - [`compression(Option<Compression>)`](crate::operation::get_campaign::GetCampaignOutput::compression): <p> Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If <code>OFF</code> is specified, the signals aren't compressed. If it's not specified, <code>SNAPPY</code> is used. </p>
    ///   - [`priority(Option<i32>)`](crate::operation::get_campaign::GetCampaignOutput::priority): <p> A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns.</p>
    ///   - [`signals_to_collect(Option<Vec::<SignalInformation>>)`](crate::operation::get_campaign::GetCampaignOutput::signals_to_collect): <p> Information about a list of signals to collect data on. </p>
    ///   - [`collection_scheme(Option<CollectionScheme>)`](crate::operation::get_campaign::GetCampaignOutput::collection_scheme): <p> Information about the data collection scheme associated with the campaign. </p>
    ///   - [`data_extra_dimensions(Option<Vec::<String>>)`](crate::operation::get_campaign::GetCampaignOutput::data_extra_dimensions): <p> A list of vehicle attributes associated with the campaign. </p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::get_campaign::GetCampaignOutput::creation_time): <p> The time the campaign was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    ///   - [`last_modification_time(Option<DateTime>)`](crate::operation::get_campaign::GetCampaignOutput::last_modification_time): <p>The last time the campaign was modified.</p>
    ///   - [`data_destination_configs(Option<Vec::<DataDestinationConfig>>)`](crate::operation::get_campaign::GetCampaignOutput::data_destination_configs): <p>The destination where the campaign sends data. You can choose to send data to be stored in Amazon S3 or Amazon Timestream.</p>  <p>Amazon S3 optimizes the cost of data storage and provides additional mechanisms to use vehicle data, such as data lakes, centralized data storage, data processing pipelines, and analytics. </p>  <p>You can use Amazon Timestream to access and analyze time series data, and Timestream to query vehicle data so that you can identify trends and patterns.</p>
    /// - On failure, responds with [`SdkError<GetCampaignError>`](crate::operation::get_campaign::GetCampaignError)
    pub fn get_campaign(&self) -> crate::operation::get_campaign::builders::GetCampaignFluentBuilder {
        crate::operation::get_campaign::builders::GetCampaignFluentBuilder::new(self.handle.clone())
    }
}
