// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSignalCatalog`](crate::client::fluent_builders::CreateSignalCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSignalCatalog::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSignalCatalog::set_name): <p> The name of the signal catalog to create. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSignalCatalog::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSignalCatalog::set_description): <p>A brief description of the signal catalog.</p>
    ///   - [`nodes(Vec<Node>)`](crate::client::fluent_builders::CreateSignalCatalog::nodes) / [`set_nodes(Option<Vec<Node>>)`](crate::client::fluent_builders::CreateSignalCatalog::set_nodes): <p> A list of information about nodes, which are a general abstraction of signals. For more information, see the API data type.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSignalCatalog::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSignalCatalog::set_tags): <p>Metadata that can be used to manage the signal catalog.</p>
    /// - On success, responds with [`CreateSignalCatalogOutput`](crate::output::CreateSignalCatalogOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateSignalCatalogOutput::name): <p> The name of the created signal catalog. </p>
    ///   - [`arn(Option<String>)`](crate::output::CreateSignalCatalogOutput::arn): <p> The ARN of the created signal catalog. </p>
    /// - On failure, responds with [`SdkError<CreateSignalCatalogError>`](crate::error::CreateSignalCatalogError)
    pub fn create_signal_catalog(&self) -> crate::client::fluent_builders::CreateSignalCatalog {
        crate::client::fluent_builders::CreateSignalCatalog::new(self.handle.clone())
    }
}
