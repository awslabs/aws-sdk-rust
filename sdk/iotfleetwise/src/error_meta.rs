// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient permission to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request couldn't be completed because it contains signal decoders with one or more validation errors.</p>
    DecoderManifestValidationException(crate::types::error::DecoderManifestValidationException),
    /// <p>The request couldn't be completed because the server temporarily failed.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified node type doesn't match the expected node type for a node. You can specify the node type as branch, sensor, actuator, or attribute.</p>
    InvalidNodeException(crate::types::error::InvalidNodeException),
    /// <p>The request couldn't be completed because it contains signals that aren't valid.</p>
    InvalidSignalsException(crate::types::error::InvalidSignalsException),
    /// <p>A service quota was exceeded. </p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource wasn't found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request couldn't be completed due to throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DecoderManifestValidationException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidNodeException(inner) => inner.fmt(f),
            Error::InvalidSignalsException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError> for Error {
    fn from(err: crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError) -> Self {
        match err {
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_vehicle_fleet::AssociateVehicleFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_create_vehicle::BatchCreateVehicleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_create_vehicle::BatchCreateVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_create_vehicle::BatchCreateVehicleError> for Error {
    fn from(err: crate::operation::batch_create_vehicle::BatchCreateVehicleError) -> Self {
        match err {
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_create_vehicle::BatchCreateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_update_vehicle::BatchUpdateVehicleError> for Error {
    fn from(err: crate::operation::batch_update_vehicle::BatchUpdateVehicleError) -> Self {
        match err {
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_vehicle::BatchUpdateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_campaign::CreateCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_campaign::CreateCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_campaign::CreateCampaignError> for Error {
    fn from(err: crate::operation::create_campaign::CreateCampaignError) -> Self {
        match err {
            crate::operation::create_campaign::CreateCampaignError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::create_campaign::CreateCampaignError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_campaign::CreateCampaignError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::create_campaign::CreateCampaignError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_campaign::CreateCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_campaign::CreateCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_campaign::CreateCampaignError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_campaign::CreateCampaignError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_decoder_manifest::CreateDecoderManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_decoder_manifest::CreateDecoderManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_decoder_manifest::CreateDecoderManifestError> for Error {
    fn from(err: crate::operation::create_decoder_manifest::CreateDecoderManifestError) -> Self {
        match err {
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::DecoderManifestValidationException(inner) => Error::DecoderManifestValidationException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_decoder_manifest::CreateDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_fleet::CreateFleetError> for Error {
    fn from(err: crate::operation::create_fleet::CreateFleetError) -> Self {
        match err {
            crate::operation::create_fleet::CreateFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_model_manifest::CreateModelManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_model_manifest::CreateModelManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_manifest::CreateModelManifestError> for Error {
    fn from(err: crate::operation::create_model_manifest::CreateModelManifestError) -> Self {
        match err {
            crate::operation::create_model_manifest::CreateModelManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_model_manifest::CreateModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_signal_catalog::CreateSignalCatalogError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_signal_catalog::CreateSignalCatalogError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_signal_catalog::CreateSignalCatalogError> for Error {
    fn from(err: crate::operation::create_signal_catalog::CreateSignalCatalogError) -> Self {
        match err {
            crate::operation::create_signal_catalog::CreateSignalCatalogError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::InvalidNodeException(inner) => Error::InvalidNodeException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_signal_catalog::CreateSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_vehicle::CreateVehicleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_vehicle::CreateVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vehicle::CreateVehicleError> for Error {
    fn from(err: crate::operation::create_vehicle::CreateVehicleError) -> Self {
        match err {
            crate::operation::create_vehicle::CreateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_vehicle::CreateVehicleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_vehicle::CreateVehicleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_vehicle::CreateVehicleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_vehicle::CreateVehicleError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_vehicle::CreateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_vehicle::CreateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_vehicle::CreateVehicleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_campaign::DeleteCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_campaign::DeleteCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_campaign::DeleteCampaignError> for Error {
    fn from(err: crate::operation::delete_campaign::DeleteCampaignError) -> Self {
        match err {
            crate::operation::delete_campaign::DeleteCampaignError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_campaign::DeleteCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_campaign::DeleteCampaignError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_decoder_manifest::DeleteDecoderManifestError> for Error {
    fn from(err: crate::operation::delete_decoder_manifest::DeleteDecoderManifestError) -> Self {
        match err {
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_decoder_manifest::DeleteDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fleet::DeleteFleetError> for Error {
    fn from(err: crate::operation::delete_fleet::DeleteFleetError) -> Self {
        match err {
            crate::operation::delete_fleet::DeleteFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_model_manifest::DeleteModelManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_model_manifest::DeleteModelManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_manifest::DeleteModelManifestError> for Error {
    fn from(err: crate::operation::delete_model_manifest::DeleteModelManifestError) -> Self {
        match err {
            crate::operation::delete_model_manifest::DeleteModelManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_model_manifest::DeleteModelManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_model_manifest::DeleteModelManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_model_manifest::DeleteModelManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_model_manifest::DeleteModelManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_model_manifest::DeleteModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_signal_catalog::DeleteSignalCatalogError> for Error {
    fn from(err: crate::operation::delete_signal_catalog::DeleteSignalCatalogError) -> Self {
        match err {
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_signal_catalog::DeleteSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_vehicle::DeleteVehicleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vehicle::DeleteVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vehicle::DeleteVehicleError> for Error {
    fn from(err: crate::operation::delete_vehicle::DeleteVehicleError) -> Self {
        match err {
            crate::operation::delete_vehicle::DeleteVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_vehicle::DeleteVehicleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_vehicle::DeleteVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_vehicle::DeleteVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_vehicle::DeleteVehicleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError> for Error {
    fn from(
        err: crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError,
    ) -> Self {
        match err {
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_vehicle_fleet::DisassociateVehicleFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_campaign::GetCampaignError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_campaign::GetCampaignError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign::GetCampaignError> for Error {
    fn from(err: crate::operation::get_campaign::GetCampaignError) -> Self {
        match err {
            crate::operation::get_campaign::GetCampaignError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_decoder_manifest::GetDecoderManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_decoder_manifest::GetDecoderManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_decoder_manifest::GetDecoderManifestError> for Error {
    fn from(err: crate::operation::get_decoder_manifest::GetDecoderManifestError) -> Self {
        match err {
            crate::operation::get_decoder_manifest::GetDecoderManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_decoder_manifest::GetDecoderManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_decoder_manifest::GetDecoderManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_decoder_manifest::GetDecoderManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_decoder_manifest::GetDecoderManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_decoder_manifest::GetDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_fleet::GetFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_fleet::GetFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_fleet::GetFleetError> for Error {
    fn from(err: crate::operation::get_fleet::GetFleetError) -> Self {
        match err {
            crate::operation::get_fleet::GetFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_fleet::GetFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_fleet::GetFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_fleet::GetFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_fleet::GetFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_fleet::GetFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_logging_options::GetLoggingOptionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_logging_options::GetLoggingOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_logging_options::GetLoggingOptionsError> for Error {
    fn from(err: crate::operation::get_logging_options::GetLoggingOptionsError) -> Self {
        match err {
            crate::operation::get_logging_options::GetLoggingOptionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_logging_options::GetLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_logging_options::GetLoggingOptionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_logging_options::GetLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_model_manifest::GetModelManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_model_manifest::GetModelManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_model_manifest::GetModelManifestError> for Error {
    fn from(err: crate::operation::get_model_manifest::GetModelManifestError) -> Self {
        match err {
            crate::operation::get_model_manifest::GetModelManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_model_manifest::GetModelManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_model_manifest::GetModelManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_model_manifest::GetModelManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_model_manifest::GetModelManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_model_manifest::GetModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_register_account_status::GetRegisterAccountStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_register_account_status::GetRegisterAccountStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_register_account_status::GetRegisterAccountStatusError> for Error {
    fn from(
        err: crate::operation::get_register_account_status::GetRegisterAccountStatusError,
    ) -> Self {
        match err {
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_register_account_status::GetRegisterAccountStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_signal_catalog::GetSignalCatalogError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_signal_catalog::GetSignalCatalogError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_signal_catalog::GetSignalCatalogError> for Error {
    fn from(err: crate::operation::get_signal_catalog::GetSignalCatalogError) -> Self {
        match err {
            crate::operation::get_signal_catalog::GetSignalCatalogError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_signal_catalog::GetSignalCatalogError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_signal_catalog::GetSignalCatalogError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_signal_catalog::GetSignalCatalogError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_signal_catalog::GetSignalCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_signal_catalog::GetSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_vehicle::GetVehicleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_vehicle::GetVehicleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vehicle::GetVehicleError> for Error {
    fn from(err: crate::operation::get_vehicle::GetVehicleError) -> Self {
        match err {
            crate::operation::get_vehicle::GetVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_vehicle::GetVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_vehicle::GetVehicleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_vehicle::GetVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_vehicle::GetVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_vehicle::GetVehicleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_vehicle_status::GetVehicleStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_vehicle_status::GetVehicleStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vehicle_status::GetVehicleStatusError> for Error {
    fn from(err: crate::operation::get_vehicle_status::GetVehicleStatusError) -> Self {
        match err {
            crate::operation::get_vehicle_status::GetVehicleStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_vehicle_status::GetVehicleStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_vehicle_status::GetVehicleStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_vehicle_status::GetVehicleStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_vehicle_status::GetVehicleStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_vehicle_status::GetVehicleStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::import_decoder_manifest::ImportDecoderManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::import_decoder_manifest::ImportDecoderManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_decoder_manifest::ImportDecoderManifestError> for Error {
    fn from(err: crate::operation::import_decoder_manifest::ImportDecoderManifestError) -> Self {
        match err {
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::DecoderManifestValidationException(inner) => Error::DecoderManifestValidationException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::import_decoder_manifest::ImportDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::import_signal_catalog::ImportSignalCatalogError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::import_signal_catalog::ImportSignalCatalogError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_signal_catalog::ImportSignalCatalogError> for Error {
    fn from(err: crate::operation::import_signal_catalog::ImportSignalCatalogError) -> Self {
        match err {
            crate::operation::import_signal_catalog::ImportSignalCatalogError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_signal_catalog::ImportSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_campaigns::ListCampaignsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_campaigns::ListCampaignsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_campaigns::ListCampaignsError> for Error {
    fn from(err: crate::operation::list_campaigns::ListCampaignsError) -> Self {
        match err {
            crate::operation::list_campaigns::ListCampaignsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_campaigns::ListCampaignsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_campaigns::ListCampaignsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_campaigns::ListCampaignsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_campaigns::ListCampaignsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError> for Error {
    fn from(err: crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError) -> Self {
        match err {
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_decoder_manifest_network_interfaces::ListDecoderManifestNetworkInterfacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_decoder_manifests::ListDecoderManifestsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_decoder_manifests::ListDecoderManifestsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_decoder_manifests::ListDecoderManifestsError> for Error {
    fn from(err: crate::operation::list_decoder_manifests::ListDecoderManifestsError) -> Self {
        match err {
            crate::operation::list_decoder_manifests::ListDecoderManifestsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_decoder_manifests::ListDecoderManifestsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_decoder_manifests::ListDecoderManifestsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_decoder_manifests::ListDecoderManifestsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_decoder_manifests::ListDecoderManifestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError>
    for Error
{
    fn from(
        err: crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError,
    ) -> Self {
        match err {
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_decoder_manifest_signals::ListDecoderManifestSignalsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_fleets::ListFleetsError> for Error {
    fn from(err: crate::operation::list_fleets::ListFleetsError) -> Self {
        match err {
            crate::operation::list_fleets::ListFleetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError> for Error {
    fn from(err: crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError) -> Self {
        match err {
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_fleets_for_vehicle::ListFleetsForVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_manifest_nodes::ListModelManifestNodesError> for Error {
    fn from(err: crate::operation::list_model_manifest_nodes::ListModelManifestNodesError) -> Self {
        match err {
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_model_manifest_nodes::ListModelManifestNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_manifests::ListModelManifestsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_manifests::ListModelManifestsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_manifests::ListModelManifestsError> for Error {
    fn from(err: crate::operation::list_model_manifests::ListModelManifestsError) -> Self {
        match err {
            crate::operation::list_model_manifests::ListModelManifestsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_model_manifests::ListModelManifestsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_model_manifests::ListModelManifestsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_model_manifests::ListModelManifestsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_model_manifests::ListModelManifestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError> for Error {
    fn from(err: crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError) -> Self {
        match err {
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_signal_catalog_nodes::ListSignalCatalogNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_signal_catalogs::ListSignalCatalogsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_signal_catalogs::ListSignalCatalogsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_signal_catalogs::ListSignalCatalogsError> for Error {
    fn from(err: crate::operation::list_signal_catalogs::ListSignalCatalogsError) -> Self {
        match err {
            crate::operation::list_signal_catalogs::ListSignalCatalogsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_signal_catalogs::ListSignalCatalogsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_signal_catalogs::ListSignalCatalogsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_signal_catalogs::ListSignalCatalogsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_signal_catalogs::ListSignalCatalogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_vehicles::ListVehiclesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_vehicles::ListVehiclesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vehicles::ListVehiclesError> for Error {
    fn from(err: crate::operation::list_vehicles::ListVehiclesError) -> Self {
        match err {
            crate::operation::list_vehicles::ListVehiclesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_vehicles::ListVehiclesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_vehicles::ListVehiclesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_vehicles::ListVehiclesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_vehicles::ListVehiclesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError> for Error {
    fn from(err: crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError) -> Self {
        match err {
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_vehicles_in_fleet::ListVehiclesInFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_logging_options::PutLoggingOptionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_logging_options::PutLoggingOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_logging_options::PutLoggingOptionsError> for Error {
    fn from(err: crate::operation::put_logging_options::PutLoggingOptionsError) -> Self {
        match err {
            crate::operation::put_logging_options::PutLoggingOptionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_account::RegisterAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_account::RegisterAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_account::RegisterAccountError> for Error {
    fn from(err: crate::operation::register_account::RegisterAccountError) -> Self {
        match err {
            crate::operation::register_account::RegisterAccountError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::register_account::RegisterAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::register_account::RegisterAccountError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::register_account::RegisterAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::register_account::RegisterAccountError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::register_account::RegisterAccountError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::register_account::RegisterAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_campaign::UpdateCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_campaign::UpdateCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_campaign::UpdateCampaignError> for Error {
    fn from(err: crate::operation::update_campaign::UpdateCampaignError) -> Self {
        match err {
            crate::operation::update_campaign::UpdateCampaignError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_campaign::UpdateCampaignError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_campaign::UpdateCampaignError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_campaign::UpdateCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_campaign::UpdateCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_campaign::UpdateCampaignError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_campaign::UpdateCampaignError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_decoder_manifest::UpdateDecoderManifestError> for Error {
    fn from(err: crate::operation::update_decoder_manifest::UpdateDecoderManifestError) -> Self {
        match err {
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::DecoderManifestValidationException(inner) => Error::DecoderManifestValidationException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_decoder_manifest::UpdateDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_fleet::UpdateFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_fleet::UpdateFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_fleet::UpdateFleetError> for Error {
    fn from(err: crate::operation::update_fleet::UpdateFleetError) -> Self {
        match err {
            crate::operation::update_fleet::UpdateFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_fleet::UpdateFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_model_manifest::UpdateModelManifestError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_model_manifest::UpdateModelManifestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model_manifest::UpdateModelManifestError> for Error {
    fn from(err: crate::operation::update_model_manifest::UpdateModelManifestError) -> Self {
        match err {
            crate::operation::update_model_manifest::UpdateModelManifestError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_model_manifest::UpdateModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_signal_catalog::UpdateSignalCatalogError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_signal_catalog::UpdateSignalCatalogError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_signal_catalog::UpdateSignalCatalogError> for Error {
    fn from(err: crate::operation::update_signal_catalog::UpdateSignalCatalogError) -> Self {
        match err {
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::InvalidNodeException(inner) => Error::InvalidNodeException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::InvalidSignalsException(inner) => Error::InvalidSignalsException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_signal_catalog::UpdateSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_vehicle::UpdateVehicleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_vehicle::UpdateVehicleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_vehicle::UpdateVehicleError> for Error {
    fn from(err: crate::operation::update_vehicle::UpdateVehicleError) -> Self {
        match err {
            crate::operation::update_vehicle::UpdateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_vehicle::UpdateVehicleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_vehicle::UpdateVehicleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_vehicle::UpdateVehicleError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_vehicle::UpdateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_vehicle::UpdateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_vehicle::UpdateVehicleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DecoderManifestValidationException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidNodeException(e) => e.request_id(),
            Self::InvalidSignalsException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
