// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient permission to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request couldn't be completed because it contains signal decoders with one or more validation errors.</p>
    DecoderManifestValidationException(crate::error::DecoderManifestValidationException),
    /// <p>The request couldn't be completed because the server temporarily failed.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The specified node type doesn't match the expected node type for a node. You can specify the node type as branch, sensor, actuator, or attribute.</p>
    InvalidNodeException(crate::error::InvalidNodeException),
    /// <p>The request couldn't be completed because it contains signals that aren't valid.</p>
    InvalidSignalsException(crate::error::InvalidSignalsException),
    /// <p>A service quota was exceeded. </p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource wasn't found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request couldn't be completed due to throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DecoderManifestValidationException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidNodeException(inner) => inner.fmt(f),
            Error::InvalidSignalsException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateVehicleFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateVehicleFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateVehicleFleetError> for Error {
    fn from(err: crate::error::AssociateVehicleFleetError) -> Self {
        match err {
            crate::error::AssociateVehicleFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateVehicleFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateVehicleFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateVehicleFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateVehicleFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateVehicleFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateVehicleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateVehicleError> for Error {
    fn from(err: crate::error::BatchCreateVehicleError) -> Self {
        match err {
            crate::error::BatchCreateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchCreateVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchCreateVehicleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchCreateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchCreateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchCreateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUpdateVehicleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdateVehicleError> for Error {
    fn from(err: crate::error::BatchUpdateVehicleError) -> Self {
        match err {
            crate::error::BatchUpdateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchUpdateVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchUpdateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchUpdateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchUpdateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCampaignError> for Error {
    fn from(err: crate::error::CreateCampaignError) -> Self {
        match err {
            crate::error::CreateCampaignError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCampaignError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateCampaignError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateCampaignError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCampaignError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDecoderManifestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDecoderManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDecoderManifestError> for Error {
    fn from(err: crate::error::CreateDecoderManifestError) -> Self {
        match err {
            crate::error::CreateDecoderManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDecoderManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDecoderManifestError::DecoderManifestValidationException(inner) => {
                Error::DecoderManifestValidationException(inner)
            }
            crate::error::CreateDecoderManifestError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDecoderManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDecoderManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDecoderManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDecoderManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetError> for Error {
    fn from(err: crate::error::CreateFleetError) -> Self {
        match err {
            crate::error::CreateFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateFleetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateModelManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateModelManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateModelManifestError> for Error {
    fn from(err: crate::error::CreateModelManifestError) -> Self {
        match err {
            crate::error::CreateModelManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateModelManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateModelManifestError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::CreateModelManifestError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateModelManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateModelManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateModelManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateModelManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSignalCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSignalCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSignalCatalogError> for Error {
    fn from(err: crate::error::CreateSignalCatalogError) -> Self {
        match err {
            crate::error::CreateSignalCatalogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSignalCatalogError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSignalCatalogError::InvalidNodeException(inner) => {
                Error::InvalidNodeException(inner)
            }
            crate::error::CreateSignalCatalogError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::CreateSignalCatalogError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateSignalCatalogError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSignalCatalogError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSignalCatalogError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateVehicleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVehicleError> for Error {
    fn from(err: crate::error::CreateVehicleError) -> Self {
        match err {
            crate::error::CreateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVehicleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateVehicleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVehicleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCampaignError> for Error {
    fn from(err: crate::error::DeleteCampaignError) -> Self {
        match err {
            crate::error::DeleteCampaignError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCampaignError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCampaignError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDecoderManifestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDecoderManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDecoderManifestError> for Error {
    fn from(err: crate::error::DeleteDecoderManifestError) -> Self {
        match err {
            crate::error::DeleteDecoderManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDecoderManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDecoderManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDecoderManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDecoderManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetError> for Error {
    fn from(err: crate::error::DeleteFleetError) -> Self {
        match err {
            crate::error::DeleteFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteModelManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteModelManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteModelManifestError> for Error {
    fn from(err: crate::error::DeleteModelManifestError) -> Self {
        match err {
            crate::error::DeleteModelManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteModelManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteModelManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteModelManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteModelManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSignalCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSignalCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSignalCatalogError> for Error {
    fn from(err: crate::error::DeleteSignalCatalogError) -> Self {
        match err {
            crate::error::DeleteSignalCatalogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSignalCatalogError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSignalCatalogError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSignalCatalogError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSignalCatalogError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVehicleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVehicleError> for Error {
    fn from(err: crate::error::DeleteVehicleError) -> Self {
        match err {
            crate::error::DeleteVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateVehicleFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateVehicleFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateVehicleFleetError> for Error {
    fn from(err: crate::error::DisassociateVehicleFleetError) -> Self {
        match err {
            crate::error::DisassociateVehicleFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateVehicleFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateVehicleFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateVehicleFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateVehicleFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateVehicleFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignError> for Error {
    fn from(err: crate::error::GetCampaignError) -> Self {
        match err {
            crate::error::GetCampaignError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCampaignError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCampaignError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDecoderManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDecoderManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDecoderManifestError> for Error {
    fn from(err: crate::error::GetDecoderManifestError) -> Self {
        match err {
            crate::error::GetDecoderManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDecoderManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDecoderManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDecoderManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDecoderManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFleetError> for Error {
    fn from(err: crate::error::GetFleetError) -> Self {
        match err {
            crate::error::GetFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoggingOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoggingOptionsError> for Error {
    fn from(err: crate::error::GetLoggingOptionsError) -> Self {
        match err {
            crate::error::GetLoggingOptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoggingOptionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLoggingOptionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetModelManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelManifestError> for Error {
    fn from(err: crate::error::GetModelManifestError) -> Self {
        match err {
            crate::error::GetModelManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetModelManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetModelManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetModelManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetModelManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegisterAccountStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRegisterAccountStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegisterAccountStatusError> for Error {
    fn from(err: crate::error::GetRegisterAccountStatusError) -> Self {
        match err {
            crate::error::GetRegisterAccountStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRegisterAccountStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRegisterAccountStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRegisterAccountStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRegisterAccountStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRegisterAccountStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSignalCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSignalCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSignalCatalogError> for Error {
    fn from(err: crate::error::GetSignalCatalogError) -> Self {
        match err {
            crate::error::GetSignalCatalogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSignalCatalogError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSignalCatalogError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSignalCatalogError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSignalCatalogError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVehicleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVehicleError> for Error {
    fn from(err: crate::error::GetVehicleError) -> Self {
        match err {
            crate::error::GetVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetVehicleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVehicleStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVehicleStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVehicleStatusError> for Error {
    fn from(err: crate::error::GetVehicleStatusError) -> Self {
        match err {
            crate::error::GetVehicleStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetVehicleStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetVehicleStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetVehicleStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetVehicleStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetVehicleStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportDecoderManifestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportDecoderManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportDecoderManifestError> for Error {
    fn from(err: crate::error::ImportDecoderManifestError) -> Self {
        match err {
            crate::error::ImportDecoderManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportDecoderManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportDecoderManifestError::DecoderManifestValidationException(inner) => {
                Error::DecoderManifestValidationException(inner)
            }
            crate::error::ImportDecoderManifestError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::ImportDecoderManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ImportDecoderManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ImportDecoderManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ImportDecoderManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ImportDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportSignalCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportSignalCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportSignalCatalogError> for Error {
    fn from(err: crate::error::ImportSignalCatalogError) -> Self {
        match err {
            crate::error::ImportSignalCatalogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportSignalCatalogError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportSignalCatalogError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ImportSignalCatalogError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::ImportSignalCatalogError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportSignalCatalogError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ImportSignalCatalogError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ImportSignalCatalogError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ImportSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCampaignsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListCampaignsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCampaignsError> for Error {
    fn from(err: crate::error::ListCampaignsError) -> Self {
        match err {
            crate::error::ListCampaignsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCampaignsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCampaignsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCampaignsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCampaignsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListDecoderManifestNetworkInterfacesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListDecoderManifestNetworkInterfacesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDecoderManifestNetworkInterfacesError> for Error {
    fn from(err: crate::error::ListDecoderManifestNetworkInterfacesError) -> Self {
        match err {
            crate::error::ListDecoderManifestNetworkInterfacesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListDecoderManifestNetworkInterfacesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListDecoderManifestNetworkInterfacesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListDecoderManifestNetworkInterfacesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDecoderManifestNetworkInterfacesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDecoderManifestNetworkInterfacesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDecoderManifestsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDecoderManifestsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDecoderManifestsError> for Error {
    fn from(err: crate::error::ListDecoderManifestsError) -> Self {
        match err {
            crate::error::ListDecoderManifestsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDecoderManifestsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDecoderManifestsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDecoderManifestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDecoderManifestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDecoderManifestSignalsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDecoderManifestSignalsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDecoderManifestSignalsError> for Error {
    fn from(err: crate::error::ListDecoderManifestSignalsError) -> Self {
        match err {
            crate::error::ListDecoderManifestSignalsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDecoderManifestSignalsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDecoderManifestSignalsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDecoderManifestSignalsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDecoderManifestSignalsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDecoderManifestSignalsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFleetsError> for Error {
    fn from(err: crate::error::ListFleetsError) -> Self {
        match err {
            crate::error::ListFleetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFleetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFleetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFleetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFleetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFleetsForVehicleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFleetsForVehicleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFleetsForVehicleError> for Error {
    fn from(err: crate::error::ListFleetsForVehicleError) -> Self {
        match err {
            crate::error::ListFleetsForVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFleetsForVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFleetsForVehicleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFleetsForVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFleetsForVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFleetsForVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListModelManifestNodesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListModelManifestNodesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListModelManifestNodesError> for Error {
    fn from(err: crate::error::ListModelManifestNodesError) -> Self {
        match err {
            crate::error::ListModelManifestNodesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListModelManifestNodesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListModelManifestNodesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListModelManifestNodesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListModelManifestNodesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListModelManifestNodesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListModelManifestNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListModelManifestsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListModelManifestsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListModelManifestsError> for Error {
    fn from(err: crate::error::ListModelManifestsError) -> Self {
        match err {
            crate::error::ListModelManifestsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListModelManifestsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListModelManifestsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListModelManifestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListModelManifestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSignalCatalogNodesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSignalCatalogNodesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSignalCatalogNodesError> for Error {
    fn from(err: crate::error::ListSignalCatalogNodesError) -> Self {
        match err {
            crate::error::ListSignalCatalogNodesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSignalCatalogNodesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSignalCatalogNodesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListSignalCatalogNodesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListSignalCatalogNodesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSignalCatalogNodesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSignalCatalogNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSignalCatalogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSignalCatalogsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSignalCatalogsError> for Error {
    fn from(err: crate::error::ListSignalCatalogsError) -> Self {
        match err {
            crate::error::ListSignalCatalogsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSignalCatalogsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSignalCatalogsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSignalCatalogsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSignalCatalogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVehiclesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVehiclesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVehiclesError> for Error {
    fn from(err: crate::error::ListVehiclesError) -> Self {
        match err {
            crate::error::ListVehiclesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListVehiclesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListVehiclesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListVehiclesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListVehiclesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVehiclesInFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVehiclesInFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVehiclesInFleetError> for Error {
    fn from(err: crate::error::ListVehiclesInFleetError) -> Self {
        match err {
            crate::error::ListVehiclesInFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListVehiclesInFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListVehiclesInFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVehiclesInFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListVehiclesInFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListVehiclesInFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutLoggingOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLoggingOptionsError> for Error {
    fn from(err: crate::error::PutLoggingOptionsError) -> Self {
        match err {
            crate::error::PutLoggingOptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutLoggingOptionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutLoggingOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutLoggingOptionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutLoggingOptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutLoggingOptionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterAccountError> for Error {
    fn from(err: crate::error::RegisterAccountError) -> Self {
        match err {
            crate::error::RegisterAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RegisterAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCampaignError> for Error {
    fn from(err: crate::error::UpdateCampaignError) -> Self {
        match err {
            crate::error::UpdateCampaignError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateCampaignError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateCampaignError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateCampaignError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateCampaignError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateCampaignError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDecoderManifestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDecoderManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDecoderManifestError> for Error {
    fn from(err: crate::error::UpdateDecoderManifestError) -> Self {
        match err {
            crate::error::UpdateDecoderManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDecoderManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDecoderManifestError::DecoderManifestValidationException(inner) => {
                Error::DecoderManifestValidationException(inner)
            }
            crate::error::UpdateDecoderManifestError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDecoderManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDecoderManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDecoderManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDecoderManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDecoderManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFleetError> for Error {
    fn from(err: crate::error::UpdateFleetError) -> Self {
        match err {
            crate::error::UpdateFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateModelManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateModelManifestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateModelManifestError> for Error {
    fn from(err: crate::error::UpdateModelManifestError) -> Self {
        match err {
            crate::error::UpdateModelManifestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateModelManifestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateModelManifestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateModelManifestError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::UpdateModelManifestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateModelManifestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateModelManifestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateModelManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSignalCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSignalCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSignalCatalogError> for Error {
    fn from(err: crate::error::UpdateSignalCatalogError) -> Self {
        match err {
            crate::error::UpdateSignalCatalogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSignalCatalogError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSignalCatalogError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSignalCatalogError::InvalidNodeException(inner) => {
                Error::InvalidNodeException(inner)
            }
            crate::error::UpdateSignalCatalogError::InvalidSignalsException(inner) => {
                Error::InvalidSignalsException(inner)
            }
            crate::error::UpdateSignalCatalogError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateSignalCatalogError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateSignalCatalogError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSignalCatalogError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSignalCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVehicleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateVehicleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVehicleError> for Error {
    fn from(err: crate::error::UpdateVehicleError) -> Self {
        match err {
            crate::error::UpdateVehicleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateVehicleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVehicleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateVehicleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateVehicleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateVehicleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateVehicleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DecoderManifestValidationException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidNodeException(e) => e.request_id(),
            Self::InvalidSignalsException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
