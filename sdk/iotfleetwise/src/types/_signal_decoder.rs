// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a signal decoder.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignalDecoder {
    /// <p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>
    pub fully_qualified_name: ::std::string::String,
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub r#type: crate::types::SignalDecoderType,
    /// <p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>
    pub interface_id: ::std::string::String,
    /// <p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>
    pub can_signal: ::std::option::Option<crate::types::CanSignal>,
    /// <p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>
    pub obd_signal: ::std::option::Option<crate::types::ObdSignal>,
}
impl SignalDecoder {
    /// <p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>
    pub fn fully_qualified_name(&self) -> &str {
        use std::ops::Deref;
        self.fully_qualified_name.deref()
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn r#type(&self) -> &crate::types::SignalDecoderType {
        &self.r#type
    }
    /// <p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>
    pub fn interface_id(&self) -> &str {
        use std::ops::Deref;
        self.interface_id.deref()
    }
    /// <p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>
    pub fn can_signal(&self) -> ::std::option::Option<&crate::types::CanSignal> {
        self.can_signal.as_ref()
    }
    /// <p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>
    pub fn obd_signal(&self) -> ::std::option::Option<&crate::types::ObdSignal> {
        self.obd_signal.as_ref()
    }
}
impl SignalDecoder {
    /// Creates a new builder-style object to manufacture [`SignalDecoder`](crate::types::SignalDecoder).
    pub fn builder() -> crate::types::builders::SignalDecoderBuilder {
        crate::types::builders::SignalDecoderBuilder::default()
    }
}

/// A builder for [`SignalDecoder`](crate::types::SignalDecoder).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SignalDecoderBuilder {
    pub(crate) fully_qualified_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::SignalDecoderType>,
    pub(crate) interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) can_signal: ::std::option::Option<crate::types::CanSignal>,
    pub(crate) obd_signal: ::std::option::Option<crate::types::ObdSignal>,
}
impl SignalDecoderBuilder {
    /// <p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>
    /// This field is required.
    pub fn fully_qualified_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fully_qualified_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>
    pub fn set_fully_qualified_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fully_qualified_name = input;
        self
    }
    /// <p>The fully qualified name of a signal decoder as defined in a vehicle model.</p>
    pub fn get_fully_qualified_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.fully_qualified_name
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SignalDecoderType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SignalDecoderType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SignalDecoderType> {
        &self.r#type
    }
    /// <p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>
    /// This field is required.
    pub fn interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>
    pub fn set_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interface_id = input;
        self
    }
    /// <p>The ID of a network interface that specifies what network protocol a vehicle follows.</p>
    pub fn get_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.interface_id
    }
    /// <p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>
    pub fn can_signal(mut self, input: crate::types::CanSignal) -> Self {
        self.can_signal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>
    pub fn set_can_signal(mut self, input: ::std::option::Option<crate::types::CanSignal>) -> Self {
        self.can_signal = input;
        self
    }
    /// <p>Information about signal decoder using the Controller Area Network (CAN) protocol.</p>
    pub fn get_can_signal(&self) -> &::std::option::Option<crate::types::CanSignal> {
        &self.can_signal
    }
    /// <p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>
    pub fn obd_signal(mut self, input: crate::types::ObdSignal) -> Self {
        self.obd_signal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>
    pub fn set_obd_signal(mut self, input: ::std::option::Option<crate::types::ObdSignal>) -> Self {
        self.obd_signal = input;
        self
    }
    /// <p>Information about signal decoder using the On-board diagnostic (OBD) II protocol.</p>
    pub fn get_obd_signal(&self) -> &::std::option::Option<crate::types::ObdSignal> {
        &self.obd_signal
    }
    /// Consumes the builder and constructs a [`SignalDecoder`](crate::types::SignalDecoder).
    /// This method will fail if any of the following fields are not set:
    /// - [`fully_qualified_name`](crate::types::builders::SignalDecoderBuilder::fully_qualified_name)
    /// - [`r#type`](crate::types::builders::SignalDecoderBuilder::r#type)
    /// - [`interface_id`](crate::types::builders::SignalDecoderBuilder::interface_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SignalDecoder, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SignalDecoder {
            fully_qualified_name: self.fully_qualified_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fully_qualified_name",
                    "fully_qualified_name was not specified but it is required when building SignalDecoder",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SignalDecoder",
                )
            })?,
            interface_id: self.interface_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "interface_id",
                    "interface_id was not specified but it is required when building SignalDecoder",
                )
            })?,
            can_signal: self.can_signal,
            obd_signal: self.obd_signal,
        })
    }
}
