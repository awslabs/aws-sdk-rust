// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a single controller area network (CAN) signal and the messages it receives and transmits.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CanSignal {
    /// <p>The ID of the message.</p>
    #[doc(hidden)]
    pub message_id: i32,
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    #[doc(hidden)]
    pub is_big_endian: bool,
    /// <p>Whether the message data is specified as a signed value.</p>
    #[doc(hidden)]
    pub is_signed: bool,
    /// <p>Indicates the beginning of the CAN message.</p>
    #[doc(hidden)]
    pub start_bit: i32,
    /// <p>Indicates where data appears in the CAN message.</p>
    #[doc(hidden)]
    pub offset: std::option::Option<f64>,
    /// <p>A multiplier used to decode the CAN message.</p>
    #[doc(hidden)]
    pub factor: std::option::Option<f64>,
    /// <p>How many bytes of data are in the message.</p>
    #[doc(hidden)]
    pub length: i32,
    /// <p>The name of the signal.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl CanSignal {
    /// <p>The ID of the message.</p>
    pub fn message_id(&self) -> i32 {
        self.message_id
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn is_big_endian(&self) -> bool {
        self.is_big_endian
    }
    /// <p>Whether the message data is specified as a signed value.</p>
    pub fn is_signed(&self) -> bool {
        self.is_signed
    }
    /// <p>Indicates the beginning of the CAN message.</p>
    pub fn start_bit(&self) -> i32 {
        self.start_bit
    }
    /// <p>Indicates where data appears in the CAN message.</p>
    pub fn offset(&self) -> std::option::Option<f64> {
        self.offset
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn factor(&self) -> std::option::Option<f64> {
        self.factor
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn length(&self) -> i32 {
        self.length
    }
    /// <p>The name of the signal.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl CanSignal {
    /// Creates a new builder-style object to manufacture [`CanSignal`](crate::types::CanSignal).
    pub fn builder() -> crate::types::builders::CanSignalBuilder {
        crate::types::builders::CanSignalBuilder::default()
    }
}

/// A builder for [`CanSignal`](crate::types::CanSignal).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CanSignalBuilder {
    pub(crate) message_id: std::option::Option<i32>,
    pub(crate) is_big_endian: std::option::Option<bool>,
    pub(crate) is_signed: std::option::Option<bool>,
    pub(crate) start_bit: std::option::Option<i32>,
    pub(crate) offset: std::option::Option<f64>,
    pub(crate) factor: std::option::Option<f64>,
    pub(crate) length: std::option::Option<i32>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl CanSignalBuilder {
    /// <p>The ID of the message.</p>
    pub fn message_id(mut self, input: i32) -> Self {
        self.message_id = Some(input);
        self
    }
    /// <p>The ID of the message.</p>
    pub fn set_message_id(mut self, input: std::option::Option<i32>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn is_big_endian(mut self, input: bool) -> Self {
        self.is_big_endian = Some(input);
        self
    }
    /// <p>Whether the byte ordering of a CAN message is big-endian.</p>
    pub fn set_is_big_endian(mut self, input: std::option::Option<bool>) -> Self {
        self.is_big_endian = input;
        self
    }
    /// <p>Whether the message data is specified as a signed value.</p>
    pub fn is_signed(mut self, input: bool) -> Self {
        self.is_signed = Some(input);
        self
    }
    /// <p>Whether the message data is specified as a signed value.</p>
    pub fn set_is_signed(mut self, input: std::option::Option<bool>) -> Self {
        self.is_signed = input;
        self
    }
    /// <p>Indicates the beginning of the CAN message.</p>
    pub fn start_bit(mut self, input: i32) -> Self {
        self.start_bit = Some(input);
        self
    }
    /// <p>Indicates the beginning of the CAN message.</p>
    pub fn set_start_bit(mut self, input: std::option::Option<i32>) -> Self {
        self.start_bit = input;
        self
    }
    /// <p>Indicates where data appears in the CAN message.</p>
    pub fn offset(mut self, input: f64) -> Self {
        self.offset = Some(input);
        self
    }
    /// <p>Indicates where data appears in the CAN message.</p>
    pub fn set_offset(mut self, input: std::option::Option<f64>) -> Self {
        self.offset = input;
        self
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn factor(mut self, input: f64) -> Self {
        self.factor = Some(input);
        self
    }
    /// <p>A multiplier used to decode the CAN message.</p>
    pub fn set_factor(mut self, input: std::option::Option<f64>) -> Self {
        self.factor = input;
        self
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn length(mut self, input: i32) -> Self {
        self.length = Some(input);
        self
    }
    /// <p>How many bytes of data are in the message.</p>
    pub fn set_length(mut self, input: std::option::Option<i32>) -> Self {
        self.length = input;
        self
    }
    /// <p>The name of the signal.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the signal.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`CanSignal`](crate::types::CanSignal).
    pub fn build(self) -> crate::types::CanSignal {
        crate::types::CanSignal {
            message_id: self.message_id.unwrap_or_default(),
            is_big_endian: self.is_big_endian.unwrap_or_default(),
            is_signed: self.is_signed.unwrap_or_default(),
            start_bit: self.start_bit.unwrap_or_default(),
            offset: self.offset,
            factor: self.factor,
            length: self.length.unwrap_or_default(),
            name: self.name,
        }
    }
}
