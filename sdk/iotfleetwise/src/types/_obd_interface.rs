// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A network interface that specifies the On-board diagnostic (OBD) II network protocol.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ObdInterface {
    /// <p>The name of the interface.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the message requesting vehicle data.</p>
    #[doc(hidden)]
    pub request_message_id: i32,
    /// <p>The standard OBD II PID.</p>
    #[doc(hidden)]
    pub obd_standard: std::option::Option<std::string::String>,
    /// <p>The maximum number message requests per second.</p>
    #[doc(hidden)]
    pub pid_request_interval_seconds: i32,
    /// <p>The maximum number message requests per diagnostic trouble code per second.</p>
    #[doc(hidden)]
    pub dtc_request_interval_seconds: i32,
    /// <p>Whether to use extended IDs in the message.</p>
    #[doc(hidden)]
    pub use_extended_ids: bool,
    /// <p>Whether the vehicle has a transmission control module (TCM).</p>
    #[doc(hidden)]
    pub has_transmission_ecu: bool,
}
impl ObdInterface {
    /// <p>The name of the interface.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the message requesting vehicle data.</p>
    pub fn request_message_id(&self) -> i32 {
        self.request_message_id
    }
    /// <p>The standard OBD II PID.</p>
    pub fn obd_standard(&self) -> std::option::Option<&str> {
        self.obd_standard.as_deref()
    }
    /// <p>The maximum number message requests per second.</p>
    pub fn pid_request_interval_seconds(&self) -> i32 {
        self.pid_request_interval_seconds
    }
    /// <p>The maximum number message requests per diagnostic trouble code per second.</p>
    pub fn dtc_request_interval_seconds(&self) -> i32 {
        self.dtc_request_interval_seconds
    }
    /// <p>Whether to use extended IDs in the message.</p>
    pub fn use_extended_ids(&self) -> bool {
        self.use_extended_ids
    }
    /// <p>Whether the vehicle has a transmission control module (TCM).</p>
    pub fn has_transmission_ecu(&self) -> bool {
        self.has_transmission_ecu
    }
}
impl ObdInterface {
    /// Creates a new builder-style object to manufacture [`ObdInterface`](crate::types::ObdInterface).
    pub fn builder() -> crate::types::builders::ObdInterfaceBuilder {
        crate::types::builders::ObdInterfaceBuilder::default()
    }
}

/// A builder for [`ObdInterface`](crate::types::ObdInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ObdInterfaceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) request_message_id: std::option::Option<i32>,
    pub(crate) obd_standard: std::option::Option<std::string::String>,
    pub(crate) pid_request_interval_seconds: std::option::Option<i32>,
    pub(crate) dtc_request_interval_seconds: std::option::Option<i32>,
    pub(crate) use_extended_ids: std::option::Option<bool>,
    pub(crate) has_transmission_ecu: std::option::Option<bool>,
}
impl ObdInterfaceBuilder {
    /// <p>The name of the interface.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the interface.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the message requesting vehicle data.</p>
    pub fn request_message_id(mut self, input: i32) -> Self {
        self.request_message_id = Some(input);
        self
    }
    /// <p>The ID of the message requesting vehicle data.</p>
    pub fn set_request_message_id(mut self, input: std::option::Option<i32>) -> Self {
        self.request_message_id = input;
        self
    }
    /// <p>The standard OBD II PID.</p>
    pub fn obd_standard(mut self, input: impl Into<std::string::String>) -> Self {
        self.obd_standard = Some(input.into());
        self
    }
    /// <p>The standard OBD II PID.</p>
    pub fn set_obd_standard(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.obd_standard = input;
        self
    }
    /// <p>The maximum number message requests per second.</p>
    pub fn pid_request_interval_seconds(mut self, input: i32) -> Self {
        self.pid_request_interval_seconds = Some(input);
        self
    }
    /// <p>The maximum number message requests per second.</p>
    pub fn set_pid_request_interval_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.pid_request_interval_seconds = input;
        self
    }
    /// <p>The maximum number message requests per diagnostic trouble code per second.</p>
    pub fn dtc_request_interval_seconds(mut self, input: i32) -> Self {
        self.dtc_request_interval_seconds = Some(input);
        self
    }
    /// <p>The maximum number message requests per diagnostic trouble code per second.</p>
    pub fn set_dtc_request_interval_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.dtc_request_interval_seconds = input;
        self
    }
    /// <p>Whether to use extended IDs in the message.</p>
    pub fn use_extended_ids(mut self, input: bool) -> Self {
        self.use_extended_ids = Some(input);
        self
    }
    /// <p>Whether to use extended IDs in the message.</p>
    pub fn set_use_extended_ids(mut self, input: std::option::Option<bool>) -> Self {
        self.use_extended_ids = input;
        self
    }
    /// <p>Whether the vehicle has a transmission control module (TCM).</p>
    pub fn has_transmission_ecu(mut self, input: bool) -> Self {
        self.has_transmission_ecu = Some(input);
        self
    }
    /// <p>Whether the vehicle has a transmission control module (TCM).</p>
    pub fn set_has_transmission_ecu(mut self, input: std::option::Option<bool>) -> Self {
        self.has_transmission_ecu = input;
        self
    }
    /// Consumes the builder and constructs a [`ObdInterface`](crate::types::ObdInterface).
    pub fn build(self) -> crate::types::ObdInterface {
        crate::types::ObdInterface {
            name: self.name,
            request_message_id: self.request_message_id.unwrap_or_default(),
            obd_standard: self.obd_standard,
            pid_request_interval_seconds: self.pid_request_interval_seconds.unwrap_or_default(),
            dtc_request_interval_seconds: self.dtc_request_interval_seconds.unwrap_or_default(),
            use_extended_ids: self.use_extended_ids.unwrap_or_default(),
            has_transmission_ecu: self.has_transmission_ecu.unwrap_or_default(),
        }
    }
}
