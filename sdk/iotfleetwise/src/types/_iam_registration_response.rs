// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about registering an Identity and Access Management (IAM) resource so Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to Amazon Timestream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IamRegistrationResponse {
    /// <p>The Amazon Resource Name (ARN) of the IAM role to register.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>
    #[doc(hidden)]
    pub registration_status: std::option::Option<crate::types::RegistrationStatus>,
    /// <p>A message associated with a registration error.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl IamRegistrationResponse {
    /// <p>The Amazon Resource Name (ARN) of the IAM role to register.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>
    pub fn registration_status(&self) -> std::option::Option<&crate::types::RegistrationStatus> {
        self.registration_status.as_ref()
    }
    /// <p>A message associated with a registration error.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl IamRegistrationResponse {
    /// Creates a new builder-style object to manufacture [`IamRegistrationResponse`](crate::types::IamRegistrationResponse).
    pub fn builder() -> crate::types::builders::IamRegistrationResponseBuilder {
        crate::types::builders::IamRegistrationResponseBuilder::default()
    }
}

/// A builder for [`IamRegistrationResponse`](crate::types::IamRegistrationResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IamRegistrationResponseBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) registration_status: std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl IamRegistrationResponseBuilder {
    /// <p>The Amazon Resource Name (ARN) of the IAM role to register.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to register.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>
    pub fn registration_status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.registration_status = Some(input);
        self
    }
    /// <p>The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.</p>
    pub fn set_registration_status(
        mut self,
        input: std::option::Option<crate::types::RegistrationStatus>,
    ) -> Self {
        self.registration_status = input;
        self
    }
    /// <p>A message associated with a registration error.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>A message associated with a registration error.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`IamRegistrationResponse`](crate::types::IamRegistrationResponse).
    pub fn build(self) -> crate::types::IamRegistrationResponse {
        crate::types::IamRegistrationResponse {
            role_arn: self.role_arn,
            registration_status: self.registration_status,
            error_message: self.error_message,
        }
    }
}
