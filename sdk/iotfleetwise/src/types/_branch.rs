// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A group of signals that are defined in a hierarchical structure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Branch {
    /// <p>The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.</p>
    #[doc(hidden)]
    pub fully_qualified_name: std::option::Option<std::string::String>,
    /// <p>A brief description of the branch.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl Branch {
    /// <p>The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.</p>
    pub fn fully_qualified_name(&self) -> std::option::Option<&str> {
        self.fully_qualified_name.as_deref()
    }
    /// <p>A brief description of the branch.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl Branch {
    /// Creates a new builder-style object to manufacture [`Branch`](crate::types::Branch).
    pub fn builder() -> crate::types::builders::BranchBuilder {
        crate::types::builders::BranchBuilder::default()
    }
}

/// A builder for [`Branch`](crate::types::Branch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BranchBuilder {
    pub(crate) fully_qualified_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl BranchBuilder {
    /// <p>The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.</p>
    pub fn fully_qualified_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.fully_qualified_name = Some(input.into());
        self
    }
    /// <p>The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.</p>
    pub fn set_fully_qualified_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fully_qualified_name = input;
        self
    }
    /// <p>A brief description of the branch.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A brief description of the branch.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`Branch`](crate::types::Branch).
    pub fn build(self) -> crate::types::Branch {
        crate::types::Branch {
            fully_qualified_name: self.fully_qualified_name,
            description: self.description,
        }
    }
}
