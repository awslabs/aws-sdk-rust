// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single controller area network (CAN) device interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CanInterface {
    /// <p>The unique name of the interface.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the communication protocol for the interface.</p>
    #[doc(hidden)]
    pub protocol_name: std::option::Option<std::string::String>,
    /// <p>The version of the communication protocol for the interface.</p>
    #[doc(hidden)]
    pub protocol_version: std::option::Option<std::string::String>,
}
impl CanInterface {
    /// <p>The unique name of the interface.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn protocol_name(&self) -> std::option::Option<&str> {
        self.protocol_name.as_deref()
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn protocol_version(&self) -> std::option::Option<&str> {
        self.protocol_version.as_deref()
    }
}
impl CanInterface {
    /// Creates a new builder-style object to manufacture [`CanInterface`](crate::types::CanInterface).
    pub fn builder() -> crate::types::builders::CanInterfaceBuilder {
        crate::types::builders::CanInterfaceBuilder::default()
    }
}

/// A builder for [`CanInterface`](crate::types::CanInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CanInterfaceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) protocol_name: std::option::Option<std::string::String>,
    pub(crate) protocol_version: std::option::Option<std::string::String>,
}
impl CanInterfaceBuilder {
    /// <p>The unique name of the interface.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The unique name of the interface.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn protocol_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol_name = Some(input.into());
        self
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn set_protocol_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol_name = input;
        self
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn protocol_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol_version = Some(input.into());
        self
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn set_protocol_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol_version = input;
        self
    }
    /// Consumes the builder and constructs a [`CanInterface`](crate::types::CanInterface).
    pub fn build(self) -> crate::types::CanInterface {
        crate::types::CanInterface {
            name: self.name,
            protocol_name: self.protocol_name,
            protocol_version: self.protocol_version,
        }
    }
}
