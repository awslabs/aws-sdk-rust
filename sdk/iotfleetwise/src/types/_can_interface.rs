// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single controller area network (CAN) device interface.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanInterface {
    /// <p>The unique name of the interface.</p>
    pub name: ::std::string::String,
    /// <p>The name of the communication protocol for the interface.</p>
    pub protocol_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the communication protocol for the interface.</p>
    pub protocol_version: ::std::option::Option<::std::string::String>,
}
impl CanInterface {
    /// <p>The unique name of the interface.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn protocol_name(&self) -> ::std::option::Option<&str> {
        self.protocol_name.as_deref()
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn protocol_version(&self) -> ::std::option::Option<&str> {
        self.protocol_version.as_deref()
    }
}
impl CanInterface {
    /// Creates a new builder-style object to manufacture [`CanInterface`](crate::types::CanInterface).
    pub fn builder() -> crate::types::builders::CanInterfaceBuilder {
        crate::types::builders::CanInterfaceBuilder::default()
    }
}

/// A builder for [`CanInterface`](crate::types::CanInterface).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CanInterfaceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) protocol_name: ::std::option::Option<::std::string::String>,
    pub(crate) protocol_version: ::std::option::Option<::std::string::String>,
}
impl CanInterfaceBuilder {
    /// <p>The unique name of the interface.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the interface.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique name of the interface.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn protocol_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn set_protocol_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol_name = input;
        self
    }
    /// <p>The name of the communication protocol for the interface.</p>
    pub fn get_protocol_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol_name
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn protocol_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn set_protocol_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol_version = input;
        self
    }
    /// <p>The version of the communication protocol for the interface.</p>
    pub fn get_protocol_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol_version
    }
    /// Consumes the builder and constructs a [`CanInterface`](crate::types::CanInterface).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CanInterfaceBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::CanInterface, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CanInterface {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CanInterface",
                )
            })?,
            protocol_name: self.protocol_name,
            protocol_version: self.protocol_version,
        })
    }
}
