// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a collection scheme that uses a time period to decide how often to collect data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeBasedCollectionScheme {
    /// <p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>
    pub period_ms: i64,
}
impl TimeBasedCollectionScheme {
    /// <p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>
    pub fn period_ms(&self) -> i64 {
        self.period_ms
    }
}
impl TimeBasedCollectionScheme {
    /// Creates a new builder-style object to manufacture [`TimeBasedCollectionScheme`](crate::types::TimeBasedCollectionScheme).
    pub fn builder() -> crate::types::builders::TimeBasedCollectionSchemeBuilder {
        crate::types::builders::TimeBasedCollectionSchemeBuilder::default()
    }
}

/// A builder for [`TimeBasedCollectionScheme`](crate::types::TimeBasedCollectionScheme).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeBasedCollectionSchemeBuilder {
    pub(crate) period_ms: ::std::option::Option<i64>,
}
impl TimeBasedCollectionSchemeBuilder {
    /// <p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>
    /// This field is required.
    pub fn period_ms(mut self, input: i64) -> Self {
        self.period_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>
    pub fn set_period_ms(mut self, input: ::std::option::Option<i64>) -> Self {
        self.period_ms = input;
        self
    }
    /// <p>The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.</p>
    pub fn get_period_ms(&self) -> &::std::option::Option<i64> {
        &self.period_ms
    }
    /// Consumes the builder and constructs a [`TimeBasedCollectionScheme`](crate::types::TimeBasedCollectionScheme).
    /// This method will fail if any of the following fields are not set:
    /// - [`period_ms`](crate::types::builders::TimeBasedCollectionSchemeBuilder::period_ms)
    pub fn build(self) -> ::std::result::Result<crate::types::TimeBasedCollectionScheme, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimeBasedCollectionScheme {
            period_ms: self.period_ms.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "period_ms",
                    "period_ms was not specified but it is required when building TimeBasedCollectionScheme",
                )
            })?,
        })
    }
}
