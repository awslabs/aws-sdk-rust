// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configurations used to create a decoder manifest.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanDbcDefinition {
    /// <p>Contains information about a network interface.</p>
    pub network_interface: ::std::string::String,
    /// <p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>
    pub can_dbc_files: ::std::vec::Vec<::aws_smithy_types::Blob>,
    /// <p>Pairs every signal specified in your vehicle model with a signal decoder.</p>
    pub signals_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CanDbcDefinition {
    /// <p>Contains information about a network interface.</p>
    pub fn network_interface(&self) -> &str {
        use std::ops::Deref;
        self.network_interface.deref()
    }
    /// <p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>
    pub fn can_dbc_files(&self) -> &[::aws_smithy_types::Blob] {
        use std::ops::Deref;
        self.can_dbc_files.deref()
    }
    /// <p>Pairs every signal specified in your vehicle model with a signal decoder.</p>
    pub fn signals_map(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.signals_map.as_ref()
    }
}
impl CanDbcDefinition {
    /// Creates a new builder-style object to manufacture [`CanDbcDefinition`](crate::types::CanDbcDefinition).
    pub fn builder() -> crate::types::builders::CanDbcDefinitionBuilder {
        crate::types::builders::CanDbcDefinitionBuilder::default()
    }
}

/// A builder for [`CanDbcDefinition`](crate::types::CanDbcDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CanDbcDefinitionBuilder {
    pub(crate) network_interface: ::std::option::Option<::std::string::String>,
    pub(crate) can_dbc_files: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::Blob>>,
    pub(crate) signals_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CanDbcDefinitionBuilder {
    /// <p>Contains information about a network interface.</p>
    /// This field is required.
    pub fn network_interface(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains information about a network interface.</p>
    pub fn set_network_interface(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface = input;
        self
    }
    /// <p>Contains information about a network interface.</p>
    pub fn get_network_interface(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface
    }
    /// Appends an item to `can_dbc_files`.
    ///
    /// To override the contents of this collection use [`set_can_dbc_files`](Self::set_can_dbc_files).
    ///
    /// <p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>
    pub fn can_dbc_files(mut self, input: ::aws_smithy_types::Blob) -> Self {
        let mut v = self.can_dbc_files.unwrap_or_default();
        v.push(input);
        self.can_dbc_files = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>
    pub fn set_can_dbc_files(mut self, input: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::Blob>>) -> Self {
        self.can_dbc_files = input;
        self
    }
    /// <p>A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.</p>
    pub fn get_can_dbc_files(&self) -> &::std::option::Option<::std::vec::Vec<::aws_smithy_types::Blob>> {
        &self.can_dbc_files
    }
    /// Adds a key-value pair to `signals_map`.
    ///
    /// To override the contents of this collection use [`set_signals_map`](Self::set_signals_map).
    ///
    /// <p>Pairs every signal specified in your vehicle model with a signal decoder.</p>
    pub fn signals_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.signals_map.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.signals_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Pairs every signal specified in your vehicle model with a signal decoder.</p>
    pub fn set_signals_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.signals_map = input;
        self
    }
    /// <p>Pairs every signal specified in your vehicle model with a signal decoder.</p>
    pub fn get_signals_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.signals_map
    }
    /// Consumes the builder and constructs a [`CanDbcDefinition`](crate::types::CanDbcDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`network_interface`](crate::types::builders::CanDbcDefinitionBuilder::network_interface)
    /// - [`can_dbc_files`](crate::types::builders::CanDbcDefinitionBuilder::can_dbc_files)
    pub fn build(self) -> ::std::result::Result<crate::types::CanDbcDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CanDbcDefinition {
            network_interface: self.network_interface.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "network_interface",
                    "network_interface was not specified but it is required when building CanDbcDefinition",
                )
            })?,
            can_dbc_files: self.can_dbc_files.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "can_dbc_files",
                    "can_dbc_files was not specified but it is required when building CanDbcDefinition",
                )
            })?,
            signals_map: self.signals_map,
        })
    }
}
