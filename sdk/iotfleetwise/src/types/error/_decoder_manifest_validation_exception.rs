// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request couldn't be completed because it contains signal decoders with one or more validation errors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DecoderManifestValidationException {
    /// <p>The request couldn't be completed because of invalid signals in the request.</p>
    pub invalid_signals: ::std::option::Option<::std::vec::Vec<crate::types::InvalidSignalDecoder>>,
    /// <p>The request couldn't be completed because of invalid network interfaces in the request.</p>
    pub invalid_network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::InvalidNetworkInterface>>,
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl DecoderManifestValidationException {
    /// <p>The request couldn't be completed because of invalid signals in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.invalid_signals.is_none()`.
    pub fn invalid_signals(&self) -> &[crate::types::InvalidSignalDecoder] {
        self.invalid_signals.as_deref().unwrap_or_default()
    }
    /// <p>The request couldn't be completed because of invalid network interfaces in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.invalid_network_interfaces.is_none()`.
    pub fn invalid_network_interfaces(&self) -> &[crate::types::InvalidNetworkInterface] {
        self.invalid_network_interfaces.as_deref().unwrap_or_default()
    }
}
impl DecoderManifestValidationException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for DecoderManifestValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "DecoderManifestValidationException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for DecoderManifestValidationException {}
impl ::aws_http::request_id::RequestId for crate::types::error::DecoderManifestValidationException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for DecoderManifestValidationException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl DecoderManifestValidationException {
    /// Creates a new builder-style object to manufacture [`DecoderManifestValidationException`](crate::types::error::DecoderManifestValidationException).
    pub fn builder() -> crate::types::error::builders::DecoderManifestValidationExceptionBuilder {
        crate::types::error::builders::DecoderManifestValidationExceptionBuilder::default()
    }
}

/// A builder for [`DecoderManifestValidationException`](crate::types::error::DecoderManifestValidationException).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DecoderManifestValidationExceptionBuilder {
    pub(crate) invalid_signals: ::std::option::Option<::std::vec::Vec<crate::types::InvalidSignalDecoder>>,
    pub(crate) invalid_network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::InvalidNetworkInterface>>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl DecoderManifestValidationExceptionBuilder {
    /// Appends an item to `invalid_signals`.
    ///
    /// To override the contents of this collection use [`set_invalid_signals`](Self::set_invalid_signals).
    ///
    /// <p>The request couldn't be completed because of invalid signals in the request.</p>
    pub fn invalid_signals(mut self, input: crate::types::InvalidSignalDecoder) -> Self {
        let mut v = self.invalid_signals.unwrap_or_default();
        v.push(input);
        self.invalid_signals = ::std::option::Option::Some(v);
        self
    }
    /// <p>The request couldn't be completed because of invalid signals in the request.</p>
    pub fn set_invalid_signals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InvalidSignalDecoder>>) -> Self {
        self.invalid_signals = input;
        self
    }
    /// <p>The request couldn't be completed because of invalid signals in the request.</p>
    pub fn get_invalid_signals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvalidSignalDecoder>> {
        &self.invalid_signals
    }
    /// Appends an item to `invalid_network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_invalid_network_interfaces`](Self::set_invalid_network_interfaces).
    ///
    /// <p>The request couldn't be completed because of invalid network interfaces in the request.</p>
    pub fn invalid_network_interfaces(mut self, input: crate::types::InvalidNetworkInterface) -> Self {
        let mut v = self.invalid_network_interfaces.unwrap_or_default();
        v.push(input);
        self.invalid_network_interfaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The request couldn't be completed because of invalid network interfaces in the request.</p>
    pub fn set_invalid_network_interfaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InvalidNetworkInterface>>) -> Self {
        self.invalid_network_interfaces = input;
        self
    }
    /// <p>The request couldn't be completed because of invalid network interfaces in the request.</p>
    pub fn get_invalid_network_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvalidNetworkInterface>> {
        &self.invalid_network_interfaces
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`DecoderManifestValidationException`](crate::types::error::DecoderManifestValidationException).
    pub fn build(self) -> crate::types::error::DecoderManifestValidationException {
        crate::types::error::DecoderManifestValidationException {
            invalid_signals: self.invalid_signals,
            invalid_network_interfaces: self.invalid_network_interfaces,
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
