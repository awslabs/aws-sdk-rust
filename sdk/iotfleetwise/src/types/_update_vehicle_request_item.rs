// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the vehicle to update.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to update.</p>
    #[doc(hidden)]
    pub vehicle_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    #[doc(hidden)]
    pub model_manifest_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    #[doc(hidden)]
    pub decoder_manifest_arn: std::option::Option<std::string::String>,
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    #[doc(hidden)]
    pub attribute_update_mode: std::option::Option<crate::types::UpdateMode>,
}
impl UpdateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn vehicle_name(&self) -> std::option::Option<&str> {
        self.vehicle_name.as_deref()
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn model_manifest_arn(&self) -> std::option::Option<&str> {
        self.model_manifest_arn.as_deref()
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn decoder_manifest_arn(&self) -> std::option::Option<&str> {
        self.decoder_manifest_arn.as_deref()
    }
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn attribute_update_mode(&self) -> std::option::Option<&crate::types::UpdateMode> {
        self.attribute_update_mode.as_ref()
    }
}
impl UpdateVehicleRequestItem {
    /// Creates a new builder-style object to manufacture [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
    pub fn builder() -> crate::types::builders::UpdateVehicleRequestItemBuilder {
        crate::types::builders::UpdateVehicleRequestItemBuilder::default()
    }
}

/// A builder for [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateVehicleRequestItemBuilder {
    pub(crate) vehicle_name: std::option::Option<std::string::String>,
    pub(crate) model_manifest_arn: std::option::Option<std::string::String>,
    pub(crate) decoder_manifest_arn: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) attribute_update_mode: std::option::Option<crate::types::UpdateMode>,
}
impl UpdateVehicleRequestItemBuilder {
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn vehicle_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vehicle_name = Some(input.into());
        self
    }
    /// <p>The unique ID of the vehicle to update.</p>
    pub fn set_vehicle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vehicle_name = input;
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn model_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_manifest_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) associated with the vehicle to update.</p>
    pub fn set_model_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_manifest_arn = input;
        self
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn decoder_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.decoder_manifest_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the signal decoder manifest associated with the vehicle to update.</p>
    pub fn set_decoder_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.decoder_manifest_arn = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example:</p>
    /// <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn attribute_update_mode(mut self, input: crate::types::UpdateMode) -> Self {
        self.attribute_update_mode = Some(input);
        self
    }
    /// <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p>
    /// <p>This is required if attributes are present in the input.</p>
    pub fn set_attribute_update_mode(
        mut self,
        input: std::option::Option<crate::types::UpdateMode>,
    ) -> Self {
        self.attribute_update_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateVehicleRequestItem`](crate::types::UpdateVehicleRequestItem).
    pub fn build(self) -> crate::types::UpdateVehicleRequestItem {
        crate::types::UpdateVehicleRequestItem {
            vehicle_name: self.vehicle_name,
            model_manifest_arn: self.model_manifest_arn,
            decoder_manifest_arn: self.decoder_manifest_arn,
            attributes: self.attributes,
            attribute_update_mode: self.attribute_update_mode,
        }
    }
}
