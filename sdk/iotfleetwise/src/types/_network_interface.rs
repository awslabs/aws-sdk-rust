// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a node and its specifications in an in-vehicle communication network. All signal decoders must be associated with a network node. </p>
/// <p> To return this information about all the network interfaces specified in a decoder manifest, use the API operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterface {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub interface_id: std::option::Option<std::string::String>,
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::NetworkInterfaceType>,
    /// <p>Information about a network interface specified by the Controller Area Network (CAN) protocol.</p>
    #[doc(hidden)]
    pub can_interface: std::option::Option<crate::types::CanInterface>,
    /// <p>Information about a network interface specified by the On-board diagnostic (OBD) II protocol.</p>
    #[doc(hidden)]
    pub obd_interface: std::option::Option<crate::types::ObdInterface>,
}
impl NetworkInterface {
    /// <p>The ID of the network interface.</p>
    pub fn interface_id(&self) -> std::option::Option<&str> {
        self.interface_id.as_deref()
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::NetworkInterfaceType> {
        self.r#type.as_ref()
    }
    /// <p>Information about a network interface specified by the Controller Area Network (CAN) protocol.</p>
    pub fn can_interface(&self) -> std::option::Option<&crate::types::CanInterface> {
        self.can_interface.as_ref()
    }
    /// <p>Information about a network interface specified by the On-board diagnostic (OBD) II protocol.</p>
    pub fn obd_interface(&self) -> std::option::Option<&crate::types::ObdInterface> {
        self.obd_interface.as_ref()
    }
}
impl NetworkInterface {
    /// Creates a new builder-style object to manufacture [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn builder() -> crate::types::builders::NetworkInterfaceBuilder {
        crate::types::builders::NetworkInterfaceBuilder::default()
    }
}

/// A builder for [`NetworkInterface`](crate::types::NetworkInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfaceBuilder {
    pub(crate) interface_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::NetworkInterfaceType>,
    pub(crate) can_interface: std::option::Option<crate::types::CanInterface>,
    pub(crate) obd_interface: std::option::Option<crate::types::ObdInterface>,
}
impl NetworkInterfaceBuilder {
    /// <p>The ID of the network interface.</p>
    pub fn interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_interface_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.interface_id = input;
        self
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn r#type(mut self, input: crate::types::NetworkInterfaceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Information about a network interface specified by the Controller Area Network (CAN) protocol.</p>
    pub fn can_interface(mut self, input: crate::types::CanInterface) -> Self {
        self.can_interface = Some(input);
        self
    }
    /// <p>Information about a network interface specified by the Controller Area Network (CAN) protocol.</p>
    pub fn set_can_interface(
        mut self,
        input: std::option::Option<crate::types::CanInterface>,
    ) -> Self {
        self.can_interface = input;
        self
    }
    /// <p>Information about a network interface specified by the On-board diagnostic (OBD) II protocol.</p>
    pub fn obd_interface(mut self, input: crate::types::ObdInterface) -> Self {
        self.obd_interface = Some(input);
        self
    }
    /// <p>Information about a network interface specified by the On-board diagnostic (OBD) II protocol.</p>
    pub fn set_obd_interface(
        mut self,
        input: std::option::Option<crate::types::ObdInterface>,
    ) -> Self {
        self.obd_interface = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn build(self) -> crate::types::NetworkInterface {
        crate::types::NetworkInterface {
            interface_id: self.interface_id,
            r#type: self.r#type,
            can_interface: self.can_interface,
            obd_interface: self.obd_interface,
        }
    }
}
