// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A signal that represents static information about the vehicle, such as engine type or manufacturing date.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Attribute {
    /// <p>The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.</p>
    #[doc(hidden)]
    pub fully_qualified_name: std::option::Option<std::string::String>,
    /// <p>The specified data type of the attribute. </p>
    #[doc(hidden)]
    pub data_type: std::option::Option<crate::types::NodeDataType>,
    /// <p>A brief description of the attribute.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The scientific unit for the attribute.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
    /// <p>A list of possible values an attribute can be assigned.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The specified possible minimum value of the attribute.</p>
    #[doc(hidden)]
    pub min: std::option::Option<f64>,
    /// <p>The specified possible maximum value of the attribute.</p>
    #[doc(hidden)]
    pub max: std::option::Option<f64>,
    /// <p>A specified value for the attribute.</p>
    #[deprecated(note = "assignedValue is no longer in use")]
    #[doc(hidden)]
    pub assigned_value: std::option::Option<std::string::String>,
    /// <p>The default value of the attribute.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
}
impl Attribute {
    /// <p>The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.</p>
    pub fn fully_qualified_name(&self) -> std::option::Option<&str> {
        self.fully_qualified_name.as_deref()
    }
    /// <p>The specified data type of the attribute. </p>
    pub fn data_type(&self) -> std::option::Option<&crate::types::NodeDataType> {
        self.data_type.as_ref()
    }
    /// <p>A brief description of the attribute.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The scientific unit for the attribute.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
    /// <p>A list of possible values an attribute can be assigned.</p>
    pub fn allowed_values(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_values.as_deref()
    }
    /// <p>The specified possible minimum value of the attribute.</p>
    pub fn min(&self) -> std::option::Option<f64> {
        self.min
    }
    /// <p>The specified possible maximum value of the attribute.</p>
    pub fn max(&self) -> std::option::Option<f64> {
        self.max
    }
    /// <p>A specified value for the attribute.</p>
    #[deprecated(note = "assignedValue is no longer in use")]
    pub fn assigned_value(&self) -> std::option::Option<&str> {
        self.assigned_value.as_deref()
    }
    /// <p>The default value of the attribute.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl Attribute {
    /// Creates a new builder-style object to manufacture [`Attribute`](crate::types::Attribute).
    pub fn builder() -> crate::types::builders::AttributeBuilder {
        crate::types::builders::AttributeBuilder::default()
    }
}

/// A builder for [`Attribute`](crate::types::Attribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttributeBuilder {
    pub(crate) fully_qualified_name: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<crate::types::NodeDataType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
    pub(crate) allowed_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) min: std::option::Option<f64>,
    pub(crate) max: std::option::Option<f64>,
    pub(crate) assigned_value: std::option::Option<std::string::String>,
    pub(crate) default_value: std::option::Option<std::string::String>,
}
impl AttributeBuilder {
    /// <p>The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.</p>
    pub fn fully_qualified_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.fully_qualified_name = Some(input.into());
        self
    }
    /// <p>The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.</p>
    pub fn set_fully_qualified_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fully_qualified_name = input;
        self
    }
    /// <p>The specified data type of the attribute. </p>
    pub fn data_type(mut self, input: crate::types::NodeDataType) -> Self {
        self.data_type = Some(input);
        self
    }
    /// <p>The specified data type of the attribute. </p>
    pub fn set_data_type(mut self, input: std::option::Option<crate::types::NodeDataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>A brief description of the attribute.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A brief description of the attribute.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The scientific unit for the attribute.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The scientific unit for the attribute.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Appends an item to `allowed_values`.
    ///
    /// To override the contents of this collection use [`set_allowed_values`](Self::set_allowed_values).
    ///
    /// <p>A list of possible values an attribute can be assigned.</p>
    pub fn allowed_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_values.unwrap_or_default();
        v.push(input.into());
        self.allowed_values = Some(v);
        self
    }
    /// <p>A list of possible values an attribute can be assigned.</p>
    pub fn set_allowed_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>The specified possible minimum value of the attribute.</p>
    pub fn min(mut self, input: f64) -> Self {
        self.min = Some(input);
        self
    }
    /// <p>The specified possible minimum value of the attribute.</p>
    pub fn set_min(mut self, input: std::option::Option<f64>) -> Self {
        self.min = input;
        self
    }
    /// <p>The specified possible maximum value of the attribute.</p>
    pub fn max(mut self, input: f64) -> Self {
        self.max = Some(input);
        self
    }
    /// <p>The specified possible maximum value of the attribute.</p>
    pub fn set_max(mut self, input: std::option::Option<f64>) -> Self {
        self.max = input;
        self
    }
    /// <p>A specified value for the attribute.</p>
    #[deprecated(note = "assignedValue is no longer in use")]
    pub fn assigned_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.assigned_value = Some(input.into());
        self
    }
    /// <p>A specified value for the attribute.</p>
    #[deprecated(note = "assignedValue is no longer in use")]
    pub fn set_assigned_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assigned_value = input;
        self
    }
    /// <p>The default value of the attribute.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value of the attribute.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// Consumes the builder and constructs a [`Attribute`](crate::types::Attribute).
    pub fn build(self) -> crate::types::Attribute {
        crate::types::Attribute {
            fully_qualified_name: self.fully_qualified_name,
            data_type: self.data_type,
            description: self.description,
            unit: self.unit,
            allowed_values: self.allowed_values,
            min: self.min,
            max: self.max,
            assigned_value: self.assigned_value,
            default_value: self.default_value,
        }
    }
}
