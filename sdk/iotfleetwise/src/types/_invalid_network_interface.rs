// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A reason a vehicle network interface isn't valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InvalidNetworkInterface {
    /// <p>The ID of the interface that isn't valid.</p>
    #[doc(hidden)]
    pub interface_id: std::option::Option<std::string::String>,
    /// <p>A message about why the interface isn't valid. </p>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::NetworkInterfaceFailureReason>,
}
impl InvalidNetworkInterface {
    /// <p>The ID of the interface that isn't valid.</p>
    pub fn interface_id(&self) -> std::option::Option<&str> {
        self.interface_id.as_deref()
    }
    /// <p>A message about why the interface isn't valid. </p>
    pub fn reason(&self) -> std::option::Option<&crate::types::NetworkInterfaceFailureReason> {
        self.reason.as_ref()
    }
}
impl InvalidNetworkInterface {
    /// Creates a new builder-style object to manufacture [`InvalidNetworkInterface`](crate::types::InvalidNetworkInterface).
    pub fn builder() -> crate::types::builders::InvalidNetworkInterfaceBuilder {
        crate::types::builders::InvalidNetworkInterfaceBuilder::default()
    }
}

/// A builder for [`InvalidNetworkInterface`](crate::types::InvalidNetworkInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InvalidNetworkInterfaceBuilder {
    pub(crate) interface_id: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<crate::types::NetworkInterfaceFailureReason>,
}
impl InvalidNetworkInterfaceBuilder {
    /// <p>The ID of the interface that isn't valid.</p>
    pub fn interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the interface that isn't valid.</p>
    pub fn set_interface_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.interface_id = input;
        self
    }
    /// <p>A message about why the interface isn't valid. </p>
    pub fn reason(mut self, input: crate::types::NetworkInterfaceFailureReason) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>A message about why the interface isn't valid. </p>
    pub fn set_reason(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceFailureReason>,
    ) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`InvalidNetworkInterface`](crate::types::InvalidNetworkInterface).
    pub fn build(self) -> crate::types::InvalidNetworkInterface {
        crate::types::InvalidNetworkInterface {
            interface_id: self.interface_id,
            reason: self.reason,
        }
    }
}
