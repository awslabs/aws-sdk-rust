// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the vehicle to create.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to create.</p>
    pub vehicle_name: ::std::string::String,
    /// <p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>
    pub model_manifest_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>
    pub decoder_manifest_arn: ::std::string::String,
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> </p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>
    pub association_behavior: ::std::option::Option<crate::types::VehicleAssociationBehavior>,
    /// <p>Metadata which can be used to manage the vehicle.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateVehicleRequestItem {
    /// <p>The unique ID of the vehicle to create.</p>
    pub fn vehicle_name(&self) -> &str {
        use std::ops::Deref;
        self.vehicle_name.deref()
    }
    /// <p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>
    pub fn model_manifest_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_manifest_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>
    pub fn decoder_manifest_arn(&self) -> &str {
        use std::ops::Deref;
        self.decoder_manifest_arn.deref()
    }
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> </p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>
    pub fn association_behavior(&self) -> ::std::option::Option<&crate::types::VehicleAssociationBehavior> {
        self.association_behavior.as_ref()
    }
    /// <p>Metadata which can be used to manage the vehicle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateVehicleRequestItem {
    /// Creates a new builder-style object to manufacture [`CreateVehicleRequestItem`](crate::types::CreateVehicleRequestItem).
    pub fn builder() -> crate::types::builders::CreateVehicleRequestItemBuilder {
        crate::types::builders::CreateVehicleRequestItemBuilder::default()
    }
}

/// A builder for [`CreateVehicleRequestItem`](crate::types::CreateVehicleRequestItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateVehicleRequestItemBuilder {
    pub(crate) vehicle_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_manifest_arn: ::std::option::Option<::std::string::String>,
    pub(crate) decoder_manifest_arn: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) association_behavior: ::std::option::Option<crate::types::VehicleAssociationBehavior>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateVehicleRequestItemBuilder {
    /// <p>The unique ID of the vehicle to create.</p>
    /// This field is required.
    pub fn vehicle_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vehicle_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the vehicle to create.</p>
    pub fn set_vehicle_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vehicle_name = input;
        self
    }
    /// <p>The unique ID of the vehicle to create.</p>
    pub fn get_vehicle_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vehicle_name
    }
    /// <p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>
    /// This field is required.
    pub fn model_manifest_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_manifest_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>
    pub fn set_model_manifest_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_manifest_arn = input;
        self
    }
    /// <p>The ARN of the vehicle model (model manifest) to create the vehicle from.</p>
    pub fn get_model_manifest_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_manifest_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>
    /// This field is required.
    pub fn decoder_manifest_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.decoder_manifest_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>
    pub fn set_decoder_manifest_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.decoder_manifest_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. </p>
    pub fn get_decoder_manifest_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.decoder_manifest_arn
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> </p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> </p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> </p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// <p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>
    pub fn association_behavior(mut self, input: crate::types::VehicleAssociationBehavior) -> Self {
        self.association_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>
    pub fn set_association_behavior(mut self, input: ::std::option::Option<crate::types::VehicleAssociationBehavior>) -> Self {
        self.association_behavior = input;
        self
    }
    /// <p>An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.</p>
    pub fn get_association_behavior(&self) -> &::std::option::Option<crate::types::VehicleAssociationBehavior> {
        &self.association_behavior
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the vehicle.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata which can be used to manage the vehicle.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata which can be used to manage the vehicle.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateVehicleRequestItem`](crate::types::CreateVehicleRequestItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`vehicle_name`](crate::types::builders::CreateVehicleRequestItemBuilder::vehicle_name)
    /// - [`model_manifest_arn`](crate::types::builders::CreateVehicleRequestItemBuilder::model_manifest_arn)
    /// - [`decoder_manifest_arn`](crate::types::builders::CreateVehicleRequestItemBuilder::decoder_manifest_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CreateVehicleRequestItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateVehicleRequestItem {
            vehicle_name: self.vehicle_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vehicle_name",
                    "vehicle_name was not specified but it is required when building CreateVehicleRequestItem",
                )
            })?,
            model_manifest_arn: self.model_manifest_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_manifest_arn",
                    "model_manifest_arn was not specified but it is required when building CreateVehicleRequestItem",
                )
            })?,
            decoder_manifest_arn: self.decoder_manifest_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "decoder_manifest_arn",
                    "decoder_manifest_arn was not specified but it is required when building CreateVehicleRequestItem",
                )
            })?,
            attributes: self.attributes,
            association_behavior: self.association_behavior,
            tags: self.tags,
        })
    }
}
