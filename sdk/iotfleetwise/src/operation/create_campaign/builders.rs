// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_campaign::_create_campaign_output::CreateCampaignOutputBuilder;

pub use crate::operation::create_campaign::_create_campaign_input::CreateCampaignInputBuilder;

/// Fluent builder constructing a request to `CreateCampaign`.
///
/// <p>Creates an orchestration of data collection rules. The Amazon Web Services IoT FleetWise Edge Agent software running in vehicles uses campaigns to decide how to collect and transfer data to the cloud. You create campaigns in the cloud. After you or your team approve campaigns, Amazon Web Services IoT FleetWise automatically deploys them to vehicles. </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/campaigns.html">Collect and transfer data with campaigns</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCampaignFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_campaign::builders::CreateCampaignInputBuilder,
}
impl CreateCampaignFluentBuilder {
    /// Creates a new `CreateCampaign`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_campaign::CreateCampaign,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_campaign::CreateCampaignError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_campaign::CreateCampaignOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_campaign::CreateCampaignError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the campaign to create. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the campaign to create. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional description of the campaign to help identify its purpose.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description of the campaign to help identify its purpose.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. </p>
    pub fn signal_catalog_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.signal_catalog_arn(input.into());
        self
    }
    /// <p>(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. </p>
    pub fn set_signal_catalog_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_signal_catalog_arn(input);
        self
    }
    /// <p> The ARN of the vehicle or fleet to deploy a campaign to. </p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_arn(input.into());
        self
    }
    /// <p> The ARN of the vehicle or fleet to deploy a campaign to. </p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_arn(input);
        self
    }
    /// <p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it's not specified, <code>0</code> is used.</p>
    /// <p>Default: <code>0</code> </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it's not specified, <code>0</code> is used.</p>
    /// <p>Default: <code>0</code> </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires. </p>
    /// <p>Default: 253402214400 (December 31, 9999, 00:00:00 UTC)</p>
    pub fn expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.expiry_time(input);
        self
    }
    /// <p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won't be collected after the campaign expires. </p>
    /// <p>Default: 253402214400 (December 31, 9999, 00:00:00 UTC)</p>
    pub fn set_expiry_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_expiry_time(input);
        self
    }
    /// <p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it's not specified, <code>0</code> is used.</p>
    /// <p>Default: <code>0</code> </p>
    pub fn post_trigger_collection_duration(mut self, input: i64) -> Self {
        self.inner = self.inner.post_trigger_collection_duration(input);
        self
    }
    /// <p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it's not specified, <code>0</code> is used.</p>
    /// <p>Default: <code>0</code> </p>
    pub fn set_post_trigger_collection_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_post_trigger_collection_duration(input);
        self
    }
    /// <p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it's not specified, <code>OFF</code> is used.</p>
    /// <p>Default: <code>OFF</code> </p>
    pub fn diagnostics_mode(mut self, input: crate::types::DiagnosticsMode) -> Self {
        self.inner = self.inner.diagnostics_mode(input);
        self
    }
    /// <p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it's not specified, <code>OFF</code> is used.</p>
    /// <p>Default: <code>OFF</code> </p>
    pub fn set_diagnostics_mode(
        mut self,
        input: std::option::Option<crate::types::DiagnosticsMode>,
    ) -> Self {
        self.inner = self.inner.set_diagnostics_mode(input);
        self
    }
    /// <p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it's not specified, <code>OFF</code> is used.</p>
    /// <p>Default: <code>OFF</code> </p>
    pub fn spooling_mode(mut self, input: crate::types::SpoolingMode) -> Self {
        self.inner = self.inner.spooling_mode(input);
        self
    }
    /// <p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it's not specified, <code>OFF</code> is used.</p>
    /// <p>Default: <code>OFF</code> </p>
    pub fn set_spooling_mode(
        mut self,
        input: std::option::Option<crate::types::SpoolingMode>,
    ) -> Self {
        self.inner = self.inner.set_spooling_mode(input);
        self
    }
    /// <p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don't want to compress the signals, use <code>OFF</code>. If it's not specified, <code>SNAPPY</code> is used. </p>
    /// <p>Default: <code>SNAPPY</code> </p>
    pub fn compression(mut self, input: crate::types::Compression) -> Self {
        self.inner = self.inner.compression(input);
        self
    }
    /// <p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don't want to compress the signals, use <code>OFF</code>. If it's not specified, <code>SNAPPY</code> is used. </p>
    /// <p>Default: <code>SNAPPY</code> </p>
    pub fn set_compression(
        mut self,
        input: std::option::Option<crate::types::Compression>,
    ) -> Self {
        self.inner = self.inner.set_compression(input);
        self
    }
    /// <p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it's not specified, <code>0</code> is used. </p>
    /// <p>Default: <code>0</code> </p>
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// <p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it's not specified, <code>0</code> is used. </p>
    /// <p>Default: <code>0</code> </p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// Appends an item to `signalsToCollect`.
    ///
    /// To override the contents of this collection use [`set_signals_to_collect`](Self::set_signals_to_collect).
    ///
    /// <p>(Optional) A list of information about signals to collect. </p>
    pub fn signals_to_collect(mut self, input: crate::types::SignalInformation) -> Self {
        self.inner = self.inner.signals_to_collect(input);
        self
    }
    /// <p>(Optional) A list of information about signals to collect. </p>
    pub fn set_signals_to_collect(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SignalInformation>>,
    ) -> Self {
        self.inner = self.inner.set_signals_to_collect(input);
        self
    }
    /// <p> The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event.</p>
    pub fn collection_scheme(mut self, input: crate::types::CollectionScheme) -> Self {
        self.inner = self.inner.collection_scheme(input);
        self
    }
    /// <p> The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event.</p>
    pub fn set_collection_scheme(
        mut self,
        input: std::option::Option<crate::types::CollectionScheme>,
    ) -> Self {
        self.inner = self.inner.set_collection_scheme(input);
        self
    }
    /// Appends an item to `dataExtraDimensions`.
    ///
    /// To override the contents of this collection use [`set_data_extra_dimensions`](Self::set_data_extra_dimensions).
    ///
    /// <p> (Optional) A list of vehicle attributes to associate with a campaign. </p>
    /// <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p>
    /// <p>Default: An empty array</p>
    pub fn data_extra_dimensions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_extra_dimensions(input.into());
        self
    }
    /// <p> (Optional) A list of vehicle attributes to associate with a campaign. </p>
    /// <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p>
    /// <p>Default: An empty array</p>
    pub fn set_data_extra_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_data_extra_dimensions(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the campaign.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata that can be used to manage the campaign.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
