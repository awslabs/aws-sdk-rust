// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_vehicle::_create_vehicle_output::CreateVehicleOutputBuilder;

pub use crate::operation::create_vehicle::_create_vehicle_input::CreateVehicleInputBuilder;

/// Fluent builder constructing a request to `CreateVehicle`.
///
/// <p> Creates a vehicle, which is an instance of a vehicle model (model manifest). Vehicles created from the same vehicle model consist of the same signals inherited from the vehicle model.</p> <note>
/// <p> If you have an existing Amazon Web Services IoT Thing, you can use Amazon Web Services IoT FleetWise to create a vehicle and collect data from your thing. </p>
/// </note>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/create-vehicle-cli.html">Create a vehicle (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateVehicleFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_vehicle::builders::CreateVehicleInputBuilder,
}
impl CreateVehicleFluentBuilder {
    /// Creates a new `CreateVehicle`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_vehicle::CreateVehicle,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_vehicle::CreateVehicleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_vehicle::CreateVehicleOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_vehicle::CreateVehicleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID of the vehicle to create. </p>
    pub fn vehicle_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vehicle_name(input.into());
        self
    }
    /// <p> The unique ID of the vehicle to create. </p>
    pub fn set_vehicle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_vehicle_name(input);
        self
    }
    /// <p> The Amazon Resource Name ARN of a vehicle model. </p>
    pub fn model_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_manifest_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name ARN of a vehicle model. </p>
    pub fn set_model_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_manifest_arn(input);
        self
    }
    /// <p> The ARN of a decoder manifest. </p>
    pub fn decoder_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.decoder_manifest_arn(input.into());
        self
    }
    /// <p> The ARN of a decoder manifest. </p>
    pub fn set_decoder_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_decoder_manifest_arn(input);
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p>Static information about a vehicle in a key-value pair. For example: <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p> An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing Amazon Web Services IoT thing as a vehicle. </p>
    /// <p>Default: <code></code> </p>
    pub fn association_behavior(mut self, input: crate::types::VehicleAssociationBehavior) -> Self {
        self.inner = self.inner.association_behavior(input);
        self
    }
    /// <p> An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing Amazon Web Services IoT thing as a vehicle. </p>
    /// <p>Default: <code></code> </p>
    pub fn set_association_behavior(
        mut self,
        input: std::option::Option<crate::types::VehicleAssociationBehavior>,
    ) -> Self {
        self.inner = self.inner.set_association_behavior(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the vehicle.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata that can be used to manage the vehicle.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
