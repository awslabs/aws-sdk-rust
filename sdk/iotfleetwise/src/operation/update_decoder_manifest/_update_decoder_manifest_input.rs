// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDecoderManifestInput {
    /// <p> The name of the decoder manifest to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> A brief description of the decoder manifest to update. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    pub signal_decoders_to_add: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>,
    /// <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    pub signal_decoders_to_update: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>,
    /// <p> A list of signal decoders to remove from the decoder manifest. </p>
    pub signal_decoders_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    pub network_interfaces_to_add: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    /// <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    pub network_interfaces_to_update: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    /// <p> A list of network interfaces to remove from the decoder manifest.</p>
    pub network_interfaces_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    pub status: ::std::option::Option<crate::types::ManifestStatus>,
}
impl UpdateDecoderManifestInput {
    /// <p> The name of the decoder manifest to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> A brief description of the decoder manifest to update. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.signal_decoders_to_add.is_none()`.
    pub fn signal_decoders_to_add(&self) -> &[crate::types::SignalDecoder] {
        self.signal_decoders_to_add.as_deref().unwrap_or_default()
    }
    /// <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.signal_decoders_to_update.is_none()`.
    pub fn signal_decoders_to_update(&self) -> &[crate::types::SignalDecoder] {
        self.signal_decoders_to_update.as_deref().unwrap_or_default()
    }
    /// <p> A list of signal decoders to remove from the decoder manifest. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.signal_decoders_to_remove.is_none()`.
    pub fn signal_decoders_to_remove(&self) -> &[::std::string::String] {
        self.signal_decoders_to_remove.as_deref().unwrap_or_default()
    }
    /// <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces_to_add.is_none()`.
    pub fn network_interfaces_to_add(&self) -> &[crate::types::NetworkInterface] {
        self.network_interfaces_to_add.as_deref().unwrap_or_default()
    }
    /// <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces_to_update.is_none()`.
    pub fn network_interfaces_to_update(&self) -> &[crate::types::NetworkInterface] {
        self.network_interfaces_to_update.as_deref().unwrap_or_default()
    }
    /// <p> A list of network interfaces to remove from the decoder manifest.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces_to_remove.is_none()`.
    pub fn network_interfaces_to_remove(&self) -> &[::std::string::String] {
        self.network_interfaces_to_remove.as_deref().unwrap_or_default()
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ManifestStatus> {
        self.status.as_ref()
    }
}
impl UpdateDecoderManifestInput {
    /// Creates a new builder-style object to manufacture [`UpdateDecoderManifestInput`](crate::operation::update_decoder_manifest::UpdateDecoderManifestInput).
    pub fn builder() -> crate::operation::update_decoder_manifest::builders::UpdateDecoderManifestInputBuilder {
        crate::operation::update_decoder_manifest::builders::UpdateDecoderManifestInputBuilder::default()
    }
}

/// A builder for [`UpdateDecoderManifestInput`](crate::operation::update_decoder_manifest::UpdateDecoderManifestInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDecoderManifestInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) signal_decoders_to_add: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>,
    pub(crate) signal_decoders_to_update: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>,
    pub(crate) signal_decoders_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) network_interfaces_to_add: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    pub(crate) network_interfaces_to_update: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    pub(crate) network_interfaces_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::ManifestStatus>,
}
impl UpdateDecoderManifestInputBuilder {
    /// <p> The name of the decoder manifest to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the decoder manifest to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the decoder manifest to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> A brief description of the decoder manifest to update. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A brief description of the decoder manifest to update. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> A brief description of the decoder manifest to update. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `signal_decoders_to_add`.
    ///
    /// To override the contents of this collection use [`set_signal_decoders_to_add`](Self::set_signal_decoders_to_add).
    ///
    /// <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    pub fn signal_decoders_to_add(mut self, input: crate::types::SignalDecoder) -> Self {
        let mut v = self.signal_decoders_to_add.unwrap_or_default();
        v.push(input);
        self.signal_decoders_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    pub fn set_signal_decoders_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>) -> Self {
        self.signal_decoders_to_add = input;
        self
    }
    /// <p> A list of information about decoding additional signals to add to the decoder manifest. </p>
    pub fn get_signal_decoders_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>> {
        &self.signal_decoders_to_add
    }
    /// Appends an item to `signal_decoders_to_update`.
    ///
    /// To override the contents of this collection use [`set_signal_decoders_to_update`](Self::set_signal_decoders_to_update).
    ///
    /// <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    pub fn signal_decoders_to_update(mut self, input: crate::types::SignalDecoder) -> Self {
        let mut v = self.signal_decoders_to_update.unwrap_or_default();
        v.push(input);
        self.signal_decoders_to_update = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    pub fn set_signal_decoders_to_update(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>>) -> Self {
        self.signal_decoders_to_update = input;
        self
    }
    /// <p> A list of updated information about decoding signals to update in the decoder manifest. </p>
    pub fn get_signal_decoders_to_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SignalDecoder>> {
        &self.signal_decoders_to_update
    }
    /// Appends an item to `signal_decoders_to_remove`.
    ///
    /// To override the contents of this collection use [`set_signal_decoders_to_remove`](Self::set_signal_decoders_to_remove).
    ///
    /// <p> A list of signal decoders to remove from the decoder manifest. </p>
    pub fn signal_decoders_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.signal_decoders_to_remove.unwrap_or_default();
        v.push(input.into());
        self.signal_decoders_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of signal decoders to remove from the decoder manifest. </p>
    pub fn set_signal_decoders_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.signal_decoders_to_remove = input;
        self
    }
    /// <p> A list of signal decoders to remove from the decoder manifest. </p>
    pub fn get_signal_decoders_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.signal_decoders_to_remove
    }
    /// Appends an item to `network_interfaces_to_add`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces_to_add`](Self::set_network_interfaces_to_add).
    ///
    /// <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    pub fn network_interfaces_to_add(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces_to_add.unwrap_or_default();
        v.push(input);
        self.network_interfaces_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    pub fn set_network_interfaces_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>) -> Self {
        self.network_interfaces_to_add = input;
        self
    }
    /// <p> A list of information about the network interfaces to add to the decoder manifest. </p>
    pub fn get_network_interfaces_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>> {
        &self.network_interfaces_to_add
    }
    /// Appends an item to `network_interfaces_to_update`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces_to_update`](Self::set_network_interfaces_to_update).
    ///
    /// <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    pub fn network_interfaces_to_update(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces_to_update.unwrap_or_default();
        v.push(input);
        self.network_interfaces_to_update = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    pub fn set_network_interfaces_to_update(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>) -> Self {
        self.network_interfaces_to_update = input;
        self
    }
    /// <p> A list of information about the network interfaces to update in the decoder manifest. </p>
    pub fn get_network_interfaces_to_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>> {
        &self.network_interfaces_to_update
    }
    /// Appends an item to `network_interfaces_to_remove`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces_to_remove`](Self::set_network_interfaces_to_remove).
    ///
    /// <p> A list of network interfaces to remove from the decoder manifest.</p>
    pub fn network_interfaces_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_interfaces_to_remove.unwrap_or_default();
        v.push(input.into());
        self.network_interfaces_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of network interfaces to remove from the decoder manifest.</p>
    pub fn set_network_interfaces_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_interfaces_to_remove = input;
        self
    }
    /// <p> A list of network interfaces to remove from the decoder manifest.</p>
    pub fn get_network_interfaces_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_interfaces_to_remove
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    pub fn status(mut self, input: crate::types::ManifestStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ManifestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ManifestStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdateDecoderManifestInput`](crate::operation::update_decoder_manifest::UpdateDecoderManifestInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_decoder_manifest::UpdateDecoderManifestInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_decoder_manifest::UpdateDecoderManifestInput {
            name: self.name,
            description: self.description,
            signal_decoders_to_add: self.signal_decoders_to_add,
            signal_decoders_to_update: self.signal_decoders_to_update,
            signal_decoders_to_remove: self.signal_decoders_to_remove,
            network_interfaces_to_add: self.network_interfaces_to_add,
            network_interfaces_to_update: self.network_interfaces_to_update,
            network_interfaces_to_remove: self.network_interfaces_to_remove,
            status: self.status,
        })
    }
}
