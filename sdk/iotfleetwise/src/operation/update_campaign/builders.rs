// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_campaign::_update_campaign_output::UpdateCampaignOutputBuilder;

pub use crate::operation::update_campaign::_update_campaign_input::UpdateCampaignInputBuilder;

/// Fluent builder constructing a request to `UpdateCampaign`.
///
/// <p> Updates a campaign. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCampaignFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_campaign::builders::UpdateCampaignInputBuilder,
}
impl UpdateCampaignFluentBuilder {
    /// Creates a new `UpdateCampaign`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_campaign::UpdateCampaign,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_campaign::UpdateCampaignError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_campaign::UpdateCampaignOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_campaign::UpdateCampaignError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the campaign to update. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the campaign to update. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the campaign.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the campaign.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `dataExtraDimensions`.
    ///
    /// To override the contents of this collection use [`set_data_extra_dimensions`](Self::set_data_extra_dimensions).
    ///
    /// <p> A list of vehicle attributes to associate with a signal. </p>
    /// <p>Default: An empty array</p>
    pub fn data_extra_dimensions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_extra_dimensions(input.into());
        self
    }
    /// <p> A list of vehicle attributes to associate with a signal. </p>
    /// <p>Default: An empty array</p>
    pub fn set_data_extra_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_data_extra_dimensions(input);
        self
    }
    /// <p> Specifies how to update a campaign. The action can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>APPROVE</code> - To approve delivering a data collection scheme to vehicles. </p> </li>
    /// <li> <p> <code>SUSPEND</code> - To suspend collecting signal data. </p> </li>
    /// <li> <p> <code>RESUME</code> - To resume collecting signal data. </p> </li>
    /// <li> <p> <code>UPDATE</code> - To update a campaign. </p> </li>
    /// </ul>
    pub fn action(mut self, input: crate::types::UpdateCampaignAction) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p> Specifies how to update a campaign. The action can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>APPROVE</code> - To approve delivering a data collection scheme to vehicles. </p> </li>
    /// <li> <p> <code>SUSPEND</code> - To suspend collecting signal data. </p> </li>
    /// <li> <p> <code>RESUME</code> - To resume collecting signal data. </p> </li>
    /// <li> <p> <code>UPDATE</code> - To update a campaign. </p> </li>
    /// </ul>
    pub fn set_action(
        mut self,
        input: std::option::Option<crate::types::UpdateCampaignAction>,
    ) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
}
