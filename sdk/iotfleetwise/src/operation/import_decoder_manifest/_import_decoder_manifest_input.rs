// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportDecoderManifestInput {
    /// <p> The name of the decoder manifest to import. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The file to load into an Amazon Web Services account. </p>
    pub network_file_definitions: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFileDefinition>>,
}
impl ImportDecoderManifestInput {
    /// <p> The name of the decoder manifest to import. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The file to load into an Amazon Web Services account. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_file_definitions.is_none()`.
    pub fn network_file_definitions(&self) -> &[crate::types::NetworkFileDefinition] {
        self.network_file_definitions.as_deref().unwrap_or_default()
    }
}
impl ImportDecoderManifestInput {
    /// Creates a new builder-style object to manufacture [`ImportDecoderManifestInput`](crate::operation::import_decoder_manifest::ImportDecoderManifestInput).
    pub fn builder() -> crate::operation::import_decoder_manifest::builders::ImportDecoderManifestInputBuilder {
        crate::operation::import_decoder_manifest::builders::ImportDecoderManifestInputBuilder::default()
    }
}

/// A builder for [`ImportDecoderManifestInput`](crate::operation::import_decoder_manifest::ImportDecoderManifestInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportDecoderManifestInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) network_file_definitions: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFileDefinition>>,
}
impl ImportDecoderManifestInputBuilder {
    /// <p> The name of the decoder manifest to import. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the decoder manifest to import. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the decoder manifest to import. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `network_file_definitions`.
    ///
    /// To override the contents of this collection use [`set_network_file_definitions`](Self::set_network_file_definitions).
    ///
    /// <p> The file to load into an Amazon Web Services account. </p>
    pub fn network_file_definitions(mut self, input: crate::types::NetworkFileDefinition) -> Self {
        let mut v = self.network_file_definitions.unwrap_or_default();
        v.push(input);
        self.network_file_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p> The file to load into an Amazon Web Services account. </p>
    pub fn set_network_file_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkFileDefinition>>) -> Self {
        self.network_file_definitions = input;
        self
    }
    /// <p> The file to load into an Amazon Web Services account. </p>
    pub fn get_network_file_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkFileDefinition>> {
        &self.network_file_definitions
    }
    /// Consumes the builder and constructs a [`ImportDecoderManifestInput`](crate::operation::import_decoder_manifest::ImportDecoderManifestInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_decoder_manifest::ImportDecoderManifestInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::import_decoder_manifest::ImportDecoderManifestInput {
            name: self.name,
            network_file_definitions: self.network_file_definitions,
        })
    }
}
