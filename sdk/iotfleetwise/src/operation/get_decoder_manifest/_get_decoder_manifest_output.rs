// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDecoderManifestOutput {
    /// <p> The name of the decoder manifest. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the decoder manifest. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p> A brief description of the decoder manifest.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>
    #[doc(hidden)]
    pub model_manifest_arn: std::option::Option<std::string::String>,
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ManifestStatus>,
    /// <p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetDecoderManifestOutput {
    /// <p> The name of the decoder manifest. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the decoder manifest. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> A brief description of the decoder manifest.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>
    pub fn model_manifest_arn(&self) -> std::option::Option<&str> {
        self.model_manifest_arn.as_deref()
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ManifestStatus> {
        self.status.as_ref()
    }
    /// <p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDecoderManifestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDecoderManifestOutput {
    /// Creates a new builder-style object to manufacture [`GetDecoderManifestOutput`](crate::operation::get_decoder_manifest::GetDecoderManifestOutput).
    pub fn builder(
    ) -> crate::operation::get_decoder_manifest::builders::GetDecoderManifestOutputBuilder {
        crate::operation::get_decoder_manifest::builders::GetDecoderManifestOutputBuilder::default()
    }
}

/// A builder for [`GetDecoderManifestOutput`](crate::operation::get_decoder_manifest::GetDecoderManifestOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDecoderManifestOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) model_manifest_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ManifestStatus>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetDecoderManifestOutputBuilder {
    /// <p> The name of the decoder manifest. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the decoder manifest. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the decoder manifest. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the decoder manifest. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> A brief description of the decoder manifest.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> A brief description of the decoder manifest.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>
    pub fn model_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_manifest_arn = Some(input.into());
        self
    }
    /// <p> The ARN of a vehicle model (model manifest) associated with the decoder manifest.</p>
    pub fn set_model_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_manifest_arn = input;
        self
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>
    pub fn status(mut self, input: crate::types::ManifestStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ManifestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p> The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p> The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). </p>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDecoderManifestOutput`](crate::operation::get_decoder_manifest::GetDecoderManifestOutput).
    pub fn build(self) -> crate::operation::get_decoder_manifest::GetDecoderManifestOutput {
        crate::operation::get_decoder_manifest::GetDecoderManifestOutput {
            name: self.name,
            arn: self.arn,
            description: self.description,
            model_manifest_arn: self.model_manifest_arn,
            status: self.status,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            _request_id: self._request_id,
        }
    }
}
