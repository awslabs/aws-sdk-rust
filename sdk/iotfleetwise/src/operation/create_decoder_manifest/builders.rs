// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_decoder_manifest::_create_decoder_manifest_output::CreateDecoderManifestOutputBuilder;

pub use crate::operation::create_decoder_manifest::_create_decoder_manifest_input::CreateDecoderManifestInputBuilder;

/// Fluent builder constructing a request to `CreateDecoderManifest`.
///
/// <p>Creates the decoder manifest associated with a model manifest. To create a decoder manifest, the following must be true:</p>
/// <ul>
/// <li> <p>Every signal decoder has a unique name.</p> </li>
/// <li> <p>Each signal decoder is associated with a network interface.</p> </li>
/// <li> <p>Each network interface has a unique ID.</p> </li>
/// <li> <p>The signal decoders are specified in the model manifest.</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDecoderManifestFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_decoder_manifest::builders::CreateDecoderManifestInputBuilder,
}
impl CreateDecoderManifestFluentBuilder {
    /// Creates a new `CreateDecoderManifest`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_decoder_manifest::CreateDecoderManifest,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_decoder_manifest::CreateDecoderManifestError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_decoder_manifest::CreateDecoderManifestOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_decoder_manifest::CreateDecoderManifestError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique name of the decoder manifest to create.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The unique name of the decoder manifest to create.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> A brief description of the decoder manifest. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> A brief description of the decoder manifest. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    pub fn model_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_manifest_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    pub fn set_model_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_model_manifest_arn(input);
        self
    }
    /// Appends an item to `signalDecoders`.
    ///
    /// To override the contents of this collection use [`set_signal_decoders`](Self::set_signal_decoders).
    ///
    /// <p> A list of information about signal decoders. </p>
    pub fn signal_decoders(mut self, input: crate::types::SignalDecoder) -> Self {
        self.inner = self.inner.signal_decoders(input);
        self
    }
    /// <p> A list of information about signal decoders. </p>
    pub fn set_signal_decoders(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SignalDecoder>>,
    ) -> Self {
        self.inner = self.inner.set_signal_decoders(input);
        self
    }
    /// Appends an item to `networkInterfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p> A list of information about available network interfaces. </p>
    pub fn network_interfaces(mut self, input: crate::types::NetworkInterface) -> Self {
        self.inner = self.inner.network_interfaces(input);
        self
    }
    /// <p> A list of information about available network interfaces. </p>
    pub fn set_network_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    ) -> Self {
        self.inner = self.inner.set_network_interfaces(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
