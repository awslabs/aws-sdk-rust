// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDecoderManifestInput {
    /// <p> The unique name of the decoder manifest to create.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> A brief description of the decoder manifest. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    #[doc(hidden)]
    pub model_manifest_arn: std::option::Option<std::string::String>,
    /// <p> A list of information about signal decoders. </p>
    #[doc(hidden)]
    pub signal_decoders: std::option::Option<std::vec::Vec<crate::types::SignalDecoder>>,
    /// <p> A list of information about available network interfaces. </p>
    #[doc(hidden)]
    pub network_interfaces: std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDecoderManifestInput {
    /// <p> The unique name of the decoder manifest to create.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> A brief description of the decoder manifest. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    pub fn model_manifest_arn(&self) -> std::option::Option<&str> {
        self.model_manifest_arn.as_deref()
    }
    /// <p> A list of information about signal decoders. </p>
    pub fn signal_decoders(&self) -> std::option::Option<&[crate::types::SignalDecoder]> {
        self.signal_decoders.as_deref()
    }
    /// <p> A list of information about available network interfaces. </p>
    pub fn network_interfaces(&self) -> std::option::Option<&[crate::types::NetworkInterface]> {
        self.network_interfaces.as_deref()
    }
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateDecoderManifestInput {
    /// Creates a new builder-style object to manufacture [`CreateDecoderManifestInput`](crate::operation::create_decoder_manifest::CreateDecoderManifestInput).
    pub fn builder(
    ) -> crate::operation::create_decoder_manifest::builders::CreateDecoderManifestInputBuilder
    {
        crate::operation::create_decoder_manifest::builders::CreateDecoderManifestInputBuilder::default()
    }
}

/// A builder for [`CreateDecoderManifestInput`](crate::operation::create_decoder_manifest::CreateDecoderManifestInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDecoderManifestInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) model_manifest_arn: std::option::Option<std::string::String>,
    pub(crate) signal_decoders: std::option::Option<std::vec::Vec<crate::types::SignalDecoder>>,
    pub(crate) network_interfaces:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDecoderManifestInputBuilder {
    /// <p> The unique name of the decoder manifest to create.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The unique name of the decoder manifest to create.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> A brief description of the decoder manifest. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> A brief description of the decoder manifest. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    pub fn model_manifest_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_manifest_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the vehicle model (model manifest). </p>
    pub fn set_model_manifest_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_manifest_arn = input;
        self
    }
    /// Appends an item to `signal_decoders`.
    ///
    /// To override the contents of this collection use [`set_signal_decoders`](Self::set_signal_decoders).
    ///
    /// <p> A list of information about signal decoders. </p>
    pub fn signal_decoders(mut self, input: crate::types::SignalDecoder) -> Self {
        let mut v = self.signal_decoders.unwrap_or_default();
        v.push(input);
        self.signal_decoders = Some(v);
        self
    }
    /// <p> A list of information about signal decoders. </p>
    pub fn set_signal_decoders(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SignalDecoder>>,
    ) -> Self {
        self.signal_decoders = input;
        self
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p> A list of information about available network interfaces. </p>
    pub fn network_interfaces(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = Some(v);
        self
    }
    /// <p> A list of information about available network interfaces. </p>
    pub fn set_network_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    ) -> Self {
        self.network_interfaces = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Metadata that can be used to manage the decoder manifest.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDecoderManifestInput`](crate::operation::create_decoder_manifest::CreateDecoderManifestInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_decoder_manifest::CreateDecoderManifestInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_decoder_manifest::CreateDecoderManifestInput {
                name: self.name,
                description: self.description,
                model_manifest_arn: self.model_manifest_arn,
                signal_decoders: self.signal_decoders,
                network_interfaces: self.network_interfaces,
                tags: self.tags,
            },
        )
    }
}
