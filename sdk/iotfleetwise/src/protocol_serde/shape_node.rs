// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_node(
    object_6: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Node,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::types::Node::Branch(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_6.key("branch").start_object();
            crate::protocol_serde::shape_branch::ser_branch(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::Node::Sensor(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_6.key("sensor").start_object();
            crate::protocol_serde::shape_sensor::ser_sensor(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::Node::Actuator(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_6.key("actuator").start_object();
            crate::protocol_serde::shape_actuator::ser_actuator(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::Node::Attribute(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_6.key("attribute").start_object();
            crate::protocol_serde::shape_attribute::ser_attribute(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::Node::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant("Node"),
            )
        }
    }
    Ok(())
}

pub(crate) fn de_node<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Node>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        if variant.is_some() {
                            return Err(
                                aws_smithy_json::deserialize::error::DeserializeError::custom(
                                    "encountered mixed variants in union",
                                ),
                            );
                        }
                        variant = match key.to_unescaped()?.as_ref() {
                            "branch" => {
                                Some(crate::types::Node::Branch(
                                    crate::protocol_serde::shape_branch::de_branch(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'branch' cannot be null"))?
                                ))
                            }
                            "sensor" => {
                                Some(crate::types::Node::Sensor(
                                    crate::protocol_serde::shape_sensor::de_sensor(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'sensor' cannot be null"))?
                                ))
                            }
                            "actuator" => {
                                Some(crate::types::Node::Actuator(
                                    crate::protocol_serde::shape_actuator::de_actuator(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'actuator' cannot be null"))?
                                ))
                            }
                            "attribute" => {
                                Some(crate::types::Node::Attribute(
                                    crate::protocol_serde::shape_attribute::de_attribute(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'attribute' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                      aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                      Some(crate::types::Node::Unknown)
                                                                    }
                        };
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
        }
        _ => {
            return Err(
                aws_smithy_json::deserialize::error::DeserializeError::custom(
                    "expected start object or null",
                ),
            )
        }
    }
    Ok(variant)
}
