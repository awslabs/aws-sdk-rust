// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_signal_decoder(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SignalDecoder,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("fullyQualifiedName").string(input.fully_qualified_name.as_str());
    }
    {
        object.key("type").string(input.r#type.as_str());
    }
    {
        object.key("interfaceId").string(input.interface_id.as_str());
    }
    if let Some(var_1) = &input.can_signal {
        #[allow(unused_mut)]
        let mut object_2 = object.key("canSignal").start_object();
        crate::protocol_serde::shape_can_signal::ser_can_signal(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.obd_signal {
        #[allow(unused_mut)]
        let mut object_4 = object.key("obdSignal").start_object();
        crate::protocol_serde::shape_obd_signal::ser_obd_signal(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.message_signal {
        #[allow(unused_mut)]
        let mut object_6 = object.key("messageSignal").start_object();
        crate::protocol_serde::shape_message_signal::ser_message_signal(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.custom_decoding_signal {
        #[allow(unused_mut)]
        let mut object_8 = object.key("customDecodingSignal").start_object();
        crate::protocol_serde::shape_custom_decoding_signal::ser_custom_decoding_signal(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}

pub(crate) fn de_signal_decoder<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SignalDecoder>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SignalDecoderBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "fullyQualifiedName" => {
                            builder = builder.set_fully_qualified_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SignalDecoderType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "interfaceId" => {
                            builder = builder.set_interface_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "canSignal" => {
                            builder = builder.set_can_signal(crate::protocol_serde::shape_can_signal::de_can_signal(tokens)?);
                        }
                        "obdSignal" => {
                            builder = builder.set_obd_signal(crate::protocol_serde::shape_obd_signal::de_obd_signal(tokens)?);
                        }
                        "messageSignal" => {
                            builder = builder.set_message_signal(crate::protocol_serde::shape_message_signal::de_message_signal(tokens)?);
                        }
                        "customDecodingSignal" => {
                            builder = builder
                                .set_custom_decoding_signal(crate::protocol_serde::shape_custom_decoding_signal::de_custom_decoding_signal(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::signal_decoder_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
