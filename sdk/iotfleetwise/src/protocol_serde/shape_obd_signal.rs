// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_obd_signal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ObdSignal,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("pidResponseLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pid_response_length).into()),
        );
    }
    {
        object.key("serviceMode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.service_mode).into()),
        );
    }
    {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if let Some(var_1) = &input.scaling {
        object.key("scaling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.offset {
        object.key("offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2).into()),
        );
    }
    {
        object.key("startByte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_byte).into()),
        );
    }
    if let Some(var_3) = &input.byte_length {
        object.key("byteLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if input.bit_right_shift != 0 {
        object.key("bitRightShift").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bit_right_shift).into()),
        );
    }
    if let Some(var_4) = &input.bit_mask_length {
        object.key("bitMaskLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_obd_signal<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::ObdSignal>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ObdSignalBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "pidResponseLength" => {
                                builder = builder.set_pid_response_length(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "serviceMode" => {
                                builder = builder.set_service_mode(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pid" => {
                                builder = builder.set_pid(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "scaling" => {
                                builder = builder.set_scaling(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "offset" => {
                                builder = builder.set_offset(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "startByte" => {
                                builder = builder.set_start_byte(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "byteLength" => {
                                builder = builder.set_byte_length(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bitRightShift" => {
                                builder = builder.set_bit_right_shift(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bitMaskLength" => {
                                builder = builder.set_bit_mask_length(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
