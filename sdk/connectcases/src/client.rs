// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Connect Cases
///
/// Client for invoking operations on Amazon Connect Cases. Each operation on Amazon Connect Cases is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_connectcases::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_connectcases::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_connectcases::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchGetField`](crate::client::fluent_builders::BatchGetField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::BatchGetField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::BatchGetField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::BatchGetField::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::BatchGetField::set_fields): <p>A list of unique field identifiers. </p>
    /// - On success, responds with [`BatchGetFieldOutput`](crate::output::BatchGetFieldOutput) with field(s):
    ///   - [`fields(Option<Vec<GetFieldResponse>>)`](crate::output::BatchGetFieldOutput::fields): <p>A list of detailed field information. </p>
    ///   - [`errors(Option<Vec<FieldError>>)`](crate::output::BatchGetFieldOutput::errors): <p>A list of field errors. </p>
    /// - On failure, responds with [`SdkError<BatchGetFieldError>`](crate::error::BatchGetFieldError)
    pub fn batch_get_field(&self) -> fluent_builders::BatchGetField {
        fluent_builders::BatchGetField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchPutFieldOptions`](crate::client::fluent_builders::BatchPutFieldOptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`options(Vec<FieldOption>)`](crate::client::fluent_builders::BatchPutFieldOptions::options) / [`set_options(Option<Vec<FieldOption>>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_options): <p>A list of <code>FieldOption</code> objects.</p>
    /// - On success, responds with [`BatchPutFieldOptionsOutput`](crate::output::BatchPutFieldOptionsOutput) with field(s):
    ///   - [`errors(Option<Vec<FieldOptionError>>)`](crate::output::BatchPutFieldOptionsOutput::errors): <p>A list of field errors. </p>
    /// - On failure, responds with [`SdkError<BatchPutFieldOptionsError>`](crate::error::BatchPutFieldOptionsError)
    pub fn batch_put_field_options(&self) -> fluent_builders::BatchPutFieldOptions {
        fluent_builders::BatchPutFieldOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCase`](crate::client::fluent_builders::CreateCase) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::CreateCase::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::CreateCase::set_template_id): <p>A unique identifier of a template.</p>
    ///   - [`fields(Vec<FieldValue>)`](crate::client::fluent_builders::CreateCase::fields) / [`set_fields(Option<Vec<FieldValue>>)`](crate::client::fluent_builders::CreateCase::set_fields): <p>An array of objects with field ID (matching ListFields/DescribeField) and value union data.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateCase::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateCase::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    /// - On success, responds with [`CreateCaseOutput`](crate::output::CreateCaseOutput) with field(s):
    ///   - [`case_id(Option<String>)`](crate::output::CreateCaseOutput::case_id): <p>A unique identifier of the case.</p>
    ///   - [`case_arn(Option<String>)`](crate::output::CreateCaseOutput::case_arn): <p>The Amazon Resource Name (ARN) of the case.</p>
    /// - On failure, responds with [`SdkError<CreateCaseError>`](crate::error::CreateCaseError)
    pub fn create_case(&self) -> fluent_builders::CreateCase {
        fluent_builders::CreateCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDomain`](crate::client::fluent_builders::CreateDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDomain::set_name): <p>The name for your Cases domain. It must be unique for your Amazon Web Services account.</p>
    /// - On success, responds with [`CreateDomainOutput`](crate::output::CreateDomainOutput) with field(s):
    ///   - [`domain_id(Option<String>)`](crate::output::CreateDomainOutput::domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`domain_arn(Option<String>)`](crate::output::CreateDomainOutput::domain_arn): <p>The Amazon Resource Name (ARN) for the Cases domain.</p>
    ///   - [`domain_status(Option<DomainStatus>)`](crate::output::CreateDomainOutput::domain_status): <p>The status of the domain.</p>
    /// - On failure, responds with [`SdkError<CreateDomainError>`](crate::error::CreateDomainError)
    pub fn create_domain(&self) -> fluent_builders::CreateDomain {
        fluent_builders::CreateDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateField`](crate::client::fluent_builders::CreateField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateField::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateField::set_name): <p>The name of the field.</p>
    ///   - [`r#type(FieldType)`](crate::client::fluent_builders::CreateField::type) / [`set_type(Option<FieldType>)`](crate::client::fluent_builders::CreateField::set_type): <p>Defines the data type, some system constraints, and default display of the field.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateField::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateField::set_description): <p>The description of the field.</p>
    /// - On success, responds with [`CreateFieldOutput`](crate::output::CreateFieldOutput) with field(s):
    ///   - [`field_id(Option<String>)`](crate::output::CreateFieldOutput::field_id): <p>The unique identifier of a field.</p>
    ///   - [`field_arn(Option<String>)`](crate::output::CreateFieldOutput::field_arn): <p>The Amazon Resource Name (ARN) of the field.</p>
    /// - On failure, responds with [`SdkError<CreateFieldError>`](crate::error::CreateFieldError)
    pub fn create_field(&self) -> fluent_builders::CreateField {
        fluent_builders::CreateField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLayout`](crate::client::fluent_builders::CreateLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateLayout::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateLayout::set_name): <p>The name of the layout. It must be unique for the Cases domain.</p>
    ///   - [`content(LayoutContent)`](crate::client::fluent_builders::CreateLayout::content) / [`set_content(Option<LayoutContent>)`](crate::client::fluent_builders::CreateLayout::set_content): <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    /// - On success, responds with [`CreateLayoutOutput`](crate::output::CreateLayoutOutput) with field(s):
    ///   - [`layout_id(Option<String>)`](crate::output::CreateLayoutOutput::layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`layout_arn(Option<String>)`](crate::output::CreateLayoutOutput::layout_arn): <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    /// - On failure, responds with [`SdkError<CreateLayoutError>`](crate::error::CreateLayoutError)
    pub fn create_layout(&self) -> fluent_builders::CreateLayout {
        fluent_builders::CreateLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRelatedItem`](crate::client::fluent_builders::CreateRelatedItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateRelatedItem::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateRelatedItem::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::CreateRelatedItem::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::CreateRelatedItem::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`r#type(RelatedItemType)`](crate::client::fluent_builders::CreateRelatedItem::type) / [`set_type(Option<RelatedItemType>)`](crate::client::fluent_builders::CreateRelatedItem::set_type): <p>The type of a related item.</p>
    ///   - [`content(RelatedItemInputContent)`](crate::client::fluent_builders::CreateRelatedItem::content) / [`set_content(Option<RelatedItemInputContent>)`](crate::client::fluent_builders::CreateRelatedItem::set_content): <p>The content of a related item to be created.</p>
    /// - On success, responds with [`CreateRelatedItemOutput`](crate::output::CreateRelatedItemOutput) with field(s):
    ///   - [`related_item_id(Option<String>)`](crate::output::CreateRelatedItemOutput::related_item_id): <p>The unique identifier of the related item.</p>
    ///   - [`related_item_arn(Option<String>)`](crate::output::CreateRelatedItemOutput::related_item_arn): <p>The Amazon Resource Name (ARN) of the related item.</p>
    /// - On failure, responds with [`SdkError<CreateRelatedItemError>`](crate::error::CreateRelatedItemError)
    pub fn create_related_item(&self) -> fluent_builders::CreateRelatedItem {
        fluent_builders::CreateRelatedItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTemplate`](crate::client::fluent_builders::CreateTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_name): <p>A name for the template. It must be unique per domain.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(LayoutConfiguration)`](crate::client::fluent_builders::CreateTemplate::layout_configuration) / [`set_layout_configuration(Option<LayoutConfiguration>)`](crate::client::fluent_builders::CreateTemplate::set_layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Vec<RequiredField>)`](crate::client::fluent_builders::CreateTemplate::required_fields) / [`set_required_fields(Option<Vec<RequiredField>>)`](crate::client::fluent_builders::CreateTemplate::set_required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`status(TemplateStatus)`](crate::client::fluent_builders::CreateTemplate::status) / [`set_status(Option<TemplateStatus>)`](crate::client::fluent_builders::CreateTemplate::set_status): <p>The status of the template.</p>
    /// - On success, responds with [`CreateTemplateOutput`](crate::output::CreateTemplateOutput) with field(s):
    ///   - [`template_id(Option<String>)`](crate::output::CreateTemplateOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`template_arn(Option<String>)`](crate::output::CreateTemplateOutput::template_arn): <p>The Amazon Resource Name (ARN) of the newly created template.</p>
    /// - On failure, responds with [`SdkError<CreateTemplateError>`](crate::error::CreateTemplateError)
    pub fn create_template(&self) -> fluent_builders::CreateTemplate {
        fluent_builders::CreateTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCase`](crate::client::fluent_builders::GetCase) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCase::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::GetCase::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::GetCase::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::GetCase::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::GetCase::set_fields): <p>A list of unique field identifiers. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCase::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCase::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`GetCaseOutput`](crate::output::GetCaseOutput) with field(s):
    ///   - [`fields(Option<Vec<FieldValue>>)`](crate::output::GetCaseOutput::fields): <p>A list of detailed field information. </p>
    ///   - [`template_id(Option<String>)`](crate::output::GetCaseOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCaseOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetCaseOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetCaseError>`](crate::error::GetCaseError)
    pub fn get_case(&self) -> fluent_builders::GetCase {
        fluent_builders::GetCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCaseEventConfiguration`](crate::client::fluent_builders::GetCaseEventConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetCaseEventConfiguration::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetCaseEventConfiguration::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    /// - On success, responds with [`GetCaseEventConfigurationOutput`](crate::output::GetCaseEventConfigurationOutput) with field(s):
    ///   - [`event_bridge(Option<EventBridgeConfiguration>)`](crate::output::GetCaseEventConfigurationOutput::event_bridge): <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
    /// - On failure, responds with [`SdkError<GetCaseEventConfigurationError>`](crate::error::GetCaseEventConfigurationError)
    pub fn get_case_event_configuration(&self) -> fluent_builders::GetCaseEventConfiguration {
        fluent_builders::GetCaseEventConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDomain`](crate::client::fluent_builders::GetDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetDomain::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetDomain::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    /// - On success, responds with [`GetDomainOutput`](crate::output::GetDomainOutput) with field(s):
    ///   - [`domain_id(Option<String>)`](crate::output::GetDomainOutput::domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`domain_arn(Option<String>)`](crate::output::GetDomainOutput::domain_arn): <p>The Amazon Resource Name (ARN) for the Cases domain.</p>
    ///   - [`name(Option<String>)`](crate::output::GetDomainOutput::name): <p>The name of the Cases domain.</p>
    ///   - [`created_time(Option<DateTime>)`](crate::output::GetDomainOutput::created_time): <p>The timestamp when the Cases domain was created.</p>
    ///   - [`domain_status(Option<DomainStatus>)`](crate::output::GetDomainOutput::domain_status): <p>The status of the Cases domain.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetDomainOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetDomainError>`](crate::error::GetDomainError)
    pub fn get_domain(&self) -> fluent_builders::GetDomain {
        fluent_builders::GetDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLayout`](crate::client::fluent_builders::GetLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`layout_id(impl Into<String>)`](crate::client::fluent_builders::GetLayout::layout_id) / [`set_layout_id(Option<String>)`](crate::client::fluent_builders::GetLayout::set_layout_id): <p>The unique identifier of the layout.</p>
    /// - On success, responds with [`GetLayoutOutput`](crate::output::GetLayoutOutput) with field(s):
    ///   - [`layout_id(Option<String>)`](crate::output::GetLayoutOutput::layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`layout_arn(Option<String>)`](crate::output::GetLayoutOutput::layout_arn): <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    ///   - [`name(Option<String>)`](crate::output::GetLayoutOutput::name): <p>The name of the layout. It must be unique.</p>
    ///   - [`content(Option<LayoutContent>)`](crate::output::GetLayoutOutput::content): <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetLayoutOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetLayoutError>`](crate::error::GetLayoutError)
    pub fn get_layout(&self) -> fluent_builders::GetLayout {
        fluent_builders::GetLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTemplate`](crate::client::fluent_builders::GetTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::GetTemplate::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::GetTemplate::set_template_id): <p>A unique identifier of a template.</p>
    /// - On success, responds with [`GetTemplateOutput`](crate::output::GetTemplateOutput) with field(s):
    ///   - [`template_id(Option<String>)`](crate::output::GetTemplateOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`template_arn(Option<String>)`](crate::output::GetTemplateOutput::template_arn): <p>The Amazon Resource Name (ARN) of the template.</p>
    ///   - [`name(Option<String>)`](crate::output::GetTemplateOutput::name): <p>The name of the template.</p>
    ///   - [`description(Option<String>)`](crate::output::GetTemplateOutput::description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(Option<LayoutConfiguration>)`](crate::output::GetTemplateOutput::layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Option<Vec<RequiredField>>)`](crate::output::GetTemplateOutput::required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetTemplateOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    ///   - [`status(Option<TemplateStatus>)`](crate::output::GetTemplateOutput::status): <p>The status of the template.</p>
    /// - On failure, responds with [`SdkError<GetTemplateError>`](crate::error::GetTemplateError)
    pub fn get_template(&self) -> fluent_builders::GetTemplate {
        fluent_builders::GetTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCasesForContact`](crate::client::fluent_builders::ListCasesForContact) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCasesForContact::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`contact_arn(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::contact_arn) / [`set_contact_arn(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_contact_arn): <p>A unique identifier of a contact in Amazon Connect.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCasesForContact::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCasesForContact::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListCasesForContactOutput`](crate::output::ListCasesForContactOutput) with field(s):
    ///   - [`cases(Option<Vec<CaseSummary>>)`](crate::output::ListCasesForContactOutput::cases): <p>A list of Case summary information.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCasesForContactOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListCasesForContactError>`](crate::error::ListCasesForContactError)
    pub fn list_cases_for_contact(&self) -> fluent_builders::ListCasesForContact {
        fluent_builders::ListCasesForContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomains`](crate::client::fluent_builders::ListDomains) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDomains::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDomains::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDomains::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDomains::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDomains::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListDomainsOutput`](crate::output::ListDomainsOutput) with field(s):
    ///   - [`domains(Option<Vec<DomainSummary>>)`](crate::output::ListDomainsOutput::domains): <p>The Cases domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDomainsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListDomainsError>`](crate::error::ListDomainsError)
    pub fn list_domains(&self) -> fluent_builders::ListDomains {
        fluent_builders::ListDomains::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFieldOptions`](crate::client::fluent_builders::ListFieldOptions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFieldOptions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFieldOptions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFieldOptions::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`values(Vec<String>)`](crate::client::fluent_builders::ListFieldOptions::values) / [`set_values(Option<Vec<String>>)`](crate::client::fluent_builders::ListFieldOptions::set_values): <p>A list of <code>FieldOption</code> values to filter on for <code>ListFieldOptions</code>.</p>
    /// - On success, responds with [`ListFieldOptionsOutput`](crate::output::ListFieldOptionsOutput) with field(s):
    ///   - [`options(Option<Vec<FieldOption>>)`](crate::output::ListFieldOptionsOutput::options): <p>A list of <code>FieldOption</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFieldOptionsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListFieldOptionsError>`](crate::error::ListFieldOptionsError)
    pub fn list_field_options(&self) -> fluent_builders::ListFieldOptions {
        fluent_builders::ListFieldOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFields`](crate::client::fluent_builders::ListFields) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFields::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListFields::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListFields::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFields::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFields::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFields::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFields::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListFieldsOutput`](crate::output::ListFieldsOutput) with field(s):
    ///   - [`fields(Option<Vec<FieldSummary>>)`](crate::output::ListFieldsOutput::fields): <p>List of detailed field information.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFieldsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListFieldsError>`](crate::error::ListFieldsError)
    pub fn list_fields(&self) -> fluent_builders::ListFields {
        fluent_builders::ListFields::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLayouts`](crate::client::fluent_builders::ListLayouts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLayouts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListLayouts::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListLayouts::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLayouts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLayouts::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLayouts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLayouts::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListLayoutsOutput`](crate::output::ListLayoutsOutput) with field(s):
    ///   - [`layouts(Option<Vec<LayoutSummary>>)`](crate::output::ListLayoutsOutput::layouts): <p>The layouts for the domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLayoutsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListLayoutsError>`](crate::error::ListLayoutsError)
    pub fn list_layouts(&self) -> fluent_builders::ListLayouts {
        fluent_builders::ListLayouts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTemplates`](crate::client::fluent_builders::ListTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListTemplates::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListTemplates::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTemplates::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTemplates::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`status(Vec<TemplateStatus>)`](crate::client::fluent_builders::ListTemplates::status) / [`set_status(Option<Vec<TemplateStatus>>)`](crate::client::fluent_builders::ListTemplates::set_status): <p>A list of status values to filter on.</p>
    /// - On success, responds with [`ListTemplatesOutput`](crate::output::ListTemplatesOutput) with field(s):
    ///   - [`templates(Option<Vec<TemplateSummary>>)`](crate::output::ListTemplatesOutput::templates): <p>List of template summary objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTemplatesOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListTemplatesError>`](crate::error::ListTemplatesError)
    pub fn list_templates(&self) -> fluent_builders::ListTemplates {
        fluent_builders::ListTemplates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutCaseEventConfiguration`](crate::client::fluent_builders::PutCaseEventConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::PutCaseEventConfiguration::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::PutCaseEventConfiguration::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`event_bridge(EventBridgeConfiguration)`](crate::client::fluent_builders::PutCaseEventConfiguration::event_bridge) / [`set_event_bridge(Option<EventBridgeConfiguration>)`](crate::client::fluent_builders::PutCaseEventConfiguration::set_event_bridge): <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
    /// - On success, responds with [`PutCaseEventConfigurationOutput`](crate::output::PutCaseEventConfigurationOutput)

    /// - On failure, responds with [`SdkError<PutCaseEventConfigurationError>`](crate::error::PutCaseEventConfigurationError)
    pub fn put_case_event_configuration(&self) -> fluent_builders::PutCaseEventConfiguration {
        fluent_builders::PutCaseEventConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SearchCases`](crate::client::fluent_builders::SearchCases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchCases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::SearchCases::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::SearchCases::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchCases::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchCases::set_max_results): <p>The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchCases::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchCases::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`search_term(impl Into<String>)`](crate::client::fluent_builders::SearchCases::search_term) / [`set_search_term(Option<String>)`](crate::client::fluent_builders::SearchCases::set_search_term): <p>A word or phrase used to perform a quick search.</p>
    ///   - [`filter(CaseFilter)`](crate::client::fluent_builders::SearchCases::filter) / [`set_filter(Option<CaseFilter>)`](crate::client::fluent_builders::SearchCases::set_filter): <p>A list of filter objects.</p>
    ///   - [`sorts(Vec<Sort>)`](crate::client::fluent_builders::SearchCases::sorts) / [`set_sorts(Option<Vec<Sort>>)`](crate::client::fluent_builders::SearchCases::set_sorts): <p>A list of sorts where each sort specifies a field and their sort order to be applied to the results. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::SearchCases::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::SearchCases::set_fields): <p>The list of field identifiers to be returned as part of the response.</p>
    /// - On success, responds with [`SearchCasesOutput`](crate::output::SearchCasesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::SearchCasesOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`cases(Option<Vec<Option<SearchCasesResponseItem>>>)`](crate::output::SearchCasesOutput::cases): <p>A list of case documents where each case contains the properties <code>CaseId</code> and <code>Fields</code> where each field is a complex union structure. </p>
    /// - On failure, responds with [`SdkError<SearchCasesError>`](crate::error::SearchCasesError)
    pub fn search_cases(&self) -> fluent_builders::SearchCases {
        fluent_builders::SearchCases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SearchRelatedItems`](crate::client::fluent_builders::SearchRelatedItems) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchRelatedItems::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchRelatedItems::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchRelatedItems::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`filters(Vec<RelatedItemTypeFilter>)`](crate::client::fluent_builders::SearchRelatedItems::filters) / [`set_filters(Option<Vec<RelatedItemTypeFilter>>)`](crate::client::fluent_builders::SearchRelatedItems::set_filters): <p>The list of types of related items and their parameters to use for filtering.</p>
    /// - On success, responds with [`SearchRelatedItemsOutput`](crate::output::SearchRelatedItemsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::SearchRelatedItemsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`related_items(Option<Vec<Option<SearchRelatedItemsResponseItem>>>)`](crate::output::SearchRelatedItemsOutput::related_items): <p>A list of items related to a case. </p>
    /// - On failure, responds with [`SdkError<SearchRelatedItemsError>`](crate::error::SearchRelatedItemsError)
    pub fn search_related_items(&self) -> fluent_builders::SearchRelatedItems {
        fluent_builders::SearchRelatedItems::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    ///   - [`tags(HashMap<String, Option<String>>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, Option<String>>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>List of tag keys.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCase`](crate::client::fluent_builders::UpdateCase) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCase::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::UpdateCase::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`fields(Vec<FieldValue>)`](crate::client::fluent_builders::UpdateCase::fields) / [`set_fields(Option<Vec<FieldValue>>)`](crate::client::fluent_builders::UpdateCase::set_fields): <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    /// - On success, responds with [`UpdateCaseOutput`](crate::output::UpdateCaseOutput)

    /// - On failure, responds with [`SdkError<UpdateCaseError>`](crate::error::UpdateCaseError)
    pub fn update_case(&self) -> fluent_builders::UpdateCase {
        fluent_builders::UpdateCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateField`](crate::client::fluent_builders::UpdateField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::UpdateField::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::UpdateField::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateField::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateField::set_name): <p>The name of the field.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateField::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateField::set_description): <p>The description of a field.</p>
    /// - On success, responds with [`UpdateFieldOutput`](crate::output::UpdateFieldOutput)

    /// - On failure, responds with [`SdkError<UpdateFieldError>`](crate::error::UpdateFieldError)
    pub fn update_field(&self) -> fluent_builders::UpdateField {
        fluent_builders::UpdateField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLayout`](crate::client::fluent_builders::UpdateLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`layout_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::layout_id) / [`set_layout_id(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_name): <p>The name of the layout. It must be unique per domain.</p>
    ///   - [`content(LayoutContent)`](crate::client::fluent_builders::UpdateLayout::content) / [`set_content(Option<LayoutContent>)`](crate::client::fluent_builders::UpdateLayout::set_content): <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
    /// - On success, responds with [`UpdateLayoutOutput`](crate::output::UpdateLayoutOutput)

    /// - On failure, responds with [`SdkError<UpdateLayoutError>`](crate::error::UpdateLayoutError)
    pub fn update_layout(&self) -> fluent_builders::UpdateLayout {
        fluent_builders::UpdateLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTemplate`](crate::client::fluent_builders::UpdateTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_template_id): <p>A unique identifier for the template.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_name): <p>The name of the template. It must be unique per domain.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(LayoutConfiguration)`](crate::client::fluent_builders::UpdateTemplate::layout_configuration) / [`set_layout_configuration(Option<LayoutConfiguration>)`](crate::client::fluent_builders::UpdateTemplate::set_layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Vec<RequiredField>)`](crate::client::fluent_builders::UpdateTemplate::required_fields) / [`set_required_fields(Option<Vec<RequiredField>>)`](crate::client::fluent_builders::UpdateTemplate::set_required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`status(TemplateStatus)`](crate::client::fluent_builders::UpdateTemplate::status) / [`set_status(Option<TemplateStatus>)`](crate::client::fluent_builders::UpdateTemplate::set_status): <p>The status of the template.</p>
    /// - On success, responds with [`UpdateTemplateOutput`](crate::output::UpdateTemplateOutput)

    /// - On failure, responds with [`SdkError<UpdateTemplateError>`](crate::error::UpdateTemplateError)
    pub fn update_template(&self) -> fluent_builders::UpdateTemplate {
        fluent_builders::UpdateTemplate::new(self.handle.clone())
    }
}
pub mod fluent_builders {

    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `BatchGetField`.
    ///
    /// <p>Returns the description for the list of fields in the request parameters. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct BatchGetField {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::batch_get_field_input::Builder,
    }
    impl BatchGetField {
        /// Creates a new `BatchGetField`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::BatchGetField,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::BatchGetFieldError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchGetFieldOutput,
            aws_smithy_http::result::SdkError<crate::error::BatchGetFieldError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// Appends an item to `fields`.
        ///
        /// To override the contents of this collection use [`set_fields`](Self::set_fields).
        ///
        /// <p>A list of unique field identifiers. </p>
        pub fn fields(mut self, input: crate::model::FieldIdentifier) -> Self {
            self.inner = self.inner.fields(input);
            self
        }
        /// <p>A list of unique field identifiers. </p>
        pub fn set_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldIdentifier>>,
        ) -> Self {
            self.inner = self.inner.set_fields(input);
            self
        }
    }
    /// Fluent builder constructing a request to `BatchPutFieldOptions`.
    ///
    /// <p>Creates and updates a set of field options for a single select field in a Cases domain.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct BatchPutFieldOptions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::batch_put_field_options_input::Builder,
    }
    impl BatchPutFieldOptions {
        /// Creates a new `BatchPutFieldOptions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::BatchPutFieldOptions,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::BatchPutFieldOptionsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchPutFieldOptionsOutput,
            aws_smithy_http::result::SdkError<crate::error::BatchPutFieldOptionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.field_id(input.into());
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_field_id(input);
            self
        }
        /// Appends an item to `options`.
        ///
        /// To override the contents of this collection use [`set_options`](Self::set_options).
        ///
        /// <p>A list of <code>FieldOption</code> objects.</p>
        pub fn options(mut self, input: crate::model::FieldOption) -> Self {
            self.inner = self.inner.options(input);
            self
        }
        /// <p>A list of <code>FieldOption</code> objects.</p>
        pub fn set_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldOption>>,
        ) -> Self {
            self.inner = self.inner.set_options(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateCase`.
    ///
    /// <p>Creates a case in the specified Cases domain. Case system and custom fields are taken as an array id/value pairs with a declared data types.</p> <note>
    /// <p> <code>customer_id</code> is a required field when creating a case.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateCase {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_case_input::Builder,
    }
    impl CreateCase {
        /// Creates a new `CreateCase`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateCase,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateCaseError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateCaseOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateCaseError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of a template.</p>
        pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_id(input.into());
            self
        }
        /// <p>A unique identifier of a template.</p>
        pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_id(input);
            self
        }
        /// Appends an item to `fields`.
        ///
        /// To override the contents of this collection use [`set_fields`](Self::set_fields).
        ///
        /// <p>An array of objects with field ID (matching ListFields/DescribeField) and value union data.</p>
        pub fn fields(mut self, input: crate::model::FieldValue) -> Self {
            self.inner = self.inner.fields(input);
            self
        }
        /// <p>An array of objects with field ID (matching ListFields/DescribeField) and value union data.</p>
        pub fn set_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldValue>>,
        ) -> Self {
            self.inner = self.inner.set_fields(input);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input.into());
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateDomain`.
    ///
    /// <p>Creates a domain, which is a container for all case data, such as cases, fields, templates and layouts. Each Amazon Connect instance can be associated with only one Cases domain.</p> <important>
    /// <p>This will not associate your connect instance to Cases domain. Instead, use the Amazon Connect <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateIntegrationAssociation.html">CreateIntegrationAssociation</a> API.</p>
    /// </important>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateDomain {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_domain_input::Builder,
    }
    impl CreateDomain {
        /// Creates a new `CreateDomain`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateDomain,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateDomainError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDomainOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateDomainError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name for your Cases domain. It must be unique for your Amazon Web Services account.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name for your Cases domain. It must be unique for your Amazon Web Services account.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateField`.
    ///
    /// <p>Creates a field in the Cases domain. This field is used to define the case object model (that is, defines what data can be captured on cases) in a Cases domain. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateField {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_field_input::Builder,
    }
    impl CreateField {
        /// Creates a new `CreateField`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateField,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateFieldError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateFieldOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateFieldError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The name of the field.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the field.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Defines the data type, some system constraints, and default display of the field.</p>
        pub fn r#type(mut self, input: crate::model::FieldType) -> Self {
            self.inner = self.inner.r#type(input);
            self
        }
        /// <p>Defines the data type, some system constraints, and default display of the field.</p>
        pub fn set_type(mut self, input: std::option::Option<crate::model::FieldType>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>The description of the field.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>The description of the field.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateLayout`.
    ///
    /// <p>Creates a layout in the Cases domain. Layouts define the following configuration in the top section and More Info tab of the Cases user interface:</p>
    /// <ul>
    /// <li> <p>Fields to display to the users</p> </li>
    /// <li> <p>Field ordering</p> </li>
    /// </ul> <note>
    /// <p>Title and Status fields cannot be part of layouts since they are not configurable.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateLayout {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_layout_input::Builder,
    }
    impl CreateLayout {
        /// Creates a new `CreateLayout`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateLayout,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateLayoutError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateLayoutOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateLayoutError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The name of the layout. It must be unique for the Cases domain.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the layout. It must be unique for the Cases domain.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
        pub fn content(mut self, input: crate::model::LayoutContent) -> Self {
            self.inner = self.inner.content(input);
            self
        }
        /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
        pub fn set_content(
            mut self,
            input: std::option::Option<crate::model::LayoutContent>,
        ) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateRelatedItem`.
    ///
    /// <p>Creates a related item (comments, tasks, and contacts) and associates it with a case.</p> <note>
    /// <p>A Related Item is a resource that is associated with a case. It may or may not have an external identifier linking it to an external resource (for example, a <code>contactArn</code>). All Related Items have their own internal identifier, the <code>relatedItemArn</code>. Examples of related items include <code>comments</code> and <code>contacts</code>.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateRelatedItem {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_related_item_input::Builder,
    }
    impl CreateRelatedItem {
        /// Creates a new `CreateRelatedItem`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateRelatedItem,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateRelatedItemError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRelatedItemOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateRelatedItemError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn case_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(input.into());
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// <p>The type of a related item.</p>
        pub fn r#type(mut self, input: crate::model::RelatedItemType) -> Self {
            self.inner = self.inner.r#type(input);
            self
        }
        /// <p>The type of a related item.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::RelatedItemType>,
        ) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>The content of a related item to be created.</p>
        pub fn content(mut self, input: crate::model::RelatedItemInputContent) -> Self {
            self.inner = self.inner.content(input);
            self
        }
        /// <p>The content of a related item to be created.</p>
        pub fn set_content(
            mut self,
            input: std::option::Option<crate::model::RelatedItemInputContent>,
        ) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateTemplate`.
    ///
    /// <p>Creates a template in the Cases domain. This template is used to define the case object model (that is, to define what data can be captured on cases) in a Cases domain. A template must have a unique name within a domain, and it must reference existing field IDs and layout IDs. Additionally, multiple fields with same IDs are not allowed within the same Template. A template can be either Active or Inactive, as indicated by its status. Inactive templates cannot be used to create cases.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateTemplate {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_template_input::Builder,
    }
    impl CreateTemplate {
        /// Creates a new `CreateTemplate`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateTemplate,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateTemplateError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateTemplateOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateTemplateError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A name for the template. It must be unique per domain.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>A name for the template. It must be unique per domain.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A brief description of the template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>A brief description of the template.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Configuration of layouts associated to the template.</p>
        pub fn layout_configuration(mut self, input: crate::model::LayoutConfiguration) -> Self {
            self.inner = self.inner.layout_configuration(input);
            self
        }
        /// <p>Configuration of layouts associated to the template.</p>
        pub fn set_layout_configuration(
            mut self,
            input: std::option::Option<crate::model::LayoutConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_layout_configuration(input);
            self
        }
        /// Appends an item to `requiredFields`.
        ///
        /// To override the contents of this collection use [`set_required_fields`](Self::set_required_fields).
        ///
        /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
        pub fn required_fields(mut self, input: crate::model::RequiredField) -> Self {
            self.inner = self.inner.required_fields(input);
            self
        }
        /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
        pub fn set_required_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RequiredField>>,
        ) -> Self {
            self.inner = self.inner.set_required_fields(input);
            self
        }
        /// <p>The status of the template.</p>
        pub fn status(mut self, input: crate::model::TemplateStatus) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        /// <p>The status of the template.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCase`.
    ///
    /// <p>Returns information about a specific case if it exists. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetCase {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_case_input::Builder,
    }
    impl GetCase {
        /// Creates a new `GetCase`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetCase,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetCaseError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCaseOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCaseError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::GetCasePaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::GetCasePaginator {
            crate::paginator::GetCasePaginator::new(self.handle, self.inner)
        }
        /// <p>A unique identifier of the case.</p>
        pub fn case_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(input.into());
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// Appends an item to `fields`.
        ///
        /// To override the contents of this collection use [`set_fields`](Self::set_fields).
        ///
        /// <p>A list of unique field identifiers. </p>
        pub fn fields(mut self, input: crate::model::FieldIdentifier) -> Self {
            self.inner = self.inner.fields(input);
            self
        }
        /// <p>A list of unique field identifiers. </p>
        pub fn set_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldIdentifier>>,
        ) -> Self {
            self.inner = self.inner.set_fields(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCaseEventConfiguration`.
    ///
    /// <p>Returns the case event publishing configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetCaseEventConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_case_event_configuration_input::Builder,
    }
    impl GetCaseEventConfiguration {
        /// Creates a new `GetCaseEventConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetCaseEventConfiguration,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetCaseEventConfigurationError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCaseEventConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCaseEventConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetDomain`.
    ///
    /// <p>Returns information about a specific domain if it exists. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetDomain {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_domain_input::Builder,
    }
    impl GetDomain {
        /// Creates a new `GetDomain`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetDomain,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetDomainError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDomainOutput,
            aws_smithy_http::result::SdkError<crate::error::GetDomainError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetLayout`.
    ///
    /// <p>Returns the details for the requested layout.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetLayout {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_layout_input::Builder,
    }
    impl GetLayout {
        /// Creates a new `GetLayout`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetLayout,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetLayoutError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetLayoutOutput,
            aws_smithy_http::result::SdkError<crate::error::GetLayoutError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The unique identifier of the layout.</p>
        pub fn layout_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layout_id(input.into());
            self
        }
        /// <p>The unique identifier of the layout.</p>
        pub fn set_layout_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layout_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetTemplate`.
    ///
    /// <p>Returns the details for the requested template. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetTemplate {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_template_input::Builder,
    }
    impl GetTemplate {
        /// Creates a new `GetTemplate`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetTemplate,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetTemplateError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetTemplateOutput,
            aws_smithy_http::result::SdkError<crate::error::GetTemplateError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of a template.</p>
        pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_id(input.into());
            self
        }
        /// <p>A unique identifier of a template.</p>
        pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListCasesForContact`.
    ///
    /// <p>Lists cases for a given contact.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListCasesForContact {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_cases_for_contact_input::Builder,
    }
    impl ListCasesForContact {
        /// Creates a new `ListCasesForContact`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListCasesForContact,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListCasesForContactError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCasesForContactOutput,
            aws_smithy_http::result::SdkError<crate::error::ListCasesForContactError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListCasesForContactPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListCasesForContactPaginator {
            crate::paginator::ListCasesForContactPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of a contact in Amazon Connect.</p>
        pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.contact_arn(input.into());
            self
        }
        /// <p>A unique identifier of a contact in Amazon Connect.</p>
        pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_contact_arn(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListDomains`.
    ///
    /// <p>Lists all cases domains in the Amazon Web Services account. Each list item is a condensed summary object of the domain.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListDomains {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_domains_input::Builder,
    }
    impl ListDomains {
        /// Creates a new `ListDomains`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListDomains,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListDomainsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDomainsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListDomainsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListDomainsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListDomainsPaginator {
            crate::paginator::ListDomainsPaginator::new(self.handle, self.inner)
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListFieldOptions`.
    ///
    /// <p>Lists all of the field options for a field identifier in the domain. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListFieldOptions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_field_options_input::Builder,
    }
    impl ListFieldOptions {
        /// Creates a new `ListFieldOptions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListFieldOptions,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListFieldOptionsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListFieldOptionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListFieldOptionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListFieldOptionsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListFieldOptionsPaginator {
            crate::paginator::ListFieldOptionsPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.field_id(input.into());
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_field_id(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// Appends an item to `values`.
        ///
        /// To override the contents of this collection use [`set_values`](Self::set_values).
        ///
        /// <p>A list of <code>FieldOption</code> values to filter on for <code>ListFieldOptions</code>.</p>
        pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.values(input.into());
            self
        }
        /// <p>A list of <code>FieldOption</code> values to filter on for <code>ListFieldOptions</code>.</p>
        pub fn set_values(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_values(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListFields`.
    ///
    /// <p>Lists all fields in a Cases domain.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListFields {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_fields_input::Builder,
    }
    impl ListFields {
        /// Creates a new `ListFields`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListFields,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListFieldsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListFieldsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListFieldsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListFieldsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListFieldsPaginator {
            crate::paginator::ListFieldsPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListLayouts`.
    ///
    /// <p>Lists all layouts in the given cases domain. Each list item is a condensed summary object of the layout.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListLayouts {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_layouts_input::Builder,
    }
    impl ListLayouts {
        /// Creates a new `ListLayouts`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListLayouts,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListLayoutsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListLayoutsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListLayoutsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListLayoutsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListLayoutsPaginator {
            crate::paginator::ListLayoutsPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Lists tags for a resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListTagsForResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTemplates`.
    ///
    /// <p>Lists all of the templates in a Cases domain. Each list item is a condensed summary object of the template. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTemplates {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_templates_input::Builder,
    }
    impl ListTemplates {
        /// Creates a new `ListTemplates`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListTemplates,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListTemplatesError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTemplatesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTemplatesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListTemplatesPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListTemplatesPaginator {
            crate::paginator::ListTemplatesPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// Appends an item to `status`.
        ///
        /// To override the contents of this collection use [`set_status`](Self::set_status).
        ///
        /// <p>A list of status values to filter on.</p>
        pub fn status(mut self, input: crate::model::TemplateStatus) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        /// <p>A list of status values to filter on.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TemplateStatus>>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutCaseEventConfiguration`.
    ///
    /// <p>API for adding case event publishing configuration</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct PutCaseEventConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_case_event_configuration_input::Builder,
    }
    impl PutCaseEventConfiguration {
        /// Creates a new `PutCaseEventConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::PutCaseEventConfiguration,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::PutCaseEventConfigurationError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutCaseEventConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::PutCaseEventConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
        pub fn event_bridge(mut self, input: crate::model::EventBridgeConfiguration) -> Self {
            self.inner = self.inner.event_bridge(input);
            self
        }
        /// <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
        pub fn set_event_bridge(
            mut self,
            input: std::option::Option<crate::model::EventBridgeConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_event_bridge(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SearchCases`.
    ///
    /// <p>Searches for cases within their associated Cases domain. Search results are returned as a paginated list of abridged case documents.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct SearchCases {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::search_cases_input::Builder,
    }
    impl SearchCases {
        /// Creates a new `SearchCases`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::SearchCases,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::SearchCasesError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SearchCasesOutput,
            aws_smithy_http::result::SdkError<crate::error::SearchCasesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::SearchCasesPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::SearchCasesPaginator {
            crate::paginator::SearchCasesPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>A word or phrase used to perform a quick search.</p>
        pub fn search_term(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.search_term(input.into());
            self
        }
        /// <p>A word or phrase used to perform a quick search.</p>
        pub fn set_search_term(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_search_term(input);
            self
        }
        /// <p>A list of filter objects.</p>
        pub fn filter(mut self, input: crate::model::CaseFilter) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        /// <p>A list of filter objects.</p>
        pub fn set_filter(mut self, input: std::option::Option<crate::model::CaseFilter>) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// Appends an item to `sorts`.
        ///
        /// To override the contents of this collection use [`set_sorts`](Self::set_sorts).
        ///
        /// <p>A list of sorts where each sort specifies a field and their sort order to be applied to the results. </p>
        pub fn sorts(mut self, input: crate::model::Sort) -> Self {
            self.inner = self.inner.sorts(input);
            self
        }
        /// <p>A list of sorts where each sort specifies a field and their sort order to be applied to the results. </p>
        pub fn set_sorts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Sort>>,
        ) -> Self {
            self.inner = self.inner.set_sorts(input);
            self
        }
        /// Appends an item to `fields`.
        ///
        /// To override the contents of this collection use [`set_fields`](Self::set_fields).
        ///
        /// <p>The list of field identifiers to be returned as part of the response.</p>
        pub fn fields(mut self, input: crate::model::FieldIdentifier) -> Self {
            self.inner = self.inner.fields(input);
            self
        }
        /// <p>The list of field identifiers to be returned as part of the response.</p>
        pub fn set_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldIdentifier>>,
        ) -> Self {
            self.inner = self.inner.set_fields(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SearchRelatedItems`.
    ///
    /// <p>Searches for related items that are associated with a case.</p> <note>
    /// <p>If no filters are provided, this returns all related items associated with a case.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct SearchRelatedItems {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::search_related_items_input::Builder,
    }
    impl SearchRelatedItems {
        /// Creates a new `SearchRelatedItems`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::SearchRelatedItems,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::SearchRelatedItemsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SearchRelatedItemsOutput,
            aws_smithy_http::result::SdkError<crate::error::SearchRelatedItemsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::SearchRelatedItemsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::SearchRelatedItemsPaginator {
            crate::paginator::SearchRelatedItemsPaginator::new(self.handle, self.inner)
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn case_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(input.into());
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return per page.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// Appends an item to `filters`.
        ///
        /// To override the contents of this collection use [`set_filters`](Self::set_filters).
        ///
        /// <p>The list of types of related items and their parameters to use for filtering.</p>
        pub fn filters(mut self, input: crate::model::RelatedItemTypeFilter) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        /// <p>The list of types of related items and their parameters to use for filtering.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RelatedItemTypeFilter>>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Adds tags to a resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::TagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k.into(), v);
            self
        }
        /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    std::string::String,
                    std::option::Option<std::string::String>,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Untags a resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UntagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
        /// Appends an item to `tagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>List of tag keys.</p>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>List of tag keys.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateCase`.
    ///
    /// <p>Updates the values of fields on a case. Fields to be updated are received as an array of id/value pairs identical to the <code>CreateCase</code> input .</p>
    /// <p>If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateCase {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_case_input::Builder,
    }
    impl UpdateCase {
        /// Creates a new `UpdateCase`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateCase,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateCaseError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateCaseOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateCaseError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn case_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(input.into());
            self
        }
        /// <p>A unique identifier of the case.</p>
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// Appends an item to `fields`.
        ///
        /// To override the contents of this collection use [`set_fields`](Self::set_fields).
        ///
        /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
        pub fn fields(mut self, input: crate::model::FieldValue) -> Self {
            self.inner = self.inner.fields(input);
            self
        }
        /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
        pub fn set_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FieldValue>>,
        ) -> Self {
            self.inner = self.inner.set_fields(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateField`.
    ///
    /// <p>Updates the properties of an existing field. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateField {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_field_input::Builder,
    }
    impl UpdateField {
        /// Creates a new `UpdateField`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateField,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateFieldError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateFieldOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateFieldError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.field_id(input.into());
            self
        }
        /// <p>The unique identifier of a field.</p>
        pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_field_id(input);
            self
        }
        /// <p>The name of the field.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the field.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The description of a field.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>The description of a field.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateLayout`.
    ///
    /// <p>Updates the attributes of an existing layout.</p>
    /// <p>If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.</p>
    /// <p>A <code>ValidationException</code> is returned when you add non-existent <code>fieldIds</code> to a layout.</p> <note>
    /// <p>Title and Status fields cannot be part of layouts because they are not configurable.</p>
    /// </note>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateLayout {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_layout_input::Builder,
    }
    impl UpdateLayout {
        /// Creates a new `UpdateLayout`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateLayout,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateLayoutError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateLayoutOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateLayoutError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>The unique identifier of the layout.</p>
        pub fn layout_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layout_id(input.into());
            self
        }
        /// <p>The unique identifier of the layout.</p>
        pub fn set_layout_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layout_id(input);
            self
        }
        /// <p>The name of the layout. It must be unique per domain.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the layout. It must be unique per domain.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
        pub fn content(mut self, input: crate::model::LayoutContent) -> Self {
            self.inner = self.inner.content(input);
            self
        }
        /// <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
        pub fn set_content(
            mut self,
            input: std::option::Option<crate::model::LayoutContent>,
        ) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateTemplate`.
    ///
    /// <p>Updates the attributes of an existing template. The template attributes that can be modified include <code>name</code>, <code>description</code>, <code>layoutConfiguration</code>, <code>requiredFields</code>, and <code>status</code>. At least one of these attributes must not be null. If a null value is provided for a given attribute, that attribute is ignored and its current value is preserved.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateTemplate {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_template_input::Builder,
    }
    impl UpdateTemplate {
        /// Creates a new `UpdateTemplate`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateTemplate,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateTemplateOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain_id(input.into());
            self
        }
        /// <p>The unique identifier of the Cases domain. </p>
        pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain_id(input);
            self
        }
        /// <p>A unique identifier for the template.</p>
        pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.template_id(input.into());
            self
        }
        /// <p>A unique identifier for the template.</p>
        pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_template_id(input);
            self
        }
        /// <p>The name of the template. It must be unique per domain.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the template. It must be unique per domain.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A brief description of the template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>A brief description of the template.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Configuration of layouts associated to the template.</p>
        pub fn layout_configuration(mut self, input: crate::model::LayoutConfiguration) -> Self {
            self.inner = self.inner.layout_configuration(input);
            self
        }
        /// <p>Configuration of layouts associated to the template.</p>
        pub fn set_layout_configuration(
            mut self,
            input: std::option::Option<crate::model::LayoutConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_layout_configuration(input);
            self
        }
        /// Appends an item to `requiredFields`.
        ///
        /// To override the contents of this collection use [`set_required_fields`](Self::set_required_fields).
        ///
        /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
        pub fn required_fields(mut self, input: crate::model::RequiredField) -> Self {
            self.inner = self.inner.required_fields(input);
            self
        }
        /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
        pub fn set_required_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RequiredField>>,
        ) -> Self {
            self.inner = self.inner.set_required_fields(input);
            self
        }
        /// <p>The status of the template.</p>
        pub fn status(mut self, input: crate::model::TemplateStatus) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        /// <p>The status of the template.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
