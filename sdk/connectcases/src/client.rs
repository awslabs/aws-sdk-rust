// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Connect Cases
///
/// Client for invoking operations on Amazon Connect Cases. Each operation on Amazon Connect Cases is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_connectcases::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_connectcases::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_connectcases::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchGetField`](crate::client::fluent_builders::BatchGetField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::BatchGetField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::BatchGetField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::BatchGetField::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::BatchGetField::set_fields): <p>A list of unique field identifiers. </p>
    /// - On success, responds with [`BatchGetFieldOutput`](crate::output::BatchGetFieldOutput) with field(s):
    ///   - [`fields(Option<Vec<GetFieldResponse>>)`](crate::output::BatchGetFieldOutput::fields): <p>A list of detailed field information. </p>
    ///   - [`errors(Option<Vec<FieldError>>)`](crate::output::BatchGetFieldOutput::errors): <p>A list of field errors. </p>
    /// - On failure, responds with [`SdkError<BatchGetFieldError>`](crate::error::BatchGetFieldError)
    pub fn batch_get_field(&self) -> crate::client::fluent_builders::BatchGetField {
        crate::client::fluent_builders::BatchGetField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchPutFieldOptions`](crate::client::fluent_builders::BatchPutFieldOptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`options(Vec<FieldOption>)`](crate::client::fluent_builders::BatchPutFieldOptions::options) / [`set_options(Option<Vec<FieldOption>>)`](crate::client::fluent_builders::BatchPutFieldOptions::set_options): <p>A list of <code>FieldOption</code> objects.</p>
    /// - On success, responds with [`BatchPutFieldOptionsOutput`](crate::output::BatchPutFieldOptionsOutput) with field(s):
    ///   - [`errors(Option<Vec<FieldOptionError>>)`](crate::output::BatchPutFieldOptionsOutput::errors): <p>A list of field errors. </p>
    /// - On failure, responds with [`SdkError<BatchPutFieldOptionsError>`](crate::error::BatchPutFieldOptionsError)
    pub fn batch_put_field_options(&self) -> crate::client::fluent_builders::BatchPutFieldOptions {
        crate::client::fluent_builders::BatchPutFieldOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCase`](crate::client::fluent_builders::CreateCase) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::CreateCase::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::CreateCase::set_template_id): <p>A unique identifier of a template.</p>
    ///   - [`fields(Vec<FieldValue>)`](crate::client::fluent_builders::CreateCase::fields) / [`set_fields(Option<Vec<FieldValue>>)`](crate::client::fluent_builders::CreateCase::set_fields): <p>An array of objects with field ID (matching ListFields/DescribeField) and value union data.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateCase::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateCase::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    /// - On success, responds with [`CreateCaseOutput`](crate::output::CreateCaseOutput) with field(s):
    ///   - [`case_id(Option<String>)`](crate::output::CreateCaseOutput::case_id): <p>A unique identifier of the case.</p>
    ///   - [`case_arn(Option<String>)`](crate::output::CreateCaseOutput::case_arn): <p>The Amazon Resource Name (ARN) of the case.</p>
    /// - On failure, responds with [`SdkError<CreateCaseError>`](crate::error::CreateCaseError)
    pub fn create_case(&self) -> crate::client::fluent_builders::CreateCase {
        crate::client::fluent_builders::CreateCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDomain`](crate::client::fluent_builders::CreateDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDomain::set_name): <p>The name for your Cases domain. It must be unique for your Amazon Web Services account.</p>
    /// - On success, responds with [`CreateDomainOutput`](crate::output::CreateDomainOutput) with field(s):
    ///   - [`domain_id(Option<String>)`](crate::output::CreateDomainOutput::domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`domain_arn(Option<String>)`](crate::output::CreateDomainOutput::domain_arn): <p>The Amazon Resource Name (ARN) for the Cases domain.</p>
    ///   - [`domain_status(Option<DomainStatus>)`](crate::output::CreateDomainOutput::domain_status): <p>The status of the domain.</p>
    /// - On failure, responds with [`SdkError<CreateDomainError>`](crate::error::CreateDomainError)
    pub fn create_domain(&self) -> crate::client::fluent_builders::CreateDomain {
        crate::client::fluent_builders::CreateDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateField`](crate::client::fluent_builders::CreateField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateField::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateField::set_name): <p>The name of the field.</p>
    ///   - [`r#type(FieldType)`](crate::client::fluent_builders::CreateField::type) / [`set_type(Option<FieldType>)`](crate::client::fluent_builders::CreateField::set_type): <p>Defines the data type, some system constraints, and default display of the field.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateField::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateField::set_description): <p>The description of the field.</p>
    /// - On success, responds with [`CreateFieldOutput`](crate::output::CreateFieldOutput) with field(s):
    ///   - [`field_id(Option<String>)`](crate::output::CreateFieldOutput::field_id): <p>The unique identifier of a field.</p>
    ///   - [`field_arn(Option<String>)`](crate::output::CreateFieldOutput::field_arn): <p>The Amazon Resource Name (ARN) of the field.</p>
    /// - On failure, responds with [`SdkError<CreateFieldError>`](crate::error::CreateFieldError)
    pub fn create_field(&self) -> crate::client::fluent_builders::CreateField {
        crate::client::fluent_builders::CreateField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLayout`](crate::client::fluent_builders::CreateLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateLayout::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateLayout::set_name): <p>The name of the layout. It must be unique for the Cases domain.</p>
    ///   - [`content(LayoutContent)`](crate::client::fluent_builders::CreateLayout::content) / [`set_content(Option<LayoutContent>)`](crate::client::fluent_builders::CreateLayout::set_content): <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    /// - On success, responds with [`CreateLayoutOutput`](crate::output::CreateLayoutOutput) with field(s):
    ///   - [`layout_id(Option<String>)`](crate::output::CreateLayoutOutput::layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`layout_arn(Option<String>)`](crate::output::CreateLayoutOutput::layout_arn): <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    /// - On failure, responds with [`SdkError<CreateLayoutError>`](crate::error::CreateLayoutError)
    pub fn create_layout(&self) -> crate::client::fluent_builders::CreateLayout {
        crate::client::fluent_builders::CreateLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRelatedItem`](crate::client::fluent_builders::CreateRelatedItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateRelatedItem::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateRelatedItem::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::CreateRelatedItem::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::CreateRelatedItem::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`r#type(RelatedItemType)`](crate::client::fluent_builders::CreateRelatedItem::type) / [`set_type(Option<RelatedItemType>)`](crate::client::fluent_builders::CreateRelatedItem::set_type): <p>The type of a related item.</p>
    ///   - [`content(RelatedItemInputContent)`](crate::client::fluent_builders::CreateRelatedItem::content) / [`set_content(Option<RelatedItemInputContent>)`](crate::client::fluent_builders::CreateRelatedItem::set_content): <p>The content of a related item to be created.</p>
    /// - On success, responds with [`CreateRelatedItemOutput`](crate::output::CreateRelatedItemOutput) with field(s):
    ///   - [`related_item_id(Option<String>)`](crate::output::CreateRelatedItemOutput::related_item_id): <p>The unique identifier of the related item.</p>
    ///   - [`related_item_arn(Option<String>)`](crate::output::CreateRelatedItemOutput::related_item_arn): <p>The Amazon Resource Name (ARN) of the related item.</p>
    /// - On failure, responds with [`SdkError<CreateRelatedItemError>`](crate::error::CreateRelatedItemError)
    pub fn create_related_item(&self) -> crate::client::fluent_builders::CreateRelatedItem {
        crate::client::fluent_builders::CreateRelatedItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTemplate`](crate::client::fluent_builders::CreateTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_name): <p>A name for the template. It must be unique per domain.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateTemplate::set_description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(LayoutConfiguration)`](crate::client::fluent_builders::CreateTemplate::layout_configuration) / [`set_layout_configuration(Option<LayoutConfiguration>)`](crate::client::fluent_builders::CreateTemplate::set_layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Vec<RequiredField>)`](crate::client::fluent_builders::CreateTemplate::required_fields) / [`set_required_fields(Option<Vec<RequiredField>>)`](crate::client::fluent_builders::CreateTemplate::set_required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`status(TemplateStatus)`](crate::client::fluent_builders::CreateTemplate::status) / [`set_status(Option<TemplateStatus>)`](crate::client::fluent_builders::CreateTemplate::set_status): <p>The status of the template.</p>
    /// - On success, responds with [`CreateTemplateOutput`](crate::output::CreateTemplateOutput) with field(s):
    ///   - [`template_id(Option<String>)`](crate::output::CreateTemplateOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`template_arn(Option<String>)`](crate::output::CreateTemplateOutput::template_arn): <p>The Amazon Resource Name (ARN) of the newly created template.</p>
    /// - On failure, responds with [`SdkError<CreateTemplateError>`](crate::error::CreateTemplateError)
    pub fn create_template(&self) -> crate::client::fluent_builders::CreateTemplate {
        crate::client::fluent_builders::CreateTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCase`](crate::client::fluent_builders::GetCase) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetCase::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::GetCase::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::GetCase::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::GetCase::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::GetCase::set_fields): <p>A list of unique field identifiers. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetCase::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetCase::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`GetCaseOutput`](crate::output::GetCaseOutput) with field(s):
    ///   - [`fields(Option<Vec<FieldValue>>)`](crate::output::GetCaseOutput::fields): <p>A list of detailed field information. </p>
    ///   - [`template_id(Option<String>)`](crate::output::GetCaseOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetCaseOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetCaseOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetCaseError>`](crate::error::GetCaseError)
    pub fn get_case(&self) -> crate::client::fluent_builders::GetCase {
        crate::client::fluent_builders::GetCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCaseEventConfiguration`](crate::client::fluent_builders::GetCaseEventConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetCaseEventConfiguration::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetCaseEventConfiguration::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    /// - On success, responds with [`GetCaseEventConfigurationOutput`](crate::output::GetCaseEventConfigurationOutput) with field(s):
    ///   - [`event_bridge(Option<EventBridgeConfiguration>)`](crate::output::GetCaseEventConfigurationOutput::event_bridge): <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
    /// - On failure, responds with [`SdkError<GetCaseEventConfigurationError>`](crate::error::GetCaseEventConfigurationError)
    pub fn get_case_event_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetCaseEventConfiguration {
        crate::client::fluent_builders::GetCaseEventConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDomain`](crate::client::fluent_builders::GetDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetDomain::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetDomain::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    /// - On success, responds with [`GetDomainOutput`](crate::output::GetDomainOutput) with field(s):
    ///   - [`domain_id(Option<String>)`](crate::output::GetDomainOutput::domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`domain_arn(Option<String>)`](crate::output::GetDomainOutput::domain_arn): <p>The Amazon Resource Name (ARN) for the Cases domain.</p>
    ///   - [`name(Option<String>)`](crate::output::GetDomainOutput::name): <p>The name of the Cases domain.</p>
    ///   - [`created_time(Option<DateTime>)`](crate::output::GetDomainOutput::created_time): <p>The timestamp when the Cases domain was created.</p>
    ///   - [`domain_status(Option<DomainStatus>)`](crate::output::GetDomainOutput::domain_status): <p>The status of the Cases domain.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetDomainOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetDomainError>`](crate::error::GetDomainError)
    pub fn get_domain(&self) -> crate::client::fluent_builders::GetDomain {
        crate::client::fluent_builders::GetDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLayout`](crate::client::fluent_builders::GetLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`layout_id(impl Into<String>)`](crate::client::fluent_builders::GetLayout::layout_id) / [`set_layout_id(Option<String>)`](crate::client::fluent_builders::GetLayout::set_layout_id): <p>The unique identifier of the layout.</p>
    /// - On success, responds with [`GetLayoutOutput`](crate::output::GetLayoutOutput) with field(s):
    ///   - [`layout_id(Option<String>)`](crate::output::GetLayoutOutput::layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`layout_arn(Option<String>)`](crate::output::GetLayoutOutput::layout_arn): <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    ///   - [`name(Option<String>)`](crate::output::GetLayoutOutput::name): <p>The name of the layout. It must be unique.</p>
    ///   - [`content(Option<LayoutContent>)`](crate::output::GetLayoutOutput::content): <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetLayoutOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<GetLayoutError>`](crate::error::GetLayoutError)
    pub fn get_layout(&self) -> crate::client::fluent_builders::GetLayout {
        crate::client::fluent_builders::GetLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTemplate`](crate::client::fluent_builders::GetTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::GetTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::GetTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::GetTemplate::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::GetTemplate::set_template_id): <p>A unique identifier of a template.</p>
    /// - On success, responds with [`GetTemplateOutput`](crate::output::GetTemplateOutput) with field(s):
    ///   - [`template_id(Option<String>)`](crate::output::GetTemplateOutput::template_id): <p>A unique identifier of a template.</p>
    ///   - [`template_arn(Option<String>)`](crate::output::GetTemplateOutput::template_arn): <p>The Amazon Resource Name (ARN) of the template.</p>
    ///   - [`name(Option<String>)`](crate::output::GetTemplateOutput::name): <p>The name of the template.</p>
    ///   - [`description(Option<String>)`](crate::output::GetTemplateOutput::description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(Option<LayoutConfiguration>)`](crate::output::GetTemplateOutput::layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Option<Vec<RequiredField>>)`](crate::output::GetTemplateOutput::required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::GetTemplateOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    ///   - [`status(Option<TemplateStatus>)`](crate::output::GetTemplateOutput::status): <p>The status of the template.</p>
    /// - On failure, responds with [`SdkError<GetTemplateError>`](crate::error::GetTemplateError)
    pub fn get_template(&self) -> crate::client::fluent_builders::GetTemplate {
        crate::client::fluent_builders::GetTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCasesForContact`](crate::client::fluent_builders::ListCasesForContact) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCasesForContact::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`contact_arn(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::contact_arn) / [`set_contact_arn(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_contact_arn): <p>A unique identifier of a contact in Amazon Connect.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCasesForContact::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCasesForContact::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCasesForContact::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCasesForContact::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListCasesForContactOutput`](crate::output::ListCasesForContactOutput) with field(s):
    ///   - [`cases(Option<Vec<CaseSummary>>)`](crate::output::ListCasesForContactOutput::cases): <p>A list of Case summary information.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCasesForContactOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListCasesForContactError>`](crate::error::ListCasesForContactError)
    pub fn list_cases_for_contact(&self) -> crate::client::fluent_builders::ListCasesForContact {
        crate::client::fluent_builders::ListCasesForContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomains`](crate::client::fluent_builders::ListDomains) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDomains::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDomains::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDomains::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDomains::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDomains::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListDomainsOutput`](crate::output::ListDomainsOutput) with field(s):
    ///   - [`domains(Option<Vec<DomainSummary>>)`](crate::output::ListDomainsOutput::domains): <p>The Cases domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDomainsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListDomainsError>`](crate::error::ListDomainsError)
    pub fn list_domains(&self) -> crate::client::fluent_builders::ListDomains {
        crate::client::fluent_builders::ListDomains::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFieldOptions`](crate::client::fluent_builders::ListFieldOptions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFieldOptions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFieldOptions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFieldOptions::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFieldOptions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFieldOptions::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`values(Vec<String>)`](crate::client::fluent_builders::ListFieldOptions::values) / [`set_values(Option<Vec<String>>)`](crate::client::fluent_builders::ListFieldOptions::set_values): <p>A list of <code>FieldOption</code> values to filter on for <code>ListFieldOptions</code>.</p>
    /// - On success, responds with [`ListFieldOptionsOutput`](crate::output::ListFieldOptionsOutput) with field(s):
    ///   - [`options(Option<Vec<FieldOption>>)`](crate::output::ListFieldOptionsOutput::options): <p>A list of <code>FieldOption</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFieldOptionsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListFieldOptionsError>`](crate::error::ListFieldOptionsError)
    pub fn list_field_options(&self) -> crate::client::fluent_builders::ListFieldOptions {
        crate::client::fluent_builders::ListFieldOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFields`](crate::client::fluent_builders::ListFields) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFields::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListFields::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListFields::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFields::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFields::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFields::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFields::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListFieldsOutput`](crate::output::ListFieldsOutput) with field(s):
    ///   - [`fields(Option<Vec<FieldSummary>>)`](crate::output::ListFieldsOutput::fields): <p>List of detailed field information.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFieldsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListFieldsError>`](crate::error::ListFieldsError)
    pub fn list_fields(&self) -> crate::client::fluent_builders::ListFields {
        crate::client::fluent_builders::ListFields::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLayouts`](crate::client::fluent_builders::ListLayouts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLayouts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListLayouts::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListLayouts::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLayouts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLayouts::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLayouts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLayouts::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    /// - On success, responds with [`ListLayoutsOutput`](crate::output::ListLayoutsOutput) with field(s):
    ///   - [`layouts(Option<Vec<LayoutSummary>>)`](crate::output::ListLayoutsOutput::layouts): <p>The layouts for the domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLayoutsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListLayoutsError>`](crate::error::ListLayoutsError)
    pub fn list_layouts(&self) -> crate::client::fluent_builders::ListLayouts {
        crate::client::fluent_builders::ListLayouts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, Option<String>>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTemplates`](crate::client::fluent_builders::ListTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::ListTemplates::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::ListTemplates::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTemplates::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTemplates::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`status(Vec<TemplateStatus>)`](crate::client::fluent_builders::ListTemplates::status) / [`set_status(Option<Vec<TemplateStatus>>)`](crate::client::fluent_builders::ListTemplates::set_status): <p>A list of status values to filter on.</p>
    /// - On success, responds with [`ListTemplatesOutput`](crate::output::ListTemplatesOutput) with field(s):
    ///   - [`templates(Option<Vec<TemplateSummary>>)`](crate::output::ListTemplatesOutput::templates): <p>List of template summary objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTemplatesOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListTemplatesError>`](crate::error::ListTemplatesError)
    pub fn list_templates(&self) -> crate::client::fluent_builders::ListTemplates {
        crate::client::fluent_builders::ListTemplates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutCaseEventConfiguration`](crate::client::fluent_builders::PutCaseEventConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::PutCaseEventConfiguration::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::PutCaseEventConfiguration::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`event_bridge(EventBridgeConfiguration)`](crate::client::fluent_builders::PutCaseEventConfiguration::event_bridge) / [`set_event_bridge(Option<EventBridgeConfiguration>)`](crate::client::fluent_builders::PutCaseEventConfiguration::set_event_bridge): <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
    /// - On success, responds with [`PutCaseEventConfigurationOutput`](crate::output::PutCaseEventConfigurationOutput)

    /// - On failure, responds with [`SdkError<PutCaseEventConfigurationError>`](crate::error::PutCaseEventConfigurationError)
    pub fn put_case_event_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutCaseEventConfiguration {
        crate::client::fluent_builders::PutCaseEventConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SearchCases`](crate::client::fluent_builders::SearchCases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchCases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::SearchCases::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::SearchCases::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchCases::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchCases::set_max_results): <p>The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchCases::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchCases::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`search_term(impl Into<String>)`](crate::client::fluent_builders::SearchCases::search_term) / [`set_search_term(Option<String>)`](crate::client::fluent_builders::SearchCases::set_search_term): <p>A word or phrase used to perform a quick search.</p>
    ///   - [`filter(CaseFilter)`](crate::client::fluent_builders::SearchCases::filter) / [`set_filter(Option<CaseFilter>)`](crate::client::fluent_builders::SearchCases::set_filter): <p>A list of filter objects.</p>
    ///   - [`sorts(Vec<Sort>)`](crate::client::fluent_builders::SearchCases::sorts) / [`set_sorts(Option<Vec<Sort>>)`](crate::client::fluent_builders::SearchCases::set_sorts): <p>A list of sorts where each sort specifies a field and their sort order to be applied to the results. </p>
    ///   - [`fields(Vec<FieldIdentifier>)`](crate::client::fluent_builders::SearchCases::fields) / [`set_fields(Option<Vec<FieldIdentifier>>)`](crate::client::fluent_builders::SearchCases::set_fields): <p>The list of field identifiers to be returned as part of the response.</p>
    /// - On success, responds with [`SearchCasesOutput`](crate::output::SearchCasesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::SearchCasesOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`cases(Option<Vec<Option<SearchCasesResponseItem>>>)`](crate::output::SearchCasesOutput::cases): <p>A list of case documents where each case contains the properties <code>CaseId</code> and <code>Fields</code> where each field is a complex union structure. </p>
    /// - On failure, responds with [`SdkError<SearchCasesError>`](crate::error::SearchCasesError)
    pub fn search_cases(&self) -> crate::client::fluent_builders::SearchCases {
        crate::client::fluent_builders::SearchCases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SearchRelatedItems`](crate::client::fluent_builders::SearchRelatedItems) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchRelatedItems::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchRelatedItems::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchRelatedItems::set_max_results): <p>The maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchRelatedItems::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchRelatedItems::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`filters(Vec<RelatedItemTypeFilter>)`](crate::client::fluent_builders::SearchRelatedItems::filters) / [`set_filters(Option<Vec<RelatedItemTypeFilter>>)`](crate::client::fluent_builders::SearchRelatedItems::set_filters): <p>The list of types of related items and their parameters to use for filtering.</p>
    /// - On success, responds with [`SearchRelatedItemsOutput`](crate::output::SearchRelatedItemsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::SearchRelatedItemsOutput::next_token): <p>The token for the next set of results. This is null if there are no more results to return.</p>
    ///   - [`related_items(Option<Vec<Option<SearchRelatedItemsResponseItem>>>)`](crate::output::SearchRelatedItemsOutput::related_items): <p>A list of items related to a case. </p>
    /// - On failure, responds with [`SdkError<SearchRelatedItemsError>`](crate::error::SearchRelatedItemsError)
    pub fn search_related_items(&self) -> crate::client::fluent_builders::SearchRelatedItems {
        crate::client::fluent_builders::SearchRelatedItems::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    ///   - [`tags(HashMap<String, Option<String>>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, Option<String>>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_arn): <p>The Amazon Resource Name (ARN)</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>List of tag keys.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCase`](crate::client::fluent_builders::UpdateCase) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCase::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateCase::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`case_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCase::case_id) / [`set_case_id(Option<String>)`](crate::client::fluent_builders::UpdateCase::set_case_id): <p>A unique identifier of the case.</p>
    ///   - [`fields(Vec<FieldValue>)`](crate::client::fluent_builders::UpdateCase::fields) / [`set_fields(Option<Vec<FieldValue>>)`](crate::client::fluent_builders::UpdateCase::set_fields): <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    /// - On success, responds with [`UpdateCaseOutput`](crate::output::UpdateCaseOutput)

    /// - On failure, responds with [`SdkError<UpdateCaseError>`](crate::error::UpdateCaseError)
    pub fn update_case(&self) -> crate::client::fluent_builders::UpdateCase {
        crate::client::fluent_builders::UpdateCase::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateField`](crate::client::fluent_builders::UpdateField) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateField::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateField::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`field_id(impl Into<String>)`](crate::client::fluent_builders::UpdateField::field_id) / [`set_field_id(Option<String>)`](crate::client::fluent_builders::UpdateField::set_field_id): <p>The unique identifier of a field.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateField::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateField::set_name): <p>The name of the field.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateField::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateField::set_description): <p>The description of a field.</p>
    /// - On success, responds with [`UpdateFieldOutput`](crate::output::UpdateFieldOutput)

    /// - On failure, responds with [`SdkError<UpdateFieldError>`](crate::error::UpdateFieldError)
    pub fn update_field(&self) -> crate::client::fluent_builders::UpdateField {
        crate::client::fluent_builders::UpdateField::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLayout`](crate::client::fluent_builders::UpdateLayout) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`layout_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::layout_id) / [`set_layout_id(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_layout_id): <p>The unique identifier of the layout.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateLayout::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateLayout::set_name): <p>The name of the layout. It must be unique per domain.</p>
    ///   - [`content(LayoutContent)`](crate::client::fluent_builders::UpdateLayout::content) / [`set_content(Option<LayoutContent>)`](crate::client::fluent_builders::UpdateLayout::set_content): <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
    /// - On success, responds with [`UpdateLayoutOutput`](crate::output::UpdateLayoutOutput)

    /// - On failure, responds with [`SdkError<UpdateLayoutError>`](crate::error::UpdateLayoutError)
    pub fn update_layout(&self) -> crate::client::fluent_builders::UpdateLayout {
        crate::client::fluent_builders::UpdateLayout::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTemplate`](crate::client::fluent_builders::UpdateTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::domain_id) / [`set_domain_id(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_domain_id): <p>The unique identifier of the Cases domain. </p>
    ///   - [`template_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::template_id) / [`set_template_id(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_template_id): <p>A unique identifier for the template.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_name): <p>The name of the template. It must be unique per domain.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateTemplate::set_description): <p>A brief description of the template.</p>
    ///   - [`layout_configuration(LayoutConfiguration)`](crate::client::fluent_builders::UpdateTemplate::layout_configuration) / [`set_layout_configuration(Option<LayoutConfiguration>)`](crate::client::fluent_builders::UpdateTemplate::set_layout_configuration): <p>Configuration of layouts associated to the template.</p>
    ///   - [`required_fields(Vec<RequiredField>)`](crate::client::fluent_builders::UpdateTemplate::required_fields) / [`set_required_fields(Option<Vec<RequiredField>>)`](crate::client::fluent_builders::UpdateTemplate::set_required_fields): <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///   - [`status(TemplateStatus)`](crate::client::fluent_builders::UpdateTemplate::status) / [`set_status(Option<TemplateStatus>)`](crate::client::fluent_builders::UpdateTemplate::set_status): <p>The status of the template.</p>
    /// - On success, responds with [`UpdateTemplateOutput`](crate::output::UpdateTemplateOutput)

    /// - On failure, responds with [`SdkError<UpdateTemplateError>`](crate::error::UpdateTemplateError)
    pub fn update_template(&self) -> crate::client::fluent_builders::UpdateTemplate {
        crate::client::fluent_builders::UpdateTemplate::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
