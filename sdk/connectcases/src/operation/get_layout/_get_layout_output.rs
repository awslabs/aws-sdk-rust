// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLayoutOutput {
    /// <p>The unique identifier of the layout.</p>
    #[doc(hidden)]
    pub layout_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    #[doc(hidden)]
    pub layout_arn: std::option::Option<std::string::String>,
    /// <p>The name of the layout. It must be unique.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::LayoutContent>,
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<
        std::collections::HashMap<std::string::String, std::option::Option<std::string::String>>,
    >,
    _request_id: Option<String>,
}
impl GetLayoutOutput {
    /// <p>The unique identifier of the layout.</p>
    pub fn layout_id(&self) -> std::option::Option<&str> {
        self.layout_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    pub fn layout_arn(&self) -> std::option::Option<&str> {
        self.layout_arn.as_deref()
    }
    /// <p>The name of the layout. It must be unique.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    pub fn content(&self) -> std::option::Option<&crate::types::LayoutContent> {
        self.content.as_ref()
    }
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::option::Option<std::string::String>>,
    > {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLayoutOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLayoutOutput {
    /// Creates a new builder-style object to manufacture [`GetLayoutOutput`](crate::operation::get_layout::GetLayoutOutput).
    pub fn builder() -> crate::operation::get_layout::builders::GetLayoutOutputBuilder {
        crate::operation::get_layout::builders::GetLayoutOutputBuilder::default()
    }
}

/// A builder for [`GetLayoutOutput`](crate::operation::get_layout::GetLayoutOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetLayoutOutputBuilder {
    pub(crate) layout_id: std::option::Option<std::string::String>,
    pub(crate) layout_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<crate::types::LayoutContent>,
    pub(crate) tags: std::option::Option<
        std::collections::HashMap<std::string::String, std::option::Option<std::string::String>>,
    >,
    _request_id: Option<String>,
}
impl GetLayoutOutputBuilder {
    /// <p>The unique identifier of the layout.</p>
    pub fn layout_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.layout_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the layout.</p>
    pub fn set_layout_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layout_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    pub fn layout_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.layout_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the newly created layout.</p>
    pub fn set_layout_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layout_arn = input;
        self
    }
    /// <p>The name of the layout. It must be unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the layout. It must be unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    pub fn content(mut self, input: crate::types::LayoutContent) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>Information about which fields will be present in the layout, the order of the fields, and read-only attribute of the field. </p>
    pub fn set_content(mut self, input: std::option::Option<crate::types::LayoutContent>) -> Self {
        self.content = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: std::option::Option<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.tags = Some(hash_map);
        self
    }
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::option::Option<std::string::String>,
            >,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLayoutOutput`](crate::operation::get_layout::GetLayoutOutput).
    pub fn build(self) -> crate::operation::get_layout::GetLayoutOutput {
        crate::operation::get_layout::GetLayoutOutput {
            layout_id: self.layout_id,
            layout_arn: self.layout_arn,
            name: self.name,
            content: self.content,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
