// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetCaseRuleOutput {
    /// <p>A list of detailed case rule information.</p>
    pub case_rules: ::std::vec::Vec<crate::types::GetCaseRuleResponse>,
    /// <p>A list of case rule errors.</p>
    pub errors: ::std::vec::Vec<crate::types::CaseRuleError>,
    /// <p>A list of unprocessed case rule identifiers.</p>
    pub unprocessed_case_rules: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetCaseRuleOutput {
    /// <p>A list of detailed case rule information.</p>
    pub fn case_rules(&self) -> &[crate::types::GetCaseRuleResponse] {
        use std::ops::Deref;
        self.case_rules.deref()
    }
    /// <p>A list of case rule errors.</p>
    pub fn errors(&self) -> &[crate::types::CaseRuleError] {
        use std::ops::Deref;
        self.errors.deref()
    }
    /// <p>A list of unprocessed case rule identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_case_rules.is_none()`.
    pub fn unprocessed_case_rules(&self) -> &[::std::string::String] {
        self.unprocessed_case_rules.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetCaseRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetCaseRuleOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetCaseRuleOutput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleOutput).
    pub fn builder() -> crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleOutputBuilder {
        crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleOutputBuilder::default()
    }
}

/// A builder for [`BatchGetCaseRuleOutput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetCaseRuleOutputBuilder {
    pub(crate) case_rules: ::std::option::Option<::std::vec::Vec<crate::types::GetCaseRuleResponse>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::CaseRuleError>>,
    pub(crate) unprocessed_case_rules: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetCaseRuleOutputBuilder {
    /// Appends an item to `case_rules`.
    ///
    /// To override the contents of this collection use [`set_case_rules`](Self::set_case_rules).
    ///
    /// <p>A list of detailed case rule information.</p>
    pub fn case_rules(mut self, input: crate::types::GetCaseRuleResponse) -> Self {
        let mut v = self.case_rules.unwrap_or_default();
        v.push(input);
        self.case_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of detailed case rule information.</p>
    pub fn set_case_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GetCaseRuleResponse>>) -> Self {
        self.case_rules = input;
        self
    }
    /// <p>A list of detailed case rule information.</p>
    pub fn get_case_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GetCaseRuleResponse>> {
        &self.case_rules
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of case rule errors.</p>
    pub fn errors(mut self, input: crate::types::CaseRuleError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of case rule errors.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CaseRuleError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of case rule errors.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CaseRuleError>> {
        &self.errors
    }
    /// Appends an item to `unprocessed_case_rules`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_case_rules`](Self::set_unprocessed_case_rules).
    ///
    /// <p>A list of unprocessed case rule identifiers.</p>
    pub fn unprocessed_case_rules(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.unprocessed_case_rules.unwrap_or_default();
        v.push(input.into());
        self.unprocessed_case_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unprocessed case rule identifiers.</p>
    pub fn set_unprocessed_case_rules(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.unprocessed_case_rules = input;
        self
    }
    /// <p>A list of unprocessed case rule identifiers.</p>
    pub fn get_unprocessed_case_rules(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.unprocessed_case_rules
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetCaseRuleOutput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`case_rules`](crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleOutputBuilder::case_rules)
    /// - [`errors`](crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleOutputBuilder::errors)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_get_case_rule::BatchGetCaseRuleOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_get_case_rule::BatchGetCaseRuleOutput {
            case_rules: self.case_rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rules",
                    "case_rules was not specified but it is required when building BatchGetCaseRuleOutput",
                )
            })?,
            errors: self.errors.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "errors",
                    "errors was not specified but it is required when building BatchGetCaseRuleOutput",
                )
            })?,
            unprocessed_case_rules: self.unprocessed_case_rules,
            _request_id: self._request_id,
        })
    }
}
