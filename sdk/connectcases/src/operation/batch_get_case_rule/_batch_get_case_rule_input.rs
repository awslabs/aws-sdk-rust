// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetCaseRuleInput {
    /// <p>Unique identifier of a Cases domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of case rule identifiers.</p>
    pub case_rules: ::std::option::Option<::std::vec::Vec<crate::types::CaseRuleIdentifier>>,
}
impl BatchGetCaseRuleInput {
    /// <p>Unique identifier of a Cases domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>A list of case rule identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.case_rules.is_none()`.
    pub fn case_rules(&self) -> &[crate::types::CaseRuleIdentifier] {
        self.case_rules.as_deref().unwrap_or_default()
    }
}
impl BatchGetCaseRuleInput {
    /// Creates a new builder-style object to manufacture [`BatchGetCaseRuleInput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleInput).
    pub fn builder() -> crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleInputBuilder {
        crate::operation::batch_get_case_rule::builders::BatchGetCaseRuleInputBuilder::default()
    }
}

/// A builder for [`BatchGetCaseRuleInput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetCaseRuleInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) case_rules: ::std::option::Option<::std::vec::Vec<crate::types::CaseRuleIdentifier>>,
}
impl BatchGetCaseRuleInputBuilder {
    /// <p>Unique identifier of a Cases domain.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a Cases domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>Unique identifier of a Cases domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// Appends an item to `case_rules`.
    ///
    /// To override the contents of this collection use [`set_case_rules`](Self::set_case_rules).
    ///
    /// <p>A list of case rule identifiers.</p>
    pub fn case_rules(mut self, input: crate::types::CaseRuleIdentifier) -> Self {
        let mut v = self.case_rules.unwrap_or_default();
        v.push(input);
        self.case_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of case rule identifiers.</p>
    pub fn set_case_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CaseRuleIdentifier>>) -> Self {
        self.case_rules = input;
        self
    }
    /// <p>A list of case rule identifiers.</p>
    pub fn get_case_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CaseRuleIdentifier>> {
        &self.case_rules
    }
    /// Consumes the builder and constructs a [`BatchGetCaseRuleInput`](crate::operation::batch_get_case_rule::BatchGetCaseRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_get_case_rule::BatchGetCaseRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_get_case_rule::BatchGetCaseRuleInput {
            domain_id: self.domain_id,
            case_rules: self.case_rules,
        })
    }
}
