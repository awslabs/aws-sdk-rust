// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_layout::_update_layout_output::UpdateLayoutOutputBuilder;

pub use crate::operation::update_layout::_update_layout_input::UpdateLayoutInputBuilder;

/// Fluent builder constructing a request to `UpdateLayout`.
///
/// <p>Updates the attributes of an existing layout.</p>
/// <p>If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.</p>
/// <p>A <code>ValidationException</code> is returned when you add non-existent <code>fieldIds</code> to a layout.</p> <note>
/// <p>Title and Status fields cannot be part of layouts because they are not configurable.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLayoutFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_layout::builders::UpdateLayoutInputBuilder,
}
impl UpdateLayoutFluentBuilder {
    /// Creates a new `UpdateLayout`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_layout::UpdateLayout,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_layout::UpdateLayoutError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_layout::UpdateLayoutOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_layout::UpdateLayoutError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The unique identifier of the layout.</p>
    pub fn layout_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.layout_id(input.into());
        self
    }
    /// <p>The unique identifier of the layout.</p>
    pub fn set_layout_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_layout_id(input);
        self
    }
    /// <p>The name of the layout. It must be unique per domain.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the layout. It must be unique per domain.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
    pub fn content(mut self, input: crate::types::LayoutContent) -> Self {
        self.inner = self.inner.content(input);
        self
    }
    /// <p>Information about which fields will be present in the layout, the order of the fields, and a read-only attribute of the field. </p>
    pub fn set_content(mut self, input: std::option::Option<crate::types::LayoutContent>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
}
