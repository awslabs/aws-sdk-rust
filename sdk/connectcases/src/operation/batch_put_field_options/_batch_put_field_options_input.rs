// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchPutFieldOptionsInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of a field.</p>
    pub field_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>FieldOption</code> objects.</p>
    pub options: ::std::option::Option<::std::vec::Vec<crate::types::FieldOption>>,
}
impl BatchPutFieldOptionsInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The unique identifier of a field.</p>
    pub fn field_id(&self) -> ::std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>A list of <code>FieldOption</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options.is_none()`.
    pub fn options(&self) -> &[crate::types::FieldOption] {
        self.options.as_deref().unwrap_or_default()
    }
}
impl BatchPutFieldOptionsInput {
    /// Creates a new builder-style object to manufacture [`BatchPutFieldOptionsInput`](crate::operation::batch_put_field_options::BatchPutFieldOptionsInput).
    pub fn builder() -> crate::operation::batch_put_field_options::builders::BatchPutFieldOptionsInputBuilder {
        crate::operation::batch_put_field_options::builders::BatchPutFieldOptionsInputBuilder::default()
    }
}

/// A builder for [`BatchPutFieldOptionsInput`](crate::operation::batch_put_field_options::BatchPutFieldOptionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchPutFieldOptionsInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) options: ::std::option::Option<::std::vec::Vec<crate::types::FieldOption>>,
}
impl BatchPutFieldOptionsInputBuilder {
    /// <p>The unique identifier of the Cases domain. </p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The unique identifier of a field.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a field.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The unique identifier of a field.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>A list of <code>FieldOption</code> objects.</p>
    pub fn options(mut self, input: crate::types::FieldOption) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>FieldOption</code> objects.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldOption>>) -> Self {
        self.options = input;
        self
    }
    /// <p>A list of <code>FieldOption</code> objects.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldOption>> {
        &self.options
    }
    /// Consumes the builder and constructs a [`BatchPutFieldOptionsInput`](crate::operation::batch_put_field_options::BatchPutFieldOptionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_put_field_options::BatchPutFieldOptionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_put_field_options::BatchPutFieldOptionsInput {
            domain_id: self.domain_id,
            field_id: self.field_id,
            options: self.options,
        })
    }
}
