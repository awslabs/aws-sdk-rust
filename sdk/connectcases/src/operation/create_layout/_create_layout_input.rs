// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLayoutInput {
    /// <p>The unique identifier of the Cases domain. </p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::LayoutContent>,
}
impl CreateLayoutInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn content(&self) -> std::option::Option<&crate::types::LayoutContent> {
        self.content.as_ref()
    }
}
impl CreateLayoutInput {
    /// Creates a new builder-style object to manufacture [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
    pub fn builder() -> crate::operation::create_layout::builders::CreateLayoutInputBuilder {
        crate::operation::create_layout::builders::CreateLayoutInputBuilder::default()
    }
}

/// A builder for [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLayoutInputBuilder {
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<crate::types::LayoutContent>,
}
impl CreateLayoutInputBuilder {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn content(mut self, input: crate::types::LayoutContent) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn set_content(mut self, input: std::option::Option<crate::types::LayoutContent>) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_layout::CreateLayoutInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_layout::CreateLayoutInput {
            domain_id: self.domain_id,
            name: self.name,
            content: self.content,
        })
    }
}
