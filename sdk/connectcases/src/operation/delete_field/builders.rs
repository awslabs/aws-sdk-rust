// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_field::_delete_field_output::DeleteFieldOutputBuilder;

pub use crate::operation::delete_field::_delete_field_input::DeleteFieldInputBuilder;

impl crate::operation::delete_field::builders::DeleteFieldInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_field::DeleteFieldOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_field::DeleteFieldError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_field();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteField`.
///
/// <p>Deletes a field from a cases template. You can delete up to 100 fields per domain.</p>
/// <p>After a field is deleted:</p>
/// <ul>
/// <li>
/// <p>You can still retrieve the field by calling <code>BatchGetField</code>.</p></li>
/// <li>
/// <p>You cannot update a deleted field by calling <code>UpdateField</code>; it throws a <code>ValidationException</code>.</p></li>
/// <li>
/// <p>Deleted fields are not included in the <code>ListFields</code> response.</p></li>
/// <li>
/// <p>Calling <code>CreateCase</code> with a deleted field throws a <code>ValidationException</code> denoting which field identifiers in the request have been deleted.</p></li>
/// <li>
/// <p>Calling <code>GetCase</code> with a deleted field identifier returns the deleted field's value if one exists.</p></li>
/// <li>
/// <p>Calling <code>UpdateCase</code> with a deleted field ID throws a <code>ValidationException</code> if the case does not already contain a value for the deleted field. Otherwise it succeeds, allowing you to update or remove (using <code>emptyValue: {}</code>) the field's value from the case.</p></li>
/// <li>
/// <p><code>GetTemplate</code> does not return field IDs for deleted fields.</p></li>
/// <li>
/// <p><code>GetLayout</code> does not return field IDs for deleted fields.</p></li>
/// <li>
/// <p>Calling <code>SearchCases</code> with the deleted field ID as a filter returns any cases that have a value for the deleted field that matches the filter criteria.</p></li>
/// <li>
/// <p>Calling <code>SearchCases</code> with a <code>searchTerm</code> value that matches a deleted field's value on a case returns the case in the response.</p></li>
/// <li>
/// <p>Calling <code>BatchPutFieldOptions</code> with a deleted field ID throw a <code>ValidationException</code>.</p></li>
/// <li>
/// <p>Calling <code>GetCaseEventConfiguration</code> does not return field IDs for deleted fields.</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteFieldFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_field::builders::DeleteFieldInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_field::DeleteFieldOutput,
        crate::operation::delete_field::DeleteFieldError,
    > for DeleteFieldFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_field::DeleteFieldOutput,
            crate::operation::delete_field::DeleteFieldError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteFieldFluentBuilder {
    /// Creates a new `DeleteFieldFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteField as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_field::builders::DeleteFieldInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_field::DeleteFieldOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_field::DeleteFieldError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_field::DeleteField::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_field::DeleteField::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_field::DeleteFieldOutput,
        crate::operation::delete_field::DeleteFieldError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the Cases domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The unique identifier of the Cases domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_id()
    }
    /// <p>Unique identifier of the field.</p>
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.field_id(input.into());
        self
    }
    /// <p>Unique identifier of the field.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_field_id(input);
        self
    }
    /// <p>Unique identifier of the field.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_field_id()
    }
}
