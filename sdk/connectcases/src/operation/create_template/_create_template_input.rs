// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTemplateInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>A name for the template. It must be unique per domain.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Configuration of layouts associated to the template.</p>
    pub layout_configuration: ::std::option::Option<crate::types::LayoutConfiguration>,
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub required_fields: ::std::option::Option<::std::vec::Vec<crate::types::RequiredField>>,
    /// <p>The status of the template.</p>
    pub status: ::std::option::Option<crate::types::TemplateStatus>,
}
impl CreateTemplateInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A brief description of the template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn layout_configuration(&self) -> ::std::option::Option<&crate::types::LayoutConfiguration> {
        self.layout_configuration.as_ref()
    }
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_fields.is_none()`.
    pub fn required_fields(&self) -> &[crate::types::RequiredField] {
        self.required_fields.as_deref().unwrap_or_default()
    }
    /// <p>The status of the template.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TemplateStatus> {
        self.status.as_ref()
    }
}
impl CreateTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateTemplateInput`](crate::operation::create_template::CreateTemplateInput).
    pub fn builder() -> crate::operation::create_template::builders::CreateTemplateInputBuilder {
        crate::operation::create_template::builders::CreateTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateTemplateInput`](crate::operation::create_template::CreateTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateTemplateInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) layout_configuration: ::std::option::Option<crate::types::LayoutConfiguration>,
    pub(crate) required_fields: ::std::option::Option<::std::vec::Vec<crate::types::RequiredField>>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateStatus>,
}
impl CreateTemplateInputBuilder {
    /// <p>The unique identifier of the Cases domain. </p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A brief description of the template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description of the template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn layout_configuration(mut self, input: crate::types::LayoutConfiguration) -> Self {
        self.layout_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn set_layout_configuration(mut self, input: ::std::option::Option<crate::types::LayoutConfiguration>) -> Self {
        self.layout_configuration = input;
        self
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn get_layout_configuration(&self) -> &::std::option::Option<crate::types::LayoutConfiguration> {
        &self.layout_configuration
    }
    /// Appends an item to `required_fields`.
    ///
    /// To override the contents of this collection use [`set_required_fields`](Self::set_required_fields).
    ///
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub fn required_fields(mut self, input: crate::types::RequiredField) -> Self {
        let mut v = self.required_fields.unwrap_or_default();
        v.push(input);
        self.required_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub fn set_required_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RequiredField>>) -> Self {
        self.required_fields = input;
        self
    }
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub fn get_required_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RequiredField>> {
        &self.required_fields
    }
    /// <p>The status of the template.</p>
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the template.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`CreateTemplateInput`](crate::operation::create_template::CreateTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_template::CreateTemplateInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_template::CreateTemplateInput {
            domain_id: self.domain_id,
            name: self.name,
            description: self.description,
            layout_configuration: self.layout_configuration,
            required_fields: self.required_fields,
            status: self.status,
        })
    }
}
