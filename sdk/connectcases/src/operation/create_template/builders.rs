// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_template::_create_template_output::CreateTemplateOutputBuilder;

pub use crate::operation::create_template::_create_template_input::CreateTemplateInputBuilder;

/// Fluent builder constructing a request to `CreateTemplate`.
///
/// <p>Creates a template in the Cases domain. This template is used to define the case object model (that is, to define what data can be captured on cases) in a Cases domain. A template must have a unique name within a domain, and it must reference existing field IDs and layout IDs. Additionally, multiple fields with same IDs are not allowed within the same Template. A template can be either Active or Inactive, as indicated by its status. Inactive templates cannot be used to create cases.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTemplateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_template::builders::CreateTemplateInputBuilder,
}
impl CreateTemplateFluentBuilder {
    /// Creates a new `CreateTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_template::CreateTemplate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_template::CreateTemplateError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_template::CreateTemplateOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_template::CreateTemplateError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the template. It must be unique per domain.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A brief description of the template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A brief description of the template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn layout_configuration(mut self, input: crate::types::LayoutConfiguration) -> Self {
        self.inner = self.inner.layout_configuration(input);
        self
    }
    /// <p>Configuration of layouts associated to the template.</p>
    pub fn set_layout_configuration(
        mut self,
        input: std::option::Option<crate::types::LayoutConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_layout_configuration(input);
        self
    }
    /// Appends an item to `requiredFields`.
    ///
    /// To override the contents of this collection use [`set_required_fields`](Self::set_required_fields).
    ///
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub fn required_fields(mut self, input: crate::types::RequiredField) -> Self {
        self.inner = self.inner.required_fields(input);
        self
    }
    /// <p>A list of fields that must contain a value for a case to be successfully created with this template.</p>
    pub fn set_required_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RequiredField>>,
    ) -> Self {
        self.inner = self.inner.set_required_fields(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
}
