// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLayout`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::domain_id) / [`set_domain_id(Option<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::set_domain_id):<br>required: **true**<br><p>The unique identifier of the Cases domain. </p><br>
    ///   - [`layout_id(impl Into<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::layout_id) / [`set_layout_id(Option<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::set_layout_id):<br>required: **true**<br><p>The unique identifier of the layout.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::set_name):<br>required: **false**<br><p>The name of the layout. It must be unique per domain.</p><br>
    ///   - [`content(LayoutContent)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::content) / [`set_content(Option<LayoutContent>)`](crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::set_content):<br>required: **false**<br><p>Information about which fields will be present in the layout, the order of the fields.</p><br>
    /// - On success, responds with [`UpdateLayoutOutput`](crate::operation::update_layout::UpdateLayoutOutput)
    /// - On failure, responds with [`SdkError<UpdateLayoutError>`](crate::operation::update_layout::UpdateLayoutError)
    pub fn update_layout(&self) -> crate::operation::update_layout::builders::UpdateLayoutFluentBuilder {
        crate::operation::update_layout::builders::UpdateLayoutFluentBuilder::new(self.handle.clone())
    }
}
