// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_cases_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_cases::SearchCasesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.fields {
        let mut array_2 = object.key("fields").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_field_identifier::ser_field_identifier(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.filter {
        #[allow(unused_mut)]
        let mut object_6 = object.key("filter").start_object();
        crate::protocol_serde::shape_case_filter::ser_case_filter(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.next_token {
        object.key("nextToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.search_term {
        object.key("searchTerm").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sorts {
        let mut array_11 = object.key("sorts").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_sort::ser_sort(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
