// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Content specific to <code>BasicLayout</code> type. It configures fields in the top panel and More Info tab of agent application. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BasicLayout {
    /// <p>This represents sections in a panel of the page layout.</p>
    #[doc(hidden)]
    pub top_panel: std::option::Option<crate::types::LayoutSections>,
    /// <p>This represents sections in a tab of the page layout.</p>
    #[doc(hidden)]
    pub more_info: std::option::Option<crate::types::LayoutSections>,
}
impl BasicLayout {
    /// <p>This represents sections in a panel of the page layout.</p>
    pub fn top_panel(&self) -> std::option::Option<&crate::types::LayoutSections> {
        self.top_panel.as_ref()
    }
    /// <p>This represents sections in a tab of the page layout.</p>
    pub fn more_info(&self) -> std::option::Option<&crate::types::LayoutSections> {
        self.more_info.as_ref()
    }
}
impl BasicLayout {
    /// Creates a new builder-style object to manufacture [`BasicLayout`](crate::types::BasicLayout).
    pub fn builder() -> crate::types::builders::BasicLayoutBuilder {
        crate::types::builders::BasicLayoutBuilder::default()
    }
}

/// A builder for [`BasicLayout`](crate::types::BasicLayout).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BasicLayoutBuilder {
    pub(crate) top_panel: std::option::Option<crate::types::LayoutSections>,
    pub(crate) more_info: std::option::Option<crate::types::LayoutSections>,
}
impl BasicLayoutBuilder {
    /// <p>This represents sections in a panel of the page layout.</p>
    pub fn top_panel(mut self, input: crate::types::LayoutSections) -> Self {
        self.top_panel = Some(input);
        self
    }
    /// <p>This represents sections in a panel of the page layout.</p>
    pub fn set_top_panel(
        mut self,
        input: std::option::Option<crate::types::LayoutSections>,
    ) -> Self {
        self.top_panel = input;
        self
    }
    /// <p>This represents sections in a tab of the page layout.</p>
    pub fn more_info(mut self, input: crate::types::LayoutSections) -> Self {
        self.more_info = Some(input);
        self
    }
    /// <p>This represents sections in a tab of the page layout.</p>
    pub fn set_more_info(
        mut self,
        input: std::option::Option<crate::types::LayoutSections>,
    ) -> Self {
        self.more_info = input;
        self
    }
    /// Consumes the builder and constructs a [`BasicLayout`](crate::types::BasicLayout).
    pub fn build(self) -> crate::types::BasicLayout {
        crate::types::BasicLayout {
            top_panel: self.top_panel,
            more_info: self.more_info,
        }
    }
}
