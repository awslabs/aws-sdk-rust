// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for the summarized details of the layout.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LayoutSummary {
    /// <p>The unique identifier for of the layout.</p>
    #[doc(hidden)]
    pub layout_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the layout.</p>
    #[doc(hidden)]
    pub layout_arn: std::option::Option<std::string::String>,
    /// <p>The name of the layout.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl LayoutSummary {
    /// <p>The unique identifier for of the layout.</p>
    pub fn layout_id(&self) -> std::option::Option<&str> {
        self.layout_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the layout.</p>
    pub fn layout_arn(&self) -> std::option::Option<&str> {
        self.layout_arn.as_deref()
    }
    /// <p>The name of the layout.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl LayoutSummary {
    /// Creates a new builder-style object to manufacture [`LayoutSummary`](crate::types::LayoutSummary).
    pub fn builder() -> crate::types::builders::LayoutSummaryBuilder {
        crate::types::builders::LayoutSummaryBuilder::default()
    }
}

/// A builder for [`LayoutSummary`](crate::types::LayoutSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LayoutSummaryBuilder {
    pub(crate) layout_id: std::option::Option<std::string::String>,
    pub(crate) layout_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl LayoutSummaryBuilder {
    /// <p>The unique identifier for of the layout.</p>
    pub fn layout_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.layout_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for of the layout.</p>
    pub fn set_layout_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layout_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the layout.</p>
    pub fn layout_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.layout_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the layout.</p>
    pub fn set_layout_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layout_arn = input;
        self
    }
    /// <p>The name of the layout.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the layout.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`LayoutSummary`](crate::types::LayoutSummary).
    pub fn build(self) -> crate::types::LayoutSummary {
        crate::types::LayoutSummary {
            layout_id: self.layout_id,
            layout_arn: self.layout_arn,
            name: self.name,
        }
    }
}
