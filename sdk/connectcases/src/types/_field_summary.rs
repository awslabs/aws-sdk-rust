// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for the summarized details of the field.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldSummary {
    /// <p>The unique identifier of a field.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the field.</p>
    #[doc(hidden)]
    pub field_arn: std::option::Option<std::string::String>,
    /// <p>Name of the field.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of a field.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::FieldType>,
    /// <p>The namespace of a field.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<crate::types::FieldNamespace>,
}
impl FieldSummary {
    /// <p>The unique identifier of a field.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the field.</p>
    pub fn field_arn(&self) -> std::option::Option<&str> {
        self.field_arn.as_deref()
    }
    /// <p>Name of the field.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of a field.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::FieldType> {
        self.r#type.as_ref()
    }
    /// <p>The namespace of a field.</p>
    pub fn namespace(&self) -> std::option::Option<&crate::types::FieldNamespace> {
        self.namespace.as_ref()
    }
}
impl FieldSummary {
    /// Creates a new builder-style object to manufacture [`FieldSummary`](crate::types::FieldSummary).
    pub fn builder() -> crate::types::builders::FieldSummaryBuilder {
        crate::types::builders::FieldSummaryBuilder::default()
    }
}

/// A builder for [`FieldSummary`](crate::types::FieldSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldSummaryBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
    pub(crate) field_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::FieldType>,
    pub(crate) namespace: std::option::Option<crate::types::FieldNamespace>,
}
impl FieldSummaryBuilder {
    /// <p>The unique identifier of a field.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of a field.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the field.</p>
    pub fn field_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the field.</p>
    pub fn set_field_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_arn = input;
        self
    }
    /// <p>Name of the field.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of the field.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of a field.</p>
    pub fn r#type(mut self, input: crate::types::FieldType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of a field.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::FieldType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The namespace of a field.</p>
    pub fn namespace(mut self, input: crate::types::FieldNamespace) -> Self {
        self.namespace = Some(input);
        self
    }
    /// <p>The namespace of a field.</p>
    pub fn set_namespace(
        mut self,
        input: std::option::Option<crate::types::FieldNamespace>,
    ) -> Self {
        self.namespace = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldSummary`](crate::types::FieldSummary).
    pub fn build(self) -> crate::types::FieldSummary {
        crate::types::FieldSummary {
            field_id: self.field_id,
            field_arn: self.field_arn,
            name: self.name,
            r#type: self.r#type,
            namespace: self.namespace,
        }
    }
}
