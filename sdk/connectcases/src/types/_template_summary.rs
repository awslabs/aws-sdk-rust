// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Template summary information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateSummary {
    /// <p>The unique identifier for the template.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    #[doc(hidden)]
    pub template_arn: std::option::Option<std::string::String>,
    /// <p>The template name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of the template.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TemplateStatus>,
}
impl TemplateSummary {
    /// <p>The unique identifier for the template.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn template_arn(&self) -> std::option::Option<&str> {
        self.template_arn.as_deref()
    }
    /// <p>The template name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the template.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TemplateStatus> {
        self.status.as_ref()
    }
}
impl TemplateSummary {
    /// Creates a new builder-style object to manufacture [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn builder() -> crate::types::builders::TemplateSummaryBuilder {
        crate::types::builders::TemplateSummaryBuilder::default()
    }
}

/// A builder for [`TemplateSummary`](crate::types::TemplateSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateSummaryBuilder {
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) template_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TemplateStatus>,
}
impl TemplateSummaryBuilder {
    /// <p>The unique identifier for the template.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the template.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn template_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn set_template_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_arn = input;
        self
    }
    /// <p>The template name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The template name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status of the template.</p>
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn build(self) -> crate::types::TemplateSummary {
        crate::types::TemplateSummary {
            template_id: self.template_id,
            template_arn: self.template_arn,
            name: self.name,
            status: self.status,
        }
    }
}
