// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Template summary information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateSummary {
    /// <p>The unique identifier for the template.</p>
    pub template_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub template_arn: ::std::string::String,
    /// <p>The template name.</p>
    pub name: ::std::string::String,
    /// <p>The status of the template.</p>
    pub status: crate::types::TemplateStatus,
}
impl TemplateSummary {
    /// <p>The unique identifier for the template.</p>
    pub fn template_id(&self) -> &str {
        use std::ops::Deref;
        self.template_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn template_arn(&self) -> &str {
        use std::ops::Deref;
        self.template_arn.deref()
    }
    /// <p>The template name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the template.</p>
    pub fn status(&self) -> &crate::types::TemplateStatus {
        &self.status
    }
}
impl TemplateSummary {
    /// Creates a new builder-style object to manufacture [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn builder() -> crate::types::builders::TemplateSummaryBuilder {
        crate::types::builders::TemplateSummaryBuilder::default()
    }
}

/// A builder for [`TemplateSummary`](crate::types::TemplateSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateSummaryBuilder {
    pub(crate) template_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateStatus>,
}
impl TemplateSummaryBuilder {
    /// <p>The unique identifier for the template.</p>
    /// This field is required.
    pub fn template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the template.</p>
    pub fn set_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The unique identifier for the template.</p>
    pub fn get_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_id
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    /// This field is required.
    pub fn template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn set_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template.</p>
    pub fn get_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_arn
    }
    /// <p>The template name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The template name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the template.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the template.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`TemplateSummary`](crate::types::TemplateSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_id`](crate::types::builders::TemplateSummaryBuilder::template_id)
    /// - [`template_arn`](crate::types::builders::TemplateSummaryBuilder::template_arn)
    /// - [`name`](crate::types::builders::TemplateSummaryBuilder::name)
    /// - [`status`](crate::types::builders::TemplateSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::TemplateSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TemplateSummary {
            template_id: self.template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_id",
                    "template_id was not specified but it is required when building TemplateSummary",
                )
            })?,
            template_arn: self.template_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_arn",
                    "template_arn was not specified but it is required when building TemplateSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TemplateSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building TemplateSummary",
                )
            })?,
        })
    }
}
