// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for case field values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldValue {
    /// <p>Unique identifier of a field.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Union of potential field value types.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::FieldValueUnion>,
}
impl FieldValue {
    /// <p>Unique identifier of a field.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Union of potential field value types.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::FieldValueUnion> {
        self.value.as_ref()
    }
}
impl FieldValue {
    /// Creates a new builder-style object to manufacture [`FieldValue`](crate::types::FieldValue).
    pub fn builder() -> crate::types::builders::FieldValueBuilder {
        crate::types::builders::FieldValueBuilder::default()
    }
}

/// A builder for [`FieldValue`](crate::types::FieldValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldValueBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<crate::types::FieldValueUnion>,
}
impl FieldValueBuilder {
    /// <p>Unique identifier of a field.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Unique identifier of a field.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn value(mut self, input: crate::types::FieldValueUnion) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn set_value(mut self, input: std::option::Option<crate::types::FieldValueUnion>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldValue`](crate::types::FieldValue).
    pub fn build(self) -> crate::types::FieldValue {
        crate::types::FieldValue {
            id: self.id,
            value: self.value,
        }
    }
}
