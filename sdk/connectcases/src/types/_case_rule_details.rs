// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents what rule type should take place, under what conditions. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum CaseRuleDetails {
    /// <p>Which options are available in a child field based on the selected value in a parent field.</p>
    FieldOptions(crate::types::FieldOptionsCaseRule),
    /// <p>Whether a field is visible, based on values in other fields.</p>
    Hidden(crate::types::HiddenCaseRule),
    /// <p>Required rule type, used to indicate whether a field is required.</p>
    Required(crate::types::RequiredCaseRule),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CaseRuleDetails {
    /// Tries to convert the enum instance into [`FieldOptions`](crate::types::CaseRuleDetails::FieldOptions), extracting the inner [`FieldOptionsCaseRule`](crate::types::FieldOptionsCaseRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_field_options(&self) -> ::std::result::Result<&crate::types::FieldOptionsCaseRule, &Self> {
        if let CaseRuleDetails::FieldOptions(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FieldOptions`](crate::types::CaseRuleDetails::FieldOptions).
    pub fn is_field_options(&self) -> bool {
        self.as_field_options().is_ok()
    }
    /// Tries to convert the enum instance into [`Hidden`](crate::types::CaseRuleDetails::Hidden), extracting the inner [`HiddenCaseRule`](crate::types::HiddenCaseRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_hidden(&self) -> ::std::result::Result<&crate::types::HiddenCaseRule, &Self> {
        if let CaseRuleDetails::Hidden(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Hidden`](crate::types::CaseRuleDetails::Hidden).
    pub fn is_hidden(&self) -> bool {
        self.as_hidden().is_ok()
    }
    /// Tries to convert the enum instance into [`Required`](crate::types::CaseRuleDetails::Required), extracting the inner [`RequiredCaseRule`](crate::types::RequiredCaseRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_required(&self) -> ::std::result::Result<&crate::types::RequiredCaseRule, &Self> {
        if let CaseRuleDetails::Required(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Required`](crate::types::CaseRuleDetails::Required).
    pub fn is_required(&self) -> bool {
        self.as_required().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
