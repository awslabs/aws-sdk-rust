// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the content of a <code>Comment</code> to be returned to agents.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CommentContent {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<crate::types::CommentBodyTextType>,
}
impl CommentContent {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn content_type(&self) -> std::option::Option<&crate::types::CommentBodyTextType> {
        self.content_type.as_ref()
    }
}
impl CommentContent {
    /// Creates a new builder-style object to manufacture [`CommentContent`](crate::types::CommentContent).
    pub fn builder() -> crate::types::builders::CommentContentBuilder {
        crate::types::builders::CommentContentBuilder::default()
    }
}

/// A builder for [`CommentContent`](crate::types::CommentContent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CommentContentBuilder {
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<crate::types::CommentBodyTextType>,
}
impl CommentContentBuilder {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn content_type(mut self, input: crate::types::CommentBodyTextType) -> Self {
        self.content_type = Some(input);
        self
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::types::CommentBodyTextType>,
    ) -> Self {
        self.content_type = input;
        self
    }
    /// Consumes the builder and constructs a [`CommentContent`](crate::types::CommentContent).
    pub fn build(self) -> crate::types::CommentContent {
        crate::types::CommentContent {
            body: self.body,
            content_type: self.content_type,
        }
    }
}
