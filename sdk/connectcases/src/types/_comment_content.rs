// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the content of a <code>Comment</code> to be returned to agents.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommentContent {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub body: ::std::string::String,
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub content_type: crate::types::CommentBodyTextType,
}
impl CommentContent {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn body(&self) -> &str {
        use std::ops::Deref;
        self.body.deref()
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn content_type(&self) -> &crate::types::CommentBodyTextType {
        &self.content_type
    }
}
impl CommentContent {
    /// Creates a new builder-style object to manufacture [`CommentContent`](crate::types::CommentContent).
    pub fn builder() -> crate::types::builders::CommentContentBuilder {
        crate::types::builders::CommentContentBuilder::default()
    }
}

/// A builder for [`CommentContent`](crate::types::CommentContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CommentContentBuilder {
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<crate::types::CommentBodyTextType>,
}
impl CommentContentBuilder {
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    /// This field is required.
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>Text in the body of a <code>Comment</code> on a case.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    /// This field is required.
    pub fn content_type(mut self, input: crate::types::CommentBodyTextType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::CommentBodyTextType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Type of the text in the box of a <code>Comment</code> on a case.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::CommentBodyTextType> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`CommentContent`](crate::types::CommentContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`body`](crate::types::builders::CommentContentBuilder::body)
    /// - [`content_type`](crate::types::builders::CommentContentBuilder::content_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CommentContent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CommentContent {
            body: self.body.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "body",
                    "body was not specified but it is required when building CommentContent",
                )
            })?,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building CommentContent",
                )
            })?,
        })
    }
}
