// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Rules that control which options are available in a child field based on the selected value in a parent field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldOptionsCaseRule {
    /// <p>The identifier of the parent field that controls options.</p>
    pub parent_field_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the child field whose options are controlled.</p>
    pub child_field_id: ::std::option::Option<::std::string::String>,
    /// <p>A mapping between a parent field option value and child field option values.</p>
    pub parent_child_field_options_mappings: ::std::vec::Vec<crate::types::ParentChildFieldOptionsMapping>,
}
impl FieldOptionsCaseRule {
    /// <p>The identifier of the parent field that controls options.</p>
    pub fn parent_field_id(&self) -> ::std::option::Option<&str> {
        self.parent_field_id.as_deref()
    }
    /// <p>The identifier of the child field whose options are controlled.</p>
    pub fn child_field_id(&self) -> ::std::option::Option<&str> {
        self.child_field_id.as_deref()
    }
    /// <p>A mapping between a parent field option value and child field option values.</p>
    pub fn parent_child_field_options_mappings(&self) -> &[crate::types::ParentChildFieldOptionsMapping] {
        use std::ops::Deref;
        self.parent_child_field_options_mappings.deref()
    }
}
impl FieldOptionsCaseRule {
    /// Creates a new builder-style object to manufacture [`FieldOptionsCaseRule`](crate::types::FieldOptionsCaseRule).
    pub fn builder() -> crate::types::builders::FieldOptionsCaseRuleBuilder {
        crate::types::builders::FieldOptionsCaseRuleBuilder::default()
    }
}

/// A builder for [`FieldOptionsCaseRule`](crate::types::FieldOptionsCaseRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FieldOptionsCaseRuleBuilder {
    pub(crate) parent_field_id: ::std::option::Option<::std::string::String>,
    pub(crate) child_field_id: ::std::option::Option<::std::string::String>,
    pub(crate) parent_child_field_options_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ParentChildFieldOptionsMapping>>,
}
impl FieldOptionsCaseRuleBuilder {
    /// <p>The identifier of the parent field that controls options.</p>
    pub fn parent_field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the parent field that controls options.</p>
    pub fn set_parent_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_field_id = input;
        self
    }
    /// <p>The identifier of the parent field that controls options.</p>
    pub fn get_parent_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_field_id
    }
    /// <p>The identifier of the child field whose options are controlled.</p>
    pub fn child_field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.child_field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the child field whose options are controlled.</p>
    pub fn set_child_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.child_field_id = input;
        self
    }
    /// <p>The identifier of the child field whose options are controlled.</p>
    pub fn get_child_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.child_field_id
    }
    /// Appends an item to `parent_child_field_options_mappings`.
    ///
    /// To override the contents of this collection use [`set_parent_child_field_options_mappings`](Self::set_parent_child_field_options_mappings).
    ///
    /// <p>A mapping between a parent field option value and child field option values.</p>
    pub fn parent_child_field_options_mappings(mut self, input: crate::types::ParentChildFieldOptionsMapping) -> Self {
        let mut v = self.parent_child_field_options_mappings.unwrap_or_default();
        v.push(input);
        self.parent_child_field_options_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A mapping between a parent field option value and child field option values.</p>
    pub fn set_parent_child_field_options_mappings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ParentChildFieldOptionsMapping>>,
    ) -> Self {
        self.parent_child_field_options_mappings = input;
        self
    }
    /// <p>A mapping between a parent field option value and child field option values.</p>
    pub fn get_parent_child_field_options_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParentChildFieldOptionsMapping>> {
        &self.parent_child_field_options_mappings
    }
    /// Consumes the builder and constructs a [`FieldOptionsCaseRule`](crate::types::FieldOptionsCaseRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`parent_child_field_options_mappings`](crate::types::builders::FieldOptionsCaseRuleBuilder::parent_child_field_options_mappings)
    pub fn build(self) -> ::std::result::Result<crate::types::FieldOptionsCaseRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FieldOptionsCaseRule {
            parent_field_id: self.parent_field_id,
            child_field_id: self.child_field_id,
            parent_child_field_options_mappings: self.parent_child_field_options_mappings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parent_child_field_options_mappings",
                    "parent_child_field_options_mappings was not specified but it is required when building FieldOptionsCaseRule",
                )
            })?,
        })
    }
}
