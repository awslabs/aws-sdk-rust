// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for cases. Only one value can be provided.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CaseFilter {
    /// <p>Provides "and all" filtering.</p>
    AndAll(std::vec::Vec<crate::types::CaseFilter>),
    /// <p>A list of fields to filter on.</p>
    Field(crate::types::FieldFilter),
    /// <p>A filter for cases. Only one value can be provided.</p>
    Not(std::boxed::Box<crate::types::CaseFilter>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CaseFilter {
    /// Tries to convert the enum instance into [`AndAll`](crate::types::CaseFilter::AndAll), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_and_all(
        &self,
    ) -> std::result::Result<&std::vec::Vec<crate::types::CaseFilter>, &Self> {
        if let CaseFilter::AndAll(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AndAll`](crate::types::CaseFilter::AndAll).
    pub fn is_and_all(&self) -> bool {
        self.as_and_all().is_ok()
    }
    /// Tries to convert the enum instance into [`Field`](crate::types::CaseFilter::Field), extracting the inner [`FieldFilter`](crate::types::FieldFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_field(&self) -> std::result::Result<&crate::types::FieldFilter, &Self> {
        if let CaseFilter::Field(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Field`](crate::types::CaseFilter::Field).
    pub fn is_field(&self) -> bool {
        self.as_field().is_ok()
    }
    /// Tries to convert the enum instance into [`Not`](crate::types::CaseFilter::Not), extracting the inner [`CaseFilter`](crate::types::CaseFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_not(&self) -> std::result::Result<&std::boxed::Box<crate::types::CaseFilter>, &Self> {
        if let CaseFilter::Not(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Not`](crate::types::CaseFilter::Not).
    pub fn is_not(&self) -> bool {
        self.as_not().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
