// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for field Options information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldOption {
    /// <p> <code>FieldOptionName</code> has max length 100 and disallows trailing spaces.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> <code>FieldOptionValue</code> has max length 100 and must be alphanumeric with hyphens and underscores.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Describes whether the <code>FieldOption</code> is active (displayed) or inactive.</p>
    #[doc(hidden)]
    pub active: std::option::Option<bool>,
}
impl FieldOption {
    /// <p> <code>FieldOptionName</code> has max length 100 and disallows trailing spaces.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> <code>FieldOptionValue</code> has max length 100 and must be alphanumeric with hyphens and underscores.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Describes whether the <code>FieldOption</code> is active (displayed) or inactive.</p>
    pub fn active(&self) -> std::option::Option<bool> {
        self.active
    }
}
impl FieldOption {
    /// Creates a new builder-style object to manufacture [`FieldOption`](crate::types::FieldOption).
    pub fn builder() -> crate::types::builders::FieldOptionBuilder {
        crate::types::builders::FieldOptionBuilder::default()
    }
}

/// A builder for [`FieldOption`](crate::types::FieldOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldOptionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) active: std::option::Option<bool>,
}
impl FieldOptionBuilder {
    /// <p> <code>FieldOptionName</code> has max length 100 and disallows trailing spaces.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> <code>FieldOptionName</code> has max length 100 and disallows trailing spaces.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> <code>FieldOptionValue</code> has max length 100 and must be alphanumeric with hyphens and underscores.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p> <code>FieldOptionValue</code> has max length 100 and must be alphanumeric with hyphens and underscores.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Describes whether the <code>FieldOption</code> is active (displayed) or inactive.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = Some(input);
        self
    }
    /// <p>Describes whether the <code>FieldOption</code> is active (displayed) or inactive.</p>
    pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldOption`](crate::types::FieldOption).
    pub fn build(self) -> crate::types::FieldOption {
        crate::types::FieldOption {
            name: self.name,
            value: self.value,
            active: self.active,
        }
    }
}
