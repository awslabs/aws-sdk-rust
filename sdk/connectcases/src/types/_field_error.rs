// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for errors on fields.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldError {
    /// <p>The field identifier that caused the error.</p>
    pub id: ::std::string::String,
    /// <p>The error code from getting a field.</p>
    pub error_code: ::std::string::String,
    /// <p>The error message from getting a field.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl FieldError {
    /// <p>The field identifier that caused the error.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The error code from getting a field.</p>
    pub fn error_code(&self) -> &str {
        use std::ops::Deref;
        self.error_code.deref()
    }
    /// <p>The error message from getting a field.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl FieldError {
    /// Creates a new builder-style object to manufacture [`FieldError`](crate::types::FieldError).
    pub fn builder() -> crate::types::builders::FieldErrorBuilder {
        crate::types::builders::FieldErrorBuilder::default()
    }
}

/// A builder for [`FieldError`](crate::types::FieldError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FieldErrorBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl FieldErrorBuilder {
    /// <p>The field identifier that caused the error.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field identifier that caused the error.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The field identifier that caused the error.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The error code from getting a field.</p>
    /// This field is required.
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code from getting a field.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code from getting a field.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The error message from getting a field.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message from getting a field.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message from getting a field.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`FieldError`](crate::types::FieldError).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::FieldErrorBuilder::id)
    /// - [`error_code`](crate::types::builders::FieldErrorBuilder::error_code)
    pub fn build(self) -> ::std::result::Result<crate::types::FieldError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FieldError {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building FieldError",
                )
            })?,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building FieldError",
                )
            })?,
            message: self.message,
        })
    }
}
