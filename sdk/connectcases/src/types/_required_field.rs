// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of fields that must have a value provided to create a case.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequiredField {
    /// <p>Unique identifier of a field.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
}
impl RequiredField {
    /// <p>Unique identifier of a field.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
}
impl RequiredField {
    /// Creates a new builder-style object to manufacture [`RequiredField`](crate::types::RequiredField).
    pub fn builder() -> crate::types::builders::RequiredFieldBuilder {
        crate::types::builders::RequiredFieldBuilder::default()
    }
}

/// A builder for [`RequiredField`](crate::types::RequiredField).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RequiredFieldBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
}
impl RequiredFieldBuilder {
    /// <p>Unique identifier of a field.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>Unique identifier of a field.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RequiredField`](crate::types::RequiredField).
    pub fn build(self) -> crate::types::RequiredField {
        crate::types::RequiredField {
            field_id: self.field_id,
        }
    }
}
