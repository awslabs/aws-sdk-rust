// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Ordered list containing different kinds of sections that can be added. A LayoutSections object can only contain one section.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LayoutSections {
    /// <p>Ordered list containing different kinds of sections that can be added.</p>
    #[doc(hidden)]
    pub sections: std::option::Option<std::vec::Vec<crate::types::Section>>,
}
impl LayoutSections {
    /// <p>Ordered list containing different kinds of sections that can be added.</p>
    pub fn sections(&self) -> std::option::Option<&[crate::types::Section]> {
        self.sections.as_deref()
    }
}
impl LayoutSections {
    /// Creates a new builder-style object to manufacture [`LayoutSections`](crate::types::LayoutSections).
    pub fn builder() -> crate::types::builders::LayoutSectionsBuilder {
        crate::types::builders::LayoutSectionsBuilder::default()
    }
}

/// A builder for [`LayoutSections`](crate::types::LayoutSections).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LayoutSectionsBuilder {
    pub(crate) sections: std::option::Option<std::vec::Vec<crate::types::Section>>,
}
impl LayoutSectionsBuilder {
    /// Appends an item to `sections`.
    ///
    /// To override the contents of this collection use [`set_sections`](Self::set_sections).
    ///
    /// <p>Ordered list containing different kinds of sections that can be added.</p>
    pub fn sections(mut self, input: crate::types::Section) -> Self {
        let mut v = self.sections.unwrap_or_default();
        v.push(input);
        self.sections = Some(v);
        self
    }
    /// <p>Ordered list containing different kinds of sections that can be added.</p>
    pub fn set_sections(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Section>>,
    ) -> Self {
        self.sections = input;
        self
    }
    /// Consumes the builder and constructs a [`LayoutSections`](crate::types::LayoutSections).
    pub fn build(self) -> crate::types::LayoutSections {
        crate::types::LayoutSections {
            sections: self.sections,
        }
    }
}
