// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration to enable EventBridge case event delivery and determine what data is delivered.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventBridgeConfiguration {
    /// <p>Indicates whether the to broadcast case event data to the customer.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>Details of what case and related item data is published through the case event stream.</p>
    #[doc(hidden)]
    pub included_data: std::option::Option<crate::types::EventIncludedData>,
}
impl EventBridgeConfiguration {
    /// <p>Indicates whether the to broadcast case event data to the customer.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>Details of what case and related item data is published through the case event stream.</p>
    pub fn included_data(&self) -> std::option::Option<&crate::types::EventIncludedData> {
        self.included_data.as_ref()
    }
}
impl EventBridgeConfiguration {
    /// Creates a new builder-style object to manufacture [`EventBridgeConfiguration`](crate::types::EventBridgeConfiguration).
    pub fn builder() -> crate::types::builders::EventBridgeConfigurationBuilder {
        crate::types::builders::EventBridgeConfigurationBuilder::default()
    }
}

/// A builder for [`EventBridgeConfiguration`](crate::types::EventBridgeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventBridgeConfigurationBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) included_data: std::option::Option<crate::types::EventIncludedData>,
}
impl EventBridgeConfigurationBuilder {
    /// <p>Indicates whether the to broadcast case event data to the customer.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether the to broadcast case event data to the customer.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Details of what case and related item data is published through the case event stream.</p>
    pub fn included_data(mut self, input: crate::types::EventIncludedData) -> Self {
        self.included_data = Some(input);
        self
    }
    /// <p>Details of what case and related item data is published through the case event stream.</p>
    pub fn set_included_data(
        mut self,
        input: std::option::Option<crate::types::EventIncludedData>,
    ) -> Self {
        self.included_data = input;
        self
    }
    /// Consumes the builder and constructs a [`EventBridgeConfiguration`](crate::types::EventBridgeConfiguration).
    pub fn build(self) -> crate::types::EventBridgeConfiguration {
        crate::types::EventBridgeConfiguration {
            enabled: self.enabled,
            included_data: self.included_data,
        }
    }
}
