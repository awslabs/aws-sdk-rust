// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object to store configuration of layouts associated to the template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LayoutConfiguration {
    /// <p> Unique identifier of a layout. </p>
    #[doc(hidden)]
    pub default_layout: std::option::Option<std::string::String>,
}
impl LayoutConfiguration {
    /// <p> Unique identifier of a layout. </p>
    pub fn default_layout(&self) -> std::option::Option<&str> {
        self.default_layout.as_deref()
    }
}
impl LayoutConfiguration {
    /// Creates a new builder-style object to manufacture [`LayoutConfiguration`](crate::types::LayoutConfiguration).
    pub fn builder() -> crate::types::builders::LayoutConfigurationBuilder {
        crate::types::builders::LayoutConfigurationBuilder::default()
    }
}

/// A builder for [`LayoutConfiguration`](crate::types::LayoutConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LayoutConfigurationBuilder {
    pub(crate) default_layout: std::option::Option<std::string::String>,
}
impl LayoutConfigurationBuilder {
    /// <p> Unique identifier of a layout. </p>
    pub fn default_layout(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_layout = Some(input.into());
        self
    }
    /// <p> Unique identifier of a layout. </p>
    pub fn set_default_layout(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_layout = input;
        self
    }
    /// Consumes the builder and constructs a [`LayoutConfiguration`](crate::types::LayoutConfiguration).
    pub fn build(self) -> crate::types::LayoutConfiguration {
        crate::types::LayoutConfiguration {
            default_layout: self.default_layout,
        }
    }
}
