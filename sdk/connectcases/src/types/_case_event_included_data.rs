// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of what case data is published through the case event stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaseEventIncludedData {
    /// <p>List of field identifiers.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<std::vec::Vec<crate::types::FieldIdentifier>>,
}
impl CaseEventIncludedData {
    /// <p>List of field identifiers.</p>
    pub fn fields(&self) -> std::option::Option<&[crate::types::FieldIdentifier]> {
        self.fields.as_deref()
    }
}
impl CaseEventIncludedData {
    /// Creates a new builder-style object to manufacture [`CaseEventIncludedData`](crate::types::CaseEventIncludedData).
    pub fn builder() -> crate::types::builders::CaseEventIncludedDataBuilder {
        crate::types::builders::CaseEventIncludedDataBuilder::default()
    }
}

/// A builder for [`CaseEventIncludedData`](crate::types::CaseEventIncludedData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaseEventIncludedDataBuilder {
    pub(crate) fields: std::option::Option<std::vec::Vec<crate::types::FieldIdentifier>>,
}
impl CaseEventIncludedDataBuilder {
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>List of field identifiers.</p>
    pub fn fields(mut self, input: crate::types::FieldIdentifier) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = Some(v);
        self
    }
    /// <p>List of field identifiers.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FieldIdentifier>>,
    ) -> Self {
        self.fields = input;
        self
    }
    /// Consumes the builder and constructs a [`CaseEventIncludedData`](crate::types::CaseEventIncludedData).
    pub fn build(self) -> crate::types::CaseEventIncludedData {
        crate::types::CaseEventIncludedData {
            fields: self.fields,
        }
    }
}
