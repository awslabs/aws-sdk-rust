// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An association representing a case rule acting upon a field. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateRule {
    /// <p>Unique identifier of a case rule.</p>
    pub case_rule_id: ::std::string::String,
    /// <p>Unique identifier of a field.</p>
    pub field_id: ::std::string::String,
}
impl TemplateRule {
    /// <p>Unique identifier of a case rule.</p>
    pub fn case_rule_id(&self) -> &str {
        use std::ops::Deref;
        self.case_rule_id.deref()
    }
    /// <p>Unique identifier of a field.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
}
impl TemplateRule {
    /// Creates a new builder-style object to manufacture [`TemplateRule`](crate::types::TemplateRule).
    pub fn builder() -> crate::types::builders::TemplateRuleBuilder {
        crate::types::builders::TemplateRuleBuilder::default()
    }
}

/// A builder for [`TemplateRule`](crate::types::TemplateRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TemplateRuleBuilder {
    pub(crate) case_rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
}
impl TemplateRuleBuilder {
    /// <p>Unique identifier of a case rule.</p>
    /// This field is required.
    pub fn case_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn set_case_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_rule_id = input;
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn get_case_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_rule_id
    }
    /// <p>Unique identifier of a field.</p>
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a field.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>Unique identifier of a field.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// Consumes the builder and constructs a [`TemplateRule`](crate::types::TemplateRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`case_rule_id`](crate::types::builders::TemplateRuleBuilder::case_rule_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TemplateRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TemplateRule {
            case_rule_id: self.case_rule_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rule_id",
                    "case_rule_id was not specified but it is required when building TemplateRule",
                )
            })?,
            field_id: self.field_id.unwrap_or_else(|| "NULL".to_owned()),
        })
    }
}
