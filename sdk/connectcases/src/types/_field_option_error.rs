// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object for field Options errors.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldOptionError {
    /// <p>Error message from creating or updating field option.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>Error code from creating or updating field option.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>The field option value that caused the error.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl FieldOptionError {
    /// <p>Error message from creating or updating field option.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Error code from creating or updating field option.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The field option value that caused the error.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl FieldOptionError {
    /// Creates a new builder-style object to manufacture [`FieldOptionError`](crate::types::FieldOptionError).
    pub fn builder() -> crate::types::builders::FieldOptionErrorBuilder {
        crate::types::builders::FieldOptionErrorBuilder::default()
    }
}

/// A builder for [`FieldOptionError`](crate::types::FieldOptionError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldOptionErrorBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl FieldOptionErrorBuilder {
    /// <p>Error message from creating or updating field option.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Error message from creating or updating field option.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Error code from creating or updating field option.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>Error code from creating or updating field option.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The field option value that caused the error.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The field option value that caused the error.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldOptionError`](crate::types::FieldOptionError).
    pub fn build(self) -> crate::types::FieldOptionError {
        crate::types::FieldOptionError {
            message: self.message,
            error_code: self.error_code,
            value: self.value,
        }
    }
}
