// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the content of a particular audit event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditEvent {
    /// <p>Unique identifier of a case audit history event.</p>
    pub event_id: ::std::string::String,
    /// <p>The Type of an audit history event.</p>
    pub r#type: crate::types::AuditEventType,
    /// <p>The Type of the related item.</p>
    pub related_item_type: ::std::option::Option<crate::types::RelatedItemType>,
    /// <p>Time at which an Audit History event took place.</p>
    pub performed_time: ::aws_smithy_types::DateTime,
    /// <p>A list of Case Audit History event fields.</p>
    pub fields: ::std::vec::Vec<::std::option::Option<crate::types::AuditEventField>>,
    /// <p>Information of the user which performed the audit.</p>
    pub performed_by: ::std::option::Option<crate::types::AuditEventPerformedBy>,
}
impl AuditEvent {
    /// <p>Unique identifier of a case audit history event.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The Type of an audit history event.</p>
    pub fn r#type(&self) -> &crate::types::AuditEventType {
        &self.r#type
    }
    /// <p>The Type of the related item.</p>
    pub fn related_item_type(&self) -> ::std::option::Option<&crate::types::RelatedItemType> {
        self.related_item_type.as_ref()
    }
    /// <p>Time at which an Audit History event took place.</p>
    pub fn performed_time(&self) -> &::aws_smithy_types::DateTime {
        &self.performed_time
    }
    /// <p>A list of Case Audit History event fields.</p>
    pub fn fields(&self) -> &[::std::option::Option<crate::types::AuditEventField>] {
        use std::ops::Deref;
        self.fields.deref()
    }
    /// <p>Information of the user which performed the audit.</p>
    pub fn performed_by(&self) -> ::std::option::Option<&crate::types::AuditEventPerformedBy> {
        self.performed_by.as_ref()
    }
}
impl AuditEvent {
    /// Creates a new builder-style object to manufacture [`AuditEvent`](crate::types::AuditEvent).
    pub fn builder() -> crate::types::builders::AuditEventBuilder {
        crate::types::builders::AuditEventBuilder::default()
    }
}

/// A builder for [`AuditEvent`](crate::types::AuditEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuditEventBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AuditEventType>,
    pub(crate) related_item_type: ::std::option::Option<crate::types::RelatedItemType>,
    pub(crate) performed_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::AuditEventField>>>,
    pub(crate) performed_by: ::std::option::Option<crate::types::AuditEventPerformedBy>,
}
impl AuditEventBuilder {
    /// <p>Unique identifier of a case audit history event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a case audit history event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>Unique identifier of a case audit history event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The Type of an audit history event.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AuditEventType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Type of an audit history event.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AuditEventType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The Type of an audit history event.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AuditEventType> {
        &self.r#type
    }
    /// <p>The Type of the related item.</p>
    pub fn related_item_type(mut self, input: crate::types::RelatedItemType) -> Self {
        self.related_item_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Type of the related item.</p>
    pub fn set_related_item_type(mut self, input: ::std::option::Option<crate::types::RelatedItemType>) -> Self {
        self.related_item_type = input;
        self
    }
    /// <p>The Type of the related item.</p>
    pub fn get_related_item_type(&self) -> &::std::option::Option<crate::types::RelatedItemType> {
        &self.related_item_type
    }
    /// <p>Time at which an Audit History event took place.</p>
    /// This field is required.
    pub fn performed_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.performed_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time at which an Audit History event took place.</p>
    pub fn set_performed_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.performed_time = input;
        self
    }
    /// <p>Time at which an Audit History event took place.</p>
    pub fn get_performed_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.performed_time
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A list of Case Audit History event fields.</p>
    pub fn fields(mut self, input: ::std::option::Option<crate::types::AuditEventField>) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Case Audit History event fields.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::AuditEventField>>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>A list of Case Audit History event fields.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::AuditEventField>>> {
        &self.fields
    }
    /// <p>Information of the user which performed the audit.</p>
    pub fn performed_by(mut self, input: crate::types::AuditEventPerformedBy) -> Self {
        self.performed_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information of the user which performed the audit.</p>
    pub fn set_performed_by(mut self, input: ::std::option::Option<crate::types::AuditEventPerformedBy>) -> Self {
        self.performed_by = input;
        self
    }
    /// <p>Information of the user which performed the audit.</p>
    pub fn get_performed_by(&self) -> &::std::option::Option<crate::types::AuditEventPerformedBy> {
        &self.performed_by
    }
    /// Consumes the builder and constructs a [`AuditEvent`](crate::types::AuditEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_id`](crate::types::builders::AuditEventBuilder::event_id)
    /// - [`r#type`](crate::types::builders::AuditEventBuilder::type)
    /// - [`performed_time`](crate::types::builders::AuditEventBuilder::performed_time)
    /// - [`fields`](crate::types::builders::AuditEventBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::AuditEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuditEvent {
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building AuditEvent",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AuditEvent",
                )
            })?,
            related_item_type: self.related_item_type,
            performed_time: self.performed_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "performed_time",
                    "performed_time was not specified but it is required when building AuditEvent",
                )
            })?,
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building AuditEvent",
                )
            })?,
            performed_by: self.performed_by,
        })
    }
}
