// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for fields. Only one value can be provided.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum FieldFilter {
    /// <p>Object containing field identifier and value information.</p>
    Contains(crate::types::FieldValue),
    /// <p>Object containing field identifier and value information.</p>
    EqualTo(crate::types::FieldValue),
    /// <p>Object containing field identifier and value information.</p>
    GreaterThan(crate::types::FieldValue),
    /// <p>Object containing field identifier and value information.</p>
    GreaterThanOrEqualTo(crate::types::FieldValue),
    /// <p>Object containing field identifier and value information.</p>
    LessThan(crate::types::FieldValue),
    /// <p>Object containing field identifier and value information. </p>
    LessThanOrEqualTo(crate::types::FieldValue),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FieldFilter {
    /// Tries to convert the enum instance into [`Contains`](crate::types::FieldFilter::Contains), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_contains(&self) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::Contains(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Contains`](crate::types::FieldFilter::Contains).
    pub fn is_contains(&self) -> bool {
        self.as_contains().is_ok()
    }
    /// Tries to convert the enum instance into [`EqualTo`](crate::types::FieldFilter::EqualTo), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_equal_to(&self) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::EqualTo(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`EqualTo`](crate::types::FieldFilter::EqualTo).
    pub fn is_equal_to(&self) -> bool {
        self.as_equal_to().is_ok()
    }
    /// Tries to convert the enum instance into [`GreaterThan`](crate::types::FieldFilter::GreaterThan), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_greater_than(&self) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::GreaterThan(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`GreaterThan`](crate::types::FieldFilter::GreaterThan).
    pub fn is_greater_than(&self) -> bool {
        self.as_greater_than().is_ok()
    }
    /// Tries to convert the enum instance into [`GreaterThanOrEqualTo`](crate::types::FieldFilter::GreaterThanOrEqualTo), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_greater_than_or_equal_to(
        &self,
    ) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::GreaterThanOrEqualTo(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`GreaterThanOrEqualTo`](crate::types::FieldFilter::GreaterThanOrEqualTo).
    pub fn is_greater_than_or_equal_to(&self) -> bool {
        self.as_greater_than_or_equal_to().is_ok()
    }
    /// Tries to convert the enum instance into [`LessThan`](crate::types::FieldFilter::LessThan), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_less_than(&self) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::LessThan(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`LessThan`](crate::types::FieldFilter::LessThan).
    pub fn is_less_than(&self) -> bool {
        self.as_less_than().is_ok()
    }
    /// Tries to convert the enum instance into [`LessThanOrEqualTo`](crate::types::FieldFilter::LessThanOrEqualTo), extracting the inner [`FieldValue`](crate::types::FieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_less_than_or_equal_to(
        &self,
    ) -> std::result::Result<&crate::types::FieldValue, &Self> {
        if let FieldFilter::LessThanOrEqualTo(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`LessThanOrEqualTo`](crate::types::FieldFilter::LessThanOrEqualTo).
    pub fn is_less_than_or_equal_to(&self) -> bool {
        self.as_less_than_or_equal_to().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
