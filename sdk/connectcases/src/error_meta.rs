// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>We couldn't process your request because of an issue with the server. Try again later.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>We couldn't find the requested resource. Check that your resources exists and were created in the same Amazon Web Services Region as your request, and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The service quota has been exceeded. For a list of service quotas, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The rate has been exceeded for this API. Please try again after a few minutes.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The request isn't valid. Check the syntax and try again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetFieldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetFieldError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetFieldError> for Error {
    fn from(err: crate::error::BatchGetFieldError) -> Self {
        match err {
            crate::error::BatchGetFieldError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchGetFieldError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchGetFieldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchGetFieldError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchGetFieldError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchGetFieldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchPutFieldOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchPutFieldOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchPutFieldOptionsError> for Error {
    fn from(err: crate::error::BatchPutFieldOptionsError) -> Self {
        match err {
            crate::error::BatchPutFieldOptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchPutFieldOptionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchPutFieldOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchPutFieldOptionsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::BatchPutFieldOptionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchPutFieldOptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchPutFieldOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCaseError> for Error {
    fn from(err: crate::error::CreateCaseError) -> Self {
        match err {
            crate::error::CreateCaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCaseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateCaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainError> for Error {
    fn from(err: crate::error::CreateDomainError) -> Self {
        match err {
            crate::error::CreateDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDomainError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDomainError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDomainError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateDomainError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFieldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFieldError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFieldError> for Error {
    fn from(err: crate::error::CreateFieldError) -> Self {
        match err {
            crate::error::CreateFieldError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFieldError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFieldError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateFieldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFieldError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateFieldError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFieldError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFieldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLayoutError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLayoutError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLayoutError> for Error {
    fn from(err: crate::error::CreateLayoutError) -> Self {
        match err {
            crate::error::CreateLayoutError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLayoutError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateLayoutError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateLayoutError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateLayoutError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateLayoutError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateLayoutError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateLayoutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRelatedItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRelatedItemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRelatedItemError> for Error {
    fn from(err: crate::error::CreateRelatedItemError) -> Self {
        match err {
            crate::error::CreateRelatedItemError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateRelatedItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRelatedItemError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateRelatedItemError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateRelatedItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRelatedItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateRelatedItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTemplateError> for Error {
    fn from(err: crate::error::CreateTemplateError) -> Self {
        match err {
            crate::error::CreateTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCaseError> for Error {
    fn from(err: crate::error::GetCaseError) -> Self {
        match err {
            crate::error::GetCaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCaseEventConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCaseEventConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCaseEventConfigurationError> for Error {
    fn from(err: crate::error::GetCaseEventConfigurationError) -> Self {
        match err {
            crate::error::GetCaseEventConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCaseEventConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCaseEventConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCaseEventConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCaseEventConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCaseEventConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainError> for Error {
    fn from(err: crate::error::GetDomainError) -> Self {
        match err {
            crate::error::GetDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDomainError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDomainError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLayoutError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLayoutError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLayoutError> for Error {
    fn from(err: crate::error::GetLayoutError) -> Self {
        match err {
            crate::error::GetLayoutError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLayoutError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLayoutError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetLayoutError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLayoutError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLayoutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTemplateError> for Error {
    fn from(err: crate::error::GetTemplateError) -> Self {
        match err {
            crate::error::GetTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCasesForContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCasesForContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCasesForContactError> for Error {
    fn from(err: crate::error::ListCasesForContactError) -> Self {
        match err {
            crate::error::ListCasesForContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCasesForContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCasesForContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListCasesForContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCasesForContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCasesForContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainsError> for Error {
    fn from(err: crate::error::ListDomainsError) -> Self {
        match err {
            crate::error::ListDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDomainsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDomainsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFieldOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFieldOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFieldOptionsError> for Error {
    fn from(err: crate::error::ListFieldOptionsError) -> Self {
        match err {
            crate::error::ListFieldOptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFieldOptionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFieldOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFieldOptionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFieldOptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFieldOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFieldsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFieldsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFieldsError> for Error {
    fn from(err: crate::error::ListFieldsError) -> Self {
        match err {
            crate::error::ListFieldsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFieldsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFieldsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFieldsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFieldsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFieldsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLayoutsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLayoutsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLayoutsError> for Error {
    fn from(err: crate::error::ListLayoutsError) -> Self {
        match err {
            crate::error::ListLayoutsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLayoutsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListLayoutsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListLayoutsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListLayoutsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListLayoutsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplatesError> for Error {
    fn from(err: crate::error::ListTemplatesError) -> Self {
        match err {
            crate::error::ListTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutCaseEventConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutCaseEventConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutCaseEventConfigurationError> for Error {
    fn from(err: crate::error::PutCaseEventConfigurationError) -> Self {
        match err {
            crate::error::PutCaseEventConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutCaseEventConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutCaseEventConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutCaseEventConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutCaseEventConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutCaseEventConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchCasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchCasesError> for Error {
    fn from(err: crate::error::SearchCasesError) -> Self {
        match err {
            crate::error::SearchCasesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchCasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SearchCasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchCasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchCasesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SearchCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchRelatedItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchRelatedItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchRelatedItemsError> for Error {
    fn from(err: crate::error::SearchRelatedItemsError) -> Self {
        match err {
            crate::error::SearchRelatedItemsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchRelatedItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SearchRelatedItemsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchRelatedItemsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchRelatedItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SearchRelatedItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCaseError> for Error {
    fn from(err: crate::error::UpdateCaseError) -> Self {
        match err {
            crate::error::UpdateCaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateCaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateCaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateCaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFieldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFieldError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFieldError> for Error {
    fn from(err: crate::error::UpdateFieldError) -> Self {
        match err {
            crate::error::UpdateFieldError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFieldError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFieldError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateFieldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFieldError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFieldError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFieldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLayoutError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateLayoutError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLayoutError> for Error {
    fn from(err: crate::error::UpdateLayoutError) -> Self {
        match err {
            crate::error::UpdateLayoutError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateLayoutError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateLayoutError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateLayoutError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateLayoutError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateLayoutError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateLayoutError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateLayoutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplateError> for Error {
    fn from(err: crate::error::UpdateTemplateError) -> Self {
        match err {
            crate::error::UpdateTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
