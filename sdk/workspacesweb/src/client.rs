// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon WorkSpaces Web
///
/// Client for invoking operations on Amazon WorkSpaces Web. Each operation on Amazon WorkSpaces Web is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_workspacesweb::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_workspacesweb::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_workspacesweb::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateBrowserSettings`](crate::client::fluent_builders::AssociateBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateBrowserSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::AssociateBrowserSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`browser_settings_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateBrowserSettings::browser_settings_arn) / [`set_browser_settings_arn(Option<String>)`](crate::client::fluent_builders::AssociateBrowserSettings::set_browser_settings_arn): <p>The ARN of the browser settings.</p>
    /// - On success, responds with [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::AssociateBrowserSettingsOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`browser_settings_arn(Option<String>)`](crate::output::AssociateBrowserSettingsOutput::browser_settings_arn): <p>The ARN of the browser settings.</p>
    /// - On failure, responds with [`SdkError<AssociateBrowserSettingsError>`](crate::error::AssociateBrowserSettingsError)
    pub fn associate_browser_settings(
        &self,
    ) -> crate::client::fluent_builders::AssociateBrowserSettings {
        crate::client::fluent_builders::AssociateBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateNetworkSettings`](crate::client::fluent_builders::AssociateNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateNetworkSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::AssociateNetworkSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`network_settings_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateNetworkSettings::network_settings_arn) / [`set_network_settings_arn(Option<String>)`](crate::client::fluent_builders::AssociateNetworkSettings::set_network_settings_arn): <p>The ARN of the network settings.</p>
    /// - On success, responds with [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::AssociateNetworkSettingsOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`network_settings_arn(Option<String>)`](crate::output::AssociateNetworkSettingsOutput::network_settings_arn): <p>The ARN of the network settings.</p>
    /// - On failure, responds with [`SdkError<AssociateNetworkSettingsError>`](crate::error::AssociateNetworkSettingsError)
    pub fn associate_network_settings(
        &self,
    ) -> crate::client::fluent_builders::AssociateNetworkSettings {
        crate::client::fluent_builders::AssociateNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateTrustStore`](crate::client::fluent_builders::AssociateTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateTrustStore::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::AssociateTrustStore::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateTrustStore::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::AssociateTrustStore::set_trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On success, responds with [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::AssociateTrustStoreOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`trust_store_arn(Option<String>)`](crate::output::AssociateTrustStoreOutput::trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On failure, responds with [`SdkError<AssociateTrustStoreError>`](crate::error::AssociateTrustStoreError)
    pub fn associate_trust_store(&self) -> crate::client::fluent_builders::AssociateTrustStore {
        crate::client::fluent_builders::AssociateTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateUserAccessLoggingSettings`](crate::client::fluent_builders::AssociateUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateUserAccessLoggingSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::AssociateUserAccessLoggingSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`user_access_logging_settings_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateUserAccessLoggingSettings::user_access_logging_settings_arn) / [`set_user_access_logging_settings_arn(Option<String>)`](crate::client::fluent_builders::AssociateUserAccessLoggingSettings::set_user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    /// - On success, responds with [`AssociateUserAccessLoggingSettingsOutput`](crate::output::AssociateUserAccessLoggingSettingsOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::AssociateUserAccessLoggingSettingsOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`user_access_logging_settings_arn(Option<String>)`](crate::output::AssociateUserAccessLoggingSettingsOutput::user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    /// - On failure, responds with [`SdkError<AssociateUserAccessLoggingSettingsError>`](crate::error::AssociateUserAccessLoggingSettingsError)
    pub fn associate_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::AssociateUserAccessLoggingSettings {
        crate::client::fluent_builders::AssociateUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateUserSettings`](crate::client::fluent_builders::AssociateUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateUserSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::AssociateUserSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`user_settings_arn(impl Into<String>)`](crate::client::fluent_builders::AssociateUserSettings::user_settings_arn) / [`set_user_settings_arn(Option<String>)`](crate::client::fluent_builders::AssociateUserSettings::set_user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On success, responds with [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::AssociateUserSettingsOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`user_settings_arn(Option<String>)`](crate::output::AssociateUserSettingsOutput::user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On failure, responds with [`SdkError<AssociateUserSettingsError>`](crate::error::AssociateUserSettingsError)
    pub fn associate_user_settings(&self) -> crate::client::fluent_builders::AssociateUserSettings {
        crate::client::fluent_builders::AssociateUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBrowserSettings`](crate::client::fluent_builders::CreateBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateBrowserSettings::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateBrowserSettings::set_tags): <p>The tags to add to the browser settings resource. A tag is a key-value pair.</p>
    ///   - [`customer_managed_key(impl Into<String>)`](crate::client::fluent_builders::CreateBrowserSettings::customer_managed_key) / [`set_customer_managed_key(Option<String>)`](crate::client::fluent_builders::CreateBrowserSettings::set_customer_managed_key): <p>The custom managed key of the browser settings.</p>
    ///   - [`additional_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::CreateBrowserSettings::additional_encryption_context) / [`set_additional_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateBrowserSettings::set_additional_encryption_context): <p>Additional encryption context of the browser settings.</p>
    ///   - [`browser_policy(impl Into<String>)`](crate::client::fluent_builders::CreateBrowserSettings::browser_policy) / [`set_browser_policy(Option<String>)`](crate::client::fluent_builders::CreateBrowserSettings::set_browser_policy): <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateBrowserSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateBrowserSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK. </p>
    /// - On success, responds with [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput) with field(s):
    ///   - [`browser_settings_arn(Option<String>)`](crate::output::CreateBrowserSettingsOutput::browser_settings_arn): <p>The ARN of the browser settings.</p>
    /// - On failure, responds with [`SdkError<CreateBrowserSettingsError>`](crate::error::CreateBrowserSettingsError)
    pub fn create_browser_settings(&self) -> crate::client::fluent_builders::CreateBrowserSettings {
        crate::client::fluent_builders::CreateBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateIdentityProvider`](crate::client::fluent_builders::CreateIdentityProvider) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::CreateIdentityProvider::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::CreateIdentityProvider::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`identity_provider_name(impl Into<String>)`](crate::client::fluent_builders::CreateIdentityProvider::identity_provider_name) / [`set_identity_provider_name(Option<String>)`](crate::client::fluent_builders::CreateIdentityProvider::set_identity_provider_name): <p>The identity provider name.</p>
    ///   - [`identity_provider_type(IdentityProviderType)`](crate::client::fluent_builders::CreateIdentityProvider::identity_provider_type) / [`set_identity_provider_type(Option<IdentityProviderType>)`](crate::client::fluent_builders::CreateIdentityProvider::set_identity_provider_type): <p>The identity provider type.</p>
    ///   - [`identity_provider_details(HashMap<String, String>)`](crate::client::fluent_builders::CreateIdentityProvider::identity_provider_details) / [`set_identity_provider_details(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateIdentityProvider::set_identity_provider_details): <p>The identity provider details. The following list describes the provider detail keys for each identity provider type. </p>  <ul>   <li> <p>For Google and Login with Amazon:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>    </ul> </li>   <li> <p>For Facebook:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>     <li> <p> <code>api_version</code> </p> </li>    </ul> </li>   <li> <p>For Sign in with Apple:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>team_id</code> </p> </li>     <li> <p> <code>key_id</code> </p> </li>     <li> <p> <code>private_key</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>    </ul> </li>   <li> <p>For OIDC providers:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>attributes_request_method</code> </p> </li>     <li> <p> <code>oidc_issuer</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>     <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>    </ul> </li>   <li> <p>For SAML providers:</p>    <ul>     <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li>     <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li>    </ul> </li>  </ul>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateIdentityProvider::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateIdentityProvider::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput) with field(s):
    ///   - [`identity_provider_arn(Option<String>)`](crate::output::CreateIdentityProviderOutput::identity_provider_arn): <p>The ARN of the identity provider.</p>
    /// - On failure, responds with [`SdkError<CreateIdentityProviderError>`](crate::error::CreateIdentityProviderError)
    pub fn create_identity_provider(
        &self,
    ) -> crate::client::fluent_builders::CreateIdentityProvider {
        crate::client::fluent_builders::CreateIdentityProvider::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateNetworkSettings`](crate::client::fluent_builders::CreateNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vpc_id(impl Into<String>)`](crate::client::fluent_builders::CreateNetworkSettings::vpc_id) / [`set_vpc_id(Option<String>)`](crate::client::fluent_builders::CreateNetworkSettings::set_vpc_id): <p>The VPC that streaming instances will connect to.</p>
    ///   - [`subnet_ids(Vec<String>)`](crate::client::fluent_builders::CreateNetworkSettings::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateNetworkSettings::set_subnet_ids): <p>The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::CreateNetworkSettings::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateNetworkSettings::set_security_group_ids): <p>One or more security groups used to control access from streaming instances to your VPC.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateNetworkSettings::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateNetworkSettings::set_tags): <p>The tags to add to the network settings resource. A tag is a key-value pair.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateNetworkSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateNetworkSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput) with field(s):
    ///   - [`network_settings_arn(Option<String>)`](crate::output::CreateNetworkSettingsOutput::network_settings_arn): <p>The ARN of the network settings.</p>
    /// - On failure, responds with [`SdkError<CreateNetworkSettingsError>`](crate::error::CreateNetworkSettingsError)
    pub fn create_network_settings(&self) -> crate::client::fluent_builders::CreateNetworkSettings {
        crate::client::fluent_builders::CreateNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePortal`](crate::client::fluent_builders::CreatePortal) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`display_name(impl Into<String>)`](crate::client::fluent_builders::CreatePortal::display_name) / [`set_display_name(Option<String>)`](crate::client::fluent_builders::CreatePortal::set_display_name): <p>The name of the web portal. This is not visible to users who log into the web portal.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePortal::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePortal::set_tags): <p>The tags to add to the web portal. A tag is a key-value pair.</p>
    ///   - [`customer_managed_key(impl Into<String>)`](crate::client::fluent_builders::CreatePortal::customer_managed_key) / [`set_customer_managed_key(Option<String>)`](crate::client::fluent_builders::CreatePortal::set_customer_managed_key): <p>The customer managed key of the web portal.</p>
    ///   - [`additional_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::CreatePortal::additional_encryption_context) / [`set_additional_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreatePortal::set_additional_encryption_context): <p>The additional encryption context of the portal.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreatePortal::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreatePortal::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    ///   - [`authentication_type(AuthenticationType)`](crate::client::fluent_builders::CreatePortal::authentication_type) / [`set_authentication_type(Option<AuthenticationType>)`](crate::client::fluent_builders::CreatePortal::set_authentication_type): <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>  <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>  <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    /// - On success, responds with [`CreatePortalOutput`](crate::output::CreatePortalOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::CreatePortalOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`portal_endpoint(Option<String>)`](crate::output::CreatePortalOutput::portal_endpoint): <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    /// - On failure, responds with [`SdkError<CreatePortalError>`](crate::error::CreatePortalError)
    pub fn create_portal(&self) -> crate::client::fluent_builders::CreatePortal {
        crate::client::fluent_builders::CreatePortal::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTrustStore`](crate::client::fluent_builders::CreateTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_list(Vec<Blob>)`](crate::client::fluent_builders::CreateTrustStore::certificate_list) / [`set_certificate_list(Option<Vec<Blob>>)`](crate::client::fluent_builders::CreateTrustStore::set_certificate_list): <p>A list of CA certificates to be added to the trust store.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTrustStore::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTrustStore::set_tags): <p>The tags to add to the trust store. A tag is a key-value pair.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateTrustStore::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateTrustStore::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput) with field(s):
    ///   - [`trust_store_arn(Option<String>)`](crate::output::CreateTrustStoreOutput::trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On failure, responds with [`SdkError<CreateTrustStoreError>`](crate::error::CreateTrustStoreError)
    pub fn create_trust_store(&self) -> crate::client::fluent_builders::CreateTrustStore {
        crate::client::fluent_builders::CreateTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateUserAccessLoggingSettings`](crate::client::fluent_builders::CreateUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`kinesis_stream_arn(impl Into<String>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::kinesis_stream_arn) / [`set_kinesis_stream_arn(Option<String>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::set_kinesis_stream_arn): <p>The ARN of the Kinesis stream.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::set_tags): <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateUserAccessLoggingSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`CreateUserAccessLoggingSettingsOutput`](crate::output::CreateUserAccessLoggingSettingsOutput) with field(s):
    ///   - [`user_access_logging_settings_arn(Option<String>)`](crate::output::CreateUserAccessLoggingSettingsOutput::user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    /// - On failure, responds with [`SdkError<CreateUserAccessLoggingSettingsError>`](crate::error::CreateUserAccessLoggingSettingsError)
    pub fn create_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::CreateUserAccessLoggingSettings {
        crate::client::fluent_builders::CreateUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateUserSettings`](crate::client::fluent_builders::CreateUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`copy_allowed(EnabledType)`](crate::client::fluent_builders::CreateUserSettings::copy_allowed) / [`set_copy_allowed(Option<EnabledType>)`](crate::client::fluent_builders::CreateUserSettings::set_copy_allowed): <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    ///   - [`paste_allowed(EnabledType)`](crate::client::fluent_builders::CreateUserSettings::paste_allowed) / [`set_paste_allowed(Option<EnabledType>)`](crate::client::fluent_builders::CreateUserSettings::set_paste_allowed): <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    ///   - [`download_allowed(EnabledType)`](crate::client::fluent_builders::CreateUserSettings::download_allowed) / [`set_download_allowed(Option<EnabledType>)`](crate::client::fluent_builders::CreateUserSettings::set_download_allowed): <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    ///   - [`upload_allowed(EnabledType)`](crate::client::fluent_builders::CreateUserSettings::upload_allowed) / [`set_upload_allowed(Option<EnabledType>)`](crate::client::fluent_builders::CreateUserSettings::set_upload_allowed): <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    ///   - [`print_allowed(EnabledType)`](crate::client::fluent_builders::CreateUserSettings::print_allowed) / [`set_print_allowed(Option<EnabledType>)`](crate::client::fluent_builders::CreateUserSettings::set_print_allowed): <p>Specifies whether the user can print to the local device.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateUserSettings::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateUserSettings::set_tags): <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    ///   - [`disconnect_timeout_in_minutes(i32)`](crate::client::fluent_builders::CreateUserSettings::disconnect_timeout_in_minutes) / [`set_disconnect_timeout_in_minutes(Option<i32>)`](crate::client::fluent_builders::CreateUserSettings::set_disconnect_timeout_in_minutes): <p>The amount of time that a streaming session remains active after users disconnect.</p>
    ///   - [`idle_disconnect_timeout_in_minutes(i32)`](crate::client::fluent_builders::CreateUserSettings::idle_disconnect_timeout_in_minutes) / [`set_idle_disconnect_timeout_in_minutes(Option<i32>)`](crate::client::fluent_builders::CreateUserSettings::set_idle_disconnect_timeout_in_minutes): <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateUserSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateUserSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput) with field(s):
    ///   - [`user_settings_arn(Option<String>)`](crate::output::CreateUserSettingsOutput::user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On failure, responds with [`SdkError<CreateUserSettingsError>`](crate::error::CreateUserSettingsError)
    pub fn create_user_settings(&self) -> crate::client::fluent_builders::CreateUserSettings {
        crate::client::fluent_builders::CreateUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBrowserSettings`](crate::client::fluent_builders::DeleteBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`browser_settings_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteBrowserSettings::browser_settings_arn) / [`set_browser_settings_arn(Option<String>)`](crate::client::fluent_builders::DeleteBrowserSettings::set_browser_settings_arn): <p>The ARN of the browser settings.</p>
    /// - On success, responds with [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput)

    /// - On failure, responds with [`SdkError<DeleteBrowserSettingsError>`](crate::error::DeleteBrowserSettingsError)
    pub fn delete_browser_settings(&self) -> crate::client::fluent_builders::DeleteBrowserSettings {
        crate::client::fluent_builders::DeleteBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteIdentityProvider`](crate::client::fluent_builders::DeleteIdentityProvider) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_provider_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteIdentityProvider::identity_provider_arn) / [`set_identity_provider_arn(Option<String>)`](crate::client::fluent_builders::DeleteIdentityProvider::set_identity_provider_arn): <p>The ARN of the identity provider.</p>
    /// - On success, responds with [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput)

    /// - On failure, responds with [`SdkError<DeleteIdentityProviderError>`](crate::error::DeleteIdentityProviderError)
    pub fn delete_identity_provider(
        &self,
    ) -> crate::client::fluent_builders::DeleteIdentityProvider {
        crate::client::fluent_builders::DeleteIdentityProvider::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteNetworkSettings`](crate::client::fluent_builders::DeleteNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_settings_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteNetworkSettings::network_settings_arn) / [`set_network_settings_arn(Option<String>)`](crate::client::fluent_builders::DeleteNetworkSettings::set_network_settings_arn): <p>The ARN of the network settings.</p>
    /// - On success, responds with [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput)

    /// - On failure, responds with [`SdkError<DeleteNetworkSettingsError>`](crate::error::DeleteNetworkSettingsError)
    pub fn delete_network_settings(&self) -> crate::client::fluent_builders::DeleteNetworkSettings {
        crate::client::fluent_builders::DeleteNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePortal`](crate::client::fluent_builders::DeletePortal) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DeletePortal::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DeletePortal::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DeletePortalOutput`](crate::output::DeletePortalOutput)

    /// - On failure, responds with [`SdkError<DeletePortalError>`](crate::error::DeletePortalError)
    pub fn delete_portal(&self) -> crate::client::fluent_builders::DeletePortal {
        crate::client::fluent_builders::DeletePortal::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTrustStore`](crate::client::fluent_builders::DeleteTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteTrustStore::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::DeleteTrustStore::set_trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On success, responds with [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput)

    /// - On failure, responds with [`SdkError<DeleteTrustStoreError>`](crate::error::DeleteTrustStoreError)
    pub fn delete_trust_store(&self) -> crate::client::fluent_builders::DeleteTrustStore {
        crate::client::fluent_builders::DeleteTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteUserAccessLoggingSettings`](crate::client::fluent_builders::DeleteUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_access_logging_settings_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteUserAccessLoggingSettings::user_access_logging_settings_arn) / [`set_user_access_logging_settings_arn(Option<String>)`](crate::client::fluent_builders::DeleteUserAccessLoggingSettings::set_user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    /// - On success, responds with [`DeleteUserAccessLoggingSettingsOutput`](crate::output::DeleteUserAccessLoggingSettingsOutput)

    /// - On failure, responds with [`SdkError<DeleteUserAccessLoggingSettingsError>`](crate::error::DeleteUserAccessLoggingSettingsError)
    pub fn delete_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::DeleteUserAccessLoggingSettings {
        crate::client::fluent_builders::DeleteUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteUserSettings`](crate::client::fluent_builders::DeleteUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_settings_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteUserSettings::user_settings_arn) / [`set_user_settings_arn(Option<String>)`](crate::client::fluent_builders::DeleteUserSettings::set_user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On success, responds with [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput)

    /// - On failure, responds with [`SdkError<DeleteUserSettingsError>`](crate::error::DeleteUserSettingsError)
    pub fn delete_user_settings(&self) -> crate::client::fluent_builders::DeleteUserSettings {
        crate::client::fluent_builders::DeleteUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateBrowserSettings`](crate::client::fluent_builders::DisassociateBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateBrowserSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DisassociateBrowserSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput)

    /// - On failure, responds with [`SdkError<DisassociateBrowserSettingsError>`](crate::error::DisassociateBrowserSettingsError)
    pub fn disassociate_browser_settings(
        &self,
    ) -> crate::client::fluent_builders::DisassociateBrowserSettings {
        crate::client::fluent_builders::DisassociateBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateNetworkSettings`](crate::client::fluent_builders::DisassociateNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateNetworkSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DisassociateNetworkSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput)

    /// - On failure, responds with [`SdkError<DisassociateNetworkSettingsError>`](crate::error::DisassociateNetworkSettingsError)
    pub fn disassociate_network_settings(
        &self,
    ) -> crate::client::fluent_builders::DisassociateNetworkSettings {
        crate::client::fluent_builders::DisassociateNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateTrustStore`](crate::client::fluent_builders::DisassociateTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateTrustStore::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DisassociateTrustStore::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput)

    /// - On failure, responds with [`SdkError<DisassociateTrustStoreError>`](crate::error::DisassociateTrustStoreError)
    pub fn disassociate_trust_store(
        &self,
    ) -> crate::client::fluent_builders::DisassociateTrustStore {
        crate::client::fluent_builders::DisassociateTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateUserAccessLoggingSettings`](crate::client::fluent_builders::DisassociateUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateUserAccessLoggingSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DisassociateUserAccessLoggingSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DisassociateUserAccessLoggingSettingsOutput`](crate::output::DisassociateUserAccessLoggingSettingsOutput)

    /// - On failure, responds with [`SdkError<DisassociateUserAccessLoggingSettingsError>`](crate::error::DisassociateUserAccessLoggingSettingsError)
    pub fn disassociate_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::DisassociateUserAccessLoggingSettings {
        crate::client::fluent_builders::DisassociateUserAccessLoggingSettings::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DisassociateUserSettings`](crate::client::fluent_builders::DisassociateUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateUserSettings::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::DisassociateUserSettings::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput)

    /// - On failure, responds with [`SdkError<DisassociateUserSettingsError>`](crate::error::DisassociateUserSettingsError)
    pub fn disassociate_user_settings(
        &self,
    ) -> crate::client::fluent_builders::DisassociateUserSettings {
        crate::client::fluent_builders::DisassociateUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetBrowserSettings`](crate::client::fluent_builders::GetBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`browser_settings_arn(impl Into<String>)`](crate::client::fluent_builders::GetBrowserSettings::browser_settings_arn) / [`set_browser_settings_arn(Option<String>)`](crate::client::fluent_builders::GetBrowserSettings::set_browser_settings_arn): <p>The ARN of the browser settings.</p>
    /// - On success, responds with [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput) with field(s):
    ///   - [`browser_settings(Option<BrowserSettings>)`](crate::output::GetBrowserSettingsOutput::browser_settings): <p>The browser settings.</p>
    /// - On failure, responds with [`SdkError<GetBrowserSettingsError>`](crate::error::GetBrowserSettingsError)
    pub fn get_browser_settings(&self) -> crate::client::fluent_builders::GetBrowserSettings {
        crate::client::fluent_builders::GetBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetIdentityProvider`](crate::client::fluent_builders::GetIdentityProvider) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_provider_arn(impl Into<String>)`](crate::client::fluent_builders::GetIdentityProvider::identity_provider_arn) / [`set_identity_provider_arn(Option<String>)`](crate::client::fluent_builders::GetIdentityProvider::set_identity_provider_arn): <p>The ARN of the identity provider.</p>
    /// - On success, responds with [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput) with field(s):
    ///   - [`identity_provider(Option<IdentityProvider>)`](crate::output::GetIdentityProviderOutput::identity_provider): <p>The identity provider.</p>
    /// - On failure, responds with [`SdkError<GetIdentityProviderError>`](crate::error::GetIdentityProviderError)
    pub fn get_identity_provider(&self) -> crate::client::fluent_builders::GetIdentityProvider {
        crate::client::fluent_builders::GetIdentityProvider::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetNetworkSettings`](crate::client::fluent_builders::GetNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_settings_arn(impl Into<String>)`](crate::client::fluent_builders::GetNetworkSettings::network_settings_arn) / [`set_network_settings_arn(Option<String>)`](crate::client::fluent_builders::GetNetworkSettings::set_network_settings_arn): <p>The ARN of the network settings.</p>
    /// - On success, responds with [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput) with field(s):
    ///   - [`network_settings(Option<NetworkSettings>)`](crate::output::GetNetworkSettingsOutput::network_settings): <p>The network settings.</p>
    /// - On failure, responds with [`SdkError<GetNetworkSettingsError>`](crate::error::GetNetworkSettingsError)
    pub fn get_network_settings(&self) -> crate::client::fluent_builders::GetNetworkSettings {
        crate::client::fluent_builders::GetNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPortal`](crate::client::fluent_builders::GetPortal) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::GetPortal::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::GetPortal::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`GetPortalOutput`](crate::output::GetPortalOutput) with field(s):
    ///   - [`portal(Option<Portal>)`](crate::output::GetPortalOutput::portal): <p>The web portal.</p>
    /// - On failure, responds with [`SdkError<GetPortalError>`](crate::error::GetPortalError)
    pub fn get_portal(&self) -> crate::client::fluent_builders::GetPortal {
        crate::client::fluent_builders::GetPortal::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPortalServiceProviderMetadata`](crate::client::fluent_builders::GetPortalServiceProviderMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::GetPortalServiceProviderMetadata::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::GetPortalServiceProviderMetadata::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput) with field(s):
    ///   - [`portal_arn(Option<String>)`](crate::output::GetPortalServiceProviderMetadataOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`service_provider_saml_metadata(Option<String>)`](crate::output::GetPortalServiceProviderMetadataOutput::service_provider_saml_metadata): <p>The service provider SAML metadata.</p>
    /// - On failure, responds with [`SdkError<GetPortalServiceProviderMetadataError>`](crate::error::GetPortalServiceProviderMetadataError)
    pub fn get_portal_service_provider_metadata(
        &self,
    ) -> crate::client::fluent_builders::GetPortalServiceProviderMetadata {
        crate::client::fluent_builders::GetPortalServiceProviderMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTrustStore`](crate::client::fluent_builders::GetTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::GetTrustStore::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::GetTrustStore::set_trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On success, responds with [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput) with field(s):
    ///   - [`trust_store(Option<TrustStore>)`](crate::output::GetTrustStoreOutput::trust_store): <p>The trust store.</p>
    /// - On failure, responds with [`SdkError<GetTrustStoreError>`](crate::error::GetTrustStoreError)
    pub fn get_trust_store(&self) -> crate::client::fluent_builders::GetTrustStore {
        crate::client::fluent_builders::GetTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTrustStoreCertificate`](crate::client::fluent_builders::GetTrustStoreCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::GetTrustStoreCertificate::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::GetTrustStoreCertificate::set_trust_store_arn): <p>The ARN of the trust store certificate.</p>
    ///   - [`thumbprint(impl Into<String>)`](crate::client::fluent_builders::GetTrustStoreCertificate::thumbprint) / [`set_thumbprint(Option<String>)`](crate::client::fluent_builders::GetTrustStoreCertificate::set_thumbprint): <p>The thumbprint of the trust store certificate.</p>
    /// - On success, responds with [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput) with field(s):
    ///   - [`trust_store_arn(Option<String>)`](crate::output::GetTrustStoreCertificateOutput::trust_store_arn): <p>The ARN of the trust store certificate.</p>
    ///   - [`certificate(Option<Certificate>)`](crate::output::GetTrustStoreCertificateOutput::certificate): <p>The certificate of the trust store certificate.</p>
    /// - On failure, responds with [`SdkError<GetTrustStoreCertificateError>`](crate::error::GetTrustStoreCertificateError)
    pub fn get_trust_store_certificate(
        &self,
    ) -> crate::client::fluent_builders::GetTrustStoreCertificate {
        crate::client::fluent_builders::GetTrustStoreCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetUserAccessLoggingSettings`](crate::client::fluent_builders::GetUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_access_logging_settings_arn(impl Into<String>)`](crate::client::fluent_builders::GetUserAccessLoggingSettings::user_access_logging_settings_arn) / [`set_user_access_logging_settings_arn(Option<String>)`](crate::client::fluent_builders::GetUserAccessLoggingSettings::set_user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    /// - On success, responds with [`GetUserAccessLoggingSettingsOutput`](crate::output::GetUserAccessLoggingSettingsOutput) with field(s):
    ///   - [`user_access_logging_settings(Option<UserAccessLoggingSettings>)`](crate::output::GetUserAccessLoggingSettingsOutput::user_access_logging_settings): <p>The user access logging settings.</p>
    /// - On failure, responds with [`SdkError<GetUserAccessLoggingSettingsError>`](crate::error::GetUserAccessLoggingSettingsError)
    pub fn get_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::GetUserAccessLoggingSettings {
        crate::client::fluent_builders::GetUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetUserSettings`](crate::client::fluent_builders::GetUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_settings_arn(impl Into<String>)`](crate::client::fluent_builders::GetUserSettings::user_settings_arn) / [`set_user_settings_arn(Option<String>)`](crate::client::fluent_builders::GetUserSettings::set_user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On success, responds with [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput) with field(s):
    ///   - [`user_settings(Option<UserSettings>)`](crate::output::GetUserSettingsOutput::user_settings): <p>The user settings.</p>
    /// - On failure, responds with [`SdkError<GetUserSettingsError>`](crate::error::GetUserSettingsError)
    pub fn get_user_settings(&self) -> crate::client::fluent_builders::GetUserSettings {
        crate::client::fluent_builders::GetUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListBrowserSettings`](crate::client::fluent_builders::ListBrowserSettings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListBrowserSettings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListBrowserSettings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListBrowserSettings::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListBrowserSettings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListBrowserSettings::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput) with field(s):
    ///   - [`browser_settings(Option<Vec<BrowserSettingsSummary>>)`](crate::output::ListBrowserSettingsOutput::browser_settings): <p>The browser settings.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListBrowserSettingsOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    /// - On failure, responds with [`SdkError<ListBrowserSettingsError>`](crate::error::ListBrowserSettingsError)
    pub fn list_browser_settings(&self) -> crate::client::fluent_builders::ListBrowserSettings {
        crate::client::fluent_builders::ListBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListIdentityProviders`](crate::client::fluent_builders::ListIdentityProviders) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListIdentityProviders::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListIdentityProviders::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListIdentityProviders::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListIdentityProviders::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListIdentityProviders::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::ListIdentityProviders::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::ListIdentityProviders::set_portal_arn): <p>The ARN of the web portal.</p>
    /// - On success, responds with [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListIdentityProvidersOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`identity_providers(Option<Vec<IdentityProviderSummary>>)`](crate::output::ListIdentityProvidersOutput::identity_providers): <p>The identity providers.</p>
    /// - On failure, responds with [`SdkError<ListIdentityProvidersError>`](crate::error::ListIdentityProvidersError)
    pub fn list_identity_providers(&self) -> crate::client::fluent_builders::ListIdentityProviders {
        crate::client::fluent_builders::ListIdentityProviders::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNetworkSettings`](crate::client::fluent_builders::ListNetworkSettings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNetworkSettings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNetworkSettings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNetworkSettings::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNetworkSettings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNetworkSettings::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput) with field(s):
    ///   - [`network_settings(Option<Vec<NetworkSettingsSummary>>)`](crate::output::ListNetworkSettingsOutput::network_settings): <p>The network settings.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNetworkSettingsOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    /// - On failure, responds with [`SdkError<ListNetworkSettingsError>`](crate::error::ListNetworkSettingsError)
    pub fn list_network_settings(&self) -> crate::client::fluent_builders::ListNetworkSettings {
        crate::client::fluent_builders::ListNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPortals`](crate::client::fluent_builders::ListPortals) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPortals::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPortals::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPortals::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPortals::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPortals::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListPortalsOutput`](crate::output::ListPortalsOutput) with field(s):
    ///   - [`portals(Option<Vec<PortalSummary>>)`](crate::output::ListPortalsOutput::portals): <p>The portals in the list.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPortalsOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation. </p>
    /// - On failure, responds with [`SdkError<ListPortalsError>`](crate::error::ListPortalsError)
    pub fn list_portals(&self) -> crate::client::fluent_builders::ListPortals {
        crate::client::fluent_builders::ListPortals::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags of the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTrustStoreCertificates`](crate::client::fluent_builders::ListTrustStoreCertificates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTrustStoreCertificates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::ListTrustStoreCertificates::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::ListTrustStoreCertificates::set_trust_store_arn): <p>The ARN of the trust store</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTrustStoreCertificates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTrustStoreCertificates::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTrustStoreCertificates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTrustStoreCertificates::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput) with field(s):
    ///   - [`certificate_list(Option<Vec<CertificateSummary>>)`](crate::output::ListTrustStoreCertificatesOutput::certificate_list): <p>The certificate list.</p>
    ///   - [`trust_store_arn(Option<String>)`](crate::output::ListTrustStoreCertificatesOutput::trust_store_arn): <p>The ARN of the trust store.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTrustStoreCertificatesOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
    /// - On failure, responds with [`SdkError<ListTrustStoreCertificatesError>`](crate::error::ListTrustStoreCertificatesError)
    pub fn list_trust_store_certificates(
        &self,
    ) -> crate::client::fluent_builders::ListTrustStoreCertificates {
        crate::client::fluent_builders::ListTrustStoreCertificates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTrustStores`](crate::client::fluent_builders::ListTrustStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTrustStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTrustStores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTrustStores::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTrustStores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTrustStores::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput) with field(s):
    ///   - [`trust_stores(Option<Vec<TrustStoreSummary>>)`](crate::output::ListTrustStoresOutput::trust_stores): <p>The trust stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTrustStoresOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    /// - On failure, responds with [`SdkError<ListTrustStoresError>`](crate::error::ListTrustStoresError)
    pub fn list_trust_stores(&self) -> crate::client::fluent_builders::ListTrustStores {
        crate::client::fluent_builders::ListTrustStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListUserAccessLoggingSettings`](crate::client::fluent_builders::ListUserAccessLoggingSettings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListUserAccessLoggingSettings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListUserAccessLoggingSettings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListUserAccessLoggingSettings::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListUserAccessLoggingSettings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListUserAccessLoggingSettings::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListUserAccessLoggingSettingsOutput`](crate::output::ListUserAccessLoggingSettingsOutput) with field(s):
    ///   - [`user_access_logging_settings(Option<Vec<UserAccessLoggingSettingsSummary>>)`](crate::output::ListUserAccessLoggingSettingsOutput::user_access_logging_settings): <p>The user access logging settings.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListUserAccessLoggingSettingsOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation.</p>
    /// - On failure, responds with [`SdkError<ListUserAccessLoggingSettingsError>`](crate::error::ListUserAccessLoggingSettingsError)
    pub fn list_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::ListUserAccessLoggingSettings {
        crate::client::fluent_builders::ListUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListUserSettings`](crate::client::fluent_builders::ListUserSettings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListUserSettings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListUserSettings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListUserSettings::set_next_token): <p>The pagination token used to retrieve the next page of results for this operation. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListUserSettings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListUserSettings::set_max_results): <p>The maximum number of results to be included in the next page.</p>
    /// - On success, responds with [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput) with field(s):
    ///   - [`user_settings(Option<Vec<UserSettingsSummary>>)`](crate::output::ListUserSettingsOutput::user_settings): <p>The user settings.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListUserSettingsOutput::next_token): <p>The pagination token used to retrieve the next page of results for this operation. </p>
    /// - On failure, responds with [`SdkError<ListUserSettingsError>`](crate::error::ListUserSettingsError)
    pub fn list_user_settings(&self) -> crate::client::fluent_builders::ListUserSettings {
        crate::client::fluent_builders::ListUserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags of the resource.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::TagResource::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::TagResource::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of tag keys to remove from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBrowserSettings`](crate::client::fluent_builders::UpdateBrowserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`browser_settings_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::browser_settings_arn) / [`set_browser_settings_arn(Option<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::set_browser_settings_arn): <p>The ARN of the browser settings.</p>
    ///   - [`browser_policy(impl Into<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::browser_policy) / [`set_browser_policy(Option<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::set_browser_policy): <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions. </p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateBrowserSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput) with field(s):
    ///   - [`browser_settings(Option<BrowserSettings>)`](crate::output::UpdateBrowserSettingsOutput::browser_settings): <p>The browser settings.</p>
    /// - On failure, responds with [`SdkError<UpdateBrowserSettingsError>`](crate::error::UpdateBrowserSettingsError)
    pub fn update_browser_settings(&self) -> crate::client::fluent_builders::UpdateBrowserSettings {
        crate::client::fluent_builders::UpdateBrowserSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateIdentityProvider`](crate::client::fluent_builders::UpdateIdentityProvider) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_provider_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::identity_provider_arn) / [`set_identity_provider_arn(Option<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::set_identity_provider_arn): <p>The ARN of the identity provider.</p>
    ///   - [`identity_provider_name(impl Into<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::identity_provider_name) / [`set_identity_provider_name(Option<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::set_identity_provider_name): <p>The name of the identity provider.</p>
    ///   - [`identity_provider_type(IdentityProviderType)`](crate::client::fluent_builders::UpdateIdentityProvider::identity_provider_type) / [`set_identity_provider_type(Option<IdentityProviderType>)`](crate::client::fluent_builders::UpdateIdentityProvider::set_identity_provider_type): <p>The type of the identity provider.</p>
    ///   - [`identity_provider_details(HashMap<String, String>)`](crate::client::fluent_builders::UpdateIdentityProvider::identity_provider_details) / [`set_identity_provider_details(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateIdentityProvider::set_identity_provider_details): <p>The details of the identity provider. The following list describes the provider detail keys for each identity provider type. </p>  <ul>   <li> <p>For Google and Login with Amazon:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>    </ul> </li>   <li> <p>For Facebook:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>     <li> <p> <code>api_version</code> </p> </li>    </ul> </li>   <li> <p>For Sign in with Apple:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>team_id</code> </p> </li>     <li> <p> <code>key_id</code> </p> </li>     <li> <p> <code>private_key</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>    </ul> </li>   <li> <p>For OIDC providers:</p>    <ul>     <li> <p> <code>client_id</code> </p> </li>     <li> <p> <code>client_secret</code> </p> </li>     <li> <p> <code>attributes_request_method</code> </p> </li>     <li> <p> <code>oidc_issuer</code> </p> </li>     <li> <p> <code>authorize_scopes</code> </p> </li>     <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>     <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li>    </ul> </li>   <li> <p>For SAML providers:</p>    <ul>     <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li>     <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li>    </ul> </li>  </ul>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateIdentityProvider::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput) with field(s):
    ///   - [`identity_provider(Option<IdentityProvider>)`](crate::output::UpdateIdentityProviderOutput::identity_provider): <p>The identity provider.</p>
    /// - On failure, responds with [`SdkError<UpdateIdentityProviderError>`](crate::error::UpdateIdentityProviderError)
    pub fn update_identity_provider(
        &self,
    ) -> crate::client::fluent_builders::UpdateIdentityProvider {
        crate::client::fluent_builders::UpdateIdentityProvider::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNetworkSettings`](crate::client::fluent_builders::UpdateNetworkSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_settings_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::network_settings_arn) / [`set_network_settings_arn(Option<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::set_network_settings_arn): <p>The ARN of the network settings.</p>
    ///   - [`vpc_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::vpc_id) / [`set_vpc_id(Option<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::set_vpc_id): <p>The VPC that streaming instances will connect to.</p>
    ///   - [`subnet_ids(Vec<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateNetworkSettings::set_subnet_ids): <p>The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two of these subnets must be in different availability zones.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateNetworkSettings::set_security_group_ids): <p>One or more security groups used to control access from streaming instances to your VPC.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateNetworkSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput) with field(s):
    ///   - [`network_settings(Option<NetworkSettings>)`](crate::output::UpdateNetworkSettingsOutput::network_settings): <p>The network settings.</p>
    /// - On failure, responds with [`SdkError<UpdateNetworkSettingsError>`](crate::error::UpdateNetworkSettingsError)
    pub fn update_network_settings(&self) -> crate::client::fluent_builders::UpdateNetworkSettings {
        crate::client::fluent_builders::UpdateNetworkSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePortal`](crate::client::fluent_builders::UpdatePortal) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`portal_arn(impl Into<String>)`](crate::client::fluent_builders::UpdatePortal::portal_arn) / [`set_portal_arn(Option<String>)`](crate::client::fluent_builders::UpdatePortal::set_portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`display_name(impl Into<String>)`](crate::client::fluent_builders::UpdatePortal::display_name) / [`set_display_name(Option<String>)`](crate::client::fluent_builders::UpdatePortal::set_display_name): <p>The name of the web portal. This is not visible to users who log into the web portal.</p>
    ///   - [`authentication_type(AuthenticationType)`](crate::client::fluent_builders::UpdatePortal::authentication_type) / [`set_authentication_type(Option<AuthenticationType>)`](crate::client::fluent_builders::UpdatePortal::set_authentication_type): <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>  <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>  <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    /// - On success, responds with [`UpdatePortalOutput`](crate::output::UpdatePortalOutput) with field(s):
    ///   - [`portal(Option<Portal>)`](crate::output::UpdatePortalOutput::portal): <p>The web portal.</p>
    /// - On failure, responds with [`SdkError<UpdatePortalError>`](crate::error::UpdatePortalError)
    pub fn update_portal(&self) -> crate::client::fluent_builders::UpdatePortal {
        crate::client::fluent_builders::UpdatePortal::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTrustStore`](crate::client::fluent_builders::UpdateTrustStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_store_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateTrustStore::trust_store_arn) / [`set_trust_store_arn(Option<String>)`](crate::client::fluent_builders::UpdateTrustStore::set_trust_store_arn): <p>The ARN of the trust store.</p>
    ///   - [`certificates_to_add(Vec<Blob>)`](crate::client::fluent_builders::UpdateTrustStore::certificates_to_add) / [`set_certificates_to_add(Option<Vec<Blob>>)`](crate::client::fluent_builders::UpdateTrustStore::set_certificates_to_add): <p>A list of CA certificates to add to the trust store.</p>
    ///   - [`certificates_to_delete(Vec<String>)`](crate::client::fluent_builders::UpdateTrustStore::certificates_to_delete) / [`set_certificates_to_delete(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateTrustStore::set_certificates_to_delete): <p>A list of CA certificates to delete from a trust store.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateTrustStore::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateTrustStore::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput) with field(s):
    ///   - [`trust_store_arn(Option<String>)`](crate::output::UpdateTrustStoreOutput::trust_store_arn): <p>The ARN of the trust store.</p>
    /// - On failure, responds with [`SdkError<UpdateTrustStoreError>`](crate::error::UpdateTrustStoreError)
    pub fn update_trust_store(&self) -> crate::client::fluent_builders::UpdateTrustStore {
        crate::client::fluent_builders::UpdateTrustStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateUserAccessLoggingSettings`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_access_logging_settings_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::user_access_logging_settings_arn) / [`set_user_access_logging_settings_arn(Option<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::set_user_access_logging_settings_arn): <p>The ARN of the user access logging settings.</p>
    ///   - [`kinesis_stream_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::kinesis_stream_arn) / [`set_kinesis_stream_arn(Option<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::set_kinesis_stream_arn): <p>The ARN of the Kinesis stream.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateUserAccessLoggingSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateUserAccessLoggingSettingsOutput`](crate::output::UpdateUserAccessLoggingSettingsOutput) with field(s):
    ///   - [`user_access_logging_settings(Option<UserAccessLoggingSettings>)`](crate::output::UpdateUserAccessLoggingSettingsOutput::user_access_logging_settings): <p>The user access logging settings.</p>
    /// - On failure, responds with [`SdkError<UpdateUserAccessLoggingSettingsError>`](crate::error::UpdateUserAccessLoggingSettingsError)
    pub fn update_user_access_logging_settings(
        &self,
    ) -> crate::client::fluent_builders::UpdateUserAccessLoggingSettings {
        crate::client::fluent_builders::UpdateUserAccessLoggingSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateUserSettings`](crate::client::fluent_builders::UpdateUserSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_settings_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateUserSettings::user_settings_arn) / [`set_user_settings_arn(Option<String>)`](crate::client::fluent_builders::UpdateUserSettings::set_user_settings_arn): <p>The ARN of the user settings.</p>
    ///   - [`copy_allowed(EnabledType)`](crate::client::fluent_builders::UpdateUserSettings::copy_allowed) / [`set_copy_allowed(Option<EnabledType>)`](crate::client::fluent_builders::UpdateUserSettings::set_copy_allowed): <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    ///   - [`paste_allowed(EnabledType)`](crate::client::fluent_builders::UpdateUserSettings::paste_allowed) / [`set_paste_allowed(Option<EnabledType>)`](crate::client::fluent_builders::UpdateUserSettings::set_paste_allowed): <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    ///   - [`download_allowed(EnabledType)`](crate::client::fluent_builders::UpdateUserSettings::download_allowed) / [`set_download_allowed(Option<EnabledType>)`](crate::client::fluent_builders::UpdateUserSettings::set_download_allowed): <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    ///   - [`upload_allowed(EnabledType)`](crate::client::fluent_builders::UpdateUserSettings::upload_allowed) / [`set_upload_allowed(Option<EnabledType>)`](crate::client::fluent_builders::UpdateUserSettings::set_upload_allowed): <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    ///   - [`print_allowed(EnabledType)`](crate::client::fluent_builders::UpdateUserSettings::print_allowed) / [`set_print_allowed(Option<EnabledType>)`](crate::client::fluent_builders::UpdateUserSettings::set_print_allowed): <p>Specifies whether the user can print to the local device.</p>
    ///   - [`disconnect_timeout_in_minutes(i32)`](crate::client::fluent_builders::UpdateUserSettings::disconnect_timeout_in_minutes) / [`set_disconnect_timeout_in_minutes(Option<i32>)`](crate::client::fluent_builders::UpdateUserSettings::set_disconnect_timeout_in_minutes): <p>The amount of time that a streaming session remains active after users disconnect.</p>
    ///   - [`idle_disconnect_timeout_in_minutes(i32)`](crate::client::fluent_builders::UpdateUserSettings::idle_disconnect_timeout_in_minutes) / [`set_idle_disconnect_timeout_in_minutes(Option<i32>)`](crate::client::fluent_builders::UpdateUserSettings::set_idle_disconnect_timeout_in_minutes): <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateUserSettings::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateUserSettings::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// - On success, responds with [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput) with field(s):
    ///   - [`user_settings(Option<UserSettings>)`](crate::output::UpdateUserSettingsOutput::user_settings): <p>The user settings.</p>
    /// - On failure, responds with [`SdkError<UpdateUserSettingsError>`](crate::error::UpdateUserSettingsError)
    pub fn update_user_settings(&self) -> crate::client::fluent_builders::UpdateUserSettings {
        crate::client::fluent_builders::UpdateUserSettings::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
