// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUserSettings`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`copy_allowed(EnabledType)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::copy_allowed) / [`set_copy_allowed(Option<EnabledType>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_copy_allowed):<br>required: **true**<br><p>Specifies whether the user can copy text from the streaming session to the local device.</p><br>
    ///   - [`paste_allowed(EnabledType)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::paste_allowed) / [`set_paste_allowed(Option<EnabledType>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_paste_allowed):<br>required: **true**<br><p>Specifies whether the user can paste text from the local device to the streaming session.</p><br>
    ///   - [`download_allowed(EnabledType)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::download_allowed) / [`set_download_allowed(Option<EnabledType>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_download_allowed):<br>required: **true**<br><p>Specifies whether the user can download files from the streaming session to the local device.</p><br>
    ///   - [`upload_allowed(EnabledType)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::upload_allowed) / [`set_upload_allowed(Option<EnabledType>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_upload_allowed):<br>required: **true**<br><p>Specifies whether the user can upload files from the local device to the streaming session.</p><br>
    ///   - [`print_allowed(EnabledType)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::print_allowed) / [`set_print_allowed(Option<EnabledType>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_print_allowed):<br>required: **true**<br><p>Specifies whether the user can print to the local device.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to add to the user settings resource. A tag is a key-value pair.</p><br>
    ///   - [`disconnect_timeout_in_minutes(i32)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::disconnect_timeout_in_minutes) / [`set_disconnect_timeout_in_minutes(Option<i32>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_disconnect_timeout_in_minutes):<br>required: **false**<br><p>The amount of time that a streaming session remains active after users disconnect.</p><br>
    ///   - [`idle_disconnect_timeout_in_minutes(i32)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::idle_disconnect_timeout_in_minutes) / [`set_idle_disconnect_timeout_in_minutes(Option<i32>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_idle_disconnect_timeout_in_minutes):<br>required: **false**<br><p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p><br>
    ///   - [`cookie_synchronization_configuration(CookieSynchronizationConfiguration)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::cookie_synchronization_configuration) / [`set_cookie_synchronization_configuration(Option<CookieSynchronizationConfiguration>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_cookie_synchronization_configuration):<br>required: **false**<br><p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p><br>
    ///   - [`customer_managed_key(impl Into<String>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::customer_managed_key) / [`set_customer_managed_key(Option<String>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_customer_managed_key):<br>required: **false**<br><p>The customer managed key used to encrypt sensitive information in the user settings.</p><br>
    ///   - [`additional_encryption_context(impl Into<String>, impl Into<String>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::additional_encryption_context) / [`set_additional_encryption_context(Option<HashMap::<String, String>>)`](crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::set_additional_encryption_context):<br>required: **false**<br><p>The additional encryption context of the user settings.</p><br>
    /// - On success, responds with [`CreateUserSettingsOutput`](crate::operation::create_user_settings::CreateUserSettingsOutput) with field(s):
    ///   - [`user_settings_arn(String)`](crate::operation::create_user_settings::CreateUserSettingsOutput::user_settings_arn): <p>The ARN of the user settings.</p>
    /// - On failure, responds with [`SdkError<CreateUserSettingsError>`](crate::operation::create_user_settings::CreateUserSettingsError)
    pub fn create_user_settings(&self) -> crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder {
        crate::operation::create_user_settings::builders::CreateUserSettingsFluentBuilder::new(self.handle.clone())
    }
}
