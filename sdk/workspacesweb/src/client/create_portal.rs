// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePortal`](crate::operation::create_portal::builders::CreatePortalFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_display_name):<br>required: **false**<br><p>The name of the web portal. This is not visible to users who log into the web portal.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to add to the web portal. A tag is a key-value pair.</p><br>
    ///   - [`customer_managed_key(impl Into<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::customer_managed_key) / [`set_customer_managed_key(Option<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_customer_managed_key):<br>required: **false**<br><p>The customer managed key of the web portal.</p><br>
    ///   - [`additional_encryption_context(impl Into<String>, impl Into<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::additional_encryption_context) / [`set_additional_encryption_context(Option<HashMap::<String, String>>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_additional_encryption_context):<br>required: **false**<br><p>The additional encryption context of the portal.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>  <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p><br>
    ///   - [`authentication_type(AuthenticationType)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::authentication_type) / [`set_authentication_type(Option<AuthenticationType>)`](crate::operation::create_portal::builders::CreatePortalFluentBuilder::set_authentication_type):<br>required: **false**<br><p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>  <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>  <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p><br>
    /// - On success, responds with [`CreatePortalOutput`](crate::operation::create_portal::CreatePortalOutput) with field(s):
    ///   - [`portal_arn(String)`](crate::operation::create_portal::CreatePortalOutput::portal_arn): <p>The ARN of the web portal.</p>
    ///   - [`portal_endpoint(String)`](crate::operation::create_portal::CreatePortalOutput::portal_endpoint): <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    /// - On failure, responds with [`SdkError<CreatePortalError>`](crate::operation::create_portal::CreatePortalError)
    pub fn create_portal(&self) -> crate::operation::create_portal::builders::CreatePortalFluentBuilder {
        crate::operation::create_portal::builders::CreatePortalFluentBuilder::new(self.handle.clone())
    }
}
