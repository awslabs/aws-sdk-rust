// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_trust_store::_update_trust_store_output::UpdateTrustStoreOutputBuilder;

pub use crate::operation::update_trust_store::_update_trust_store_input::UpdateTrustStoreInputBuilder;

/// Fluent builder constructing a request to `UpdateTrustStore`.
///
/// <p>Updates the trust store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrustStoreFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_trust_store::builders::UpdateTrustStoreInputBuilder,
}
impl UpdateTrustStoreFluentBuilder {
    /// Creates a new `UpdateTrustStore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_trust_store::UpdateTrustStore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_trust_store::UpdateTrustStoreError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_trust_store::UpdateTrustStoreOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_trust_store::UpdateTrustStoreError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trust_store_arn(input.into());
        self
    }
    /// <p>The ARN of the trust store.</p>
    pub fn set_trust_store_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_trust_store_arn(input);
        self
    }
    /// Appends an item to `certificatesToAdd`.
    ///
    /// To override the contents of this collection use [`set_certificates_to_add`](Self::set_certificates_to_add).
    ///
    /// <p>A list of CA certificates to add to the trust store.</p>
    pub fn certificates_to_add(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.certificates_to_add(input);
        self
    }
    /// <p>A list of CA certificates to add to the trust store.</p>
    pub fn set_certificates_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    ) -> Self {
        self.inner = self.inner.set_certificates_to_add(input);
        self
    }
    /// Appends an item to `certificatesToDelete`.
    ///
    /// To override the contents of this collection use [`set_certificates_to_delete`](Self::set_certificates_to_delete).
    ///
    /// <p>A list of CA certificates to delete from a trust store.</p>
    pub fn certificates_to_delete(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificates_to_delete(input.into());
        self
    }
    /// <p>A list of CA certificates to delete from a trust store.</p>
    pub fn set_certificates_to_delete(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_certificates_to_delete(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
