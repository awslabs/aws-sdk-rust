// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserAccessLoggingSettingsInput {
    /// <p>The ARN of the Kinesis stream.</p>
    #[doc(hidden)]
    pub kinesis_stream_arn: std::option::Option<std::string::String>,
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateUserAccessLoggingSettingsInput {
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn kinesis_stream_arn(&self) -> std::option::Option<&str> {
        self.kinesis_stream_arn.as_deref()
    }
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateUserAccessLoggingSettingsInput {
    /// Creates a new builder-style object to manufacture [`CreateUserAccessLoggingSettingsInput`](crate::operation::create_user_access_logging_settings::CreateUserAccessLoggingSettingsInput).
    pub fn builder() -> crate::operation::create_user_access_logging_settings::builders::CreateUserAccessLoggingSettingsInputBuilder{
        crate::operation::create_user_access_logging_settings::builders::CreateUserAccessLoggingSettingsInputBuilder::default()
    }
}

/// A builder for [`CreateUserAccessLoggingSettingsInput`](crate::operation::create_user_access_logging_settings::CreateUserAccessLoggingSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateUserAccessLoggingSettingsInputBuilder {
    pub(crate) kinesis_stream_arn: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateUserAccessLoggingSettingsInputBuilder {
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn kinesis_stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kinesis_stream_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn set_kinesis_stream_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.kinesis_stream_arn = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateUserAccessLoggingSettingsInput`](crate::operation::create_user_access_logging_settings::CreateUserAccessLoggingSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_user_access_logging_settings::CreateUserAccessLoggingSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_user_access_logging_settings::CreateUserAccessLoggingSettingsInput {
                kinesis_stream_arn: self.kinesis_stream_arn
                ,
                tags: self.tags
                ,
                client_token: self.client_token
                ,
            }
        )
    }
}
