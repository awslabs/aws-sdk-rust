// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_user_settings::_update_user_settings_output::UpdateUserSettingsOutputBuilder;

pub use crate::operation::update_user_settings::_update_user_settings_input::UpdateUserSettingsInputBuilder;

impl crate::operation::update_user_settings::builders::UpdateUserSettingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_user_settings::UpdateUserSettingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_user_settings::UpdateUserSettingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_user_settings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateUserSettings`.
///
/// <p>Updates the user settings.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateUserSettingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_user_settings::builders::UpdateUserSettingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_user_settings::UpdateUserSettingsOutput,
        crate::operation::update_user_settings::UpdateUserSettingsError,
    > for UpdateUserSettingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_user_settings::UpdateUserSettingsOutput,
            crate::operation::update_user_settings::UpdateUserSettingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateUserSettingsFluentBuilder {
    /// Creates a new `UpdateUserSettings`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateUserSettings as a reference.
    pub fn as_input(&self) -> &crate::operation::update_user_settings::builders::UpdateUserSettingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_user_settings::UpdateUserSettingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_user_settings::UpdateUserSettingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_user_settings::UpdateUserSettings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_user_settings::UpdateUserSettings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_user_settings::UpdateUserSettingsOutput,
        crate::operation::update_user_settings::UpdateUserSettingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_settings_arn(input.into());
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn set_user_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_settings_arn(input);
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn get_user_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_settings_arn()
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.copy_allowed(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn set_copy_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.inner = self.inner.set_copy_allowed(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn get_copy_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        self.inner.get_copy_allowed()
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.paste_allowed(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn set_paste_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.inner = self.inner.set_paste_allowed(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn get_paste_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        self.inner.get_paste_allowed()
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.download_allowed(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn set_download_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.inner = self.inner.set_download_allowed(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn get_download_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        self.inner.get_download_allowed()
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.upload_allowed(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn set_upload_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.inner = self.inner.set_upload_allowed(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn get_upload_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        self.inner.get_upload_allowed()
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.print_allowed(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn set_print_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.inner = self.inner.set_print_allowed(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn get_print_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        self.inner.get_print_allowed()
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn set_disconnect_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn get_disconnect_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_disconnect_timeout_in_minutes()
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn set_idle_disconnect_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn get_idle_disconnect_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_idle_disconnect_timeout_in_minutes()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request.</p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request.</p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request.</p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    /// <p>If the allowlist and blocklist are empty, the configuration becomes null.</p>
    pub fn cookie_synchronization_configuration(mut self, input: crate::types::CookieSynchronizationConfiguration) -> Self {
        self.inner = self.inner.cookie_synchronization_configuration(input);
        self
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    /// <p>If the allowlist and blocklist are empty, the configuration becomes null.</p>
    pub fn set_cookie_synchronization_configuration(
        mut self,
        input: ::std::option::Option<crate::types::CookieSynchronizationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_cookie_synchronization_configuration(input);
        self
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    /// <p>If the allowlist and blocklist are empty, the configuration becomes null.</p>
    pub fn get_cookie_synchronization_configuration(&self) -> &::std::option::Option<crate::types::CookieSynchronizationConfiguration> {
        self.inner.get_cookie_synchronization_configuration()
    }
}
