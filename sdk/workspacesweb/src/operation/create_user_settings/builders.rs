// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_user_settings::_create_user_settings_output::CreateUserSettingsOutputBuilder;

pub use crate::operation::create_user_settings::_create_user_settings_input::CreateUserSettingsInputBuilder;

/// Fluent builder constructing a request to `CreateUserSettings`.
///
/// <p>Creates a user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateUserSettingsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_user_settings::builders::CreateUserSettingsInputBuilder,
}
impl CreateUserSettingsFluentBuilder {
    /// Creates a new `CreateUserSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_user_settings::CreateUserSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_user_settings::CreateUserSettingsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_user_settings::CreateUserSettingsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_user_settings::CreateUserSettingsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.copy_allowed(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn set_copy_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.inner = self.inner.set_copy_allowed(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.paste_allowed(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn set_paste_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.inner = self.inner.set_paste_allowed(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.download_allowed(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn set_download_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.inner = self.inner.set_download_allowed(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.upload_allowed(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn set_upload_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.inner = self.inner.set_upload_allowed(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.inner = self.inner.print_allowed(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn set_print_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.inner = self.inner.set_print_allowed(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn set_disconnect_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn set_idle_disconnect_timeout_in_minutes(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_idle_disconnect_timeout_in_minutes(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
