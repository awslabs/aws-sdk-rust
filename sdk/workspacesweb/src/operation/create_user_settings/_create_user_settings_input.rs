// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserSettingsInput {
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    #[doc(hidden)]
    pub copy_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    #[doc(hidden)]
    pub paste_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    #[doc(hidden)]
    pub download_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    #[doc(hidden)]
    pub upload_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can print to the local device.</p>
    #[doc(hidden)]
    pub print_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    #[doc(hidden)]
    pub disconnect_timeout_in_minutes: std::option::Option<i32>,
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    #[doc(hidden)]
    pub idle_disconnect_timeout_in_minutes: std::option::Option<i32>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateUserSettingsInput {
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.copy_allowed.as_ref()
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.paste_allowed.as_ref()
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.download_allowed.as_ref()
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.upload_allowed.as_ref()
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.print_allowed.as_ref()
    }
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.disconnect_timeout_in_minutes
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.idle_disconnect_timeout_in_minutes
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateUserSettingsInput {
    /// Creates a new builder-style object to manufacture [`CreateUserSettingsInput`](crate::operation::create_user_settings::CreateUserSettingsInput).
    pub fn builder(
    ) -> crate::operation::create_user_settings::builders::CreateUserSettingsInputBuilder {
        crate::operation::create_user_settings::builders::CreateUserSettingsInputBuilder::default()
    }
}

/// A builder for [`CreateUserSettingsInput`](crate::operation::create_user_settings::CreateUserSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateUserSettingsInputBuilder {
    pub(crate) copy_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) paste_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) download_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) upload_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) print_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) disconnect_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) idle_disconnect_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateUserSettingsInputBuilder {
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.copy_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn set_copy_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.copy_allowed = input;
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.paste_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn set_paste_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.paste_allowed = input;
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.download_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn set_download_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.download_allowed = input;
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.upload_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn set_upload_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.upload_allowed = input;
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.print_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn set_print_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.print_allowed = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to add to the user settings resource. A tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.disconnect_timeout_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn set_disconnect_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.disconnect_timeout_in_minutes = input;
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.idle_disconnect_timeout_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn set_idle_disconnect_timeout_in_minutes(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.idle_disconnect_timeout_in_minutes = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateUserSettingsInput`](crate::operation::create_user_settings::CreateUserSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_user_settings::CreateUserSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_user_settings::CreateUserSettingsInput {
                copy_allowed: self.copy_allowed,
                paste_allowed: self.paste_allowed,
                download_allowed: self.download_allowed,
                upload_allowed: self.upload_allowed,
                print_allowed: self.print_allowed,
                tags: self.tags,
                disconnect_timeout_in_minutes: self.disconnect_timeout_in_minutes,
                idle_disconnect_timeout_in_minutes: self.idle_disconnect_timeout_in_minutes,
                client_token: self.client_token,
            },
        )
    }
}
