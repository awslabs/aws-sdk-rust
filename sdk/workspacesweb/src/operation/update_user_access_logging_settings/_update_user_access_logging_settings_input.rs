// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateUserAccessLoggingSettingsInput {
    /// <p>The ARN of the user access logging settings.</p>
    pub user_access_logging_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Kinesis stream.</p>
    pub kinesis_stream_arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateUserAccessLoggingSettingsInput {
    /// <p>The ARN of the user access logging settings.</p>
    pub fn user_access_logging_settings_arn(&self) -> ::std::option::Option<&str> {
        self.user_access_logging_settings_arn.as_deref()
    }
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn kinesis_stream_arn(&self) -> ::std::option::Option<&str> {
        self.kinesis_stream_arn.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateUserAccessLoggingSettingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserAccessLoggingSettingsInput`](crate::operation::update_user_access_logging_settings::UpdateUserAccessLoggingSettingsInput).
    pub fn builder() -> crate::operation::update_user_access_logging_settings::builders::UpdateUserAccessLoggingSettingsInputBuilder {
        crate::operation::update_user_access_logging_settings::builders::UpdateUserAccessLoggingSettingsInputBuilder::default()
    }
}

/// A builder for [`UpdateUserAccessLoggingSettingsInput`](crate::operation::update_user_access_logging_settings::UpdateUserAccessLoggingSettingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateUserAccessLoggingSettingsInputBuilder {
    pub(crate) user_access_logging_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kinesis_stream_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateUserAccessLoggingSettingsInputBuilder {
    /// <p>The ARN of the user access logging settings.</p>
    /// This field is required.
    pub fn user_access_logging_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_access_logging_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user access logging settings.</p>
    pub fn set_user_access_logging_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_access_logging_settings_arn = input;
        self
    }
    /// <p>The ARN of the user access logging settings.</p>
    pub fn get_user_access_logging_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_access_logging_settings_arn
    }
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn kinesis_stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kinesis_stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn set_kinesis_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kinesis_stream_arn = input;
        self
    }
    /// <p>The ARN of the Kinesis stream.</p>
    pub fn get_kinesis_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kinesis_stream_arn
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateUserAccessLoggingSettingsInput`](crate::operation::update_user_access_logging_settings::UpdateUserAccessLoggingSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_user_access_logging_settings::UpdateUserAccessLoggingSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_user_access_logging_settings::UpdateUserAccessLoggingSettingsInput {
                user_access_logging_settings_arn: self.user_access_logging_settings_arn,
                kinesis_stream_arn: self.kinesis_stream_arn,
                client_token: self.client_token,
            },
        )
    }
}
