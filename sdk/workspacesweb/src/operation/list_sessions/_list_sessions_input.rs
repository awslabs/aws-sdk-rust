// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListSessionsInput {
    /// <p>The ID of the web portal for the sessions.</p>
    pub portal_id: ::std::option::Option<::std::string::String>,
    /// <p>The username of the session.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The method in which the returned sessions should be sorted.</p>
    pub sort_by: ::std::option::Option<crate::types::SessionSortBy>,
    /// <p>The status of the session.</p>
    pub status: ::std::option::Option<crate::types::SessionStatus>,
    /// <p>The maximum number of results to be included in the next page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSessionsInput {
    /// <p>The ID of the web portal for the sessions.</p>
    pub fn portal_id(&self) -> ::std::option::Option<&str> {
        self.portal_id.as_deref()
    }
    /// <p>The username of the session.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The ID of the session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The method in which the returned sessions should be sorted.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::SessionSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The status of the session.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SessionStatus> {
        self.status.as_ref()
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListSessionsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSessionsInput");
        formatter.field("portal_id", &self.portal_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("sort_by", &self.sort_by);
        formatter.field("status", &self.status);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
impl ListSessionsInput {
    /// Creates a new builder-style object to manufacture [`ListSessionsInput`](crate::operation::list_sessions::ListSessionsInput).
    pub fn builder() -> crate::operation::list_sessions::builders::ListSessionsInputBuilder {
        crate::operation::list_sessions::builders::ListSessionsInputBuilder::default()
    }
}

/// A builder for [`ListSessionsInput`](crate::operation::list_sessions::ListSessionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListSessionsInputBuilder {
    pub(crate) portal_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::SessionSortBy>,
    pub(crate) status: ::std::option::Option<crate::types::SessionStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSessionsInputBuilder {
    /// <p>The ID of the web portal for the sessions.</p>
    /// This field is required.
    pub fn portal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the web portal for the sessions.</p>
    pub fn set_portal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_id = input;
        self
    }
    /// <p>The ID of the web portal for the sessions.</p>
    pub fn get_portal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_id
    }
    /// <p>The username of the session.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username of the session.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The username of the session.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The ID of the session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The ID of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The method in which the returned sessions should be sorted.</p>
    pub fn sort_by(mut self, input: crate::types::SessionSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method in which the returned sessions should be sorted.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SessionSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The method in which the returned sessions should be sorted.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SessionSortBy> {
        &self.sort_by
    }
    /// <p>The status of the session.</p>
    pub fn status(mut self, input: crate::types::SessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the session.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the session.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionStatus> {
        &self.status
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be included in the next page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSessionsInput`](crate::operation::list_sessions::ListSessionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_sessions::ListSessionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_sessions::ListSessionsInput {
            portal_id: self.portal_id,
            username: self.username,
            session_id: self.session_id,
            sort_by: self.sort_by,
            status: self.status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for ListSessionsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSessionsInputBuilder");
        formatter.field("portal_id", &self.portal_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("sort_by", &self.sort_by);
        formatter.field("status", &self.status);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
