// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserSettingsOutput {
    /// <p>The user settings.</p>
    #[doc(hidden)]
    pub user_settings: std::option::Option<crate::model::UserSettings>,
    _request_id: Option<String>,
}
impl UpdateUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&crate::model::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
    pub fn builder() -> crate::output::update_user_settings_output::Builder {
        crate::output::update_user_settings_output::Builder::default()
    }
}

/// See [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
pub mod update_user_settings_output {

    /// A builder for [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings: std::option::Option<crate::model::UserSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
            self.user_settings = Some(input);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<crate::model::UserSettings>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput).
        pub fn build(self) -> crate::output::UpdateUserSettingsOutput {
            crate::output::UpdateUserSettingsOutput {
                user_settings: self.user_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    #[doc(hidden)]
    pub user_access_logging_settings: std::option::Option<crate::model::UserAccessLoggingSettings>,
    _request_id: Option<String>,
}
impl UpdateUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    pub fn user_access_logging_settings(
        &self,
    ) -> std::option::Option<&crate::model::UserAccessLoggingSettings> {
        self.user_access_logging_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserAccessLoggingSettingsOutput`](crate::output::UpdateUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::update_user_access_logging_settings_output::Builder {
        crate::output::update_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`UpdateUserAccessLoggingSettingsOutput`](crate::output::UpdateUserAccessLoggingSettingsOutput).
pub mod update_user_access_logging_settings_output {

    /// A builder for [`UpdateUserAccessLoggingSettingsOutput`](crate::output::UpdateUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_access_logging_settings:
            std::option::Option<crate::model::UserAccessLoggingSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The user access logging settings.</p>
        pub fn user_access_logging_settings(
            mut self,
            input: crate::model::UserAccessLoggingSettings,
        ) -> Self {
            self.user_access_logging_settings = Some(input);
            self
        }
        /// <p>The user access logging settings.</p>
        pub fn set_user_access_logging_settings(
            mut self,
            input: std::option::Option<crate::model::UserAccessLoggingSettings>,
        ) -> Self {
            self.user_access_logging_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateUserAccessLoggingSettingsOutput`](crate::output::UpdateUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::UpdateUserAccessLoggingSettingsOutput {
            crate::output::UpdateUserAccessLoggingSettingsOutput {
                user_access_logging_settings: self.user_access_logging_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput).
    pub fn builder() -> crate::output::update_trust_store_output::Builder {
        crate::output::update_trust_store_output::Builder::default()
    }
}

/// See [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput).
pub mod update_trust_store_output {

    /// A builder for [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput).
        pub fn build(self) -> crate::output::UpdateTrustStoreOutput {
            crate::output::UpdateTrustStoreOutput {
                trust_store_arn: self.trust_store_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePortalOutput {
    /// <p>The web portal.</p>
    #[doc(hidden)]
    pub portal: std::option::Option<crate::model::Portal>,
    _request_id: Option<String>,
}
impl UpdatePortalOutput {
    /// <p>The web portal.</p>
    pub fn portal(&self) -> std::option::Option<&crate::model::Portal> {
        self.portal.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdatePortalOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdatePortalOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePortalOutput`](crate::output::UpdatePortalOutput).
    pub fn builder() -> crate::output::update_portal_output::Builder {
        crate::output::update_portal_output::Builder::default()
    }
}

/// See [`UpdatePortalOutput`](crate::output::UpdatePortalOutput).
pub mod update_portal_output {

    /// A builder for [`UpdatePortalOutput`](crate::output::UpdatePortalOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal: std::option::Option<crate::model::Portal>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The web portal.</p>
        pub fn portal(mut self, input: crate::model::Portal) -> Self {
            self.portal = Some(input);
            self
        }
        /// <p>The web portal.</p>
        pub fn set_portal(mut self, input: std::option::Option<crate::model::Portal>) -> Self {
            self.portal = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePortalOutput`](crate::output::UpdatePortalOutput).
        pub fn build(self) -> crate::output::UpdatePortalOutput {
            crate::output::UpdatePortalOutput {
                portal: self.portal,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateNetworkSettingsOutput {
    /// <p>The network settings.</p>
    #[doc(hidden)]
    pub network_settings: std::option::Option<crate::model::NetworkSettings>,
    _request_id: Option<String>,
}
impl UpdateNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&crate::model::NetworkSettings> {
        self.network_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput).
    pub fn builder() -> crate::output::update_network_settings_output::Builder {
        crate::output::update_network_settings_output::Builder::default()
    }
}

/// See [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput).
pub mod update_network_settings_output {

    /// A builder for [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings: std::option::Option<crate::model::NetworkSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The network settings.</p>
        pub fn network_settings(mut self, input: crate::model::NetworkSettings) -> Self {
            self.network_settings = Some(input);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<crate::model::NetworkSettings>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput).
        pub fn build(self) -> crate::output::UpdateNetworkSettingsOutput {
            crate::output::UpdateNetworkSettingsOutput {
                network_settings: self.network_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateIdentityProviderOutput {
    /// <p>The identity provider.</p>
    #[doc(hidden)]
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
    _request_id: Option<String>,
}
impl UpdateIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateIdentityProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput).
    pub fn builder() -> crate::output::update_identity_provider_output::Builder {
        crate::output::update_identity_provider_output::Builder::default()
    }
}

/// See [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput).
pub mod update_identity_provider_output {

    /// A builder for [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>The identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput).
        pub fn build(self) -> crate::output::UpdateIdentityProviderOutput {
            crate::output::UpdateIdentityProviderOutput {
                identity_provider: self.identity_provider,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    #[doc(hidden)]
    pub browser_settings: std::option::Option<crate::model::BrowserSettings>,
    _request_id: Option<String>,
}
impl UpdateBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&crate::model::BrowserSettings> {
        self.browser_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput).
    pub fn builder() -> crate::output::update_browser_settings_output::Builder {
        crate::output::update_browser_settings_output::Builder::default()
    }
}

/// See [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput).
pub mod update_browser_settings_output {

    /// A builder for [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings: std::option::Option<crate::model::BrowserSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The browser settings.</p>
        pub fn browser_settings(mut self, input: crate::model::BrowserSettings) -> Self {
            self.browser_settings = Some(input);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<crate::model::BrowserSettings>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput).
        pub fn build(self) -> crate::output::UpdateBrowserSettingsOutput {
            crate::output::UpdateBrowserSettingsOutput {
                browser_settings: self.browser_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListUserSettingsOutput {
    /// <p>The user settings.</p>
    #[doc(hidden)]
    pub user_settings: std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&[crate::model::UserSettingsSummary]> {
        self.user_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput).
    pub fn builder() -> crate::output::list_user_settings_output::Builder {
        crate::output::list_user_settings_output::Builder::default()
    }
}

/// See [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput).
pub mod list_user_settings_output {

    /// A builder for [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings:
            std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `user_settings`.
        ///
        /// To override the contents of this collection use [`set_user_settings`](Self::set_user_settings).
        ///
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettingsSummary) -> Self {
            let mut v = self.user_settings.unwrap_or_default();
            v.push(input);
            self.user_settings = Some(v);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput).
        pub fn build(self) -> crate::output::ListUserSettingsOutput {
            crate::output::ListUserSettingsOutput {
                user_settings: self.user_settings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    #[doc(hidden)]
    pub user_access_logging_settings:
        std::option::Option<std::vec::Vec<crate::model::UserAccessLoggingSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    pub fn user_access_logging_settings(
        &self,
    ) -> std::option::Option<&[crate::model::UserAccessLoggingSettingsSummary]> {
        self.user_access_logging_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListUserAccessLoggingSettingsOutput`](crate::output::ListUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::list_user_access_logging_settings_output::Builder {
        crate::output::list_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`ListUserAccessLoggingSettingsOutput`](crate::output::ListUserAccessLoggingSettingsOutput).
pub mod list_user_access_logging_settings_output {

    /// A builder for [`ListUserAccessLoggingSettingsOutput`](crate::output::ListUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_access_logging_settings:
            std::option::Option<std::vec::Vec<crate::model::UserAccessLoggingSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `user_access_logging_settings`.
        ///
        /// To override the contents of this collection use [`set_user_access_logging_settings`](Self::set_user_access_logging_settings).
        ///
        /// <p>The user access logging settings.</p>
        pub fn user_access_logging_settings(
            mut self,
            input: crate::model::UserAccessLoggingSettingsSummary,
        ) -> Self {
            let mut v = self.user_access_logging_settings.unwrap_or_default();
            v.push(input);
            self.user_access_logging_settings = Some(v);
            self
        }
        /// <p>The user access logging settings.</p>
        pub fn set_user_access_logging_settings(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::UserAccessLoggingSettingsSummary>,
            >,
        ) -> Self {
            self.user_access_logging_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListUserAccessLoggingSettingsOutput`](crate::output::ListUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::ListUserAccessLoggingSettingsOutput {
            crate::output::ListUserAccessLoggingSettingsOutput {
                user_access_logging_settings: self.user_access_logging_settings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTrustStoresOutput {
    /// <p>The trust stores.</p>
    #[doc(hidden)]
    pub trust_stores: std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTrustStoresOutput {
    /// <p>The trust stores.</p>
    pub fn trust_stores(&self) -> std::option::Option<&[crate::model::TrustStoreSummary]> {
        self.trust_stores.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTrustStoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTrustStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput).
    pub fn builder() -> crate::output::list_trust_stores_output::Builder {
        crate::output::list_trust_stores_output::Builder::default()
    }
}

/// See [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput).
pub mod list_trust_stores_output {

    /// A builder for [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_stores:
            std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `trust_stores`.
        ///
        /// To override the contents of this collection use [`set_trust_stores`](Self::set_trust_stores).
        ///
        /// <p>The trust stores.</p>
        pub fn trust_stores(mut self, input: crate::model::TrustStoreSummary) -> Self {
            let mut v = self.trust_stores.unwrap_or_default();
            v.push(input);
            self.trust_stores = Some(v);
            self
        }
        /// <p>The trust stores.</p>
        pub fn set_trust_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
        ) -> Self {
            self.trust_stores = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput).
        pub fn build(self) -> crate::output::ListTrustStoresOutput {
            crate::output::ListTrustStoresOutput {
                trust_stores: self.trust_stores,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTrustStoreCertificatesOutput {
    /// <p>The certificate list.</p>
    #[doc(hidden)]
    pub certificate_list: std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
    /// <p>The ARN of the trust store.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTrustStoreCertificatesOutput {
    /// <p>The certificate list.</p>
    pub fn certificate_list(&self) -> std::option::Option<&[crate::model::CertificateSummary]> {
        self.certificate_list.as_deref()
    }
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTrustStoreCertificatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTrustStoreCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput).
    pub fn builder() -> crate::output::list_trust_store_certificates_output::Builder {
        crate::output::list_trust_store_certificates_output::Builder::default()
    }
}

/// See [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput).
pub mod list_trust_store_certificates_output {

    /// A builder for [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_list:
            std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `certificate_list`.
        ///
        /// To override the contents of this collection use [`set_certificate_list`](Self::set_certificate_list).
        ///
        /// <p>The certificate list.</p>
        pub fn certificate_list(mut self, input: crate::model::CertificateSummary) -> Self {
            let mut v = self.certificate_list.unwrap_or_default();
            v.push(input);
            self.certificate_list = Some(v);
            self
        }
        /// <p>The certificate list.</p>
        pub fn set_certificate_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
        ) -> Self {
            self.certificate_list = input;
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput).
        pub fn build(self) -> crate::output::ListTrustStoreCertificatesOutput {
            crate::output::ListTrustStoreCertificatesOutput {
                certificate_list: self.certificate_list,
                trust_store_arn: self.trust_store_arn,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags of the resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags of the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags of the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPortalsOutput {
    /// <p>The portals in the list.</p>
    #[doc(hidden)]
    pub portals: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPortalsOutput {
    /// <p>The portals in the list.</p>
    pub fn portals(&self) -> std::option::Option<&[crate::model::PortalSummary]> {
        self.portals.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPortalsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPortalsOutput {
    /// Creates a new builder-style object to manufacture [`ListPortalsOutput`](crate::output::ListPortalsOutput).
    pub fn builder() -> crate::output::list_portals_output::Builder {
        crate::output::list_portals_output::Builder::default()
    }
}

/// See [`ListPortalsOutput`](crate::output::ListPortalsOutput).
pub mod list_portals_output {

    /// A builder for [`ListPortalsOutput`](crate::output::ListPortalsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portals: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `portals`.
        ///
        /// To override the contents of this collection use [`set_portals`](Self::set_portals).
        ///
        /// <p>The portals in the list.</p>
        pub fn portals(mut self, input: crate::model::PortalSummary) -> Self {
            let mut v = self.portals.unwrap_or_default();
            v.push(input);
            self.portals = Some(v);
            self
        }
        /// <p>The portals in the list.</p>
        pub fn set_portals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
        ) -> Self {
            self.portals = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPortalsOutput`](crate::output::ListPortalsOutput).
        pub fn build(self) -> crate::output::ListPortalsOutput {
            crate::output::ListPortalsOutput {
                portals: self.portals,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNetworkSettingsOutput {
    /// <p>The network settings.</p>
    #[doc(hidden)]
    pub network_settings: std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&[crate::model::NetworkSettingsSummary]> {
        self.network_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput).
    pub fn builder() -> crate::output::list_network_settings_output::Builder {
        crate::output::list_network_settings_output::Builder::default()
    }
}

/// See [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput).
pub mod list_network_settings_output {

    /// A builder for [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings:
            std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_settings`.
        ///
        /// To override the contents of this collection use [`set_network_settings`](Self::set_network_settings).
        ///
        /// <p>The network settings.</p>
        pub fn network_settings(mut self, input: crate::model::NetworkSettingsSummary) -> Self {
            let mut v = self.network_settings.unwrap_or_default();
            v.push(input);
            self.network_settings = Some(v);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput).
        pub fn build(self) -> crate::output::ListNetworkSettingsOutput {
            crate::output::ListNetworkSettingsOutput {
                network_settings: self.network_settings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListIdentityProvidersOutput {
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The identity providers.</p>
    #[doc(hidden)]
    pub identity_providers:
        std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
    _request_id: Option<String>,
}
impl ListIdentityProvidersOutput {
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The identity providers.</p>
    pub fn identity_providers(
        &self,
    ) -> std::option::Option<&[crate::model::IdentityProviderSummary]> {
        self.identity_providers.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListIdentityProvidersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListIdentityProvidersOutput {
    /// Creates a new builder-style object to manufacture [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput).
    pub fn builder() -> crate::output::list_identity_providers_output::Builder {
        crate::output::list_identity_providers_output::Builder::default()
    }
}

/// See [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput).
pub mod list_identity_providers_output {

    /// A builder for [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) identity_providers:
            std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `identity_providers`.
        ///
        /// To override the contents of this collection use [`set_identity_providers`](Self::set_identity_providers).
        ///
        /// <p>The identity providers.</p>
        pub fn identity_providers(mut self, input: crate::model::IdentityProviderSummary) -> Self {
            let mut v = self.identity_providers.unwrap_or_default();
            v.push(input);
            self.identity_providers = Some(v);
            self
        }
        /// <p>The identity providers.</p>
        pub fn set_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
        ) -> Self {
            self.identity_providers = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput).
        pub fn build(self) -> crate::output::ListIdentityProvidersOutput {
            crate::output::ListIdentityProvidersOutput {
                next_token: self.next_token,
                identity_providers: self.identity_providers,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    #[doc(hidden)]
    pub browser_settings: std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&[crate::model::BrowserSettingsSummary]> {
        self.browser_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput).
    pub fn builder() -> crate::output::list_browser_settings_output::Builder {
        crate::output::list_browser_settings_output::Builder::default()
    }
}

/// See [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput).
pub mod list_browser_settings_output {

    /// A builder for [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings:
            std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `browser_settings`.
        ///
        /// To override the contents of this collection use [`set_browser_settings`](Self::set_browser_settings).
        ///
        /// <p>The browser settings.</p>
        pub fn browser_settings(mut self, input: crate::model::BrowserSettingsSummary) -> Self {
            let mut v = self.browser_settings.unwrap_or_default();
            v.push(input);
            self.browser_settings = Some(v);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput).
        pub fn build(self) -> crate::output::ListBrowserSettingsOutput {
            crate::output::ListBrowserSettingsOutput {
                browser_settings: self.browser_settings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUserSettingsOutput {
    /// <p>The user settings.</p>
    #[doc(hidden)]
    pub user_settings: std::option::Option<crate::model::UserSettings>,
    _request_id: Option<String>,
}
impl GetUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&crate::model::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
    pub fn builder() -> crate::output::get_user_settings_output::Builder {
        crate::output::get_user_settings_output::Builder::default()
    }
}

/// See [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
pub mod get_user_settings_output {

    /// A builder for [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings: std::option::Option<crate::model::UserSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
            self.user_settings = Some(input);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<crate::model::UserSettings>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput).
        pub fn build(self) -> crate::output::GetUserSettingsOutput {
            crate::output::GetUserSettingsOutput {
                user_settings: self.user_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    #[doc(hidden)]
    pub user_access_logging_settings: std::option::Option<crate::model::UserAccessLoggingSettings>,
    _request_id: Option<String>,
}
impl GetUserAccessLoggingSettingsOutput {
    /// <p>The user access logging settings.</p>
    pub fn user_access_logging_settings(
        &self,
    ) -> std::option::Option<&crate::model::UserAccessLoggingSettings> {
        self.user_access_logging_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserAccessLoggingSettingsOutput`](crate::output::GetUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::get_user_access_logging_settings_output::Builder {
        crate::output::get_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`GetUserAccessLoggingSettingsOutput`](crate::output::GetUserAccessLoggingSettingsOutput).
pub mod get_user_access_logging_settings_output {

    /// A builder for [`GetUserAccessLoggingSettingsOutput`](crate::output::GetUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_access_logging_settings:
            std::option::Option<crate::model::UserAccessLoggingSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The user access logging settings.</p>
        pub fn user_access_logging_settings(
            mut self,
            input: crate::model::UserAccessLoggingSettings,
        ) -> Self {
            self.user_access_logging_settings = Some(input);
            self
        }
        /// <p>The user access logging settings.</p>
        pub fn set_user_access_logging_settings(
            mut self,
            input: std::option::Option<crate::model::UserAccessLoggingSettings>,
        ) -> Self {
            self.user_access_logging_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetUserAccessLoggingSettingsOutput`](crate::output::GetUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::GetUserAccessLoggingSettingsOutput {
            crate::output::GetUserAccessLoggingSettingsOutput {
                user_access_logging_settings: self.user_access_logging_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTrustStoreCertificateOutput {
    /// <p>The ARN of the trust store certificate.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    /// <p>The certificate of the trust store certificate.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<crate::model::Certificate>,
    _request_id: Option<String>,
}
impl GetTrustStoreCertificateOutput {
    /// <p>The ARN of the trust store certificate.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The certificate of the trust store certificate.</p>
    pub fn certificate(&self) -> std::option::Option<&crate::model::Certificate> {
        self.certificate.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetTrustStoreCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTrustStoreCertificateOutput {
    /// Creates a new builder-style object to manufacture [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput).
    pub fn builder() -> crate::output::get_trust_store_certificate_output::Builder {
        crate::output::get_trust_store_certificate_output::Builder::default()
    }
}

/// See [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput).
pub mod get_trust_store_certificate_output {

    /// A builder for [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        pub(crate) certificate: std::option::Option<crate::model::Certificate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the trust store certificate.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store certificate.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// <p>The certificate of the trust store certificate.</p>
        pub fn certificate(mut self, input: crate::model::Certificate) -> Self {
            self.certificate = Some(input);
            self
        }
        /// <p>The certificate of the trust store certificate.</p>
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::Certificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput).
        pub fn build(self) -> crate::output::GetTrustStoreCertificateOutput {
            crate::output::GetTrustStoreCertificateOutput {
                trust_store_arn: self.trust_store_arn,
                certificate: self.certificate,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTrustStoreOutput {
    /// <p>The trust store.</p>
    #[doc(hidden)]
    pub trust_store: std::option::Option<crate::model::TrustStore>,
    _request_id: Option<String>,
}
impl GetTrustStoreOutput {
    /// <p>The trust store.</p>
    pub fn trust_store(&self) -> std::option::Option<&crate::model::TrustStore> {
        self.trust_store.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput).
    pub fn builder() -> crate::output::get_trust_store_output::Builder {
        crate::output::get_trust_store_output::Builder::default()
    }
}

/// See [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput).
pub mod get_trust_store_output {

    /// A builder for [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store: std::option::Option<crate::model::TrustStore>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The trust store.</p>
        pub fn trust_store(mut self, input: crate::model::TrustStore) -> Self {
            self.trust_store = Some(input);
            self
        }
        /// <p>The trust store.</p>
        pub fn set_trust_store(
            mut self,
            input: std::option::Option<crate::model::TrustStore>,
        ) -> Self {
            self.trust_store = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput).
        pub fn build(self) -> crate::output::GetTrustStoreOutput {
            crate::output::GetTrustStoreOutput {
                trust_store: self.trust_store,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPortalServiceProviderMetadataOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The service provider SAML metadata.</p>
    #[doc(hidden)]
    pub service_provider_saml_metadata: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetPortalServiceProviderMetadataOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The service provider SAML metadata.</p>
    pub fn service_provider_saml_metadata(&self) -> std::option::Option<&str> {
        self.service_provider_saml_metadata.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetPortalServiceProviderMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPortalServiceProviderMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput).
    pub fn builder() -> crate::output::get_portal_service_provider_metadata_output::Builder {
        crate::output::get_portal_service_provider_metadata_output::Builder::default()
    }
}

/// See [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput).
pub mod get_portal_service_provider_metadata_output {

    /// A builder for [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) service_provider_saml_metadata: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The service provider SAML metadata.</p>
        pub fn service_provider_saml_metadata(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.service_provider_saml_metadata = Some(input.into());
            self
        }
        /// <p>The service provider SAML metadata.</p>
        pub fn set_service_provider_saml_metadata(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.service_provider_saml_metadata = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput).
        pub fn build(self) -> crate::output::GetPortalServiceProviderMetadataOutput {
            crate::output::GetPortalServiceProviderMetadataOutput {
                portal_arn: self.portal_arn,
                service_provider_saml_metadata: self.service_provider_saml_metadata,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPortalOutput {
    /// <p>The web portal.</p>
    #[doc(hidden)]
    pub portal: std::option::Option<crate::model::Portal>,
    _request_id: Option<String>,
}
impl GetPortalOutput {
    /// <p>The web portal.</p>
    pub fn portal(&self) -> std::option::Option<&crate::model::Portal> {
        self.portal.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPortalOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPortalOutput {
    /// Creates a new builder-style object to manufacture [`GetPortalOutput`](crate::output::GetPortalOutput).
    pub fn builder() -> crate::output::get_portal_output::Builder {
        crate::output::get_portal_output::Builder::default()
    }
}

/// See [`GetPortalOutput`](crate::output::GetPortalOutput).
pub mod get_portal_output {

    /// A builder for [`GetPortalOutput`](crate::output::GetPortalOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal: std::option::Option<crate::model::Portal>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The web portal.</p>
        pub fn portal(mut self, input: crate::model::Portal) -> Self {
            self.portal = Some(input);
            self
        }
        /// <p>The web portal.</p>
        pub fn set_portal(mut self, input: std::option::Option<crate::model::Portal>) -> Self {
            self.portal = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPortalOutput`](crate::output::GetPortalOutput).
        pub fn build(self) -> crate::output::GetPortalOutput {
            crate::output::GetPortalOutput {
                portal: self.portal,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNetworkSettingsOutput {
    /// <p>The network settings.</p>
    #[doc(hidden)]
    pub network_settings: std::option::Option<crate::model::NetworkSettings>,
    _request_id: Option<String>,
}
impl GetNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&crate::model::NetworkSettings> {
        self.network_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput).
    pub fn builder() -> crate::output::get_network_settings_output::Builder {
        crate::output::get_network_settings_output::Builder::default()
    }
}

/// See [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput).
pub mod get_network_settings_output {

    /// A builder for [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings: std::option::Option<crate::model::NetworkSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The network settings.</p>
        pub fn network_settings(mut self, input: crate::model::NetworkSettings) -> Self {
            self.network_settings = Some(input);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<crate::model::NetworkSettings>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput).
        pub fn build(self) -> crate::output::GetNetworkSettingsOutput {
            crate::output::GetNetworkSettingsOutput {
                network_settings: self.network_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIdentityProviderOutput {
    /// <p>The identity provider.</p>
    #[doc(hidden)]
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
    _request_id: Option<String>,
}
impl GetIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetIdentityProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput).
    pub fn builder() -> crate::output::get_identity_provider_output::Builder {
        crate::output::get_identity_provider_output::Builder::default()
    }
}

/// See [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput).
pub mod get_identity_provider_output {

    /// A builder for [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>The identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput).
        pub fn build(self) -> crate::output::GetIdentityProviderOutput {
            crate::output::GetIdentityProviderOutput {
                identity_provider: self.identity_provider,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    #[doc(hidden)]
    pub browser_settings: std::option::Option<crate::model::BrowserSettings>,
    _request_id: Option<String>,
}
impl GetBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&crate::model::BrowserSettings> {
        self.browser_settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput).
    pub fn builder() -> crate::output::get_browser_settings_output::Builder {
        crate::output::get_browser_settings_output::Builder::default()
    }
}

/// See [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput).
pub mod get_browser_settings_output {

    /// A builder for [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings: std::option::Option<crate::model::BrowserSettings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The browser settings.</p>
        pub fn browser_settings(mut self, input: crate::model::BrowserSettings) -> Self {
            self.browser_settings = Some(input);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<crate::model::BrowserSettings>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput).
        pub fn build(self) -> crate::output::GetBrowserSettingsOutput {
            crate::output::GetBrowserSettingsOutput {
                browser_settings: self.browser_settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateUserSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput).
    pub fn builder() -> crate::output::disassociate_user_settings_output::Builder {
        crate::output::disassociate_user_settings_output::Builder::default()
    }
}

/// See [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput).
pub mod disassociate_user_settings_output {

    /// A builder for [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput).
        pub fn build(self) -> crate::output::DisassociateUserSettingsOutput {
            crate::output::DisassociateUserSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateUserAccessLoggingSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateUserAccessLoggingSettingsOutput`](crate::output::DisassociateUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::disassociate_user_access_logging_settings_output::Builder {
        crate::output::disassociate_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`DisassociateUserAccessLoggingSettingsOutput`](crate::output::DisassociateUserAccessLoggingSettingsOutput).
pub mod disassociate_user_access_logging_settings_output {

    /// A builder for [`DisassociateUserAccessLoggingSettingsOutput`](crate::output::DisassociateUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateUserAccessLoggingSettingsOutput`](crate::output::DisassociateUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::DisassociateUserAccessLoggingSettingsOutput {
            crate::output::DisassociateUserAccessLoggingSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateTrustStoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput).
    pub fn builder() -> crate::output::disassociate_trust_store_output::Builder {
        crate::output::disassociate_trust_store_output::Builder::default()
    }
}

/// See [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput).
pub mod disassociate_trust_store_output {

    /// A builder for [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput).
        pub fn build(self) -> crate::output::DisassociateTrustStoreOutput {
            crate::output::DisassociateTrustStoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateNetworkSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput).
    pub fn builder() -> crate::output::disassociate_network_settings_output::Builder {
        crate::output::disassociate_network_settings_output::Builder::default()
    }
}

/// See [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput).
pub mod disassociate_network_settings_output {

    /// A builder for [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput).
        pub fn build(self) -> crate::output::DisassociateNetworkSettingsOutput {
            crate::output::DisassociateNetworkSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateBrowserSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput).
    pub fn builder() -> crate::output::disassociate_browser_settings_output::Builder {
        crate::output::disassociate_browser_settings_output::Builder::default()
    }
}

/// See [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput).
pub mod disassociate_browser_settings_output {

    /// A builder for [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput).
        pub fn build(self) -> crate::output::DisassociateBrowserSettingsOutput {
            crate::output::DisassociateBrowserSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteUserSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput).
    pub fn builder() -> crate::output::delete_user_settings_output::Builder {
        crate::output::delete_user_settings_output::Builder::default()
    }
}

/// See [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput).
pub mod delete_user_settings_output {

    /// A builder for [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput).
        pub fn build(self) -> crate::output::DeleteUserSettingsOutput {
            crate::output::DeleteUserSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteUserAccessLoggingSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserAccessLoggingSettingsOutput`](crate::output::DeleteUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::delete_user_access_logging_settings_output::Builder {
        crate::output::delete_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`DeleteUserAccessLoggingSettingsOutput`](crate::output::DeleteUserAccessLoggingSettingsOutput).
pub mod delete_user_access_logging_settings_output {

    /// A builder for [`DeleteUserAccessLoggingSettingsOutput`](crate::output::DeleteUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteUserAccessLoggingSettingsOutput`](crate::output::DeleteUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::DeleteUserAccessLoggingSettingsOutput {
            crate::output::DeleteUserAccessLoggingSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTrustStoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput).
    pub fn builder() -> crate::output::delete_trust_store_output::Builder {
        crate::output::delete_trust_store_output::Builder::default()
    }
}

/// See [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput).
pub mod delete_trust_store_output {

    /// A builder for [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput).
        pub fn build(self) -> crate::output::DeleteTrustStoreOutput {
            crate::output::DeleteTrustStoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePortalOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePortalOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeletePortalOutput {
    /// Creates a new builder-style object to manufacture [`DeletePortalOutput`](crate::output::DeletePortalOutput).
    pub fn builder() -> crate::output::delete_portal_output::Builder {
        crate::output::delete_portal_output::Builder::default()
    }
}

/// See [`DeletePortalOutput`](crate::output::DeletePortalOutput).
pub mod delete_portal_output {

    /// A builder for [`DeletePortalOutput`](crate::output::DeletePortalOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePortalOutput`](crate::output::DeletePortalOutput).
        pub fn build(self) -> crate::output::DeletePortalOutput {
            crate::output::DeletePortalOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput).
    pub fn builder() -> crate::output::delete_network_settings_output::Builder {
        crate::output::delete_network_settings_output::Builder::default()
    }
}

/// See [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput).
pub mod delete_network_settings_output {

    /// A builder for [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput).
        pub fn build(self) -> crate::output::DeleteNetworkSettingsOutput {
            crate::output::DeleteNetworkSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteIdentityProviderOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteIdentityProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput).
    pub fn builder() -> crate::output::delete_identity_provider_output::Builder {
        crate::output::delete_identity_provider_output::Builder::default()
    }
}

/// See [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput).
pub mod delete_identity_provider_output {

    /// A builder for [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput).
        pub fn build(self) -> crate::output::DeleteIdentityProviderOutput {
            crate::output::DeleteIdentityProviderOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBrowserSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput).
    pub fn builder() -> crate::output::delete_browser_settings_output::Builder {
        crate::output::delete_browser_settings_output::Builder::default()
    }
}

/// See [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput).
pub mod delete_browser_settings_output {

    /// A builder for [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput).
        pub fn build(self) -> crate::output::DeleteBrowserSettingsOutput {
            crate::output::DeleteBrowserSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserSettingsOutput {
    /// <p>The ARN of the user settings.</p>
    #[doc(hidden)]
    pub user_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateUserSettingsOutput {
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput).
    pub fn builder() -> crate::output::create_user_settings_output::Builder {
        crate::output::create_user_settings_output::Builder::default()
    }
}

/// See [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput).
pub mod create_user_settings_output {

    /// A builder for [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the user settings.</p>
        pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn set_user_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput).
        pub fn build(self) -> crate::output::CreateUserSettingsOutput {
            crate::output::CreateUserSettingsOutput {
                user_settings_arn: self.user_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUserAccessLoggingSettingsOutput {
    /// <p>The ARN of the user access logging settings.</p>
    #[doc(hidden)]
    pub user_access_logging_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateUserAccessLoggingSettingsOutput {
    /// <p>The ARN of the user access logging settings.</p>
    pub fn user_access_logging_settings_arn(&self) -> std::option::Option<&str> {
        self.user_access_logging_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserAccessLoggingSettingsOutput`](crate::output::CreateUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::create_user_access_logging_settings_output::Builder {
        crate::output::create_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`CreateUserAccessLoggingSettingsOutput`](crate::output::CreateUserAccessLoggingSettingsOutput).
pub mod create_user_access_logging_settings_output {

    /// A builder for [`CreateUserAccessLoggingSettingsOutput`](crate::output::CreateUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_access_logging_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the user access logging settings.</p>
        pub fn user_access_logging_settings_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.user_access_logging_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user access logging settings.</p>
        pub fn set_user_access_logging_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_access_logging_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserAccessLoggingSettingsOutput`](crate::output::CreateUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::CreateUserAccessLoggingSettingsOutput {
            crate::output::CreateUserAccessLoggingSettingsOutput {
                user_access_logging_settings_arn: self.user_access_logging_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput).
    pub fn builder() -> crate::output::create_trust_store_output::Builder {
        crate::output::create_trust_store_output::Builder::default()
    }
}

/// See [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput).
pub mod create_trust_store_output {

    /// A builder for [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput).
        pub fn build(self) -> crate::output::CreateTrustStoreOutput {
            crate::output::CreateTrustStoreOutput {
                trust_store_arn: self.trust_store_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePortalOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    #[doc(hidden)]
    pub portal_endpoint: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreatePortalOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(&self) -> std::option::Option<&str> {
        self.portal_endpoint.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePortalOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePortalOutput {
    /// Creates a new builder-style object to manufacture [`CreatePortalOutput`](crate::output::CreatePortalOutput).
    pub fn builder() -> crate::output::create_portal_output::Builder {
        crate::output::create_portal_output::Builder::default()
    }
}

/// See [`CreatePortalOutput`](crate::output::CreatePortalOutput).
pub mod create_portal_output {

    /// A builder for [`CreatePortalOutput`](crate::output::CreatePortalOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) portal_endpoint: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
        pub fn portal_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_endpoint = Some(input.into());
            self
        }
        /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
        pub fn set_portal_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.portal_endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePortalOutput`](crate::output::CreatePortalOutput).
        pub fn build(self) -> crate::output::CreatePortalOutput {
            crate::output::CreatePortalOutput {
                portal_arn: self.portal_arn,
                portal_endpoint: self.portal_endpoint,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkSettingsOutput {
    /// <p>The ARN of the network settings.</p>
    #[doc(hidden)]
    pub network_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateNetworkSettingsOutput {
    /// <p>The ARN of the network settings.</p>
    pub fn network_settings_arn(&self) -> std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput).
    pub fn builder() -> crate::output::create_network_settings_output::Builder {
        crate::output::create_network_settings_output::Builder::default()
    }
}

/// See [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput).
pub mod create_network_settings_output {

    /// A builder for [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the network settings.</p>
        pub fn network_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn set_network_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput).
        pub fn build(self) -> crate::output::CreateNetworkSettingsOutput {
            crate::output::CreateNetworkSettingsOutput {
                network_settings_arn: self.network_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateIdentityProviderOutput {
    /// <p>The ARN of the identity provider.</p>
    #[doc(hidden)]
    pub identity_provider_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateIdentityProviderOutput {
    /// <p>The ARN of the identity provider.</p>
    pub fn identity_provider_arn(&self) -> std::option::Option<&str> {
        self.identity_provider_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateIdentityProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput).
    pub fn builder() -> crate::output::create_identity_provider_output::Builder {
        crate::output::create_identity_provider_output::Builder::default()
    }
}

/// See [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput).
pub mod create_identity_provider_output {

    /// A builder for [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the identity provider.</p>
        pub fn identity_provider_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.identity_provider_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the identity provider.</p>
        pub fn set_identity_provider_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.identity_provider_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput).
        pub fn build(self) -> crate::output::CreateIdentityProviderOutput {
            crate::output::CreateIdentityProviderOutput {
                identity_provider_arn: self.identity_provider_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBrowserSettingsOutput {
    /// <p>The ARN of the browser settings.</p>
    #[doc(hidden)]
    pub browser_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateBrowserSettingsOutput {
    /// <p>The ARN of the browser settings.</p>
    pub fn browser_settings_arn(&self) -> std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput).
    pub fn builder() -> crate::output::create_browser_settings_output::Builder {
        crate::output::create_browser_settings_output::Builder::default()
    }
}

/// See [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput).
pub mod create_browser_settings_output {

    /// A builder for [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the browser settings.</p>
        pub fn browser_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.browser_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn set_browser_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.browser_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput).
        pub fn build(self) -> crate::output::CreateBrowserSettingsOutput {
            crate::output::CreateBrowserSettingsOutput {
                browser_settings_arn: self.browser_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateUserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the user settings.</p>
    #[doc(hidden)]
    pub user_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateUserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateUserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput).
    pub fn builder() -> crate::output::associate_user_settings_output::Builder {
        crate::output::associate_user_settings_output::Builder::default()
    }
}

/// See [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput).
pub mod associate_user_settings_output {

    /// A builder for [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) user_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn set_user_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput).
        pub fn build(self) -> crate::output::AssociateUserSettingsOutput {
            crate::output::AssociateUserSettingsOutput {
                portal_arn: self.portal_arn,
                user_settings_arn: self.user_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateUserAccessLoggingSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the user access logging settings.</p>
    #[doc(hidden)]
    pub user_access_logging_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateUserAccessLoggingSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the user access logging settings.</p>
    pub fn user_access_logging_settings_arn(&self) -> std::option::Option<&str> {
        self.user_access_logging_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateUserAccessLoggingSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateUserAccessLoggingSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateUserAccessLoggingSettingsOutput`](crate::output::AssociateUserAccessLoggingSettingsOutput).
    pub fn builder() -> crate::output::associate_user_access_logging_settings_output::Builder {
        crate::output::associate_user_access_logging_settings_output::Builder::default()
    }
}

/// See [`AssociateUserAccessLoggingSettingsOutput`](crate::output::AssociateUserAccessLoggingSettingsOutput).
pub mod associate_user_access_logging_settings_output {

    /// A builder for [`AssociateUserAccessLoggingSettingsOutput`](crate::output::AssociateUserAccessLoggingSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) user_access_logging_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the user access logging settings.</p>
        pub fn user_access_logging_settings_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.user_access_logging_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user access logging settings.</p>
        pub fn set_user_access_logging_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_access_logging_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateUserAccessLoggingSettingsOutput`](crate::output::AssociateUserAccessLoggingSettingsOutput).
        pub fn build(self) -> crate::output::AssociateUserAccessLoggingSettingsOutput {
            crate::output::AssociateUserAccessLoggingSettingsOutput {
                portal_arn: self.portal_arn,
                user_access_logging_settings_arn: self.user_access_logging_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTrustStoreOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the trust store.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateTrustStoreOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateTrustStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput).
    pub fn builder() -> crate::output::associate_trust_store_output::Builder {
        crate::output::associate_trust_store_output::Builder::default()
    }
}

/// See [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput).
pub mod associate_trust_store_output {

    /// A builder for [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput).
        pub fn build(self) -> crate::output::AssociateTrustStoreOutput {
            crate::output::AssociateTrustStoreOutput {
                portal_arn: self.portal_arn,
                trust_store_arn: self.trust_store_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateNetworkSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the network settings.</p>
    #[doc(hidden)]
    pub network_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateNetworkSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the network settings.</p>
    pub fn network_settings_arn(&self) -> std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateNetworkSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput).
    pub fn builder() -> crate::output::associate_network_settings_output::Builder {
        crate::output::associate_network_settings_output::Builder::default()
    }
}

/// See [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput).
pub mod associate_network_settings_output {

    /// A builder for [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) network_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn network_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn set_network_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput).
        pub fn build(self) -> crate::output::AssociateNetworkSettingsOutput {
            crate::output::AssociateNetworkSettingsOutput {
                portal_arn: self.portal_arn,
                network_settings_arn: self.network_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateBrowserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the browser settings.</p>
    #[doc(hidden)]
    pub browser_settings_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateBrowserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the browser settings.</p>
    pub fn browser_settings_arn(&self) -> std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateBrowserSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput).
    pub fn builder() -> crate::output::associate_browser_settings_output::Builder {
        crate::output::associate_browser_settings_output::Builder::default()
    }
}

/// See [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput).
pub mod associate_browser_settings_output {

    /// A builder for [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) browser_settings_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn browser_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.browser_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn set_browser_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.browser_settings_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput).
        pub fn build(self) -> crate::output::AssociateBrowserSettingsOutput {
            crate::output::AssociateBrowserSettingsOutput {
                portal_arn: self.portal_arn,
                browser_settings_arn: self.browser_settings_arn,
                _request_id: self._request_id,
            }
        }
    }
}
