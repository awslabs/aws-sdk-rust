// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_toolbar_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ToolbarConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.toolbar_type {
        object.key("toolbarType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.visual_mode {
        object.key("visualMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.hidden_toolbar_items {
        let mut array_4 = object.key("hiddenToolbarItems").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.max_display_resolution {
        object.key("maxDisplayResolution").string(var_6.as_str());
    }
    Ok(())
}

pub(crate) fn de_toolbar_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ToolbarConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ToolbarConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "toolbarType" => {
                            builder = builder.set_toolbar_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ToolbarType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "visualMode" => {
                            builder = builder.set_visual_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VisualMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hiddenToolbarItems" => {
                            builder = builder.set_hidden_toolbar_items(
                                crate::protocol_serde::shape_hidden_toolbar_item_list::de_hidden_toolbar_item_list(tokens)?,
                            );
                        }
                        "maxDisplayResolution" => {
                            builder = builder.set_max_display_resolution(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MaxDisplayResolution::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
