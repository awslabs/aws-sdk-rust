// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_user_settings_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_user_settings::UpdateUserSettingsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.cookie_synchronization_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("cookieSynchronizationConfiguration").start_object();
        crate::protocol_serde::shape_cookie_synchronization_configuration::ser_cookie_synchronization_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.copy_allowed {
        object.key("copyAllowed").string(var_4.as_str());
    }
    if let Some(var_5) = &input.disconnect_timeout_in_minutes {
        object.key("disconnectTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.download_allowed {
        object.key("downloadAllowed").string(var_6.as_str());
    }
    if let Some(var_7) = &input.idle_disconnect_timeout_in_minutes {
        object.key("idleDisconnectTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.paste_allowed {
        object.key("pasteAllowed").string(var_8.as_str());
    }
    if let Some(var_9) = &input.print_allowed {
        object.key("printAllowed").string(var_9.as_str());
    }
    if let Some(var_10) = &input.upload_allowed {
        object.key("uploadAllowed").string(var_10.as_str());
    }
    Ok(())
}
