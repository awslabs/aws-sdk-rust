// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_inline_redaction_pattern(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InlineRedactionPattern,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.built_in_pattern_id {
        object.key("builtInPatternId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.custom_pattern {
        #[allow(unused_mut)]
        let mut object_3 = object.key("customPattern").start_object();
        crate::protocol_serde::shape_custom_pattern::ser_custom_pattern(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.redaction_place_holder {
        #[allow(unused_mut)]
        let mut object_5 = object.key("redactionPlaceHolder").start_object();
        crate::protocol_serde::shape_redaction_place_holder::ser_redaction_place_holder(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.enforced_urls {
        let mut array_7 = object.key("enforcedUrls").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.exempt_urls {
        let mut array_10 = object.key("exemptUrls").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.confidence_level {
        object.key("confidenceLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_inline_redaction_pattern<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::InlineRedactionPattern>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InlineRedactionPatternBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "builtInPatternId" => {
                            builder = builder.set_built_in_pattern_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "customPattern" => {
                            builder = builder.set_custom_pattern(crate::protocol_serde::shape_custom_pattern::de_custom_pattern(tokens)?);
                        }
                        "redactionPlaceHolder" => {
                            builder = builder
                                .set_redaction_place_holder(crate::protocol_serde::shape_redaction_place_holder::de_redaction_place_holder(tokens)?);
                        }
                        "enforcedUrls" => {
                            builder =
                                builder.set_enforced_urls(crate::protocol_serde::shape_inline_redaction_urls::de_inline_redaction_urls(tokens)?);
                        }
                        "exemptUrls" => {
                            builder = builder.set_exempt_urls(crate::protocol_serde::shape_inline_redaction_urls::de_inline_redaction_urls(tokens)?);
                        }
                        "confidenceLevel" => {
                            builder = builder.set_confidence_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::inline_redaction_pattern_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
