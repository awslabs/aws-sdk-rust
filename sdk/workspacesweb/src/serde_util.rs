// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn associate_browser_settings_output_correct_errors(
    mut builder: crate::operation::associate_browser_settings::builders::AssociateBrowserSettingsOutputBuilder,
) -> crate::operation::associate_browser_settings::builders::AssociateBrowserSettingsOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.browser_settings_arn.is_none() {
        builder.browser_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn associate_ip_access_settings_output_correct_errors(
    mut builder: crate::operation::associate_ip_access_settings::builders::AssociateIpAccessSettingsOutputBuilder,
) -> crate::operation::associate_ip_access_settings::builders::AssociateIpAccessSettingsOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.ip_access_settings_arn.is_none() {
        builder.ip_access_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn associate_network_settings_output_correct_errors(
    mut builder: crate::operation::associate_network_settings::builders::AssociateNetworkSettingsOutputBuilder,
) -> crate::operation::associate_network_settings::builders::AssociateNetworkSettingsOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.network_settings_arn.is_none() {
        builder.network_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn associate_trust_store_output_correct_errors(
    mut builder: crate::operation::associate_trust_store::builders::AssociateTrustStoreOutputBuilder,
) -> crate::operation::associate_trust_store::builders::AssociateTrustStoreOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn associate_user_access_logging_settings_output_correct_errors(
    mut builder: crate::operation::associate_user_access_logging_settings::builders::AssociateUserAccessLoggingSettingsOutputBuilder,
) -> crate::operation::associate_user_access_logging_settings::builders::AssociateUserAccessLoggingSettingsOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.user_access_logging_settings_arn.is_none() {
        builder.user_access_logging_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn associate_user_settings_output_correct_errors(
    mut builder: crate::operation::associate_user_settings::builders::AssociateUserSettingsOutputBuilder,
) -> crate::operation::associate_user_settings::builders::AssociateUserSettingsOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.user_settings_arn.is_none() {
        builder.user_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_browser_settings_output_correct_errors(
    mut builder: crate::operation::create_browser_settings::builders::CreateBrowserSettingsOutputBuilder,
) -> crate::operation::create_browser_settings::builders::CreateBrowserSettingsOutputBuilder {
    if builder.browser_settings_arn.is_none() {
        builder.browser_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_identity_provider_output_correct_errors(
    mut builder: crate::operation::create_identity_provider::builders::CreateIdentityProviderOutputBuilder,
) -> crate::operation::create_identity_provider::builders::CreateIdentityProviderOutputBuilder {
    if builder.identity_provider_arn.is_none() {
        builder.identity_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_ip_access_settings_output_correct_errors(
    mut builder: crate::operation::create_ip_access_settings::builders::CreateIpAccessSettingsOutputBuilder,
) -> crate::operation::create_ip_access_settings::builders::CreateIpAccessSettingsOutputBuilder {
    if builder.ip_access_settings_arn.is_none() {
        builder.ip_access_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_network_settings_output_correct_errors(
    mut builder: crate::operation::create_network_settings::builders::CreateNetworkSettingsOutputBuilder,
) -> crate::operation::create_network_settings::builders::CreateNetworkSettingsOutputBuilder {
    if builder.network_settings_arn.is_none() {
        builder.network_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_portal_output_correct_errors(
    mut builder: crate::operation::create_portal::builders::CreatePortalOutputBuilder,
) -> crate::operation::create_portal::builders::CreatePortalOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.portal_endpoint.is_none() {
        builder.portal_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn create_trust_store_output_correct_errors(
    mut builder: crate::operation::create_trust_store::builders::CreateTrustStoreOutputBuilder,
) -> crate::operation::create_trust_store::builders::CreateTrustStoreOutputBuilder {
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_user_access_logging_settings_output_correct_errors(
    mut builder: crate::operation::create_user_access_logging_settings::builders::CreateUserAccessLoggingSettingsOutputBuilder,
) -> crate::operation::create_user_access_logging_settings::builders::CreateUserAccessLoggingSettingsOutputBuilder {
    if builder.user_access_logging_settings_arn.is_none() {
        builder.user_access_logging_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_user_settings_output_correct_errors(
    mut builder: crate::operation::create_user_settings::builders::CreateUserSettingsOutputBuilder,
) -> crate::operation::create_user_settings::builders::CreateUserSettingsOutputBuilder {
    if builder.user_settings_arn.is_none() {
        builder.user_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_portal_service_provider_metadata_output_correct_errors(
    mut builder: crate::operation::get_portal_service_provider_metadata::builders::GetPortalServiceProviderMetadataOutputBuilder,
) -> crate::operation::get_portal_service_provider_metadata::builders::GetPortalServiceProviderMetadataOutputBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_trust_store_certificate_output_correct_errors(
    mut builder: crate::operation::get_trust_store_certificate::builders::GetTrustStoreCertificateOutputBuilder,
) -> crate::operation::get_trust_store_certificate::builders::GetTrustStoreCertificateOutputBuilder {
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_trust_store_certificates_output_correct_errors(
    mut builder: crate::operation::list_trust_store_certificates::builders::ListTrustStoreCertificatesOutputBuilder,
) -> crate::operation::list_trust_store_certificates::builders::ListTrustStoreCertificatesOutputBuilder {
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_browser_settings_output_correct_errors(
    mut builder: crate::operation::update_browser_settings::builders::UpdateBrowserSettingsOutputBuilder,
) -> crate::operation::update_browser_settings::builders::UpdateBrowserSettingsOutputBuilder {
    if builder.browser_settings.is_none() {
        builder.browser_settings = {
            let builder = crate::types::builders::BrowserSettingsBuilder::default();
            crate::serde_util::browser_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_identity_provider_output_correct_errors(
    mut builder: crate::operation::update_identity_provider::builders::UpdateIdentityProviderOutputBuilder,
) -> crate::operation::update_identity_provider::builders::UpdateIdentityProviderOutputBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = {
            let builder = crate::types::builders::IdentityProviderBuilder::default();
            crate::serde_util::identity_provider_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_ip_access_settings_output_correct_errors(
    mut builder: crate::operation::update_ip_access_settings::builders::UpdateIpAccessSettingsOutputBuilder,
) -> crate::operation::update_ip_access_settings::builders::UpdateIpAccessSettingsOutputBuilder {
    if builder.ip_access_settings.is_none() {
        builder.ip_access_settings = {
            let builder = crate::types::builders::IpAccessSettingsBuilder::default();
            crate::serde_util::ip_access_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_network_settings_output_correct_errors(
    mut builder: crate::operation::update_network_settings::builders::UpdateNetworkSettingsOutputBuilder,
) -> crate::operation::update_network_settings::builders::UpdateNetworkSettingsOutputBuilder {
    if builder.network_settings.is_none() {
        builder.network_settings = {
            let builder = crate::types::builders::NetworkSettingsBuilder::default();
            crate::serde_util::network_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_trust_store_output_correct_errors(
    mut builder: crate::operation::update_trust_store::builders::UpdateTrustStoreOutputBuilder,
) -> crate::operation::update_trust_store::builders::UpdateTrustStoreOutputBuilder {
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_user_access_logging_settings_output_correct_errors(
    mut builder: crate::operation::update_user_access_logging_settings::builders::UpdateUserAccessLoggingSettingsOutputBuilder,
) -> crate::operation::update_user_access_logging_settings::builders::UpdateUserAccessLoggingSettingsOutputBuilder {
    if builder.user_access_logging_settings.is_none() {
        builder.user_access_logging_settings = {
            let builder = crate::types::builders::UserAccessLoggingSettingsBuilder::default();
            crate::serde_util::user_access_logging_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_user_settings_output_correct_errors(
    mut builder: crate::operation::update_user_settings::builders::UpdateUserSettingsOutputBuilder,
) -> crate::operation::update_user_settings::builders::UpdateUserSettingsOutputBuilder {
    if builder.user_settings.is_none() {
        builder.user_settings = {
            let builder = crate::types::builders::UserSettingsBuilder::default();
            crate::serde_util::user_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn browser_settings_correct_errors(
    mut builder: crate::types::builders::BrowserSettingsBuilder,
) -> crate::types::builders::BrowserSettingsBuilder {
    if builder.browser_settings_arn.is_none() {
        builder.browser_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_provider_correct_errors(
    mut builder: crate::types::builders::IdentityProviderBuilder,
) -> crate::types::builders::IdentityProviderBuilder {
    if builder.identity_provider_arn.is_none() {
        builder.identity_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_access_settings_correct_errors(
    mut builder: crate::types::builders::IpAccessSettingsBuilder,
) -> crate::types::builders::IpAccessSettingsBuilder {
    if builder.ip_access_settings_arn.is_none() {
        builder.ip_access_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn network_settings_correct_errors(
    mut builder: crate::types::builders::NetworkSettingsBuilder,
) -> crate::types::builders::NetworkSettingsBuilder {
    if builder.network_settings_arn.is_none() {
        builder.network_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn user_access_logging_settings_correct_errors(
    mut builder: crate::types::builders::UserAccessLoggingSettingsBuilder,
) -> crate::types::builders::UserAccessLoggingSettingsBuilder {
    if builder.user_access_logging_settings_arn.is_none() {
        builder.user_access_logging_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn user_settings_correct_errors(mut builder: crate::types::builders::UserSettingsBuilder) -> crate::types::builders::UserSettingsBuilder {
    if builder.user_settings_arn.is_none() {
        builder.user_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn portal_correct_errors(mut builder: crate::types::builders::PortalBuilder) -> crate::types::builders::PortalBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn trust_store_correct_errors(mut builder: crate::types::builders::TrustStoreBuilder) -> crate::types::builders::TrustStoreBuilder {
    if builder.trust_store_arn.is_none() {
        builder.trust_store_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn browser_settings_summary_correct_errors(
    mut builder: crate::types::builders::BrowserSettingsSummaryBuilder,
) -> crate::types::builders::BrowserSettingsSummaryBuilder {
    if builder.browser_settings_arn.is_none() {
        builder.browser_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cookie_synchronization_configuration_correct_errors(
    mut builder: crate::types::builders::CookieSynchronizationConfigurationBuilder,
) -> crate::types::builders::CookieSynchronizationConfigurationBuilder {
    if builder.allowlist.is_none() {
        builder.allowlist = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_provider_summary_correct_errors(
    mut builder: crate::types::builders::IdentityProviderSummaryBuilder,
) -> crate::types::builders::IdentityProviderSummaryBuilder {
    if builder.identity_provider_arn.is_none() {
        builder.identity_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_access_settings_summary_correct_errors(
    mut builder: crate::types::builders::IpAccessSettingsSummaryBuilder,
) -> crate::types::builders::IpAccessSettingsSummaryBuilder {
    if builder.ip_access_settings_arn.is_none() {
        builder.ip_access_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn network_settings_summary_correct_errors(
    mut builder: crate::types::builders::NetworkSettingsSummaryBuilder,
) -> crate::types::builders::NetworkSettingsSummaryBuilder {
    if builder.network_settings_arn.is_none() {
        builder.network_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn portal_summary_correct_errors(
    mut builder: crate::types::builders::PortalSummaryBuilder,
) -> crate::types::builders::PortalSummaryBuilder {
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn user_access_logging_settings_summary_correct_errors(
    mut builder: crate::types::builders::UserAccessLoggingSettingsSummaryBuilder,
) -> crate::types::builders::UserAccessLoggingSettingsSummaryBuilder {
    if builder.user_access_logging_settings_arn.is_none() {
        builder.user_access_logging_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn user_settings_summary_correct_errors(
    mut builder: crate::types::builders::UserSettingsSummaryBuilder,
) -> crate::types::builders::UserSettingsSummaryBuilder {
    if builder.user_settings_arn.is_none() {
        builder.user_settings_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_rule_correct_errors(mut builder: crate::types::builders::IpRuleBuilder) -> crate::types::builders::IpRuleBuilder {
    if builder.ip_range.is_none() {
        builder.ip_range = Some(Default::default())
    }
    builder
}

pub(crate) fn cookie_specification_correct_errors(
    mut builder: crate::types::builders::CookieSpecificationBuilder,
) -> crate::types::builders::CookieSpecificationBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    builder
}
