// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_browser_settings_output_next_token(
    input: &crate::operation::list_browser_settings::ListBrowserSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_identity_providers_output_next_token(
    input: &crate::operation::list_identity_providers::ListIdentityProvidersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_network_settings_output_next_token(
    input: &crate::operation::list_network_settings::ListNetworkSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_portals_output_next_token(
    input: &crate::operation::list_portals::ListPortalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_trust_store_certificates_output_next_token(
    input: &crate::operation::list_trust_store_certificates::ListTrustStoreCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_trust_stores_output_next_token(
    input: &crate::operation::list_trust_stores::ListTrustStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_user_access_logging_settings_output_next_token(
    input: &crate::operation::list_user_access_logging_settings::ListUserAccessLoggingSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_user_settings_output_next_token(
    input: &crate::operation::list_user_settings::ListUserSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
