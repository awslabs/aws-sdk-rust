// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BrowserSettings {
    /// <p>The ARN of the browser settings.</p>
    pub browser_settings_arn: ::std::string::String,
    /// <p>A list of web portal ARNs that this browser settings is associated with.</p>
    pub associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    pub browser_policy: ::std::option::Option<::std::string::String>,
}
impl BrowserSettings {
    /// <p>The ARN of the browser settings.</p>
    pub fn browser_settings_arn(&self) -> &str {
        use std::ops::Deref;
        self.browser_settings_arn.deref()
    }
    /// <p>A list of web portal ARNs that this browser settings is associated with.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_portal_arns.is_none()`.
    pub fn associated_portal_arns(&self) -> &[::std::string::String] {
        self.associated_portal_arns.as_deref().unwrap_or_default()
    }
    /// <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    pub fn browser_policy(&self) -> ::std::option::Option<&str> {
        self.browser_policy.as_deref()
    }
}
impl ::std::fmt::Debug for BrowserSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BrowserSettings");
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("browser_policy", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BrowserSettings {
    /// Creates a new builder-style object to manufacture [`BrowserSettings`](crate::types::BrowserSettings).
    pub fn builder() -> crate::types::builders::BrowserSettingsBuilder {
        crate::types::builders::BrowserSettingsBuilder::default()
    }
}

/// A builder for [`BrowserSettings`](crate::types::BrowserSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct BrowserSettingsBuilder {
    pub(crate) browser_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) browser_policy: ::std::option::Option<::std::string::String>,
}
impl BrowserSettingsBuilder {
    /// <p>The ARN of the browser settings.</p>
    /// This field is required.
    pub fn browser_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the browser settings.</p>
    pub fn set_browser_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_settings_arn = input;
        self
    }
    /// <p>The ARN of the browser settings.</p>
    pub fn get_browser_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_settings_arn
    }
    /// Appends an item to `associated_portal_arns`.
    ///
    /// To override the contents of this collection use [`set_associated_portal_arns`](Self::set_associated_portal_arns).
    ///
    /// <p>A list of web portal ARNs that this browser settings is associated with.</p>
    pub fn associated_portal_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.associated_portal_arns.unwrap_or_default();
        v.push(input.into());
        self.associated_portal_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of web portal ARNs that this browser settings is associated with.</p>
    pub fn set_associated_portal_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.associated_portal_arns = input;
        self
    }
    /// <p>A list of web portal ARNs that this browser settings is associated with.</p>
    pub fn get_associated_portal_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.associated_portal_arns
    }
    /// <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    pub fn browser_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    pub fn set_browser_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_policy = input;
        self
    }
    /// <p>A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.</p>
    pub fn get_browser_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_policy
    }
    /// Consumes the builder and constructs a [`BrowserSettings`](crate::types::BrowserSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_settings_arn`](crate::types::builders::BrowserSettingsBuilder::browser_settings_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::BrowserSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BrowserSettings {
            browser_settings_arn: self.browser_settings_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_settings_arn",
                    "browser_settings_arn was not specified but it is required when building BrowserSettings",
                )
            })?,
            associated_portal_arns: self.associated_portal_arns,
            browser_policy: self.browser_policy,
        })
    }
}
impl ::std::fmt::Debug for BrowserSettingsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BrowserSettingsBuilder");
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("browser_policy", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
