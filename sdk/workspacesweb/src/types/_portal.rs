// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The web portal.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Portal {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: ::std::string::String,
    /// <p>The renderer that is used in streaming sessions.</p>
    pub renderer_type: ::std::option::Option<crate::types::RendererType>,
    /// <p>The browser that users see when using a streaming session.</p>
    pub browser_type: ::std::option::Option<crate::types::BrowserType>,
    /// <p>The status of the web portal.</p>
    pub portal_status: ::std::option::Option<crate::types::PortalStatus>,
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub portal_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The name of the web portal.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The creation date of the web portal.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the browser settings that is associated with this web portal.</p>
    pub browser_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub user_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub network_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the trust store that is associated with the web portal.</p>
    pub trust_store_arn: ::std::option::Option<::std::string::String>,
    /// <p>A message that explains why the web portal is in its current status.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub user_access_logging_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p><code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p><code>IAM Identity Center</code> web portals are authenticated through IAM Identity Center. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>The ARN of the IP access settings.</p>
    pub ip_access_settings_arn: ::std::option::Option<::std::string::String>,
    /// <p>The customer managed key used to encrypt sensitive information in the portal.</p>
    pub customer_managed_key: ::std::option::Option<::std::string::String>,
    /// <p>The additional encryption context of the portal.</p>
    pub additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The type and resources of the underlying instance.</p>
    pub instance_type: ::std::option::Option<crate::types::InstanceType>,
    /// <p>The maximum number of concurrent sessions for the portal.</p>
    pub max_concurrent_sessions: ::std::option::Option<i32>,
}
impl Portal {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> &str {
        use std::ops::Deref;
        self.portal_arn.deref()
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn renderer_type(&self) -> ::std::option::Option<&crate::types::RendererType> {
        self.renderer_type.as_ref()
    }
    /// <p>The browser that users see when using a streaming session.</p>
    pub fn browser_type(&self) -> ::std::option::Option<&crate::types::BrowserType> {
        self.browser_type.as_ref()
    }
    /// <p>The status of the web portal.</p>
    pub fn portal_status(&self) -> ::std::option::Option<&crate::types::PortalStatus> {
        self.portal_status.as_ref()
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(&self) -> ::std::option::Option<&str> {
        self.portal_endpoint.as_deref()
    }
    /// <p>The name of the web portal.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The creation date of the web portal.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The ARN of the browser settings that is associated with this web portal.</p>
    pub fn browser_settings_arn(&self) -> ::std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn user_settings_arn(&self) -> ::std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn network_settings_arn(&self) -> ::std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
    /// <p>The ARN of the trust store that is associated with the web portal.</p>
    pub fn trust_store_arn(&self) -> ::std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>A message that explains why the web portal is in its current status.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn user_access_logging_settings_arn(&self) -> ::std::option::Option<&str> {
        self.user_access_logging_settings_arn.as_deref()
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p><code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p><code>IAM Identity Center</code> web portals are authenticated through IAM Identity Center. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>The ARN of the IP access settings.</p>
    pub fn ip_access_settings_arn(&self) -> ::std::option::Option<&str> {
        self.ip_access_settings_arn.as_deref()
    }
    /// <p>The customer managed key used to encrypt sensitive information in the portal.</p>
    pub fn customer_managed_key(&self) -> ::std::option::Option<&str> {
        self.customer_managed_key.as_deref()
    }
    /// <p>The additional encryption context of the portal.</p>
    pub fn additional_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_encryption_context.as_ref()
    }
    /// <p>The type and resources of the underlying instance.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The maximum number of concurrent sessions for the portal.</p>
    pub fn max_concurrent_sessions(&self) -> ::std::option::Option<i32> {
        self.max_concurrent_sessions
    }
}
impl ::std::fmt::Debug for Portal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Portal");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("renderer_type", &self.renderer_type);
        formatter.field("browser_type", &self.browser_type);
        formatter.field("portal_status", &self.portal_status);
        formatter.field("portal_endpoint", &self.portal_endpoint);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("user_access_logging_settings_arn", &self.user_access_logging_settings_arn);
        formatter.field("authentication_type", &self.authentication_type);
        formatter.field("ip_access_settings_arn", &self.ip_access_settings_arn);
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("max_concurrent_sessions", &self.max_concurrent_sessions);
        formatter.finish()
    }
}
impl Portal {
    /// Creates a new builder-style object to manufacture [`Portal`](crate::types::Portal).
    pub fn builder() -> crate::types::builders::PortalBuilder {
        crate::types::builders::PortalBuilder::default()
    }
}

/// A builder for [`Portal`](crate::types::Portal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PortalBuilder {
    pub(crate) portal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) renderer_type: ::std::option::Option<crate::types::RendererType>,
    pub(crate) browser_type: ::std::option::Option<crate::types::BrowserType>,
    pub(crate) portal_status: ::std::option::Option<crate::types::PortalStatus>,
    pub(crate) portal_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) browser_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trust_store_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) user_access_logging_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) ip_access_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_managed_key: ::std::option::Option<::std::string::String>,
    pub(crate) additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) instance_type: ::std::option::Option<crate::types::InstanceType>,
    pub(crate) max_concurrent_sessions: ::std::option::Option<i32>,
}
impl PortalBuilder {
    /// <p>The ARN of the web portal.</p>
    /// This field is required.
    pub fn portal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the web portal.</p>
    pub fn set_portal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_arn = input;
        self
    }
    /// <p>The ARN of the web portal.</p>
    pub fn get_portal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_arn
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn renderer_type(mut self, input: crate::types::RendererType) -> Self {
        self.renderer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn set_renderer_type(mut self, input: ::std::option::Option<crate::types::RendererType>) -> Self {
        self.renderer_type = input;
        self
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn get_renderer_type(&self) -> &::std::option::Option<crate::types::RendererType> {
        &self.renderer_type
    }
    /// <p>The browser that users see when using a streaming session.</p>
    pub fn browser_type(mut self, input: crate::types::BrowserType) -> Self {
        self.browser_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The browser that users see when using a streaming session.</p>
    pub fn set_browser_type(mut self, input: ::std::option::Option<crate::types::BrowserType>) -> Self {
        self.browser_type = input;
        self
    }
    /// <p>The browser that users see when using a streaming session.</p>
    pub fn get_browser_type(&self) -> &::std::option::Option<crate::types::BrowserType> {
        &self.browser_type
    }
    /// <p>The status of the web portal.</p>
    pub fn portal_status(mut self, input: crate::types::PortalStatus) -> Self {
        self.portal_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the web portal.</p>
    pub fn set_portal_status(mut self, input: ::std::option::Option<crate::types::PortalStatus>) -> Self {
        self.portal_status = input;
        self
    }
    /// <p>The status of the web portal.</p>
    pub fn get_portal_status(&self) -> &::std::option::Option<crate::types::PortalStatus> {
        &self.portal_status
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn set_portal_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_endpoint = input;
        self
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn get_portal_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_endpoint
    }
    /// <p>The name of the web portal.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the web portal.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the web portal.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The creation date of the web portal.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation date of the web portal.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The creation date of the web portal.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The ARN of the browser settings that is associated with this web portal.</p>
    pub fn browser_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the browser settings that is associated with this web portal.</p>
    pub fn set_browser_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_settings_arn = input;
        self
    }
    /// <p>The ARN of the browser settings that is associated with this web portal.</p>
    pub fn get_browser_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_settings_arn
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn user_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn set_user_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_settings_arn = input;
        self
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn get_user_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_settings_arn
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn network_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn set_network_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_settings_arn = input;
        self
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn get_network_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_settings_arn
    }
    /// <p>The ARN of the trust store that is associated with the web portal.</p>
    pub fn trust_store_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trust_store_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the trust store that is associated with the web portal.</p>
    pub fn set_trust_store_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trust_store_arn = input;
        self
    }
    /// <p>The ARN of the trust store that is associated with the web portal.</p>
    pub fn get_trust_store_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trust_store_arn
    }
    /// <p>A message that explains why the web portal is in its current status.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message that explains why the web portal is in its current status.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A message that explains why the web portal is in its current status.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn user_access_logging_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_access_logging_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn set_user_access_logging_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_access_logging_settings_arn = input;
        self
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn get_user_access_logging_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_access_logging_settings_arn
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p><code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p><code>IAM Identity Center</code> web portals are authenticated through IAM Identity Center. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p><code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p><code>IAM Identity Center</code> web portals are authenticated through IAM Identity Center. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p><code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p><code>IAM Identity Center</code> web portals are authenticated through IAM Identity Center. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>The ARN of the IP access settings.</p>
    pub fn ip_access_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_access_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IP access settings.</p>
    pub fn set_ip_access_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_access_settings_arn = input;
        self
    }
    /// <p>The ARN of the IP access settings.</p>
    pub fn get_ip_access_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_access_settings_arn
    }
    /// <p>The customer managed key used to encrypt sensitive information in the portal.</p>
    pub fn customer_managed_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_managed_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer managed key used to encrypt sensitive information in the portal.</p>
    pub fn set_customer_managed_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_managed_key = input;
        self
    }
    /// <p>The customer managed key used to encrypt sensitive information in the portal.</p>
    pub fn get_customer_managed_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_managed_key
    }
    /// Adds a key-value pair to `additional_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_additional_encryption_context`](Self::set_additional_encryption_context).
    ///
    /// <p>The additional encryption context of the portal.</p>
    pub fn additional_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The additional encryption context of the portal.</p>
    pub fn set_additional_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_encryption_context = input;
        self
    }
    /// <p>The additional encryption context of the portal.</p>
    pub fn get_additional_encryption_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_encryption_context
    }
    /// <p>The type and resources of the underlying instance.</p>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type and resources of the underlying instance.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::InstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type and resources of the underlying instance.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::InstanceType> {
        &self.instance_type
    }
    /// <p>The maximum number of concurrent sessions for the portal.</p>
    pub fn max_concurrent_sessions(mut self, input: i32) -> Self {
        self.max_concurrent_sessions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of concurrent sessions for the portal.</p>
    pub fn set_max_concurrent_sessions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrent_sessions = input;
        self
    }
    /// <p>The maximum number of concurrent sessions for the portal.</p>
    pub fn get_max_concurrent_sessions(&self) -> &::std::option::Option<i32> {
        &self.max_concurrent_sessions
    }
    /// Consumes the builder and constructs a [`Portal`](crate::types::Portal).
    /// This method will fail if any of the following fields are not set:
    /// - [`portal_arn`](crate::types::builders::PortalBuilder::portal_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::Portal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Portal {
            portal_arn: self.portal_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_arn",
                    "portal_arn was not specified but it is required when building Portal",
                )
            })?,
            renderer_type: self.renderer_type,
            browser_type: self.browser_type,
            portal_status: self.portal_status,
            portal_endpoint: self.portal_endpoint,
            display_name: self.display_name,
            creation_date: self.creation_date,
            browser_settings_arn: self.browser_settings_arn,
            user_settings_arn: self.user_settings_arn,
            network_settings_arn: self.network_settings_arn,
            trust_store_arn: self.trust_store_arn,
            status_reason: self.status_reason,
            user_access_logging_settings_arn: self.user_access_logging_settings_arn,
            authentication_type: self.authentication_type,
            ip_access_settings_arn: self.ip_access_settings_arn,
            customer_managed_key: self.customer_managed_key,
            additional_encryption_context: self.additional_encryption_context,
            instance_type: self.instance_type,
            max_concurrent_sessions: self.max_concurrent_sessions,
        })
    }
}
impl ::std::fmt::Debug for PortalBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PortalBuilder");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("renderer_type", &self.renderer_type);
        formatter.field("browser_type", &self.browser_type);
        formatter.field("portal_status", &self.portal_status);
        formatter.field("portal_endpoint", &self.portal_endpoint);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("user_access_logging_settings_arn", &self.user_access_logging_settings_arn);
        formatter.field("authentication_type", &self.authentication_type);
        formatter.field("ip_access_settings_arn", &self.ip_access_settings_arn);
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("max_concurrent_sessions", &self.max_concurrent_sessions);
        formatter.finish()
    }
}
