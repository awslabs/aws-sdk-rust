// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the portal.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PortalSummary {
    /// <p>The ARN of the web portal.</p>
    #[doc(hidden)]
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The renderer that is used in streaming sessions.</p>
    #[doc(hidden)]
    pub renderer_type: std::option::Option<crate::types::RendererType>,
    /// <p>The browser type of the web portal.</p>
    #[doc(hidden)]
    pub browser_type: std::option::Option<crate::types::BrowserType>,
    /// <p>The status of the web portal.</p>
    #[doc(hidden)]
    pub portal_status: std::option::Option<crate::types::PortalStatus>,
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    #[doc(hidden)]
    pub portal_endpoint: std::option::Option<std::string::String>,
    /// <p>The name of the web portal.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The creation date of the web portal.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the browser settings that is associated with the web portal.</p>
    #[doc(hidden)]
    pub browser_settings_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    #[doc(hidden)]
    pub user_settings_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    #[doc(hidden)]
    pub network_settings_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the trust that is associated with this web portal.</p>
    #[doc(hidden)]
    pub trust_store_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    #[doc(hidden)]
    pub user_access_logging_settings_arn: std::option::Option<std::string::String>,
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    #[doc(hidden)]
    pub authentication_type: std::option::Option<crate::types::AuthenticationType>,
}
impl PortalSummary {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn renderer_type(&self) -> std::option::Option<&crate::types::RendererType> {
        self.renderer_type.as_ref()
    }
    /// <p>The browser type of the web portal.</p>
    pub fn browser_type(&self) -> std::option::Option<&crate::types::BrowserType> {
        self.browser_type.as_ref()
    }
    /// <p>The status of the web portal.</p>
    pub fn portal_status(&self) -> std::option::Option<&crate::types::PortalStatus> {
        self.portal_status.as_ref()
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(&self) -> std::option::Option<&str> {
        self.portal_endpoint.as_deref()
    }
    /// <p>The name of the web portal.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The creation date of the web portal.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The ARN of the browser settings that is associated with the web portal.</p>
    pub fn browser_settings_arn(&self) -> std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn network_settings_arn(&self) -> std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
    /// <p>The ARN of the trust that is associated with this web portal.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn user_access_logging_settings_arn(&self) -> std::option::Option<&str> {
        self.user_access_logging_settings_arn.as_deref()
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn authentication_type(&self) -> std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
}
impl std::fmt::Debug for PortalSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PortalSummary");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("renderer_type", &self.renderer_type);
        formatter.field("browser_type", &self.browser_type);
        formatter.field("portal_status", &self.portal_status);
        formatter.field("portal_endpoint", &self.portal_endpoint);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field(
            "user_access_logging_settings_arn",
            &self.user_access_logging_settings_arn,
        );
        formatter.field("authentication_type", &self.authentication_type);
        formatter.finish()
    }
}
impl PortalSummary {
    /// Creates a new builder-style object to manufacture [`PortalSummary`](crate::types::PortalSummary).
    pub fn builder() -> crate::types::builders::PortalSummaryBuilder {
        crate::types::builders::PortalSummaryBuilder::default()
    }
}

/// A builder for [`PortalSummary`](crate::types::PortalSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PortalSummaryBuilder {
    pub(crate) portal_arn: std::option::Option<std::string::String>,
    pub(crate) renderer_type: std::option::Option<crate::types::RendererType>,
    pub(crate) browser_type: std::option::Option<crate::types::BrowserType>,
    pub(crate) portal_status: std::option::Option<crate::types::PortalStatus>,
    pub(crate) portal_endpoint: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) browser_settings_arn: std::option::Option<std::string::String>,
    pub(crate) user_settings_arn: std::option::Option<std::string::String>,
    pub(crate) network_settings_arn: std::option::Option<std::string::String>,
    pub(crate) trust_store_arn: std::option::Option<std::string::String>,
    pub(crate) user_access_logging_settings_arn: std::option::Option<std::string::String>,
    pub(crate) authentication_type: std::option::Option<crate::types::AuthenticationType>,
}
impl PortalSummaryBuilder {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.portal_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the web portal.</p>
    pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.portal_arn = input;
        self
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn renderer_type(mut self, input: crate::types::RendererType) -> Self {
        self.renderer_type = Some(input);
        self
    }
    /// <p>The renderer that is used in streaming sessions.</p>
    pub fn set_renderer_type(
        mut self,
        input: std::option::Option<crate::types::RendererType>,
    ) -> Self {
        self.renderer_type = input;
        self
    }
    /// <p>The browser type of the web portal.</p>
    pub fn browser_type(mut self, input: crate::types::BrowserType) -> Self {
        self.browser_type = Some(input);
        self
    }
    /// <p>The browser type of the web portal.</p>
    pub fn set_browser_type(
        mut self,
        input: std::option::Option<crate::types::BrowserType>,
    ) -> Self {
        self.browser_type = input;
        self
    }
    /// <p>The status of the web portal.</p>
    pub fn portal_status(mut self, input: crate::types::PortalStatus) -> Self {
        self.portal_status = Some(input);
        self
    }
    /// <p>The status of the web portal.</p>
    pub fn set_portal_status(
        mut self,
        input: std::option::Option<crate::types::PortalStatus>,
    ) -> Self {
        self.portal_status = input;
        self
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.portal_endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn set_portal_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.portal_endpoint = input;
        self
    }
    /// <p>The name of the web portal.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name of the web portal.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The creation date of the web portal.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The creation date of the web portal.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The ARN of the browser settings that is associated with the web portal.</p>
    pub fn browser_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.browser_settings_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the browser settings that is associated with the web portal.</p>
    pub fn set_browser_settings_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.browser_settings_arn = input;
        self
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_settings_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the user settings that is associated with the web portal.</p>
    pub fn set_user_settings_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_settings_arn = input;
        self
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn network_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_settings_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the network settings that is associated with the web portal.</p>
    pub fn set_network_settings_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_settings_arn = input;
        self
    }
    /// <p>The ARN of the trust that is associated with this web portal.</p>
    pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.trust_store_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the trust that is associated with this web portal.</p>
    pub fn set_trust_store_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trust_store_arn = input;
        self
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn user_access_logging_settings_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.user_access_logging_settings_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the user access logging settings that is associated with the web portal.</p>
    pub fn set_user_access_logging_settings_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_access_logging_settings_arn = input;
        self
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = Some(input);
        self
    }
    /// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p>
    /// <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p>
    /// <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
    pub fn set_authentication_type(
        mut self,
        input: std::option::Option<crate::types::AuthenticationType>,
    ) -> Self {
        self.authentication_type = input;
        self
    }
    /// Consumes the builder and constructs a [`PortalSummary`](crate::types::PortalSummary).
    pub fn build(self) -> crate::types::PortalSummary {
        crate::types::PortalSummary {
            portal_arn: self.portal_arn,
            renderer_type: self.renderer_type,
            browser_type: self.browser_type,
            portal_status: self.portal_status,
            portal_endpoint: self.portal_endpoint,
            display_name: self.display_name,
            creation_date: self.creation_date,
            browser_settings_arn: self.browser_settings_arn,
            user_settings_arn: self.user_settings_arn,
            network_settings_arn: self.network_settings_arn,
            trust_store_arn: self.trust_store_arn,
            user_access_logging_settings_arn: self.user_access_logging_settings_arn,
            authentication_type: self.authentication_type,
        }
    }
}
impl std::fmt::Debug for PortalSummaryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PortalSummaryBuilder");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("renderer_type", &self.renderer_type);
        formatter.field("browser_type", &self.browser_type);
        formatter.field("portal_status", &self.portal_status);
        formatter.field("portal_endpoint", &self.portal_endpoint);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field(
            "user_access_logging_settings_arn",
            &self.user_access_logging_settings_arn,
        );
        formatter.field("authentication_type", &self.authentication_type);
        formatter.finish()
    }
}
