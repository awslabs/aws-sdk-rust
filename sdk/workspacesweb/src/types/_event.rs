// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Event`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let event = unimplemented!();
/// match event {
///     Event::ContentCopyFromWebsite => { /* ... */ },
///     Event::ContentPasteToWebsite => { /* ... */ },
///     Event::ContentTransferFromLocalToRemoteClipboard => { /* ... */ },
///     Event::FileDownloadFromSecureBrowserToRemoteDisk => { /* ... */ },
///     Event::FileTransferFromLocalToRemoteDisk => { /* ... */ },
///     Event::FileTransferFromRemoteToLocalDisk => { /* ... */ },
///     Event::FileUploadFromRemoteDiskToSecureBrowser => { /* ... */ },
///     Event::PrintJobSubmit => { /* ... */ },
///     Event::SessionConnect => { /* ... */ },
///     Event::SessionDisconnect => { /* ... */ },
///     Event::SessionEnd => { /* ... */ },
///     Event::SessionStart => { /* ... */ },
///     Event::TabClose => { /* ... */ },
///     Event::TabOpen => { /* ... */ },
///     Event::UrlLoad => { /* ... */ },
///     Event::WebsiteInteract => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `event` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Event::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Event::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Event::NewFeature` is defined.
/// Specifically, when `event` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Event::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Event {
    #[allow(missing_docs)] // documentation missing in model
    ContentCopyFromWebsite,
    #[allow(missing_docs)] // documentation missing in model
    ContentPasteToWebsite,
    #[allow(missing_docs)] // documentation missing in model
    ContentTransferFromLocalToRemoteClipboard,
    #[allow(missing_docs)] // documentation missing in model
    FileDownloadFromSecureBrowserToRemoteDisk,
    #[allow(missing_docs)] // documentation missing in model
    FileTransferFromLocalToRemoteDisk,
    #[allow(missing_docs)] // documentation missing in model
    FileTransferFromRemoteToLocalDisk,
    #[allow(missing_docs)] // documentation missing in model
    FileUploadFromRemoteDiskToSecureBrowser,
    #[allow(missing_docs)] // documentation missing in model
    PrintJobSubmit,
    #[allow(missing_docs)] // documentation missing in model
    SessionConnect,
    #[allow(missing_docs)] // documentation missing in model
    SessionDisconnect,
    #[allow(missing_docs)] // documentation missing in model
    SessionEnd,
    #[allow(missing_docs)] // documentation missing in model
    SessionStart,
    #[allow(missing_docs)] // documentation missing in model
    TabClose,
    #[allow(missing_docs)] // documentation missing in model
    TabOpen,
    #[allow(missing_docs)] // documentation missing in model
    UrlLoad,
    #[allow(missing_docs)] // documentation missing in model
    WebsiteInteract,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Event {
    fn from(s: &str) -> Self {
        match s {
            "ContentCopyFromWebsite" => Event::ContentCopyFromWebsite,
            "ContentPasteToWebsite" => Event::ContentPasteToWebsite,
            "ContentTransferFromLocalToRemoteClipboard" => Event::ContentTransferFromLocalToRemoteClipboard,
            "FileDownloadFromSecureBrowserToRemoteDisk" => Event::FileDownloadFromSecureBrowserToRemoteDisk,
            "FileTransferFromLocalToRemoteDisk" => Event::FileTransferFromLocalToRemoteDisk,
            "FileTransferFromRemoteToLocalDisk" => Event::FileTransferFromRemoteToLocalDisk,
            "FileUploadFromRemoteDiskToSecureBrowser" => Event::FileUploadFromRemoteDiskToSecureBrowser,
            "PrintJobSubmit" => Event::PrintJobSubmit,
            "SessionConnect" => Event::SessionConnect,
            "SessionDisconnect" => Event::SessionDisconnect,
            "SessionEnd" => Event::SessionEnd,
            "SessionStart" => Event::SessionStart,
            "TabClose" => Event::TabClose,
            "TabOpen" => Event::TabOpen,
            "UrlLoad" => Event::UrlLoad,
            "WebsiteInteract" => Event::WebsiteInteract,
            other => Event::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Event {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Event::from(s))
    }
}
impl Event {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Event::ContentCopyFromWebsite => "ContentCopyFromWebsite",
            Event::ContentPasteToWebsite => "ContentPasteToWebsite",
            Event::ContentTransferFromLocalToRemoteClipboard => "ContentTransferFromLocalToRemoteClipboard",
            Event::FileDownloadFromSecureBrowserToRemoteDisk => "FileDownloadFromSecureBrowserToRemoteDisk",
            Event::FileTransferFromLocalToRemoteDisk => "FileTransferFromLocalToRemoteDisk",
            Event::FileTransferFromRemoteToLocalDisk => "FileTransferFromRemoteToLocalDisk",
            Event::FileUploadFromRemoteDiskToSecureBrowser => "FileUploadFromRemoteDiskToSecureBrowser",
            Event::PrintJobSubmit => "PrintJobSubmit",
            Event::SessionConnect => "SessionConnect",
            Event::SessionDisconnect => "SessionDisconnect",
            Event::SessionEnd => "SessionEnd",
            Event::SessionStart => "SessionStart",
            Event::TabClose => "TabClose",
            Event::TabOpen => "TabOpen",
            Event::UrlLoad => "UrlLoad",
            Event::WebsiteInteract => "WebsiteInteract",
            Event::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ContentCopyFromWebsite",
            "ContentPasteToWebsite",
            "ContentTransferFromLocalToRemoteClipboard",
            "FileDownloadFromSecureBrowserToRemoteDisk",
            "FileTransferFromLocalToRemoteDisk",
            "FileTransferFromRemoteToLocalDisk",
            "FileUploadFromRemoteDiskToSecureBrowser",
            "PrintJobSubmit",
            "SessionConnect",
            "SessionDisconnect",
            "SessionEnd",
            "SessionStart",
            "TabClose",
            "TabOpen",
            "UrlLoad",
            "WebsiteInteract",
        ]
    }
}
impl ::std::convert::AsRef<str> for Event {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Event {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Event::ContentCopyFromWebsite => write!(f, "ContentCopyFromWebsite"),
            Event::ContentPasteToWebsite => write!(f, "ContentPasteToWebsite"),
            Event::ContentTransferFromLocalToRemoteClipboard => write!(f, "ContentTransferFromLocalToRemoteClipboard"),
            Event::FileDownloadFromSecureBrowserToRemoteDisk => write!(f, "FileDownloadFromSecureBrowserToRemoteDisk"),
            Event::FileTransferFromLocalToRemoteDisk => write!(f, "FileTransferFromLocalToRemoteDisk"),
            Event::FileTransferFromRemoteToLocalDisk => write!(f, "FileTransferFromRemoteToLocalDisk"),
            Event::FileUploadFromRemoteDiskToSecureBrowser => write!(f, "FileUploadFromRemoteDiskToSecureBrowser"),
            Event::PrintJobSubmit => write!(f, "PrintJobSubmit"),
            Event::SessionConnect => write!(f, "SessionConnect"),
            Event::SessionDisconnect => write!(f, "SessionDisconnect"),
            Event::SessionEnd => write!(f, "SessionEnd"),
            Event::SessionStart => write!(f, "SessionStart"),
            Event::TabClose => write!(f, "TabClose"),
            Event::TabOpen => write!(f, "TabOpen"),
            Event::UrlLoad => write!(f, "UrlLoad"),
            Event::WebsiteInteract => write!(f, "WebsiteInteract"),
            Event::Unknown(value) => write!(f, "{value}"),
        }
    }
}
