// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateSummary {
    /// <p>A hexadecimal identifier for the certificate.</p>
    #[doc(hidden)]
    pub thumbprint: std::option::Option<std::string::String>,
    /// <p>The entity the certificate belongs to.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<std::string::String>,
    /// <p>The entity that issued the certificate.</p>
    #[doc(hidden)]
    pub issuer: std::option::Option<std::string::String>,
    /// <p>The certificate is not valid before this date.</p>
    #[doc(hidden)]
    pub not_valid_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The certificate is not valid after this date.</p>
    #[doc(hidden)]
    pub not_valid_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl CertificateSummary {
    /// <p>A hexadecimal identifier for the certificate.</p>
    pub fn thumbprint(&self) -> std::option::Option<&str> {
        self.thumbprint.as_deref()
    }
    /// <p>The entity the certificate belongs to.</p>
    pub fn subject(&self) -> std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>The entity that issued the certificate.</p>
    pub fn issuer(&self) -> std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The certificate is not valid before this date.</p>
    pub fn not_valid_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.not_valid_before.as_ref()
    }
    /// <p>The certificate is not valid after this date.</p>
    pub fn not_valid_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.not_valid_after.as_ref()
    }
}
impl CertificateSummary {
    /// Creates a new builder-style object to manufacture [`CertificateSummary`](crate::types::CertificateSummary).
    pub fn builder() -> crate::types::builders::CertificateSummaryBuilder {
        crate::types::builders::CertificateSummaryBuilder::default()
    }
}

/// A builder for [`CertificateSummary`](crate::types::CertificateSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateSummaryBuilder {
    pub(crate) thumbprint: std::option::Option<std::string::String>,
    pub(crate) subject: std::option::Option<std::string::String>,
    pub(crate) issuer: std::option::Option<std::string::String>,
    pub(crate) not_valid_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) not_valid_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl CertificateSummaryBuilder {
    /// <p>A hexadecimal identifier for the certificate.</p>
    pub fn thumbprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.thumbprint = Some(input.into());
        self
    }
    /// <p>A hexadecimal identifier for the certificate.</p>
    pub fn set_thumbprint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thumbprint = input;
        self
    }
    /// <p>The entity the certificate belongs to.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject = Some(input.into());
        self
    }
    /// <p>The entity the certificate belongs to.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The entity that issued the certificate.</p>
    pub fn issuer(mut self, input: impl Into<std::string::String>) -> Self {
        self.issuer = Some(input.into());
        self
    }
    /// <p>The entity that issued the certificate.</p>
    pub fn set_issuer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The certificate is not valid before this date.</p>
    pub fn not_valid_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.not_valid_before = Some(input);
        self
    }
    /// <p>The certificate is not valid before this date.</p>
    pub fn set_not_valid_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.not_valid_before = input;
        self
    }
    /// <p>The certificate is not valid after this date.</p>
    pub fn not_valid_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.not_valid_after = Some(input);
        self
    }
    /// <p>The certificate is not valid after this date.</p>
    pub fn set_not_valid_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.not_valid_after = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateSummary`](crate::types::CertificateSummary).
    pub fn build(self) -> crate::types::CertificateSummary {
        crate::types::CertificateSummary {
            thumbprint: self.thumbprint,
            subject: self.subject,
            issuer: self.issuer,
            not_valid_before: self.not_valid_before,
            not_valid_after: self.not_valid_after,
        }
    }
}
