// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a secure browser session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Session {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The username of the session.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the client.</p>
    pub client_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The status of the session.</p>
    pub status: ::std::option::Option<crate::types::SessionStatus>,
    /// <p>The start time of the session.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time of the session.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Session {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> ::std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ID of the session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The username of the session.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The IP address of the client.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.client_ip_addresses.is_none()`.
    pub fn client_ip_addresses(&self) -> &[::std::string::String] {
        self.client_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The status of the session.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SessionStatus> {
        self.status.as_ref()
    }
    /// <p>The start time of the session.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the session.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl ::std::fmt::Debug for Session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Session");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("session_id", &self.session_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("client_ip_addresses", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.finish()
    }
}
impl Session {
    /// Creates a new builder-style object to manufacture [`Session`](crate::types::Session).
    pub fn builder() -> crate::types::builders::SessionBuilder {
        crate::types::builders::SessionBuilder::default()
    }
}

/// A builder for [`Session`](crate::types::Session).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SessionBuilder {
    pub(crate) portal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) client_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::SessionStatus>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SessionBuilder {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the web portal.</p>
    pub fn set_portal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_arn = input;
        self
    }
    /// <p>The ARN of the web portal.</p>
    pub fn get_portal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_arn
    }
    /// <p>The ID of the session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The ID of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The username of the session.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username of the session.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The username of the session.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Appends an item to `client_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_client_ip_addresses`](Self::set_client_ip_addresses).
    ///
    /// <p>The IP address of the client.</p>
    pub fn client_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.client_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.client_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP address of the client.</p>
    pub fn set_client_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.client_ip_addresses = input;
        self
    }
    /// <p>The IP address of the client.</p>
    pub fn get_client_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.client_ip_addresses
    }
    /// <p>The status of the session.</p>
    pub fn status(mut self, input: crate::types::SessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the session.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the session.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SessionStatus> {
        &self.status
    }
    /// <p>The start time of the session.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the session.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the session.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time of the session.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the session.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the session.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`Session`](crate::types::Session).
    pub fn build(self) -> crate::types::Session {
        crate::types::Session {
            portal_arn: self.portal_arn,
            session_id: self.session_id,
            username: self.username,
            client_ip_addresses: self.client_ip_addresses,
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
impl ::std::fmt::Debug for SessionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionBuilder");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("session_id", &self.session_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("client_ip_addresses", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.finish()
    }
}
