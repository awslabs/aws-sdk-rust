// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserSettings {
    /// <p>The ARN of the user settings.</p>
    pub user_settings_arn: ::std::string::String,
    /// <p>A list of web portal ARNs that this user settings is associated with.</p>
    pub associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub copy_allowed: ::std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub paste_allowed: ::std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub download_allowed: ::std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub upload_allowed: ::std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can print to the local device.</p>
    pub print_allowed: ::std::option::Option<crate::types::EnabledType>,
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub disconnect_timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub idle_disconnect_timeout_in_minutes: ::std::option::Option<i32>,
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    pub cookie_synchronization_configuration: ::std::option::Option<crate::types::CookieSynchronizationConfiguration>,
}
impl UserSettings {
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> &str {
        use std::ops::Deref;
        self.user_settings_arn.deref()
    }
    /// <p>A list of web portal ARNs that this user settings is associated with.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_portal_arns.is_none()`.
    pub fn associated_portal_arns(&self) -> &[::std::string::String] {
        self.associated_portal_arns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(&self) -> ::std::option::Option<&crate::types::EnabledType> {
        self.copy_allowed.as_ref()
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(&self) -> ::std::option::Option<&crate::types::EnabledType> {
        self.paste_allowed.as_ref()
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(&self) -> ::std::option::Option<&crate::types::EnabledType> {
        self.download_allowed.as_ref()
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(&self) -> ::std::option::Option<&crate::types::EnabledType> {
        self.upload_allowed.as_ref()
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(&self) -> ::std::option::Option<&crate::types::EnabledType> {
        self.print_allowed.as_ref()
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.disconnect_timeout_in_minutes
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(&self) -> ::std::option::Option<i32> {
        self.idle_disconnect_timeout_in_minutes
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    pub fn cookie_synchronization_configuration(&self) -> ::std::option::Option<&crate::types::CookieSynchronizationConfiguration> {
        self.cookie_synchronization_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for UserSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserSettings");
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("copy_allowed", &self.copy_allowed);
        formatter.field("paste_allowed", &self.paste_allowed);
        formatter.field("download_allowed", &self.download_allowed);
        formatter.field("upload_allowed", &self.upload_allowed);
        formatter.field("print_allowed", &self.print_allowed);
        formatter.field("disconnect_timeout_in_minutes", &self.disconnect_timeout_in_minutes);
        formatter.field("idle_disconnect_timeout_in_minutes", &self.idle_disconnect_timeout_in_minutes);
        formatter.field("cookie_synchronization_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UserSettings {
    /// Creates a new builder-style object to manufacture [`UserSettings`](crate::types::UserSettings).
    pub fn builder() -> crate::types::builders::UserSettingsBuilder {
        crate::types::builders::UserSettingsBuilder::default()
    }
}

/// A builder for [`UserSettings`](crate::types::UserSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UserSettingsBuilder {
    pub(crate) user_settings_arn: ::std::option::Option<::std::string::String>,
    pub(crate) associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) copy_allowed: ::std::option::Option<crate::types::EnabledType>,
    pub(crate) paste_allowed: ::std::option::Option<crate::types::EnabledType>,
    pub(crate) download_allowed: ::std::option::Option<crate::types::EnabledType>,
    pub(crate) upload_allowed: ::std::option::Option<crate::types::EnabledType>,
    pub(crate) print_allowed: ::std::option::Option<crate::types::EnabledType>,
    pub(crate) disconnect_timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) idle_disconnect_timeout_in_minutes: ::std::option::Option<i32>,
    pub(crate) cookie_synchronization_configuration: ::std::option::Option<crate::types::CookieSynchronizationConfiguration>,
}
impl UserSettingsBuilder {
    /// <p>The ARN of the user settings.</p>
    /// This field is required.
    pub fn user_settings_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_settings_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn set_user_settings_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_settings_arn = input;
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn get_user_settings_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_settings_arn
    }
    /// Appends an item to `associated_portal_arns`.
    ///
    /// To override the contents of this collection use [`set_associated_portal_arns`](Self::set_associated_portal_arns).
    ///
    /// <p>A list of web portal ARNs that this user settings is associated with.</p>
    pub fn associated_portal_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.associated_portal_arns.unwrap_or_default();
        v.push(input.into());
        self.associated_portal_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of web portal ARNs that this user settings is associated with.</p>
    pub fn set_associated_portal_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.associated_portal_arns = input;
        self
    }
    /// <p>A list of web portal ARNs that this user settings is associated with.</p>
    pub fn get_associated_portal_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.associated_portal_arns
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.copy_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn set_copy_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.copy_allowed = input;
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn get_copy_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        &self.copy_allowed
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.paste_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn set_paste_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.paste_allowed = input;
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn get_paste_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        &self.paste_allowed
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.download_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn set_download_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.download_allowed = input;
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn get_download_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        &self.download_allowed
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.upload_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn set_upload_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.upload_allowed = input;
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn get_upload_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        &self.upload_allowed
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.print_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn set_print_allowed(mut self, input: ::std::option::Option<crate::types::EnabledType>) -> Self {
        self.print_allowed = input;
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn get_print_allowed(&self) -> &::std::option::Option<crate::types::EnabledType> {
        &self.print_allowed
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.disconnect_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn set_disconnect_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.disconnect_timeout_in_minutes = input;
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn get_disconnect_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.disconnect_timeout_in_minutes
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.idle_disconnect_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn set_idle_disconnect_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_disconnect_timeout_in_minutes = input;
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn get_idle_disconnect_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.idle_disconnect_timeout_in_minutes
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    pub fn cookie_synchronization_configuration(mut self, input: crate::types::CookieSynchronizationConfiguration) -> Self {
        self.cookie_synchronization_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    pub fn set_cookie_synchronization_configuration(
        mut self,
        input: ::std::option::Option<crate::types::CookieSynchronizationConfiguration>,
    ) -> Self {
        self.cookie_synchronization_configuration = input;
        self
    }
    /// <p>The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.</p>
    pub fn get_cookie_synchronization_configuration(&self) -> &::std::option::Option<crate::types::CookieSynchronizationConfiguration> {
        &self.cookie_synchronization_configuration
    }
    /// Consumes the builder and constructs a [`UserSettings`](crate::types::UserSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_settings_arn`](crate::types::builders::UserSettingsBuilder::user_settings_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::UserSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserSettings {
            user_settings_arn: self.user_settings_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_settings_arn",
                    "user_settings_arn was not specified but it is required when building UserSettings",
                )
            })?,
            associated_portal_arns: self.associated_portal_arns,
            copy_allowed: self.copy_allowed,
            paste_allowed: self.paste_allowed,
            download_allowed: self.download_allowed,
            upload_allowed: self.upload_allowed,
            print_allowed: self.print_allowed,
            disconnect_timeout_in_minutes: self.disconnect_timeout_in_minutes,
            idle_disconnect_timeout_in_minutes: self.idle_disconnect_timeout_in_minutes,
            cookie_synchronization_configuration: self.cookie_synchronization_configuration,
        })
    }
}
impl ::std::fmt::Debug for UserSettingsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserSettingsBuilder");
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("copy_allowed", &self.copy_allowed);
        formatter.field("paste_allowed", &self.paste_allowed);
        formatter.field("download_allowed", &self.download_allowed);
        formatter.field("upload_allowed", &self.upload_allowed);
        formatter.field("print_allowed", &self.print_allowed);
        formatter.field("disconnect_timeout_in_minutes", &self.disconnect_timeout_in_minutes);
        formatter.field("idle_disconnect_timeout_in_minutes", &self.idle_disconnect_timeout_in_minutes);
        formatter.field("cookie_synchronization_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
