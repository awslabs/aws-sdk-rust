// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of user settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserSettingsSummary {
    /// <p>The ARN of the user settings.</p>
    #[doc(hidden)]
    pub user_settings_arn: std::option::Option<std::string::String>,
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    #[doc(hidden)]
    pub copy_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    #[doc(hidden)]
    pub paste_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    #[doc(hidden)]
    pub download_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    #[doc(hidden)]
    pub upload_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>Specifies whether the user can print to the local device.</p>
    #[doc(hidden)]
    pub print_allowed: std::option::Option<crate::types::EnabledType>,
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    #[doc(hidden)]
    pub disconnect_timeout_in_minutes: std::option::Option<i32>,
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    #[doc(hidden)]
    pub idle_disconnect_timeout_in_minutes: std::option::Option<i32>,
}
impl UserSettingsSummary {
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.copy_allowed.as_ref()
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.paste_allowed.as_ref()
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.download_allowed.as_ref()
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.upload_allowed.as_ref()
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(&self) -> std::option::Option<&crate::types::EnabledType> {
        self.print_allowed.as_ref()
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.disconnect_timeout_in_minutes
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(&self) -> std::option::Option<i32> {
        self.idle_disconnect_timeout_in_minutes
    }
}
impl UserSettingsSummary {
    /// Creates a new builder-style object to manufacture [`UserSettingsSummary`](crate::types::UserSettingsSummary).
    pub fn builder() -> crate::types::builders::UserSettingsSummaryBuilder {
        crate::types::builders::UserSettingsSummaryBuilder::default()
    }
}

/// A builder for [`UserSettingsSummary`](crate::types::UserSettingsSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserSettingsSummaryBuilder {
    pub(crate) user_settings_arn: std::option::Option<std::string::String>,
    pub(crate) copy_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) paste_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) download_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) upload_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) print_allowed: std::option::Option<crate::types::EnabledType>,
    pub(crate) disconnect_timeout_in_minutes: std::option::Option<i32>,
    pub(crate) idle_disconnect_timeout_in_minutes: std::option::Option<i32>,
}
impl UserSettingsSummaryBuilder {
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_settings_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the user settings.</p>
    pub fn set_user_settings_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_settings_arn = input;
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn copy_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.copy_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can copy text from the streaming session to the local device.</p>
    pub fn set_copy_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.copy_allowed = input;
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn paste_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.paste_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can paste text from the local device to the streaming session.</p>
    pub fn set_paste_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.paste_allowed = input;
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn download_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.download_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can download files from the streaming session to the local device.</p>
    pub fn set_download_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.download_allowed = input;
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn upload_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.upload_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can upload files from the local device to the streaming session.</p>
    pub fn set_upload_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.upload_allowed = input;
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn print_allowed(mut self, input: crate::types::EnabledType) -> Self {
        self.print_allowed = Some(input);
        self
    }
    /// <p>Specifies whether the user can print to the local device.</p>
    pub fn set_print_allowed(
        mut self,
        input: std::option::Option<crate::types::EnabledType>,
    ) -> Self {
        self.print_allowed = input;
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.disconnect_timeout_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that a streaming session remains active after users disconnect.</p>
    pub fn set_disconnect_timeout_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.disconnect_timeout_in_minutes = input;
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn idle_disconnect_timeout_in_minutes(mut self, input: i32) -> Self {
        self.idle_disconnect_timeout_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.</p>
    pub fn set_idle_disconnect_timeout_in_minutes(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.idle_disconnect_timeout_in_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`UserSettingsSummary`](crate::types::UserSettingsSummary).
    pub fn build(self) -> crate::types::UserSettingsSummary {
        crate::types::UserSettingsSummary {
            user_settings_arn: self.user_settings_arn,
            copy_allowed: self.copy_allowed,
            paste_allowed: self.paste_allowed,
            download_allowed: self.download_allowed,
            upload_allowed: self.upload_allowed,
            print_allowed: self.print_allowed,
            disconnect_timeout_in_minutes: self.disconnect_timeout_in_minutes,
            idle_disconnect_timeout_in_minutes: self.idle_disconnect_timeout_in_minutes,
        }
    }
}
