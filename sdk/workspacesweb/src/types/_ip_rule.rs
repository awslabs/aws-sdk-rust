// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IP rules of the IP access settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct IpRule {
    /// <p>The IP range of the IP rule.</p>
    pub ip_range: ::std::string::String,
    /// <p>The description of the IP rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl IpRule {
    /// <p>The IP range of the IP rule.</p>
    pub fn ip_range(&self) -> &str {
        use std::ops::Deref;
        self.ip_range.deref()
    }
    /// <p>The description of the IP rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for IpRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IpRule");
        formatter.field("ip_range", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl IpRule {
    /// Creates a new builder-style object to manufacture [`IpRule`](crate::types::IpRule).
    pub fn builder() -> crate::types::builders::IpRuleBuilder {
        crate::types::builders::IpRuleBuilder::default()
    }
}

/// A builder for [`IpRule`](crate::types::IpRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct IpRuleBuilder {
    pub(crate) ip_range: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl IpRuleBuilder {
    /// <p>The IP range of the IP rule.</p>
    /// This field is required.
    pub fn ip_range(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_range = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP range of the IP rule.</p>
    pub fn set_ip_range(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_range = input;
        self
    }
    /// <p>The IP range of the IP rule.</p>
    pub fn get_ip_range(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_range
    }
    /// <p>The description of the IP rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the IP rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the IP rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`IpRule`](crate::types::IpRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`ip_range`](crate::types::builders::IpRuleBuilder::ip_range)
    pub fn build(self) -> ::std::result::Result<crate::types::IpRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IpRule {
            ip_range: self.ip_range.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ip_range",
                    "ip_range was not specified but it is required when building IpRule",
                )
            })?,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for IpRuleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("IpRuleBuilder");
        formatter.field("ip_range", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
