// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about the session.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SessionSummary {
    /// <p>The identifier of the session.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    #[doc(hidden)]
    pub session_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the Wisdom assistant.</p>
    #[doc(hidden)]
    pub assistant_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
    #[doc(hidden)]
    pub assistant_arn: std::option::Option<std::string::String>,
}
impl SessionSummary {
    /// <p>The identifier of the session.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn session_arn(&self) -> std::option::Option<&str> {
        self.session_arn.as_deref()
    }
    /// <p>The identifier of the Wisdom assistant.</p>
    pub fn assistant_id(&self) -> std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
    pub fn assistant_arn(&self) -> std::option::Option<&str> {
        self.assistant_arn.as_deref()
    }
}
impl SessionSummary {
    /// Creates a new builder-style object to manufacture [`SessionSummary`](crate::types::SessionSummary).
    pub fn builder() -> crate::types::builders::SessionSummaryBuilder {
        crate::types::builders::SessionSummaryBuilder::default()
    }
}

/// A builder for [`SessionSummary`](crate::types::SessionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionSummaryBuilder {
    pub(crate) session_id: std::option::Option<std::string::String>,
    pub(crate) session_arn: std::option::Option<std::string::String>,
    pub(crate) assistant_id: std::option::Option<std::string::String>,
    pub(crate) assistant_arn: std::option::Option<std::string::String>,
}
impl SessionSummaryBuilder {
    /// <p>The identifier of the session.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn session_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the session.</p>
    pub fn set_session_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_arn = input;
        self
    }
    /// <p>The identifier of the Wisdom assistant.</p>
    pub fn assistant_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.assistant_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Wisdom assistant.</p>
    pub fn set_assistant_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
    pub fn assistant_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.assistant_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
    pub fn set_assistant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assistant_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`SessionSummary`](crate::types::SessionSummary).
    pub fn build(self) -> crate::types::SessionSummary {
        crate::types::SessionSummary {
            session_id: self.session_id,
            session_arn: self.session_arn,
            assistant_id: self.assistant_id,
            assistant_arn: self.assistant_arn,
        }
    }
}
