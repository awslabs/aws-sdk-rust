// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A search filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Filter {
    /// <p>The field on which to filter.</p>
    #[doc(hidden)]
    pub field: std::option::Option<crate::types::FilterField>,
    /// <p>The operator to use for comparing the field’s value with the provided value.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::FilterOperator>,
    /// <p>The desired field value on which to filter.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Filter {
    /// <p>The field on which to filter.</p>
    pub fn field(&self) -> std::option::Option<&crate::types::FilterField> {
        self.field.as_ref()
    }
    /// <p>The operator to use for comparing the field’s value with the provided value.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::FilterOperator> {
        self.operator.as_ref()
    }
    /// <p>The desired field value on which to filter.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) field: std::option::Option<crate::types::FilterField>,
    pub(crate) operator: std::option::Option<crate::types::FilterOperator>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl FilterBuilder {
    /// <p>The field on which to filter.</p>
    pub fn field(mut self, input: crate::types::FilterField) -> Self {
        self.field = Some(input);
        self
    }
    /// <p>The field on which to filter.</p>
    pub fn set_field(mut self, input: std::option::Option<crate::types::FilterField>) -> Self {
        self.field = input;
        self
    }
    /// <p>The operator to use for comparing the field’s value with the provided value.</p>
    pub fn operator(mut self, input: crate::types::FilterOperator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>The operator to use for comparing the field’s value with the provided value.</p>
    pub fn set_operator(
        mut self,
        input: std::option::Option<crate::types::FilterOperator>,
    ) -> Self {
        self.operator = input;
        self
    }
    /// <p>The desired field value on which to filter.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The desired field value on which to filter.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            field: self.field,
            operator: self.operator,
            value: self.value,
        }
    }
}
