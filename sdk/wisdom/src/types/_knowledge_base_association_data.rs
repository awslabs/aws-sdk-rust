// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Association information about the knowledge base.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KnowledgeBaseAssociationData {
    /// <p>The identifier of the knowledge base.</p>
    #[doc(hidden)]
    pub knowledge_base_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    #[doc(hidden)]
    pub knowledge_base_arn: std::option::Option<std::string::String>,
}
impl KnowledgeBaseAssociationData {
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> std::option::Option<&str> {
        self.knowledge_base_arn.as_deref()
    }
}
impl KnowledgeBaseAssociationData {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseAssociationData`](crate::types::KnowledgeBaseAssociationData).
    pub fn builder() -> crate::types::builders::KnowledgeBaseAssociationDataBuilder {
        crate::types::builders::KnowledgeBaseAssociationDataBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseAssociationData`](crate::types::KnowledgeBaseAssociationData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KnowledgeBaseAssociationDataBuilder {
    pub(crate) knowledge_base_id: std::option::Option<std::string::String>,
    pub(crate) knowledge_base_arn: std::option::Option<std::string::String>,
}
impl KnowledgeBaseAssociationDataBuilder {
    /// <p>The identifier of the knowledge base.</p>
    pub fn knowledge_base_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.knowledge_base_id = Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.knowledge_base_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseAssociationData`](crate::types::KnowledgeBaseAssociationData).
    pub fn build(self) -> crate::types::KnowledgeBaseAssociationData {
        crate::types::KnowledgeBaseAssociationData {
            knowledge_base_id: self.knowledge_base_id,
            knowledge_base_arn: self.knowledge_base_arn,
        }
    }
}
