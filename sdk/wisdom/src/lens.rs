// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_assistant_associations_output_next_token(
    input: &crate::output::ListAssistantAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_assistants_output_next_token(
    input: &crate::output::ListAssistantsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_contents_output_next_token(
    input: &crate::output::ListContentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_knowledge_bases_output_next_token(
    input: &crate::output::ListKnowledgeBasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_query_assistant_output_next_token(
    input: &crate::output::QueryAssistantOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_content_output_next_token(
    input: &crate::output::SearchContentOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_sessions_output_next_token(
    input: &crate::output::SearchSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_assistant_associations_output_assistant_association_summaries(
    input: crate::output::ListAssistantAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssistantAssociationSummary>> {
    let input = match input.assistant_association_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_assistants_output_assistant_summaries(
    input: crate::output::ListAssistantsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssistantSummary>> {
    let input = match input.assistant_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contents_output_content_summaries(
    input: crate::output::ListContentsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ContentSummary>> {
    let input = match input.content_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_knowledge_bases_output_knowledge_base_summaries(
    input: crate::output::ListKnowledgeBasesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::KnowledgeBaseSummary>> {
    let input = match input.knowledge_base_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_query_assistant_output_results(
    input: crate::output::QueryAssistantOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResultData>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_content_output_content_summaries(
    input: crate::output::SearchContentOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ContentSummary>> {
    let input = match input.content_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_sessions_output_session_summaries(
    input: crate::output::SearchSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SessionSummary>> {
    let input = match input.session_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
