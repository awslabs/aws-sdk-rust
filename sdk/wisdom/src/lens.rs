// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_assistant_associations_output_next_token(
    input: &crate::operation::list_assistant_associations::ListAssistantAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assistants_output_next_token(
    input: &crate::operation::list_assistants::ListAssistantsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_contents_output_next_token(
    input: &crate::operation::list_contents::ListContentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_knowledge_bases_output_next_token(
    input: &crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_query_assistant_output_next_token(
    input: &crate::operation::query_assistant::QueryAssistantOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_content_output_next_token(
    input: &crate::operation::search_content::SearchContentOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_sessions_output_next_token(
    input: &crate::operation::search_sessions::SearchSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_assistant_associations_output_assistant_association_summaries(
    input: crate::operation::list_assistant_associations::ListAssistantAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AssistantAssociationSummary>> {
    let input = match input.assistant_association_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_assistants_output_assistant_summaries(
    input: crate::operation::list_assistants::ListAssistantsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AssistantSummary>> {
    let input = match input.assistant_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_contents_output_content_summaries(
    input: crate::operation::list_contents::ListContentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ContentSummary>> {
    let input = match input.content_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_knowledge_bases_output_knowledge_base_summaries(
    input: crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::KnowledgeBaseSummary>> {
    let input = match input.knowledge_base_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_query_assistant_output_results(
    input: crate::operation::query_assistant::QueryAssistantOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResultData>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_content_output_content_summaries(
    input: crate::operation::search_content::SearchContentOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ContentSummary>> {
    let input = match input.content_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_sessions_output_session_summaries(
    input: crate::operation::search_sessions::SearchSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SessionSummary>> {
    let input = match input.session_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
