// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssistantAssociationInput {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    #[doc(hidden)]
    pub assistant_id: std::option::Option<std::string::String>,
    /// <p>The type of association.</p>
    #[doc(hidden)]
    pub association_type: std::option::Option<crate::types::AssociationType>,
    /// <p>The identifier of the associated resource.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::types::AssistantAssociationInputData>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAssistantAssociationInput {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The type of association.</p>
    pub fn association_type(&self) -> std::option::Option<&crate::types::AssociationType> {
        self.association_type.as_ref()
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn association(&self) -> std::option::Option<&crate::types::AssistantAssociationInputData> {
        self.association.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateAssistantAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateAssistantAssociationInput`](crate::operation::create_assistant_association::CreateAssistantAssociationInput).
    pub fn builder() -> crate::operation::create_assistant_association::builders::CreateAssistantAssociationInputBuilder{
        crate::operation::create_assistant_association::builders::CreateAssistantAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateAssistantAssociationInput`](crate::operation::create_assistant_association::CreateAssistantAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssistantAssociationInputBuilder {
    pub(crate) assistant_id: std::option::Option<std::string::String>,
    pub(crate) association_type: std::option::Option<crate::types::AssociationType>,
    pub(crate) association: std::option::Option<crate::types::AssistantAssociationInputData>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateAssistantAssociationInputBuilder {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.assistant_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The type of association.</p>
    pub fn association_type(mut self, input: crate::types::AssociationType) -> Self {
        self.association_type = Some(input);
        self
    }
    /// <p>The type of association.</p>
    pub fn set_association_type(
        mut self,
        input: std::option::Option<crate::types::AssociationType>,
    ) -> Self {
        self.association_type = input;
        self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn association(mut self, input: crate::types::AssistantAssociationInputData) -> Self {
        self.association = Some(input);
        self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn set_association(
        mut self,
        input: std::option::Option<crate::types::AssistantAssociationInputData>,
    ) -> Self {
        self.association = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssistantAssociationInput`](crate::operation::create_assistant_association::CreateAssistantAssociationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_assistant_association::CreateAssistantAssociationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_assistant_association::CreateAssistantAssociationInput {
                assistant_id: self.assistant_id,
                association_type: self.association_type,
                association: self.association,
                client_token: self.client_token,
                tags: self.tags,
            },
        )
    }
}
