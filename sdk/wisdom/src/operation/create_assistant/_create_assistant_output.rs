// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssistantOutput {
    /// <p>Information about the assistant.</p>
    #[doc(hidden)]
    pub assistant: std::option::Option<crate::types::AssistantData>,
    _request_id: Option<String>,
}
impl CreateAssistantOutput {
    /// <p>Information about the assistant.</p>
    pub fn assistant(&self) -> std::option::Option<&crate::types::AssistantData> {
        self.assistant.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAssistantOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssistantOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssistantOutput`](crate::operation::create_assistant::CreateAssistantOutput).
    pub fn builder() -> crate::operation::create_assistant::builders::CreateAssistantOutputBuilder {
        crate::operation::create_assistant::builders::CreateAssistantOutputBuilder::default()
    }
}

/// A builder for [`CreateAssistantOutput`](crate::operation::create_assistant::CreateAssistantOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssistantOutputBuilder {
    pub(crate) assistant: std::option::Option<crate::types::AssistantData>,
    _request_id: Option<String>,
}
impl CreateAssistantOutputBuilder {
    /// <p>Information about the assistant.</p>
    pub fn assistant(mut self, input: crate::types::AssistantData) -> Self {
        self.assistant = Some(input);
        self
    }
    /// <p>Information about the assistant.</p>
    pub fn set_assistant(
        mut self,
        input: std::option::Option<crate::types::AssistantData>,
    ) -> Self {
        self.assistant = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssistantOutput`](crate::operation::create_assistant::CreateAssistantOutput).
    pub fn build(self) -> crate::operation::create_assistant::CreateAssistantOutput {
        crate::operation::create_assistant::CreateAssistantOutput {
            assistant: self.assistant,
            _request_id: self._request_id,
        }
    }
}
