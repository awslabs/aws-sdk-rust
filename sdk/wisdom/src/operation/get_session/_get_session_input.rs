// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSessionInput {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    #[doc(hidden)]
    pub assistant_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
}
impl GetSessionInput {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> std::option::Option<&str> {
        self.assistant_id.as_deref()
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
}
impl GetSessionInput {
    /// Creates a new builder-style object to manufacture [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
    pub fn builder() -> crate::operation::get_session::builders::GetSessionInputBuilder {
        crate::operation::get_session::builders::GetSessionInputBuilder::default()
    }
}

/// A builder for [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSessionInputBuilder {
    pub(crate) assistant_id: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
}
impl GetSessionInputBuilder {
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.assistant_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_session::GetSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_session::GetSessionInput {
            assistant_id: self.assistant_id,
            session_id: self.session_id,
        })
    }
}
