// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAssistant`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_name):<br>required: **true**<br><p>The name of the assistant.</p><br>
    ///   - [`r#type(AssistantType)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::type) / [`set_type(Option<AssistantType>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_type):<br>required: **true**<br><p>The type of assistant.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_description):<br>required: **false**<br><p>The description of the assistant.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_tags):<br>required: **false**<br><p>The tags used to organize, track, or control access for this resource.</p><br>
    ///   - [`server_side_encryption_configuration(ServerSideEncryptionConfiguration)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::server_side_encryption_configuration) / [`set_server_side_encryption_configuration(Option<ServerSideEncryptionConfiguration>)`](crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::set_server_side_encryption_configuration):<br>required: **false**<br><p>The configuration information for the customer managed key used for encryption. </p>  <p>The customer managed key must have a policy that allows <code>kms:CreateGrant</code> and <code> kms:DescribeKey</code> permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow <code>kms:Decrypt</code>, <code>kms:GenerateDataKey*</code>, and <code>kms:DescribeKey</code> permissions to the <code>connect.amazonaws.com</code> service principal. </p>  <p>For more information about setting up a customer managed key for Wisdom, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html">Enable Amazon Connect Wisdom for your instance</a>.</p><br>
    /// - On success, responds with [`CreateAssistantOutput`](crate::operation::create_assistant::CreateAssistantOutput) with field(s):
    ///   - [`assistant(Option<AssistantData>)`](crate::operation::create_assistant::CreateAssistantOutput::assistant): <p>Information about the assistant.</p>
    /// - On failure, responds with [`SdkError<CreateAssistantError>`](crate::operation::create_assistant::CreateAssistantError)
    pub fn create_assistant(&self) -> crate::operation::create_assistant::builders::CreateAssistantFluentBuilder {
        crate::operation::create_assistant::builders::CreateAssistantFluentBuilder::new(self.handle.clone())
    }
}
