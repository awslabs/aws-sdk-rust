// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`QueryAssistant`](crate::client::fluent_builders::QueryAssistant) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::QueryAssistant::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`assistant_id(impl Into<String>)`](crate::client::fluent_builders::QueryAssistant::assistant_id) / [`set_assistant_id(Option<String>)`](crate::client::fluent_builders::QueryAssistant::set_assistant_id): <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    ///   - [`query_text(impl Into<String>)`](crate::client::fluent_builders::QueryAssistant::query_text) / [`set_query_text(Option<String>)`](crate::client::fluent_builders::QueryAssistant::set_query_text): <p>The text to search for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::QueryAssistant::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::QueryAssistant::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::QueryAssistant::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::QueryAssistant::set_max_results): <p>The maximum number of results to return per page.</p>
    /// - On success, responds with [`QueryAssistantOutput`](crate::output::QueryAssistantOutput) with field(s):
    ///   - [`results(Option<Vec<ResultData>>)`](crate::output::QueryAssistantOutput::results): <p>The results of the query.</p>
    ///   - [`next_token(Option<String>)`](crate::output::QueryAssistantOutput::next_token): <p>If there are additional results, this is the token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<QueryAssistantError>`](crate::error::QueryAssistantError)
    pub fn query_assistant(&self) -> crate::client::fluent_builders::QueryAssistant {
        crate::client::fluent_builders::QueryAssistant::new(self.handle.clone())
    }
}
