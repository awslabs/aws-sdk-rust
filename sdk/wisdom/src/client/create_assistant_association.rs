// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAssistantAssociation`](crate::client::fluent_builders::CreateAssistantAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`assistant_id(impl Into<String>)`](crate::client::fluent_builders::CreateAssistantAssociation::assistant_id) / [`set_assistant_id(Option<String>)`](crate::client::fluent_builders::CreateAssistantAssociation::set_assistant_id): <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    ///   - [`association_type(AssociationType)`](crate::client::fluent_builders::CreateAssistantAssociation::association_type) / [`set_association_type(Option<AssociationType>)`](crate::client::fluent_builders::CreateAssistantAssociation::set_association_type): <p>The type of association.</p>
    ///   - [`association(AssistantAssociationInputData)`](crate::client::fluent_builders::CreateAssistantAssociation::association) / [`set_association(Option<AssistantAssociationInputData>)`](crate::client::fluent_builders::CreateAssistantAssociation::set_association): <p>The identifier of the associated resource.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateAssistantAssociation::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateAssistantAssociation::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateAssistantAssociation::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateAssistantAssociation::set_tags): <p>The tags used to organize, track, or control access for this resource.</p>
    /// - On success, responds with [`CreateAssistantAssociationOutput`](crate::output::CreateAssistantAssociationOutput) with field(s):
    ///   - [`assistant_association(Option<AssistantAssociationData>)`](crate::output::CreateAssistantAssociationOutput::assistant_association): <p>The assistant association.</p>
    /// - On failure, responds with [`SdkError<CreateAssistantAssociationError>`](crate::error::CreateAssistantAssociationError)
    pub fn create_assistant_association(
        &self,
    ) -> crate::client::fluent_builders::CreateAssistantAssociation {
        crate::client::fluent_builders::CreateAssistantAssociation::new(self.handle.clone())
    }
}
