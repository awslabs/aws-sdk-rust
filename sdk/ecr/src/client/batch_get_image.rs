// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchGetImage`](crate::client::fluent_builders::BatchGetImage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`registry_id(impl Into<String>)`](crate::client::fluent_builders::BatchGetImage::registry_id) / [`set_registry_id(Option<String>)`](crate::client::fluent_builders::BatchGetImage::set_registry_id): <p>The Amazon Web Services account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.</p>
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::BatchGetImage::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::BatchGetImage::set_repository_name): <p>The repository that contains the images to describe.</p>
    ///   - [`image_ids(Vec<ImageIdentifier>)`](crate::client::fluent_builders::BatchGetImage::image_ids) / [`set_image_ids(Option<Vec<ImageIdentifier>>)`](crate::client::fluent_builders::BatchGetImage::set_image_ids): <p>A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.</p>
    ///   - [`accepted_media_types(Vec<String>)`](crate::client::fluent_builders::BatchGetImage::accepted_media_types) / [`set_accepted_media_types(Option<Vec<String>>)`](crate::client::fluent_builders::BatchGetImage::set_accepted_media_types): <p>The accepted media types for the request.</p>  <p>Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> | <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code> </p>
    /// - On success, responds with [`BatchGetImageOutput`](crate::output::BatchGetImageOutput) with field(s):
    ///   - [`images(Option<Vec<Image>>)`](crate::output::BatchGetImageOutput::images): <p>A list of image objects corresponding to the image references in the request.</p>
    ///   - [`failures(Option<Vec<ImageFailure>>)`](crate::output::BatchGetImageOutput::failures): <p>Any failures associated with the call.</p>
    /// - On failure, responds with [`SdkError<BatchGetImageError>`](crate::error::BatchGetImageError)
    pub fn batch_get_image(&self) -> crate::client::fluent_builders::BatchGetImage {
        crate::client::fluent_builders::BatchGetImage::new(self.handle.clone())
    }
}
