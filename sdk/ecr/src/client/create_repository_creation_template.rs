// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRepositoryCreationTemplate`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`prefix(impl Into<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::prefix) / [`set_prefix(Option<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_prefix):<br>required: **true**<br><p>The repository namespace prefix to associate with the template. All repositories created using this namespace prefix will have the settings defined in this template applied. For example, a prefix of <code>prod</code> would apply to all repositories beginning with <code>prod/</code>. Similarly, a prefix of <code>prod/team</code> would apply to all repositories beginning with <code>prod/team/</code>.</p> <p>To apply a template to all repositories in your registry that don't have an associated creation template, you can use <code>ROOT</code> as the prefix.</p><important>  <p>There is always an assumed <code>/</code> applied to the end of the prefix. If you specify <code>ecr-public</code> as the prefix, Amazon ECR treats that as <code>ecr-public/</code>. When using a pull through cache rule, the repository prefix you specify during rule creation is what you should specify as your repository creation template prefix as well.</p> </important><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_description):<br>required: **false**<br><p>A description for the repository creation template.</p><br>
    ///   - [`encryption_configuration(EncryptionConfigurationForRepositoryCreationTemplate)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::encryption_configuration) / [`set_encryption_configuration(Option<EncryptionConfigurationForRepositoryCreationTemplate>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_encryption_configuration):<br>required: **false**<br><p>The encryption configuration to use for repositories created using the template.</p><br>
    ///   - [`resource_tags(Tag)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::resource_tags) / [`set_resource_tags(Option<Vec::<Tag>>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_resource_tags):<br>required: **false**<br><p>The metadata to apply to the repository to help you categorize and organize. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p><br>
    ///   - [`image_tag_mutability(ImageTagMutability)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::image_tag_mutability) / [`set_image_tag_mutability(Option<ImageTagMutability>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_image_tag_mutability):<br>required: **false**<br><p>The tag mutability setting for the repository. If this parameter is omitted, the default setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.</p><br>
    ///   - [`image_tag_mutability_exclusion_filters(ImageTagMutabilityExclusionFilter)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::image_tag_mutability_exclusion_filters) / [`set_image_tag_mutability_exclusion_filters(Option<Vec::<ImageTagMutabilityExclusionFilter>>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_image_tag_mutability_exclusion_filters):<br>required: **false**<br><p>Creates a repository creation template with a list of filters that define which image tags can override the default image tag mutability setting.</p><br>
    ///   - [`repository_policy(impl Into<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::repository_policy) / [`set_repository_policy(Option<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_repository_policy):<br>required: **false**<br><p>The repository policy to apply to repositories created using the template. A repository policy is a permissions policy associated with a repository to control access permissions.</p><br>
    ///   - [`lifecycle_policy(impl Into<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::lifecycle_policy) / [`set_lifecycle_policy(Option<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_lifecycle_policy):<br>required: **false**<br><p>The lifecycle policy to use for repositories created using the template.</p><br>
    ///   - [`applied_for(RctAppliedFor)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::applied_for) / [`set_applied_for(Option<Vec::<RctAppliedFor>>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_applied_for):<br>required: **true**<br><p>A list of enumerable strings representing the Amazon ECR repository creation scenarios that this template will apply towards. The two supported scenarios are <code>PULL_THROUGH_CACHE</code> and <code>REPLICATION</code></p><br>
    ///   - [`custom_role_arn(impl Into<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::custom_role_arn) / [`set_custom_role_arn(Option<String>)`](crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::set_custom_role_arn):<br>required: **false**<br><p>The ARN of the role to be assumed by Amazon ECR. This role must be in the same account as the registry that you are configuring. Amazon ECR will assume your supplied role when the customRoleArn is specified. When this field isn't specified, Amazon ECR will use the service-linked role for the repository creation template.</p><br>
    /// - On success, responds with [`CreateRepositoryCreationTemplateOutput`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput) with field(s):
    ///   - [`registry_id(Option<String>)`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput::registry_id): <p>The registry ID associated with the request.</p>
    ///   - [`repository_creation_template(Option<RepositoryCreationTemplate>)`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateOutput::repository_creation_template): <p>The details of the repository creation template associated with the request.</p>
    /// - On failure, responds with [`SdkError<CreateRepositoryCreationTemplateError>`](crate::operation::create_repository_creation_template::CreateRepositoryCreationTemplateError)
    pub fn create_repository_creation_template(
        &self,
    ) -> crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder {
        crate::operation::create_repository_creation_template::builders::CreateRepositoryCreationTemplateFluentBuilder::new(self.handle.clone())
    }
}
