// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDownloadUrlForLayer`](crate::client::fluent_builders::GetDownloadUrlForLayer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`registry_id(impl Into<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::registry_id) / [`set_registry_id(Option<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::set_registry_id): <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::set_repository_name): <p>The name of the repository that is associated with the image layer to download.</p>
    ///   - [`layer_digest(impl Into<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::layer_digest) / [`set_layer_digest(Option<String>)`](crate::client::fluent_builders::GetDownloadUrlForLayer::set_layer_digest): <p>The digest of the image layer to download.</p>
    /// - On success, responds with [`GetDownloadUrlForLayerOutput`](crate::output::GetDownloadUrlForLayerOutput) with field(s):
    ///   - [`download_url(Option<String>)`](crate::output::GetDownloadUrlForLayerOutput::download_url): <p>The pre-signed Amazon S3 download URL for the requested layer.</p>
    ///   - [`layer_digest(Option<String>)`](crate::output::GetDownloadUrlForLayerOutput::layer_digest): <p>The digest of the image layer to download.</p>
    /// - On failure, responds with [`SdkError<GetDownloadUrlForLayerError>`](crate::error::GetDownloadUrlForLayerError)
    pub fn get_download_url_for_layer(
        &self,
    ) -> crate::client::fluent_builders::GetDownloadUrlForLayer {
        crate::client::fluent_builders::GetDownloadUrlForLayer::new(self.handle.clone())
    }
}
