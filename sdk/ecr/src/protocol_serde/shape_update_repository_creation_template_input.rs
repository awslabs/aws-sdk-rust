// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_repository_creation_template_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.prefix {
        object.key("prefix").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("encryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration_for_repository_creation_template::ser_encryption_configuration_for_repository_creation_template(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.resource_tags {
        let mut array_6 = object.key("resourceTags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.image_tag_mutability {
        object.key("imageTagMutability").string(var_9.as_str());
    }
    if let Some(var_10) = &input.image_tag_mutability_exclusion_filters {
        let mut array_11 = object.key("imageTagMutabilityExclusionFilters").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_image_tag_mutability_exclusion_filter::ser_image_tag_mutability_exclusion_filter(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.repository_policy {
        object.key("repositoryPolicy").string(var_14.as_str());
    }
    if let Some(var_15) = &input.lifecycle_policy {
        object.key("lifecyclePolicy").string(var_15.as_str());
    }
    if let Some(var_16) = &input.applied_for {
        let mut array_17 = object.key("appliedFor").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.custom_role_arn {
        object.key("customRoleArn").string(var_19.as_str());
    }
    Ok(())
}
