// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_put_image_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::put_image::PutImageOutput, crate::operation::put_image::PutImageError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::put_image::PutImageError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::put_image::PutImageError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ImageAlreadyExistsException" => crate::operation::put_image::PutImageError::ImageAlreadyExistsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ImageAlreadyExistsExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_image_already_exists_exception::de_image_already_exists_exception_json_err(_response_body, output)
                        .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ImageDigestDoesNotMatchException" => crate::operation::put_image::PutImageError::ImageDigestDoesNotMatchException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ImageDigestDoesNotMatchExceptionBuilder::default();
                output = crate::protocol_serde::shape_image_digest_does_not_match_exception::de_image_digest_does_not_match_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ImageTagAlreadyExistsException" => crate::operation::put_image::PutImageError::ImageTagAlreadyExistsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ImageTagAlreadyExistsExceptionBuilder::default();
                output = crate::protocol_serde::shape_image_tag_already_exists_exception::de_image_tag_already_exists_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => crate::operation::put_image::PutImageError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KmsException" => crate::operation::put_image::PutImageError::KmsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_exception::de_kms_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "LayersNotFoundException" => crate::operation::put_image::PutImageError::LayersNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LayersNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_layers_not_found_exception::de_layers_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "LimitExceededException" => crate::operation::put_image::PutImageError::LimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LimitExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_limit_exceeded_exception::de_limit_exceeded_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ReferencedImagesNotFoundException" => crate::operation::put_image::PutImageError::ReferencedImagesNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ReferencedImagesNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_referenced_images_not_found_exception::de_referenced_images_not_found_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "RepositoryNotFoundException" => crate::operation::put_image::PutImageError::RepositoryNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::RepositoryNotFoundExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_repository_not_found_exception::de_repository_not_found_exception_json_err(_response_body, output)
                        .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServerException" => crate::operation::put_image::PutImageError::ServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_server_exception::de_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_image::PutImageError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::put_image::PutImageError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_put_image_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::put_image::PutImageOutput, crate::operation::put_image::PutImageError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::put_image::builders::PutImageOutputBuilder::default();
        output = crate::protocol_serde::shape_put_image::de_put_image(_response_body, output)
            .map_err(crate::operation::put_image::PutImageError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_put_image_input(
    input: &crate::operation::put_image::PutImageInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_put_image_input::ser_put_image_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_put_image(
    value: &[u8],
    mut builder: crate::operation::put_image::builders::PutImageOutputBuilder,
) -> Result<crate::operation::put_image::builders::PutImageOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "image" => {
                    builder = builder.set_image(crate::protocol_serde::shape_image::de_image(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
