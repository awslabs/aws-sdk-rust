// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_check_layer_availability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCheckLayerAvailabilityInput,
) {
    if let Some(var_1) = &input.registry_id {
        object.key("registryId").string(var_1);
    }
    if let Some(var_2) = &input.repository_name {
        object.key("repositoryName").string(var_2);
    }
    if let Some(var_3) = &input.layer_digests {
        let mut array_4 = object.key("layerDigests").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_crate_input_batch_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteImageInput,
) {
    if let Some(var_6) = &input.registry_id {
        object.key("registryId").string(var_6);
    }
    if let Some(var_7) = &input.repository_name {
        object.key("repositoryName").string(var_7);
    }
    if let Some(var_8) = &input.image_ids {
        let mut array_9 = object.key("imageIds").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetImageInput,
) {
    if let Some(var_12) = &input.registry_id {
        object.key("registryId").string(var_12);
    }
    if let Some(var_13) = &input.repository_name {
        object.key("repositoryName").string(var_13);
    }
    if let Some(var_14) = &input.image_ids {
        let mut array_15 = object.key("imageIds").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_17,
                    item_16,
                );
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.accepted_media_types {
        let mut array_19 = object.key("acceptedMediaTypes").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20);
            }
        }
        array_19.finish();
    }
}

pub fn serialize_structure_crate_input_complete_layer_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CompleteLayerUploadInput,
) {
    if let Some(var_21) = &input.registry_id {
        object.key("registryId").string(var_21);
    }
    if let Some(var_22) = &input.repository_name {
        object.key("repositoryName").string(var_22);
    }
    if let Some(var_23) = &input.upload_id {
        object.key("uploadId").string(var_23);
    }
    if let Some(var_24) = &input.layer_digests {
        let mut array_25 = object.key("layerDigests").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
}

pub fn serialize_structure_crate_input_create_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRepositoryInput,
) {
    if let Some(var_27) = &input.registry_id {
        object.key("registryId").string(var_27);
    }
    if let Some(var_28) = &input.repository_name {
        object.key("repositoryName").string(var_28);
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_32, item_31);
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.image_tag_mutability {
        object.key("imageTagMutability").string(var_33.as_str());
    }
    if let Some(var_34) = &input.image_scanning_configuration {
        let mut object_35 = object.key("imageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_scanning_configuration(
            &mut object_35,
            var_34,
        );
        object_35.finish();
    }
    if let Some(var_36) = &input.encryption_configuration {
        let mut object_37 = object.key("encryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_37,
            var_36,
        );
        object_37.finish();
    }
}

pub fn serialize_structure_crate_input_delete_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLifecyclePolicyInput,
) {
    if let Some(var_38) = &input.registry_id {
        object.key("registryId").string(var_38);
    }
    if let Some(var_39) = &input.repository_name {
        object.key("repositoryName").string(var_39);
    }
}

pub fn serialize_structure_crate_input_delete_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRepositoryInput,
) {
    if let Some(var_40) = &input.registry_id {
        object.key("registryId").string(var_40);
    }
    if let Some(var_41) = &input.repository_name {
        object.key("repositoryName").string(var_41);
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
}

pub fn serialize_structure_crate_input_delete_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRepositoryPolicyInput,
) {
    if let Some(var_42) = &input.registry_id {
        object.key("registryId").string(var_42);
    }
    if let Some(var_43) = &input.repository_name {
        object.key("repositoryName").string(var_43);
    }
}

pub fn serialize_structure_crate_input_describe_image_replication_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageReplicationStatusInput,
) {
    if let Some(var_44) = &input.repository_name {
        object.key("repositoryName").string(var_44);
    }
    if let Some(var_45) = &input.image_id {
        let mut object_46 = object.key("imageId").start_object();
        crate::json_ser::serialize_structure_crate_model_image_identifier(&mut object_46, var_45);
        object_46.finish();
    }
    if let Some(var_47) = &input.registry_id {
        object.key("registryId").string(var_47);
    }
}

pub fn serialize_structure_crate_input_describe_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagesInput,
) {
    if let Some(var_48) = &input.registry_id {
        object.key("registryId").string(var_48);
    }
    if let Some(var_49) = &input.repository_name {
        object.key("repositoryName").string(var_49);
    }
    if let Some(var_50) = &input.image_ids {
        let mut array_51 = object.key("imageIds").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_53,
                    item_52,
                );
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.next_token {
        object.key("nextToken").string(var_54);
    }
    if let Some(var_55) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_55).into()),
        );
    }
    if let Some(var_56) = &input.filter {
        let mut object_57 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_images_filter(
            &mut object_57,
            var_56,
        );
        object_57.finish();
    }
}

pub fn serialize_structure_crate_input_describe_image_scan_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageScanFindingsInput,
) {
    if let Some(var_58) = &input.registry_id {
        object.key("registryId").string(var_58);
    }
    if let Some(var_59) = &input.repository_name {
        object.key("repositoryName").string(var_59);
    }
    if let Some(var_60) = &input.image_id {
        let mut object_61 = object.key("imageId").start_object();
        crate::json_ser::serialize_structure_crate_model_image_identifier(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.next_token {
        object.key("nextToken").string(var_62);
    }
    if let Some(var_63) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRepositoriesInput,
) {
    if let Some(var_64) = &input.registry_id {
        object.key("registryId").string(var_64);
    }
    if let Some(var_65) = &input.repository_names {
        let mut array_66 = object.key("repositoryNames").start_array();
        for item_67 in var_65 {
            {
                array_66.value().string(item_67);
            }
        }
        array_66.finish();
    }
    if let Some(var_68) = &input.next_token {
        object.key("nextToken").string(var_68);
    }
    if let Some(var_69) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_69).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_authorization_token_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAuthorizationTokenInput,
) {
    if let Some(var_70) = &input.registry_ids {
        let mut array_71 = object.key("registryIds").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72);
            }
        }
        array_71.finish();
    }
}

pub fn serialize_structure_crate_input_get_download_url_for_layer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDownloadUrlForLayerInput,
) {
    if let Some(var_73) = &input.registry_id {
        object.key("registryId").string(var_73);
    }
    if let Some(var_74) = &input.repository_name {
        object.key("repositoryName").string(var_74);
    }
    if let Some(var_75) = &input.layer_digest {
        object.key("layerDigest").string(var_75);
    }
}

pub fn serialize_structure_crate_input_get_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLifecyclePolicyInput,
) {
    if let Some(var_76) = &input.registry_id {
        object.key("registryId").string(var_76);
    }
    if let Some(var_77) = &input.repository_name {
        object.key("repositoryName").string(var_77);
    }
}

pub fn serialize_structure_crate_input_get_lifecycle_policy_preview_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLifecyclePolicyPreviewInput,
) {
    if let Some(var_78) = &input.registry_id {
        object.key("registryId").string(var_78);
    }
    if let Some(var_79) = &input.repository_name {
        object.key("repositoryName").string(var_79);
    }
    if let Some(var_80) = &input.image_ids {
        let mut array_81 = object.key("imageIds").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_83,
                    item_82,
                );
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.next_token {
        object.key("nextToken").string(var_84);
    }
    if let Some(var_85) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_85).into()),
        );
    }
    if let Some(var_86) = &input.filter {
        let mut object_87 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_lifecycle_policy_preview_filter(
            &mut object_87,
            var_86,
        );
        object_87.finish();
    }
}

pub fn serialize_structure_crate_input_get_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRepositoryPolicyInput,
) {
    if let Some(var_88) = &input.registry_id {
        object.key("registryId").string(var_88);
    }
    if let Some(var_89) = &input.repository_name {
        object.key("repositoryName").string(var_89);
    }
}

pub fn serialize_structure_crate_input_initiate_layer_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InitiateLayerUploadInput,
) {
    if let Some(var_90) = &input.registry_id {
        object.key("registryId").string(var_90);
    }
    if let Some(var_91) = &input.repository_name {
        object.key("repositoryName").string(var_91);
    }
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_92) = &input.registry_id {
        object.key("registryId").string(var_92);
    }
    if let Some(var_93) = &input.repository_name {
        object.key("repositoryName").string(var_93);
    }
    if let Some(var_94) = &input.next_token {
        object.key("nextToken").string(var_94);
    }
    if let Some(var_95) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    if let Some(var_96) = &input.filter {
        let mut object_97 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_list_images_filter(&mut object_97, var_96);
        object_97.finish();
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_98) = &input.resource_arn {
        object.key("resourceArn").string(var_98);
    }
}

pub fn serialize_structure_crate_input_put_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageInput,
) {
    if let Some(var_99) = &input.registry_id {
        object.key("registryId").string(var_99);
    }
    if let Some(var_100) = &input.repository_name {
        object.key("repositoryName").string(var_100);
    }
    if let Some(var_101) = &input.image_manifest {
        object.key("imageManifest").string(var_101);
    }
    if let Some(var_102) = &input.image_manifest_media_type {
        object.key("imageManifestMediaType").string(var_102);
    }
    if let Some(var_103) = &input.image_tag {
        object.key("imageTag").string(var_103);
    }
    if let Some(var_104) = &input.image_digest {
        object.key("imageDigest").string(var_104);
    }
}

pub fn serialize_structure_crate_input_put_image_scanning_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageScanningConfigurationInput,
) {
    if let Some(var_105) = &input.registry_id {
        object.key("registryId").string(var_105);
    }
    if let Some(var_106) = &input.repository_name {
        object.key("repositoryName").string(var_106);
    }
    if let Some(var_107) = &input.image_scanning_configuration {
        let mut object_108 = object.key("imageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_scanning_configuration(
            &mut object_108,
            var_107,
        );
        object_108.finish();
    }
}

pub fn serialize_structure_crate_input_put_image_tag_mutability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageTagMutabilityInput,
) {
    if let Some(var_109) = &input.registry_id {
        object.key("registryId").string(var_109);
    }
    if let Some(var_110) = &input.repository_name {
        object.key("repositoryName").string(var_110);
    }
    if let Some(var_111) = &input.image_tag_mutability {
        object.key("imageTagMutability").string(var_111.as_str());
    }
}

pub fn serialize_structure_crate_input_put_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLifecyclePolicyInput,
) {
    if let Some(var_112) = &input.registry_id {
        object.key("registryId").string(var_112);
    }
    if let Some(var_113) = &input.repository_name {
        object.key("repositoryName").string(var_113);
    }
    if let Some(var_114) = &input.lifecycle_policy_text {
        object.key("lifecyclePolicyText").string(var_114);
    }
}

pub fn serialize_structure_crate_input_put_registry_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRegistryPolicyInput,
) {
    if let Some(var_115) = &input.policy_text {
        object.key("policyText").string(var_115);
    }
}

pub fn serialize_structure_crate_input_put_replication_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutReplicationConfigurationInput,
) {
    if let Some(var_116) = &input.replication_configuration {
        let mut object_117 = object.key("replicationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_replication_configuration(
            &mut object_117,
            var_116,
        );
        object_117.finish();
    }
}

pub fn serialize_structure_crate_input_set_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetRepositoryPolicyInput,
) {
    if let Some(var_118) = &input.registry_id {
        object.key("registryId").string(var_118);
    }
    if let Some(var_119) = &input.repository_name {
        object.key("repositoryName").string(var_119);
    }
    if let Some(var_120) = &input.policy_text {
        object.key("policyText").string(var_120);
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
}

pub fn serialize_structure_crate_input_start_image_scan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImageScanInput,
) {
    if let Some(var_121) = &input.registry_id {
        object.key("registryId").string(var_121);
    }
    if let Some(var_122) = &input.repository_name {
        object.key("repositoryName").string(var_122);
    }
    if let Some(var_123) = &input.image_id {
        let mut object_124 = object.key("imageId").start_object();
        crate::json_ser::serialize_structure_crate_model_image_identifier(&mut object_124, var_123);
        object_124.finish();
    }
}

pub fn serialize_structure_crate_input_start_lifecycle_policy_preview_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartLifecyclePolicyPreviewInput,
) {
    if let Some(var_125) = &input.registry_id {
        object.key("registryId").string(var_125);
    }
    if let Some(var_126) = &input.repository_name {
        object.key("repositoryName").string(var_126);
    }
    if let Some(var_127) = &input.lifecycle_policy_text {
        object.key("lifecyclePolicyText").string(var_127);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_128) = &input.resource_arn {
        object.key("resourceArn").string(var_128);
    }
    if let Some(var_129) = &input.tags {
        let mut array_130 = object.key("tags").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_132, item_131);
                object_132.finish();
            }
        }
        array_130.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_133) = &input.resource_arn {
        object.key("resourceArn").string(var_133);
    }
    if let Some(var_134) = &input.tag_keys {
        let mut array_135 = object.key("tagKeys").start_array();
        for item_136 in var_134 {
            {
                array_135.value().string(item_136);
            }
        }
        array_135.finish();
    }
}

pub fn serialize_structure_crate_input_upload_layer_part_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UploadLayerPartInput,
) {
    if let Some(var_137) = &input.registry_id {
        object.key("registryId").string(var_137);
    }
    if let Some(var_138) = &input.repository_name {
        object.key("repositoryName").string(var_138);
    }
    if let Some(var_139) = &input.upload_id {
        object.key("uploadId").string(var_139);
    }
    if let Some(var_140) = &input.part_first_byte {
        object.key("partFirstByte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    if let Some(var_141) = &input.part_last_byte {
        object.key("partLastByte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.layer_part_blob {
        object
            .key("layerPartBlob")
            .string_unchecked(&smithy_types::base64::encode(var_142));
    }
}

pub fn serialize_structure_crate_model_image_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageIdentifier,
) {
    if let Some(var_143) = &input.image_digest {
        object.key("imageDigest").string(var_143);
    }
    if let Some(var_144) = &input.image_tag {
        object.key("imageTag").string(var_144);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_145) = &input.key {
        object.key("Key").string(var_145);
    }
    if let Some(var_146) = &input.value {
        object.key("Value").string(var_146);
    }
}

pub fn serialize_structure_crate_model_image_scanning_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageScanningConfiguration,
) {
    if input.scan_on_push {
        object.key("scanOnPush").boolean(input.scan_on_push);
    }
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) {
    if let Some(var_147) = &input.encryption_type {
        object.key("encryptionType").string(var_147.as_str());
    }
    if let Some(var_148) = &input.kms_key {
        object.key("kmsKey").string(var_148);
    }
}

pub fn serialize_structure_crate_model_describe_images_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeImagesFilter,
) {
    if let Some(var_149) = &input.tag_status {
        object.key("tagStatus").string(var_149.as_str());
    }
}

pub fn serialize_structure_crate_model_lifecycle_policy_preview_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LifecyclePolicyPreviewFilter,
) {
    if let Some(var_150) = &input.tag_status {
        object.key("tagStatus").string(var_150.as_str());
    }
}

pub fn serialize_structure_crate_model_list_images_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListImagesFilter,
) {
    if let Some(var_151) = &input.tag_status {
        object.key("tagStatus").string(var_151.as_str());
    }
}

pub fn serialize_structure_crate_model_replication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfiguration,
) {
    if let Some(var_152) = &input.rules {
        let mut array_153 = object.key("rules").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_rule(
                    &mut object_155,
                    item_154,
                );
                object_155.finish();
            }
        }
        array_153.finish();
    }
}

pub fn serialize_structure_crate_model_replication_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationRule,
) {
    if let Some(var_156) = &input.destinations {
        let mut array_157 = object.key("destinations").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_destination(
                    &mut object_159,
                    item_158,
                );
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.repository_filters {
        let mut array_161 = object.key("repositoryFilters").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_repository_filter(
                    &mut object_163,
                    item_162,
                );
                object_163.finish();
            }
        }
        array_161.finish();
    }
}

pub fn serialize_structure_crate_model_replication_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationDestination,
) {
    if let Some(var_164) = &input.region {
        object.key("region").string(var_164);
    }
    if let Some(var_165) = &input.registry_id {
        object.key("registryId").string(var_165);
    }
}

pub fn serialize_structure_crate_model_repository_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryFilter,
) {
    if let Some(var_166) = &input.filter {
        object.key("filter").string(var_166);
    }
    if let Some(var_167) = &input.filter_type {
        object.key("filterType").string(var_167.as_str());
    }
}
