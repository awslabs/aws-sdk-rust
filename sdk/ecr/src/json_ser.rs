// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_check_layer_availability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCheckLayerAvailabilityInput,
) {
    if let Some(var_1) = &input.registry_id {
        object.key("registryId").string(var_1);
    }
    if let Some(var_2) = &input.repository_name {
        object.key("repositoryName").string(var_2);
    }
    if let Some(var_3) = &input.layer_digests {
        let mut array_4 = object.key("layerDigests").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_crate_input_batch_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteImageInput,
) {
    if let Some(var_6) = &input.registry_id {
        object.key("registryId").string(var_6);
    }
    if let Some(var_7) = &input.repository_name {
        object.key("repositoryName").string(var_7);
    }
    if let Some(var_8) = &input.image_ids {
        let mut array_9 = object.key("imageIds").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetImageInput,
) {
    if let Some(var_12) = &input.registry_id {
        object.key("registryId").string(var_12);
    }
    if let Some(var_13) = &input.repository_name {
        object.key("repositoryName").string(var_13);
    }
    if let Some(var_14) = &input.image_ids {
        let mut array_15 = object.key("imageIds").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_17,
                    item_16,
                );
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.accepted_media_types {
        let mut array_19 = object.key("acceptedMediaTypes").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20);
            }
        }
        array_19.finish();
    }
}

pub fn serialize_structure_crate_input_complete_layer_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CompleteLayerUploadInput,
) {
    if let Some(var_21) = &input.registry_id {
        object.key("registryId").string(var_21);
    }
    if let Some(var_22) = &input.repository_name {
        object.key("repositoryName").string(var_22);
    }
    if let Some(var_23) = &input.upload_id {
        object.key("uploadId").string(var_23);
    }
    if let Some(var_24) = &input.layer_digests {
        let mut array_25 = object.key("layerDigests").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
}

pub fn serialize_structure_crate_input_create_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRepositoryInput,
) {
    if let Some(var_27) = &input.repository_name {
        object.key("repositoryName").string(var_27);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30);
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.image_tag_mutability {
        object.key("imageTagMutability").string(var_32.as_str());
    }
    if let Some(var_33) = &input.image_scanning_configuration {
        let mut object_34 = object.key("imageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_scanning_configuration(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if let Some(var_35) = &input.encryption_configuration {
        let mut object_36 = object.key("encryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_36,
            var_35,
        );
        object_36.finish();
    }
}

pub fn serialize_structure_crate_input_delete_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLifecyclePolicyInput,
) {
    if let Some(var_37) = &input.registry_id {
        object.key("registryId").string(var_37);
    }
    if let Some(var_38) = &input.repository_name {
        object.key("repositoryName").string(var_38);
    }
}

pub fn serialize_structure_crate_input_delete_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRepositoryInput,
) {
    if let Some(var_39) = &input.registry_id {
        object.key("registryId").string(var_39);
    }
    if let Some(var_40) = &input.repository_name {
        object.key("repositoryName").string(var_40);
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
}

pub fn serialize_structure_crate_input_delete_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRepositoryPolicyInput,
) {
    if let Some(var_41) = &input.registry_id {
        object.key("registryId").string(var_41);
    }
    if let Some(var_42) = &input.repository_name {
        object.key("repositoryName").string(var_42);
    }
}

pub fn serialize_structure_crate_input_describe_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagesInput,
) {
    if let Some(var_43) = &input.registry_id {
        object.key("registryId").string(var_43);
    }
    if let Some(var_44) = &input.repository_name {
        object.key("repositoryName").string(var_44);
    }
    if let Some(var_45) = &input.image_ids {
        let mut array_46 = object.key("imageIds").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_48,
                    item_47,
                );
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.next_token {
        object.key("nextToken").string(var_49);
    }
    if let Some(var_50) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.filter {
        let mut object_52 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_images_filter(
            &mut object_52,
            var_51,
        );
        object_52.finish();
    }
}

pub fn serialize_structure_crate_input_describe_image_scan_findings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageScanFindingsInput,
) {
    if let Some(var_53) = &input.registry_id {
        object.key("registryId").string(var_53);
    }
    if let Some(var_54) = &input.repository_name {
        object.key("repositoryName").string(var_54);
    }
    if let Some(var_55) = &input.image_id {
        let mut object_56 = object.key("imageId").start_object();
        crate::json_ser::serialize_structure_crate_model_image_identifier(&mut object_56, var_55);
        object_56.finish();
    }
    if let Some(var_57) = &input.next_token {
        object.key("nextToken").string(var_57);
    }
    if let Some(var_58) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRepositoriesInput,
) {
    if let Some(var_59) = &input.registry_id {
        object.key("registryId").string(var_59);
    }
    if let Some(var_60) = &input.repository_names {
        let mut array_61 = object.key("repositoryNames").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
    if let Some(var_63) = &input.next_token {
        object.key("nextToken").string(var_63);
    }
    if let Some(var_64) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_64).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_authorization_token_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAuthorizationTokenInput,
) {
    if let Some(var_65) = &input.registry_ids {
        let mut array_66 = object.key("registryIds").start_array();
        for item_67 in var_65 {
            {
                array_66.value().string(item_67);
            }
        }
        array_66.finish();
    }
}

pub fn serialize_structure_crate_input_get_download_url_for_layer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDownloadUrlForLayerInput,
) {
    if let Some(var_68) = &input.registry_id {
        object.key("registryId").string(var_68);
    }
    if let Some(var_69) = &input.repository_name {
        object.key("repositoryName").string(var_69);
    }
    if let Some(var_70) = &input.layer_digest {
        object.key("layerDigest").string(var_70);
    }
}

pub fn serialize_structure_crate_input_get_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLifecyclePolicyInput,
) {
    if let Some(var_71) = &input.registry_id {
        object.key("registryId").string(var_71);
    }
    if let Some(var_72) = &input.repository_name {
        object.key("repositoryName").string(var_72);
    }
}

pub fn serialize_structure_crate_input_get_lifecycle_policy_preview_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLifecyclePolicyPreviewInput,
) {
    if let Some(var_73) = &input.registry_id {
        object.key("registryId").string(var_73);
    }
    if let Some(var_74) = &input.repository_name {
        object.key("repositoryName").string(var_74);
    }
    if let Some(var_75) = &input.image_ids {
        let mut array_76 = object.key("imageIds").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_image_identifier(
                    &mut object_78,
                    item_77,
                );
                object_78.finish();
            }
        }
        array_76.finish();
    }
    if let Some(var_79) = &input.next_token {
        object.key("nextToken").string(var_79);
    }
    if let Some(var_80) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_80).into()),
        );
    }
    if let Some(var_81) = &input.filter {
        let mut object_82 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_lifecycle_policy_preview_filter(
            &mut object_82,
            var_81,
        );
        object_82.finish();
    }
}

pub fn serialize_structure_crate_input_get_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRepositoryPolicyInput,
) {
    if let Some(var_83) = &input.registry_id {
        object.key("registryId").string(var_83);
    }
    if let Some(var_84) = &input.repository_name {
        object.key("repositoryName").string(var_84);
    }
}

pub fn serialize_structure_crate_input_initiate_layer_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InitiateLayerUploadInput,
) {
    if let Some(var_85) = &input.registry_id {
        object.key("registryId").string(var_85);
    }
    if let Some(var_86) = &input.repository_name {
        object.key("repositoryName").string(var_86);
    }
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_87) = &input.registry_id {
        object.key("registryId").string(var_87);
    }
    if let Some(var_88) = &input.repository_name {
        object.key("repositoryName").string(var_88);
    }
    if let Some(var_89) = &input.next_token {
        object.key("nextToken").string(var_89);
    }
    if let Some(var_90) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    if let Some(var_91) = &input.filter {
        let mut object_92 = object.key("filter").start_object();
        crate::json_ser::serialize_structure_crate_model_list_images_filter(&mut object_92, var_91);
        object_92.finish();
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_93) = &input.resource_arn {
        object.key("resourceArn").string(var_93);
    }
}

pub fn serialize_structure_crate_input_put_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageInput,
) {
    if let Some(var_94) = &input.registry_id {
        object.key("registryId").string(var_94);
    }
    if let Some(var_95) = &input.repository_name {
        object.key("repositoryName").string(var_95);
    }
    if let Some(var_96) = &input.image_manifest {
        object.key("imageManifest").string(var_96);
    }
    if let Some(var_97) = &input.image_manifest_media_type {
        object.key("imageManifestMediaType").string(var_97);
    }
    if let Some(var_98) = &input.image_tag {
        object.key("imageTag").string(var_98);
    }
    if let Some(var_99) = &input.image_digest {
        object.key("imageDigest").string(var_99);
    }
}

pub fn serialize_structure_crate_input_put_image_scanning_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageScanningConfigurationInput,
) {
    if let Some(var_100) = &input.registry_id {
        object.key("registryId").string(var_100);
    }
    if let Some(var_101) = &input.repository_name {
        object.key("repositoryName").string(var_101);
    }
    if let Some(var_102) = &input.image_scanning_configuration {
        let mut object_103 = object.key("imageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_scanning_configuration(
            &mut object_103,
            var_102,
        );
        object_103.finish();
    }
}

pub fn serialize_structure_crate_input_put_image_tag_mutability_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageTagMutabilityInput,
) {
    if let Some(var_104) = &input.registry_id {
        object.key("registryId").string(var_104);
    }
    if let Some(var_105) = &input.repository_name {
        object.key("repositoryName").string(var_105);
    }
    if let Some(var_106) = &input.image_tag_mutability {
        object.key("imageTagMutability").string(var_106.as_str());
    }
}

pub fn serialize_structure_crate_input_put_lifecycle_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLifecyclePolicyInput,
) {
    if let Some(var_107) = &input.registry_id {
        object.key("registryId").string(var_107);
    }
    if let Some(var_108) = &input.repository_name {
        object.key("repositoryName").string(var_108);
    }
    if let Some(var_109) = &input.lifecycle_policy_text {
        object.key("lifecyclePolicyText").string(var_109);
    }
}

pub fn serialize_structure_crate_input_put_registry_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRegistryPolicyInput,
) {
    if let Some(var_110) = &input.policy_text {
        object.key("policyText").string(var_110);
    }
}

pub fn serialize_structure_crate_input_put_replication_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutReplicationConfigurationInput,
) {
    if let Some(var_111) = &input.replication_configuration {
        let mut object_112 = object.key("replicationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_replication_configuration(
            &mut object_112,
            var_111,
        );
        object_112.finish();
    }
}

pub fn serialize_structure_crate_input_set_repository_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetRepositoryPolicyInput,
) {
    if let Some(var_113) = &input.registry_id {
        object.key("registryId").string(var_113);
    }
    if let Some(var_114) = &input.repository_name {
        object.key("repositoryName").string(var_114);
    }
    if let Some(var_115) = &input.policy_text {
        object.key("policyText").string(var_115);
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
}

pub fn serialize_structure_crate_input_start_image_scan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImageScanInput,
) {
    if let Some(var_116) = &input.registry_id {
        object.key("registryId").string(var_116);
    }
    if let Some(var_117) = &input.repository_name {
        object.key("repositoryName").string(var_117);
    }
    if let Some(var_118) = &input.image_id {
        let mut object_119 = object.key("imageId").start_object();
        crate::json_ser::serialize_structure_crate_model_image_identifier(&mut object_119, var_118);
        object_119.finish();
    }
}

pub fn serialize_structure_crate_input_start_lifecycle_policy_preview_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartLifecyclePolicyPreviewInput,
) {
    if let Some(var_120) = &input.registry_id {
        object.key("registryId").string(var_120);
    }
    if let Some(var_121) = &input.repository_name {
        object.key("repositoryName").string(var_121);
    }
    if let Some(var_122) = &input.lifecycle_policy_text {
        object.key("lifecyclePolicyText").string(var_122);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_123) = &input.resource_arn {
        object.key("resourceArn").string(var_123);
    }
    if let Some(var_124) = &input.tags {
        let mut array_125 = object.key("tags").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_127, item_126);
                object_127.finish();
            }
        }
        array_125.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_128) = &input.resource_arn {
        object.key("resourceArn").string(var_128);
    }
    if let Some(var_129) = &input.tag_keys {
        let mut array_130 = object.key("tagKeys").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131);
            }
        }
        array_130.finish();
    }
}

pub fn serialize_structure_crate_input_upload_layer_part_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UploadLayerPartInput,
) {
    if let Some(var_132) = &input.registry_id {
        object.key("registryId").string(var_132);
    }
    if let Some(var_133) = &input.repository_name {
        object.key("repositoryName").string(var_133);
    }
    if let Some(var_134) = &input.upload_id {
        object.key("uploadId").string(var_134);
    }
    if let Some(var_135) = &input.part_first_byte {
        object.key("partFirstByte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    if let Some(var_136) = &input.part_last_byte {
        object.key("partLastByte").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.layer_part_blob {
        object
            .key("layerPartBlob")
            .string_unchecked(&smithy_types::base64::encode(var_137));
    }
}

pub fn serialize_structure_crate_model_image_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageIdentifier,
) {
    if let Some(var_138) = &input.image_digest {
        object.key("imageDigest").string(var_138);
    }
    if let Some(var_139) = &input.image_tag {
        object.key("imageTag").string(var_139);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_140) = &input.key {
        object.key("Key").string(var_140);
    }
    if let Some(var_141) = &input.value {
        object.key("Value").string(var_141);
    }
}

pub fn serialize_structure_crate_model_image_scanning_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageScanningConfiguration,
) {
    if input.scan_on_push {
        object.key("scanOnPush").boolean(input.scan_on_push);
    }
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) {
    if let Some(var_142) = &input.encryption_type {
        object.key("encryptionType").string(var_142.as_str());
    }
    if let Some(var_143) = &input.kms_key {
        object.key("kmsKey").string(var_143);
    }
}

pub fn serialize_structure_crate_model_describe_images_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeImagesFilter,
) {
    if let Some(var_144) = &input.tag_status {
        object.key("tagStatus").string(var_144.as_str());
    }
}

pub fn serialize_structure_crate_model_lifecycle_policy_preview_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LifecyclePolicyPreviewFilter,
) {
    if let Some(var_145) = &input.tag_status {
        object.key("tagStatus").string(var_145.as_str());
    }
}

pub fn serialize_structure_crate_model_list_images_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListImagesFilter,
) {
    if let Some(var_146) = &input.tag_status {
        object.key("tagStatus").string(var_146.as_str());
    }
}

pub fn serialize_structure_crate_model_replication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfiguration,
) {
    if let Some(var_147) = &input.rules {
        let mut array_148 = object.key("rules").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_rule(
                    &mut object_150,
                    item_149,
                );
                object_150.finish();
            }
        }
        array_148.finish();
    }
}

pub fn serialize_structure_crate_model_replication_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationRule,
) {
    if let Some(var_151) = &input.destinations {
        let mut array_152 = object.key("destinations").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_destination(
                    &mut object_154,
                    item_153,
                );
                object_154.finish();
            }
        }
        array_152.finish();
    }
}

pub fn serialize_structure_crate_model_replication_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationDestination,
) {
    if let Some(var_155) = &input.region {
        object.key("region").string(var_155);
    }
    if let Some(var_156) = &input.registry_id {
        object.key("registryId").string(var_156);
    }
}
