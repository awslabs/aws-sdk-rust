// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter settings used with image replication. Specifying a repository filter to a replication rule provides a method for controlling which repositories in a private registry are replicated. If no repository filter is specified, all images in the repository are replicated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryFilter {
    /// <p>The repository filter details. When the <code>PREFIX_MATCH</code> filter type is specified, this value is required and should be the repository name prefix to configure replication for.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<std::string::String>,
    /// <p>The repository filter type. The only supported value is <code>PREFIX_MATCH</code>, which is a repository name prefix specified with the <code>filter</code> parameter.</p>
    #[doc(hidden)]
    pub filter_type: std::option::Option<crate::types::RepositoryFilterType>,
}
impl RepositoryFilter {
    /// <p>The repository filter details. When the <code>PREFIX_MATCH</code> filter type is specified, this value is required and should be the repository name prefix to configure replication for.</p>
    pub fn filter(&self) -> std::option::Option<&str> {
        self.filter.as_deref()
    }
    /// <p>The repository filter type. The only supported value is <code>PREFIX_MATCH</code>, which is a repository name prefix specified with the <code>filter</code> parameter.</p>
    pub fn filter_type(&self) -> std::option::Option<&crate::types::RepositoryFilterType> {
        self.filter_type.as_ref()
    }
}
impl RepositoryFilter {
    /// Creates a new builder-style object to manufacture [`RepositoryFilter`](crate::types::RepositoryFilter).
    pub fn builder() -> crate::types::builders::RepositoryFilterBuilder {
        crate::types::builders::RepositoryFilterBuilder::default()
    }
}

/// A builder for [`RepositoryFilter`](crate::types::RepositoryFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryFilterBuilder {
    pub(crate) filter: std::option::Option<std::string::String>,
    pub(crate) filter_type: std::option::Option<crate::types::RepositoryFilterType>,
}
impl RepositoryFilterBuilder {
    /// <p>The repository filter details. When the <code>PREFIX_MATCH</code> filter type is specified, this value is required and should be the repository name prefix to configure replication for.</p>
    pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter = Some(input.into());
        self
    }
    /// <p>The repository filter details. When the <code>PREFIX_MATCH</code> filter type is specified, this value is required and should be the repository name prefix to configure replication for.</p>
    pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The repository filter type. The only supported value is <code>PREFIX_MATCH</code>, which is a repository name prefix specified with the <code>filter</code> parameter.</p>
    pub fn filter_type(mut self, input: crate::types::RepositoryFilterType) -> Self {
        self.filter_type = Some(input);
        self
    }
    /// <p>The repository filter type. The only supported value is <code>PREFIX_MATCH</code>, which is a repository name prefix specified with the <code>filter</code> parameter.</p>
    pub fn set_filter_type(
        mut self,
        input: std::option::Option<crate::types::RepositoryFilterType>,
    ) -> Self {
        self.filter_type = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryFilter`](crate::types::RepositoryFilter).
    pub fn build(self) -> crate::types::RepositoryFilter {
        crate::types::RepositoryFilter {
            filter: self.filter,
            filter_type: self.filter_type,
        }
    }
}
