// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scanning configuration for a private registry.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegistryScanningConfiguration {
    /// <p>The type of scanning configured for the registry.</p>
    #[doc(hidden)]
    pub scan_type: std::option::Option<crate::types::ScanType>,
    /// <p>The scanning rules associated with the registry.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::RegistryScanningRule>>,
}
impl RegistryScanningConfiguration {
    /// <p>The type of scanning configured for the registry.</p>
    pub fn scan_type(&self) -> std::option::Option<&crate::types::ScanType> {
        self.scan_type.as_ref()
    }
    /// <p>The scanning rules associated with the registry.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::RegistryScanningRule]> {
        self.rules.as_deref()
    }
}
impl RegistryScanningConfiguration {
    /// Creates a new builder-style object to manufacture [`RegistryScanningConfiguration`](crate::types::RegistryScanningConfiguration).
    pub fn builder() -> crate::types::builders::RegistryScanningConfigurationBuilder {
        crate::types::builders::RegistryScanningConfigurationBuilder::default()
    }
}

/// A builder for [`RegistryScanningConfiguration`](crate::types::RegistryScanningConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegistryScanningConfigurationBuilder {
    pub(crate) scan_type: std::option::Option<crate::types::ScanType>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::RegistryScanningRule>>,
}
impl RegistryScanningConfigurationBuilder {
    /// <p>The type of scanning configured for the registry.</p>
    pub fn scan_type(mut self, input: crate::types::ScanType) -> Self {
        self.scan_type = Some(input);
        self
    }
    /// <p>The type of scanning configured for the registry.</p>
    pub fn set_scan_type(mut self, input: std::option::Option<crate::types::ScanType>) -> Self {
        self.scan_type = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The scanning rules associated with the registry.</p>
    pub fn rules(mut self, input: crate::types::RegistryScanningRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>The scanning rules associated with the registry.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegistryScanningRule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`RegistryScanningConfiguration`](crate::types::RegistryScanningConfiguration).
    pub fn build(self) -> crate::types::RegistryScanningConfiguration {
        crate::types::RegistryScanningConfiguration {
            scan_type: self.scan_type,
            rules: self.rules,
        }
    }
}
