// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing an Amazon ECR image failure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageFailure {
    /// <p>The image ID associated with the failure.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<crate::types::ImageIdentifier>,
    /// <p>The code associated with the failure.</p>
    #[doc(hidden)]
    pub failure_code: std::option::Option<crate::types::ImageFailureCode>,
    /// <p>The reason for the failure.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
}
impl ImageFailure {
    /// <p>The image ID associated with the failure.</p>
    pub fn image_id(&self) -> std::option::Option<&crate::types::ImageIdentifier> {
        self.image_id.as_ref()
    }
    /// <p>The code associated with the failure.</p>
    pub fn failure_code(&self) -> std::option::Option<&crate::types::ImageFailureCode> {
        self.failure_code.as_ref()
    }
    /// <p>The reason for the failure.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl ImageFailure {
    /// Creates a new builder-style object to manufacture [`ImageFailure`](crate::types::ImageFailure).
    pub fn builder() -> crate::types::builders::ImageFailureBuilder {
        crate::types::builders::ImageFailureBuilder::default()
    }
}

/// A builder for [`ImageFailure`](crate::types::ImageFailure).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageFailureBuilder {
    pub(crate) image_id: std::option::Option<crate::types::ImageIdentifier>,
    pub(crate) failure_code: std::option::Option<crate::types::ImageFailureCode>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
}
impl ImageFailureBuilder {
    /// <p>The image ID associated with the failure.</p>
    pub fn image_id(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.image_id = Some(input);
        self
    }
    /// <p>The image ID associated with the failure.</p>
    pub fn set_image_id(
        mut self,
        input: std::option::Option<crate::types::ImageIdentifier>,
    ) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The code associated with the failure.</p>
    pub fn failure_code(mut self, input: crate::types::ImageFailureCode) -> Self {
        self.failure_code = Some(input);
        self
    }
    /// <p>The code associated with the failure.</p>
    pub fn set_failure_code(
        mut self,
        input: std::option::Option<crate::types::ImageFailureCode>,
    ) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageFailure`](crate::types::ImageFailure).
    pub fn build(self) -> crate::types::ImageFailure {
        crate::types::ImageFailure {
            image_id: self.image_id,
            failure_code: self.failure_code,
            failure_reason: self.failure_reason,
        }
    }
}
