// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a scanning repository filter. For more information on how to use filters, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html#image-scanning-filters">Using filters</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanningRepositoryFilter {
    /// <p>The filter to use when scanning.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<std::string::String>,
    /// <p>The type associated with the filter.</p>
    #[doc(hidden)]
    pub filter_type: std::option::Option<crate::types::ScanningRepositoryFilterType>,
}
impl ScanningRepositoryFilter {
    /// <p>The filter to use when scanning.</p>
    pub fn filter(&self) -> std::option::Option<&str> {
        self.filter.as_deref()
    }
    /// <p>The type associated with the filter.</p>
    pub fn filter_type(&self) -> std::option::Option<&crate::types::ScanningRepositoryFilterType> {
        self.filter_type.as_ref()
    }
}
impl ScanningRepositoryFilter {
    /// Creates a new builder-style object to manufacture [`ScanningRepositoryFilter`](crate::types::ScanningRepositoryFilter).
    pub fn builder() -> crate::types::builders::ScanningRepositoryFilterBuilder {
        crate::types::builders::ScanningRepositoryFilterBuilder::default()
    }
}

/// A builder for [`ScanningRepositoryFilter`](crate::types::ScanningRepositoryFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanningRepositoryFilterBuilder {
    pub(crate) filter: std::option::Option<std::string::String>,
    pub(crate) filter_type: std::option::Option<crate::types::ScanningRepositoryFilterType>,
}
impl ScanningRepositoryFilterBuilder {
    /// <p>The filter to use when scanning.</p>
    pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter = Some(input.into());
        self
    }
    /// <p>The filter to use when scanning.</p>
    pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The type associated with the filter.</p>
    pub fn filter_type(mut self, input: crate::types::ScanningRepositoryFilterType) -> Self {
        self.filter_type = Some(input);
        self
    }
    /// <p>The type associated with the filter.</p>
    pub fn set_filter_type(
        mut self,
        input: std::option::Option<crate::types::ScanningRepositoryFilterType>,
    ) -> Self {
        self.filter_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ScanningRepositoryFilter`](crate::types::ScanningRepositoryFilter).
    pub fn build(self) -> crate::types::ScanningRepositoryFilter {
        crate::types::ScanningRepositoryFilter {
            filter: self.filter,
            filter_type: self.filter_type,
        }
    }
}
