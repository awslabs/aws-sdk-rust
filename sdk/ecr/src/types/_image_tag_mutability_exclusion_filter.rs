// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Overrides the default image tag mutability setting of the repository for image tags that match the specified filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageTagMutabilityExclusionFilter {
    /// <p>Specifies the type of filter to use for excluding image tags from the repository's mutability setting.</p>
    pub filter_type: crate::types::ImageTagMutabilityExclusionFilterType,
    /// <p>The value to use when filtering image tags. Must be either a regular expression pattern or a tag prefix value based on the specified filter type.</p>
    pub filter: ::std::string::String,
}
impl ImageTagMutabilityExclusionFilter {
    /// <p>Specifies the type of filter to use for excluding image tags from the repository's mutability setting.</p>
    pub fn filter_type(&self) -> &crate::types::ImageTagMutabilityExclusionFilterType {
        &self.filter_type
    }
    /// <p>The value to use when filtering image tags. Must be either a regular expression pattern or a tag prefix value based on the specified filter type.</p>
    pub fn filter(&self) -> &str {
        use std::ops::Deref;
        self.filter.deref()
    }
}
impl ImageTagMutabilityExclusionFilter {
    /// Creates a new builder-style object to manufacture [`ImageTagMutabilityExclusionFilter`](crate::types::ImageTagMutabilityExclusionFilter).
    pub fn builder() -> crate::types::builders::ImageTagMutabilityExclusionFilterBuilder {
        crate::types::builders::ImageTagMutabilityExclusionFilterBuilder::default()
    }
}

/// A builder for [`ImageTagMutabilityExclusionFilter`](crate::types::ImageTagMutabilityExclusionFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageTagMutabilityExclusionFilterBuilder {
    pub(crate) filter_type: ::std::option::Option<crate::types::ImageTagMutabilityExclusionFilterType>,
    pub(crate) filter: ::std::option::Option<::std::string::String>,
}
impl ImageTagMutabilityExclusionFilterBuilder {
    /// <p>Specifies the type of filter to use for excluding image tags from the repository's mutability setting.</p>
    /// This field is required.
    pub fn filter_type(mut self, input: crate::types::ImageTagMutabilityExclusionFilterType) -> Self {
        self.filter_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of filter to use for excluding image tags from the repository's mutability setting.</p>
    pub fn set_filter_type(mut self, input: ::std::option::Option<crate::types::ImageTagMutabilityExclusionFilterType>) -> Self {
        self.filter_type = input;
        self
    }
    /// <p>Specifies the type of filter to use for excluding image tags from the repository's mutability setting.</p>
    pub fn get_filter_type(&self) -> &::std::option::Option<crate::types::ImageTagMutabilityExclusionFilterType> {
        &self.filter_type
    }
    /// <p>The value to use when filtering image tags. Must be either a regular expression pattern or a tag prefix value based on the specified filter type.</p>
    /// This field is required.
    pub fn filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to use when filtering image tags. Must be either a regular expression pattern or a tag prefix value based on the specified filter type.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The value to use when filtering image tags. Must be either a regular expression pattern or a tag prefix value based on the specified filter type.</p>
    pub fn get_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`ImageTagMutabilityExclusionFilter`](crate::types::ImageTagMutabilityExclusionFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_type`](crate::types::builders::ImageTagMutabilityExclusionFilterBuilder::filter_type)
    /// - [`filter`](crate::types::builders::ImageTagMutabilityExclusionFilterBuilder::filter)
    pub fn build(self) -> ::std::result::Result<crate::types::ImageTagMutabilityExclusionFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImageTagMutabilityExclusionFilter {
            filter_type: self.filter_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_type",
                    "filter_type was not specified but it is required when building ImageTagMutabilityExclusionFilter",
                )
            })?,
            filter: self.filter.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter",
                    "filter was not specified but it is required when building ImageTagMutabilityExclusionFilter",
                )
            })?,
        })
    }
}
