// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a package vulnerability finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PackageVulnerabilityDetails {
    /// <p>An object that contains details about the CVSS score of a finding.</p>
    #[doc(hidden)]
    pub cvss: std::option::Option<std::vec::Vec<crate::types::CvssScore>>,
    /// <p>One or more URLs that contain details about this vulnerability type.</p>
    #[doc(hidden)]
    pub reference_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more vulnerabilities related to the one identified in this finding.</p>
    #[doc(hidden)]
    pub related_vulnerabilities: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The source of the vulnerability information.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>A URL to the source of the vulnerability information.</p>
    #[doc(hidden)]
    pub source_url: std::option::Option<std::string::String>,
    /// <p>The date and time that this vulnerability was first added to the vendor's database.</p>
    #[doc(hidden)]
    pub vendor_created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The severity the vendor has given to this vulnerability type.</p>
    #[doc(hidden)]
    pub vendor_severity: std::option::Option<std::string::String>,
    /// <p>The date and time the vendor last updated this vulnerability in their database.</p>
    #[doc(hidden)]
    pub vendor_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ID given to this vulnerability.</p>
    #[doc(hidden)]
    pub vulnerability_id: std::option::Option<std::string::String>,
    /// <p>The packages impacted by this vulnerability.</p>
    #[doc(hidden)]
    pub vulnerable_packages: std::option::Option<std::vec::Vec<crate::types::VulnerablePackage>>,
}
impl PackageVulnerabilityDetails {
    /// <p>An object that contains details about the CVSS score of a finding.</p>
    pub fn cvss(&self) -> std::option::Option<&[crate::types::CvssScore]> {
        self.cvss.as_deref()
    }
    /// <p>One or more URLs that contain details about this vulnerability type.</p>
    pub fn reference_urls(&self) -> std::option::Option<&[std::string::String]> {
        self.reference_urls.as_deref()
    }
    /// <p>One or more vulnerabilities related to the one identified in this finding.</p>
    pub fn related_vulnerabilities(&self) -> std::option::Option<&[std::string::String]> {
        self.related_vulnerabilities.as_deref()
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>A URL to the source of the vulnerability information.</p>
    pub fn source_url(&self) -> std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>The date and time that this vulnerability was first added to the vendor's database.</p>
    pub fn vendor_created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.vendor_created_at.as_ref()
    }
    /// <p>The severity the vendor has given to this vulnerability type.</p>
    pub fn vendor_severity(&self) -> std::option::Option<&str> {
        self.vendor_severity.as_deref()
    }
    /// <p>The date and time the vendor last updated this vulnerability in their database.</p>
    pub fn vendor_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.vendor_updated_at.as_ref()
    }
    /// <p>The ID given to this vulnerability.</p>
    pub fn vulnerability_id(&self) -> std::option::Option<&str> {
        self.vulnerability_id.as_deref()
    }
    /// <p>The packages impacted by this vulnerability.</p>
    pub fn vulnerable_packages(&self) -> std::option::Option<&[crate::types::VulnerablePackage]> {
        self.vulnerable_packages.as_deref()
    }
}
impl PackageVulnerabilityDetails {
    /// Creates a new builder-style object to manufacture [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
    pub fn builder() -> crate::types::builders::PackageVulnerabilityDetailsBuilder {
        crate::types::builders::PackageVulnerabilityDetailsBuilder::default()
    }
}

/// A builder for [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PackageVulnerabilityDetailsBuilder {
    pub(crate) cvss: std::option::Option<std::vec::Vec<crate::types::CvssScore>>,
    pub(crate) reference_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) related_vulnerabilities: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) source_url: std::option::Option<std::string::String>,
    pub(crate) vendor_created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) vendor_severity: std::option::Option<std::string::String>,
    pub(crate) vendor_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) vulnerability_id: std::option::Option<std::string::String>,
    pub(crate) vulnerable_packages:
        std::option::Option<std::vec::Vec<crate::types::VulnerablePackage>>,
}
impl PackageVulnerabilityDetailsBuilder {
    /// Appends an item to `cvss`.
    ///
    /// To override the contents of this collection use [`set_cvss`](Self::set_cvss).
    ///
    /// <p>An object that contains details about the CVSS score of a finding.</p>
    pub fn cvss(mut self, input: crate::types::CvssScore) -> Self {
        let mut v = self.cvss.unwrap_or_default();
        v.push(input);
        self.cvss = Some(v);
        self
    }
    /// <p>An object that contains details about the CVSS score of a finding.</p>
    pub fn set_cvss(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CvssScore>>,
    ) -> Self {
        self.cvss = input;
        self
    }
    /// Appends an item to `reference_urls`.
    ///
    /// To override the contents of this collection use [`set_reference_urls`](Self::set_reference_urls).
    ///
    /// <p>One or more URLs that contain details about this vulnerability type.</p>
    pub fn reference_urls(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.reference_urls.unwrap_or_default();
        v.push(input.into());
        self.reference_urls = Some(v);
        self
    }
    /// <p>One or more URLs that contain details about this vulnerability type.</p>
    pub fn set_reference_urls(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.reference_urls = input;
        self
    }
    /// Appends an item to `related_vulnerabilities`.
    ///
    /// To override the contents of this collection use [`set_related_vulnerabilities`](Self::set_related_vulnerabilities).
    ///
    /// <p>One or more vulnerabilities related to the one identified in this finding.</p>
    pub fn related_vulnerabilities(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.related_vulnerabilities.unwrap_or_default();
        v.push(input.into());
        self.related_vulnerabilities = Some(v);
        self
    }
    /// <p>One or more vulnerabilities related to the one identified in this finding.</p>
    pub fn set_related_vulnerabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.related_vulnerabilities = input;
        self
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>A URL to the source of the vulnerability information.</p>
    pub fn source_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_url = Some(input.into());
        self
    }
    /// <p>A URL to the source of the vulnerability information.</p>
    pub fn set_source_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>The date and time that this vulnerability was first added to the vendor's database.</p>
    pub fn vendor_created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.vendor_created_at = Some(input);
        self
    }
    /// <p>The date and time that this vulnerability was first added to the vendor's database.</p>
    pub fn set_vendor_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.vendor_created_at = input;
        self
    }
    /// <p>The severity the vendor has given to this vulnerability type.</p>
    pub fn vendor_severity(mut self, input: impl Into<std::string::String>) -> Self {
        self.vendor_severity = Some(input.into());
        self
    }
    /// <p>The severity the vendor has given to this vulnerability type.</p>
    pub fn set_vendor_severity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vendor_severity = input;
        self
    }
    /// <p>The date and time the vendor last updated this vulnerability in their database.</p>
    pub fn vendor_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.vendor_updated_at = Some(input);
        self
    }
    /// <p>The date and time the vendor last updated this vulnerability in their database.</p>
    pub fn set_vendor_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.vendor_updated_at = input;
        self
    }
    /// <p>The ID given to this vulnerability.</p>
    pub fn vulnerability_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vulnerability_id = Some(input.into());
        self
    }
    /// <p>The ID given to this vulnerability.</p>
    pub fn set_vulnerability_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vulnerability_id = input;
        self
    }
    /// Appends an item to `vulnerable_packages`.
    ///
    /// To override the contents of this collection use [`set_vulnerable_packages`](Self::set_vulnerable_packages).
    ///
    /// <p>The packages impacted by this vulnerability.</p>
    pub fn vulnerable_packages(mut self, input: crate::types::VulnerablePackage) -> Self {
        let mut v = self.vulnerable_packages.unwrap_or_default();
        v.push(input);
        self.vulnerable_packages = Some(v);
        self
    }
    /// <p>The packages impacted by this vulnerability.</p>
    pub fn set_vulnerable_packages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VulnerablePackage>>,
    ) -> Self {
        self.vulnerable_packages = input;
        self
    }
    /// Consumes the builder and constructs a [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
    pub fn build(self) -> crate::types::PackageVulnerabilityDetails {
        crate::types::PackageVulnerabilityDetails {
            cvss: self.cvss,
            reference_urls: self.reference_urls,
            related_vulnerabilities: self.related_vulnerabilities,
            source: self.source,
            source_url: self.source_url,
            vendor_created_at: self.vendor_created_at,
            vendor_severity: self.vendor_severity,
            vendor_updated_at: self.vendor_updated_at,
            vulnerability_id: self.vulnerability_id,
            vulnerable_packages: self.vulnerable_packages,
        }
    }
}
