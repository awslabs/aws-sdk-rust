// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of the lifecycle policy preview.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LifecyclePolicyPreviewResult {
    /// <p>The list of tags associated with this image.</p>
    pub image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub image_digest: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.</p>
    pub image_pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of action to be taken.</p>
    pub action: ::std::option::Option<crate::types::LifecyclePolicyRuleAction>,
    /// <p>The priority of the applied rule.</p>
    pub applied_rule_priority: ::std::option::Option<i32>,
}
impl LifecyclePolicyPreviewResult {
    /// <p>The list of tags associated with this image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_tags.is_none()`.
    pub fn image_tags(&self) -> &[::std::string::String] {
        self.image_tags.as_deref().unwrap_or_default()
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(&self) -> ::std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.</p>
    pub fn image_pushed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.image_pushed_at.as_ref()
    }
    /// <p>The type of action to be taken.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::LifecyclePolicyRuleAction> {
        self.action.as_ref()
    }
    /// <p>The priority of the applied rule.</p>
    pub fn applied_rule_priority(&self) -> ::std::option::Option<i32> {
        self.applied_rule_priority
    }
}
impl LifecyclePolicyPreviewResult {
    /// Creates a new builder-style object to manufacture [`LifecyclePolicyPreviewResult`](crate::types::LifecyclePolicyPreviewResult).
    pub fn builder() -> crate::types::builders::LifecyclePolicyPreviewResultBuilder {
        crate::types::builders::LifecyclePolicyPreviewResultBuilder::default()
    }
}

/// A builder for [`LifecyclePolicyPreviewResult`](crate::types::LifecyclePolicyPreviewResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LifecyclePolicyPreviewResultBuilder {
    pub(crate) image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) image_digest: ::std::option::Option<::std::string::String>,
    pub(crate) image_pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) action: ::std::option::Option<crate::types::LifecyclePolicyRuleAction>,
    pub(crate) applied_rule_priority: ::std::option::Option<i32>,
}
impl LifecyclePolicyPreviewResultBuilder {
    /// Appends an item to `image_tags`.
    ///
    /// To override the contents of this collection use [`set_image_tags`](Self::set_image_tags).
    ///
    /// <p>The list of tags associated with this image.</p>
    pub fn image_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_tags.unwrap_or_default();
        v.push(input.into());
        self.image_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of tags associated with this image.</p>
    pub fn set_image_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_tags = input;
        self
    }
    /// <p>The list of tags associated with this image.</p>
    pub fn get_image_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_tags
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn set_image_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn get_image_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_digest
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.</p>
    pub fn image_pushed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.image_pushed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.</p>
    pub fn set_image_pushed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.image_pushed_at = input;
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.</p>
    pub fn get_image_pushed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.image_pushed_at
    }
    /// <p>The type of action to be taken.</p>
    pub fn action(mut self, input: crate::types::LifecyclePolicyRuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action to be taken.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyRuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The type of action to be taken.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::LifecyclePolicyRuleAction> {
        &self.action
    }
    /// <p>The priority of the applied rule.</p>
    pub fn applied_rule_priority(mut self, input: i32) -> Self {
        self.applied_rule_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority of the applied rule.</p>
    pub fn set_applied_rule_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.applied_rule_priority = input;
        self
    }
    /// <p>The priority of the applied rule.</p>
    pub fn get_applied_rule_priority(&self) -> &::std::option::Option<i32> {
        &self.applied_rule_priority
    }
    /// Consumes the builder and constructs a [`LifecyclePolicyPreviewResult`](crate::types::LifecyclePolicyPreviewResult).
    pub fn build(self) -> crate::types::LifecyclePolicyPreviewResult {
        crate::types::LifecyclePolicyPreviewResult {
            image_tags: self.image_tags,
            image_digest: self.image_digest,
            image_pushed_at: self.image_pushed_at,
            action: self.action,
            applied_rule_priority: self.applied_rule_priority,
        }
    }
}
