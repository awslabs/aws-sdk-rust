// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageIdentifier {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    #[doc(hidden)]
    pub image_digest: std::option::Option<std::string::String>,
    /// <p>The tag used for the image.</p>
    #[doc(hidden)]
    pub image_tag: std::option::Option<std::string::String>,
}
impl ImageIdentifier {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(&self) -> std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>The tag used for the image.</p>
    pub fn image_tag(&self) -> std::option::Option<&str> {
        self.image_tag.as_deref()
    }
}
impl ImageIdentifier {
    /// Creates a new builder-style object to manufacture [`ImageIdentifier`](crate::types::ImageIdentifier).
    pub fn builder() -> crate::types::builders::ImageIdentifierBuilder {
        crate::types::builders::ImageIdentifierBuilder::default()
    }
}

/// A builder for [`ImageIdentifier`](crate::types::ImageIdentifier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageIdentifierBuilder {
    pub(crate) image_digest: std::option::Option<std::string::String>,
    pub(crate) image_tag: std::option::Option<std::string::String>,
}
impl ImageIdentifierBuilder {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_digest = Some(input.into());
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn set_image_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>The tag used for the image.</p>
    pub fn image_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_tag = Some(input.into());
        self
    }
    /// <p>The tag used for the image.</p>
    pub fn set_image_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_tag = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageIdentifier`](crate::types::ImageIdentifier).
    pub fn build(self) -> crate::types::ImageIdentifier {
        crate::types::ImageIdentifier {
            image_digest: self.image_digest,
            image_tag: self.image_tag,
        }
    }
}
