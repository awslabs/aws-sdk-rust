// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an image scan finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageScanFinding {
    /// <p>The name associated with the finding, usually a CVE number.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the finding.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A link containing additional details about the security vulnerability.</p>
    #[doc(hidden)]
    pub uri: std::option::Option<std::string::String>,
    /// <p>The finding severity.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::FindingSeverity>,
    /// <p>A collection of attributes of the host from which the finding is generated.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl ImageScanFinding {
    /// <p>The name associated with the finding, usually a CVE number.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the finding.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A link containing additional details about the security vulnerability.</p>
    pub fn uri(&self) -> std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The finding severity.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::FindingSeverity> {
        self.severity.as_ref()
    }
    /// <p>A collection of attributes of the host from which the finding is generated.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::Attribute]> {
        self.attributes.as_deref()
    }
}
impl ImageScanFinding {
    /// Creates a new builder-style object to manufacture [`ImageScanFinding`](crate::types::ImageScanFinding).
    pub fn builder() -> crate::types::builders::ImageScanFindingBuilder {
        crate::types::builders::ImageScanFindingBuilder::default()
    }
}

/// A builder for [`ImageScanFinding`](crate::types::ImageScanFinding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageScanFindingBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) uri: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<crate::types::FindingSeverity>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
}
impl ImageScanFindingBuilder {
    /// <p>The name associated with the finding, usually a CVE number.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name associated with the finding, usually a CVE number.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the finding.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the finding.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A link containing additional details about the security vulnerability.</p>
    pub fn uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.uri = Some(input.into());
        self
    }
    /// <p>A link containing additional details about the security vulnerability.</p>
    pub fn set_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The finding severity.</p>
    pub fn severity(mut self, input: crate::types::FindingSeverity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The finding severity.</p>
    pub fn set_severity(
        mut self,
        input: std::option::Option<crate::types::FindingSeverity>,
    ) -> Self {
        self.severity = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A collection of attributes of the host from which the finding is generated.</p>
    pub fn attributes(mut self, input: crate::types::Attribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>A collection of attributes of the host from which the finding is generated.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Attribute>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageScanFinding`](crate::types::ImageScanFinding).
    pub fn build(self) -> crate::types::ImageScanFinding {
        crate::types::ImageScanFinding {
            name: self.name,
            description: self.description,
            uri: self.uri,
            severity: self.severity,
            attributes: self.attributes,
        }
    }
}
