// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of objects representing the replication destinations and repository filters for a replication configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicationRule {
    /// <p>An array of objects representing the destination for a replication rule.</p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::types::ReplicationDestination>>,
    /// <p>An array of objects representing the filters for a replication rule. Specifying a repository filter for a replication rule provides a method for controlling which repositories in a private registry are replicated.</p>
    #[doc(hidden)]
    pub repository_filters: std::option::Option<std::vec::Vec<crate::types::RepositoryFilter>>,
}
impl ReplicationRule {
    /// <p>An array of objects representing the destination for a replication rule.</p>
    pub fn destinations(&self) -> std::option::Option<&[crate::types::ReplicationDestination]> {
        self.destinations.as_deref()
    }
    /// <p>An array of objects representing the filters for a replication rule. Specifying a repository filter for a replication rule provides a method for controlling which repositories in a private registry are replicated.</p>
    pub fn repository_filters(&self) -> std::option::Option<&[crate::types::RepositoryFilter]> {
        self.repository_filters.as_deref()
    }
}
impl ReplicationRule {
    /// Creates a new builder-style object to manufacture [`ReplicationRule`](crate::types::ReplicationRule).
    pub fn builder() -> crate::types::builders::ReplicationRuleBuilder {
        crate::types::builders::ReplicationRuleBuilder::default()
    }
}

/// A builder for [`ReplicationRule`](crate::types::ReplicationRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicationRuleBuilder {
    pub(crate) destinations:
        std::option::Option<std::vec::Vec<crate::types::ReplicationDestination>>,
    pub(crate) repository_filters:
        std::option::Option<std::vec::Vec<crate::types::RepositoryFilter>>,
}
impl ReplicationRuleBuilder {
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>An array of objects representing the destination for a replication rule.</p>
    pub fn destinations(mut self, input: crate::types::ReplicationDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = Some(v);
        self
    }
    /// <p>An array of objects representing the destination for a replication rule.</p>
    pub fn set_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReplicationDestination>>,
    ) -> Self {
        self.destinations = input;
        self
    }
    /// Appends an item to `repository_filters`.
    ///
    /// To override the contents of this collection use [`set_repository_filters`](Self::set_repository_filters).
    ///
    /// <p>An array of objects representing the filters for a replication rule. Specifying a repository filter for a replication rule provides a method for controlling which repositories in a private registry are replicated.</p>
    pub fn repository_filters(mut self, input: crate::types::RepositoryFilter) -> Self {
        let mut v = self.repository_filters.unwrap_or_default();
        v.push(input);
        self.repository_filters = Some(v);
        self
    }
    /// <p>An array of objects representing the filters for a replication rule. Specifying a repository filter for a replication rule provides a method for controlling which repositories in a private registry are replicated.</p>
    pub fn set_repository_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RepositoryFilter>>,
    ) -> Self {
        self.repository_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicationRule`](crate::types::ReplicationRule).
    pub fn build(self) -> crate::types::ReplicationRule {
        crate::types::ReplicationRule {
            destinations: self.destinations,
            repository_filters: self.repository_filters,
        }
    }
}
