// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of action to be taken.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LifecyclePolicyRuleAction {
    /// <p>The type of action to be taken.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ImageActionType>,
}
impl LifecyclePolicyRuleAction {
    /// <p>The type of action to be taken.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ImageActionType> {
        self.r#type.as_ref()
    }
}
impl LifecyclePolicyRuleAction {
    /// Creates a new builder-style object to manufacture [`LifecyclePolicyRuleAction`](crate::types::LifecyclePolicyRuleAction).
    pub fn builder() -> crate::types::builders::LifecyclePolicyRuleActionBuilder {
        crate::types::builders::LifecyclePolicyRuleActionBuilder::default()
    }
}

/// A builder for [`LifecyclePolicyRuleAction`](crate::types::LifecyclePolicyRuleAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LifecyclePolicyRuleActionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ImageActionType>,
}
impl LifecyclePolicyRuleActionBuilder {
    /// <p>The type of action to be taken.</p>
    pub fn r#type(mut self, input: crate::types::ImageActionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of action to be taken.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ImageActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`LifecyclePolicyRuleAction`](crate::types::LifecyclePolicyRuleAction).
    pub fn build(self) -> crate::types::LifecyclePolicyRuleAction {
        crate::types::LifecyclePolicyRuleAction {
            r#type: self.r#type,
        }
    }
}
