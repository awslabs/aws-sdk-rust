// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CVSS score for a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CvssScore {
    /// <p>The base CVSS score used for the finding.</p>
    #[doc(hidden)]
    pub base_score: f64,
    /// <p>The vector string of the CVSS score.</p>
    #[doc(hidden)]
    pub scoring_vector: std::option::Option<std::string::String>,
    /// <p>The source of the CVSS score.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>The version of CVSS used for the score.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl CvssScore {
    /// <p>The base CVSS score used for the finding.</p>
    pub fn base_score(&self) -> f64 {
        self.base_score
    }
    /// <p>The vector string of the CVSS score.</p>
    pub fn scoring_vector(&self) -> std::option::Option<&str> {
        self.scoring_vector.as_deref()
    }
    /// <p>The source of the CVSS score.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The version of CVSS used for the score.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl CvssScore {
    /// Creates a new builder-style object to manufacture [`CvssScore`](crate::types::CvssScore).
    pub fn builder() -> crate::types::builders::CvssScoreBuilder {
        crate::types::builders::CvssScoreBuilder::default()
    }
}

/// A builder for [`CvssScore`](crate::types::CvssScore).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CvssScoreBuilder {
    pub(crate) base_score: std::option::Option<f64>,
    pub(crate) scoring_vector: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl CvssScoreBuilder {
    /// <p>The base CVSS score used for the finding.</p>
    pub fn base_score(mut self, input: f64) -> Self {
        self.base_score = Some(input);
        self
    }
    /// <p>The base CVSS score used for the finding.</p>
    pub fn set_base_score(mut self, input: std::option::Option<f64>) -> Self {
        self.base_score = input;
        self
    }
    /// <p>The vector string of the CVSS score.</p>
    pub fn scoring_vector(mut self, input: impl Into<std::string::String>) -> Self {
        self.scoring_vector = Some(input.into());
        self
    }
    /// <p>The vector string of the CVSS score.</p>
    pub fn set_scoring_vector(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scoring_vector = input;
        self
    }
    /// <p>The source of the CVSS score.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source of the CVSS score.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The version of CVSS used for the score.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of CVSS used for the score.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`CvssScore`](crate::types::CvssScore).
    pub fn build(self) -> crate::types::CvssScore {
        crate::types::CvssScore {
            base_score: self.base_score.unwrap_or_default(),
            scoring_vector: self.scoring_vector,
            source: self.source,
            version: self.version,
        }
    }
}
