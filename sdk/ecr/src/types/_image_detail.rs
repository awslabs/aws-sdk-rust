// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes an image returned by a <code>DescribeImages</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageDetail {
    /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
    /// <p>The name of the repository to which this image belongs.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    #[doc(hidden)]
    pub image_digest: std::option::Option<std::string::String>,
    /// <p>The list of tags associated with this image.</p>
    #[doc(hidden)]
    pub image_tags: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <code>DescribeImages</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub image_size_in_bytes: std::option::Option<i64>,
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>
    #[doc(hidden)]
    pub image_pushed_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the scan.</p>
    #[doc(hidden)]
    pub image_scan_status: std::option::Option<crate::types::ImageScanStatus>,
    /// <p>A summary of the last completed image scan.</p>
    #[doc(hidden)]
    pub image_scan_findings_summary: std::option::Option<crate::types::ImageScanFindingsSummary>,
    /// <p>The media type of the image manifest.</p>
    #[doc(hidden)]
    pub image_manifest_media_type: std::option::Option<std::string::String>,
    /// <p>The artifact media type of the image.</p>
    #[doc(hidden)]
    pub artifact_media_type: std::option::Option<std::string::String>,
    /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note>
    /// <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p>
    /// </note>
    #[doc(hidden)]
    pub last_recorded_pull_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ImageDetail {
    /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository to which this image belongs.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(&self) -> std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>The list of tags associated with this image.</p>
    pub fn image_tags(&self) -> std::option::Option<&[std::string::String]> {
        self.image_tags.as_deref()
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(&self) -> std::option::Option<i64> {
        self.image_size_in_bytes
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>
    pub fn image_pushed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.image_pushed_at.as_ref()
    }
    /// <p>The current state of the scan.</p>
    pub fn image_scan_status(&self) -> std::option::Option<&crate::types::ImageScanStatus> {
        self.image_scan_status.as_ref()
    }
    /// <p>A summary of the last completed image scan.</p>
    pub fn image_scan_findings_summary(
        &self,
    ) -> std::option::Option<&crate::types::ImageScanFindingsSummary> {
        self.image_scan_findings_summary.as_ref()
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(&self) -> std::option::Option<&str> {
        self.image_manifest_media_type.as_deref()
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(&self) -> std::option::Option<&str> {
        self.artifact_media_type.as_deref()
    }
    /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note>
    /// <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p>
    /// </note>
    pub fn last_recorded_pull_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_recorded_pull_time.as_ref()
    }
}
impl ImageDetail {
    /// Creates a new builder-style object to manufacture [`ImageDetail`](crate::types::ImageDetail).
    pub fn builder() -> crate::types::builders::ImageDetailBuilder {
        crate::types::builders::ImageDetailBuilder::default()
    }
}

/// A builder for [`ImageDetail`](crate::types::ImageDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageDetailBuilder {
    pub(crate) registry_id: std::option::Option<std::string::String>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) image_digest: std::option::Option<std::string::String>,
    pub(crate) image_tags: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) image_size_in_bytes: std::option::Option<i64>,
    pub(crate) image_pushed_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) image_scan_status: std::option::Option<crate::types::ImageScanStatus>,
    pub(crate) image_scan_findings_summary:
        std::option::Option<crate::types::ImageScanFindingsSummary>,
    pub(crate) image_manifest_media_type: std::option::Option<std::string::String>,
    pub(crate) artifact_media_type: std::option::Option<std::string::String>,
    pub(crate) last_recorded_pull_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ImageDetailBuilder {
    /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The name of the repository to which this image belongs.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository to which this image belongs.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_digest = Some(input.into());
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn set_image_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// Appends an item to `image_tags`.
    ///
    /// To override the contents of this collection use [`set_image_tags`](Self::set_image_tags).
    ///
    /// <p>The list of tags associated with this image.</p>
    pub fn image_tags(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.image_tags.unwrap_or_default();
        v.push(input.into());
        self.image_tags = Some(v);
        self
    }
    /// <p>The list of tags associated with this image.</p>
    pub fn set_image_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.image_tags = input;
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(mut self, input: i64) -> Self {
        self.image_size_in_bytes = Some(input);
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn set_image_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.image_size_in_bytes = input;
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>
    pub fn image_pushed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.image_pushed_at = Some(input);
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>
    pub fn set_image_pushed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.image_pushed_at = input;
        self
    }
    /// <p>The current state of the scan.</p>
    pub fn image_scan_status(mut self, input: crate::types::ImageScanStatus) -> Self {
        self.image_scan_status = Some(input);
        self
    }
    /// <p>The current state of the scan.</p>
    pub fn set_image_scan_status(
        mut self,
        input: std::option::Option<crate::types::ImageScanStatus>,
    ) -> Self {
        self.image_scan_status = input;
        self
    }
    /// <p>A summary of the last completed image scan.</p>
    pub fn image_scan_findings_summary(
        mut self,
        input: crate::types::ImageScanFindingsSummary,
    ) -> Self {
        self.image_scan_findings_summary = Some(input);
        self
    }
    /// <p>A summary of the last completed image scan.</p>
    pub fn set_image_scan_findings_summary(
        mut self,
        input: std::option::Option<crate::types::ImageScanFindingsSummary>,
    ) -> Self {
        self.image_scan_findings_summary = input;
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_manifest_media_type = Some(input.into());
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn set_image_manifest_media_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.image_manifest_media_type = input;
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_media_type = Some(input.into());
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn set_artifact_media_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_media_type = input;
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note>
    /// <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p>
    /// </note>
    pub fn last_recorded_pull_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_recorded_pull_time = Some(input);
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note>
    /// <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p>
    /// </note>
    pub fn set_last_recorded_pull_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_recorded_pull_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageDetail`](crate::types::ImageDetail).
    pub fn build(self) -> crate::types::ImageDetail {
        crate::types::ImageDetail {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            image_digest: self.image_digest,
            image_tags: self.image_tags,
            image_size_in_bytes: self.image_size_in_bytes,
            image_pushed_at: self.image_pushed_at,
            image_scan_status: self.image_scan_status,
            image_scan_findings_summary: self.image_scan_findings_summary,
            image_manifest_media_type: self.image_manifest_media_type,
            artifact_media_type: self.artifact_media_type,
            last_recorded_pull_time: self.last_recorded_pull_time,
        }
    }
}
