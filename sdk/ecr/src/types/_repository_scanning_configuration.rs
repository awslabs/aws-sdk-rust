// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the scanning configuration for a repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryScanningConfiguration {
    /// <p>The ARN of the repository.</p>
    #[doc(hidden)]
    pub repository_arn: std::option::Option<std::string::String>,
    /// <p>The name of the repository.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>Whether or not scan on push is configured for the repository.</p>
    #[doc(hidden)]
    pub scan_on_push: bool,
    /// <p>The scan frequency for the repository.</p>
    #[doc(hidden)]
    pub scan_frequency: std::option::Option<crate::types::ScanFrequency>,
    /// <p>The scan filters applied to the repository.</p>
    #[doc(hidden)]
    pub applied_scan_filters:
        std::option::Option<std::vec::Vec<crate::types::ScanningRepositoryFilter>>,
}
impl RepositoryScanningConfiguration {
    /// <p>The ARN of the repository.</p>
    pub fn repository_arn(&self) -> std::option::Option<&str> {
        self.repository_arn.as_deref()
    }
    /// <p>The name of the repository.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>Whether or not scan on push is configured for the repository.</p>
    pub fn scan_on_push(&self) -> bool {
        self.scan_on_push
    }
    /// <p>The scan frequency for the repository.</p>
    pub fn scan_frequency(&self) -> std::option::Option<&crate::types::ScanFrequency> {
        self.scan_frequency.as_ref()
    }
    /// <p>The scan filters applied to the repository.</p>
    pub fn applied_scan_filters(
        &self,
    ) -> std::option::Option<&[crate::types::ScanningRepositoryFilter]> {
        self.applied_scan_filters.as_deref()
    }
}
impl RepositoryScanningConfiguration {
    /// Creates a new builder-style object to manufacture [`RepositoryScanningConfiguration`](crate::types::RepositoryScanningConfiguration).
    pub fn builder() -> crate::types::builders::RepositoryScanningConfigurationBuilder {
        crate::types::builders::RepositoryScanningConfigurationBuilder::default()
    }
}

/// A builder for [`RepositoryScanningConfiguration`](crate::types::RepositoryScanningConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryScanningConfigurationBuilder {
    pub(crate) repository_arn: std::option::Option<std::string::String>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) scan_on_push: std::option::Option<bool>,
    pub(crate) scan_frequency: std::option::Option<crate::types::ScanFrequency>,
    pub(crate) applied_scan_filters:
        std::option::Option<std::vec::Vec<crate::types::ScanningRepositoryFilter>>,
}
impl RepositoryScanningConfigurationBuilder {
    /// <p>The ARN of the repository.</p>
    pub fn repository_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the repository.</p>
    pub fn set_repository_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_arn = input;
        self
    }
    /// <p>The name of the repository.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>Whether or not scan on push is configured for the repository.</p>
    pub fn scan_on_push(mut self, input: bool) -> Self {
        self.scan_on_push = Some(input);
        self
    }
    /// <p>Whether or not scan on push is configured for the repository.</p>
    pub fn set_scan_on_push(mut self, input: std::option::Option<bool>) -> Self {
        self.scan_on_push = input;
        self
    }
    /// <p>The scan frequency for the repository.</p>
    pub fn scan_frequency(mut self, input: crate::types::ScanFrequency) -> Self {
        self.scan_frequency = Some(input);
        self
    }
    /// <p>The scan frequency for the repository.</p>
    pub fn set_scan_frequency(
        mut self,
        input: std::option::Option<crate::types::ScanFrequency>,
    ) -> Self {
        self.scan_frequency = input;
        self
    }
    /// Appends an item to `applied_scan_filters`.
    ///
    /// To override the contents of this collection use [`set_applied_scan_filters`](Self::set_applied_scan_filters).
    ///
    /// <p>The scan filters applied to the repository.</p>
    pub fn applied_scan_filters(mut self, input: crate::types::ScanningRepositoryFilter) -> Self {
        let mut v = self.applied_scan_filters.unwrap_or_default();
        v.push(input);
        self.applied_scan_filters = Some(v);
        self
    }
    /// <p>The scan filters applied to the repository.</p>
    pub fn set_applied_scan_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScanningRepositoryFilter>>,
    ) -> Self {
        self.applied_scan_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryScanningConfiguration`](crate::types::RepositoryScanningConfiguration).
    pub fn build(self) -> crate::types::RepositoryScanningConfiguration {
        crate::types::RepositoryScanningConfiguration {
            repository_arn: self.repository_arn,
            repository_name: self.repository_name,
            scan_on_push: self.scan_on_push.unwrap_or_default(),
            scan_frequency: self.scan_frequency,
            applied_scan_filters: self.applied_scan_filters,
        }
    }
}
