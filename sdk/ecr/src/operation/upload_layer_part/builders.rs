// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::upload_layer_part::_upload_layer_part_output::UploadLayerPartOutputBuilder;

pub use crate::operation::upload_layer_part::_upload_layer_part_input::UploadLayerPartInputBuilder;

/// Fluent builder constructing a request to `UploadLayerPart`.
///
/// <p>Uploads an image layer part to Amazon ECR.</p>
/// <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note>
/// <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UploadLayerPartFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::upload_layer_part::builders::UploadLayerPartInputBuilder,
}
impl UploadLayerPartFluentBuilder {
    /// Creates a new `UploadLayerPart`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::upload_layer_part::UploadLayerPart,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::upload_layer_part::UploadLayerPartError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::upload_layer_part::UploadLayerPartOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::upload_layer_part::UploadLayerPartError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.registry_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_registry_id(input);
        self
    }
    /// <p>The name of the repository to which you are uploading layer parts.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the repository to which you are uploading layer parts.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The upload ID from a previous <code>InitiateLayerUpload</code> operation to associate with the layer part upload.</p>
    pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.upload_id(input.into());
        self
    }
    /// <p>The upload ID from a previous <code>InitiateLayerUpload</code> operation to associate with the layer part upload.</p>
    pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_upload_id(input);
        self
    }
    /// <p>The position of the first byte of the layer part witin the overall image layer.</p>
    pub fn part_first_byte(mut self, input: i64) -> Self {
        self.inner = self.inner.part_first_byte(input);
        self
    }
    /// <p>The position of the first byte of the layer part witin the overall image layer.</p>
    pub fn set_part_first_byte(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_part_first_byte(input);
        self
    }
    /// <p>The position of the last byte of the layer part within the overall image layer.</p>
    pub fn part_last_byte(mut self, input: i64) -> Self {
        self.inner = self.inner.part_last_byte(input);
        self
    }
    /// <p>The position of the last byte of the layer part within the overall image layer.</p>
    pub fn set_part_last_byte(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_part_last_byte(input);
        self
    }
    /// <p>The base64-encoded layer part payload.</p>
    pub fn layer_part_blob(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.layer_part_blob(input);
        self
    }
    /// <p>The base64-encoded layer part payload.</p>
    pub fn set_layer_part_blob(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.inner = self.inner.set_layer_part_blob(input);
        self
    }
}
