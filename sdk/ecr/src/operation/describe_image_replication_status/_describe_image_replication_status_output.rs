// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImageReplicationStatusOutput {
    /// <p>The repository name associated with the request.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<crate::types::ImageIdentifier>,
    /// <p>The replication status details for the images in the specified repository.</p>
    #[doc(hidden)]
    pub replication_statuses:
        std::option::Option<std::vec::Vec<crate::types::ImageReplicationStatus>>,
    _request_id: Option<String>,
}
impl DescribeImageReplicationStatusOutput {
    /// <p>The repository name associated with the request.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn image_id(&self) -> std::option::Option<&crate::types::ImageIdentifier> {
        self.image_id.as_ref()
    }
    /// <p>The replication status details for the images in the specified repository.</p>
    pub fn replication_statuses(
        &self,
    ) -> std::option::Option<&[crate::types::ImageReplicationStatus]> {
        self.replication_statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeImageReplicationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeImageReplicationStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImageReplicationStatusOutput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusOutput).
    pub fn builder() -> crate::operation::describe_image_replication_status::builders::DescribeImageReplicationStatusOutputBuilder{
        crate::operation::describe_image_replication_status::builders::DescribeImageReplicationStatusOutputBuilder::default()
    }
}

/// A builder for [`DescribeImageReplicationStatusOutput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeImageReplicationStatusOutputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<crate::types::ImageIdentifier>,
    pub(crate) replication_statuses:
        std::option::Option<std::vec::Vec<crate::types::ImageReplicationStatus>>,
    _request_id: Option<String>,
}
impl DescribeImageReplicationStatusOutputBuilder {
    /// <p>The repository name associated with the request.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The repository name associated with the request.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn image_id(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.image_id = Some(input);
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn set_image_id(
        mut self,
        input: std::option::Option<crate::types::ImageIdentifier>,
    ) -> Self {
        self.image_id = input;
        self
    }
    /// Appends an item to `replication_statuses`.
    ///
    /// To override the contents of this collection use [`set_replication_statuses`](Self::set_replication_statuses).
    ///
    /// <p>The replication status details for the images in the specified repository.</p>
    pub fn replication_statuses(mut self, input: crate::types::ImageReplicationStatus) -> Self {
        let mut v = self.replication_statuses.unwrap_or_default();
        v.push(input);
        self.replication_statuses = Some(v);
        self
    }
    /// <p>The replication status details for the images in the specified repository.</p>
    pub fn set_replication_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImageReplicationStatus>>,
    ) -> Self {
        self.replication_statuses = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeImageReplicationStatusOutput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_image_replication_status::DescribeImageReplicationStatusOutput
    {
        crate::operation::describe_image_replication_status::DescribeImageReplicationStatusOutput {
            repository_name: self.repository_name,
            image_id: self.image_id,
            replication_statuses: self.replication_statuses,
            _request_id: self._request_id,
        }
    }
}
