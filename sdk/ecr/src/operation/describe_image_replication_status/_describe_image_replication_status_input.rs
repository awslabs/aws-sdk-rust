// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImageReplicationStatusInput {
    /// <p>The name of the repository that the image is in.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<crate::types::ImageIdentifier>,
    /// <p>The Amazon Web Services account ID associated with the registry. If you do not specify a registry, the default registry is assumed.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
}
impl DescribeImageReplicationStatusInput {
    /// <p>The name of the repository that the image is in.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn image_id(&self) -> std::option::Option<&crate::types::ImageIdentifier> {
        self.image_id.as_ref()
    }
    /// <p>The Amazon Web Services account ID associated with the registry. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
}
impl DescribeImageReplicationStatusInput {
    /// Creates a new builder-style object to manufacture [`DescribeImageReplicationStatusInput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusInput).
    pub fn builder() -> crate::operation::describe_image_replication_status::builders::DescribeImageReplicationStatusInputBuilder{
        crate::operation::describe_image_replication_status::builders::DescribeImageReplicationStatusInputBuilder::default()
    }
}

/// A builder for [`DescribeImageReplicationStatusInput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeImageReplicationStatusInputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<crate::types::ImageIdentifier>,
    pub(crate) registry_id: std::option::Option<std::string::String>,
}
impl DescribeImageReplicationStatusInputBuilder {
    /// <p>The name of the repository that the image is in.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository that the image is in.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn image_id(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.image_id = Some(input);
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn set_image_id(
        mut self,
        input: std::option::Option<crate::types::ImageIdentifier>,
    ) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeImageReplicationStatusInput`](crate::operation::describe_image_replication_status::DescribeImageReplicationStatusInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_image_replication_status::DescribeImageReplicationStatusInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_image_replication_status::DescribeImageReplicationStatusInput {
                repository_name: self.repository_name
                ,
                image_id: self.image_id
                ,
                registry_id: self.registry_id
                ,
            }
        )
    }
}
