// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::validate_pull_through_cache_rule::_validate_pull_through_cache_rule_output::ValidatePullThroughCacheRuleOutputBuilder;

pub use crate::operation::validate_pull_through_cache_rule::_validate_pull_through_cache_rule_input::ValidatePullThroughCacheRuleInputBuilder;

impl crate::operation::validate_pull_through_cache_rule::builders::ValidatePullThroughCacheRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.validate_pull_through_cache_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ValidatePullThroughCacheRule`.
///
/// <p>Validates an existing pull through cache rule for an upstream registry that requires authentication. This will retrieve the contents of the Amazon Web Services Secrets Manager secret, verify the syntax, and then validate that authentication to the upstream registry is successful.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ValidatePullThroughCacheRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::validate_pull_through_cache_rule::builders::ValidatePullThroughCacheRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput,
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleError,
    > for ValidatePullThroughCacheRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput,
            crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ValidatePullThroughCacheRuleFluentBuilder {
    /// Creates a new `ValidatePullThroughCacheRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ValidatePullThroughCacheRule as a reference.
    pub fn as_input(&self) -> &crate::operation::validate_pull_through_cache_rule::builders::ValidatePullThroughCacheRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput,
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The repository name prefix associated with the pull through cache rule.</p>
    pub fn ecr_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ecr_repository_prefix(input.into());
        self
    }
    /// <p>The repository name prefix associated with the pull through cache rule.</p>
    pub fn set_ecr_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ecr_repository_prefix(input);
        self
    }
    /// <p>The repository name prefix associated with the pull through cache rule.</p>
    pub fn get_ecr_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ecr_repository_prefix()
    }
    /// <p>The registry ID associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.registry_id(input.into());
        self
    }
    /// <p>The registry ID associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_registry_id(input);
        self
    }
    /// <p>The registry ID associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_registry_id()
    }
}
