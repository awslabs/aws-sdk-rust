// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDownloadUrlForLayerInput {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the repository that is associated with the image layer to download.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The digest of the image layer to download.</p>
    pub layer_digest: ::std::option::Option<::std::string::String>,
}
impl GetDownloadUrlForLayerInput {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository that is associated with the image layer to download.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The digest of the image layer to download.</p>
    pub fn layer_digest(&self) -> ::std::option::Option<&str> {
        self.layer_digest.as_deref()
    }
}
impl GetDownloadUrlForLayerInput {
    /// Creates a new builder-style object to manufacture [`GetDownloadUrlForLayerInput`](crate::operation::get_download_url_for_layer::GetDownloadUrlForLayerInput).
    pub fn builder() -> crate::operation::get_download_url_for_layer::builders::GetDownloadUrlForLayerInputBuilder {
        crate::operation::get_download_url_for_layer::builders::GetDownloadUrlForLayerInputBuilder::default()
    }
}

/// A builder for [`GetDownloadUrlForLayerInput`](crate::operation::get_download_url_for_layer::GetDownloadUrlForLayerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDownloadUrlForLayerInputBuilder {
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) layer_digest: ::std::option::Option<::std::string::String>,
}
impl GetDownloadUrlForLayerInputBuilder {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The name of the repository that is associated with the image layer to download.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository that is associated with the image layer to download.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository that is associated with the image layer to download.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The digest of the image layer to download.</p>
    /// This field is required.
    pub fn layer_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The digest of the image layer to download.</p>
    pub fn set_layer_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_digest = input;
        self
    }
    /// <p>The digest of the image layer to download.</p>
    pub fn get_layer_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_digest
    }
    /// Consumes the builder and constructs a [`GetDownloadUrlForLayerInput`](crate::operation::get_download_url_for_layer::GetDownloadUrlForLayerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_download_url_for_layer::GetDownloadUrlForLayerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_download_url_for_layer::GetDownloadUrlForLayerInput {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            layer_digest: self.layer_digest,
        })
    }
}
