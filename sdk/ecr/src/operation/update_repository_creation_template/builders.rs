// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_repository_creation_template::_update_repository_creation_template_output::UpdateRepositoryCreationTemplateOutputBuilder;

pub use crate::operation::update_repository_creation_template::_update_repository_creation_template_input::UpdateRepositoryCreationTemplateInputBuilder;

impl crate::operation::update_repository_creation_template::builders::UpdateRepositoryCreationTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_repository_creation_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRepositoryCreationTemplate`.
///
/// <p>Updates an existing repository creation template.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRepositoryCreationTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_repository_creation_template::builders::UpdateRepositoryCreationTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateOutput,
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateError,
    > for UpdateRepositoryCreationTemplateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateOutput,
            crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateRepositoryCreationTemplateFluentBuilder {
    /// Creates a new `UpdateRepositoryCreationTemplateFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRepositoryCreationTemplate as a reference.
    pub fn as_input(&self) -> &crate::operation::update_repository_creation_template::builders::UpdateRepositoryCreationTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateOutput,
        crate::operation::update_repository_creation_template::UpdateRepositoryCreationTemplateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The repository namespace prefix that matches an existing repository creation template in the registry. All repositories created using this namespace prefix will have the settings defined in this template applied. For example, a prefix of <code>prod</code> would apply to all repositories beginning with <code>prod/</code>. This includes a repository named <code>prod/team1</code> as well as a repository named <code>prod/repository1</code>.</p>
    /// <p>To apply a template to all repositories in your registry that don't have an associated creation template, you can use <code>ROOT</code> as the prefix.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.prefix(input.into());
        self
    }
    /// <p>The repository namespace prefix that matches an existing repository creation template in the registry. All repositories created using this namespace prefix will have the settings defined in this template applied. For example, a prefix of <code>prod</code> would apply to all repositories beginning with <code>prod/</code>. This includes a repository named <code>prod/team1</code> as well as a repository named <code>prod/repository1</code>.</p>
    /// <p>To apply a template to all repositories in your registry that don't have an associated creation template, you can use <code>ROOT</code> as the prefix.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_prefix(input);
        self
    }
    /// <p>The repository namespace prefix that matches an existing repository creation template in the registry. All repositories created using this namespace prefix will have the settings defined in this template applied. For example, a prefix of <code>prod</code> would apply to all repositories beginning with <code>prod/</code>. This includes a repository named <code>prod/team1</code> as well as a repository named <code>prod/repository1</code>.</p>
    /// <p>To apply a template to all repositories in your registry that don't have an associated creation template, you can use <code>ROOT</code> as the prefix.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_prefix()
    }
    /// <p>A description for the repository creation template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the repository creation template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description for the repository creation template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The encryption configuration to associate with the repository creation template.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfigurationForRepositoryCreationTemplate) -> Self {
        self.inner = self.inner.encryption_configuration(input);
        self
    }
    /// <p>The encryption configuration to associate with the repository creation template.</p>
    pub fn set_encryption_configuration(
        mut self,
        input: ::std::option::Option<crate::types::EncryptionConfigurationForRepositoryCreationTemplate>,
    ) -> Self {
        self.inner = self.inner.set_encryption_configuration(input);
        self
    }
    /// <p>The encryption configuration to associate with the repository creation template.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfigurationForRepositoryCreationTemplate> {
        self.inner.get_encryption_configuration()
    }
    ///
    /// Appends an item to `resourceTags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>The metadata to apply to the repository to help you categorize and organize. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn resource_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.resource_tags(input);
        self
    }
    /// <p>The metadata to apply to the repository to help you categorize and organize. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_resource_tags(input);
        self
    }
    /// <p>The metadata to apply to the repository to help you categorize and organize. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_resource_tags()
    }
    /// <p>Updates the tag mutability setting for the repository. If this parameter is omitted, the default setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.</p>
    pub fn image_tag_mutability(mut self, input: crate::types::ImageTagMutability) -> Self {
        self.inner = self.inner.image_tag_mutability(input);
        self
    }
    /// <p>Updates the tag mutability setting for the repository. If this parameter is omitted, the default setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.</p>
    pub fn set_image_tag_mutability(mut self, input: ::std::option::Option<crate::types::ImageTagMutability>) -> Self {
        self.inner = self.inner.set_image_tag_mutability(input);
        self
    }
    /// <p>Updates the tag mutability setting for the repository. If this parameter is omitted, the default setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten. If <code>IMMUTABLE</code> is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.</p>
    pub fn get_image_tag_mutability(&self) -> &::std::option::Option<crate::types::ImageTagMutability> {
        self.inner.get_image_tag_mutability()
    }
    ///
    /// Appends an item to `imageTagMutabilityExclusionFilters`.
    ///
    /// To override the contents of this collection use [`set_image_tag_mutability_exclusion_filters`](Self::set_image_tag_mutability_exclusion_filters).
    ///
    /// <p>Updates a repository with filters that define which image tags can override the default image tag mutability setting.</p>
    pub fn image_tag_mutability_exclusion_filters(mut self, input: crate::types::ImageTagMutabilityExclusionFilter) -> Self {
        self.inner = self.inner.image_tag_mutability_exclusion_filters(input);
        self
    }
    /// <p>Updates a repository with filters that define which image tags can override the default image tag mutability setting.</p>
    pub fn set_image_tag_mutability_exclusion_filters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ImageTagMutabilityExclusionFilter>>,
    ) -> Self {
        self.inner = self.inner.set_image_tag_mutability_exclusion_filters(input);
        self
    }
    /// <p>Updates a repository with filters that define which image tags can override the default image tag mutability setting.</p>
    pub fn get_image_tag_mutability_exclusion_filters(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageTagMutabilityExclusionFilter>> {
        self.inner.get_image_tag_mutability_exclusion_filters()
    }
    /// <p>Updates the repository policy created using the template. A repository policy is a permissions policy associated with a repository to control access permissions.</p>
    pub fn repository_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.repository_policy(input.into());
        self
    }
    /// <p>Updates the repository policy created using the template. A repository policy is a permissions policy associated with a repository to control access permissions.</p>
    pub fn set_repository_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_repository_policy(input);
        self
    }
    /// <p>Updates the repository policy created using the template. A repository policy is a permissions policy associated with a repository to control access permissions.</p>
    pub fn get_repository_policy(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_repository_policy()
    }
    /// <p>Updates the lifecycle policy associated with the specified repository creation template.</p>
    pub fn lifecycle_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_policy(input.into());
        self
    }
    /// <p>Updates the lifecycle policy associated with the specified repository creation template.</p>
    pub fn set_lifecycle_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lifecycle_policy(input);
        self
    }
    /// <p>Updates the lifecycle policy associated with the specified repository creation template.</p>
    pub fn get_lifecycle_policy(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lifecycle_policy()
    }
    ///
    /// Appends an item to `appliedFor`.
    ///
    /// To override the contents of this collection use [`set_applied_for`](Self::set_applied_for).
    ///
    /// <p>Updates the list of enumerable strings representing the Amazon ECR repository creation scenarios that this template will apply towards. The two supported scenarios are <code>PULL_THROUGH_CACHE</code> and <code>REPLICATION</code></p>
    pub fn applied_for(mut self, input: crate::types::RctAppliedFor) -> Self {
        self.inner = self.inner.applied_for(input);
        self
    }
    /// <p>Updates the list of enumerable strings representing the Amazon ECR repository creation scenarios that this template will apply towards. The two supported scenarios are <code>PULL_THROUGH_CACHE</code> and <code>REPLICATION</code></p>
    pub fn set_applied_for(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RctAppliedFor>>) -> Self {
        self.inner = self.inner.set_applied_for(input);
        self
    }
    /// <p>Updates the list of enumerable strings representing the Amazon ECR repository creation scenarios that this template will apply towards. The two supported scenarios are <code>PULL_THROUGH_CACHE</code> and <code>REPLICATION</code></p>
    pub fn get_applied_for(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RctAppliedFor>> {
        self.inner.get_applied_for()
    }
    /// <p>The ARN of the role to be assumed by Amazon ECR. This role must be in the same account as the registry that you are configuring. Amazon ECR will assume your supplied role when the customRoleArn is specified. When this field isn't specified, Amazon ECR will use the service-linked role for the repository creation template.</p>
    pub fn custom_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_role_arn(input.into());
        self
    }
    /// <p>The ARN of the role to be assumed by Amazon ECR. This role must be in the same account as the registry that you are configuring. Amazon ECR will assume your supplied role when the customRoleArn is specified. When this field isn't specified, Amazon ECR will use the service-linked role for the repository creation template.</p>
    pub fn set_custom_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_role_arn(input);
        self
    }
    /// <p>The ARN of the role to be assumed by Amazon ECR. This role must be in the same account as the registry that you are configuring. Amazon ECR will assume your supplied role when the customRoleArn is specified. When this field isn't specified, Amazon ECR will use the service-linked role for the repository creation template.</p>
    pub fn get_custom_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_role_arn()
    }
}
