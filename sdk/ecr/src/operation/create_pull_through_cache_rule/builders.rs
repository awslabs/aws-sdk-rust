// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_pull_through_cache_rule::_create_pull_through_cache_rule_output::CreatePullThroughCacheRuleOutputBuilder;

pub use crate::operation::create_pull_through_cache_rule::_create_pull_through_cache_rule_input::CreatePullThroughCacheRuleInputBuilder;

impl crate::operation::create_pull_through_cache_rule::builders::CreatePullThroughCacheRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_pull_through_cache_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreatePullThroughCacheRule`.
///
/// <p>Creates a pull through cache rule. A pull through cache rule provides a way to cache images from an upstream registry source in your Amazon ECR private registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreatePullThroughCacheRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_pull_through_cache_rule::builders::CreatePullThroughCacheRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleOutput,
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleError,
    > for CreatePullThroughCacheRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleOutput,
            crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreatePullThroughCacheRuleFluentBuilder {
    /// Creates a new `CreatePullThroughCacheRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreatePullThroughCacheRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_pull_through_cache_rule::builders::CreatePullThroughCacheRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleOutput,
        crate::operation::create_pull_through_cache_rule::CreatePullThroughCacheRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn ecr_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ecr_repository_prefix(input.into());
        self
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn set_ecr_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ecr_repository_prefix(input);
        self
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn get_ecr_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ecr_repository_prefix()
    }
    /// <p>The registry URL of the upstream public registry to use as the source for the pull through cache rule. The following is the syntax to use for each supported upstream registry.</p>
    /// <ul>
    /// <li>
    /// <p>Amazon ECR Public (<code>ecr-public</code>) - <code>public.ecr.aws</code></p></li>
    /// <li>
    /// <p>Docker Hub (<code>docker-hub</code>) - <code>registry-1.docker.io</code></p></li>
    /// <li>
    /// <p>Quay (<code>quay</code>) - <code>quay.io</code></p></li>
    /// <li>
    /// <p>Kubernetes (<code>k8s</code>) - <code>registry.k8s.io</code></p></li>
    /// <li>
    /// <p>GitHub Container Registry (<code>github-container-registry</code>) - <code>ghcr.io</code></p></li>
    /// <li>
    /// <p>Microsoft Azure Container Registry (<code>azure-container-registry</code>) - <code><custom>
    /// .azurecr.io
    /// </custom></code></p></li>
    /// </ul>
    pub fn upstream_registry_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.upstream_registry_url(input.into());
        self
    }
    /// <p>The registry URL of the upstream public registry to use as the source for the pull through cache rule. The following is the syntax to use for each supported upstream registry.</p>
    /// <ul>
    /// <li>
    /// <p>Amazon ECR Public (<code>ecr-public</code>) - <code>public.ecr.aws</code></p></li>
    /// <li>
    /// <p>Docker Hub (<code>docker-hub</code>) - <code>registry-1.docker.io</code></p></li>
    /// <li>
    /// <p>Quay (<code>quay</code>) - <code>quay.io</code></p></li>
    /// <li>
    /// <p>Kubernetes (<code>k8s</code>) - <code>registry.k8s.io</code></p></li>
    /// <li>
    /// <p>GitHub Container Registry (<code>github-container-registry</code>) - <code>ghcr.io</code></p></li>
    /// <li>
    /// <p>Microsoft Azure Container Registry (<code>azure-container-registry</code>) - <code><custom>
    /// .azurecr.io
    /// </custom></code></p></li>
    /// </ul>
    pub fn set_upstream_registry_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_upstream_registry_url(input);
        self
    }
    /// <p>The registry URL of the upstream public registry to use as the source for the pull through cache rule. The following is the syntax to use for each supported upstream registry.</p>
    /// <ul>
    /// <li>
    /// <p>Amazon ECR Public (<code>ecr-public</code>) - <code>public.ecr.aws</code></p></li>
    /// <li>
    /// <p>Docker Hub (<code>docker-hub</code>) - <code>registry-1.docker.io</code></p></li>
    /// <li>
    /// <p>Quay (<code>quay</code>) - <code>quay.io</code></p></li>
    /// <li>
    /// <p>Kubernetes (<code>k8s</code>) - <code>registry.k8s.io</code></p></li>
    /// <li>
    /// <p>GitHub Container Registry (<code>github-container-registry</code>) - <code>ghcr.io</code></p></li>
    /// <li>
    /// <p>Microsoft Azure Container Registry (<code>azure-container-registry</code>) - <code><custom>
    /// .azurecr.io
    /// </custom></code></p></li>
    /// </ul>
    pub fn get_upstream_registry_url(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_upstream_registry_url()
    }
    /// <p>The Amazon Web Services account ID associated with the registry to create the pull through cache rule for. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.registry_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to create the pull through cache rule for. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_registry_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to create the pull through cache rule for. If you do not specify a registry, the default registry is assumed.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_registry_id()
    }
    /// <p>The name of the upstream registry.</p>
    pub fn upstream_registry(mut self, input: crate::types::UpstreamRegistry) -> Self {
        self.inner = self.inner.upstream_registry(input);
        self
    }
    /// <p>The name of the upstream registry.</p>
    pub fn set_upstream_registry(mut self, input: ::std::option::Option<crate::types::UpstreamRegistry>) -> Self {
        self.inner = self.inner.set_upstream_registry(input);
        self
    }
    /// <p>The name of the upstream registry.</p>
    pub fn get_upstream_registry(&self) -> &::std::option::Option<crate::types::UpstreamRegistry> {
        self.inner.get_upstream_registry()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.credential_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn set_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_credential_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn get_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_credential_arn()
    }
}
