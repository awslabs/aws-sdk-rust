// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartImageScanInput {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the repository that contains the images to scan.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub image_id: ::std::option::Option<crate::types::ImageIdentifier>,
}
impl StartImageScanInput {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository that contains the images to scan.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn image_id(&self) -> ::std::option::Option<&crate::types::ImageIdentifier> {
        self.image_id.as_ref()
    }
}
impl StartImageScanInput {
    /// Creates a new builder-style object to manufacture [`StartImageScanInput`](crate::operation::start_image_scan::StartImageScanInput).
    pub fn builder() -> crate::operation::start_image_scan::builders::StartImageScanInputBuilder {
        crate::operation::start_image_scan::builders::StartImageScanInputBuilder::default()
    }
}

/// A builder for [`StartImageScanInput`](crate::operation::start_image_scan::StartImageScanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartImageScanInputBuilder {
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) image_id: ::std::option::Option<crate::types::ImageIdentifier>,
}
impl StartImageScanInputBuilder {
    /// <p>The Amazon Web Services account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The name of the repository that contains the images to scan.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository that contains the images to scan.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository that contains the images to scan.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    /// This field is required.
    pub fn image_id(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.image_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<crate::types::ImageIdentifier>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>An object with identifying information for an image in an Amazon ECR repository.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<crate::types::ImageIdentifier> {
        &self.image_id
    }
    /// Consumes the builder and constructs a [`StartImageScanInput`](crate::operation::start_image_scan::StartImageScanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_image_scan::StartImageScanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_image_scan::StartImageScanInput {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            image_id: self.image_id,
        })
    }
}
