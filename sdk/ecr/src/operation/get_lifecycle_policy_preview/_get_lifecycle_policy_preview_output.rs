// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLifecyclePolicyPreviewOutput {
    /// <p>The registry ID associated with the request.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
    /// <p>The repository name associated with the request.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The JSON lifecycle policy text.</p>
    #[doc(hidden)]
    pub lifecycle_policy_text: std::option::Option<std::string::String>,
    /// <p>The status of the lifecycle policy preview request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LifecyclePolicyPreviewStatus>,
    /// <p>The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The results of the lifecycle policy preview request.</p>
    #[doc(hidden)]
    pub preview_results:
        std::option::Option<std::vec::Vec<crate::types::LifecyclePolicyPreviewResult>>,
    /// <p>The list of images that is returned as a result of the action.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<crate::types::LifecyclePolicyPreviewSummary>,
    _request_id: Option<String>,
}
impl GetLifecyclePolicyPreviewOutput {
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The repository name associated with the request.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The JSON lifecycle policy text.</p>
    pub fn lifecycle_policy_text(&self) -> std::option::Option<&str> {
        self.lifecycle_policy_text.as_deref()
    }
    /// <p>The status of the lifecycle policy preview request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::LifecyclePolicyPreviewStatus> {
        self.status.as_ref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The results of the lifecycle policy preview request.</p>
    pub fn preview_results(
        &self,
    ) -> std::option::Option<&[crate::types::LifecyclePolicyPreviewResult]> {
        self.preview_results.as_deref()
    }
    /// <p>The list of images that is returned as a result of the action.</p>
    pub fn summary(&self) -> std::option::Option<&crate::types::LifecyclePolicyPreviewSummary> {
        self.summary.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLifecyclePolicyPreviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLifecyclePolicyPreviewOutput {
    /// Creates a new builder-style object to manufacture [`GetLifecyclePolicyPreviewOutput`](crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput).
    pub fn builder() -> crate::operation::get_lifecycle_policy_preview::builders::GetLifecyclePolicyPreviewOutputBuilder{
        crate::operation::get_lifecycle_policy_preview::builders::GetLifecyclePolicyPreviewOutputBuilder::default()
    }
}

/// A builder for [`GetLifecyclePolicyPreviewOutput`](crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetLifecyclePolicyPreviewOutputBuilder {
    pub(crate) registry_id: std::option::Option<std::string::String>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) lifecycle_policy_text: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::LifecyclePolicyPreviewStatus>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) preview_results:
        std::option::Option<std::vec::Vec<crate::types::LifecyclePolicyPreviewResult>>,
    pub(crate) summary: std::option::Option<crate::types::LifecyclePolicyPreviewSummary>,
    _request_id: Option<String>,
}
impl GetLifecyclePolicyPreviewOutputBuilder {
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The repository name associated with the request.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The repository name associated with the request.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The JSON lifecycle policy text.</p>
    pub fn lifecycle_policy_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_policy_text = Some(input.into());
        self
    }
    /// <p>The JSON lifecycle policy text.</p>
    pub fn set_lifecycle_policy_text(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_policy_text = input;
        self
    }
    /// <p>The status of the lifecycle policy preview request.</p>
    pub fn status(mut self, input: crate::types::LifecyclePolicyPreviewStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the lifecycle policy preview request.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::LifecyclePolicyPreviewStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `preview_results`.
    ///
    /// To override the contents of this collection use [`set_preview_results`](Self::set_preview_results).
    ///
    /// <p>The results of the lifecycle policy preview request.</p>
    pub fn preview_results(mut self, input: crate::types::LifecyclePolicyPreviewResult) -> Self {
        let mut v = self.preview_results.unwrap_or_default();
        v.push(input);
        self.preview_results = Some(v);
        self
    }
    /// <p>The results of the lifecycle policy preview request.</p>
    pub fn set_preview_results(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LifecyclePolicyPreviewResult>>,
    ) -> Self {
        self.preview_results = input;
        self
    }
    /// <p>The list of images that is returned as a result of the action.</p>
    pub fn summary(mut self, input: crate::types::LifecyclePolicyPreviewSummary) -> Self {
        self.summary = Some(input);
        self
    }
    /// <p>The list of images that is returned as a result of the action.</p>
    pub fn set_summary(
        mut self,
        input: std::option::Option<crate::types::LifecyclePolicyPreviewSummary>,
    ) -> Self {
        self.summary = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLifecyclePolicyPreviewOutput`](crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput {
        crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            lifecycle_policy_text: self.lifecycle_policy_text,
            status: self.status,
            next_token: self.next_token,
            preview_results: self.preview_results,
            summary: self.summary,
            _request_id: self._request_id,
        }
    }
}
