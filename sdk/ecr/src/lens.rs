// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_images_output_next_token(
    input: &crate::output::DescribeImagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_image_scan_findings_output_next_token(
    input: &crate::output::DescribeImageScanFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_pull_through_cache_rules_output_next_token(
    input: &crate::output::DescribePullThroughCacheRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_repositories_output_next_token(
    input: &crate::output::DescribeRepositoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_lifecycle_policy_preview_output_next_token(
    input: &crate::output::GetLifecyclePolicyPreviewOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_images_output_next_token(
    input: &crate::output::ListImagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_images_output_image_details(
    input: crate::output::DescribeImagesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ImageDetail>> {
    let input = match input.image_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_repositories_output_repositories(
    input: crate::output::DescribeRepositoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Repository>> {
    let input = match input.repositories {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_lifecycle_policy_preview_output_preview_results(
    input: crate::output::GetLifecyclePolicyPreviewOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LifecyclePolicyPreviewResult>> {
    let input = match input.preview_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_images_output_image_ids(
    input: crate::output::ListImagesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ImageIdentifier>> {
    let input = match input.image_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
