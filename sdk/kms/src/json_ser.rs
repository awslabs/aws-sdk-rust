// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_cancel_key_deletion_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelKeyDeletionInput,
) {
    if let Some(var_1) = &input.key_id {
        object.key("KeyId").string(var_1);
    }
}

pub fn serialize_structure_connect_custom_key_store_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConnectCustomKeyStoreInput,
) {
    if let Some(var_2) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_2);
    }
}

pub fn serialize_structure_create_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) {
    if let Some(var_3) = &input.alias_name {
        object.key("AliasName").string(var_3);
    }
    if let Some(var_4) = &input.target_key_id {
        object.key("TargetKeyId").string(var_4);
    }
}

pub fn serialize_structure_create_custom_key_store_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomKeyStoreInput,
) {
    if let Some(var_5) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_5);
    }
    if let Some(var_6) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_6);
    }
    if let Some(var_7) = &input.trust_anchor_certificate {
        object.key("TrustAnchorCertificate").string(var_7);
    }
    if let Some(var_8) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_8);
    }
}

pub fn serialize_structure_create_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGrantInput,
) {
    if let Some(var_9) = &input.key_id {
        object.key("KeyId").string(var_9);
    }
    if let Some(var_10) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_10);
    }
    if let Some(var_11) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_11);
    }
    if let Some(var_12) = &input.operations {
        let mut array_13 = object.key("Operations").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.constraints {
        let mut object_16 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_grant_constraints(&mut object_16, var_15);
        object_16.finish();
    }
    if let Some(var_17) = &input.grant_tokens {
        let mut array_18 = object.key("GrantTokens").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19);
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20);
    }
}

pub fn serialize_structure_create_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateKeyInput,
) {
    if let Some(var_21) = &input.policy {
        object.key("Policy").string(var_21);
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22);
    }
    if let Some(var_23) = &input.key_usage {
        object.key("KeyUsage").string(var_23.as_str());
    }
    if let Some(var_24) = &input.customer_master_key_spec {
        object.key("CustomerMasterKeySpec").string(var_24.as_str());
    }
    if let Some(var_25) = &input.origin {
        object.key("Origin").string(var_25.as_str());
    }
    if let Some(var_26) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_26);
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_30, item_29);
                object_30.finish();
            }
        }
        array_28.finish();
    }
}

pub fn serialize_structure_decrypt_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DecryptInput,
) {
    if let Some(var_31) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&smithy_types::base64::encode(var_31));
    }
    if let Some(var_32) = &input.encryption_context {
        let mut object_33 = object.key("EncryptionContext").start_object();
        for (key_34, value_35) in var_32 {
            {
                object_33.key(key_34).string(value_35);
            }
        }
        object_33.finish();
    }
    if let Some(var_36) = &input.grant_tokens {
        let mut array_37 = object.key("GrantTokens").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.key_id {
        object.key("KeyId").string(var_39);
    }
    if let Some(var_40) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_40.as_str());
    }
}

pub fn serialize_structure_delete_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAliasInput,
) {
    if let Some(var_41) = &input.alias_name {
        object.key("AliasName").string(var_41);
    }
}

pub fn serialize_structure_delete_custom_key_store_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomKeyStoreInput,
) {
    if let Some(var_42) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_42);
    }
}

pub fn serialize_structure_delete_imported_key_material_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImportedKeyMaterialInput,
) {
    if let Some(var_43) = &input.key_id {
        object.key("KeyId").string(var_43);
    }
}

pub fn serialize_structure_describe_custom_key_stores_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCustomKeyStoresInput,
) {
    if let Some(var_44) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_44);
    }
    if let Some(var_45) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_45);
    }
    if let Some(var_46) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_46).into()),
        );
    }
    if let Some(var_47) = &input.marker {
        object.key("Marker").string(var_47);
    }
}

pub fn serialize_structure_describe_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeyInput,
) {
    if let Some(var_48) = &input.key_id {
        object.key("KeyId").string(var_48);
    }
    if let Some(var_49) = &input.grant_tokens {
        let mut array_50 = object.key("GrantTokens").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51);
            }
        }
        array_50.finish();
    }
}

pub fn serialize_structure_disable_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyInput,
) {
    if let Some(var_52) = &input.key_id {
        object.key("KeyId").string(var_52);
    }
}

pub fn serialize_structure_disable_key_rotation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyRotationInput,
) {
    if let Some(var_53) = &input.key_id {
        object.key("KeyId").string(var_53);
    }
}

pub fn serialize_structure_disconnect_custom_key_store_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectCustomKeyStoreInput,
) {
    if let Some(var_54) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_54);
    }
}

pub fn serialize_structure_enable_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyInput,
) {
    if let Some(var_55) = &input.key_id {
        object.key("KeyId").string(var_55);
    }
}

pub fn serialize_structure_enable_key_rotation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyRotationInput,
) {
    if let Some(var_56) = &input.key_id {
        object.key("KeyId").string(var_56);
    }
}

pub fn serialize_structure_encrypt_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EncryptInput,
) {
    if let Some(var_57) = &input.key_id {
        object.key("KeyId").string(var_57);
    }
    if let Some(var_58) = &input.plaintext {
        object
            .key("Plaintext")
            .string_unchecked(&smithy_types::base64::encode(var_58));
    }
    if let Some(var_59) = &input.encryption_context {
        let mut object_60 = object.key("EncryptionContext").start_object();
        for (key_61, value_62) in var_59 {
            {
                object_60.key(key_61).string(value_62);
            }
        }
        object_60.finish();
    }
    if let Some(var_63) = &input.grant_tokens {
        let mut array_64 = object.key("GrantTokens").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65);
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_66.as_str());
    }
}

pub fn serialize_structure_generate_data_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyInput,
) {
    if let Some(var_67) = &input.key_id {
        object.key("KeyId").string(var_67);
    }
    if let Some(var_68) = &input.encryption_context {
        let mut object_69 = object.key("EncryptionContext").start_object();
        for (key_70, value_71) in var_68 {
            {
                object_69.key(key_70).string(value_71);
            }
        }
        object_69.finish();
    }
    if let Some(var_72) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    if let Some(var_73) = &input.key_spec {
        object.key("KeySpec").string(var_73.as_str());
    }
    if let Some(var_74) = &input.grant_tokens {
        let mut array_75 = object.key("GrantTokens").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76);
            }
        }
        array_75.finish();
    }
}

pub fn serialize_structure_generate_data_key_pair_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairInput,
) {
    if let Some(var_77) = &input.encryption_context {
        let mut object_78 = object.key("EncryptionContext").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
    if let Some(var_81) = &input.key_id {
        object.key("KeyId").string(var_81);
    }
    if let Some(var_82) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_82.as_str());
    }
    if let Some(var_83) = &input.grant_tokens {
        let mut array_84 = object.key("GrantTokens").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85);
            }
        }
        array_84.finish();
    }
}

pub fn serialize_structure_generate_data_key_pair_without_plaintext_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairWithoutPlaintextInput,
) {
    if let Some(var_86) = &input.encryption_context {
        let mut object_87 = object.key("EncryptionContext").start_object();
        for (key_88, value_89) in var_86 {
            {
                object_87.key(key_88).string(value_89);
            }
        }
        object_87.finish();
    }
    if let Some(var_90) = &input.key_id {
        object.key("KeyId").string(var_90);
    }
    if let Some(var_91) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_91.as_str());
    }
    if let Some(var_92) = &input.grant_tokens {
        let mut array_93 = object.key("GrantTokens").start_array();
        for item_94 in var_92 {
            {
                array_93.value().string(item_94);
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_generate_data_key_without_plaintext_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyWithoutPlaintextInput,
) {
    if let Some(var_95) = &input.key_id {
        object.key("KeyId").string(var_95);
    }
    if let Some(var_96) = &input.encryption_context {
        let mut object_97 = object.key("EncryptionContext").start_object();
        for (key_98, value_99) in var_96 {
            {
                object_97.key(key_98).string(value_99);
            }
        }
        object_97.finish();
    }
    if let Some(var_100) = &input.key_spec {
        object.key("KeySpec").string(var_100.as_str());
    }
    if let Some(var_101) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_101).into()),
        );
    }
    if let Some(var_102) = &input.grant_tokens {
        let mut array_103 = object.key("GrantTokens").start_array();
        for item_104 in var_102 {
            {
                array_103.value().string(item_104);
            }
        }
        array_103.finish();
    }
}

pub fn serialize_structure_generate_random_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateRandomInput,
) {
    if let Some(var_105) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    if let Some(var_106) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_106);
    }
}

pub fn serialize_structure_get_key_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPolicyInput,
) {
    if let Some(var_107) = &input.key_id {
        object.key("KeyId").string(var_107);
    }
    if let Some(var_108) = &input.policy_name {
        object.key("PolicyName").string(var_108);
    }
}

pub fn serialize_structure_get_key_rotation_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyRotationStatusInput,
) {
    if let Some(var_109) = &input.key_id {
        object.key("KeyId").string(var_109);
    }
}

pub fn serialize_structure_get_parameters_for_import_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersForImportInput,
) {
    if let Some(var_110) = &input.key_id {
        object.key("KeyId").string(var_110);
    }
    if let Some(var_111) = &input.wrapping_algorithm {
        object.key("WrappingAlgorithm").string(var_111.as_str());
    }
    if let Some(var_112) = &input.wrapping_key_spec {
        object.key("WrappingKeySpec").string(var_112.as_str());
    }
}

pub fn serialize_structure_get_public_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPublicKeyInput,
) {
    if let Some(var_113) = &input.key_id {
        object.key("KeyId").string(var_113);
    }
    if let Some(var_114) = &input.grant_tokens {
        let mut array_115 = object.key("GrantTokens").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116);
            }
        }
        array_115.finish();
    }
}

pub fn serialize_structure_import_key_material_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportKeyMaterialInput,
) {
    if let Some(var_117) = &input.key_id {
        object.key("KeyId").string(var_117);
    }
    if let Some(var_118) = &input.import_token {
        object
            .key("ImportToken")
            .string_unchecked(&smithy_types::base64::encode(var_118));
    }
    if let Some(var_119) = &input.encrypted_key_material {
        object
            .key("EncryptedKeyMaterial")
            .string_unchecked(&smithy_types::base64::encode(var_119));
    }
    if let Some(var_120) = &input.valid_to {
        object
            .key("ValidTo")
            .instant(var_120, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_121) = &input.expiration_model {
        object.key("ExpirationModel").string(var_121.as_str());
    }
}

pub fn serialize_structure_list_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAliasesInput,
) {
    if let Some(var_122) = &input.key_id {
        object.key("KeyId").string(var_122);
    }
    if let Some(var_123) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    if let Some(var_124) = &input.marker {
        object.key("Marker").string(var_124);
    }
}

pub fn serialize_structure_list_grants_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGrantsInput,
) {
    if let Some(var_125) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    if let Some(var_126) = &input.marker {
        object.key("Marker").string(var_126);
    }
    if let Some(var_127) = &input.key_id {
        object.key("KeyId").string(var_127);
    }
    if let Some(var_128) = &input.grant_id {
        object.key("GrantId").string(var_128);
    }
    if let Some(var_129) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_129);
    }
}

pub fn serialize_structure_list_key_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeyPoliciesInput,
) {
    if let Some(var_130) = &input.key_id {
        object.key("KeyId").string(var_130);
    }
    if let Some(var_131) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_131).into()),
        );
    }
    if let Some(var_132) = &input.marker {
        object.key("Marker").string(var_132);
    }
}

pub fn serialize_structure_list_keys_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeysInput,
) {
    if let Some(var_133) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.marker {
        object.key("Marker").string(var_134);
    }
}

pub fn serialize_structure_list_resource_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceTagsInput,
) {
    if let Some(var_135) = &input.key_id {
        object.key("KeyId").string(var_135);
    }
    if let Some(var_136) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.marker {
        object.key("Marker").string(var_137);
    }
}

pub fn serialize_structure_list_retirable_grants_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRetirableGrantsInput,
) {
    if let Some(var_138) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    if let Some(var_139) = &input.marker {
        object.key("Marker").string(var_139);
    }
    if let Some(var_140) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_140);
    }
}

pub fn serialize_structure_put_key_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutKeyPolicyInput,
) {
    if let Some(var_141) = &input.key_id {
        object.key("KeyId").string(var_141);
    }
    if let Some(var_142) = &input.policy_name {
        object.key("PolicyName").string(var_142);
    }
    if let Some(var_143) = &input.policy {
        object.key("Policy").string(var_143);
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
}

pub fn serialize_structure_re_encrypt_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReEncryptInput,
) {
    if let Some(var_144) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&smithy_types::base64::encode(var_144));
    }
    if let Some(var_145) = &input.source_encryption_context {
        let mut object_146 = object.key("SourceEncryptionContext").start_object();
        for (key_147, value_148) in var_145 {
            {
                object_146.key(key_147).string(value_148);
            }
        }
        object_146.finish();
    }
    if let Some(var_149) = &input.source_key_id {
        object.key("SourceKeyId").string(var_149);
    }
    if let Some(var_150) = &input.destination_key_id {
        object.key("DestinationKeyId").string(var_150);
    }
    if let Some(var_151) = &input.destination_encryption_context {
        let mut object_152 = object.key("DestinationEncryptionContext").start_object();
        for (key_153, value_154) in var_151 {
            {
                object_152.key(key_153).string(value_154);
            }
        }
        object_152.finish();
    }
    if let Some(var_155) = &input.source_encryption_algorithm {
        object
            .key("SourceEncryptionAlgorithm")
            .string(var_155.as_str());
    }
    if let Some(var_156) = &input.destination_encryption_algorithm {
        object
            .key("DestinationEncryptionAlgorithm")
            .string(var_156.as_str());
    }
    if let Some(var_157) = &input.grant_tokens {
        let mut array_158 = object.key("GrantTokens").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
}

pub fn serialize_structure_retire_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetireGrantInput,
) {
    if let Some(var_160) = &input.grant_token {
        object.key("GrantToken").string(var_160);
    }
    if let Some(var_161) = &input.key_id {
        object.key("KeyId").string(var_161);
    }
    if let Some(var_162) = &input.grant_id {
        object.key("GrantId").string(var_162);
    }
}

pub fn serialize_structure_revoke_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeGrantInput,
) {
    if let Some(var_163) = &input.key_id {
        object.key("KeyId").string(var_163);
    }
    if let Some(var_164) = &input.grant_id {
        object.key("GrantId").string(var_164);
    }
}

pub fn serialize_structure_schedule_key_deletion_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ScheduleKeyDeletionInput,
) {
    if let Some(var_165) = &input.key_id {
        object.key("KeyId").string(var_165);
    }
    if let Some(var_166) = &input.pending_window_in_days {
        object.key("PendingWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_166).into()),
        );
    }
}

pub fn serialize_structure_sign_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SignInput,
) {
    if let Some(var_167) = &input.key_id {
        object.key("KeyId").string(var_167);
    }
    if let Some(var_168) = &input.message {
        object
            .key("Message")
            .string_unchecked(&smithy_types::base64::encode(var_168));
    }
    if let Some(var_169) = &input.message_type {
        object.key("MessageType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.grant_tokens {
        let mut array_171 = object.key("GrantTokens").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172);
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_173.as_str());
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_174) = &input.key_id {
        object.key("KeyId").string(var_174);
    }
    if let Some(var_175) = &input.tags {
        let mut array_176 = object.key("Tags").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_178, item_177);
                object_178.finish();
            }
        }
        array_176.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_179) = &input.key_id {
        object.key("KeyId").string(var_179);
    }
    if let Some(var_180) = &input.tag_keys {
        let mut array_181 = object.key("TagKeys").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
}

pub fn serialize_structure_update_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAliasInput,
) {
    if let Some(var_183) = &input.alias_name {
        object.key("AliasName").string(var_183);
    }
    if let Some(var_184) = &input.target_key_id {
        object.key("TargetKeyId").string(var_184);
    }
}

pub fn serialize_structure_update_custom_key_store_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomKeyStoreInput,
) {
    if let Some(var_185) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_185);
    }
    if let Some(var_186) = &input.new_custom_key_store_name {
        object.key("NewCustomKeyStoreName").string(var_186);
    }
    if let Some(var_187) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_187);
    }
    if let Some(var_188) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_188);
    }
}

pub fn serialize_structure_update_key_description_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateKeyDescriptionInput,
) {
    if let Some(var_189) = &input.key_id {
        object.key("KeyId").string(var_189);
    }
    if let Some(var_190) = &input.description {
        object.key("Description").string(var_190);
    }
}

pub fn serialize_structure_verify_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyInput,
) {
    if let Some(var_191) = &input.key_id {
        object.key("KeyId").string(var_191);
    }
    if let Some(var_192) = &input.message {
        object
            .key("Message")
            .string_unchecked(&smithy_types::base64::encode(var_192));
    }
    if let Some(var_193) = &input.message_type {
        object.key("MessageType").string(var_193.as_str());
    }
    if let Some(var_194) = &input.signature {
        object
            .key("Signature")
            .string_unchecked(&smithy_types::base64::encode(var_194));
    }
    if let Some(var_195) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_195.as_str());
    }
    if let Some(var_196) = &input.grant_tokens {
        let mut array_197 = object.key("GrantTokens").start_array();
        for item_198 in var_196 {
            {
                array_197.value().string(item_198);
            }
        }
        array_197.finish();
    }
}

pub fn serialize_structure_grant_constraints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrantConstraints,
) {
    if let Some(var_199) = &input.encryption_context_subset {
        let mut object_200 = object.key("EncryptionContextSubset").start_object();
        for (key_201, value_202) in var_199 {
            {
                object_200.key(key_201).string(value_202);
            }
        }
        object_200.finish();
    }
    if let Some(var_203) = &input.encryption_context_equals {
        let mut object_204 = object.key("EncryptionContextEquals").start_object();
        for (key_205, value_206) in var_203 {
            {
                object_204.key(key_205).string(value_206);
            }
        }
        object_204.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_207) = &input.tag_key {
        object.key("TagKey").string(var_207);
    }
    if let Some(var_208) = &input.tag_value {
        object.key("TagValue").string(var_208);
    }
}
