// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_key_deletion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelKeyDeletionInput,
) {
    if let Some(var_1) = &input.key_id {
        object.key("KeyId").string(var_1);
    }
}

pub fn serialize_structure_crate_input_connect_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConnectCustomKeyStoreInput,
) {
    if let Some(var_2) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_2);
    }
}

pub fn serialize_structure_crate_input_create_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) {
    if let Some(var_3) = &input.alias_name {
        object.key("AliasName").string(var_3);
    }
    if let Some(var_4) = &input.target_key_id {
        object.key("TargetKeyId").string(var_4);
    }
}

pub fn serialize_structure_crate_input_create_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomKeyStoreInput,
) {
    if let Some(var_5) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_5);
    }
    if let Some(var_6) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_6);
    }
    if let Some(var_7) = &input.trust_anchor_certificate {
        object.key("TrustAnchorCertificate").string(var_7);
    }
    if let Some(var_8) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_8);
    }
}

pub fn serialize_structure_crate_input_create_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGrantInput,
) {
    if let Some(var_9) = &input.key_id {
        object.key("KeyId").string(var_9);
    }
    if let Some(var_10) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_10);
    }
    if let Some(var_11) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_11);
    }
    if let Some(var_12) = &input.operations {
        let mut array_13 = object.key("Operations").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.constraints {
        let mut object_16 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_grant_constraints(&mut object_16, var_15);
        object_16.finish();
    }
    if let Some(var_17) = &input.grant_tokens {
        let mut array_18 = object.key("GrantTokens").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19);
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20);
    }
}

pub fn serialize_structure_crate_input_create_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateKeyInput,
) {
    if let Some(var_21) = &input.policy {
        object.key("Policy").string(var_21);
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22);
    }
    if let Some(var_23) = &input.key_usage {
        object.key("KeyUsage").string(var_23.as_str());
    }
    if let Some(var_24) = &input.customer_master_key_spec {
        object.key("CustomerMasterKeySpec").string(var_24.as_str());
    }
    if let Some(var_25) = &input.key_spec {
        object.key("KeySpec").string(var_25.as_str());
    }
    if let Some(var_26) = &input.origin {
        object.key("Origin").string(var_26.as_str());
    }
    if let Some(var_27) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_27);
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30);
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.multi_region {
        object.key("MultiRegion").boolean(*var_32);
    }
}

pub fn serialize_structure_crate_input_decrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DecryptInput,
) {
    if let Some(var_33) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_33));
    }
    if let Some(var_34) = &input.encryption_context {
        let mut object_35 = object.key("EncryptionContext").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36).string(value_37);
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.grant_tokens {
        let mut array_39 = object.key("GrantTokens").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40);
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.key_id {
        object.key("KeyId").string(var_41);
    }
    if let Some(var_42) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_42.as_str());
    }
}

pub fn serialize_structure_crate_input_delete_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAliasInput,
) {
    if let Some(var_43) = &input.alias_name {
        object.key("AliasName").string(var_43);
    }
}

pub fn serialize_structure_crate_input_delete_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomKeyStoreInput,
) {
    if let Some(var_44) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_44);
    }
}

pub fn serialize_structure_crate_input_delete_imported_key_material_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImportedKeyMaterialInput,
) {
    if let Some(var_45) = &input.key_id {
        object.key("KeyId").string(var_45);
    }
}

pub fn serialize_structure_crate_input_describe_custom_key_stores_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCustomKeyStoresInput,
) {
    if let Some(var_46) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_46);
    }
    if let Some(var_47) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_47);
    }
    if let Some(var_48) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    if let Some(var_49) = &input.marker {
        object.key("Marker").string(var_49);
    }
}

pub fn serialize_structure_crate_input_describe_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeyInput,
) {
    if let Some(var_50) = &input.key_id {
        object.key("KeyId").string(var_50);
    }
    if let Some(var_51) = &input.grant_tokens {
        let mut array_52 = object.key("GrantTokens").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53);
            }
        }
        array_52.finish();
    }
}

pub fn serialize_structure_crate_input_disable_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyInput,
) {
    if let Some(var_54) = &input.key_id {
        object.key("KeyId").string(var_54);
    }
}

pub fn serialize_structure_crate_input_disable_key_rotation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKeyRotationInput,
) {
    if let Some(var_55) = &input.key_id {
        object.key("KeyId").string(var_55);
    }
}

pub fn serialize_structure_crate_input_disconnect_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectCustomKeyStoreInput,
) {
    if let Some(var_56) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_56);
    }
}

pub fn serialize_structure_crate_input_enable_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyInput,
) {
    if let Some(var_57) = &input.key_id {
        object.key("KeyId").string(var_57);
    }
}

pub fn serialize_structure_crate_input_enable_key_rotation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKeyRotationInput,
) {
    if let Some(var_58) = &input.key_id {
        object.key("KeyId").string(var_58);
    }
}

pub fn serialize_structure_crate_input_encrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EncryptInput,
) {
    if let Some(var_59) = &input.key_id {
        object.key("KeyId").string(var_59);
    }
    if let Some(var_60) = &input.plaintext {
        object
            .key("Plaintext")
            .string_unchecked(&aws_smithy_types::base64::encode(var_60));
    }
    if let Some(var_61) = &input.encryption_context {
        let mut object_62 = object.key("EncryptionContext").start_object();
        for (key_63, value_64) in var_61 {
            {
                object_62.key(key_63).string(value_64);
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.grant_tokens {
        let mut array_66 = object.key("GrantTokens").start_array();
        for item_67 in var_65 {
            {
                array_66.value().string(item_67);
            }
        }
        array_66.finish();
    }
    if let Some(var_68) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_68.as_str());
    }
}

pub fn serialize_structure_crate_input_generate_data_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyInput,
) {
    if let Some(var_69) = &input.key_id {
        object.key("KeyId").string(var_69);
    }
    if let Some(var_70) = &input.encryption_context {
        let mut object_71 = object.key("EncryptionContext").start_object();
        for (key_72, value_73) in var_70 {
            {
                object_71.key(key_72).string(value_73);
            }
        }
        object_71.finish();
    }
    if let Some(var_74) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.key_spec {
        object.key("KeySpec").string(var_75.as_str());
    }
    if let Some(var_76) = &input.grant_tokens {
        let mut array_77 = object.key("GrantTokens").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
}

pub fn serialize_structure_crate_input_generate_data_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairInput,
) {
    if let Some(var_79) = &input.encryption_context {
        let mut object_80 = object.key("EncryptionContext").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
    if let Some(var_83) = &input.key_id {
        object.key("KeyId").string(var_83);
    }
    if let Some(var_84) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_84.as_str());
    }
    if let Some(var_85) = &input.grant_tokens {
        let mut array_86 = object.key("GrantTokens").start_array();
        for item_87 in var_85 {
            {
                array_86.value().string(item_87);
            }
        }
        array_86.finish();
    }
}

pub fn serialize_structure_crate_input_generate_data_key_pair_without_plaintext_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyPairWithoutPlaintextInput,
) {
    if let Some(var_88) = &input.encryption_context {
        let mut object_89 = object.key("EncryptionContext").start_object();
        for (key_90, value_91) in var_88 {
            {
                object_89.key(key_90).string(value_91);
            }
        }
        object_89.finish();
    }
    if let Some(var_92) = &input.key_id {
        object.key("KeyId").string(var_92);
    }
    if let Some(var_93) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_93.as_str());
    }
    if let Some(var_94) = &input.grant_tokens {
        let mut array_95 = object.key("GrantTokens").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96);
            }
        }
        array_95.finish();
    }
}

pub fn serialize_structure_crate_input_generate_data_key_without_plaintext_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateDataKeyWithoutPlaintextInput,
) {
    if let Some(var_97) = &input.key_id {
        object.key("KeyId").string(var_97);
    }
    if let Some(var_98) = &input.encryption_context {
        let mut object_99 = object.key("EncryptionContext").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101);
            }
        }
        object_99.finish();
    }
    if let Some(var_102) = &input.key_spec {
        object.key("KeySpec").string(var_102.as_str());
    }
    if let Some(var_103) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_103).into()),
        );
    }
    if let Some(var_104) = &input.grant_tokens {
        let mut array_105 = object.key("GrantTokens").start_array();
        for item_106 in var_104 {
            {
                array_105.value().string(item_106);
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_crate_input_generate_random_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateRandomInput,
) {
    if let Some(var_107) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    if let Some(var_108) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_108);
    }
}

pub fn serialize_structure_crate_input_get_key_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPolicyInput,
) {
    if let Some(var_109) = &input.key_id {
        object.key("KeyId").string(var_109);
    }
    if let Some(var_110) = &input.policy_name {
        object.key("PolicyName").string(var_110);
    }
}

pub fn serialize_structure_crate_input_get_key_rotation_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyRotationStatusInput,
) {
    if let Some(var_111) = &input.key_id {
        object.key("KeyId").string(var_111);
    }
}

pub fn serialize_structure_crate_input_get_parameters_for_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersForImportInput,
) {
    if let Some(var_112) = &input.key_id {
        object.key("KeyId").string(var_112);
    }
    if let Some(var_113) = &input.wrapping_algorithm {
        object.key("WrappingAlgorithm").string(var_113.as_str());
    }
    if let Some(var_114) = &input.wrapping_key_spec {
        object.key("WrappingKeySpec").string(var_114.as_str());
    }
}

pub fn serialize_structure_crate_input_get_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPublicKeyInput,
) {
    if let Some(var_115) = &input.key_id {
        object.key("KeyId").string(var_115);
    }
    if let Some(var_116) = &input.grant_tokens {
        let mut array_117 = object.key("GrantTokens").start_array();
        for item_118 in var_116 {
            {
                array_117.value().string(item_118);
            }
        }
        array_117.finish();
    }
}

pub fn serialize_structure_crate_input_import_key_material_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportKeyMaterialInput,
) {
    if let Some(var_119) = &input.key_id {
        object.key("KeyId").string(var_119);
    }
    if let Some(var_120) = &input.import_token {
        object
            .key("ImportToken")
            .string_unchecked(&aws_smithy_types::base64::encode(var_120));
    }
    if let Some(var_121) = &input.encrypted_key_material {
        object
            .key("EncryptedKeyMaterial")
            .string_unchecked(&aws_smithy_types::base64::encode(var_121));
    }
    if let Some(var_122) = &input.valid_to {
        object
            .key("ValidTo")
            .instant(var_122, aws_smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_123) = &input.expiration_model {
        object.key("ExpirationModel").string(var_123.as_str());
    }
}

pub fn serialize_structure_crate_input_list_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAliasesInput,
) {
    if let Some(var_124) = &input.key_id {
        object.key("KeyId").string(var_124);
    }
    if let Some(var_125) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    if let Some(var_126) = &input.marker {
        object.key("Marker").string(var_126);
    }
}

pub fn serialize_structure_crate_input_list_grants_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGrantsInput,
) {
    if let Some(var_127) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    if let Some(var_128) = &input.marker {
        object.key("Marker").string(var_128);
    }
    if let Some(var_129) = &input.key_id {
        object.key("KeyId").string(var_129);
    }
    if let Some(var_130) = &input.grant_id {
        object.key("GrantId").string(var_130);
    }
    if let Some(var_131) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_131);
    }
}

pub fn serialize_structure_crate_input_list_key_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeyPoliciesInput,
) {
    if let Some(var_132) = &input.key_id {
        object.key("KeyId").string(var_132);
    }
    if let Some(var_133) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.marker {
        object.key("Marker").string(var_134);
    }
}

pub fn serialize_structure_crate_input_list_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeysInput,
) {
    if let Some(var_135) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    if let Some(var_136) = &input.marker {
        object.key("Marker").string(var_136);
    }
}

pub fn serialize_structure_crate_input_list_resource_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceTagsInput,
) {
    if let Some(var_137) = &input.key_id {
        object.key("KeyId").string(var_137);
    }
    if let Some(var_138) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    if let Some(var_139) = &input.marker {
        object.key("Marker").string(var_139);
    }
}

pub fn serialize_structure_crate_input_list_retirable_grants_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRetirableGrantsInput,
) {
    if let Some(var_140) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    if let Some(var_141) = &input.marker {
        object.key("Marker").string(var_141);
    }
    if let Some(var_142) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_142);
    }
}

pub fn serialize_structure_crate_input_put_key_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutKeyPolicyInput,
) {
    if let Some(var_143) = &input.key_id {
        object.key("KeyId").string(var_143);
    }
    if let Some(var_144) = &input.policy_name {
        object.key("PolicyName").string(var_144);
    }
    if let Some(var_145) = &input.policy {
        object.key("Policy").string(var_145);
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
}

pub fn serialize_structure_crate_input_re_encrypt_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReEncryptInput,
) {
    if let Some(var_146) = &input.ciphertext_blob {
        object
            .key("CiphertextBlob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_146));
    }
    if let Some(var_147) = &input.source_encryption_context {
        let mut object_148 = object.key("SourceEncryptionContext").start_object();
        for (key_149, value_150) in var_147 {
            {
                object_148.key(key_149).string(value_150);
            }
        }
        object_148.finish();
    }
    if let Some(var_151) = &input.source_key_id {
        object.key("SourceKeyId").string(var_151);
    }
    if let Some(var_152) = &input.destination_key_id {
        object.key("DestinationKeyId").string(var_152);
    }
    if let Some(var_153) = &input.destination_encryption_context {
        let mut object_154 = object.key("DestinationEncryptionContext").start_object();
        for (key_155, value_156) in var_153 {
            {
                object_154.key(key_155).string(value_156);
            }
        }
        object_154.finish();
    }
    if let Some(var_157) = &input.source_encryption_algorithm {
        object
            .key("SourceEncryptionAlgorithm")
            .string(var_157.as_str());
    }
    if let Some(var_158) = &input.destination_encryption_algorithm {
        object
            .key("DestinationEncryptionAlgorithm")
            .string(var_158.as_str());
    }
    if let Some(var_159) = &input.grant_tokens {
        let mut array_160 = object.key("GrantTokens").start_array();
        for item_161 in var_159 {
            {
                array_160.value().string(item_161);
            }
        }
        array_160.finish();
    }
}

pub fn serialize_structure_crate_input_replicate_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReplicateKeyInput,
) {
    if let Some(var_162) = &input.key_id {
        object.key("KeyId").string(var_162);
    }
    if let Some(var_163) = &input.replica_region {
        object.key("ReplicaRegion").string(var_163);
    }
    if let Some(var_164) = &input.policy {
        object.key("Policy").string(var_164);
    }
    if input.bypass_policy_lockout_safety_check {
        object
            .key("BypassPolicyLockoutSafetyCheck")
            .boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_165) = &input.description {
        object.key("Description").string(var_165);
    }
    if let Some(var_166) = &input.tags {
        let mut array_167 = object.key("Tags").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_169, item_168);
                object_169.finish();
            }
        }
        array_167.finish();
    }
}

pub fn serialize_structure_crate_input_retire_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetireGrantInput,
) {
    if let Some(var_170) = &input.grant_token {
        object.key("GrantToken").string(var_170);
    }
    if let Some(var_171) = &input.key_id {
        object.key("KeyId").string(var_171);
    }
    if let Some(var_172) = &input.grant_id {
        object.key("GrantId").string(var_172);
    }
}

pub fn serialize_structure_crate_input_revoke_grant_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeGrantInput,
) {
    if let Some(var_173) = &input.key_id {
        object.key("KeyId").string(var_173);
    }
    if let Some(var_174) = &input.grant_id {
        object.key("GrantId").string(var_174);
    }
}

pub fn serialize_structure_crate_input_schedule_key_deletion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ScheduleKeyDeletionInput,
) {
    if let Some(var_175) = &input.key_id {
        object.key("KeyId").string(var_175);
    }
    if let Some(var_176) = &input.pending_window_in_days {
        object.key("PendingWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
}

pub fn serialize_structure_crate_input_sign_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SignInput,
) {
    if let Some(var_177) = &input.key_id {
        object.key("KeyId").string(var_177);
    }
    if let Some(var_178) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_178));
    }
    if let Some(var_179) = &input.message_type {
        object.key("MessageType").string(var_179.as_str());
    }
    if let Some(var_180) = &input.grant_tokens {
        let mut array_181 = object.key("GrantTokens").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_183.as_str());
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_184) = &input.key_id {
        object.key("KeyId").string(var_184);
    }
    if let Some(var_185) = &input.tags {
        let mut array_186 = object.key("Tags").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_188, item_187);
                object_188.finish();
            }
        }
        array_186.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_189) = &input.key_id {
        object.key("KeyId").string(var_189);
    }
    if let Some(var_190) = &input.tag_keys {
        let mut array_191 = object.key("TagKeys").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
}

pub fn serialize_structure_crate_input_update_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAliasInput,
) {
    if let Some(var_193) = &input.alias_name {
        object.key("AliasName").string(var_193);
    }
    if let Some(var_194) = &input.target_key_id {
        object.key("TargetKeyId").string(var_194);
    }
}

pub fn serialize_structure_crate_input_update_custom_key_store_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomKeyStoreInput,
) {
    if let Some(var_195) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_195);
    }
    if let Some(var_196) = &input.new_custom_key_store_name {
        object.key("NewCustomKeyStoreName").string(var_196);
    }
    if let Some(var_197) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_197);
    }
    if let Some(var_198) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_198);
    }
}

pub fn serialize_structure_crate_input_update_key_description_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateKeyDescriptionInput,
) {
    if let Some(var_199) = &input.key_id {
        object.key("KeyId").string(var_199);
    }
    if let Some(var_200) = &input.description {
        object.key("Description").string(var_200);
    }
}

pub fn serialize_structure_crate_input_update_primary_region_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePrimaryRegionInput,
) {
    if let Some(var_201) = &input.key_id {
        object.key("KeyId").string(var_201);
    }
    if let Some(var_202) = &input.primary_region {
        object.key("PrimaryRegion").string(var_202);
    }
}

pub fn serialize_structure_crate_input_verify_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyInput,
) {
    if let Some(var_203) = &input.key_id {
        object.key("KeyId").string(var_203);
    }
    if let Some(var_204) = &input.message {
        object
            .key("Message")
            .string_unchecked(&aws_smithy_types::base64::encode(var_204));
    }
    if let Some(var_205) = &input.message_type {
        object.key("MessageType").string(var_205.as_str());
    }
    if let Some(var_206) = &input.signature {
        object
            .key("Signature")
            .string_unchecked(&aws_smithy_types::base64::encode(var_206));
    }
    if let Some(var_207) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_207.as_str());
    }
    if let Some(var_208) = &input.grant_tokens {
        let mut array_209 = object.key("GrantTokens").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210);
            }
        }
        array_209.finish();
    }
}

pub fn serialize_structure_crate_model_grant_constraints(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrantConstraints,
) {
    if let Some(var_211) = &input.encryption_context_subset {
        let mut object_212 = object.key("EncryptionContextSubset").start_object();
        for (key_213, value_214) in var_211 {
            {
                object_212.key(key_213).string(value_214);
            }
        }
        object_212.finish();
    }
    if let Some(var_215) = &input.encryption_context_equals {
        let mut object_216 = object.key("EncryptionContextEquals").start_object();
        for (key_217, value_218) in var_215 {
            {
                object_216.key(key_217).string(value_218);
            }
        }
        object_216.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_219) = &input.tag_key {
        object.key("TagKey").string(var_219);
    }
    if let Some(var_220) = &input.tag_value {
        object.key("TagValue").string(var_220);
    }
}
