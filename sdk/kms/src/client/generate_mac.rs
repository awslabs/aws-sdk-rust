// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GenerateMac`](crate::client::fluent_builders::GenerateMac) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`message(Blob)`](crate::client::fluent_builders::GenerateMac::message) / [`set_message(Option<Blob>)`](crate::client::fluent_builders::GenerateMac::set_message): <p>The message to be hashed. Specify a message of up to 4,096 bytes. </p>  <p> <code>GenerateMac</code> and <code>VerifyMac</code> do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateMac::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateMac::set_key_id): <p>The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.</p>  <p>To identify an HMAC KMS key, use the <code>DescribeKey</code> operation and see the <code>KeySpec</code> field in the response.</p>
    ///   - [`mac_algorithm(MacAlgorithmSpec)`](crate::client::fluent_builders::GenerateMac::mac_algorithm) / [`set_mac_algorithm(Option<MacAlgorithmSpec>)`](crate::client::fluent_builders::GenerateMac::set_mac_algorithm): <p>The MAC algorithm used in the operation.</p>  <p> The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the <code>DescribeKey</code> operation and see the <code>MacAlgorithms</code> field in the <code>DescribeKey</code> response.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateMac::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateMac::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateMacOutput`](crate::output::GenerateMacOutput) with field(s):
    ///   - [`mac(Option<Blob>)`](crate::output::GenerateMacOutput::mac): <p>The hash-based message authentication code (HMAC) that was generated for the specified message, HMAC KMS key, and MAC algorithm.</p>  <p>This is the standard, raw HMAC defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.</p>
    ///   - [`mac_algorithm(Option<MacAlgorithmSpec>)`](crate::output::GenerateMacOutput::mac_algorithm): <p>The MAC algorithm that was used to generate the HMAC.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateMacOutput::key_id): <p>The HMAC KMS key used in the operation.</p>
    /// - On failure, responds with [`SdkError<GenerateMacError>`](crate::error::GenerateMacError)
    pub fn generate_mac(&self) -> crate::client::fluent_builders::GenerateMac {
        crate::client::fluent_builders::GenerateMac::new(self.handle.clone())
    }
}
