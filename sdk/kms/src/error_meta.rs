// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AlreadyExistsError(crate::error::AlreadyExistsError),
    CloudHsmClusterInUseError(crate::error::CloudHsmClusterInUseError),
    CloudHsmClusterInvalidConfigurationError(
        crate::error::CloudHsmClusterInvalidConfigurationError,
    ),
    CloudHsmClusterNotActiveError(crate::error::CloudHsmClusterNotActiveError),
    CloudHsmClusterNotFoundError(crate::error::CloudHsmClusterNotFoundError),
    CloudHsmClusterNotRelatedError(crate::error::CloudHsmClusterNotRelatedError),
    CustomKeyStoreHasCMKsError(crate::error::CustomKeyStoreHasCMKsError),
    CustomKeyStoreInvalidStateError(crate::error::CustomKeyStoreInvalidStateError),
    CustomKeyStoreNameInUseError(crate::error::CustomKeyStoreNameInUseError),
    CustomKeyStoreNotFoundError(crate::error::CustomKeyStoreNotFoundError),
    DependencyTimeoutError(crate::error::DependencyTimeoutError),
    DisabledError(crate::error::DisabledError),
    ExpiredImportTokenError(crate::error::ExpiredImportTokenError),
    IncorrectKeyError(crate::error::IncorrectKeyError),
    IncorrectKeyMaterialError(crate::error::IncorrectKeyMaterialError),
    IncorrectTrustAnchorError(crate::error::IncorrectTrustAnchorError),
    InvalidAliasNameError(crate::error::InvalidAliasNameError),
    InvalidArnError(crate::error::InvalidArnError),
    InvalidCiphertextError(crate::error::InvalidCiphertextError),
    InvalidGrantIdError(crate::error::InvalidGrantIdError),
    InvalidGrantTokenError(crate::error::InvalidGrantTokenError),
    InvalidImportTokenError(crate::error::InvalidImportTokenError),
    InvalidKeyUsageError(crate::error::InvalidKeyUsageError),
    InvalidMarkerError(crate::error::InvalidMarkerError),
    KMSInternalError(crate::error::KMSInternalError),
    KMSInvalidSignatureError(crate::error::KMSInvalidSignatureError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    KeyUnavailableError(crate::error::KeyUnavailableError),
    LimitExceededError(crate::error::LimitExceededError),
    MalformedPolicyDocumentError(crate::error::MalformedPolicyDocumentError),
    NotFoundError(crate::error::NotFoundError),
    TagError(crate::error::TagError),
    UnsupportedOperationError(crate::error::UnsupportedOperationError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsError(inner) => inner.fmt(f),
            Error::CloudHsmClusterInUseError(inner) => inner.fmt(f),
            Error::CloudHsmClusterInvalidConfigurationError(inner) => inner.fmt(f),
            Error::CloudHsmClusterNotActiveError(inner) => inner.fmt(f),
            Error::CloudHsmClusterNotFoundError(inner) => inner.fmt(f),
            Error::CloudHsmClusterNotRelatedError(inner) => inner.fmt(f),
            Error::CustomKeyStoreHasCMKsError(inner) => inner.fmt(f),
            Error::CustomKeyStoreInvalidStateError(inner) => inner.fmt(f),
            Error::CustomKeyStoreNameInUseError(inner) => inner.fmt(f),
            Error::CustomKeyStoreNotFoundError(inner) => inner.fmt(f),
            Error::DependencyTimeoutError(inner) => inner.fmt(f),
            Error::DisabledError(inner) => inner.fmt(f),
            Error::ExpiredImportTokenError(inner) => inner.fmt(f),
            Error::IncorrectKeyError(inner) => inner.fmt(f),
            Error::IncorrectKeyMaterialError(inner) => inner.fmt(f),
            Error::IncorrectTrustAnchorError(inner) => inner.fmt(f),
            Error::InvalidAliasNameError(inner) => inner.fmt(f),
            Error::InvalidArnError(inner) => inner.fmt(f),
            Error::InvalidCiphertextError(inner) => inner.fmt(f),
            Error::InvalidGrantIdError(inner) => inner.fmt(f),
            Error::InvalidGrantTokenError(inner) => inner.fmt(f),
            Error::InvalidImportTokenError(inner) => inner.fmt(f),
            Error::InvalidKeyUsageError(inner) => inner.fmt(f),
            Error::InvalidMarkerError(inner) => inner.fmt(f),
            Error::KMSInternalError(inner) => inner.fmt(f),
            Error::KMSInvalidSignatureError(inner) => inner.fmt(f),
            Error::KMSInvalidStateError(inner) => inner.fmt(f),
            Error::KeyUnavailableError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentError(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::TagError(inner) => inner.fmt(f),
            Error::UnsupportedOperationError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelKeyDeletionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelKeyDeletionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelKeyDeletionErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::CancelKeyDeletionErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::CancelKeyDeletionErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::CancelKeyDeletionErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::CancelKeyDeletionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CancelKeyDeletionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConnectCustomKeyStoreError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConnectCustomKeyStoreError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ConnectCustomKeyStoreErrorKind::CloudHsmClusterInvalidConfigurationError(inner) => Error::CloudHsmClusterInvalidConfigurationError(inner),
                crate::error::ConnectCustomKeyStoreErrorKind::CloudHsmClusterNotActiveError(inner) => Error::CloudHsmClusterNotActiveError(inner),
                crate::error::ConnectCustomKeyStoreErrorKind::CustomKeyStoreInvalidStateError(inner) => Error::CustomKeyStoreInvalidStateError(inner),
                crate::error::ConnectCustomKeyStoreErrorKind::CustomKeyStoreNotFoundError(inner) => Error::CustomKeyStoreNotFoundError(inner),
                crate::error::ConnectCustomKeyStoreErrorKind::KMSInternalError(inner) => Error::KMSInternalError(inner),
                crate::error::ConnectCustomKeyStoreErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAliasErrorKind::AlreadyExistsError(inner) => {
                    Error::AlreadyExistsError(inner)
                }
                crate::error::CreateAliasErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::CreateAliasErrorKind::InvalidAliasNameError(inner) => {
                    Error::InvalidAliasNameError(inner)
                }
                crate::error::CreateAliasErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::CreateAliasErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::CreateAliasErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateAliasErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCustomKeyStoreError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCustomKeyStoreError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCustomKeyStoreErrorKind::CloudHsmClusterInUseError(inner) => Error::CloudHsmClusterInUseError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::CloudHsmClusterInvalidConfigurationError(inner) => Error::CloudHsmClusterInvalidConfigurationError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::CloudHsmClusterNotActiveError(inner) => Error::CloudHsmClusterNotActiveError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::CloudHsmClusterNotFoundError(inner) => Error::CloudHsmClusterNotFoundError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::CustomKeyStoreNameInUseError(inner) => Error::CustomKeyStoreNameInUseError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::IncorrectTrustAnchorError(inner) => Error::IncorrectTrustAnchorError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::KMSInternalError(inner) => Error::KMSInternalError(inner),
                crate::error::CreateCustomKeyStoreErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGrantError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGrantError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGrantErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::CreateGrantErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::CreateGrantErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::CreateGrantErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::CreateGrantErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::CreateGrantErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::CreateGrantErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateGrantErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateGrantErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateKeyErrorKind::CloudHsmClusterInvalidConfigurationError(
                    inner,
                ) => Error::CloudHsmClusterInvalidConfigurationError(inner),
                crate::error::CreateKeyErrorKind::CustomKeyStoreInvalidStateError(inner) => {
                    Error::CustomKeyStoreInvalidStateError(inner)
                }
                crate::error::CreateKeyErrorKind::CustomKeyStoreNotFoundError(inner) => {
                    Error::CustomKeyStoreNotFoundError(inner)
                }
                crate::error::CreateKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::CreateKeyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::CreateKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::CreateKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateKeyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::CreateKeyErrorKind::TagError(inner) => Error::TagError(inner),
                crate::error::CreateKeyErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::CreateKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DecryptError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DecryptError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DecryptErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DecryptErrorKind::DisabledError(inner) => Error::DisabledError(inner),
                crate::error::DecryptErrorKind::IncorrectKeyError(inner) => {
                    Error::IncorrectKeyError(inner)
                }
                crate::error::DecryptErrorKind::InvalidCiphertextError(inner) => {
                    Error::InvalidCiphertextError(inner)
                }
                crate::error::DecryptErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::DecryptErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::DecryptErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::DecryptErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DecryptErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::DecryptErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::DecryptErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAliasErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DeleteAliasErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DeleteAliasErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::DeleteAliasErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCustomKeyStoreError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCustomKeyStoreError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCustomKeyStoreErrorKind::CustomKeyStoreHasCMKsError(inner) => {
                    Error::CustomKeyStoreHasCMKsError(inner)
                }
                crate::error::DeleteCustomKeyStoreErrorKind::CustomKeyStoreInvalidStateError(
                    inner,
                ) => Error::CustomKeyStoreInvalidStateError(inner),
                crate::error::DeleteCustomKeyStoreErrorKind::CustomKeyStoreNotFoundError(inner) => {
                    Error::CustomKeyStoreNotFoundError(inner)
                }
                crate::error::DeleteCustomKeyStoreErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DeleteCustomKeyStoreErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteImportedKeyMaterialError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteImportedKeyMaterialError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteImportedKeyMaterialErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DeleteImportedKeyMaterialErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::DeleteImportedKeyMaterialErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DeleteImportedKeyMaterialErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::DeleteImportedKeyMaterialErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteImportedKeyMaterialErrorKind::UnsupportedOperationError(
                    inner,
                ) => Error::UnsupportedOperationError(inner),
                crate::error::DeleteImportedKeyMaterialErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCustomKeyStoresError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCustomKeyStoresError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCustomKeyStoresErrorKind::CustomKeyStoreNotFoundError(
                    inner,
                ) => Error::CustomKeyStoreNotFoundError(inner),
                crate::error::DescribeCustomKeyStoresErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DescribeCustomKeyStoresErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DescribeKeyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::DescribeKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DescribeKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DescribeKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisableKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DisableKeyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::DisableKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DisableKeyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::DisableKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DisableKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableKeyRotationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisableKeyRotationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableKeyRotationErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::DisableKeyRotationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisconnectCustomKeyStoreError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisconnectCustomKeyStoreError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisconnectCustomKeyStoreErrorKind::CustomKeyStoreInvalidStateError(inner) => Error::CustomKeyStoreInvalidStateError(inner),
                crate::error::DisconnectCustomKeyStoreErrorKind::CustomKeyStoreNotFoundError(inner) => Error::CustomKeyStoreNotFoundError(inner),
                crate::error::DisconnectCustomKeyStoreErrorKind::KMSInternalError(inner) => Error::KMSInternalError(inner),
                crate::error::DisconnectCustomKeyStoreErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::EnableKeyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::EnableKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::EnableKeyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::EnableKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::EnableKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::EnableKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableKeyRotationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableKeyRotationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableKeyRotationErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::EnableKeyRotationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EncryptError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EncryptError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EncryptErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::EncryptErrorKind::DisabledError(inner) => Error::DisabledError(inner),
                crate::error::EncryptErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::EncryptErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::EncryptErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::EncryptErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::EncryptErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::EncryptErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::EncryptErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateDataKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GenerateDataKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateDataKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GenerateDataKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateDataKeyPairError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GenerateDataKeyPairError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateDataKeyPairErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::GenerateDataKeyPairErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateDataKeyPairWithoutPlaintextError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateDataKeyPairWithoutPlaintextError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::DependencyTimeoutError(inner) => Error::DependencyTimeoutError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::DisabledError(inner) => Error::DisabledError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::InvalidGrantTokenError(inner) => Error::InvalidGrantTokenError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::InvalidKeyUsageError(inner) => Error::InvalidKeyUsageError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::KeyUnavailableError(inner) => Error::KeyUnavailableError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::KMSInternalError(inner) => Error::KMSInternalError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::KMSInvalidStateError(inner) => Error::KMSInvalidStateError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::UnsupportedOperationError(inner) => Error::UnsupportedOperationError(inner),
                crate::error::GenerateDataKeyPairWithoutPlaintextErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateDataKeyWithoutPlaintextError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateDataKeyWithoutPlaintextError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::DependencyTimeoutError(
                    inner,
                ) => Error::DependencyTimeoutError(inner),
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::InvalidGrantTokenError(
                    inner,
                ) => Error::InvalidGrantTokenError(inner),
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::InvalidKeyUsageError(
                    inner,
                ) => Error::InvalidKeyUsageError(inner),
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::KeyUnavailableError(
                    inner,
                ) => Error::KeyUnavailableError(inner),
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::KMSInvalidStateError(
                    inner,
                ) => Error::KMSInvalidStateError(inner),
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GenerateDataKeyWithoutPlaintextErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateRandomError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GenerateRandomError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateRandomErrorKind::CustomKeyStoreInvalidStateError(inner) => {
                    Error::CustomKeyStoreInvalidStateError(inner)
                }
                crate::error::GenerateRandomErrorKind::CustomKeyStoreNotFoundError(inner) => {
                    Error::CustomKeyStoreNotFoundError(inner)
                }
                crate::error::GenerateRandomErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GenerateRandomErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GenerateRandomErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetKeyPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetKeyPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetKeyPolicyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GetKeyPolicyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::GetKeyPolicyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GetKeyPolicyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GetKeyPolicyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetKeyPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetKeyRotationStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetKeyRotationStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetKeyRotationStatusErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::GetKeyRotationStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetParametersForImportError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetParametersForImportError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetParametersForImportErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GetParametersForImportErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::GetParametersForImportErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GetParametersForImportErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GetParametersForImportErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetParametersForImportErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::GetParametersForImportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPublicKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPublicKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPublicKeyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::GetPublicKeyErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::GetPublicKeyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::GetPublicKeyErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::GetPublicKeyErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::GetPublicKeyErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::GetPublicKeyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::GetPublicKeyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::GetPublicKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetPublicKeyErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::GetPublicKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportKeyMaterialError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportKeyMaterialError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportKeyMaterialErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::ExpiredImportTokenError(inner) => {
                    Error::ExpiredImportTokenError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::IncorrectKeyMaterialError(inner) => {
                    Error::IncorrectKeyMaterialError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::InvalidCiphertextError(inner) => {
                    Error::InvalidCiphertextError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::InvalidImportTokenError(inner) => {
                    Error::InvalidImportTokenError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::ImportKeyMaterialErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAliasesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAliasesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAliasesErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ListAliasesErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ListAliasesErrorKind::InvalidMarkerError(inner) => {
                    Error::InvalidMarkerError(inner)
                }
                crate::error::ListAliasesErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListAliasesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListAliasesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGrantsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGrantsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGrantsErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ListGrantsErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ListGrantsErrorKind::InvalidGrantIdError(inner) => {
                    Error::InvalidGrantIdError(inner)
                }
                crate::error::ListGrantsErrorKind::InvalidMarkerError(inner) => {
                    Error::InvalidMarkerError(inner)
                }
                crate::error::ListGrantsErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListGrantsErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::ListGrantsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListGrantsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListKeyPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListKeyPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListKeyPoliciesErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ListKeyPoliciesErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ListKeyPoliciesErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListKeyPoliciesErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::ListKeyPoliciesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListKeyPoliciesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListKeysErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ListKeysErrorKind::InvalidMarkerError(inner) => {
                    Error::InvalidMarkerError(inner)
                }
                crate::error::ListKeysErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourceTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListResourceTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListResourceTagsErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ListResourceTagsErrorKind::InvalidMarkerError(inner) => {
                    Error::InvalidMarkerError(inner)
                }
                crate::error::ListResourceTagsErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListResourceTagsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListResourceTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRetirableGrantsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRetirableGrantsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRetirableGrantsErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ListRetirableGrantsErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ListRetirableGrantsErrorKind::InvalidMarkerError(inner) => {
                    Error::InvalidMarkerError(inner)
                }
                crate::error::ListRetirableGrantsErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ListRetirableGrantsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListRetirableGrantsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutKeyPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutKeyPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutKeyPolicyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::UnsupportedOperationError(inner) => {
                    Error::UnsupportedOperationError(inner)
                }
                crate::error::PutKeyPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReEncryptError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReEncryptError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReEncryptErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ReEncryptErrorKind::DisabledError(inner) => {
                    Error::DisabledError(inner)
                }
                crate::error::ReEncryptErrorKind::IncorrectKeyError(inner) => {
                    Error::IncorrectKeyError(inner)
                }
                crate::error::ReEncryptErrorKind::InvalidCiphertextError(inner) => {
                    Error::InvalidCiphertextError(inner)
                }
                crate::error::ReEncryptErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::ReEncryptErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::ReEncryptErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::ReEncryptErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ReEncryptErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::ReEncryptErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ReEncryptErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RetireGrantError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RetireGrantError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RetireGrantErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::RetireGrantErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::RetireGrantErrorKind::InvalidGrantIdError(inner) => {
                    Error::InvalidGrantIdError(inner)
                }
                crate::error::RetireGrantErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::RetireGrantErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::RetireGrantErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::RetireGrantErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::RetireGrantErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeGrantError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RevokeGrantError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeGrantErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::RevokeGrantErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::RevokeGrantErrorKind::InvalidGrantIdError(inner) => {
                    Error::InvalidGrantIdError(inner)
                }
                crate::error::RevokeGrantErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::RevokeGrantErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::RevokeGrantErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::RevokeGrantErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ScheduleKeyDeletionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ScheduleKeyDeletionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ScheduleKeyDeletionErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::ScheduleKeyDeletionErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::ScheduleKeyDeletionErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::ScheduleKeyDeletionErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::ScheduleKeyDeletionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ScheduleKeyDeletionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SignError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SignError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SignErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::SignErrorKind::DisabledError(inner) => Error::DisabledError(inner),
                crate::error::SignErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::SignErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::SignErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::SignErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::SignErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::SignErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::SignErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::TagResourceErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::TagResourceErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::TagResourceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::TagError(inner) => Error::TagError(inner),
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::UntagResourceErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::UntagResourceErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::UntagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::TagError(inner) => Error::TagError(inner),
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAliasErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::UpdateAliasErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::UpdateAliasErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::UpdateAliasErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateAliasErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCustomKeyStoreError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateCustomKeyStoreError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateCustomKeyStoreErrorKind::CloudHsmClusterInvalidConfigurationError(inner) => Error::CloudHsmClusterInvalidConfigurationError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CloudHsmClusterNotActiveError(inner) => Error::CloudHsmClusterNotActiveError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CloudHsmClusterNotFoundError(inner) => Error::CloudHsmClusterNotFoundError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CloudHsmClusterNotRelatedError(inner) => Error::CloudHsmClusterNotRelatedError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CustomKeyStoreInvalidStateError(inner) => Error::CustomKeyStoreInvalidStateError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CustomKeyStoreNameInUseError(inner) => Error::CustomKeyStoreNameInUseError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::CustomKeyStoreNotFoundError(inner) => Error::CustomKeyStoreNotFoundError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::KMSInternalError(inner) => Error::KMSInternalError(inner),
                crate::error::UpdateCustomKeyStoreErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateKeyDescriptionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateKeyDescriptionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateKeyDescriptionErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::UpdateKeyDescriptionErrorKind::InvalidArnError(inner) => {
                    Error::InvalidArnError(inner)
                }
                crate::error::UpdateKeyDescriptionErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::UpdateKeyDescriptionErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::UpdateKeyDescriptionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateKeyDescriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyErrorKind::DependencyTimeoutError(inner) => {
                    Error::DependencyTimeoutError(inner)
                }
                crate::error::VerifyErrorKind::DisabledError(inner) => Error::DisabledError(inner),
                crate::error::VerifyErrorKind::InvalidGrantTokenError(inner) => {
                    Error::InvalidGrantTokenError(inner)
                }
                crate::error::VerifyErrorKind::InvalidKeyUsageError(inner) => {
                    Error::InvalidKeyUsageError(inner)
                }
                crate::error::VerifyErrorKind::KeyUnavailableError(inner) => {
                    Error::KeyUnavailableError(inner)
                }
                crate::error::VerifyErrorKind::KMSInternalError(inner) => {
                    Error::KMSInternalError(inner)
                }
                crate::error::VerifyErrorKind::KMSInvalidSignatureError(inner) => {
                    Error::KMSInvalidSignatureError(inner)
                }
                crate::error::VerifyErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::VerifyErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::VerifyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
