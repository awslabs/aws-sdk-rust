// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Key Management Service
///
/// Client for invoking operations on AWS Key Management Service. Each operation on AWS Key Management Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kms::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_kms::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_kms::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CancelKeyDeletion`](crate::client::fluent_builders::CancelKeyDeletion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::CancelKeyDeletion::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::CancelKeyDeletion::set_key_id): <p>Identifies the KMS key whose deletion is being canceled.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`CancelKeyDeletionOutput`](crate::output::CancelKeyDeletionOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::CancelKeyDeletionOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key whose deletion is canceled.</p>
    /// - On failure, responds with [`SdkError<CancelKeyDeletionError>`](crate::error::CancelKeyDeletionError)
    pub fn cancel_key_deletion(&self) -> crate::client::fluent_builders::CancelKeyDeletion {
        crate::client::fluent_builders::CancelKeyDeletion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ConnectCustomKeyStore`](crate::client::fluent_builders::ConnectCustomKeyStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::ConnectCustomKeyStore::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::ConnectCustomKeyStore::set_custom_key_store_id): <p>Enter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the <code>DescribeCustomKeyStores</code> operation.</p>
    /// - On success, responds with [`ConnectCustomKeyStoreOutput`](crate::output::ConnectCustomKeyStoreOutput)

    /// - On failure, responds with [`SdkError<ConnectCustomKeyStoreError>`](crate::error::ConnectCustomKeyStoreError)
    pub fn connect_custom_key_store(
        &self,
    ) -> crate::client::fluent_builders::ConnectCustomKeyStore {
        crate::client::fluent_builders::ConnectCustomKeyStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAlias`](crate::client::fluent_builders::CreateAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_name(impl Into<String>)`](crate::client::fluent_builders::CreateAlias::alias_name) / [`set_alias_name(Option<String>)`](crate::client::fluent_builders::CreateAlias::set_alias_name): <p>Specifies the alias name. This value must begin with <code>alias/</code> followed by a name, such as <code>alias/ExampleAlias</code>. </p>  <p>The <code>AliasName</code> value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <code>alias/aws/</code>. The <code>alias/aws/</code> prefix is reserved for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed keys</a>.</p>
    ///   - [`target_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateAlias::target_key_id) / [`set_target_key_id(Option<String>)`](crate::client::fluent_builders::CreateAlias::set_target_key_id): <p>Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a>. The KMS key must be in the same Amazon Web Services Region. </p>  <p>A valid key ID is required. If you supply a null or empty string value, this operation returns an error.</p>  <p>For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and ARN</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`CreateAliasOutput`](crate::output::CreateAliasOutput)

    /// - On failure, responds with [`SdkError<CreateAliasError>`](crate::error::CreateAliasError)
    pub fn create_alias(&self) -> crate::client::fluent_builders::CreateAlias {
        crate::client::fluent_builders::CreateAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCustomKeyStore`](crate::client::fluent_builders::CreateCustomKeyStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_name(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::custom_key_store_name) / [`set_custom_key_store_name(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_custom_key_store_name): <p>Specifies a friendly name for the custom key store. The name must be unique in your Amazon Web Services account and Region. This parameter is required for all custom key stores.</p>
    ///   - [`cloud_hsm_cluster_id(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::cloud_hsm_cluster_id) / [`set_cloud_hsm_cluster_id(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_cloud_hsm_cluster_id): <p>Identifies the CloudHSM cluster for an CloudHSM key store. This parameter is required for custom key stores with <code>CustomKeyStoreType</code> of <code>AWS_CLOUDHSM</code>.</p>  <p>Enter the cluster ID of any active CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
    ///   - [`trust_anchor_certificate(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::trust_anchor_certificate) / [`set_trust_anchor_certificate(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_trust_anchor_certificate): <p>Specifies the certificate for an CloudHSM key store. This parameter is required for custom key stores with a <code>CustomKeyStoreType</code> of <code>AWS_CLOUDHSM</code>.</p>  <p>Enter the content of the trust anchor certificate for the CloudHSM cluster. This is the content of the <code>customerCA.crt</code> file that you created when you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html">initialized the cluster</a>.</p>
    ///   - [`key_store_password(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::key_store_password) / [`set_key_store_password(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_key_store_password): <p>Specifies the <code>kmsuser</code> password for an CloudHSM key store. This parameter is required for custom key stores with a <code>CustomKeyStoreType</code> of <code>AWS_CLOUDHSM</code>.</p>  <p>Enter the password of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser"> <code>kmsuser</code> crypto user (CU) account</a> in the specified CloudHSM cluster. KMS logs into the cluster as this user to manage key material on your behalf.</p>  <p>The password must be a string of 7 to 32 characters. Its value is case sensitive.</p>  <p>This parameter tells KMS the <code>kmsuser</code> account password; it does not change the password in the CloudHSM cluster.</p>
    ///   - [`custom_key_store_type(CustomKeyStoreType)`](crate::client::fluent_builders::CreateCustomKeyStore::custom_key_store_type) / [`set_custom_key_store_type(Option<CustomKeyStoreType>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_custom_key_store_type): <p>Specifies the type of custom key store. The default value is <code>AWS_CLOUDHSM</code>.</p>  <p>For a custom key store backed by an CloudHSM cluster, omit the parameter or enter <code>AWS_CLOUDHSM</code>. For a custom key store backed by an external key manager outside of Amazon Web Services, enter <code>EXTERNAL_KEY_STORE</code>. You cannot change this property after the key store is created.</p>
    ///   - [`xks_proxy_uri_endpoint(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::xks_proxy_uri_endpoint) / [`set_xks_proxy_uri_endpoint(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_xks_proxy_uri_endpoint): <p>Specifies the endpoint that KMS uses to send requests to the external key store proxy (XKS proxy). This parameter is required for custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>The protocol must be HTTPS. KMS communicates on port 443. Do not specify the port in the <code>XksProxyUriEndpoint</code> value.</p>  <p>For external key stores with <code>XksProxyConnectivity</code> value of <code>VPC_ENDPOINT_SERVICE</code>, specify <code>https://</code> followed by the private DNS name of the VPC endpoint service.</p>  <p>For external key stores with <code>PUBLIC_ENDPOINT</code> connectivity, this endpoint must be reachable before you create the custom key store. KMS connects to the external key store proxy while creating the custom key store. For external key stores with <code>VPC_ENDPOINT_SERVICE</code> connectivity, KMS connects when you call the <code>ConnectCustomKeyStore</code> operation.</p>  <p>The value of this parameter must begin with <code>https://</code>. The remainder can contain upper and lower case letters (A-Z and a-z), numbers (0-9), dots (<code>.</code>), and hyphens (<code>-</code>). Additional slashes (<code>/</code> and <code>\</code>) are not permitted.</p>  <p> <b>Uniqueness requirements: </b> </p>  <ul>   <li> <p>The combined <code>XksProxyUriEndpoint</code> and <code>XksProxyUriPath</code> values must be unique in the Amazon Web Services account and Region.</p> </li>   <li> <p>An external key store with <code>PUBLIC_ENDPOINT</code> connectivity cannot use the same <code>XksProxyUriEndpoint</code> value as an external key store with <code>VPC_ENDPOINT_SERVICE</code> connectivity in the same Amazon Web Services Region.</p> </li>   <li> <p>Each external key store with <code>VPC_ENDPOINT_SERVICE</code> connectivity must have its own private DNS name. The <code>XksProxyUriEndpoint</code> value for external key stores with <code>VPC_ENDPOINT_SERVICE</code> connectivity (private DNS name) must be unique in the Amazon Web Services account and Region.</p> </li>  </ul>
    ///   - [`xks_proxy_uri_path(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::xks_proxy_uri_path) / [`set_xks_proxy_uri_path(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_xks_proxy_uri_path): <p>Specifies the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key store proxy. This parameter is required for all custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>The value must start with <code>/</code> and must end with <code>/kms/xks/v1</code> where <code>v1</code> represents the version of the KMS external key store proxy API. This path can include an optional prefix between the required elements such as <code>/<i>prefix</i>/kms/xks/v1</code>.</p>  <p> <b>Uniqueness requirements: </b> </p>  <ul>   <li> <p>The combined <code>XksProxyUriEndpoint</code> and <code>XksProxyUriPath</code> values must be unique in the Amazon Web Services account and Region.</p> </li>  </ul>
    ///   - [`xks_proxy_vpc_endpoint_service_name(impl Into<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::xks_proxy_vpc_endpoint_service_name) / [`set_xks_proxy_vpc_endpoint_service_name(Option<String>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_xks_proxy_vpc_endpoint_service_name): <p>Specifies the name of the Amazon VPC endpoint service for interface endpoints that is used to communicate with your external key store proxy (XKS proxy). This parameter is required when the value of <code>CustomKeyStoreType</code> is <code>EXTERNAL_KEY_STORE</code> and the value of <code>XksProxyConnectivity</code> is <code>VPC_ENDPOINT_SERVICE</code>.</p>  <p>The Amazon VPC endpoint service must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements">fulfill all requirements</a> for use with an external key store. </p>  <p> <b>Uniqueness requirements:</b> </p>  <ul>   <li> <p>External key stores with <code>VPC_ENDPOINT_SERVICE</code> connectivity can share an Amazon VPC, but each external key store must have its own VPC endpoint service and private DNS name.</p> </li>  </ul>
    ///   - [`xks_proxy_authentication_credential(XksProxyAuthenticationCredentialType)`](crate::client::fluent_builders::CreateCustomKeyStore::xks_proxy_authentication_credential) / [`set_xks_proxy_authentication_credential(Option<XksProxyAuthenticationCredentialType>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_xks_proxy_authentication_credential): <p>Specifies an authentication credential for the external key store proxy (XKS proxy). This parameter is required for all custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>The <code>XksProxyAuthenticationCredential</code> has two required elements: <code>RawSecretAccessKey</code>, a secret key, and <code>AccessKeyId</code>, a unique identifier for the <code>RawSecretAccessKey</code>. For character requirements, see <a href="kms/latest/APIReference/API_XksProxyAuthenticationCredentialType.html">XksProxyAuthenticationCredentialType</a>.</p>  <p>KMS uses this authentication credential to sign requests to the external key store proxy on your behalf. This credential is unrelated to Identity and Access Management (IAM) and Amazon Web Services credentials.</p>  <p>This parameter doesn't set or change the authentication credentials on the XKS proxy. It just tells KMS the credential that you established on your external key store proxy. If you rotate your proxy authentication credential, use the <code>UpdateCustomKeyStore</code> operation to provide the new credential to KMS.</p>
    ///   - [`xks_proxy_connectivity(XksProxyConnectivityType)`](crate::client::fluent_builders::CreateCustomKeyStore::xks_proxy_connectivity) / [`set_xks_proxy_connectivity(Option<XksProxyConnectivityType>)`](crate::client::fluent_builders::CreateCustomKeyStore::set_xks_proxy_connectivity): <p>Indicates how KMS communicates with the external key store proxy. This parameter is required for custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>If the external key store proxy uses a public endpoint, specify <code>PUBLIC_ENDPOINT</code>. If the external key store proxy uses a Amazon VPC endpoint service for communication with KMS, specify <code>VPC_ENDPOINT_SERVICE</code>. For help making this choice, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/plan-xks-keystore.html#choose-xks-connectivity">Choosing a connectivity option</a> in the <i>Key Management Service Developer Guide</i>.</p>  <p>An Amazon VPC endpoint service keeps your communication with KMS in a private address space entirely within Amazon Web Services, but it requires more configuration, including establishing a Amazon VPC with multiple subnets, a VPC endpoint service, a network load balancer, and a verified private DNS name. A public endpoint is simpler to set up, but it might be slower and might not fulfill your security requirements. You might consider testing with a public endpoint, and then establishing a VPC endpoint service for production tasks. Note that this choice does not determine the location of the external key store proxy. Even if you choose a VPC endpoint service, the proxy can be hosted within the VPC or outside of Amazon Web Services such as in your corporate data center.</p>
    /// - On success, responds with [`CreateCustomKeyStoreOutput`](crate::output::CreateCustomKeyStoreOutput) with field(s):
    ///   - [`custom_key_store_id(Option<String>)`](crate::output::CreateCustomKeyStoreOutput::custom_key_store_id): <p>A unique identifier for the new custom key store.</p>
    /// - On failure, responds with [`SdkError<CreateCustomKeyStoreError>`](crate::error::CreateCustomKeyStoreError)
    pub fn create_custom_key_store(&self) -> crate::client::fluent_builders::CreateCustomKeyStore {
        crate::client::fluent_builders::CreateCustomKeyStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGrant`](crate::client::fluent_builders::CreateGrant) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::CreateGrant::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::CreateGrant::set_key_id): <p>Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`grantee_principal(impl Into<String>)`](crate::client::fluent_builders::CreateGrant::grantee_principal) / [`set_grantee_principal(Option<String>)`](crate::client::fluent_builders::CreateGrant::set_grantee_principal): <p>The identity that gets the permissions specified in the grant.</p>  <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">Amazon Web Services Identity and Access Management (IAM)</a> in the Example ARNs section of the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`retiring_principal(impl Into<String>)`](crate::client::fluent_builders::CreateGrant::retiring_principal) / [`set_retiring_principal(Option<String>)`](crate::client::fluent_builders::CreateGrant::set_retiring_principal): <p>The principal that has permission to use the <code>RetireGrant</code> operation to retire the grant. </p>  <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">Amazon Web Services Identity and Access Management (IAM)</a> in the Example ARNs section of the <i>Amazon Web Services General Reference</i>.</p>  <p>The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see <code>RevokeGrant</code> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring and revoking grants</a> in the <i>Key Management Service Developer Guide</i>. </p>
    ///   - [`operations(Vec<GrantOperation>)`](crate::client::fluent_builders::CreateGrant::operations) / [`set_operations(Option<Vec<GrantOperation>>)`](crate::client::fluent_builders::CreateGrant::set_operations): <p>A list of operations that the grant permits. </p>  <p>This list must include only operations that are permitted in a grant. Also, the operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric encryption KMS key that allows the <code>Sign</code> operation, or a grant for an asymmetric KMS key that allows the <code>GenerateDataKey</code> operation. If you try, KMS returns a <code>ValidationError</code> exception. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations">Grant operations</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`constraints(GrantConstraints)`](crate::client::fluent_builders::CreateGrant::constraints) / [`set_constraints(Option<GrantConstraints>)`](crate::client::fluent_builders::CreateGrant::set_constraints): <p>Specifies a grant constraint. </p>  <p>KMS supports the <code>EncryptionContextEquals</code> and <code>EncryptionContextSubset</code> grant constraints. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters. For information about grant constraints, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints">Using grant constraints</a> in the <i>Key Management Service Developer Guide</i>. For more information about encryption context, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. </p>  <p>The encryption context grant constraints allow the permissions in the grant only when the encryption context in the request matches (<code>EncryptionContextEquals</code>) or includes (<code>EncryptionContextSubset</code>) the encryption context specified in this structure. </p>  <p>The encryption context grant constraints are supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations">grant operations</a> that include an <code>EncryptionContext</code> parameter, such as cryptographic operations on symmetric encryption KMS keys. Grants with grant constraints can include the <code>DescribeKey</code> and <code>RetireGrant</code> operations, but the constraint doesn't apply to these operations. If a grant with a grant constraint includes the <code>CreateGrant</code> operation, the constraint requires that any grants created with the <code>CreateGrant</code> permission have an equally strict or stricter encryption context constraint.</p>  <p>You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or HMAC KMS keys. These keys don't support an encryption context. </p>  <p></p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::CreateGrant::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::CreateGrant::set_grant_tokens): <p>A list of grant tokens. </p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateGrant::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateGrant::set_name): <p>A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request.</p>  <p>When this value is absent, all <code>CreateGrant</code> requests result in a new grant with a unique <code>GrantId</code> even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the <code>CreateGrant</code> request.</p>  <p>When this value is present, you can retry a <code>CreateGrant</code> request with identical parameters; if the grant already exists, the original <code>GrantId</code> is returned without creating a new grant. Note that the returned grant token is unique with every <code>CreateGrant</code> request, even when a duplicate <code>GrantId</code> is returned. All grant tokens for the same grant ID can be used interchangeably.</p>
    /// - On success, responds with [`CreateGrantOutput`](crate::output::CreateGrantOutput) with field(s):
    ///   - [`grant_token(Option<String>)`](crate::output::CreateGrantOutput::grant_token): <p>The grant token.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`grant_id(Option<String>)`](crate::output::CreateGrantOutput::grant_id): <p>The unique identifier for the grant.</p>  <p>You can use the <code>GrantId</code> in a <code>ListGrants</code>, <code>RetireGrant</code>, or <code>RevokeGrant</code> operation.</p>
    /// - On failure, responds with [`SdkError<CreateGrantError>`](crate::error::CreateGrantError)
    pub fn create_grant(&self) -> crate::client::fluent_builders::CreateGrant {
        crate::client::fluent_builders::CreateGrant::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateKey`](crate::client::fluent_builders::CreateKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::CreateKey::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::CreateKey::set_policy): <p>The key policy to attach to the KMS key.</p>  <p>If you provide a key policy, it must meet the following criteria:</p>  <ul>   <li> <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy must allow the principal that is making the <code>CreateKey</code> request to make a subsequent <code>PutKeyPolicy</code> request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i> <i>Key Management Service Developer Guide</i> </i>.</p> </li>   <li> <p>Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> </li>  </ul>  <p>If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">Default Key Policy</a> in the <i>Key Management Service Developer Guide</i>. </p>  <p>The key policy size quota is 32 kilobytes (32768 bytes).</p>  <p>For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateKey::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateKey::set_description): <p>A description of the KMS key.</p>  <p>Use a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description).</p>  <p>To set or change the description after the key is created, use <code>UpdateKeyDescription</code>.</p>
    ///   - [`key_usage(KeyUsageType)`](crate::client::fluent_builders::CreateKey::key_usage) / [`set_key_usage(Option<KeyUsageType>)`](crate::client::fluent_builders::CreateKey::set_key_usage): <p>Determines the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> for which you can use the KMS key. The default value is <code>ENCRYPT_DECRYPT</code>. This parameter is optional when you are creating a symmetric encryption KMS key; otherwise, it is required. You can't change the <code>KeyUsage</code> value after the KMS key is created.</p>  <p>Select only one valid value.</p>  <ul>   <li> <p>For symmetric encryption KMS keys, omit the parameter or specify <code>ENCRYPT_DECRYPT</code>.</p> </li>   <li> <p>For HMAC KMS keys (symmetric), specify <code>GENERATE_VERIFY_MAC</code>.</p> </li>   <li> <p>For asymmetric KMS keys with RSA key material, specify <code>ENCRYPT_DECRYPT</code> or <code>SIGN_VERIFY</code>.</p> </li>   <li> <p>For asymmetric KMS keys with ECC key material, specify <code>SIGN_VERIFY</code>.</p> </li>   <li> <p>For asymmetric KMS keys with SM2 key material (China Regions only), specify <code>ENCRYPT_DECRYPT</code> or <code>SIGN_VERIFY</code>.</p> </li>  </ul>
    ///   - [`customer_master_key_spec(CustomerMasterKeySpec)`](crate::client::fluent_builders::CreateKey::customer_master_key_spec) / [`set_customer_master_key_spec(Option<CustomerMasterKeySpec>)`](crate::client::fluent_builders::CreateKey::set_customer_master_key_spec): <p>Instead, use the <code>KeySpec</code> parameter.</p>  <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> parameters work the same way. Only the names differ. We recommend that you use <code>KeySpec</code> parameter in your code. However, to avoid breaking changes, KMS supports both parameters.</p>
    ///   - [`key_spec(KeySpec)`](crate::client::fluent_builders::CreateKey::key_spec) / [`set_key_spec(Option<KeySpec>)`](crate::client::fluent_builders::CreateKey::set_key_spec): <p>Specifies the type of KMS key to create. The default value, <code>SYMMETRIC_DEFAULT</code>, creates a KMS key with a 256-bit AES-GCM key that is used for encryption and decryption, except in China Regions, where it creates a 128-bit symmetric key that uses SM4 encryption. For help choosing a key spec for your KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-types.html#symm-asymm-choose">Choosing a KMS key type</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.</p>  <p>The <code>KeySpec</code> determines whether the KMS key contains a symmetric key or an asymmetric key pair. It also determines the algorithms that the KMS key supports. You can't change the <code>KeySpec</code> after the KMS key is created. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM policy. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm">kms:EncryptionAlgorithm</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-mac-algorithm">kms:MacAlgorithm</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm">kms:Signing Algorithm</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.</p> <important>   <p> <a href="http://aws.amazon.com/kms/features/#AWS_Service_Integration">Amazon Web Services services that are integrated with KMS</a> use symmetric encryption KMS keys to protect your data. These services do not support asymmetric KMS keys or HMAC KMS keys.</p>  </important>  <p>KMS supports the following key specs for KMS keys:</p>  <ul>   <li> <p>Symmetric encryption key (default)</p>    <ul>     <li> <p> <code>SYMMETRIC_DEFAULT</code> </p> </li>    </ul> </li>   <li> <p>HMAC keys (symmetric)</p>    <ul>     <li> <p> <code>HMAC_224</code> </p> </li>     <li> <p> <code>HMAC_256</code> </p> </li>     <li> <p> <code>HMAC_384</code> </p> </li>     <li> <p> <code>HMAC_512</code> </p> </li>    </ul> </li>   <li> <p>Asymmetric RSA key pairs</p>    <ul>     <li> <p> <code>RSA_2048</code> </p> </li>     <li> <p> <code>RSA_3072</code> </p> </li>     <li> <p> <code>RSA_4096</code> </p> </li>    </ul> </li>   <li> <p>Asymmetric NIST-recommended elliptic curve key pairs</p>    <ul>     <li> <p> <code>ECC_NIST_P256</code> (secp256r1)</p> </li>     <li> <p> <code>ECC_NIST_P384</code> (secp384r1)</p> </li>     <li> <p> <code>ECC_NIST_P521</code> (secp521r1)</p> </li>    </ul> </li>   <li> <p>Other asymmetric elliptic curve key pairs</p>    <ul>     <li> <p> <code>ECC_SECG_P256K1</code> (secp256k1), commonly used for cryptocurrencies.</p> </li>    </ul> </li>   <li> <p>SM2 key pairs (China Regions only)</p>    <ul>     <li> <p> <code>SM2</code> </p> </li>    </ul> </li>  </ul>
    ///   - [`origin(OriginType)`](crate::client::fluent_builders::CreateKey::origin) / [`set_origin(Option<OriginType>)`](crate::client::fluent_builders::CreateKey::set_origin): <p>The source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The default is <code>AWS_KMS</code>, which means that KMS creates the key material.</p>  <p>To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html">create a KMS key with no key material</a> (for imported key material), set this value to <code>EXTERNAL</code>. For more information about importing key material into KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing Key Material</a> in the <i>Key Management Service Developer Guide</i>. The <code>EXTERNAL</code> origin value is valid only for symmetric KMS keys.</p>  <p>To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-cmk-keystore.html">create a KMS key in an CloudHSM key store</a> and create its key material in the associated CloudHSM cluster, set this value to <code>AWS_CLOUDHSM</code>. You must also use the <code>CustomKeyStoreId</code> parameter to identify the CloudHSM key store. The <code>KeySpec</code> value must be <code>SYMMETRIC_DEFAULT</code>.</p>  <p>To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keys.html">create a KMS key in an external key store</a>, set this value to <code>EXTERNAL_KEY_STORE</code>. You must also use the <code>CustomKeyStoreId</code> parameter to identify the external key store and the <code>XksKeyId</code> parameter to identify the associated external key. The <code>KeySpec</code> value must be <code>SYMMETRIC_DEFAULT</code>.</p>
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::CreateKey::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::CreateKey::set_custom_key_store_id): <p>Creates the KMS key in the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. The <code>ConnectionState</code> of the custom key store must be <code>CONNECTED</code>. To find the CustomKeyStoreID and ConnectionState use the <code>DescribeCustomKeyStores</code> operation.</p>  <p>This parameter is valid only for symmetric encryption KMS keys in a single Region. You cannot create any other type of KMS key in a custom key store.</p>  <p>When you create a KMS key in an CloudHSM key store, KMS generates a non-exportable 256-bit symmetric key in its associated CloudHSM cluster and associates it with the KMS key. When you create a KMS key in an external key store, you must use the <code>XksKeyId</code> parameter to specify an external key that serves as key material for the KMS key.</p>
    ///   - [`bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::CreateKey::bypass_policy_lockout_safety_check) / [`set_bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::CreateKey::set_bypass_policy_lockout_safety_check): <p>A flag to indicate whether to bypass the key policy lockout safety check.</p> <important>   <p>Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.</p>   <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i> <i>Key Management Service Developer Guide</i> </i>.</p>  </important>  <p>Use this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent <code>PutKeyPolicy</code> request on the KMS key.</p>  <p>The default value is false.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateKey::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateKey::set_tags): <p>Assigns one or more tags to the KMS key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the <code>TagResource</code> operation.</p> <note>   <p>Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC for KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>  </note>  <p>To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a> permission in an IAM policy.</p>  <p>Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.</p>  <p>When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging Keys</a>.</p>
    ///   - [`multi_region(bool)`](crate::client::fluent_builders::CreateKey::multi_region) / [`set_multi_region(Option<bool>)`](crate::client::fluent_builders::CreateKey::set_multi_region): <p>Creates a multi-Region primary key that you can replicate into other Amazon Web Services Regions. You cannot change this value after you create the KMS key. </p>  <p>For a multi-Region key, set this parameter to <code>True</code>. For a single-Region KMS key, omit this parameter or set it to <code>False</code>. The default value is <code>False</code>.</p>  <p>This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>  <p>This value creates a <i>primary key</i>, not a replica. To create a <i>replica key</i>, use the <code>ReplicateKey</code> operation. </p>  <p>You can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.</p>
    ///   - [`xks_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateKey::xks_key_id) / [`set_xks_key_id(Option<String>)`](crate::client::fluent_builders::CreateKey::set_xks_key_id): <p>Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key">external key</a> that serves as key material for the KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external key store</a>. Specify the ID that the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-xks-proxy">external key store proxy</a> uses to refer to the external key. For help, see the documentation for your external key store proxy.</p>  <p>This parameter is required for a KMS key with an <code>Origin</code> value of <code>EXTERNAL_KEY_STORE</code>. It is not valid for KMS keys with any other <code>Origin</code> value.</p>  <p>The external key must be an existing 256-bit AES symmetric encryption key hosted outside of Amazon Web Services in an external key manager associated with the external key store specified by the <code>CustomKeyStoreId</code> parameter. This key must be enabled and configured to perform encryption and decryption. Each KMS key in an external key store must use a different external key. For details, see <a href="https://docs.aws.amazon.com/create-xks-keys.html#xks-key-requirements">Requirements for a KMS key in an external key store</a> in the <i>Key Management Service Developer Guide</i>.</p>  <p>Each KMS key in an external key store is associated two backing keys. One is key material that KMS generates. The other is the external key specified by this parameter. When you use the KMS key in an external key store to encrypt data, the encryption operation is performed first by KMS using the KMS key material, and then by the external key manager using the specified external key, a process known as <i>double encryption</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-double-encryption">Double encryption</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`CreateKeyOutput`](crate::output::CreateKeyOutput) with field(s):
    ///   - [`key_metadata(Option<KeyMetadata>)`](crate::output::CreateKeyOutput::key_metadata): <p>Metadata associated with the KMS key.</p>
    /// - On failure, responds with [`SdkError<CreateKeyError>`](crate::error::CreateKeyError)
    pub fn create_key(&self) -> crate::client::fluent_builders::CreateKey {
        crate::client::fluent_builders::CreateKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Decrypt`](crate::client::fluent_builders::Decrypt) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ciphertext_blob(Blob)`](crate::client::fluent_builders::Decrypt::ciphertext_blob) / [`set_ciphertext_blob(Option<Blob>)`](crate::client::fluent_builders::Decrypt::set_ciphertext_blob): <p>Ciphertext to be decrypted. The blob includes metadata.</p>
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::Decrypt::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::Decrypt::set_encryption_context): <p>Specifies the encryption context to use when decrypting the data. An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::Decrypt::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::Decrypt::set_grant_tokens): <p>A list of grant tokens. </p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::Decrypt::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::Decrypt::set_key_id): <p>Specifies the KMS key that KMS uses to decrypt the ciphertext.</p>  <p>Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the <code>Decrypt</code> operation throws an <code>IncorrectKeyException</code>.</p>  <p>This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`encryption_algorithm(EncryptionAlgorithmSpec)`](crate::client::fluent_builders::Decrypt::encryption_algorithm) / [`set_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::client::fluent_builders::Decrypt::set_encryption_algorithm): <p>Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify the same algorithm that was used to encrypt the data. If you specify a different algorithm, the <code>Decrypt</code> operation fails.</p>  <p>This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the only supported algorithm that is valid for symmetric encryption KMS keys.</p>
    /// - On success, responds with [`DecryptOutput`](crate::output::DecryptOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::DecryptOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that was used to decrypt the ciphertext.</p>
    ///   - [`plaintext(Option<Blob>)`](crate::output::DecryptOutput::plaintext): <p>Decrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::output::DecryptOutput::encryption_algorithm): <p>The encryption algorithm that was used to decrypt the ciphertext.</p>
    /// - On failure, responds with [`SdkError<DecryptError>`](crate::error::DecryptError)
    pub fn decrypt(&self) -> crate::client::fluent_builders::Decrypt {
        crate::client::fluent_builders::Decrypt::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAlias`](crate::client::fluent_builders::DeleteAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_name(impl Into<String>)`](crate::client::fluent_builders::DeleteAlias::alias_name) / [`set_alias_name(Option<String>)`](crate::client::fluent_builders::DeleteAlias::set_alias_name): <p>The alias to be deleted. The alias name must begin with <code>alias/</code> followed by the alias name, such as <code>alias/ExampleAlias</code>.</p>
    /// - On success, responds with [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)

    /// - On failure, responds with [`SdkError<DeleteAliasError>`](crate::error::DeleteAliasError)
    pub fn delete_alias(&self) -> crate::client::fluent_builders::DeleteAlias {
        crate::client::fluent_builders::DeleteAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCustomKeyStore`](crate::client::fluent_builders::DeleteCustomKeyStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::DeleteCustomKeyStore::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::DeleteCustomKeyStore::set_custom_key_store_id): <p>Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the <code>DescribeCustomKeyStores</code> operation.</p>
    /// - On success, responds with [`DeleteCustomKeyStoreOutput`](crate::output::DeleteCustomKeyStoreOutput)

    /// - On failure, responds with [`SdkError<DeleteCustomKeyStoreError>`](crate::error::DeleteCustomKeyStoreError)
    pub fn delete_custom_key_store(&self) -> crate::client::fluent_builders::DeleteCustomKeyStore {
        crate::client::fluent_builders::DeleteCustomKeyStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteImportedKeyMaterial`](crate::client::fluent_builders::DeleteImportedKeyMaterial) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::DeleteImportedKeyMaterial::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::DeleteImportedKeyMaterial::set_key_id): <p>Identifies the KMS key from which you are deleting imported key material. The <code>Origin</code> of the KMS key must be <code>EXTERNAL</code>.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`DeleteImportedKeyMaterialOutput`](crate::output::DeleteImportedKeyMaterialOutput)

    /// - On failure, responds with [`SdkError<DeleteImportedKeyMaterialError>`](crate::error::DeleteImportedKeyMaterialError)
    pub fn delete_imported_key_material(
        &self,
    ) -> crate::client::fluent_builders::DeleteImportedKeyMaterial {
        crate::client::fluent_builders::DeleteImportedKeyMaterial::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCustomKeyStores`](crate::client::fluent_builders::DescribeCustomKeyStores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeCustomKeyStores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::set_custom_key_store_id): <p>Gets only information about the specified custom key store. Enter the key store ID.</p>  <p>By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not both.</p>
    ///   - [`custom_key_store_name(impl Into<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::custom_key_store_name) / [`set_custom_key_store_name(Option<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::set_custom_key_store_name): <p>Gets only information about the specified custom key store. Enter the friendly name of the custom key store.</p>  <p>By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not both.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeCustomKeyStores::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeCustomKeyStores::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeCustomKeyStores::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    /// - On success, responds with [`DescribeCustomKeyStoresOutput`](crate::output::DescribeCustomKeyStoresOutput) with field(s):
    ///   - [`custom_key_stores(Option<Vec<CustomKeyStoresListEntry>>)`](crate::output::DescribeCustomKeyStoresOutput::custom_key_stores): <p>Contains metadata about each custom key store.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeCustomKeyStoresOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::DescribeCustomKeyStoresOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<DescribeCustomKeyStoresError>`](crate::error::DescribeCustomKeyStoresError)
    pub fn describe_custom_key_stores(
        &self,
    ) -> crate::client::fluent_builders::DescribeCustomKeyStores {
        crate::client::fluent_builders::DescribeCustomKeyStores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeKey`](crate::client::fluent_builders::DescribeKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::DescribeKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::DescribeKey::set_key_id): <p>Describes the specified KMS key. </p>  <p>If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk">Amazon Web Services managed key</a> and returns its <code>KeyId</code> and <code>Arn</code> in the response.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::DescribeKey::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeKey::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`DescribeKeyOutput`](crate::output::DescribeKeyOutput) with field(s):
    ///   - [`key_metadata(Option<KeyMetadata>)`](crate::output::DescribeKeyOutput::key_metadata): <p>Metadata associated with the key.</p>
    /// - On failure, responds with [`SdkError<DescribeKeyError>`](crate::error::DescribeKeyError)
    pub fn describe_key(&self) -> crate::client::fluent_builders::DescribeKey {
        crate::client::fluent_builders::DescribeKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableKey`](crate::client::fluent_builders::DisableKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::DisableKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::DisableKey::set_key_id): <p>Identifies the KMS key to disable.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`DisableKeyOutput`](crate::output::DisableKeyOutput)

    /// - On failure, responds with [`SdkError<DisableKeyError>`](crate::error::DisableKeyError)
    pub fn disable_key(&self) -> crate::client::fluent_builders::DisableKey {
        crate::client::fluent_builders::DisableKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableKeyRotation`](crate::client::fluent_builders::DisableKeyRotation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::DisableKeyRotation::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::DisableKeyRotation::set_key_id): <p>Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`DisableKeyRotationOutput`](crate::output::DisableKeyRotationOutput)

    /// - On failure, responds with [`SdkError<DisableKeyRotationError>`](crate::error::DisableKeyRotationError)
    pub fn disable_key_rotation(&self) -> crate::client::fluent_builders::DisableKeyRotation {
        crate::client::fluent_builders::DisableKeyRotation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisconnectCustomKeyStore`](crate::client::fluent_builders::DisconnectCustomKeyStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::DisconnectCustomKeyStore::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::DisconnectCustomKeyStore::set_custom_key_store_id): <p>Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the <code>DescribeCustomKeyStores</code> operation.</p>
    /// - On success, responds with [`DisconnectCustomKeyStoreOutput`](crate::output::DisconnectCustomKeyStoreOutput)

    /// - On failure, responds with [`SdkError<DisconnectCustomKeyStoreError>`](crate::error::DisconnectCustomKeyStoreError)
    pub fn disconnect_custom_key_store(
        &self,
    ) -> crate::client::fluent_builders::DisconnectCustomKeyStore {
        crate::client::fluent_builders::DisconnectCustomKeyStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableKey`](crate::client::fluent_builders::EnableKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::EnableKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::EnableKey::set_key_id): <p>Identifies the KMS key to enable.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`EnableKeyOutput`](crate::output::EnableKeyOutput)

    /// - On failure, responds with [`SdkError<EnableKeyError>`](crate::error::EnableKeyError)
    pub fn enable_key(&self) -> crate::client::fluent_builders::EnableKey {
        crate::client::fluent_builders::EnableKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableKeyRotation`](crate::client::fluent_builders::EnableKeyRotation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::EnableKeyRotation::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::EnableKeyRotation::set_key_id): <p>Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region keys</a>, set the property on the primary key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`EnableKeyRotationOutput`](crate::output::EnableKeyRotationOutput)

    /// - On failure, responds with [`SdkError<EnableKeyRotationError>`](crate::error::EnableKeyRotationError)
    pub fn enable_key_rotation(&self) -> crate::client::fluent_builders::EnableKeyRotation {
        crate::client::fluent_builders::EnableKeyRotation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Encrypt`](crate::client::fluent_builders::Encrypt) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::Encrypt::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::Encrypt::set_key_id): <p>Identifies the KMS key to use in the encryption operation. The KMS key must have a <code>KeyUsage</code> of <code>ENCRYPT_DECRYPT</code>. To find the <code>KeyUsage</code> of a KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`plaintext(Blob)`](crate::client::fluent_builders::Encrypt::plaintext) / [`set_plaintext(Option<Blob>)`](crate::client::fluent_builders::Encrypt::set_plaintext): <p>Data to be encrypted.</p>
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::Encrypt::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::Encrypt::set_encryption_context): <p>Specifies the encryption context that will be used to encrypt the data. An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. </p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::Encrypt::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::Encrypt::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`encryption_algorithm(EncryptionAlgorithmSpec)`](crate::client::fluent_builders::Encrypt::encryption_algorithm) / [`set_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::client::fluent_builders::Encrypt::set_encryption_algorithm): <p>Specifies the encryption algorithm that KMS will use to encrypt the plaintext message. The algorithm must be compatible with the KMS key that you specify.</p>  <p>This parameter is required only for asymmetric KMS keys. The default value, <code>SYMMETRIC_DEFAULT</code>, is the algorithm used for symmetric encryption KMS keys. If you are using an asymmetric KMS key, we recommend RSAES_OAEP_SHA_256.</p>  <p>The SM2PKE algorithm is only available in China Regions.</p>
    /// - On success, responds with [`EncryptOutput`](crate::output::EncryptOutput) with field(s):
    ///   - [`ciphertext_blob(Option<Blob>)`](crate::output::EncryptOutput::ciphertext_blob): <p>The encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`key_id(Option<String>)`](crate::output::EncryptOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that was used to encrypt the plaintext.</p>
    ///   - [`encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::output::EncryptOutput::encryption_algorithm): <p>The encryption algorithm that was used to encrypt the plaintext.</p>
    /// - On failure, responds with [`SdkError<EncryptError>`](crate::error::EncryptError)
    pub fn encrypt(&self) -> crate::client::fluent_builders::Encrypt {
        crate::client::fluent_builders::Encrypt::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateDataKey`](crate::client::fluent_builders::GenerateDataKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateDataKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateDataKey::set_key_id): <p>Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::GenerateDataKey::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GenerateDataKey::set_encryption_context): <p>Specifies the encryption context that will be used when encrypting the data key.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`number_of_bytes(i32)`](crate::client::fluent_builders::GenerateDataKey::number_of_bytes) / [`set_number_of_bytes(Option<i32>)`](crate::client::fluent_builders::GenerateDataKey::set_number_of_bytes): <p>Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data keys, use the <code>KeySpec</code> parameter.</p>  <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code> parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    ///   - [`key_spec(DataKeySpec)`](crate::client::fluent_builders::GenerateDataKey::key_spec) / [`set_key_spec(Option<DataKeySpec>)`](crate::client::fluent_builders::GenerateDataKey::set_key_spec): <p>Specifies the length of the data key. Use <code>AES_128</code> to generate a 128-bit symmetric key, or <code>AES_256</code> to generate a 256-bit symmetric key.</p>  <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code> parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateDataKey::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateDataKey::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateDataKeyOutput`](crate::output::GenerateDataKeyOutput) with field(s):
    ///   - [`ciphertext_blob(Option<Blob>)`](crate::output::GenerateDataKeyOutput::ciphertext_blob): <p>The encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`plaintext(Option<Blob>)`](crate::output::GenerateDataKeyOutput::plaintext): <p>The plaintext data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateDataKeyOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that encrypted the data key.</p>
    /// - On failure, responds with [`SdkError<GenerateDataKeyError>`](crate::error::GenerateDataKeyError)
    pub fn generate_data_key(&self) -> crate::client::fluent_builders::GenerateDataKey {
        crate::client::fluent_builders::GenerateDataKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateDataKeyPair`](crate::client::fluent_builders::GenerateDataKeyPair) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::GenerateDataKeyPair::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GenerateDataKeyPair::set_encryption_context): <p>Specifies the encryption context that will be used when encrypting the private key in the data key pair.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateDataKeyPair::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateDataKeyPair::set_key_id): <p>Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`key_pair_spec(DataKeyPairSpec)`](crate::client::fluent_builders::GenerateDataKeyPair::key_pair_spec) / [`set_key_pair_spec(Option<DataKeyPairSpec>)`](crate::client::fluent_builders::GenerateDataKeyPair::set_key_pair_spec): <p>Determines the type of data key pair that is generated. </p>  <p>The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateDataKeyPair::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateDataKeyPair::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateDataKeyPairOutput`](crate::output::GenerateDataKeyPairOutput) with field(s):
    ///   - [`private_key_ciphertext_blob(Option<Blob>)`](crate::output::GenerateDataKeyPairOutput::private_key_ciphertext_blob): <p>The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`private_key_plaintext(Option<Blob>)`](crate::output::GenerateDataKeyPairOutput::private_key_plaintext): <p>The plaintext copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`public_key(Option<Blob>)`](crate::output::GenerateDataKeyPairOutput::public_key): <p>The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateDataKeyPairOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that encrypted the private key.</p>
    ///   - [`key_pair_spec(Option<DataKeyPairSpec>)`](crate::output::GenerateDataKeyPairOutput::key_pair_spec): <p>The type of data key pair that was generated.</p>
    /// - On failure, responds with [`SdkError<GenerateDataKeyPairError>`](crate::error::GenerateDataKeyPairError)
    pub fn generate_data_key_pair(&self) -> crate::client::fluent_builders::GenerateDataKeyPair {
        crate::client::fluent_builders::GenerateDataKeyPair::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateDataKeyPairWithoutPlaintext`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::set_encryption_context): <p>Specifies the encryption context that will be used when encrypting the private key in the data key pair.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::set_key_id): <p>Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the <code>DescribeKey</code> operation. </p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`key_pair_spec(DataKeyPairSpec)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::key_pair_spec) / [`set_key_pair_spec(Option<DataKeyPairSpec>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::set_key_pair_spec): <p>Determines the type of data key pair that is generated.</p>  <p>The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateDataKeyPairWithoutPlaintextOutput`](crate::output::GenerateDataKeyPairWithoutPlaintextOutput) with field(s):
    ///   - [`private_key_ciphertext_blob(Option<Blob>)`](crate::output::GenerateDataKeyPairWithoutPlaintextOutput::private_key_ciphertext_blob): <p>The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`public_key(Option<Blob>)`](crate::output::GenerateDataKeyPairWithoutPlaintextOutput::public_key): <p>The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateDataKeyPairWithoutPlaintextOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that encrypted the private key.</p>
    ///   - [`key_pair_spec(Option<DataKeyPairSpec>)`](crate::output::GenerateDataKeyPairWithoutPlaintextOutput::key_pair_spec): <p>The type of data key pair that was generated.</p>
    /// - On failure, responds with [`SdkError<GenerateDataKeyPairWithoutPlaintextError>`](crate::error::GenerateDataKeyPairWithoutPlaintextError)
    pub fn generate_data_key_pair_without_plaintext(
        &self,
    ) -> crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext {
        crate::client::fluent_builders::GenerateDataKeyPairWithoutPlaintext::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`GenerateDataKeyWithoutPlaintext`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::set_key_id): <p>Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::encryption_context) / [`set_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::set_encryption_context): <p>Specifies the encryption context that will be used when encrypting the data key.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`key_spec(DataKeySpec)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::key_spec) / [`set_key_spec(Option<DataKeySpec>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::set_key_spec): <p>The length of the data key. Use <code>AES_128</code> to generate a 128-bit symmetric key, or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
    ///   - [`number_of_bytes(i32)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::number_of_bytes) / [`set_number_of_bytes(Option<i32>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::set_number_of_bytes): <p>The length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the <code>KeySpec</code> field instead of this one.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateDataKeyWithoutPlaintextOutput`](crate::output::GenerateDataKeyWithoutPlaintextOutput) with field(s):
    ///   - [`ciphertext_blob(Option<Blob>)`](crate::output::GenerateDataKeyWithoutPlaintextOutput::ciphertext_blob): <p>The encrypted data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateDataKeyWithoutPlaintextOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that encrypted the data key.</p>
    /// - On failure, responds with [`SdkError<GenerateDataKeyWithoutPlaintextError>`](crate::error::GenerateDataKeyWithoutPlaintextError)
    pub fn generate_data_key_without_plaintext(
        &self,
    ) -> crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext {
        crate::client::fluent_builders::GenerateDataKeyWithoutPlaintext::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateMac`](crate::client::fluent_builders::GenerateMac) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`message(Blob)`](crate::client::fluent_builders::GenerateMac::message) / [`set_message(Option<Blob>)`](crate::client::fluent_builders::GenerateMac::set_message): <p>The message to be hashed. Specify a message of up to 4,096 bytes. </p>  <p> <code>GenerateMac</code> and <code>VerifyMac</code> do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GenerateMac::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GenerateMac::set_key_id): <p>The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.</p>  <p>To identify an HMAC KMS key, use the <code>DescribeKey</code> operation and see the <code>KeySpec</code> field in the response.</p>
    ///   - [`mac_algorithm(MacAlgorithmSpec)`](crate::client::fluent_builders::GenerateMac::mac_algorithm) / [`set_mac_algorithm(Option<MacAlgorithmSpec>)`](crate::client::fluent_builders::GenerateMac::set_mac_algorithm): <p>The MAC algorithm used in the operation.</p>  <p> The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the <code>DescribeKey</code> operation and see the <code>MacAlgorithms</code> field in the <code>DescribeKey</code> response.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GenerateMac::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GenerateMac::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GenerateMacOutput`](crate::output::GenerateMacOutput) with field(s):
    ///   - [`mac(Option<Blob>)`](crate::output::GenerateMacOutput::mac): <p>The hash-based message authentication code (HMAC) that was generated for the specified message, HMAC KMS key, and MAC algorithm.</p>  <p>This is the standard, raw HMAC defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.</p>
    ///   - [`mac_algorithm(Option<MacAlgorithmSpec>)`](crate::output::GenerateMacOutput::mac_algorithm): <p>The MAC algorithm that was used to generate the HMAC.</p>
    ///   - [`key_id(Option<String>)`](crate::output::GenerateMacOutput::key_id): <p>The HMAC KMS key used in the operation.</p>
    /// - On failure, responds with [`SdkError<GenerateMacError>`](crate::error::GenerateMacError)
    pub fn generate_mac(&self) -> crate::client::fluent_builders::GenerateMac {
        crate::client::fluent_builders::GenerateMac::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateRandom`](crate::client::fluent_builders::GenerateRandom) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`number_of_bytes(i32)`](crate::client::fluent_builders::GenerateRandom::number_of_bytes) / [`set_number_of_bytes(Option<i32>)`](crate::client::fluent_builders::GenerateRandom::set_number_of_bytes): <p>The length of the random byte string. This parameter is required.</p>
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::GenerateRandom::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::GenerateRandom::set_custom_key_store_id): <p>Generates the random byte string in the CloudHSM cluster that is associated with the specified CloudHSM key store. To find the ID of a custom key store, use the <code>DescribeCustomKeyStores</code> operation.</p>  <p>External key store IDs are not valid for this parameter. If you specify the ID of an external key store, <code>GenerateRandom</code> throws an <code>UnsupportedOperationException</code>.</p>
    /// - On success, responds with [`GenerateRandomOutput`](crate::output::GenerateRandomOutput) with field(s):
    ///   - [`plaintext(Option<Blob>)`](crate::output::GenerateRandomOutput::plaintext): <p>The random byte string. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    /// - On failure, responds with [`SdkError<GenerateRandomError>`](crate::error::GenerateRandomError)
    pub fn generate_random(&self) -> crate::client::fluent_builders::GenerateRandom {
        crate::client::fluent_builders::GenerateRandom::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetKeyPolicy`](crate::client::fluent_builders::GetKeyPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GetKeyPolicy::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GetKeyPolicy::set_key_id): <p>Gets the key policy for the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::GetKeyPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::GetKeyPolicy::set_policy_name): <p>Specifies the name of the key policy. The only valid name is <code>default</code>. To get the names of key policies, use <code>ListKeyPolicies</code>.</p>
    /// - On success, responds with [`GetKeyPolicyOutput`](crate::output::GetKeyPolicyOutput) with field(s):
    ///   - [`policy(Option<String>)`](crate::output::GetKeyPolicyOutput::policy): <p>A key policy document in JSON format.</p>
    /// - On failure, responds with [`SdkError<GetKeyPolicyError>`](crate::error::GetKeyPolicyError)
    pub fn get_key_policy(&self) -> crate::client::fluent_builders::GetKeyPolicy {
        crate::client::fluent_builders::GetKeyPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetKeyRotationStatus`](crate::client::fluent_builders::GetKeyRotationStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GetKeyRotationStatus::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GetKeyRotationStatus::set_key_id): <p>Gets the rotation status for the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    /// - On success, responds with [`GetKeyRotationStatusOutput`](crate::output::GetKeyRotationStatusOutput) with field(s):
    ///   - [`key_rotation_enabled(bool)`](crate::output::GetKeyRotationStatusOutput::key_rotation_enabled): <p>A Boolean value that specifies whether key rotation is enabled.</p>
    /// - On failure, responds with [`SdkError<GetKeyRotationStatusError>`](crate::error::GetKeyRotationStatusError)
    pub fn get_key_rotation_status(&self) -> crate::client::fluent_builders::GetKeyRotationStatus {
        crate::client::fluent_builders::GetKeyRotationStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetParametersForImport`](crate::client::fluent_builders::GetParametersForImport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GetParametersForImport::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GetParametersForImport::set_key_id): <p>The identifier of the symmetric encryption KMS key into which you will import key material. The <code>Origin</code> of the KMS key must be <code>EXTERNAL</code>.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`wrapping_algorithm(AlgorithmSpec)`](crate::client::fluent_builders::GetParametersForImport::wrapping_algorithm) / [`set_wrapping_algorithm(Option<AlgorithmSpec>)`](crate::client::fluent_builders::GetParametersForImport::set_wrapping_algorithm): <p>The algorithm you will use to encrypt the key material before importing it with <code>ImportKeyMaterial</code>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html">Encrypt the Key Material</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`wrapping_key_spec(WrappingKeySpec)`](crate::client::fluent_builders::GetParametersForImport::wrapping_key_spec) / [`set_wrapping_key_spec(Option<WrappingKeySpec>)`](crate::client::fluent_builders::GetParametersForImport::set_wrapping_key_spec): <p>The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public keys are supported.</p>
    /// - On success, responds with [`GetParametersForImportOutput`](crate::output::GetParametersForImportOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::GetParametersForImportOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key to use in a subsequent <code>ImportKeyMaterial</code> request. This is the same KMS key specified in the <code>GetParametersForImport</code> request.</p>
    ///   - [`import_token(Option<Blob>)`](crate::output::GetParametersForImportOutput::import_token): <p>The import token to send in a subsequent <code>ImportKeyMaterial</code> request.</p>
    ///   - [`public_key(Option<Blob>)`](crate::output::GetParametersForImportOutput::public_key): <p>The public key to use to encrypt the key material before importing it with <code>ImportKeyMaterial</code>.</p>
    ///   - [`parameters_valid_to(Option<DateTime>)`](crate::output::GetParametersForImportOutput::parameters_valid_to): <p>The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an <code>ImportKeyMaterial</code> request and you must send another <code>GetParametersForImport</code> request to get new ones.</p>
    /// - On failure, responds with [`SdkError<GetParametersForImportError>`](crate::error::GetParametersForImportError)
    pub fn get_parameters_for_import(
        &self,
    ) -> crate::client::fluent_builders::GetParametersForImport {
        crate::client::fluent_builders::GetParametersForImport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPublicKey`](crate::client::fluent_builders::GetPublicKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::GetPublicKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::GetPublicKey::set_key_id): <p>Identifies the asymmetric KMS key that includes the public key.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::GetPublicKey::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::GetPublicKey::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`GetPublicKeyOutput`](crate::output::GetPublicKeyOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::GetPublicKeyOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric KMS key from which the public key was downloaded.</p>
    ///   - [`public_key(Option<Blob>)`](crate::output::GetPublicKeyOutput::public_key): <p>The exported public key. </p>  <p>The value is a DER-encoded X.509 public key, also known as <code>SubjectPublicKeyInfo</code> (SPKI), as defined in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>  <p></p>
    ///   - [`customer_master_key_spec(Option<CustomerMasterKeySpec>)`](crate::output::GetPublicKeyOutput::customer_master_key_spec): <p>Instead, use the <code>KeySpec</code> field in the <code>GetPublicKey</code> response.</p>  <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> fields have the same value. We recommend that you use the <code>KeySpec</code> field in your code. However, to avoid breaking changes, KMS supports both fields.</p>
    ///   - [`key_spec(Option<KeySpec>)`](crate::output::GetPublicKeyOutput::key_spec): <p>The type of the of the public key that was downloaded.</p>
    ///   - [`key_usage(Option<KeyUsageType>)`](crate::output::GetPublicKeyOutput::key_usage): <p>The permitted use of the public key. Valid values are <code>ENCRYPT_DECRYPT</code> or <code>SIGN_VERIFY</code>. </p>  <p>This information is critical. If a public key with <code>SIGN_VERIFY</code> key usage encrypts data outside of KMS, the ciphertext cannot be decrypted. </p>
    ///   - [`encryption_algorithms(Option<Vec<EncryptionAlgorithmSpec>>)`](crate::output::GetPublicKeyOutput::encryption_algorithms): <p>The encryption algorithms that KMS supports for this key. </p>  <p>This information is critical. If a public key encrypts data outside of KMS by using an unsupported encryption algorithm, the ciphertext cannot be decrypted. </p>  <p>This field appears in the response only when the <code>KeyUsage</code> of the public key is <code>ENCRYPT_DECRYPT</code>.</p>
    ///   - [`signing_algorithms(Option<Vec<SigningAlgorithmSpec>>)`](crate::output::GetPublicKeyOutput::signing_algorithms): <p>The signing algorithms that KMS supports for this key.</p>  <p>This field appears in the response only when the <code>KeyUsage</code> of the public key is <code>SIGN_VERIFY</code>.</p>
    /// - On failure, responds with [`SdkError<GetPublicKeyError>`](crate::error::GetPublicKeyError)
    pub fn get_public_key(&self) -> crate::client::fluent_builders::GetPublicKey {
        crate::client::fluent_builders::GetPublicKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportKeyMaterial`](crate::client::fluent_builders::ImportKeyMaterial) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ImportKeyMaterial::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ImportKeyMaterial::set_key_id): <p>The identifier of the symmetric encryption KMS key that receives the imported key material. This must be the same KMS key specified in the <code>KeyID</code> parameter of the corresponding <code>GetParametersForImport</code> request. The <code>Origin</code> of the KMS key must be <code>EXTERNAL</code>. You cannot perform this operation on an asymmetric KMS key, an HMAC KMS key, a KMS key in a custom key store, or on a KMS key in a different Amazon Web Services account</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`import_token(Blob)`](crate::client::fluent_builders::ImportKeyMaterial::import_token) / [`set_import_token(Option<Blob>)`](crate::client::fluent_builders::ImportKeyMaterial::set_import_token): <p>The import token that you received in the response to a previous <code>GetParametersForImport</code> request. It must be from the same response that contained the public key that you used to encrypt the key material.</p>
    ///   - [`encrypted_key_material(Blob)`](crate::client::fluent_builders::ImportKeyMaterial::encrypted_key_material) / [`set_encrypted_key_material(Option<Blob>)`](crate::client::fluent_builders::ImportKeyMaterial::set_encrypted_key_material): <p>The encrypted key material to import. The key material must be encrypted with the public wrapping key that <code>GetParametersForImport</code> returned, using the wrapping algorithm that you specified in the same <code>GetParametersForImport</code> request.</p>
    ///   - [`valid_to(DateTime)`](crate::client::fluent_builders::ImportKeyMaterial::valid_to) / [`set_valid_to(Option<DateTime>)`](crate::client::fluent_builders::ImportKeyMaterial::set_valid_to): <p>The date and time when the imported key material expires. This parameter is required when the value of the <code>ExpirationModel</code> parameter is <code>KEY_MATERIAL_EXPIRES</code>. Otherwise it is not valid.</p>  <p>The value of this parameter must be a future date and time. The maximum value is 365 days from the request date.</p>  <p>When the key material expires, KMS deletes the key material from the KMS key. Without its key material, the KMS key is unusable. To use the KMS key in cryptographic operations, you must reimport the same key material.</p>  <p>You cannot change the <code>ExpirationModel</code> or <code>ValidTo</code> values for the current import after the request completes. To change either value, you must delete (<code>DeleteImportedKeyMaterial</code>) and reimport the key material.</p>
    ///   - [`expiration_model(ExpirationModelType)`](crate::client::fluent_builders::ImportKeyMaterial::expiration_model) / [`set_expiration_model(Option<ExpirationModelType>)`](crate::client::fluent_builders::ImportKeyMaterial::set_expiration_model): <p>Specifies whether the key material expires. The default is <code>KEY_MATERIAL_EXPIRES</code>.</p>  <p>When the value of <code>ExpirationModel</code> is <code>KEY_MATERIAL_EXPIRES</code>, you must specify a value for the <code>ValidTo</code> parameter. When value is <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>, you must omit the <code>ValidTo</code> parameter.</p>  <p>You cannot change the <code>ExpirationModel</code> or <code>ValidTo</code> values for the current import after the request completes. To change either value, you must delete (<code>DeleteImportedKeyMaterial</code>) and reimport the key material.</p>
    /// - On success, responds with [`ImportKeyMaterialOutput`](crate::output::ImportKeyMaterialOutput)

    /// - On failure, responds with [`SdkError<ImportKeyMaterialError>`](crate::error::ImportKeyMaterialError)
    pub fn import_key_material(&self) -> crate::client::fluent_builders::ImportKeyMaterial {
        crate::client::fluent_builders::ImportKeyMaterial::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAliases`](crate::client::fluent_builders::ListAliases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAliases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ListAliases::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ListAliases::set_key_id): <p>Lists only aliases that are associated with the specified KMS key. Enter a KMS key in your Amazon Web Services account. </p>  <p>This parameter is optional. If you omit it, <code>ListAliases</code> returns all aliases in the account and Region.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListAliases::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListAliases::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListAliases::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListAliases::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    /// - On success, responds with [`ListAliasesOutput`](crate::output::ListAliasesOutput) with field(s):
    ///   - [`aliases(Option<Vec<AliasListEntry>>)`](crate::output::ListAliasesOutput::aliases): <p>A list of aliases.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListAliasesOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::ListAliasesOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListAliasesError>`](crate::error::ListAliasesError)
    pub fn list_aliases(&self) -> crate::client::fluent_builders::ListAliases {
        crate::client::fluent_builders::ListAliases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGrants`](crate::client::fluent_builders::ListGrants) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListGrants::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGrants::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListGrants::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListGrants::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListGrants::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ListGrants::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ListGrants::set_key_id): <p>Returns only grants for the specified KMS key. This parameter is required.</p>  <p>Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`grant_id(impl Into<String>)`](crate::client::fluent_builders::ListGrants::grant_id) / [`set_grant_id(Option<String>)`](crate::client::fluent_builders::ListGrants::set_grant_id): <p>Returns only the grant with the specified grant ID. The grant ID uniquely identifies the grant. </p>
    ///   - [`grantee_principal(impl Into<String>)`](crate::client::fluent_builders::ListGrants::grantee_principal) / [`set_grantee_principal(Option<String>)`](crate::client::fluent_builders::ListGrants::set_grantee_principal): <p>Returns only grants where the specified principal is the grantee principal for the grant.</p>
    /// - On success, responds with [`ListGrantsOutput`](crate::output::ListGrantsOutput) with field(s):
    ///   - [`grants(Option<Vec<GrantListEntry>>)`](crate::output::ListGrantsOutput::grants): <p>A list of grants.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListGrantsOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::ListGrantsOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListGrantsError>`](crate::error::ListGrantsError)
    pub fn list_grants(&self) -> crate::client::fluent_builders::ListGrants {
        crate::client::fluent_builders::ListGrants::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListKeyPolicies`](crate::client::fluent_builders::ListKeyPolicies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListKeyPolicies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ListKeyPolicies::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ListKeyPolicies::set_key_id): <p>Gets the names of key policies for the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListKeyPolicies::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListKeyPolicies::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>  <p>Only one policy can be attached to a key.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListKeyPolicies::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListKeyPolicies::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    /// - On success, responds with [`ListKeyPoliciesOutput`](crate::output::ListKeyPoliciesOutput) with field(s):
    ///   - [`policy_names(Option<Vec<String>>)`](crate::output::ListKeyPoliciesOutput::policy_names): <p>A list of key policy names. The only valid value is <code>default</code>.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListKeyPoliciesOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::ListKeyPoliciesOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListKeyPoliciesError>`](crate::error::ListKeyPoliciesError)
    pub fn list_key_policies(&self) -> crate::client::fluent_builders::ListKeyPolicies {
        crate::client::fluent_builders::ListKeyPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListKeys`](crate::client::fluent_builders::ListKeys) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListKeys::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListKeys::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListKeys::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListKeys::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListKeys::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    /// - On success, responds with [`ListKeysOutput`](crate::output::ListKeysOutput) with field(s):
    ///   - [`keys(Option<Vec<KeyListEntry>>)`](crate::output::ListKeysOutput::keys): <p>A list of KMS keys.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListKeysOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::ListKeysOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListKeysError>`](crate::error::ListKeysError)
    pub fn list_keys(&self) -> crate::client::fluent_builders::ListKeys {
        crate::client::fluent_builders::ListKeys::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListResourceTags`](crate::client::fluent_builders::ListResourceTags) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListResourceTags::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ListResourceTags::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ListResourceTags::set_key_id): <p>Gets tags on the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListResourceTags::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListResourceTags::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListResourceTags::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListResourceTags::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>  <p>Do not attempt to construct this value. Use only the value of <code>NextMarker</code> from the truncated response you just received.</p>
    /// - On success, responds with [`ListResourceTagsOutput`](crate::output::ListResourceTagsOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListResourceTagsOutput::tags): <p>A list of tags. Each tag consists of a tag key and a tag value.</p> <note>   <p>Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC for KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>  </note>
    ///   - [`next_marker(Option<String>)`](crate::output::ListResourceTagsOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>  <p>Do not assume or infer any information from this value.</p>
    ///   - [`truncated(bool)`](crate::output::ListResourceTagsOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListResourceTagsError>`](crate::error::ListResourceTagsError)
    pub fn list_resource_tags(&self) -> crate::client::fluent_builders::ListResourceTags {
        crate::client::fluent_builders::ListResourceTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRetirableGrants`](crate::client::fluent_builders::ListRetirableGrants) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRetirableGrants::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRetirableGrants::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListRetirableGrants::set_limit): <p>Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.</p>  <p>This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListRetirableGrants::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListRetirableGrants::set_marker): <p>Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of <code>NextMarker</code> from the truncated response you just received.</p>
    ///   - [`retiring_principal(impl Into<String>)`](crate::client::fluent_builders::ListRetirableGrants::retiring_principal) / [`set_retiring_principal(Option<String>)`](crate::client::fluent_builders::ListRetirableGrants::set_retiring_principal): <p>The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account.</p>  <p>To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">Amazon Web Services Identity and Access Management (IAM)</a> in the Example ARNs section of the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`ListRetirableGrantsOutput`](crate::output::ListRetirableGrantsOutput) with field(s):
    ///   - [`grants(Option<Vec<GrantListEntry>>)`](crate::output::ListRetirableGrantsOutput::grants): <p>A list of grants.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListRetirableGrantsOutput::next_marker): <p>When <code>Truncated</code> is true, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    ///   - [`truncated(bool)`](crate::output::ListRetirableGrantsOutput::truncated): <p>A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a subsequent request.</p>
    /// - On failure, responds with [`SdkError<ListRetirableGrantsError>`](crate::error::ListRetirableGrantsError)
    pub fn list_retirable_grants(&self) -> crate::client::fluent_builders::ListRetirableGrants {
        crate::client::fluent_builders::ListRetirableGrants::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutKeyPolicy`](crate::client::fluent_builders::PutKeyPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::PutKeyPolicy::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::PutKeyPolicy::set_key_id): <p>Sets the key policy on the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::PutKeyPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::PutKeyPolicy::set_policy_name): <p>The name of the key policy. The only valid value is <code>default</code>.</p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::PutKeyPolicy::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::PutKeyPolicy::set_policy): <p>The key policy to attach to the KMS key.</p>  <p>The key policy must meet the following criteria:</p>  <ul>   <li> <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy must allow the principal that is making the <code>PutKeyPolicy</code> request to make a subsequent <code>PutKeyPolicy</code> request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>Key Management Service Developer Guide</i>.</p> </li>   <li> <p>Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> </li>  </ul>  <p>A key policy document can include only the following characters:</p>  <ul>   <li> <p>Printable ASCII characters from the space character (<code>\u0020</code>) through the end of the ASCII character range.</p> </li>   <li> <p>Printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>).</p> </li>   <li> <p>The tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) special characters</p> </li>  </ul>  <p>For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key policies in KMS</a> in the <i>Key Management Service Developer Guide</i>.For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</p>
    ///   - [`bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::PutKeyPolicy::bypass_policy_lockout_safety_check) / [`set_bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::PutKeyPolicy::set_bypass_policy_lockout_safety_check): <p>A flag to indicate whether to bypass the key policy lockout safety check.</p> <important>   <p>Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.</p>   <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>Key Management Service Developer Guide</i>.</p>  </important>  <p>Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent <code>PutKeyPolicy</code> request on the KMS key.</p>  <p>The default value is false.</p>
    /// - On success, responds with [`PutKeyPolicyOutput`](crate::output::PutKeyPolicyOutput)

    /// - On failure, responds with [`SdkError<PutKeyPolicyError>`](crate::error::PutKeyPolicyError)
    pub fn put_key_policy(&self) -> crate::client::fluent_builders::PutKeyPolicy {
        crate::client::fluent_builders::PutKeyPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReEncrypt`](crate::client::fluent_builders::ReEncrypt) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ciphertext_blob(Blob)`](crate::client::fluent_builders::ReEncrypt::ciphertext_blob) / [`set_ciphertext_blob(Option<Blob>)`](crate::client::fluent_builders::ReEncrypt::set_ciphertext_blob): <p>Ciphertext of the data to reencrypt.</p>
    ///   - [`source_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::ReEncrypt::source_encryption_context) / [`set_source_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::ReEncrypt::set_source_encryption_context): <p>Specifies the encryption context to use to decrypt the ciphertext. Enter the same encryption context that was used to encrypt the ciphertext.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`source_key_id(impl Into<String>)`](crate::client::fluent_builders::ReEncrypt::source_key_id) / [`set_source_key_id(Option<String>)`](crate::client::fluent_builders::ReEncrypt::set_source_key_id): <p>Specifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted.</p>  <p>Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the <code>ReEncrypt</code> operation throws an <code>IncorrectKeyException</code>.</p>  <p>This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`destination_key_id(impl Into<String>)`](crate::client::fluent_builders::ReEncrypt::destination_key_id) / [`set_destination_key_id(Option<String>)`](crate::client::fluent_builders::ReEncrypt::set_destination_key_id): <p>A unique identifier for the KMS key that is used to reencrypt the data. Specify a symmetric encryption KMS key or an asymmetric KMS key with a <code>KeyUsage</code> value of <code>ENCRYPT_DECRYPT</code>. To find the <code>KeyUsage</code> value of a KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`destination_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::ReEncrypt::destination_encryption_context) / [`set_destination_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::ReEncrypt::set_destination_encryption_context): <p>Specifies that encryption context to use when the reencrypting the data.</p>  <p>A destination encryption context is valid only when the destination KMS key is a symmetric encryption KMS key. The standard ciphertext format for asymmetric KMS keys does not include fields for metadata.</p>  <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represent additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption context</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`source_encryption_algorithm(EncryptionAlgorithmSpec)`](crate::client::fluent_builders::ReEncrypt::source_encryption_algorithm) / [`set_source_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::client::fluent_builders::ReEncrypt::set_source_encryption_algorithm): <p>Specifies the encryption algorithm that KMS will use to decrypt the ciphertext before it is reencrypted. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the algorithm used for symmetric encryption KMS keys.</p>  <p>Specify the same algorithm that was used to encrypt the ciphertext. If you specify a different algorithm, the decrypt attempt fails.</p>  <p>This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.</p>
    ///   - [`destination_encryption_algorithm(EncryptionAlgorithmSpec)`](crate::client::fluent_builders::ReEncrypt::destination_encryption_algorithm) / [`set_destination_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::client::fluent_builders::ReEncrypt::set_destination_encryption_algorithm): <p>Specifies the encryption algorithm that KMS will use to reecrypt the data after it has decrypted it. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the encryption algorithm used for symmetric encryption KMS keys.</p>  <p>This parameter is required only when the destination KMS key is an asymmetric KMS key.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::ReEncrypt::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::ReEncrypt::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`ReEncryptOutput`](crate::output::ReEncryptOutput) with field(s):
    ///   - [`ciphertext_blob(Option<Blob>)`](crate::output::ReEncryptOutput::ciphertext_blob): <p>The reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`source_key_id(Option<String>)`](crate::output::ReEncryptOutput::source_key_id): <p>Unique identifier of the KMS key used to originally encrypt the data.</p>
    ///   - [`key_id(Option<String>)`](crate::output::ReEncryptOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key that was used to reencrypt the data.</p>
    ///   - [`source_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::output::ReEncryptOutput::source_encryption_algorithm): <p>The encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.</p>
    ///   - [`destination_encryption_algorithm(Option<EncryptionAlgorithmSpec>)`](crate::output::ReEncryptOutput::destination_encryption_algorithm): <p>The encryption algorithm that was used to reencrypt the data.</p>
    /// - On failure, responds with [`SdkError<ReEncryptError>`](crate::error::ReEncryptError)
    pub fn re_encrypt(&self) -> crate::client::fluent_builders::ReEncrypt {
        crate::client::fluent_builders::ReEncrypt::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReplicateKey`](crate::client::fluent_builders::ReplicateKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ReplicateKey::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ReplicateKey::set_key_id): <p>Identifies the multi-Region primary key that is being replicated. To determine whether a KMS key is a multi-Region primary key, use the <code>DescribeKey</code> operation to check the value of the <code>MultiRegionKeyType</code> property.</p>  <p>Specify the key ID or key ARN of a multi-Region primary key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>mrk-1234abcd12ab34cd56ef1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`replica_region(impl Into<String>)`](crate::client::fluent_builders::ReplicateKey::replica_region) / [`set_replica_region(Option<String>)`](crate::client::fluent_builders::ReplicateKey::set_replica_region): <p>The Region ID of the Amazon Web Services Region for this replica key. </p>  <p>Enter the Region ID, such as <code>us-east-1</code> or <code>ap-southeast-2</code>. For a list of Amazon Web Services Regions in which KMS is supported, see <a href="https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region">KMS service endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> <note>   <p>HMAC KMS keys are not supported in all Amazon Web Services Regions. If you try to replicate an HMAC KMS key in an Amazon Web Services Region in which HMAC keys are not supported, the <code>ReplicateKey</code> operation returns an <code>UnsupportedOperationException</code>. For a list of Regions in which HMAC KMS keys are supported, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>  </note>  <p>The replica must be in a different Amazon Web Services Region than its primary key and other replicas of that primary key, but in the same Amazon Web Services partition. KMS must be available in the replica Region. If the Region is not enabled by default, the Amazon Web Services account must be enabled in the Region. For information about Amazon Web Services partitions, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For information about enabling and disabling Regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable">Enabling a Region</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-disable">Disabling a Region</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::ReplicateKey::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::ReplicateKey::set_policy): <p>The key policy to attach to the KMS key. This parameter is optional. If you do not provide a key policy, KMS attaches the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">default key policy</a> to the KMS key.</p>  <p>The key policy is not a shared property of multi-Region keys. You can specify the same key policy or a different key policy for each key in a set of related multi-Region keys. KMS does not synchronize this property.</p>  <p>If you provide a key policy, it must meet the following criteria:</p>  <ul>   <li> <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy must give the caller <code>kms:PutKeyPolicy</code> permission on the replica key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i> <i>Key Management Service Developer Guide</i> </i>.</p> </li>   <li> <p>Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</p> </li>  </ul>  <p>A key policy document can include only the following characters:</p>  <ul>   <li> <p>Printable ASCII characters from the space character (<code>\u0020</code>) through the end of the ASCII character range.</p> </li>   <li> <p>Printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>).</p> </li>   <li> <p>The tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) special characters</p> </li>  </ul>  <p>For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key policies in KMS</a> in the <i>Key Management Service Developer Guide</i>. For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</p>
    ///   - [`bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::ReplicateKey::bypass_policy_lockout_safety_check) / [`set_bypass_policy_lockout_safety_check(bool)`](crate::client::fluent_builders::ReplicateKey::set_bypass_policy_lockout_safety_check): <p>A flag to indicate whether to bypass the key policy lockout safety check.</p> <important>   <p>Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.</p>   <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>Key Management Service Developer Guide</i>.</p>  </important>  <p>Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent <code>PutKeyPolicy</code> request on the KMS key.</p>  <p>The default value is false.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::ReplicateKey::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::ReplicateKey::set_description): <p>A description of the KMS key. The default value is an empty string (no description).</p>  <p>The description is not a shared property of multi-Region keys. You can specify the same description or a different description for each key in a set of related multi-Region keys. KMS does not synchronize this property.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::ReplicateKey::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::ReplicateKey::set_tags): <p>Assigns one or more tags to the replica key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the <code>TagResource</code> operation.</p> <note>   <p>Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC for KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>  </note>  <p>To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a> permission in an IAM policy.</p>  <p>Tags are not a shared property of multi-Region keys. You can specify the same tags or different tags for each key in a set of related multi-Region keys. KMS does not synchronize this property.</p>  <p>Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.</p>  <p>When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging Keys</a>.</p>
    /// - On success, responds with [`ReplicateKeyOutput`](crate::output::ReplicateKeyOutput) with field(s):
    ///   - [`replica_key_metadata(Option<KeyMetadata>)`](crate::output::ReplicateKeyOutput::replica_key_metadata): <p>Displays details about the new replica key, including its Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key states of KMS keys</a>. It also includes the ARN and Amazon Web Services Region of its primary key and other replica keys.</p>
    ///   - [`replica_policy(Option<String>)`](crate::output::ReplicateKeyOutput::replica_policy): <p>The key policy of the new replica key. The value is a key policy document in JSON format.</p>
    ///   - [`replica_tags(Option<Vec<Tag>>)`](crate::output::ReplicateKeyOutput::replica_tags): <p>The tags on the new replica key. The value is a list of tag key and tag value pairs.</p>
    /// - On failure, responds with [`SdkError<ReplicateKeyError>`](crate::error::ReplicateKeyError)
    pub fn replicate_key(&self) -> crate::client::fluent_builders::ReplicateKey {
        crate::client::fluent_builders::ReplicateKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RetireGrant`](crate::client::fluent_builders::RetireGrant) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`grant_token(impl Into<String>)`](crate::client::fluent_builders::RetireGrant::grant_token) / [`set_grant_token(Option<String>)`](crate::client::fluent_builders::RetireGrant::set_grant_token): <p>Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency.</p>  <p>Only the <code>CreateGrant</code> operation returns a grant token. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual consistency</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::RetireGrant::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::RetireGrant::set_key_id): <p>The key ARN KMS key associated with the grant. To find the key ARN, use the <code>ListKeys</code> operation.</p>  <p>For example: <code>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p>
    ///   - [`grant_id(impl Into<String>)`](crate::client::fluent_builders::RetireGrant::grant_id) / [`set_grant_id(Option<String>)`](crate::client::fluent_builders::RetireGrant::set_grant_id): <p>Identifies the grant to retire. To get the grant ID, use <code>CreateGrant</code>, <code>ListGrants</code>, or <code>ListRetirableGrants</code>.</p>  <ul>   <li> <p>Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123</p> </li>  </ul>
    /// - On success, responds with [`RetireGrantOutput`](crate::output::RetireGrantOutput)

    /// - On failure, responds with [`SdkError<RetireGrantError>`](crate::error::RetireGrantError)
    pub fn retire_grant(&self) -> crate::client::fluent_builders::RetireGrant {
        crate::client::fluent_builders::RetireGrant::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RevokeGrant`](crate::client::fluent_builders::RevokeGrant) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::RevokeGrant::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::RevokeGrant::set_key_id): <p>A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>  <p>Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`grant_id(impl Into<String>)`](crate::client::fluent_builders::RevokeGrant::grant_id) / [`set_grant_id(Option<String>)`](crate::client::fluent_builders::RevokeGrant::set_grant_id): <p>Identifies the grant to revoke. To get the grant ID, use <code>CreateGrant</code>, <code>ListGrants</code>, or <code>ListRetirableGrants</code>.</p>
    /// - On success, responds with [`RevokeGrantOutput`](crate::output::RevokeGrantOutput)

    /// - On failure, responds with [`SdkError<RevokeGrantError>`](crate::error::RevokeGrantError)
    pub fn revoke_grant(&self) -> crate::client::fluent_builders::RevokeGrant {
        crate::client::fluent_builders::RevokeGrant::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ScheduleKeyDeletion`](crate::client::fluent_builders::ScheduleKeyDeletion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::ScheduleKeyDeletion::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::ScheduleKeyDeletion::set_key_id): <p>The unique identifier of the KMS key to delete.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`pending_window_in_days(i32)`](crate::client::fluent_builders::ScheduleKeyDeletion::pending_window_in_days) / [`set_pending_window_in_days(Option<i32>)`](crate::client::fluent_builders::ScheduleKeyDeletion::set_pending_window_in_days): <p>The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key.</p>  <p>If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.</p>  <p>This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30.</p>
    /// - On success, responds with [`ScheduleKeyDeletionOutput`](crate::output::ScheduleKeyDeletionOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::ScheduleKeyDeletionOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the KMS key whose deletion is scheduled.</p>
    ///   - [`deletion_date(Option<DateTime>)`](crate::output::ScheduleKeyDeletionOutput::deletion_date): <p>The date and time after which KMS deletes the KMS key.</p>  <p>If the KMS key is a multi-Region primary key with replica keys, this field does not appear. The deletion date for the primary key isn't known until its last replica key is deleted.</p>
    ///   - [`key_state(Option<KeyState>)`](crate::output::ScheduleKeyDeletionOutput::key_state): <p>The current status of the KMS key.</p>  <p>For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`pending_window_in_days(Option<i32>)`](crate::output::ScheduleKeyDeletionOutput::pending_window_in_days): <p>The waiting period before the KMS key is deleted. </p>  <p>If the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.</p>
    /// - On failure, responds with [`SdkError<ScheduleKeyDeletionError>`](crate::error::ScheduleKeyDeletionError)
    pub fn schedule_key_deletion(&self) -> crate::client::fluent_builders::ScheduleKeyDeletion {
        crate::client::fluent_builders::ScheduleKeyDeletion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Sign`](crate::client::fluent_builders::Sign) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::Sign::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::Sign::set_key_id): <p>Identifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key to sign the message. The <code>KeyUsage</code> type of the KMS key must be <code>SIGN_VERIFY</code>. To find the <code>KeyUsage</code> of a KMS key, use the <code>DescribeKey</code> operation.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`message(Blob)`](crate::client::fluent_builders::Sign::message) / [`set_message(Option<Blob>)`](crate::client::fluent_builders::Sign::set_message): <p>Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a larger message, provide the message digest.</p>  <p>If you provide a message, KMS generates a hash digest of the message and then signs it.</p>
    ///   - [`message_type(MessageType)`](crate::client::fluent_builders::Sign::message_type) / [`set_message_type(Option<MessageType>)`](crate::client::fluent_builders::Sign::set_message_type): <p>Tells KMS whether the value of the <code>Message</code> parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter <code>DIGEST</code>.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::Sign::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::Sign::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    ///   - [`signing_algorithm(SigningAlgorithmSpec)`](crate::client::fluent_builders::Sign::signing_algorithm) / [`set_signing_algorithm(Option<SigningAlgorithmSpec>)`](crate::client::fluent_builders::Sign::set_signing_algorithm): <p>Specifies the signing algorithm to use when signing the message. </p>  <p>Choose an algorithm that is compatible with the type and size of the specified asymmetric KMS key.</p>
    /// - On success, responds with [`SignOutput`](crate::output::SignOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::SignOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric KMS key that was used to sign the message.</p>
    ///   - [`signature(Option<Blob>)`](crate::output::SignOutput::signature): <p>The cryptographic signature that was generated for the message. </p>  <ul>   <li> <p>When used with the supported RSA signing algorithms, the encoding of this value is defined by <a href="https://tools.ietf.org/html/rfc8017">PKCS #1 in RFC 8017</a>.</p> </li>   <li> <p>When used with the <code>ECDSA_SHA_256</code>, <code>ECDSA_SHA_384</code>, or <code>ECDSA_SHA_512</code> signing algorithms, this value is a DER-encoded object as defined by ANS X9.62–2005 and <a href="https://tools.ietf.org/html/rfc3279#section-2.2.3">RFC 3279 Section 2.2.3</a>. This is the most commonly used signature format and is appropriate for most uses. </p> </li>  </ul>  <p>When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///   - [`signing_algorithm(Option<SigningAlgorithmSpec>)`](crate::output::SignOutput::signing_algorithm): <p>The signing algorithm that was used to sign the message.</p>
    /// - On failure, responds with [`SdkError<SignError>`](crate::error::SignError)
    pub fn sign(&self) -> crate::client::fluent_builders::Sign {
        crate::client::fluent_builders::Sign::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::TagResource::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::TagResource::set_key_id): <p>Identifies a customer managed key in the account and Region.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>One or more tags. </p>  <p>Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string. </p>  <p>You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::UntagResource::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::UntagResource::set_key_id): <p>Identifies the KMS key from which you are removing tags.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>One or more tag keys. Specify only the tag keys, not the tag values.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAlias`](crate::client::fluent_builders::UpdateAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_name(impl Into<String>)`](crate::client::fluent_builders::UpdateAlias::alias_name) / [`set_alias_name(Option<String>)`](crate::client::fluent_builders::UpdateAlias::set_alias_name): <p>Identifies the alias that is changing its KMS key. This value must begin with <code>alias/</code> followed by the alias name, such as <code>alias/ExampleAlias</code>. You cannot use <code>UpdateAlias</code> to change the alias name.</p>
    ///   - [`target_key_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAlias::target_key_id) / [`set_target_key_id(Option<String>)`](crate::client::fluent_builders::UpdateAlias::set_target_key_id): <p>Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a> to associate with the alias. You don't have permission to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed key</a>.</p>  <p>The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage. </p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>  <p>To verify that the alias is mapped to the correct KMS key, use <code>ListAliases</code>.</p>
    /// - On success, responds with [`UpdateAliasOutput`](crate::output::UpdateAliasOutput)

    /// - On failure, responds with [`SdkError<UpdateAliasError>`](crate::error::UpdateAliasError)
    pub fn update_alias(&self) -> crate::client::fluent_builders::UpdateAlias {
        crate::client::fluent_builders::UpdateAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCustomKeyStore`](crate::client::fluent_builders::UpdateCustomKeyStore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`custom_key_store_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::custom_key_store_id) / [`set_custom_key_store_id(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_custom_key_store_id): <p>Identifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the <code>DescribeCustomKeyStores</code> operation.</p>
    ///   - [`new_custom_key_store_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::new_custom_key_store_name) / [`set_new_custom_key_store_name(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_new_custom_key_store_name): <p>Changes the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the Amazon Web Services account.</p>  <p>To change this value, an CloudHSM key store must be disconnected. An external key store can be connected or disconnected.</p>
    ///   - [`key_store_password(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::key_store_password) / [`set_key_store_password(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_key_store_password): <p>Enter the current password of the <code>kmsuser</code> crypto user (CU) in the CloudHSM cluster that is associated with the custom key store. This parameter is valid only for custom key stores with a <code>CustomKeyStoreType</code> of <code>AWS_CLOUDHSM</code>.</p>  <p>This parameter tells KMS the current password of the <code>kmsuser</code> crypto user (CU). It does not set or change the password of any users in the CloudHSM cluster.</p>  <p>To change this value, the CloudHSM key store must be disconnected.</p>
    ///   - [`cloud_hsm_cluster_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::cloud_hsm_cluster_id) / [`set_cloud_hsm_cluster_id(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_cloud_hsm_cluster_id): <p>Associates the custom key store with a related CloudHSM cluster. This parameter is valid only for custom key stores with a <code>CustomKeyStoreType</code> of <code>AWS_CLOUDHSM</code>.</p>  <p>Enter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history and has the same cluster certificate as the original cluster. You cannot use this parameter to associate a custom key store with an unrelated cluster. In addition, the replacement cluster must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">fulfill the requirements</a> for a cluster associated with a custom key store. To view the cluster certificate of a cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>  <p>To change this value, the CloudHSM key store must be disconnected.</p>
    ///   - [`xks_proxy_uri_endpoint(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::xks_proxy_uri_endpoint) / [`set_xks_proxy_uri_endpoint(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_xks_proxy_uri_endpoint): <p>Changes the URI endpoint that KMS uses to connect to your external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>For external key stores with an <code>XksProxyConnectivity</code> value of <code>PUBLIC_ENDPOINT</code>, the protocol must be HTTPS.</p>  <p>For external key stores with an <code>XksProxyConnectivity</code> value of <code>VPC_ENDPOINT_SERVICE</code>, specify <code>https://</code> followed by the private DNS name associated with the VPC endpoint service. Each external key store must use a different private DNS name.</p>  <p>The combined <code>XksProxyUriEndpoint</code> and <code>XksProxyUriPath</code> values must be unique in the Amazon Web Services account and Region.</p>  <p>To change this value, the external key store must be disconnected.</p>
    ///   - [`xks_proxy_uri_path(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::xks_proxy_uri_path) / [`set_xks_proxy_uri_path(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_xks_proxy_uri_path): <p>Changes the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key manager and external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>The value must start with <code>/</code> and must end with <code>/kms/xks/v1</code>, where <code>v1</code> represents the version of the KMS external key store proxy API. You can include an optional prefix between the required elements such as <code>/<i>example</i>/kms/xks/v1</code>.</p>  <p>The combined <code>XksProxyUriEndpoint</code> and <code>XksProxyUriPath</code> values must be unique in the Amazon Web Services account and Region.</p>  <p>You can change this value when the external key store is connected or disconnected.</p>
    ///   - [`xks_proxy_vpc_endpoint_service_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::xks_proxy_vpc_endpoint_service_name) / [`set_xks_proxy_vpc_endpoint_service_name(Option<String>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_xks_proxy_vpc_endpoint_service_name): <p>Changes the name that KMS uses to identify the Amazon VPC endpoint service for your external key store proxy (XKS proxy). This parameter is valid when the <code>CustomKeyStoreType</code> is <code>EXTERNAL_KEY_STORE</code> and the <code>XksProxyConnectivity</code> is <code>VPC_ENDPOINT_SERVICE</code>.</p>  <p>To change this value, the external key store must be disconnected.</p>
    ///   - [`xks_proxy_authentication_credential(XksProxyAuthenticationCredentialType)`](crate::client::fluent_builders::UpdateCustomKeyStore::xks_proxy_authentication_credential) / [`set_xks_proxy_authentication_credential(Option<XksProxyAuthenticationCredentialType>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_xks_proxy_authentication_credential): <p>Changes the credentials that KMS uses to sign requests to the external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a <code>CustomKeyStoreType</code> of <code>EXTERNAL_KEY_STORE</code>.</p>  <p>You must specify both the <code>AccessKeyId</code> and <code>SecretAccessKey</code> value in the authentication credential, even if you are only updating one value.</p>  <p>This parameter doesn't establish or change your authentication credentials on the proxy. It just tells KMS the credential that you established with your external key store proxy. For example, if you rotate the credential on your external key store proxy, you can use this parameter to update the credential in KMS.</p>  <p>You can change this value when the external key store is connected or disconnected.</p>
    ///   - [`xks_proxy_connectivity(XksProxyConnectivityType)`](crate::client::fluent_builders::UpdateCustomKeyStore::xks_proxy_connectivity) / [`set_xks_proxy_connectivity(Option<XksProxyConnectivityType>)`](crate::client::fluent_builders::UpdateCustomKeyStore::set_xks_proxy_connectivity): <p>Changes the connectivity setting for the external key store. To indicate that the external key store proxy uses a Amazon VPC endpoint service to communicate with KMS, specify <code>VPC_ENDPOINT_SERVICE</code>. Otherwise, specify <code>PUBLIC_ENDPOINT</code>.</p>  <p>If you change the <code>XksProxyConnectivity</code> to <code>VPC_ENDPOINT_SERVICE</code>, you must also change the <code>XksProxyUriEndpoint</code> and add an <code>XksProxyVpcEndpointServiceName</code> value. </p>  <p>If you change the <code>XksProxyConnectivity</code> to <code>PUBLIC_ENDPOINT</code>, you must also change the <code>XksProxyUriEndpoint</code> and specify a null or empty string for the <code>XksProxyVpcEndpointServiceName</code> value.</p>  <p>To change this value, the external key store must be disconnected.</p>
    /// - On success, responds with [`UpdateCustomKeyStoreOutput`](crate::output::UpdateCustomKeyStoreOutput)

    /// - On failure, responds with [`SdkError<UpdateCustomKeyStoreError>`](crate::error::UpdateCustomKeyStoreError)
    pub fn update_custom_key_store(&self) -> crate::client::fluent_builders::UpdateCustomKeyStore {
        crate::client::fluent_builders::UpdateCustomKeyStore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateKeyDescription`](crate::client::fluent_builders::UpdateKeyDescription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::UpdateKeyDescription::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::UpdateKeyDescription::set_key_id): <p>Updates the description of the specified KMS key.</p>  <p>Specify the key ID or key ARN of the KMS key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateKeyDescription::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateKeyDescription::set_description): <p>New description for the KMS key.</p>
    /// - On success, responds with [`UpdateKeyDescriptionOutput`](crate::output::UpdateKeyDescriptionOutput)

    /// - On failure, responds with [`SdkError<UpdateKeyDescriptionError>`](crate::error::UpdateKeyDescriptionError)
    pub fn update_key_description(&self) -> crate::client::fluent_builders::UpdateKeyDescription {
        crate::client::fluent_builders::UpdateKeyDescription::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePrimaryRegion`](crate::client::fluent_builders::UpdatePrimaryRegion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::UpdatePrimaryRegion::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::UpdatePrimaryRegion::set_key_id): <p>Identifies the current primary key. When the operation completes, this KMS key will be a replica key.</p>  <p>Specify the key ID or key ARN of a multi-Region primary key.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>mrk-1234abcd12ab34cd56ef1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>.</p>
    ///   - [`primary_region(impl Into<String>)`](crate::client::fluent_builders::UpdatePrimaryRegion::primary_region) / [`set_primary_region(Option<String>)`](crate::client::fluent_builders::UpdatePrimaryRegion::set_primary_region): <p>The Amazon Web Services Region of the new primary key. Enter the Region ID, such as <code>us-east-1</code> or <code>ap-southeast-2</code>. There must be an existing replica key in this Region. </p>  <p>When the operation completes, the multi-Region key in this Region will be the primary key.</p>
    /// - On success, responds with [`UpdatePrimaryRegionOutput`](crate::output::UpdatePrimaryRegionOutput)

    /// - On failure, responds with [`SdkError<UpdatePrimaryRegionError>`](crate::error::UpdatePrimaryRegionError)
    pub fn update_primary_region(&self) -> crate::client::fluent_builders::UpdatePrimaryRegion {
        crate::client::fluent_builders::UpdatePrimaryRegion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Verify`](crate::client::fluent_builders::Verify) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::Verify::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::Verify::set_key_id): <p>Identifies the asymmetric KMS key that will be used to verify the signature. This must be the same KMS key that was used to generate the signature. If you specify a different KMS key, the signature verification fails.</p>  <p>To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.</p>  <p>For example:</p>  <ul>   <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li>   <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li>   <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li>  </ul>  <p>To get the key ID and key ARN for a KMS key, use <code>ListKeys</code> or <code>DescribeKey</code>. To get the alias name and alias ARN, use <code>ListAliases</code>.</p>
    ///   - [`message(Blob)`](crate::client::fluent_builders::Verify::message) / [`set_message(Option<Blob>)`](crate::client::fluent_builders::Verify::set_message): <p>Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the <code>MessageType</code> parameter with a value of <code>DIGEST</code>.</p>  <p>If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.</p>
    ///   - [`message_type(MessageType)`](crate::client::fluent_builders::Verify::message_type) / [`set_message_type(Option<MessageType>)`](crate::client::fluent_builders::Verify::set_message_type): <p>Tells KMS whether the value of the <code>Message</code> parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter <code>DIGEST</code>.</p> <important>   <p>Use the <code>DIGEST</code> value only when the value of the <code>Message</code> parameter is a message digest. If you use the <code>DIGEST</code> value with a raw message, the security of the verification operation can be compromised.</p>  </important>
    ///   - [`signature(Blob)`](crate::client::fluent_builders::Verify::signature) / [`set_signature(Option<Blob>)`](crate::client::fluent_builders::Verify::set_signature): <p>The signature that the <code>Sign</code> operation generated.</p>
    ///   - [`signing_algorithm(SigningAlgorithmSpec)`](crate::client::fluent_builders::Verify::signing_algorithm) / [`set_signing_algorithm(Option<SigningAlgorithmSpec>)`](crate::client::fluent_builders::Verify::set_signing_algorithm): <p>The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::Verify::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::Verify::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`VerifyOutput`](crate::output::VerifyOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::VerifyOutput::key_id): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric KMS key that was used to verify the signature.</p>
    ///   - [`signature_valid(bool)`](crate::output::VerifyOutput::signature_valid): <p>A Boolean value that indicates whether the signature was verified. A value of <code>True</code> indicates that the <code>Signature</code> was produced by signing the <code>Message</code> with the specified <code>KeyID</code> and <code>SigningAlgorithm.</code> If the signature is not verified, the <code>Verify</code> operation fails with a <code>KMSInvalidSignatureException</code> exception. </p>
    ///   - [`signing_algorithm(Option<SigningAlgorithmSpec>)`](crate::output::VerifyOutput::signing_algorithm): <p>The signing algorithm that was used to verify the signature.</p>
    /// - On failure, responds with [`SdkError<VerifyError>`](crate::error::VerifyError)
    pub fn verify(&self) -> crate::client::fluent_builders::Verify {
        crate::client::fluent_builders::Verify::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`VerifyMac`](crate::client::fluent_builders::VerifyMac) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`message(Blob)`](crate::client::fluent_builders::VerifyMac::message) / [`set_message(Option<Blob>)`](crate::client::fluent_builders::VerifyMac::set_message): <p>The message that will be used in the verification. Enter the same message that was used to generate the HMAC.</p>  <p> <code>GenerateMac</code> and <code>VerifyMac</code> do not provide special handling for message digests. If you generated an HMAC for a hash digest of a message, you must verify the HMAC for the same hash digest.</p>
    ///   - [`key_id(impl Into<String>)`](crate::client::fluent_builders::VerifyMac::key_id) / [`set_key_id(Option<String>)`](crate::client::fluent_builders::VerifyMac::set_key_id): <p>The KMS key that will be used in the verification.</p>  <p>Enter a key ID of the KMS key that was used to generate the HMAC. If you identify a different KMS key, the <code>VerifyMac</code> operation fails.</p>
    ///   - [`mac_algorithm(MacAlgorithmSpec)`](crate::client::fluent_builders::VerifyMac::mac_algorithm) / [`set_mac_algorithm(Option<MacAlgorithmSpec>)`](crate::client::fluent_builders::VerifyMac::set_mac_algorithm): <p>The MAC algorithm that will be used in the verification. Enter the same MAC algorithm that was used to compute the HMAC. This algorithm must be supported by the HMAC KMS key identified by the <code>KeyId</code> parameter.</p>
    ///   - [`mac(Blob)`](crate::client::fluent_builders::VerifyMac::mac) / [`set_mac(Option<Blob>)`](crate::client::fluent_builders::VerifyMac::set_mac): <p>The HMAC to verify. Enter the HMAC that was generated by the <code>GenerateMac</code> operation when you specified the same message, HMAC KMS key, and MAC algorithm as the values specified in this request.</p>
    ///   - [`grant_tokens(Vec<String>)`](crate::client::fluent_builders::VerifyMac::grant_tokens) / [`set_grant_tokens(Option<Vec<String>>)`](crate::client::fluent_builders::VerifyMac::set_grant_tokens): <p>A list of grant tokens.</p>  <p>Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved <i>eventual consistency</i>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using a grant token</a> in the <i>Key Management Service Developer Guide</i>.</p>
    /// - On success, responds with [`VerifyMacOutput`](crate::output::VerifyMacOutput) with field(s):
    ///   - [`key_id(Option<String>)`](crate::output::VerifyMacOutput::key_id): <p>The HMAC KMS key used in the verification.</p>
    ///   - [`mac_valid(bool)`](crate::output::VerifyMacOutput::mac_valid): <p>A Boolean value that indicates whether the HMAC was verified. A value of <code>True</code> indicates that the HMAC (<code>Mac</code>) was generated with the specified <code>Message</code>, HMAC KMS key (<code>KeyID</code>) and <code>MacAlgorithm.</code>.</p>  <p>If the HMAC is not verified, the <code>VerifyMac</code> operation fails with a <code>KMSInvalidMacException</code> exception. This exception indicates that one or more of the inputs changed since the HMAC was computed.</p>
    ///   - [`mac_algorithm(Option<MacAlgorithmSpec>)`](crate::output::VerifyMacOutput::mac_algorithm): <p>The MAC algorithm used in the verification.</p>
    /// - On failure, responds with [`SdkError<VerifyMacError>`](crate::error::VerifyMacError)
    pub fn verify_mac(&self) -> crate::client::fluent_builders::VerifyMac {
        crate::client::fluent_builders::VerifyMac::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
