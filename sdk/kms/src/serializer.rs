// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelKeyDeletionInputBody<'a> {
    /// <p>The unique identifier for the customer master key (CMK) for which to cancel
    /// deletion.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for CancelKeyDeletionInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelKeyDeletionInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConnectCustomKeyStoreInputBody<'a> {
    /// <p>Enter the key store ID of the custom key store that you want to connect.
    /// To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ConnectCustomKeyStoreInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConnectCustomKeyStoreInputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAliasInputBody<'a> {
    /// <p>Specifies the alias name. This value must begin with <code>alias/</code> followed by a
    /// name, such as <code>alias/ExampleAlias</code>. </p>
    /// <p>The <code>AliasName</code> value must be string of 1-256 characters. It can contain only alphanumeric characters,
    /// forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <code>alias/aws/</code>. The <code>alias/aws/</code> prefix is reserved
    /// for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMKs</a>.</p>
    pub alias_name: &'a std::option::Option<std::string::String>,
    /// <p>Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a>. The CMK must be
    /// in the same AWS Region. </p>
    /// <p>A valid CMK ID is required. If you supply a null or empty string value, this operation
    /// returns an error.</p>
    /// <p>For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and
    /// ARN</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub target_key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for CreateAliasInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAliasInputBody");
        formatter.field("alias_name", &self.alias_name);
        formatter.field("target_key_id", &self.target_key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomKeyStoreInputBody<'a> {
    /// <p>Specifies a friendly name for the custom key store. The name must be unique in your AWS
    /// account.</p>
    pub custom_key_store_name: &'a std::option::Option<std::string::String>,
    /// <p>Identifies the AWS CloudHSM cluster for the custom key store. Enter the cluster ID of any active
    /// AWS CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID,
    /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
    pub cloud_hsm_cluster_id: &'a std::option::Option<std::string::String>,
    /// <p>Enter the content of the trust anchor certificate for the cluster. This is the content of
    /// the <code>customerCA.crt</code> file that you created when you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html">initialized the cluster</a>.</p>
    pub trust_anchor_certificate: &'a std::option::Option<std::string::String>,
    /// <p>Enter the password of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
    /// <code>kmsuser</code> crypto user
    /// (CU) account</a> in the specified AWS CloudHSM cluster. AWS KMS logs into the cluster as this
    /// user to manage key material on your behalf.</p>
    /// <p>The password must be a string of 7 to 32 characters. Its value is case sensitive.</p>
    /// <p>This parameter tells AWS KMS the <code>kmsuser</code> account password; it does not change
    /// the password in the AWS CloudHSM cluster.</p>
    pub key_store_password: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for CreateCustomKeyStoreInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomKeyStoreInputBody");
        formatter.field("custom_key_store_name", &self.custom_key_store_name);
        formatter.field("cloud_hsm_cluster_id", &self.cloud_hsm_cluster_id);
        formatter.field("trust_anchor_certificate", &self.trust_anchor_certificate);
        formatter.field("key_store_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGrantInputBody<'a> {
    /// <p>The unique identifier for the customer master key (CMK) that the grant applies to.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>The principal that is given permission to perform the operations that the grant
    /// permits.</p>
    /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, IAM roles, federated
    /// users, and assumed role users. For examples of the ARN syntax to use for specifying a
    /// principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access
    /// Management (IAM)</a> in the Example ARNs section of the <i>AWS General
    /// Reference</i>.</p>
    pub grantee_principal: &'a std::option::Option<std::string::String>,
    /// <p>The principal that is given permission to retire the grant by using <a>RetireGrant</a> operation.</p>
    /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
    /// assumed role users. For examples of the ARN syntax to use for specifying a principal, see
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access Management (IAM)</a> in the Example ARNs section of the
    /// <i>AWS General Reference</i>.</p>
    pub retiring_principal: &'a std::option::Option<std::string::String>,
    /// <p>A list of operations that the grant permits.</p>
    pub operations: &'a std::option::Option<std::vec::Vec<crate::model::GrantOperation>>,
    /// <p>Allows a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operation</a> only when the encryption context matches or includes the encryption
    /// context specified in this structure. For more information about encryption context, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// <p>Grant constraints are not applied to operations that do not support an encryption context,
    /// such as cryptographic operations with asymmetric CMKs and management operations, such as
    /// <a>DescribeKey</a> or <a>RetireGrant</a>.</p>
    pub constraints: &'a std::option::Option<crate::model::GrantConstraints>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A friendly name for the grant. Use this value to prevent the unintended
    /// creation of duplicate grants when retrying this request.</p>
    /// <p>When this value is absent, all <code>CreateGrant</code> requests result in a new grant
    /// with a unique <code>GrantId</code> even if all the supplied parameters are identical. This can
    /// result in unintended duplicates when you retry the <code>CreateGrant</code> request.</p>
    /// <p>When this value is present, you can retry a <code>CreateGrant</code> request with
    /// identical parameters; if the grant already exists, the original <code>GrantId</code> is
    /// returned without creating a new grant. Note that the returned grant token is unique with every
    /// <code>CreateGrant</code> request, even when a duplicate <code>GrantId</code> is returned.
    /// All grant tokens for the same grant ID can be used interchangeably.</p>
    pub name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for CreateGrantInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGrantInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("grantee_principal", &self.grantee_principal);
        formatter.field("retiring_principal", &self.retiring_principal);
        formatter.field("operations", &self.operations);
        formatter.field("constraints", &self.constraints);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("name", &self.name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateKeyInputBody<'a> {
    /// <p>The key policy to attach to the CMK.</p>
    /// <p>If you provide a key policy, it must meet the following criteria:</p>
    /// <ul>
    /// <li>
    /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
    /// must allow the principal that is making the <code>CreateKey</code> request to make a
    /// subsequent <a>PutKeyPolicy</a> request on the CMK. This reduces the risk that
    /// the CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// </li>
    /// <li>
    /// <p>Each statement in the key policy must contain one or more principals. The principals
    /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
    /// (for example, an IAM user or role), you might need to enforce a delay before including the
    /// new principal in a key policy because the new principal might not be immediately visible
    /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
    /// Identity and Access Management User Guide</i>.</p>
    /// </li>
    /// </ul>
    /// <p>If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK. For
    /// more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">Default Key Policy</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>. </p>
    /// <p>The key policy size quota is 32 kilobytes (32768 bytes).</p>
    /// <p>For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i>
    /// <i>IAM User Guide</i>
    /// </i>.</p>
    pub policy: &'a std::option::Option<std::string::String>,
    /// <p>A description of the CMK.</p>
    /// <p>Use a description that helps you decide whether the CMK is appropriate for a task.</p>
    pub description: &'a std::option::Option<std::string::String>,
    /// <p>Determines the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> for which you can use the CMK. The default value
    /// is <code>ENCRYPT_DECRYPT</code>. This parameter is required only for asymmetric CMKs. You
    /// can't change the <code>KeyUsage</code> value after the CMK is created.</p>
    /// <p>Select only one valid value.</p>
    /// <ul>
    /// <li>
    /// <p>For symmetric CMKs, omit the parameter or specify <code>ENCRYPT_DECRYPT</code>.</p>
    /// </li>
    /// <li>
    /// <p>For asymmetric CMKs with RSA key material, specify <code>ENCRYPT_DECRYPT</code> or
    /// <code>SIGN_VERIFY</code>.</p>
    /// </li>
    /// <li>
    /// <p>For asymmetric CMKs with ECC key material, specify <code>SIGN_VERIFY</code>.</p>
    /// </li>
    /// </ul>
    pub key_usage: &'a std::option::Option<crate::model::KeyUsageType>,
    /// <p>Specifies the type of CMK to create. The default value, <code>SYMMETRIC_DEFAULT</code>,
    /// creates a CMK with a 256-bit symmetric key for encryption and decryption. For help choosing a
    /// key spec for your CMK, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html">How to Choose Your CMK
    /// Configuration</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// <p>The <code>CustomerMasterKeySpec</code> determines whether the CMK contains a symmetric key
    /// or an asymmetric key pair. It also determines the encryption algorithms or signing algorithms
    /// that the CMK supports. You can't change the <code>CustomerMasterKeySpec</code> after the CMK
    /// is created. To further restrict the algorithms that can be used with the CMK, use a condition
    /// key in its key policy or IAM policy. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm">kms:EncryptionAlgorithm</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm">kms:Signing Algorithm</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// <important>
    /// <p>
    /// <a href="http://aws.amazon.com/kms/features/#AWS_Service_Integration">AWS services that
    /// are integrated with AWS KMS</a> use symmetric CMKs to protect your data. These
    /// services do not support asymmetric CMKs. For help determining whether a CMK is symmetric or
    /// asymmetric, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html">Identifying Symmetric and Asymmetric
    /// CMKs</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// </important>
    /// <p>AWS KMS supports the following key specs for CMKs:</p>
    /// <ul>
    /// <li>
    /// <p>Symmetric key (default)</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SYMMETRIC_DEFAULT</code> (AES-256-GCM)</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Asymmetric RSA key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>RSA_2048</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RSA_3072</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RSA_4096</code>
    /// </p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Asymmetric NIST-recommended elliptic curve key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P256</code> (secp256r1)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P384</code> (secp384r1)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P521</code> (secp521r1)</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Other asymmetric elliptic curve key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ECC_SECG_P256K1</code> (secp256k1), commonly used for
    /// cryptocurrencies.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub customer_master_key_spec: &'a std::option::Option<crate::model::CustomerMasterKeySpec>,
    /// <p>The source of the key material for the CMK. You cannot change the origin after you create
    /// the CMK. The default is <code>AWS_KMS</code>, which means AWS KMS creates the key
    /// material.</p>
    /// <p>When the parameter value is <code>EXTERNAL</code>, AWS KMS creates a CMK without key
    /// material so that you can import key material from your existing key management infrastructure.
    /// For more information about importing key material into AWS KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing Key Material</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>. This value is valid only for symmetric CMKs.</p>
    /// <p>When the parameter value is <code>AWS_CLOUDHSM</code>, AWS KMS creates the CMK in an AWS KMS
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and creates its key material in the associated AWS CloudHSM cluster. You must also
    /// use the <code>CustomKeyStoreId</code> parameter to identify the custom key store. This value
    /// is valid only for symmetric CMKs.</p>
    pub origin: &'a std::option::Option<crate::model::OriginType>,
    /// <p>Creates the CMK in the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and the key material in its associated
    /// AWS CloudHSM cluster. To create a CMK in a custom key store, you must also specify the
    /// <code>Origin</code> parameter with a value of <code>AWS_CLOUDHSM</code>. The AWS CloudHSM cluster
    /// that is associated with the custom key store must have at least two active HSMs, each in a
    /// different Availability Zone in the Region.</p>
    /// <p>This parameter is valid only for symmetric CMKs. You cannot create an asymmetric CMK in a
    /// custom key store.</p>
    /// <p>To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    /// <p>The response includes the custom key store ID and the ID of the AWS CloudHSM cluster.</p>
    /// <p>This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">Custom Key Store feature</a> feature in AWS KMS, which
    /// combines the convenience and extensive integration of AWS KMS with the isolation and control of a
    /// single-tenant key store.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
    /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
    /// <important>
    /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
    /// set this value to true indiscriminately.</p>
    /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// </important>
    /// <p>Use this parameter only when you include a policy in the request and you intend to prevent
    /// the principal that is making the request from making a subsequent <a>PutKeyPolicy</a> request on the CMK.</p>
    /// <p>The default value is false.</p>
    pub bypass_policy_lockout_safety_check: &'a bool,
    /// <p>One or more tags. Each tag consists of a tag key and a tag value. Both the tag key and the
    /// tag value are required, but the tag value can be an empty (null) string. </p>
    /// <p>When you add tags to an AWS resource, AWS generates a cost allocation
    /// report with usage and costs aggregated by tags. For information about adding, changing, deleting and listing tags for CMKs,
    /// see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging Keys</a>.</p>
    /// <p>Use this parameter to tag the CMK when it is created. To add tags to an
    /// existing CMK, use the <a>TagResource</a> operation.</p>
    /// <p>To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a> permission in an IAM policy.</p>
    pub tags: &'a std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl<'a> std::fmt::Debug for CreateKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateKeyInputBody");
        formatter.field("policy", &self.policy);
        formatter.field("description", &self.description);
        formatter.field("key_usage", &self.key_usage);
        formatter.field("customer_master_key_spec", &self.customer_master_key_spec);
        formatter.field("origin", &self.origin);
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.field(
            "bypass_policy_lockout_safety_check",
            &self.bypass_policy_lockout_safety_check,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DecryptInputBody<'a> {
    /// <p>Ciphertext to be decrypted. The blob includes metadata.</p>
    pub ciphertext_blob: &'a std::option::Option<smithy_types::Blob>,
    /// <p>Specifies the encryption context to use when decrypting the data.
    /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the customer master key (CMK) that AWS KMS uses to decrypt the ciphertext. Enter a
    /// key ID of the CMK that was used to encrypt the ciphertext.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
    /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
    /// ensures that you use the CMK that you intend.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify
    /// the same algorithm that was used to encrypt the data. If you specify a different algorithm,
    /// the <code>Decrypt</code> operation fails.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// The default value, <code>SYMMETRIC_DEFAULT</code>, represents the only supported algorithm
    /// that is valid for symmetric CMKs.</p>
    pub encryption_algorithm: &'a std::option::Option<crate::model::EncryptionAlgorithmSpec>,
}
impl<'a> std::fmt::Debug for DecryptInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DecryptInputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("key_id", &self.key_id);
        formatter.field("encryption_algorithm", &self.encryption_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAliasInputBody<'a> {
    /// <p>The alias to be deleted. The alias name must begin with <code>alias/</code> followed by
    /// the alias name, such as <code>alias/ExampleAlias</code>.</p>
    pub alias_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DeleteAliasInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAliasInputBody");
        formatter.field("alias_name", &self.alias_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomKeyStoreInputBody<'a> {
    /// <p>Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DeleteCustomKeyStoreInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomKeyStoreInputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteImportedKeyMaterialInputBody<'a> {
    /// <p>Identifies the CMK from which you are deleting imported key material. The
    /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DeleteImportedKeyMaterialInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteImportedKeyMaterialInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomKeyStoresInputBody<'a> {
    /// <p>Gets only information about the specified custom key store. Enter the key store ID.</p>
    /// <p>By default, this operation gets information about all custom key stores in the account and
    /// region. To limit the output to a particular custom key store, you can use either the
    /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
    /// both.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
    /// <p>Gets only information about the specified custom key store. Enter the friendly name of the
    /// custom key store.</p>
    /// <p>By default, this operation gets information about all custom key stores in the account and
    /// region. To limit the output to a particular custom key store, you can use either the
    /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
    /// both.</p>
    pub custom_key_store_name: &'a std::option::Option<std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeCustomKeyStoresInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomKeyStoresInputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.field("custom_key_store_name", &self.custom_key_store_name);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeKeyInputBody<'a> {
    /// <p>Describes the specified customer master key (CMK). </p>
    /// <p>If you specify a predefined AWS alias (an AWS alias with no key ID), KMS associates the
    /// alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys">AWS
    /// managed CMK</a> and returns its <code>KeyId</code> and <code>Arn</code> in the
    /// response.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for DescribeKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeKeyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableKeyInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DisableKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableKeyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableKeyRotationInputBody<'a> {
    /// <p>Identifies a symmetric customer master key (CMK). You cannot enable or disable automatic
    /// rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric CMKs</a>, CMKs
    /// with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key
    /// material</a>, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DisableKeyRotationInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableKeyRotationInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisconnectCustomKeyStoreInputBody<'a> {
    /// <p>Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DisconnectCustomKeyStoreInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisconnectCustomKeyStoreInputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableKeyInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for EnableKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableKeyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableKeyRotationInputBody<'a> {
    /// <p>Identifies a symmetric customer master key (CMK). You cannot enable automatic rotation of asymmetric CMKs, CMKs with imported key material, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for EnableKeyRotationInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableKeyRotationInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EncryptInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Data to be encrypted.</p>
    pub plaintext: &'a std::option::Option<smithy_types::Blob>,
    /// <p>Specifies the encryption context that will be used to encrypt the data.
    /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context. </p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to encrypt the plaintext message.
    /// The algorithm must be compatible with the CMK that you specify.</p>
    /// <p>This parameter is required only for asymmetric CMKs. The default value,
    /// <code>SYMMETRIC_DEFAULT</code>, is the algorithm used for symmetric CMKs. If you are using
    /// an asymmetric CMK, we recommend RSAES_OAEP_SHA_256.</p>
    pub encryption_algorithm: &'a std::option::Option<crate::model::EncryptionAlgorithmSpec>,
}
impl<'a> std::fmt::Debug for EncryptInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("plaintext", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("encryption_algorithm", &self.encryption_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyInputBody<'a> {
    /// <p>Identifies the symmetric CMK that encrypts the data key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>Specifies the length of the data key in bytes. For example, use the value 64 to generate a
    /// 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data
    /// keys, use the <code>KeySpec</code> parameter.</p>
    /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
    /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    pub number_of_bytes: &'a std::option::Option<i32>,
    /// <p>Specifies the length of the data key. Use <code>AES_128</code> to generate a 128-bit
    /// symmetric key, or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
    /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
    /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    pub key_spec: &'a std::option::Option<crate::model::DataKeySpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for GenerateDataKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("number_of_bytes", &self.number_of_bytes);
        formatter.field("key_spec", &self.key_spec);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyPairInputBody<'a> {
    /// <p>Specifies the encryption context that will be used when encrypting the private key in the
    /// data key pair.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>Specifies the symmetric CMK that encrypts the private key in the data key pair. You cannot
    /// specify an asymmetric CMK or a CMK in a custom key store. To get the type and origin of your
    /// CMK, use the <a>DescribeKey</a> operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Determines the type of data key pair that is generated. </p>
    /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
    pub key_pair_spec: &'a std::option::Option<crate::model::DataKeyPairSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for GenerateDataKeyPairInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyPairInputBody");
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("key_id", &self.key_id);
        formatter.field("key_pair_spec", &self.key_pair_spec);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyPairWithoutPlaintextInputBody<'a> {
    /// <p>Specifies the encryption context that will be used when encrypting the private key in the
    /// data key pair.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>Specifies the CMK that encrypts the private key in the data key pair. You must specify a
    /// symmetric CMK. You cannot use an asymmetric CMK or a CMK in a custom key store. To get the
    /// type and origin of your CMK, use the <a>DescribeKey</a> operation. </p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Determines the type of data key pair that is generated.</p>
    /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
    pub key_pair_spec: &'a std::option::Option<crate::model::DataKeyPairSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for GenerateDataKeyPairWithoutPlaintextInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyPairWithoutPlaintextInputBody");
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("key_id", &self.key_id);
        formatter.field("key_pair_spec", &self.key_pair_spec);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyWithoutPlaintextInputBody<'a> {
    /// <p>The identifier of the symmetric customer master key (CMK) that encrypts the data
    /// key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>The length of the data key. Use <code>AES_128</code> to generate a 128-bit symmetric key,
    /// or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
    pub key_spec: &'a std::option::Option<crate::model::DataKeySpec>,
    /// <p>The length of the data key in bytes. For example, use the value 64 to generate a 512-bit
    /// data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys),
    /// we recommend that you use the <code>KeySpec</code> field instead of this one.</p>
    pub number_of_bytes: &'a std::option::Option<i32>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for GenerateDataKeyWithoutPlaintextInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyWithoutPlaintextInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("key_spec", &self.key_spec);
        formatter.field("number_of_bytes", &self.number_of_bytes);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateRandomInputBody<'a> {
    /// <p>The length of the byte string.</p>
    pub number_of_bytes: &'a std::option::Option<i32>,
    /// <p>Generates the random byte string in the AWS CloudHSM cluster that is associated with the
    /// specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for GenerateRandomInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateRandomInputBody");
        formatter.field("number_of_bytes", &self.number_of_bytes);
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetKeyPolicyInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the name of the key policy. The only valid name is <code>default</code>. To get
    /// the names of key policies, use <a>ListKeyPolicies</a>.</p>
    pub policy_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for GetKeyPolicyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetKeyPolicyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("policy_name", &self.policy_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetKeyRotationStatusInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for GetKeyRotationStatusInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetKeyRotationStatusInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetParametersForImportInputBody<'a> {
    /// <p>The identifier of the symmetric CMK into which you will import key material. The
    /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>The algorithm you will use to encrypt the key material before importing it with <a>ImportKeyMaterial</a>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html">Encrypt the Key Material</a>
    /// in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub wrapping_algorithm: &'a std::option::Option<crate::model::AlgorithmSpec>,
    /// <p>The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public
    /// keys are supported.</p>
    pub wrapping_key_spec: &'a std::option::Option<crate::model::WrappingKeySpec>,
}
impl<'a> std::fmt::Debug for GetParametersForImportInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetParametersForImportInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("wrapping_algorithm", &self.wrapping_algorithm);
        formatter.field("wrapping_key_spec", &self.wrapping_key_spec);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPublicKeyInputBody<'a> {
    /// <p>Identifies the asymmetric CMK that includes the public key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for GetPublicKeyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPublicKeyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportKeyMaterialInputBody<'a> {
    /// <p>The identifier of the symmetric CMK that receives the imported key material. The CMK's
    /// <code>Origin</code> must be <code>EXTERNAL</code>. This must be the same CMK specified in
    /// the <code>KeyID</code> parameter of the corresponding <a>GetParametersForImport</a>
    /// request.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>The import token that you received in the response to a previous <a>GetParametersForImport</a> request. It must be from the same response that contained
    /// the public key that you used to encrypt the key material.</p>
    pub import_token: &'a std::option::Option<smithy_types::Blob>,
    /// <p>The encrypted key material to import. The key material must be encrypted with the public
    /// wrapping key that <a>GetParametersForImport</a> returned, using the wrapping
    /// algorithm that you specified in the same <code>GetParametersForImport</code> request.</p>
    pub encrypted_key_material: &'a std::option::Option<smithy_types::Blob>,
    /// <p>The time at which the imported key material expires. When the key material expires, AWS KMS
    /// deletes the key material and the CMK becomes unusable. You must omit this parameter when the
    /// <code>ExpirationModel</code> parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>.
    /// Otherwise it is required.</p>
    pub valid_to: &'a std::option::Option<smithy_types::Instant>,
    /// <p>Specifies whether the key material expires. The default is
    /// <code>KEY_MATERIAL_EXPIRES</code>, in which case you must include the <code>ValidTo</code>
    /// parameter. When this parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>, you must
    /// omit the <code>ValidTo</code> parameter.</p>
    pub expiration_model: &'a std::option::Option<crate::model::ExpirationModelType>,
}
impl<'a> std::fmt::Debug for ImportKeyMaterialInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportKeyMaterialInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("import_token", &self.import_token);
        formatter.field("encrypted_key_material", &self.encrypted_key_material);
        formatter.field("valid_to", &self.valid_to);
        formatter.field("expiration_model", &self.expiration_model);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAliasesInputBody<'a> {
    /// <p>Lists only aliases that are associated with the specified CMK. Enter a CMK in your AWS
    /// account. </p>
    /// <p>This parameter is optional. If you omit it, <code>ListAliases</code> returns all aliases
    /// in the account and Region.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListAliasesInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAliasesInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGrantsInputBody<'a> {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListGrantsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGrantsInputBody");
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListKeyPoliciesInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between
    /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
    /// <p>Only one policy can be attached to a key.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListKeyPoliciesInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListKeyPoliciesInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListKeysInputBody<'a> {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between
    /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListKeysInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListKeysInputBody");
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourceTagsInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1 and 50, inclusive. If
    /// you do not include a value, it defaults to 50.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    /// <p>Do not attempt to construct this value. Use only the value of <code>NextMarker</code> from
    /// the truncated response you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListResourceTagsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceTagsInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRetirableGrantsInputBody<'a> {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: &'a std::option::Option<std::string::String>,
    /// <p>The retiring principal for which to list grants. Enter a principal in your AWS
    /// account.</p>
    /// <p>To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
    /// assumed role users. For examples of the ARN syntax for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS
    /// Identity and Access Management (IAM)</a> in the Example ARNs section of the
    /// <i>Amazon Web Services General Reference</i>.</p>
    pub retiring_principal: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListRetirableGrantsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRetirableGrantsInputBody");
        formatter.field("limit", &self.limit);
        formatter.field("marker", &self.marker);
        formatter.field("retiring_principal", &self.retiring_principal);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutKeyPolicyInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>The name of the key policy. The only valid value is <code>default</code>.</p>
    pub policy_name: &'a std::option::Option<std::string::String>,
    /// <p>The key policy to attach to the CMK.</p>
    /// <p>The key policy must meet the following criteria:</p>
    /// <ul>
    /// <li>
    /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
    /// must allow the principal that is making the <code>PutKeyPolicy</code> request to make a
    /// subsequent <code>PutKeyPolicy</code> request on the CMK. This reduces the risk that the
    /// CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>Each statement in the key policy must contain one or more principals. The principals
    /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
    /// (for example, an IAM user or role), you might need to enforce a delay before including the
    /// new principal in a key policy because the new principal might not be immediately visible
    /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
    /// Identity and Access Management User Guide</i>.</p>
    /// </li>
    /// </ul>
    /// <p>The key policy cannot exceed 32 kilobytes (32768 bytes). For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/resource-limits.html">Resource Quotas</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub policy: &'a std::option::Option<std::string::String>,
    /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
    /// <important>
    /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
    /// set this value to true indiscriminately.</p>
    /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// </important>
    /// <p>Use this parameter only when you intend to prevent the principal that is making the
    /// request from making a subsequent <code>PutKeyPolicy</code> request on the CMK.</p>
    /// <p>The default value is false.</p>
    pub bypass_policy_lockout_safety_check: &'a bool,
}
impl<'a> std::fmt::Debug for PutKeyPolicyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutKeyPolicyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("policy_name", &self.policy_name);
        formatter.field("policy", &self.policy);
        formatter.field(
            "bypass_policy_lockout_safety_check",
            &self.bypass_policy_lockout_safety_check,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReEncryptInputBody<'a> {
    /// <p>Ciphertext of the data to reencrypt.</p>
    pub ciphertext_blob: &'a std::option::Option<smithy_types::Blob>,
    /// <p>Specifies the encryption context to use to decrypt the ciphertext. Enter the same
    /// encryption context that was used to encrypt the ciphertext.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub source_encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>Specifies the customer master key (CMK) that
    /// AWS KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the CMK
    /// that was used to encrypt the ciphertext.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
    /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
    /// ensures that you use the CMK that you intend.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub source_key_id: &'a std::option::Option<std::string::String>,
    /// <p>A unique identifier for the CMK that is used to reencrypt the data. Specify a symmetric or
    /// asymmetric CMK with a <code>KeyUsage</code> value of <code>ENCRYPT_DECRYPT</code>. To find the
    /// <code>KeyUsage</code> value of a CMK, use the <a>DescribeKey</a>
    /// operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub destination_key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies that encryption context to use when the reencrypting the data.</p>
    /// <p>A destination encryption context is valid only when the destination CMK is a symmetric
    /// CMK. The standard ciphertext format for asymmetric CMKs does not include fields for
    /// metadata.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub destination_encryption_context: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to decrypt the ciphertext before it
    /// is reencrypted. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the algorithm
    /// used for symmetric CMKs.</p>
    /// <p>Specify the same algorithm that was used to encrypt the ciphertext. If you specify a
    /// different algorithm, the decrypt attempt fails.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric
    /// CMK.</p>
    pub source_encryption_algorithm: &'a std::option::Option<crate::model::EncryptionAlgorithmSpec>,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to reecrypt the data after it has
    /// decrypted it. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the encryption
    /// algorithm used for symmetric CMKs.</p>
    /// <p>This parameter is required only when the destination CMK is an asymmetric CMK.</p>
    pub destination_encryption_algorithm:
        &'a std::option::Option<crate::model::EncryptionAlgorithmSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for ReEncryptInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReEncryptInputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("source_encryption_context", &self.source_encryption_context);
        formatter.field("source_key_id", &self.source_key_id);
        formatter.field("destination_key_id", &self.destination_key_id);
        formatter.field(
            "destination_encryption_context",
            &self.destination_encryption_context,
        );
        formatter.field(
            "source_encryption_algorithm",
            &self.source_encryption_algorithm,
        );
        formatter.field(
            "destination_encryption_algorithm",
            &self.destination_encryption_algorithm,
        );
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RetireGrantInputBody<'a> {
    /// <p>Token that identifies the grant to be retired.</p>
    pub grant_token: &'a std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the CMK associated with the grant. </p>
    /// <p>For example: <code>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Unique identifier of the grant to retire. The grant ID is returned in the response to a
    /// <code>CreateGrant</code> operation.</p>
    /// <ul>
    /// <li>
    /// <p>Grant ID Example -
    /// 0123456789012345678901234567890123456789012345678901234567890123</p>
    /// </li>
    /// </ul>
    pub grant_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for RetireGrantInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RetireGrantInputBody");
        formatter.field("grant_token", &self.grant_token);
        formatter.field("key_id", &self.key_id);
        formatter.field("grant_id", &self.grant_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeGrantInputBody<'a> {
    /// <p>A unique identifier for the customer master key associated with the grant.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Identifier of the grant to be revoked.</p>
    pub grant_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for RevokeGrantInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeGrantInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("grant_id", &self.grant_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ScheduleKeyDeletionInputBody<'a> {
    /// <p>The unique identifier of the customer master key (CMK) to delete.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>The waiting period, specified in number of days. After the waiting period ends, AWS KMS
    /// deletes the customer master key (CMK).</p>
    /// <p>This value is optional. If you include a value, it must be between 7 and 30, inclusive. If
    /// you do not include a value, it defaults to 30.</p>
    pub pending_window_in_days: &'a std::option::Option<i32>,
}
impl<'a> std::fmt::Debug for ScheduleKeyDeletionInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduleKeyDeletionInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("pending_window_in_days", &self.pending_window_in_days);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SignInputBody<'a> {
    /// <p>Identifies an asymmetric CMK. AWS KMS uses the private key in the asymmetric CMK to sign the
    /// message. The <code>KeyUsage</code> type of the CMK must be <code>SIGN_VERIFY</code>. To find
    /// the <code>KeyUsage</code> of a CMK, use the <a>DescribeKey</a> operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a
    /// larger message, provide the message digest.</p>
    /// <p>If you provide a message, AWS KMS generates a hash digest of the message and then signs
    /// it.</p>
    pub message: &'a std::option::Option<smithy_types::Blob>,
    /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
    /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
    /// enter <code>DIGEST</code>.</p>
    pub message_type: &'a std::option::Option<crate::model::MessageType>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the signing algorithm to use when signing the message. </p>
    /// <p>Choose an algorithm that is compatible with the type and size of the specified asymmetric
    /// CMK.</p>
    pub signing_algorithm: &'a std::option::Option<crate::model::SigningAlgorithmSpec>,
}
impl<'a> std::fmt::Debug for SignInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SignInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("message_type", &self.message_type);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceInputBody<'a> {
    /// <p>Identifies a customer managed CMK in the account and Region.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>One or more tags. </p>
    /// <p>Each tag consists of a tag key and a tag value. The tag value can be an empty (null)
    /// string. </p>
    /// <p>You cannot have more than one tag on a CMK with the same tag key. If you specify an
    /// existing tag key with a different tag value, AWS KMS replaces the current tag value with the
    /// specified one.</p>
    pub tags: &'a std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl<'a> std::fmt::Debug for TagResourceInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceInputBody<'a> {
    /// <p>Identifies the CMK from which you are removing tags.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>One or more tag keys. Specify only the tag keys, not the tag values.</p>
    pub tag_keys: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for UntagResourceInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("tag_keys", &self.tag_keys);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAliasInputBody<'a> {
    /// <p>Identifies the alias that is changing its CMK. This value must begin with
    /// <code>alias/</code> followed by the alias name, such as <code>alias/ExampleAlias</code>. You
    /// cannot use UpdateAlias to change the alias name.</p>
    pub alias_name: &'a std::option::Option<std::string::String>,
    /// <p>Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a> to associate with the alias. You don't have permission
    /// to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMK</a>.</p>
    /// <p>The CMK must be in the same AWS account and Region as the alias. Also, the new target CMK
    /// must be the same type as the current target CMK (both symmetric or both asymmetric) and they
    /// must have the same key usage. </p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    /// <p>To verify that the alias
    /// is mapped to the correct CMK, use <a>ListAliases</a>.</p>
    pub target_key_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for UpdateAliasInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAliasInputBody");
        formatter.field("alias_name", &self.alias_name);
        formatter.field("target_key_id", &self.target_key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCustomKeyStoreInputBody<'a> {
    /// <p>Identifies the custom key store that you want to update. Enter the ID of the custom key
    /// store. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: &'a std::option::Option<std::string::String>,
    /// <p>Changes the friendly name of the custom key store to the value that you specify. The
    /// custom key store name must be unique in the AWS account.</p>
    pub new_custom_key_store_name: &'a std::option::Option<std::string::String>,
    /// <p>Enter the current password of the <code>kmsuser</code> crypto user (CU) in the AWS CloudHSM
    /// cluster that is associated with the custom key store.</p>
    /// <p>This parameter tells AWS KMS the current password of the <code>kmsuser</code> crypto user
    /// (CU). It does not set or change the password of any users in the AWS CloudHSM cluster.</p>
    pub key_store_password: &'a std::option::Option<std::string::String>,
    /// <p>Associates the custom key store with a related AWS CloudHSM cluster. </p>
    /// <p>Enter the cluster ID of the cluster that you used to create the custom key store or a
    /// cluster that shares a backup history and has the same cluster certificate as the original
    /// cluster. You cannot use this parameter to associate a custom key store with an unrelated
    /// cluster. In addition, the replacement cluster must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">fulfill the requirements</a> for
    /// a cluster associated with a custom key store. To view the cluster certificate of a cluster,
    /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
    pub cloud_hsm_cluster_id: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for UpdateCustomKeyStoreInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCustomKeyStoreInputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.field("new_custom_key_store_name", &self.new_custom_key_store_name);
        formatter.field("key_store_password", &"*** Sensitive Data Redacted ***");
        formatter.field("cloud_hsm_cluster_id", &self.cloud_hsm_cluster_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateKeyDescriptionInputBody<'a> {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>New description for the CMK.</p>
    pub description: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for UpdateKeyDescriptionInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateKeyDescriptionInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("description", &self.description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VerifyInputBody<'a> {
    /// <p>Identifies the asymmetric CMK that will be used to verify the signature. This must be the
    /// same CMK that was used to generate the signature. If you specify a different CMK, the
    /// signature verification fails.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the message that was signed. You can submit a raw message of up to 4096 bytes,
    /// or a hash digest of the message. If you submit a digest, use the <code>MessageType</code>
    /// parameter with a value of <code>DIGEST</code>.</p>
    /// <p>If the message specified here is different from the message that was signed, the signature
    /// verification fails. A message and its hash digest are considered to be the same
    /// message.</p>
    pub message: &'a std::option::Option<smithy_types::Blob>,
    /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
    /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
    /// enter <code>DIGEST</code>.</p>
    /// <important>
    /// <p>Use the <code>DIGEST</code> value only when the value of the <code>Message</code>
    /// parameter is a message digest. If you use the <code>DIGEST</code> value with a raw message,
    /// the security of the verification operation can be compromised.</p>
    /// </important>
    pub message_type: &'a std::option::Option<crate::model::MessageType>,
    /// <p>The signature that the <code>Sign</code> operation generated.</p>
    pub signature: &'a std::option::Option<smithy_types::Blob>,
    /// <p>The signing algorithm that was used to sign the message. If you submit a different
    /// algorithm, the signature verification fails.</p>
    pub signing_algorithm: &'a std::option::Option<crate::model::SigningAlgorithmSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for VerifyInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyInputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("message_type", &self.message_type);
        formatter.field("signature", &self.signature);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelKeyDeletionOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK whose deletion is canceled.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CancelKeyDeletionOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelKeyDeletionOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomKeyStoreOutputBody {
    /// <p>A unique identifier for the new custom key store.</p>
    #[serde(rename = "CustomKeyStoreId")]
    #[serde(default)]
    pub custom_key_store_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateCustomKeyStoreOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomKeyStoreOutputBody");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGrantOutputBody {
    /// <p>The grant token.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    #[serde(rename = "GrantToken")]
    #[serde(default)]
    pub grant_token: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the grant.</p>
    /// <p>You can use the <code>GrantId</code> in a subsequent <a>RetireGrant</a> or
    /// <a>RevokeGrant</a> operation.</p>
    #[serde(rename = "GrantId")]
    #[serde(default)]
    pub grant_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateGrantOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGrantOutputBody");
        formatter.field("grant_token", &self.grant_token);
        formatter.field("grant_id", &self.grant_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateKeyOutputBody {
    /// <p>Metadata associated with the CMK.</p>
    #[serde(rename = "KeyMetadata")]
    #[serde(default)]
    pub key_metadata: std::option::Option<crate::model::KeyMetadata>,
}
impl std::fmt::Debug for CreateKeyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateKeyOutputBody");
        formatter.field("key_metadata", &self.key_metadata);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DecryptOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that was used to decrypt the ciphertext.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>Decrypted plaintext data. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "Plaintext")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub plaintext: std::option::Option<smithy_types::Blob>,
    /// <p>The encryption algorithm that was used to decrypt the ciphertext.</p>
    #[serde(rename = "EncryptionAlgorithm")]
    #[serde(default)]
    pub encryption_algorithm: std::option::Option<crate::model::EncryptionAlgorithmSpec>,
}
impl std::fmt::Debug for DecryptOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DecryptOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("plaintext", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_algorithm", &self.encryption_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomKeyStoresOutputBody {
    /// <p>Contains metadata about each custom key store.</p>
    #[serde(rename = "CustomKeyStores")]
    #[serde(default)]
    pub custom_key_stores:
        std::option::Option<std::vec::Vec<crate::model::CustomKeyStoresListEntry>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for DescribeCustomKeyStoresOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomKeyStoresOutputBody");
        formatter.field("custom_key_stores", &self.custom_key_stores);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeKeyOutputBody {
    /// <p>Metadata associated with the key.</p>
    #[serde(rename = "KeyMetadata")]
    #[serde(default)]
    pub key_metadata: std::option::Option<crate::model::KeyMetadata>,
}
impl std::fmt::Debug for DescribeKeyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeKeyOutputBody");
        formatter.field("key_metadata", &self.key_metadata);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct EncryptOutputBody {
    /// <p>The encrypted plaintext. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "CiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that was used to encrypt the plaintext.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The encryption algorithm that was used to encrypt the plaintext.</p>
    #[serde(rename = "EncryptionAlgorithm")]
    #[serde(default)]
    pub encryption_algorithm: std::option::Option<crate::model::EncryptionAlgorithmSpec>,
}
impl std::fmt::Debug for EncryptOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptOutputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("key_id", &self.key_id);
        formatter.field("encryption_algorithm", &self.encryption_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyOutputBody {
    /// <p>The encrypted copy of the data key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "CiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>The plaintext data key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of
    /// KMS. Then, remove it from memory as soon as possible.</p>
    #[serde(rename = "Plaintext")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub plaintext: std::option::Option<smithy_types::Blob>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that encrypted the data key.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GenerateDataKeyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyOutputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("plaintext", &"*** Sensitive Data Redacted ***");
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyPairOutputBody {
    /// <p>The encrypted copy of the private key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "PrivateKeyCiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub private_key_ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>The plaintext copy of the private key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "PrivateKeyPlaintext")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub private_key_plaintext: std::option::Option<smithy_types::Blob>,
    /// <p>The public key (in plaintext).</p>
    #[serde(rename = "PublicKey")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub public_key: std::option::Option<smithy_types::Blob>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that encrypted the private key.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The type of data key pair that was generated.</p>
    #[serde(rename = "KeyPairSpec")]
    #[serde(default)]
    pub key_pair_spec: std::option::Option<crate::model::DataKeyPairSpec>,
}
impl std::fmt::Debug for GenerateDataKeyPairOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyPairOutputBody");
        formatter.field(
            "private_key_ciphertext_blob",
            &self.private_key_ciphertext_blob,
        );
        formatter.field("private_key_plaintext", &"*** Sensitive Data Redacted ***");
        formatter.field("public_key", &self.public_key);
        formatter.field("key_id", &self.key_id);
        formatter.field("key_pair_spec", &self.key_pair_spec);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyPairWithoutPlaintextOutputBody {
    /// <p>The encrypted copy of the private key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "PrivateKeyCiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub private_key_ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>The public key (in plaintext).</p>
    #[serde(rename = "PublicKey")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub public_key: std::option::Option<smithy_types::Blob>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that encrypted the private key.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The type of data key pair that was generated.</p>
    #[serde(rename = "KeyPairSpec")]
    #[serde(default)]
    pub key_pair_spec: std::option::Option<crate::model::DataKeyPairSpec>,
}
impl std::fmt::Debug for GenerateDataKeyPairWithoutPlaintextOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyPairWithoutPlaintextOutputBody");
        formatter.field(
            "private_key_ciphertext_blob",
            &self.private_key_ciphertext_blob,
        );
        formatter.field("public_key", &self.public_key);
        formatter.field("key_id", &self.key_id);
        formatter.field("key_pair_spec", &self.key_pair_spec);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateDataKeyWithoutPlaintextOutputBody {
    /// <p>The encrypted data key. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "CiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that encrypted the data key.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GenerateDataKeyWithoutPlaintextOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateDataKeyWithoutPlaintextOutputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("key_id", &self.key_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GenerateRandomOutputBody {
    /// <p>The random byte string. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "Plaintext")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub plaintext: std::option::Option<smithy_types::Blob>,
}
impl std::fmt::Debug for GenerateRandomOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateRandomOutputBody");
        formatter.field("plaintext", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GetKeyPolicyOutputBody {
    /// <p>A key policy document in JSON format.</p>
    #[serde(rename = "Policy")]
    #[serde(default)]
    pub policy: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetKeyPolicyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetKeyPolicyOutputBody");
        formatter.field("policy", &self.policy);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GetKeyRotationStatusOutputBody {
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    #[serde(rename = "KeyRotationEnabled")]
    pub key_rotation_enabled: bool,
}
impl std::fmt::Debug for GetKeyRotationStatusOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetKeyRotationStatusOutputBody");
        formatter.field("key_rotation_enabled", &self.key_rotation_enabled);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GetParametersForImportOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK to use in a subsequent <a>ImportKeyMaterial</a>
    /// request. This is the same CMK specified in the <code>GetParametersForImport</code>
    /// request.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The import token to send in a subsequent <a>ImportKeyMaterial</a>
    /// request.</p>
    #[serde(rename = "ImportToken")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub import_token: std::option::Option<smithy_types::Blob>,
    /// <p>The public key to use to encrypt the key material before importing it with <a>ImportKeyMaterial</a>.</p>
    #[serde(rename = "PublicKey")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub public_key: std::option::Option<smithy_types::Blob>,
    /// <p>The time at which the import token and public key are no longer valid. After this time,
    /// you cannot use them to make an <a>ImportKeyMaterial</a> request and you must send
    /// another <code>GetParametersForImport</code> request to get new ones.</p>
    #[serde(rename = "ParametersValidTo")]
    #[serde(
        deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesinstant_epoch_seconds_deser"
    )]
    #[serde(default)]
    pub parameters_valid_to: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for GetParametersForImportOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetParametersForImportOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("import_token", &self.import_token);
        formatter.field("public_key", &"*** Sensitive Data Redacted ***");
        formatter.field("parameters_valid_to", &self.parameters_valid_to);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPublicKeyOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric CMK from which the public key was downloaded.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The exported public key. </p>
    /// <p>The value is a DER-encoded X.509 public key, also known as
    /// <code>SubjectPublicKeyInfo</code> (SPKI), as defined in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    /// <p></p>
    #[serde(rename = "PublicKey")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub public_key: std::option::Option<smithy_types::Blob>,
    /// <p>The type of the of the public key that was downloaded.</p>
    #[serde(rename = "CustomerMasterKeySpec")]
    #[serde(default)]
    pub customer_master_key_spec: std::option::Option<crate::model::CustomerMasterKeySpec>,
    /// <p>The permitted use of the public key. Valid values are <code>ENCRYPT_DECRYPT</code> or
    /// <code>SIGN_VERIFY</code>. </p>
    /// <p>This information is critical. If a public key with <code>SIGN_VERIFY</code> key usage
    /// encrypts data outside of AWS KMS, the ciphertext cannot be decrypted. </p>
    #[serde(rename = "KeyUsage")]
    #[serde(default)]
    pub key_usage: std::option::Option<crate::model::KeyUsageType>,
    /// <p>The encryption algorithms that AWS KMS supports for this key. </p>
    /// <p>This information is critical. If a public key encrypts data outside of AWS KMS by using an
    /// unsupported encryption algorithm, the ciphertext cannot be decrypted. </p>
    /// <p>This field appears in the response only when the <code>KeyUsage</code> of the public key
    /// is <code>ENCRYPT_DECRYPT</code>.</p>
    #[serde(rename = "EncryptionAlgorithms")]
    #[serde(default)]
    pub encryption_algorithms:
        std::option::Option<std::vec::Vec<crate::model::EncryptionAlgorithmSpec>>,
    /// <p>The signing algorithms that AWS KMS supports for this key.</p>
    /// <p>This field appears in the response only when the <code>KeyUsage</code> of the public key
    /// is <code>SIGN_VERIFY</code>.</p>
    #[serde(rename = "SigningAlgorithms")]
    #[serde(default)]
    pub signing_algorithms: std::option::Option<std::vec::Vec<crate::model::SigningAlgorithmSpec>>,
}
impl std::fmt::Debug for GetPublicKeyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPublicKeyOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("public_key", &self.public_key);
        formatter.field("customer_master_key_spec", &self.customer_master_key_spec);
        formatter.field("key_usage", &self.key_usage);
        formatter.field("encryption_algorithms", &self.encryption_algorithms);
        formatter.field("signing_algorithms", &self.signing_algorithms);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAliasesOutputBody {
    /// <p>A list of aliases.</p>
    #[serde(rename = "Aliases")]
    #[serde(default)]
    pub aliases: std::option::Option<std::vec::Vec<crate::model::AliasListEntry>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListAliasesOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAliasesOutputBody");
        formatter.field("aliases", &self.aliases);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGrantsOutputBody {
    /// <p>A list of grants.</p>
    #[serde(rename = "Grants")]
    #[serde(default)]
    pub grants: std::option::Option<std::vec::Vec<crate::model::GrantListEntry>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListGrantsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGrantsOutputBody");
        formatter.field("grants", &self.grants);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListKeyPoliciesOutputBody {
    /// <p>A list of key policy names. The only valid value is <code>default</code>.</p>
    #[serde(rename = "PolicyNames")]
    #[serde(default)]
    pub policy_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListKeyPoliciesOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListKeyPoliciesOutputBody");
        formatter.field("policy_names", &self.policy_names);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListKeysOutputBody {
    /// <p>A list of customer master keys (CMKs).</p>
    #[serde(rename = "Keys")]
    #[serde(default)]
    pub keys: std::option::Option<std::vec::Vec<crate::model::KeyListEntry>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListKeysOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListKeysOutputBody");
        formatter.field("keys", &self.keys);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourceTagsOutputBody {
    /// <p>A list of tags. Each tag consists of a tag key and a tag value.</p>
    #[serde(rename = "Tags")]
    #[serde(default)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    /// <p>Do not assume or infer any information from this value.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListResourceTagsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceTagsOutputBody");
        formatter.field("tags", &self.tags);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRetirableGrantsOutputBody {
    /// <p>A list of grants.</p>
    #[serde(rename = "Grants")]
    #[serde(default)]
    pub grants: std::option::Option<std::vec::Vec<crate::model::GrantListEntry>>,
    /// <p>When <code>Truncated</code> is true, this element is present and contains the
    /// value to use for the <code>Marker</code> parameter in a subsequent request.</p>
    #[serde(rename = "NextMarker")]
    #[serde(default)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>A flag that indicates whether there are more items in the list. When this
    /// value is true, the list in this response is truncated. To get more items, pass the value of
    /// the <code>NextMarker</code> element in thisresponse to the <code>Marker</code> parameter in a
    /// subsequent request.</p>
    #[serde(rename = "Truncated")]
    pub truncated: bool,
}
impl std::fmt::Debug for ListRetirableGrantsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRetirableGrantsOutputBody");
        formatter.field("grants", &self.grants);
        formatter.field("next_marker", &self.next_marker);
        formatter.field("truncated", &self.truncated);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ReEncryptOutputBody {
    /// <p>The reencrypted data. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "CiphertextBlob")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub ciphertext_blob: std::option::Option<smithy_types::Blob>,
    /// <p>Unique identifier of the CMK used to originally encrypt the data.</p>
    #[serde(rename = "SourceKeyId")]
    #[serde(default)]
    pub source_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK that was used to reencrypt the data.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The encryption algorithm that was used to decrypt the ciphertext before it was
    /// reencrypted.</p>
    #[serde(rename = "SourceEncryptionAlgorithm")]
    #[serde(default)]
    pub source_encryption_algorithm: std::option::Option<crate::model::EncryptionAlgorithmSpec>,
    /// <p>The encryption algorithm that was used to reencrypt the data.</p>
    #[serde(rename = "DestinationEncryptionAlgorithm")]
    #[serde(default)]
    pub destination_encryption_algorithm:
        std::option::Option<crate::model::EncryptionAlgorithmSpec>,
}
impl std::fmt::Debug for ReEncryptOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReEncryptOutputBody");
        formatter.field("ciphertext_blob", &self.ciphertext_blob);
        formatter.field("source_key_id", &self.source_key_id);
        formatter.field("key_id", &self.key_id);
        formatter.field(
            "source_encryption_algorithm",
            &self.source_encryption_algorithm,
        );
        formatter.field(
            "destination_encryption_algorithm",
            &self.destination_encryption_algorithm,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ScheduleKeyDeletionOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the CMK whose deletion is scheduled.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The date and time after which AWS KMS deletes the customer master key (CMK).</p>
    #[serde(rename = "DeletionDate")]
    #[serde(
        deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesinstant_epoch_seconds_deser"
    )]
    #[serde(default)]
    pub deletion_date: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for ScheduleKeyDeletionOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduleKeyDeletionOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("deletion_date", &self.deletion_date);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct SignOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric CMK that was used to sign the
    /// message.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>The cryptographic signature that was generated for the message. </p>
    /// <ul>
    /// <li>
    /// <p>When used with the supported RSA signing algorithms, the encoding of this value is
    /// defined by <a href="https://tools.ietf.org/html/rfc8017">PKCS #1 in RFC
    /// 8017</a>.</p>
    /// </li>
    /// <li>
    /// <p>When used with the <code>ECDSA_SHA_256</code>, <code>ECDSA_SHA_384</code>, or
    /// <code>ECDSA_SHA_512</code> signing algorithms, this value is a DER-encoded object as
    /// defined by ANS X9.62–2005 and <a href="https://tools.ietf.org/html/rfc3279#section-2.2.3">RFC 3279 Section 2.2.3</a>.
    /// This is the most commonly used signature format and is appropriate for most uses.
    /// </p>
    /// </li>
    /// </ul>
    /// <p>When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    #[serde(rename = "Signature")]
    #[serde(deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesblob_deser")]
    #[serde(default)]
    pub signature: std::option::Option<smithy_types::Blob>,
    /// <p>The signing algorithm that was used to sign the message.</p>
    #[serde(rename = "SigningAlgorithm")]
    #[serde(default)]
    pub signing_algorithm: std::option::Option<crate::model::SigningAlgorithmSpec>,
}
impl std::fmt::Debug for SignOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SignOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("signature", &self.signature);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct VerifyOutputBody {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric CMK that was used to verify the signature.</p>
    #[serde(rename = "KeyId")]
    #[serde(default)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that indicates whether the signature was verified. A value of
    /// <code>True</code> indicates that the <code>Signature</code> was produced by signing the
    /// <code>Message</code> with the specified <code>KeyID</code> and
    /// <code>SigningAlgorithm.</code> If the signature is not verified, the <code>Verify</code>
    /// operation fails with a <code>KMSInvalidSignatureException</code> exception. </p>
    #[serde(rename = "SignatureValid")]
    pub signature_valid: bool,
    /// <p>The signing algorithm that was used to verify the signature.</p>
    #[serde(rename = "SigningAlgorithm")]
    #[serde(default)]
    pub signing_algorithm: std::option::Option<crate::model::SigningAlgorithmSpec>,
}
impl std::fmt::Debug for VerifyOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyOutputBody");
        formatter.field("key_id", &self.key_id);
        formatter.field("signature_valid", &self.signature_valid);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.finish()
    }
}
