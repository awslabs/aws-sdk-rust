// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_name.is_none() {
        builder.resource_name = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_name.is_none() {
        builder.resource_name = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_create_rum_metric_definitions_output_correct_errors(
    mut builder: crate::operation::batch_create_rum_metric_definitions::builders::BatchCreateRumMetricDefinitionsOutputBuilder,
) -> crate::operation::batch_create_rum_metric_definitions::builders::BatchCreateRumMetricDefinitionsOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_rum_metric_definitions_output_correct_errors(
    mut builder: crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsOutputBuilder,
) -> crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_create_rum_metric_definitions_error_correct_errors(
    mut builder: crate::types::builders::BatchCreateRumMetricDefinitionsErrorBuilder,
) -> crate::types::builders::BatchCreateRumMetricDefinitionsErrorBuilder {
    if builder.metric_definition.is_none() {
        builder.metric_definition = {
            let builder = crate::types::builders::MetricDefinitionRequestBuilder::default();
            crate::serde_util::metric_definition_request_correct_errors(builder).build().ok()
        }
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_rum_metric_definitions_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteRumMetricDefinitionsErrorBuilder,
) -> crate::types::builders::BatchDeleteRumMetricDefinitionsErrorBuilder {
    if builder.metric_definition_id.is_none() {
        builder.metric_definition_id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_definition_correct_errors(
    mut builder: crate::types::builders::MetricDefinitionBuilder,
) -> crate::types::builders::MetricDefinitionBuilder {
    if builder.metric_definition_id.is_none() {
        builder.metric_definition_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_definition_request_correct_errors(
    mut builder: crate::types::builders::MetricDefinitionRequestBuilder,
) -> crate::types::builders::MetricDefinitionRequestBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
