// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_batch_get_rum_metric_definitions_output_next_token(
    input: &crate::operation::batch_get_rum_metric_definitions::BatchGetRumMetricDefinitionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_app_monitor_data_output_next_token(
    input: &crate::operation::get_app_monitor_data::GetAppMonitorDataOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_monitors_output_next_token(
    input: &crate::operation::list_app_monitors::ListAppMonitorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_rum_metrics_destinations_output_next_token(
    input: &crate::operation::list_rum_metrics_destinations::ListRumMetricsDestinationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_batch_get_rum_metric_definitions_output_metric_definitions(
    input: crate::operation::batch_get_rum_metric_definitions::BatchGetRumMetricDefinitionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MetricDefinition>> {
    let input = match input.metric_definitions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_app_monitor_data_output_events(
    input: crate::operation::get_app_monitor_data::GetAppMonitorDataOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_app_monitors_output_app_monitor_summaries(
    input: crate::operation::list_app_monitors::ListAppMonitorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AppMonitorSummary>> {
    let input = match input.app_monitor_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_rum_metrics_destinations_output_destinations(
    input: crate::operation::list_rum_metrics_destinations::ListRumMetricsDestinationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MetricDestinationSummary>> {
    let input = match input.destinations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
