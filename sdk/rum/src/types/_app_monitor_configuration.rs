// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains much of the configuration data for the app monitor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppMonitorConfiguration {
    /// <p>The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>A list of URLs in your website or application to exclude from RUM data collection.</p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    #[doc(hidden)]
    pub excluded_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    #[doc(hidden)]
    pub included_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of pages in your application that are to be displayed with a "favorite" icon in the CloudWatch RUM console.</p>
    #[doc(hidden)]
    pub favorite_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs.</p>
    /// <p>The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled.</p>
    /// <p>If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.</p>
    #[doc(hidden)]
    pub session_sample_rate: f64,
    /// <p>The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    #[doc(hidden)]
    pub guest_role_arn: std::option::Option<std::string::String>,
    /// <p>If you set this to <code>true</code>, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.</p>
    #[doc(hidden)]
    pub allow_cookies: std::option::Option<bool>,
    /// <p>An array that lists the types of telemetry data that this app monitor is to collect.</p>
    /// <ul>
    /// <li> <p> <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised by your application.</p> </li>
    /// <li> <p> <code>performance</code> indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.</p> </li>
    /// <li> <p> <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub telemetries: std::option::Option<std::vec::Vec<crate::types::Telemetry>>,
    /// <p>If you set this to <code>true</code>, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html">What is X-Ray?</a> </p>
    #[doc(hidden)]
    pub enable_x_ray: std::option::Option<bool>,
}
impl AppMonitorConfiguration {
    /// <p>The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>A list of URLs in your website or application to exclude from RUM data collection.</p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn excluded_pages(&self) -> std::option::Option<&[std::string::String]> {
        self.excluded_pages.as_deref()
    }
    /// <p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn included_pages(&self) -> std::option::Option<&[std::string::String]> {
        self.included_pages.as_deref()
    }
    /// <p>A list of pages in your application that are to be displayed with a "favorite" icon in the CloudWatch RUM console.</p>
    pub fn favorite_pages(&self) -> std::option::Option<&[std::string::String]> {
        self.favorite_pages.as_deref()
    }
    /// <p>Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs.</p>
    /// <p>The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled.</p>
    /// <p>If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.</p>
    pub fn session_sample_rate(&self) -> f64 {
        self.session_sample_rate
    }
    /// <p>The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn guest_role_arn(&self) -> std::option::Option<&str> {
        self.guest_role_arn.as_deref()
    }
    /// <p>If you set this to <code>true</code>, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.</p>
    pub fn allow_cookies(&self) -> std::option::Option<bool> {
        self.allow_cookies
    }
    /// <p>An array that lists the types of telemetry data that this app monitor is to collect.</p>
    /// <ul>
    /// <li> <p> <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised by your application.</p> </li>
    /// <li> <p> <code>performance</code> indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.</p> </li>
    /// <li> <p> <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p> </li>
    /// </ul>
    pub fn telemetries(&self) -> std::option::Option<&[crate::types::Telemetry]> {
        self.telemetries.as_deref()
    }
    /// <p>If you set this to <code>true</code>, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html">What is X-Ray?</a> </p>
    pub fn enable_x_ray(&self) -> std::option::Option<bool> {
        self.enable_x_ray
    }
}
impl AppMonitorConfiguration {
    /// Creates a new builder-style object to manufacture [`AppMonitorConfiguration`](crate::types::AppMonitorConfiguration).
    pub fn builder() -> crate::types::builders::AppMonitorConfigurationBuilder {
        crate::types::builders::AppMonitorConfigurationBuilder::default()
    }
}

/// A builder for [`AppMonitorConfiguration`](crate::types::AppMonitorConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppMonitorConfigurationBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) excluded_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) included_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) favorite_pages: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) session_sample_rate: std::option::Option<f64>,
    pub(crate) guest_role_arn: std::option::Option<std::string::String>,
    pub(crate) allow_cookies: std::option::Option<bool>,
    pub(crate) telemetries: std::option::Option<std::vec::Vec<crate::types::Telemetry>>,
    pub(crate) enable_x_ray: std::option::Option<bool>,
}
impl AppMonitorConfigurationBuilder {
    /// <p>The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// Appends an item to `excluded_pages`.
    ///
    /// To override the contents of this collection use [`set_excluded_pages`](Self::set_excluded_pages).
    ///
    /// <p>A list of URLs in your website or application to exclude from RUM data collection.</p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn excluded_pages(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.excluded_pages.unwrap_or_default();
        v.push(input.into());
        self.excluded_pages = Some(v);
        self
    }
    /// <p>A list of URLs in your website or application to exclude from RUM data collection.</p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn set_excluded_pages(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.excluded_pages = input;
        self
    }
    /// Appends an item to `included_pages`.
    ///
    /// To override the contents of this collection use [`set_included_pages`](Self::set_included_pages).
    ///
    /// <p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn included_pages(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.included_pages.unwrap_or_default();
        v.push(input.into());
        self.included_pages = Some(v);
        self
    }
    /// <p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p>
    /// <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
    pub fn set_included_pages(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.included_pages = input;
        self
    }
    /// Appends an item to `favorite_pages`.
    ///
    /// To override the contents of this collection use [`set_favorite_pages`](Self::set_favorite_pages).
    ///
    /// <p>A list of pages in your application that are to be displayed with a "favorite" icon in the CloudWatch RUM console.</p>
    pub fn favorite_pages(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.favorite_pages.unwrap_or_default();
        v.push(input.into());
        self.favorite_pages = Some(v);
        self
    }
    /// <p>A list of pages in your application that are to be displayed with a "favorite" icon in the CloudWatch RUM console.</p>
    pub fn set_favorite_pages(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.favorite_pages = input;
        self
    }
    /// <p>Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs.</p>
    /// <p>The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled.</p>
    /// <p>If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.</p>
    pub fn session_sample_rate(mut self, input: f64) -> Self {
        self.session_sample_rate = Some(input);
        self
    }
    /// <p>Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs.</p>
    /// <p>The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled.</p>
    /// <p>If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.</p>
    pub fn set_session_sample_rate(mut self, input: std::option::Option<f64>) -> Self {
        self.session_sample_rate = input;
        self
    }
    /// <p>The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn guest_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.guest_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.</p>
    pub fn set_guest_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.guest_role_arn = input;
        self
    }
    /// <p>If you set this to <code>true</code>, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.</p>
    pub fn allow_cookies(mut self, input: bool) -> Self {
        self.allow_cookies = Some(input);
        self
    }
    /// <p>If you set this to <code>true</code>, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.</p>
    pub fn set_allow_cookies(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_cookies = input;
        self
    }
    /// Appends an item to `telemetries`.
    ///
    /// To override the contents of this collection use [`set_telemetries`](Self::set_telemetries).
    ///
    /// <p>An array that lists the types of telemetry data that this app monitor is to collect.</p>
    /// <ul>
    /// <li> <p> <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised by your application.</p> </li>
    /// <li> <p> <code>performance</code> indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.</p> </li>
    /// <li> <p> <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p> </li>
    /// </ul>
    pub fn telemetries(mut self, input: crate::types::Telemetry) -> Self {
        let mut v = self.telemetries.unwrap_or_default();
        v.push(input);
        self.telemetries = Some(v);
        self
    }
    /// <p>An array that lists the types of telemetry data that this app monitor is to collect.</p>
    /// <ul>
    /// <li> <p> <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised by your application.</p> </li>
    /// <li> <p> <code>performance</code> indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.</p> </li>
    /// <li> <p> <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p> </li>
    /// </ul>
    pub fn set_telemetries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Telemetry>>,
    ) -> Self {
        self.telemetries = input;
        self
    }
    /// <p>If you set this to <code>true</code>, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html">What is X-Ray?</a> </p>
    pub fn enable_x_ray(mut self, input: bool) -> Self {
        self.enable_x_ray = Some(input);
        self
    }
    /// <p>If you set this to <code>true</code>, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html">What is X-Ray?</a> </p>
    pub fn set_enable_x_ray(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_x_ray = input;
        self
    }
    /// Consumes the builder and constructs a [`AppMonitorConfiguration`](crate::types::AppMonitorConfiguration).
    pub fn build(self) -> crate::types::AppMonitorConfiguration {
        crate::types::AppMonitorConfiguration {
            identity_pool_id: self.identity_pool_id,
            excluded_pages: self.excluded_pages,
            included_pages: self.included_pages,
            favorite_pages: self.favorite_pages,
            session_sample_rate: self.session_sample_rate.unwrap_or_default(),
            guest_role_arn: self.guest_role_arn,
            allow_cookies: self.allow_cookies,
            telemetries: self.telemetries,
            enable_x_ray: self.enable_x_ray,
        }
    }
}
