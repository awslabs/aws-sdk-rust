// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that displays the definition of one extended metric that RUM sends to CloudWatch or CloudWatch Evidently. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-vended-metrics.html"> Additional metrics that you can send to CloudWatch and CloudWatch Evidently</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDefinition {
    /// <p>The ID of this metric definition.</p>
    #[doc(hidden)]
    pub metric_definition_id: std::option::Option<std::string::String>,
    /// <p>The name of the metric that is defined in this structure.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The field within the event object that the metric value is sourced from.</p>
    #[doc(hidden)]
    pub value_key: std::option::Option<std::string::String>,
    /// <p>Use this field only if you are sending this metric to CloudWatch. It defines the CloudWatch metric unit that this metric is measured in. </p>
    #[doc(hidden)]
    pub unit_label: std::option::Option<std::string::String>,
    /// <p>This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch The value of this field is used only if the metric destination is <code>CloudWatch</code>. If the metric destination is <code>Evidently</code>, the value of <code>DimensionKeys</code> is ignored.</p>
    #[doc(hidden)]
    pub dimension_keys:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The pattern that defines the metric. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.</p>
    /// <p>If the metrics destination is <code>CloudWatch</code> and the event also matches a value in <code>DimensionKeys</code>, then the metric is published with the specified dimensions. </p>
    #[doc(hidden)]
    pub event_pattern: std::option::Option<std::string::String>,
}
impl MetricDefinition {
    /// <p>The ID of this metric definition.</p>
    pub fn metric_definition_id(&self) -> std::option::Option<&str> {
        self.metric_definition_id.as_deref()
    }
    /// <p>The name of the metric that is defined in this structure.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The field within the event object that the metric value is sourced from.</p>
    pub fn value_key(&self) -> std::option::Option<&str> {
        self.value_key.as_deref()
    }
    /// <p>Use this field only if you are sending this metric to CloudWatch. It defines the CloudWatch metric unit that this metric is measured in. </p>
    pub fn unit_label(&self) -> std::option::Option<&str> {
        self.unit_label.as_deref()
    }
    /// <p>This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch The value of this field is used only if the metric destination is <code>CloudWatch</code>. If the metric destination is <code>Evidently</code>, the value of <code>DimensionKeys</code> is ignored.</p>
    pub fn dimension_keys(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.dimension_keys.as_ref()
    }
    /// <p>The pattern that defines the metric. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.</p>
    /// <p>If the metrics destination is <code>CloudWatch</code> and the event also matches a value in <code>DimensionKeys</code>, then the metric is published with the specified dimensions. </p>
    pub fn event_pattern(&self) -> std::option::Option<&str> {
        self.event_pattern.as_deref()
    }
}
impl MetricDefinition {
    /// Creates a new builder-style object to manufacture [`MetricDefinition`](crate::types::MetricDefinition).
    pub fn builder() -> crate::types::builders::MetricDefinitionBuilder {
        crate::types::builders::MetricDefinitionBuilder::default()
    }
}

/// A builder for [`MetricDefinition`](crate::types::MetricDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDefinitionBuilder {
    pub(crate) metric_definition_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value_key: std::option::Option<std::string::String>,
    pub(crate) unit_label: std::option::Option<std::string::String>,
    pub(crate) dimension_keys:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) event_pattern: std::option::Option<std::string::String>,
}
impl MetricDefinitionBuilder {
    /// <p>The ID of this metric definition.</p>
    pub fn metric_definition_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_definition_id = Some(input.into());
        self
    }
    /// <p>The ID of this metric definition.</p>
    pub fn set_metric_definition_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.metric_definition_id = input;
        self
    }
    /// <p>The name of the metric that is defined in this structure.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the metric that is defined in this structure.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The field within the event object that the metric value is sourced from.</p>
    pub fn value_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.value_key = Some(input.into());
        self
    }
    /// <p>The field within the event object that the metric value is sourced from.</p>
    pub fn set_value_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value_key = input;
        self
    }
    /// <p>Use this field only if you are sending this metric to CloudWatch. It defines the CloudWatch metric unit that this metric is measured in. </p>
    pub fn unit_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit_label = Some(input.into());
        self
    }
    /// <p>Use this field only if you are sending this metric to CloudWatch. It defines the CloudWatch metric unit that this metric is measured in. </p>
    pub fn set_unit_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit_label = input;
        self
    }
    /// Adds a key-value pair to `dimension_keys`.
    ///
    /// To override the contents of this collection use [`set_dimension_keys`](Self::set_dimension_keys).
    ///
    /// <p>This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch The value of this field is used only if the metric destination is <code>CloudWatch</code>. If the metric destination is <code>Evidently</code>, the value of <code>DimensionKeys</code> is ignored.</p>
    pub fn dimension_keys(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.dimension_keys.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.dimension_keys = Some(hash_map);
        self
    }
    /// <p>This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch The value of this field is used only if the metric destination is <code>CloudWatch</code>. If the metric destination is <code>Evidently</code>, the value of <code>DimensionKeys</code> is ignored.</p>
    pub fn set_dimension_keys(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.dimension_keys = input;
        self
    }
    /// <p>The pattern that defines the metric. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.</p>
    /// <p>If the metrics destination is <code>CloudWatch</code> and the event also matches a value in <code>DimensionKeys</code>, then the metric is published with the specified dimensions. </p>
    pub fn event_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_pattern = Some(input.into());
        self
    }
    /// <p>The pattern that defines the metric. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.</p>
    /// <p>If the metrics destination is <code>CloudWatch</code> and the event also matches a value in <code>DimensionKeys</code>, then the metric is published with the specified dimensions. </p>
    pub fn set_event_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_pattern = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDefinition`](crate::types::MetricDefinition).
    pub fn build(self) -> crate::types::MetricDefinition {
        crate::types::MetricDefinition {
            metric_definition_id: self.metric_definition_id,
            name: self.name,
            value_key: self.value_key,
            unit_label: self.unit_label,
            dimension_keys: self.dimension_keys,
            event_pattern: self.event_pattern,
        }
    }
}
