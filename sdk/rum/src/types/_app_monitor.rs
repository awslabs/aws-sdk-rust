// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A RUM app monitor collects telemetry data from your application and sends that data to RUM. The data includes performance and reliability information such as page load time, client-side errors, and user behavior.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppMonitor {
    /// <p>The name of the app monitor.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The top-level internet domain name for which your application has administrative authority.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The unique ID of this app monitor.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The date and time that this app monitor was created.</p>
    #[doc(hidden)]
    pub created: std::option::Option<std::string::String>,
    /// <p>The date and time of the most recent changes to this app monitor's configuration.</p>
    #[doc(hidden)]
    pub last_modified: std::option::Option<std::string::String>,
    /// <p>The list of tag keys and values associated with this app monitor.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The current state of the app monitor.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::StateEnum>,
    /// <p>A structure that contains much of the configuration data for the app monitor.</p>
    #[doc(hidden)]
    pub app_monitor_configuration: std::option::Option<crate::types::AppMonitorConfiguration>,
    /// <p>A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.</p>
    #[doc(hidden)]
    pub data_storage: std::option::Option<crate::types::DataStorage>,
    /// <p>Specifies whether this app monitor allows the web client to define and send custom events.</p>
    /// <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    #[doc(hidden)]
    pub custom_events: std::option::Option<crate::types::CustomEvents>,
}
impl AppMonitor {
    /// <p>The name of the app monitor.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The top-level internet domain name for which your application has administrative authority.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The unique ID of this app monitor.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The date and time that this app monitor was created.</p>
    pub fn created(&self) -> std::option::Option<&str> {
        self.created.as_deref()
    }
    /// <p>The date and time of the most recent changes to this app monitor's configuration.</p>
    pub fn last_modified(&self) -> std::option::Option<&str> {
        self.last_modified.as_deref()
    }
    /// <p>The list of tag keys and values associated with this app monitor.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The current state of the app monitor.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::StateEnum> {
        self.state.as_ref()
    }
    /// <p>A structure that contains much of the configuration data for the app monitor.</p>
    pub fn app_monitor_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AppMonitorConfiguration> {
        self.app_monitor_configuration.as_ref()
    }
    /// <p>A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.</p>
    pub fn data_storage(&self) -> std::option::Option<&crate::types::DataStorage> {
        self.data_storage.as_ref()
    }
    /// <p>Specifies whether this app monitor allows the web client to define and send custom events.</p>
    /// <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    pub fn custom_events(&self) -> std::option::Option<&crate::types::CustomEvents> {
        self.custom_events.as_ref()
    }
}
impl AppMonitor {
    /// Creates a new builder-style object to manufacture [`AppMonitor`](crate::types::AppMonitor).
    pub fn builder() -> crate::types::builders::AppMonitorBuilder {
        crate::types::builders::AppMonitorBuilder::default()
    }
}

/// A builder for [`AppMonitor`](crate::types::AppMonitor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppMonitorBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) created: std::option::Option<std::string::String>,
    pub(crate) last_modified: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) state: std::option::Option<crate::types::StateEnum>,
    pub(crate) app_monitor_configuration:
        std::option::Option<crate::types::AppMonitorConfiguration>,
    pub(crate) data_storage: std::option::Option<crate::types::DataStorage>,
    pub(crate) custom_events: std::option::Option<crate::types::CustomEvents>,
}
impl AppMonitorBuilder {
    /// <p>The name of the app monitor.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the app monitor.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The top-level internet domain name for which your application has administrative authority.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The top-level internet domain name for which your application has administrative authority.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The unique ID of this app monitor.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID of this app monitor.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The date and time that this app monitor was created.</p>
    pub fn created(mut self, input: impl Into<std::string::String>) -> Self {
        self.created = Some(input.into());
        self
    }
    /// <p>The date and time that this app monitor was created.</p>
    pub fn set_created(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date and time of the most recent changes to this app monitor's configuration.</p>
    pub fn last_modified(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified = Some(input.into());
        self
    }
    /// <p>The date and time of the most recent changes to this app monitor's configuration.</p>
    pub fn set_last_modified(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_modified = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys and values associated with this app monitor.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The list of tag keys and values associated with this app monitor.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The current state of the app monitor.</p>
    pub fn state(mut self, input: crate::types::StateEnum) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the app monitor.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::StateEnum>) -> Self {
        self.state = input;
        self
    }
    /// <p>A structure that contains much of the configuration data for the app monitor.</p>
    pub fn app_monitor_configuration(
        mut self,
        input: crate::types::AppMonitorConfiguration,
    ) -> Self {
        self.app_monitor_configuration = Some(input);
        self
    }
    /// <p>A structure that contains much of the configuration data for the app monitor.</p>
    pub fn set_app_monitor_configuration(
        mut self,
        input: std::option::Option<crate::types::AppMonitorConfiguration>,
    ) -> Self {
        self.app_monitor_configuration = input;
        self
    }
    /// <p>A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.</p>
    pub fn data_storage(mut self, input: crate::types::DataStorage) -> Self {
        self.data_storage = Some(input);
        self
    }
    /// <p>A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.</p>
    pub fn set_data_storage(
        mut self,
        input: std::option::Option<crate::types::DataStorage>,
    ) -> Self {
        self.data_storage = input;
        self
    }
    /// <p>Specifies whether this app monitor allows the web client to define and send custom events.</p>
    /// <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    pub fn custom_events(mut self, input: crate::types::CustomEvents) -> Self {
        self.custom_events = Some(input);
        self
    }
    /// <p>Specifies whether this app monitor allows the web client to define and send custom events.</p>
    /// <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    pub fn set_custom_events(
        mut self,
        input: std::option::Option<crate::types::CustomEvents>,
    ) -> Self {
        self.custom_events = input;
        self
    }
    /// Consumes the builder and constructs a [`AppMonitor`](crate::types::AppMonitor).
    pub fn build(self) -> crate::types::AppMonitor {
        crate::types::AppMonitor {
            name: self.name,
            domain: self.domain,
            id: self.id,
            created: self.created,
            last_modified: self.last_modified,
            tags: self.tags,
            state: self.state,
            app_monitor_configuration: self.app_monitor_configuration,
            data_storage: self.data_storage,
            custom_events: self.custom_events,
        }
    }
}
