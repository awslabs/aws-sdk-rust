// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that displays information about one destination that CloudWatch RUM sends extended metrics to.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDestinationSummary {
    /// <p>Specifies whether the destination is <code>CloudWatch</code> or <code>Evidently</code>.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::MetricDestination>,
    /// <p>If the destination is <code>Evidently</code>, this specifies the ARN of the Evidently experiment that receives the metrics.</p>
    #[doc(hidden)]
    pub destination_arn: std::option::Option<std::string::String>,
    /// <p>This field appears only when the destination is <code>Evidently</code>. It specifies the ARN of the IAM role that is used to write to the Evidently experiment that receives the metrics.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
}
impl MetricDestinationSummary {
    /// <p>Specifies whether the destination is <code>CloudWatch</code> or <code>Evidently</code>.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::MetricDestination> {
        self.destination.as_ref()
    }
    /// <p>If the destination is <code>Evidently</code>, this specifies the ARN of the Evidently experiment that receives the metrics.</p>
    pub fn destination_arn(&self) -> std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
    /// <p>This field appears only when the destination is <code>Evidently</code>. It specifies the ARN of the IAM role that is used to write to the Evidently experiment that receives the metrics.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
}
impl MetricDestinationSummary {
    /// Creates a new builder-style object to manufacture [`MetricDestinationSummary`](crate::types::MetricDestinationSummary).
    pub fn builder() -> crate::types::builders::MetricDestinationSummaryBuilder {
        crate::types::builders::MetricDestinationSummaryBuilder::default()
    }
}

/// A builder for [`MetricDestinationSummary`](crate::types::MetricDestinationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDestinationSummaryBuilder {
    pub(crate) destination: std::option::Option<crate::types::MetricDestination>,
    pub(crate) destination_arn: std::option::Option<std::string::String>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
}
impl MetricDestinationSummaryBuilder {
    /// <p>Specifies whether the destination is <code>CloudWatch</code> or <code>Evidently</code>.</p>
    pub fn destination(mut self, input: crate::types::MetricDestination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>Specifies whether the destination is <code>CloudWatch</code> or <code>Evidently</code>.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::MetricDestination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>If the destination is <code>Evidently</code>, this specifies the ARN of the Evidently experiment that receives the metrics.</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_arn = Some(input.into());
        self
    }
    /// <p>If the destination is <code>Evidently</code>, this specifies the ARN of the Evidently experiment that receives the metrics.</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>This field appears only when the destination is <code>Evidently</code>. It specifies the ARN of the IAM role that is used to write to the Evidently experiment that receives the metrics.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>This field appears only when the destination is <code>Evidently</code>. It specifies the ARN of the IAM role that is used to write to the Evidently experiment that receives the metrics.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDestinationSummary`](crate::types::MetricDestinationSummary).
    pub fn build(self) -> crate::types::MetricDestinationSummary {
        crate::types::MetricDestinationSummary {
            destination: self.destination,
            destination_arn: self.destination_arn,
            iam_role_arn: self.iam_role_arn,
        }
    }
}
