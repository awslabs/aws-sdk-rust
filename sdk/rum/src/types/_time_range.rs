// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines the time range that you want to retrieve results from.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeRange {
    /// <p>The beginning of the time range to retrieve performance events from.</p>
    #[doc(hidden)]
    pub after: i64,
    /// <p>The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed.</p>
    #[doc(hidden)]
    pub before: i64,
}
impl TimeRange {
    /// <p>The beginning of the time range to retrieve performance events from.</p>
    pub fn after(&self) -> i64 {
        self.after
    }
    /// <p>The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed.</p>
    pub fn before(&self) -> i64 {
        self.before
    }
}
impl TimeRange {
    /// Creates a new builder-style object to manufacture [`TimeRange`](crate::types::TimeRange).
    pub fn builder() -> crate::types::builders::TimeRangeBuilder {
        crate::types::builders::TimeRangeBuilder::default()
    }
}

/// A builder for [`TimeRange`](crate::types::TimeRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeRangeBuilder {
    pub(crate) after: std::option::Option<i64>,
    pub(crate) before: std::option::Option<i64>,
}
impl TimeRangeBuilder {
    /// <p>The beginning of the time range to retrieve performance events from.</p>
    pub fn after(mut self, input: i64) -> Self {
        self.after = Some(input);
        self
    }
    /// <p>The beginning of the time range to retrieve performance events from.</p>
    pub fn set_after(mut self, input: std::option::Option<i64>) -> Self {
        self.after = input;
        self
    }
    /// <p>The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed.</p>
    pub fn before(mut self, input: i64) -> Self {
        self.before = Some(input);
        self
    }
    /// <p>The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed.</p>
    pub fn set_before(mut self, input: std::option::Option<i64>) -> Self {
        self.before = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeRange`](crate::types::TimeRange).
    pub fn build(self) -> crate::types::TimeRange {
        crate::types::TimeRange {
            after: self.after.unwrap_or_default(),
            before: self.before.unwrap_or_default(),
        }
    }
}
