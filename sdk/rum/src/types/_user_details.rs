// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserDetails {
    /// <p>The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The session ID that the performance events are from.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
}
impl UserDetails {
    /// <p>The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The session ID that the performance events are from.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
}
impl UserDetails {
    /// Creates a new builder-style object to manufacture [`UserDetails`](crate::types::UserDetails).
    pub fn builder() -> crate::types::builders::UserDetailsBuilder {
        crate::types::builders::UserDetailsBuilder::default()
    }
}

/// A builder for [`UserDetails`](crate::types::UserDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserDetailsBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
}
impl UserDetailsBuilder {
    /// <p>The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The session ID that the performance events are from.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The session ID that the performance events are from.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UserDetails`](crate::types::UserDetails).
    pub fn build(self) -> crate::types::UserDetails {
        crate::types::UserDetails {
            user_id: self.user_id,
            session_id: self.session_id,
        }
    }
}
