// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_app_monitor_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AppMonitorConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.identity_pool_id {
        object.key("IdentityPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.excluded_pages {
        let mut array_3 = object.key("ExcludedPages").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.included_pages {
        let mut array_6 = object.key("IncludedPages").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.favorite_pages {
        let mut array_9 = object.key("FavoritePages").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if input.session_sample_rate != 0.0 {
        object.key("SessionSampleRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.session_sample_rate).into()),
        );
    }
    if let Some(var_11) = &input.guest_role_arn {
        object.key("GuestRoleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.allow_cookies {
        object.key("AllowCookies").boolean(*var_12);
    }
    if let Some(var_13) = &input.telemetries {
        let mut array_14 = object.key("Telemetries").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.enable_x_ray {
        object.key("EnableXRay").boolean(*var_16);
    }
    Ok(())
}

pub(crate) fn de_app_monitor_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AppMonitorConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AppMonitorConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "IdentityPoolId" => {
                                builder = builder.set_identity_pool_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExcludedPages" => {
                                builder = builder.set_excluded_pages(
                                    crate::protocol_serde::shape_pages::de_pages(tokens)?,
                                );
                            }
                            "IncludedPages" => {
                                builder = builder.set_included_pages(
                                    crate::protocol_serde::shape_pages::de_pages(tokens)?,
                                );
                            }
                            "FavoritePages" => {
                                builder = builder.set_favorite_pages(
                                    crate::protocol_serde::shape_favorite_pages::de_favorite_pages(
                                        tokens,
                                    )?,
                                );
                            }
                            "SessionSampleRate" => {
                                builder = builder.set_session_sample_rate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "GuestRoleArn" => {
                                builder = builder.set_guest_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AllowCookies" => {
                                builder = builder.set_allow_cookies(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Telemetries" => {
                                builder = builder.set_telemetries(
                                    crate::protocol_serde::shape_telemetries::de_telemetries(
                                        tokens,
                                    )?,
                                );
                            }
                            "EnableXRay" => {
                                builder = builder.set_enable_x_ray(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
