// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_app_monitor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppMonitorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.app_monitor_configuration {
        let mut object_2 = object.key("AppMonitorConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.cw_log_enabled {
        object.key("CwLogEnabled").boolean(*var_3);
    }
    if let Some(var_4) = &input.domain {
        object.key("Domain").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut object_7 = object.key("Tags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_app_monitor_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAppMonitorDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.filters {
        let mut array_11 = object.key("Filters").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_query_filter(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_14) = &input.next_token {
        object.key("NextToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.time_range {
        let mut object_16 = object.key("TimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_rum_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRumEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.app_monitor_details {
        let mut object_18 = object.key("AppMonitorDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_details(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.batch_id {
        object.key("BatchId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.rum_events {
        let mut array_21 = object.key("RumEvents").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rum_event(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.user_details {
        let mut object_25 = object.key("UserDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_user_details(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_monitor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppMonitorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.app_monitor_configuration {
        let mut object_31 = object.key("AppMonitorConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    if let Some(var_32) = &input.cw_log_enabled {
        object.key("CwLogEnabled").boolean(*var_32);
    }
    if let Some(var_33) = &input.domain {
        object.key("Domain").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_monitor_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppMonitorConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.identity_pool_id {
        object.key("IdentityPoolId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.excluded_pages {
        let mut array_36 = object.key("ExcludedPages").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.included_pages {
        let mut array_39 = object.key("IncludedPages").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.favorite_pages {
        let mut array_42 = object.key("FavoritePages").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43.as_str());
            }
        }
        array_42.finish();
    }
    if input.session_sample_rate != 0.0 {
        object.key("SessionSampleRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.session_sample_rate).into()),
        );
    }
    if let Some(var_44) = &input.guest_role_arn {
        object.key("GuestRoleArn").string(var_44.as_str());
    }
    if let Some(var_45) = &input.allow_cookies {
        object.key("AllowCookies").boolean(*var_45);
    }
    if let Some(var_46) = &input.telemetries {
        let mut array_47 = object.key("Telemetries").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.enable_x_ray {
        object.key("EnableXRay").boolean(*var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.values {
        let mut array_52 = object.key("Values").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("After").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.after).into()),
        );
    }
    if input.before != 0 {
        object.key("Before").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.before).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_monitor_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppMonitorDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.name {
        object.key("name").string(var_54.as_str());
    }
    if let Some(var_55) = &input.id {
        object.key("id").string(var_55.as_str());
    }
    if let Some(var_56) = &input.version {
        object.key("version").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rum_event(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RumEvent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.id {
        object.key("id").string(var_57.as_str());
    }
    if let Some(var_58) = &input.timestamp {
        object
            .key("timestamp")
            .date_time(var_58, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_59) = &input.r#type {
        object.key("type").string(var_59.as_str());
    }
    if let Some(var_60) = &input.metadata {
        object.key("metadata").string(var_60.as_str());
    }
    if let Some(var_61) = &input.details {
        object.key("details").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.user_id {
        object.key("userId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.session_id {
        object.key("sessionId").string(var_63.as_str());
    }
    Ok(())
}
