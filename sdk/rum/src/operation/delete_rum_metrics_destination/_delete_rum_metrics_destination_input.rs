// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRumMetricsDestinationInput {
    /// <p>The name of the app monitor that is sending metrics to the destination that you want to delete.</p>
    #[doc(hidden)]
    pub app_monitor_name: std::option::Option<std::string::String>,
    /// <p>The type of destination to delete. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::MetricDestination>,
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.</p>
    #[doc(hidden)]
    pub destination_arn: std::option::Option<std::string::String>,
}
impl DeleteRumMetricsDestinationInput {
    /// <p>The name of the app monitor that is sending metrics to the destination that you want to delete.</p>
    pub fn app_monitor_name(&self) -> std::option::Option<&str> {
        self.app_monitor_name.as_deref()
    }
    /// <p>The type of destination to delete. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::MetricDestination> {
        self.destination.as_ref()
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.</p>
    pub fn destination_arn(&self) -> std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
}
impl DeleteRumMetricsDestinationInput {
    /// Creates a new builder-style object to manufacture [`DeleteRumMetricsDestinationInput`](crate::operation::delete_rum_metrics_destination::DeleteRumMetricsDestinationInput).
    pub fn builder() -> crate::operation::delete_rum_metrics_destination::builders::DeleteRumMetricsDestinationInputBuilder{
        crate::operation::delete_rum_metrics_destination::builders::DeleteRumMetricsDestinationInputBuilder::default()
    }
}

/// A builder for [`DeleteRumMetricsDestinationInput`](crate::operation::delete_rum_metrics_destination::DeleteRumMetricsDestinationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteRumMetricsDestinationInputBuilder {
    pub(crate) app_monitor_name: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<crate::types::MetricDestination>,
    pub(crate) destination_arn: std::option::Option<std::string::String>,
}
impl DeleteRumMetricsDestinationInputBuilder {
    /// <p>The name of the app monitor that is sending metrics to the destination that you want to delete.</p>
    pub fn app_monitor_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_monitor_name = Some(input.into());
        self
    }
    /// <p>The name of the app monitor that is sending metrics to the destination that you want to delete.</p>
    pub fn set_app_monitor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_monitor_name = input;
        self
    }
    /// <p>The type of destination to delete. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    pub fn destination(mut self, input: crate::types::MetricDestination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The type of destination to delete. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::MetricDestination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.</p>
    pub fn destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_arn = Some(input.into());
        self
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.</p>
    pub fn set_destination_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteRumMetricsDestinationInput`](crate::operation::delete_rum_metrics_destination::DeleteRumMetricsDestinationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_rum_metrics_destination::DeleteRumMetricsDestinationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_rum_metrics_destination::DeleteRumMetricsDestinationInput {
                app_monitor_name: self.app_monitor_name,
                destination: self.destination,
                destination_arn: self.destination_arn,
            },
        )
    }
}
