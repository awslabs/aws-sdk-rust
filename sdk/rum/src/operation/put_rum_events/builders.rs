// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_rum_events::_put_rum_events_output::PutRumEventsOutputBuilder;

pub use crate::operation::put_rum_events::_put_rum_events_input::PutRumEventsInputBuilder;

impl PutRumEventsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_rum_events::PutRumEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_rum_events::PutRumEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_rum_events();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutRumEvents`.
///
/// <p>Sends telemetry events about your application performance and user behavior to CloudWatch RUM. The code snippet that RUM generates for you to add to your application includes <code>PutRumEvents</code> operations to send this data to RUM.</p>
/// <p>Each <code>PutRumEvents</code> operation can send a batch of events from one user session.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutRumEventsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_rum_events::builders::PutRumEventsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_rum_events::PutRumEventsOutput,
        crate::operation::put_rum_events::PutRumEventsError,
    > for PutRumEventsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_rum_events::PutRumEventsOutput,
            crate::operation::put_rum_events::PutRumEventsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutRumEventsFluentBuilder {
    /// Creates a new `PutRumEvents`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutRumEvents as a reference.
    pub fn as_input(&self) -> &crate::operation::put_rum_events::builders::PutRumEventsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_rum_events::PutRumEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_rum_events::PutRumEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_rum_events::PutRumEvents::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_rum_events::PutRumEvents::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_rum_events::PutRumEventsOutput,
        crate::operation::put_rum_events::PutRumEventsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The ID of the app monitor that is sending this data.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn batch_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.batch_id(input.into());
        self
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn set_batch_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_batch_id(input);
        self
    }
    /// <p>A unique identifier for this batch of RUM event data.</p>
    pub fn get_batch_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_batch_id()
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn app_monitor_details(mut self, input: crate::types::AppMonitorDetails) -> Self {
        self.inner = self.inner.app_monitor_details(input);
        self
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn set_app_monitor_details(mut self, input: ::std::option::Option<crate::types::AppMonitorDetails>) -> Self {
        self.inner = self.inner.set_app_monitor_details(input);
        self
    }
    /// <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    pub fn get_app_monitor_details(&self) -> &::std::option::Option<crate::types::AppMonitorDetails> {
        self.inner.get_app_monitor_details()
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn user_details(mut self, input: crate::types::UserDetails) -> Self {
        self.inner = self.inner.user_details(input);
        self
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn set_user_details(mut self, input: ::std::option::Option<crate::types::UserDetails>) -> Self {
        self.inner = self.inner.set_user_details(input);
        self
    }
    /// <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    pub fn get_user_details(&self) -> &::std::option::Option<crate::types::UserDetails> {
        self.inner.get_user_details()
    }
    /// Appends an item to `RumEvents`.
    ///
    /// To override the contents of this collection use [`set_rum_events`](Self::set_rum_events).
    ///
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn rum_events(mut self, input: crate::types::RumEvent) -> Self {
        self.inner = self.inner.rum_events(input);
        self
    }
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn set_rum_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RumEvent>>) -> Self {
        self.inner = self.inner.set_rum_events(input);
        self
    }
    /// <p>An array of structures that contain the telemetry event data.</p>
    pub fn get_rum_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RumEvent>> {
        self.inner.get_rum_events()
    }
}
