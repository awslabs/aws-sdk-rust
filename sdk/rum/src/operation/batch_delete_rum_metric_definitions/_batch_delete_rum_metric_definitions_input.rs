// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteRumMetricDefinitionsInput {
    /// <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    pub app_monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    pub destination: ::std::option::Option<crate::types::MetricDestination>,
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>
    /// <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    pub destination_arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of structures which define the metrics that you want to stop sending.</p>
    pub metric_definition_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteRumMetricDefinitionsInput {
    /// <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    pub fn app_monitor_name(&self) -> ::std::option::Option<&str> {
        self.app_monitor_name.as_deref()
    }
    /// <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::MetricDestination> {
        self.destination.as_ref()
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>
    /// <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    pub fn destination_arn(&self) -> ::std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
    /// <p>An array of structures which define the metrics that you want to stop sending.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_definition_ids.is_none()`.
    pub fn metric_definition_ids(&self) -> &[::std::string::String] {
        self.metric_definition_ids.as_deref().unwrap_or_default()
    }
}
impl BatchDeleteRumMetricDefinitionsInput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteRumMetricDefinitionsInput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsInput).
    pub fn builder() -> crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsInputBuilder {
        crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsInputBuilder::default()
    }
}

/// A builder for [`BatchDeleteRumMetricDefinitionsInput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDeleteRumMetricDefinitionsInputBuilder {
    pub(crate) app_monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<crate::types::MetricDestination>,
    pub(crate) destination_arn: ::std::option::Option<::std::string::String>,
    pub(crate) metric_definition_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteRumMetricDefinitionsInputBuilder {
    /// <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    /// This field is required.
    pub fn app_monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    pub fn set_app_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_monitor_name = input;
        self
    }
    /// <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    pub fn get_app_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_monitor_name
    }
    /// <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::MetricDestination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::MetricDestination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::MetricDestination> {
        &self.destination
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>
    /// <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    pub fn destination_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>
    /// <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    pub fn set_destination_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>
    /// <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    pub fn get_destination_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_arn
    }
    /// Appends an item to `metric_definition_ids`.
    ///
    /// To override the contents of this collection use [`set_metric_definition_ids`](Self::set_metric_definition_ids).
    ///
    /// <p>An array of structures which define the metrics that you want to stop sending.</p>
    pub fn metric_definition_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metric_definition_ids.unwrap_or_default();
        v.push(input.into());
        self.metric_definition_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures which define the metrics that you want to stop sending.</p>
    pub fn set_metric_definition_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metric_definition_ids = input;
        self
    }
    /// <p>An array of structures which define the metrics that you want to stop sending.</p>
    pub fn get_metric_definition_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metric_definition_ids
    }
    /// Consumes the builder and constructs a [`BatchDeleteRumMetricDefinitionsInput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsInput {
                app_monitor_name: self.app_monitor_name,
                destination: self.destination,
                destination_arn: self.destination_arn,
                metric_definition_ids: self.metric_definition_ids,
            },
        )
    }
}
