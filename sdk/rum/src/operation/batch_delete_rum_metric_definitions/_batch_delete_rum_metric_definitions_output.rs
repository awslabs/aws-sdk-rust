// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteRumMetricDefinitionsOutput {
    /// <p>An array of error objects, if the operation caused any errors.</p>
    #[doc(hidden)]
    pub errors:
        std::option::Option<std::vec::Vec<crate::types::BatchDeleteRumMetricDefinitionsError>>,
    /// <p>The IDs of the metric definitions that were deleted.</p>
    #[doc(hidden)]
    pub metric_definition_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchDeleteRumMetricDefinitionsOutput {
    /// <p>An array of error objects, if the operation caused any errors.</p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::types::BatchDeleteRumMetricDefinitionsError]> {
        self.errors.as_deref()
    }
    /// <p>The IDs of the metric definitions that were deleted.</p>
    pub fn metric_definition_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.metric_definition_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDeleteRumMetricDefinitionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDeleteRumMetricDefinitionsOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteRumMetricDefinitionsOutput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsOutput).
    pub fn builder() -> crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsOutputBuilder{
        crate::operation::batch_delete_rum_metric_definitions::builders::BatchDeleteRumMetricDefinitionsOutputBuilder::default()
    }
}

/// A builder for [`BatchDeleteRumMetricDefinitionsOutput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDeleteRumMetricDefinitionsOutputBuilder {
    pub(crate) errors:
        std::option::Option<std::vec::Vec<crate::types::BatchDeleteRumMetricDefinitionsError>>,
    pub(crate) metric_definition_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchDeleteRumMetricDefinitionsOutputBuilder {
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>An array of error objects, if the operation caused any errors.</p>
    pub fn errors(mut self, input: crate::types::BatchDeleteRumMetricDefinitionsError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>An array of error objects, if the operation caused any errors.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::BatchDeleteRumMetricDefinitionsError>,
        >,
    ) -> Self {
        self.errors = input;
        self
    }
    /// Appends an item to `metric_definition_ids`.
    ///
    /// To override the contents of this collection use [`set_metric_definition_ids`](Self::set_metric_definition_ids).
    ///
    /// <p>The IDs of the metric definitions that were deleted.</p>
    pub fn metric_definition_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.metric_definition_ids.unwrap_or_default();
        v.push(input.into());
        self.metric_definition_ids = Some(v);
        self
    }
    /// <p>The IDs of the metric definitions that were deleted.</p>
    pub fn set_metric_definition_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.metric_definition_ids = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDeleteRumMetricDefinitionsOutput`](crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsOutput
    {
        crate::operation::batch_delete_rum_metric_definitions::BatchDeleteRumMetricDefinitionsOutput {
            errors: self.errors
            ,
            metric_definition_ids: self.metric_definition_ids
            ,
            _request_id: self._request_id,
        }
    }
}
