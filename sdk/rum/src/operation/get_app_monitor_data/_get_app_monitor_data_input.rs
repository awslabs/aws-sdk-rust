// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAppMonitorDataInput {
    /// <p>The name of the app monitor that collected the data that you want to retrieve.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A structure that defines the time range that you want to retrieve results from.</p>
    #[doc(hidden)]
    pub time_range: std::option::Option<crate::types::TimeRange>,
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
    /// <p>The maximum number of results to return in one operation. </p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>Use the token returned by the previous operation to request the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetAppMonitorDataInput {
    /// <p>The name of the app monitor that collected the data that you want to retrieve.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A structure that defines the time range that you want to retrieve results from.</p>
    pub fn time_range(&self) -> std::option::Option<&crate::types::TimeRange> {
        self.time_range.as_ref()
    }
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::QueryFilter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of results to return in one operation. </p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>Use the token returned by the previous operation to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetAppMonitorDataInput {
    /// Creates a new builder-style object to manufacture [`GetAppMonitorDataInput`](crate::operation::get_app_monitor_data::GetAppMonitorDataInput).
    pub fn builder(
    ) -> crate::operation::get_app_monitor_data::builders::GetAppMonitorDataInputBuilder {
        crate::operation::get_app_monitor_data::builders::GetAppMonitorDataInputBuilder::default()
    }
}

/// A builder for [`GetAppMonitorDataInput`](crate::operation::get_app_monitor_data::GetAppMonitorDataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAppMonitorDataInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) time_range: std::option::Option<crate::types::TimeRange>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetAppMonitorDataInputBuilder {
    /// <p>The name of the app monitor that collected the data that you want to retrieve.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the app monitor that collected the data that you want to retrieve.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A structure that defines the time range that you want to retrieve results from.</p>
    pub fn time_range(mut self, input: crate::types::TimeRange) -> Self {
        self.time_range = Some(input);
        self
    }
    /// <p>A structure that defines the time range that you want to retrieve results from.</p>
    pub fn set_time_range(mut self, input: std::option::Option<crate::types::TimeRange>) -> Self {
        self.time_range = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.</p>
    pub fn filters(mut self, input: crate::types::QueryFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of results to return in one operation. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Use the token returned by the previous operation to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Use the token returned by the previous operation to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetAppMonitorDataInput`](crate::operation::get_app_monitor_data::GetAppMonitorDataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_app_monitor_data::GetAppMonitorDataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_app_monitor_data::GetAppMonitorDataInput {
                name: self.name,
                time_range: self.time_range,
                filters: self.filters,
                max_results: self.max_results.unwrap_or_default(),
                next_token: self.next_token,
            },
        )
    }
}
