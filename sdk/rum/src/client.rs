// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for CloudWatch RUM
///
/// Client for invoking operations on CloudWatch RUM. Each operation on CloudWatch RUM is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_rum::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_rum::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_rum::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchCreateRumMetricDefinitions`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::set_app_monitor_name): <p>The name of the CloudWatch RUM app monitor that is to send the metrics.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::set_destination): <p>The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::set_destination_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p>  <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html">PutRumMetricsDestination</a>.</p>
    ///   - [`metric_definitions(Vec<MetricDefinitionRequest>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::metric_definitions) / [`set_metric_definitions(Option<Vec<MetricDefinitionRequest>>)`](crate::client::fluent_builders::BatchCreateRumMetricDefinitions::set_metric_definitions): <p>An array of structures which define the metrics that you want to send.</p>
    /// - On success, responds with [`BatchCreateRumMetricDefinitionsOutput`](crate::output::BatchCreateRumMetricDefinitionsOutput) with field(s):
    ///   - [`errors(Option<Vec<BatchCreateRumMetricDefinitionsError>>)`](crate::output::BatchCreateRumMetricDefinitionsOutput::errors): <p>An array of error objects, if the operation caused any errors.</p>
    ///   - [`metric_definitions(Option<Vec<MetricDefinition>>)`](crate::output::BatchCreateRumMetricDefinitionsOutput::metric_definitions): <p>An array of structures that define the extended metrics.</p>
    /// - On failure, responds with [`SdkError<BatchCreateRumMetricDefinitionsError>`](crate::error::BatchCreateRumMetricDefinitionsError)
    pub fn batch_create_rum_metric_definitions(
        &self,
    ) -> crate::client::fluent_builders::BatchCreateRumMetricDefinitions {
        crate::client::fluent_builders::BatchCreateRumMetricDefinitions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchDeleteRumMetricDefinitions`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::set_app_monitor_name): <p>The name of the CloudWatch RUM app monitor that is sending these metrics.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::set_destination): <p>Defines the destination where you want to stop sending the specified metrics. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::set_destination_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. </p>  <p>This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.</p>
    ///   - [`metric_definition_ids(Vec<String>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::metric_definition_ids) / [`set_metric_definition_ids(Option<Vec<String>>)`](crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::set_metric_definition_ids): <p>An array of structures which define the metrics that you want to stop sending.</p>
    /// - On success, responds with [`BatchDeleteRumMetricDefinitionsOutput`](crate::output::BatchDeleteRumMetricDefinitionsOutput) with field(s):
    ///   - [`errors(Option<Vec<BatchDeleteRumMetricDefinitionsError>>)`](crate::output::BatchDeleteRumMetricDefinitionsOutput::errors): <p>An array of error objects, if the operation caused any errors.</p>
    ///   - [`metric_definition_ids(Option<Vec<String>>)`](crate::output::BatchDeleteRumMetricDefinitionsOutput::metric_definition_ids): <p>The IDs of the metric definitions that were deleted.</p>
    /// - On failure, responds with [`SdkError<BatchDeleteRumMetricDefinitionsError>`](crate::error::BatchDeleteRumMetricDefinitionsError)
    pub fn batch_delete_rum_metric_definitions(
        &self,
    ) -> crate::client::fluent_builders::BatchDeleteRumMetricDefinitions {
        crate::client::fluent_builders::BatchDeleteRumMetricDefinitions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchGetRumMetricDefinitions`](crate::client::fluent_builders::BatchGetRumMetricDefinitions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::set_app_monitor_name): <p>The name of the CloudWatch RUM app monitor that is sending the metrics.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::set_destination): <p>The type of destination that you want to view metrics for. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::set_destination_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p>  <p>This parameter specifies the ARN of the Evidently experiment that corresponds to the destination.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::set_max_results): <p>The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100.</p>  <p>To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::BatchGetRumMetricDefinitions::set_next_token): <p>Use the token returned by the previous operation to request the next page of results.</p>
    /// - On success, responds with [`BatchGetRumMetricDefinitionsOutput`](crate::output::BatchGetRumMetricDefinitionsOutput) with field(s):
    ///   - [`metric_definitions(Option<Vec<MetricDefinition>>)`](crate::output::BatchGetRumMetricDefinitionsOutput::metric_definitions): <p>An array of structures that display information about the metrics that are sent by the specified app monitor to the specified destination.</p>
    ///   - [`next_token(Option<String>)`](crate::output::BatchGetRumMetricDefinitionsOutput::next_token): <p>A token that you can use in a subsequent operation to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<BatchGetRumMetricDefinitionsError>`](crate::error::BatchGetRumMetricDefinitionsError)
    pub fn batch_get_rum_metric_definitions(
        &self,
    ) -> crate::client::fluent_builders::BatchGetRumMetricDefinitions {
        crate::client::fluent_builders::BatchGetRumMetricDefinitions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAppMonitor`](crate::client::fluent_builders::CreateAppMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateAppMonitor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateAppMonitor::set_name): <p>A name for the app monitor.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CreateAppMonitor::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CreateAppMonitor::set_domain): <p>The top-level internet domain name for which your application has administrative authority.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateAppMonitor::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateAppMonitor::set_tags): <p>Assigns one or more tags (key-value pairs) to the app monitor.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with an app monitor.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    ///   - [`app_monitor_configuration(AppMonitorConfiguration)`](crate::client::fluent_builders::CreateAppMonitor::app_monitor_configuration) / [`set_app_monitor_configuration(Option<AppMonitorConfiguration>)`](crate::client::fluent_builders::CreateAppMonitor::set_app_monitor_configuration): <p>A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include <code>AppMonitorConfiguration</code>, you must set up your own authorization method. For more information, see <a href="https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html">Authorize your application to send data to Amazon Web Services</a>.</p>  <p>If you omit this argument, the sample rate used for RUM is set to 10% of the user sessions.</p>
    ///   - [`cw_log_enabled(bool)`](crate::client::fluent_builders::CreateAppMonitor::cw_log_enabled) / [`set_cw_log_enabled(Option<bool>)`](crate::client::fluent_builders::CreateAppMonitor::set_cw_log_enabled): <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p>  <p>If you omit this parameter, the default is <code>false</code>.</p>
    ///   - [`custom_events(CustomEvents)`](crate::client::fluent_builders::CreateAppMonitor::custom_events) / [`set_custom_events(Option<CustomEvents>)`](crate::client::fluent_builders::CreateAppMonitor::set_custom_events): <p>Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are <code>DISABLED</code>.</p>  <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    /// - On success, responds with [`CreateAppMonitorOutput`](crate::output::CreateAppMonitorOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateAppMonitorOutput::id): <p>The unique ID of the new app monitor.</p>
    /// - On failure, responds with [`SdkError<CreateAppMonitorError>`](crate::error::CreateAppMonitorError)
    pub fn create_app_monitor(&self) -> crate::client::fluent_builders::CreateAppMonitor {
        crate::client::fluent_builders::CreateAppMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAppMonitor`](crate::client::fluent_builders::DeleteAppMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteAppMonitor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteAppMonitor::set_name): <p>The name of the app monitor to delete.</p>
    /// - On success, responds with [`DeleteAppMonitorOutput`](crate::output::DeleteAppMonitorOutput)

    /// - On failure, responds with [`SdkError<DeleteAppMonitorError>`](crate::error::DeleteAppMonitorError)
    pub fn delete_app_monitor(&self) -> crate::client::fluent_builders::DeleteAppMonitor {
        crate::client::fluent_builders::DeleteAppMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRumMetricsDestination`](crate::client::fluent_builders::DeleteRumMetricsDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::DeleteRumMetricsDestination::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::DeleteRumMetricsDestination::set_app_monitor_name): <p>The name of the app monitor that is sending metrics to the destination that you want to delete.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::DeleteRumMetricsDestination::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::DeleteRumMetricsDestination::set_destination): <p>The type of destination to delete. Valid values are <code>CloudWatch</code> and <code>Evidently</code>.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteRumMetricsDestination::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::DeleteRumMetricsDestination::set_destination_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.</p>
    /// - On success, responds with [`DeleteRumMetricsDestinationOutput`](crate::output::DeleteRumMetricsDestinationOutput)

    /// - On failure, responds with [`SdkError<DeleteRumMetricsDestinationError>`](crate::error::DeleteRumMetricsDestinationError)
    pub fn delete_rum_metrics_destination(
        &self,
    ) -> crate::client::fluent_builders::DeleteRumMetricsDestination {
        crate::client::fluent_builders::DeleteRumMetricsDestination::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppMonitor`](crate::client::fluent_builders::GetAppMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetAppMonitor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetAppMonitor::set_name): <p>The app monitor to retrieve information for.</p>
    /// - On success, responds with [`GetAppMonitorOutput`](crate::output::GetAppMonitorOutput) with field(s):
    ///   - [`app_monitor(Option<AppMonitor>)`](crate::output::GetAppMonitorOutput::app_monitor): <p>A structure containing all the configuration information for the app monitor.</p>
    /// - On failure, responds with [`SdkError<GetAppMonitorError>`](crate::error::GetAppMonitorError)
    pub fn get_app_monitor(&self) -> crate::client::fluent_builders::GetAppMonitor {
        crate::client::fluent_builders::GetAppMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppMonitorData`](crate::client::fluent_builders::GetAppMonitorData) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetAppMonitorData::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetAppMonitorData::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetAppMonitorData::set_name): <p>The name of the app monitor that collected the data that you want to retrieve.</p>
    ///   - [`time_range(TimeRange)`](crate::client::fluent_builders::GetAppMonitorData::time_range) / [`set_time_range(Option<TimeRange>)`](crate::client::fluent_builders::GetAppMonitorData::set_time_range): <p>A structure that defines the time range that you want to retrieve results from.</p>
    ///   - [`filters(Vec<QueryFilter>)`](crate::client::fluent_builders::GetAppMonitorData::filters) / [`set_filters(Option<Vec<QueryFilter>>)`](crate::client::fluent_builders::GetAppMonitorData::set_filters): <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetAppMonitorData::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetAppMonitorData::set_max_results): <p>The maximum number of results to return in one operation. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetAppMonitorData::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetAppMonitorData::set_next_token): <p>Use the token returned by the previous operation to request the next page of results.</p>
    /// - On success, responds with [`GetAppMonitorDataOutput`](crate::output::GetAppMonitorDataOutput) with field(s):
    ///   - [`events(Option<Vec<String>>)`](crate::output::GetAppMonitorDataOutput::events): <p>The events that RUM collected that match your request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetAppMonitorDataOutput::next_token): <p>A token that you can use in a subsequent operation to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<GetAppMonitorDataError>`](crate::error::GetAppMonitorDataError)
    pub fn get_app_monitor_data(&self) -> crate::client::fluent_builders::GetAppMonitorData {
        crate::client::fluent_builders::GetAppMonitorData::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAppMonitors`](crate::client::fluent_builders::ListAppMonitors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAppMonitors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAppMonitors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAppMonitors::set_max_results): <p>The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAppMonitors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAppMonitors::set_next_token): <p>Use the token returned by the previous operation to request the next page of results.</p>
    /// - On success, responds with [`ListAppMonitorsOutput`](crate::output::ListAppMonitorsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListAppMonitorsOutput::next_token): <p>A token that you can use in a subsequent operation to retrieve the next set of results.</p>
    ///   - [`app_monitor_summaries(Option<Vec<AppMonitorSummary>>)`](crate::output::ListAppMonitorsOutput::app_monitor_summaries): <p>An array of structures that contain information about the returned app monitors.</p>
    /// - On failure, responds with [`SdkError<ListAppMonitorsError>`](crate::error::ListAppMonitorsError)
    pub fn list_app_monitors(&self) -> crate::client::fluent_builders::ListAppMonitors {
        crate::client::fluent_builders::ListAppMonitors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRumMetricsDestinations`](crate::client::fluent_builders::ListRumMetricsDestinations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRumMetricsDestinations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::ListRumMetricsDestinations::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::ListRumMetricsDestinations::set_app_monitor_name): <p>The name of the app monitor associated with the destinations that you want to retrieve.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRumMetricsDestinations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRumMetricsDestinations::set_max_results): <p>The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100.</p>  <p>To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRumMetricsDestinations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRumMetricsDestinations::set_next_token): <p>Use the token returned by the previous operation to request the next page of results.</p>
    /// - On success, responds with [`ListRumMetricsDestinationsOutput`](crate::output::ListRumMetricsDestinationsOutput) with field(s):
    ///   - [`destinations(Option<Vec<MetricDestinationSummary>>)`](crate::output::ListRumMetricsDestinationsOutput::destinations): <p>The list of CloudWatch RUM extended metrics destinations associated with the app monitor that you specified.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRumMetricsDestinationsOutput::next_token): <p>A token that you can use in a subsequent operation to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListRumMetricsDestinationsError>`](crate::error::ListRumMetricsDestinationsError)
    pub fn list_rum_metrics_destinations(
        &self,
    ) -> crate::client::fluent_builders::ListRumMetricsDestinations {
        crate::client::fluent_builders::ListRumMetricsDestinations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource that you want to see the tags of.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::output::ListTagsForResourceOutput::resource_arn): <p>The ARN of the resource that you are viewing.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The list of tag keys and values associated with the resource you specified.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRumEvents`](crate::client::fluent_builders::PutRumEvents) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::PutRumEvents::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::PutRumEvents::set_id): <p>The ID of the app monitor that is sending this data.</p>
    ///   - [`batch_id(impl Into<String>)`](crate::client::fluent_builders::PutRumEvents::batch_id) / [`set_batch_id(Option<String>)`](crate::client::fluent_builders::PutRumEvents::set_batch_id): <p>A unique identifier for this batch of RUM event data.</p>
    ///   - [`app_monitor_details(AppMonitorDetails)`](crate::client::fluent_builders::PutRumEvents::app_monitor_details) / [`set_app_monitor_details(Option<AppMonitorDetails>)`](crate::client::fluent_builders::PutRumEvents::set_app_monitor_details): <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
    ///   - [`user_details(UserDetails)`](crate::client::fluent_builders::PutRumEvents::user_details) / [`set_user_details(Option<UserDetails>)`](crate::client::fluent_builders::PutRumEvents::set_user_details): <p>A structure that contains information about the user session that this batch of events was collected from.</p>
    ///   - [`rum_events(Vec<RumEvent>)`](crate::client::fluent_builders::PutRumEvents::rum_events) / [`set_rum_events(Option<Vec<RumEvent>>)`](crate::client::fluent_builders::PutRumEvents::set_rum_events): <p>An array of structures that contain the telemetry event data.</p>
    /// - On success, responds with [`PutRumEventsOutput`](crate::output::PutRumEventsOutput)

    /// - On failure, responds with [`SdkError<PutRumEventsError>`](crate::error::PutRumEventsError)
    pub fn put_rum_events(&self) -> crate::client::fluent_builders::PutRumEvents {
        crate::client::fluent_builders::PutRumEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRumMetricsDestination`](crate::client::fluent_builders::PutRumMetricsDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::set_app_monitor_name): <p>The name of the CloudWatch RUM app monitor that will send the metrics.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::PutRumMetricsDestination::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::PutRumMetricsDestination::set_destination): <p>Defines the destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::set_destination_arn): <p>Use this parameter only if <code>Destination</code> is <code>Evidently</code>. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.</p>
    ///   - [`iam_role_arn(impl Into<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::iam_role_arn) / [`set_iam_role_arn(Option<String>)`](crate::client::fluent_builders::PutRumMetricsDestination::set_iam_role_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p>  <p>This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.</p>
    /// - On success, responds with [`PutRumMetricsDestinationOutput`](crate::output::PutRumMetricsDestinationOutput)

    /// - On failure, responds with [`SdkError<PutRumMetricsDestinationError>`](crate::error::PutRumMetricsDestinationError)
    pub fn put_rum_metrics_destination(
        &self,
    ) -> crate::client::fluent_builders::PutRumMetricsDestination {
        crate::client::fluent_builders::PutRumMetricsDestination::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the CloudWatch RUM resource that you're adding tags to.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The list of key-value pairs to associate with the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the CloudWatch RUM resource that you're removing tags from.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of tag keys to remove from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAppMonitor`](crate::client::fluent_builders::UpdateAppMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateAppMonitor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateAppMonitor::set_name): <p>The name of the app monitor to update.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::UpdateAppMonitor::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::UpdateAppMonitor::set_domain): <p>The top-level internet domain name for which your application has administrative authority.</p>
    ///   - [`app_monitor_configuration(AppMonitorConfiguration)`](crate::client::fluent_builders::UpdateAppMonitor::app_monitor_configuration) / [`set_app_monitor_configuration(Option<AppMonitorConfiguration>)`](crate::client::fluent_builders::UpdateAppMonitor::set_app_monitor_configuration): <p>A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include <code>AppMonitorConfiguration</code>, you must set up your own authorization method. For more information, see <a href="https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html">Authorize your application to send data to Amazon Web Services</a>.</p>
    ///   - [`cw_log_enabled(bool)`](crate::client::fluent_builders::UpdateAppMonitor::cw_log_enabled) / [`set_cw_log_enabled(Option<bool>)`](crate::client::fluent_builders::UpdateAppMonitor::set_cw_log_enabled): <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p>
    ///   - [`custom_events(CustomEvents)`](crate::client::fluent_builders::UpdateAppMonitor::custom_events) / [`set_custom_events(Option<CustomEvents>)`](crate::client::fluent_builders::UpdateAppMonitor::set_custom_events): <p>Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be <code>DISABLED</code>.</p>  <p>For more information about custom events, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html">Send custom events</a>.</p>
    /// - On success, responds with [`UpdateAppMonitorOutput`](crate::output::UpdateAppMonitorOutput)

    /// - On failure, responds with [`SdkError<UpdateAppMonitorError>`](crate::error::UpdateAppMonitorError)
    pub fn update_app_monitor(&self) -> crate::client::fluent_builders::UpdateAppMonitor {
        crate::client::fluent_builders::UpdateAppMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRumMetricDefinition`](crate::client::fluent_builders::UpdateRumMetricDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_monitor_name(impl Into<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::app_monitor_name) / [`set_app_monitor_name(Option<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::set_app_monitor_name): <p>The name of the CloudWatch RUM app monitor that sends these metrics.</p>
    ///   - [`destination(MetricDestination)`](crate::client::fluent_builders::UpdateRumMetricDefinition::destination) / [`set_destination(Option<MetricDestination>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::set_destination): <p>The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.</p>
    ///   - [`destination_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::destination_arn) / [`set_destination_arn(Option<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::set_destination_arn): <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p>  <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html">PutRumMetricsDestination</a>.</p>
    ///   - [`metric_definition(MetricDefinitionRequest)`](crate::client::fluent_builders::UpdateRumMetricDefinition::metric_definition) / [`set_metric_definition(Option<MetricDefinitionRequest>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::set_metric_definition): <p>A structure that contains the new definition that you want to use for this metric.</p>
    ///   - [`metric_definition_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::metric_definition_id) / [`set_metric_definition_id(Option<String>)`](crate::client::fluent_builders::UpdateRumMetricDefinition::set_metric_definition_id): <p>The ID of the metric definition to update.</p>
    /// - On success, responds with [`UpdateRumMetricDefinitionOutput`](crate::output::UpdateRumMetricDefinitionOutput)

    /// - On failure, responds with [`SdkError<UpdateRumMetricDefinitionError>`](crate::error::UpdateRumMetricDefinitionError)
    pub fn update_rum_metric_definition(
        &self,
    ) -> crate::client::fluent_builders::UpdateRumMetricDefinition {
        crate::client::fluent_builders::UpdateRumMetricDefinition::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
