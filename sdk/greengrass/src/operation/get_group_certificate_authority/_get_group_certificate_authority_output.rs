// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGroupCertificateAuthorityOutput {
    /// The ARN of the certificate authority for the group.
    #[doc(hidden)]
    pub group_certificate_authority_arn: std::option::Option<std::string::String>,
    /// The ID of the certificate authority for the group.
    #[doc(hidden)]
    pub group_certificate_authority_id: std::option::Option<std::string::String>,
    /// The PEM encoded certificate for the group.
    #[doc(hidden)]
    pub pem_encoded_certificate: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetGroupCertificateAuthorityOutput {
    /// The ARN of the certificate authority for the group.
    pub fn group_certificate_authority_arn(&self) -> std::option::Option<&str> {
        self.group_certificate_authority_arn.as_deref()
    }
    /// The ID of the certificate authority for the group.
    pub fn group_certificate_authority_id(&self) -> std::option::Option<&str> {
        self.group_certificate_authority_id.as_deref()
    }
    /// The PEM encoded certificate for the group.
    pub fn pem_encoded_certificate(&self) -> std::option::Option<&str> {
        self.pem_encoded_certificate.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetGroupCertificateAuthorityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGroupCertificateAuthorityOutput {
    /// Creates a new builder-style object to manufacture [`GetGroupCertificateAuthorityOutput`](crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityOutput).
    pub fn builder() -> crate::operation::get_group_certificate_authority::builders::GetGroupCertificateAuthorityOutputBuilder{
        crate::operation::get_group_certificate_authority::builders::GetGroupCertificateAuthorityOutputBuilder::default()
    }
}

/// A builder for [`GetGroupCertificateAuthorityOutput`](crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetGroupCertificateAuthorityOutputBuilder {
    pub(crate) group_certificate_authority_arn: std::option::Option<std::string::String>,
    pub(crate) group_certificate_authority_id: std::option::Option<std::string::String>,
    pub(crate) pem_encoded_certificate: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetGroupCertificateAuthorityOutputBuilder {
    /// The ARN of the certificate authority for the group.
    pub fn group_certificate_authority_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.group_certificate_authority_arn = Some(input.into());
        self
    }
    /// The ARN of the certificate authority for the group.
    pub fn set_group_certificate_authority_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.group_certificate_authority_arn = input;
        self
    }
    /// The ID of the certificate authority for the group.
    pub fn group_certificate_authority_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_certificate_authority_id = Some(input.into());
        self
    }
    /// The ID of the certificate authority for the group.
    pub fn set_group_certificate_authority_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.group_certificate_authority_id = input;
        self
    }
    /// The PEM encoded certificate for the group.
    pub fn pem_encoded_certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.pem_encoded_certificate = Some(input.into());
        self
    }
    /// The PEM encoded certificate for the group.
    pub fn set_pem_encoded_certificate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pem_encoded_certificate = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGroupCertificateAuthorityOutput`](crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityOutput {
        crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityOutput {
            group_certificate_authority_arn: self.group_certificate_authority_arn,
            group_certificate_authority_id: self.group_certificate_authority_id,
            pem_encoded_certificate: self.pem_encoded_certificate,
            _request_id: self._request_id,
        }
    }
}
