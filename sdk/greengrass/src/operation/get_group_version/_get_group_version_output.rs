// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGroupVersionOutput {
    /// The ARN of the group version.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// The time, in milliseconds since the epoch, when the group version was created.
    #[doc(hidden)]
    pub creation_timestamp: std::option::Option<std::string::String>,
    /// Information about the group version definition.
    #[doc(hidden)]
    pub definition: std::option::Option<crate::types::GroupVersion>,
    /// The ID of the group that the version is associated with.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The ID of the group version.
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetGroupVersionOutput {
    /// The ARN of the group version.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The time, in milliseconds since the epoch, when the group version was created.
    pub fn creation_timestamp(&self) -> std::option::Option<&str> {
        self.creation_timestamp.as_deref()
    }
    /// Information about the group version definition.
    pub fn definition(&self) -> std::option::Option<&crate::types::GroupVersion> {
        self.definition.as_ref()
    }
    /// The ID of the group that the version is associated with.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The ID of the group version.
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetGroupVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGroupVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetGroupVersionOutput`](crate::operation::get_group_version::GetGroupVersionOutput).
    pub fn builder() -> crate::operation::get_group_version::builders::GetGroupVersionOutputBuilder
    {
        crate::operation::get_group_version::builders::GetGroupVersionOutputBuilder::default()
    }
}

/// A builder for [`GetGroupVersionOutput`](crate::operation::get_group_version::GetGroupVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetGroupVersionOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) creation_timestamp: std::option::Option<std::string::String>,
    pub(crate) definition: std::option::Option<crate::types::GroupVersion>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetGroupVersionOutputBuilder {
    /// The ARN of the group version.
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// The ARN of the group version.
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The time, in milliseconds since the epoch, when the group version was created.
    pub fn creation_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_timestamp = Some(input.into());
        self
    }
    /// The time, in milliseconds since the epoch, when the group version was created.
    pub fn set_creation_timestamp(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// Information about the group version definition.
    pub fn definition(mut self, input: crate::types::GroupVersion) -> Self {
        self.definition = Some(input);
        self
    }
    /// Information about the group version definition.
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::GroupVersion>,
    ) -> Self {
        self.definition = input;
        self
    }
    /// The ID of the group that the version is associated with.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The ID of the group that the version is associated with.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of the group version.
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// The ID of the group version.
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGroupVersionOutput`](crate::operation::get_group_version::GetGroupVersionOutput).
    pub fn build(self) -> crate::operation::get_group_version::GetGroupVersionOutput {
        crate::operation::get_group_version::GetGroupVersionOutput {
            arn: self.arn,
            creation_timestamp: self.creation_timestamp,
            definition: self.definition,
            id: self.id,
            version: self.version,
            _request_id: self._request_id,
        }
    }
}
