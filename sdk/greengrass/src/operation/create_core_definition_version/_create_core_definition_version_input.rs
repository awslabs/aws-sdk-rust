// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCoreDefinitionVersionInput {
    /// A client token used to correlate requests and responses.
    pub amzn_client_token: ::std::option::Option<::std::string::String>,
    /// The ID of the core definition.
    pub core_definition_id: ::std::option::Option<::std::string::String>,
    /// A list of cores in the core definition version.
    pub cores: ::std::option::Option<::std::vec::Vec<crate::types::Core>>,
}
impl CreateCoreDefinitionVersionInput {
    /// A client token used to correlate requests and responses.
    pub fn amzn_client_token(&self) -> ::std::option::Option<&str> {
        self.amzn_client_token.as_deref()
    }
    /// The ID of the core definition.
    pub fn core_definition_id(&self) -> ::std::option::Option<&str> {
        self.core_definition_id.as_deref()
    }
    /// A list of cores in the core definition version.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cores.is_none()`.
    pub fn cores(&self) -> &[crate::types::Core] {
        self.cores.as_deref().unwrap_or_default()
    }
}
impl CreateCoreDefinitionVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateCoreDefinitionVersionInput`](crate::operation::create_core_definition_version::CreateCoreDefinitionVersionInput).
    pub fn builder() -> crate::operation::create_core_definition_version::builders::CreateCoreDefinitionVersionInputBuilder {
        crate::operation::create_core_definition_version::builders::CreateCoreDefinitionVersionInputBuilder::default()
    }
}

/// A builder for [`CreateCoreDefinitionVersionInput`](crate::operation::create_core_definition_version::CreateCoreDefinitionVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateCoreDefinitionVersionInputBuilder {
    pub(crate) amzn_client_token: ::std::option::Option<::std::string::String>,
    pub(crate) core_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) cores: ::std::option::Option<::std::vec::Vec<crate::types::Core>>,
}
impl CreateCoreDefinitionVersionInputBuilder {
    /// A client token used to correlate requests and responses.
    pub fn amzn_client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.amzn_client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// A client token used to correlate requests and responses.
    pub fn set_amzn_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.amzn_client_token = input;
        self
    }
    /// A client token used to correlate requests and responses.
    pub fn get_amzn_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.amzn_client_token
    }
    /// The ID of the core definition.
    /// This field is required.
    pub fn core_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the core definition.
    pub fn set_core_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_definition_id = input;
        self
    }
    /// The ID of the core definition.
    pub fn get_core_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_definition_id
    }
    /// Appends an item to `cores`.
    ///
    /// To override the contents of this collection use [`set_cores`](Self::set_cores).
    ///
    /// A list of cores in the core definition version.
    pub fn cores(mut self, input: crate::types::Core) -> Self {
        let mut v = self.cores.unwrap_or_default();
        v.push(input);
        self.cores = ::std::option::Option::Some(v);
        self
    }
    /// A list of cores in the core definition version.
    pub fn set_cores(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Core>>) -> Self {
        self.cores = input;
        self
    }
    /// A list of cores in the core definition version.
    pub fn get_cores(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Core>> {
        &self.cores
    }
    /// Consumes the builder and constructs a [`CreateCoreDefinitionVersionInput`](crate::operation::create_core_definition_version::CreateCoreDefinitionVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_core_definition_version::CreateCoreDefinitionVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_core_definition_version::CreateCoreDefinitionVersionInput {
            amzn_client_token: self.amzn_client_token,
            core_definition_id: self.core_definition_id,
            cores: self.cores,
        })
    }
}
