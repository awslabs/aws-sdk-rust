// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_connectivity_info::_update_connectivity_info_output::UpdateConnectivityInfoOutputBuilder;

pub use crate::operation::update_connectivity_info::_update_connectivity_info_input::UpdateConnectivityInfoInputBuilder;

/// Fluent builder constructing a request to `UpdateConnectivityInfo`.
///
/// Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectivityInfoFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_connectivity_info::builders::UpdateConnectivityInfoInputBuilder,
}
impl UpdateConnectivityInfoFluentBuilder {
    /// Creates a new `UpdateConnectivityInfo`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_connectivity_info::UpdateConnectivityInfo,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_connectivity_info::UpdateConnectivityInfoOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ConnectivityInfo`.
    ///
    /// To override the contents of this collection use [`set_connectivity_info`](Self::set_connectivity_info).
    ///
    /// A list of connectivity info.
    pub fn connectivity_info(mut self, input: crate::types::ConnectivityInfo) -> Self {
        self.inner = self.inner.connectivity_info(input);
        self
    }
    /// A list of connectivity info.
    pub fn set_connectivity_info(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConnectivityInfo>>,
    ) -> Self {
        self.inner = self.inner.set_connectivity_info(input);
        self
    }
    /// The thing name.
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.thing_name(input.into());
        self
    }
    /// The thing name.
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_thing_name(input);
        self
    }
}
