// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn telemetry_configuration_correct_errors(
    mut builder: crate::types::builders::TelemetryConfigurationBuilder,
) -> crate::types::builders::TelemetryConfigurationBuilder {
    if builder.telemetry.is_none() {
        builder.telemetry = "no value was set".parse::<crate::types::Telemetry>().ok()
    }
    builder
}

pub(crate) fn connector_correct_errors(mut builder: crate::types::builders::ConnectorBuilder) -> crate::types::builders::ConnectorBuilder {
    if builder.connector_arn.is_none() {
        builder.connector_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn core_correct_errors(mut builder: crate::types::builders::CoreBuilder) -> crate::types::builders::CoreBuilder {
    if builder.certificate_arn.is_none() {
        builder.certificate_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.thing_arn.is_none() {
        builder.thing_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn device_correct_errors(mut builder: crate::types::builders::DeviceBuilder) -> crate::types::builders::DeviceBuilder {
    if builder.certificate_arn.is_none() {
        builder.certificate_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.thing_arn.is_none() {
        builder.thing_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn function_correct_errors(mut builder: crate::types::builders::FunctionBuilder) -> crate::types::builders::FunctionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn logger_correct_errors(mut builder: crate::types::builders::LoggerBuilder) -> crate::types::builders::LoggerBuilder {
    if builder.component.is_none() {
        builder.component = "no value was set".parse::<crate::types::LoggerComponent>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.level.is_none() {
        builder.level = "no value was set".parse::<crate::types::LoggerLevel>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::LoggerType>().ok()
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resource_data_container.is_none() {
        builder.resource_data_container = {
            let builder = crate::types::builders::ResourceDataContainerBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn subscription_correct_errors(mut builder: crate::types::builders::SubscriptionBuilder) -> crate::types::builders::SubscriptionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.subject.is_none() {
        builder.subject = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_download_owner_setting_correct_errors(
    mut builder: crate::types::builders::ResourceDownloadOwnerSettingBuilder,
) -> crate::types::builders::ResourceDownloadOwnerSettingBuilder {
    if builder.group_owner.is_none() {
        builder.group_owner = Some(Default::default())
    }
    if builder.group_permission.is_none() {
        builder.group_permission = "no value was set".parse::<crate::types::Permission>().ok()
    }
    builder
}

pub(crate) fn resource_access_policy_correct_errors(
    mut builder: crate::types::builders::ResourceAccessPolicyBuilder,
) -> crate::types::builders::ResourceAccessPolicyBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}
