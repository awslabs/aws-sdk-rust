// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// General error information.
    BadRequestException(crate::types::error::BadRequestException),
    /// General error information.
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_role_to_group::AssociateRoleToGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_role_to_group::AssociateRoleToGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_role_to_group::AssociateRoleToGroupError> for Error {
    fn from(err: crate::operation::associate_role_to_group::AssociateRoleToGroupError) -> Self {
        match err {
            crate::operation::associate_role_to_group::AssociateRoleToGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::associate_role_to_group::AssociateRoleToGroupError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::associate_role_to_group::AssociateRoleToGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError>
    for Error
{
    fn from(
        err: crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError,
    ) -> Self {
        match err {
            crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::associate_service_role_to_account::AssociateServiceRoleToAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_connector_definition::CreateConnectorDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_connector_definition::CreateConnectorDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connector_definition::CreateConnectorDefinitionError> for Error {
    fn from(
        err: crate::operation::create_connector_definition::CreateConnectorDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_connector_definition::CreateConnectorDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_connector_definition::CreateConnectorDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError> for Error {
    fn from(err: crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError) -> Self {
        match err {
            crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_connector_definition_version::CreateConnectorDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_core_definition::CreateCoreDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_core_definition::CreateCoreDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_core_definition::CreateCoreDefinitionError> for Error {
    fn from(err: crate::operation::create_core_definition::CreateCoreDefinitionError) -> Self {
        match err {
            crate::operation::create_core_definition::CreateCoreDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_core_definition::CreateCoreDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_core_definition_version::CreateCoreDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_deployment::CreateDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_deployment::CreateDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_deployment::CreateDeploymentError> for Error {
    fn from(err: crate::operation::create_deployment::CreateDeploymentError) -> Self {
        match err {
            crate::operation::create_deployment::CreateDeploymentError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::create_deployment::CreateDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_device_definition::CreateDeviceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_device_definition::CreateDeviceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device_definition::CreateDeviceDefinitionError> for Error {
    fn from(err: crate::operation::create_device_definition::CreateDeviceDefinitionError) -> Self {
        match err {
            crate::operation::create_device_definition::CreateDeviceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_device_definition::CreateDeviceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_device_definition_version::CreateDeviceDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_function_definition::CreateFunctionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_function_definition::CreateFunctionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_function_definition::CreateFunctionDefinitionError> for Error {
    fn from(
        err: crate::operation::create_function_definition::CreateFunctionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_function_definition::CreateFunctionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_function_definition::CreateFunctionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_function_definition_version::CreateFunctionDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_group::CreateGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_group::CreateGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_group::CreateGroupError> for Error {
    fn from(err: crate::operation::create_group::CreateGroupError) -> Self {
        match err {
            crate::operation::create_group::CreateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_group::CreateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError>
    for Error
{
    fn from(
        err: crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError,
    ) -> Self {
        match err {
            crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_group_certificate_authority::CreateGroupCertificateAuthorityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_group_version::CreateGroupVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_group_version::CreateGroupVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_group_version::CreateGroupVersionError> for Error {
    fn from(err: crate::operation::create_group_version::CreateGroupVersionError) -> Self {
        match err {
            crate::operation::create_group_version::CreateGroupVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_group_version::CreateGroupVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_logger_definition::CreateLoggerDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_logger_definition::CreateLoggerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_logger_definition::CreateLoggerDefinitionError> for Error {
    fn from(err: crate::operation::create_logger_definition::CreateLoggerDefinitionError) -> Self {
        match err {
            crate::operation::create_logger_definition::CreateLoggerDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_logger_definition::CreateLoggerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_logger_definition_version::CreateLoggerDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_resource_definition::CreateResourceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_resource_definition::CreateResourceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resource_definition::CreateResourceDefinitionError> for Error {
    fn from(
        err: crate::operation::create_resource_definition::CreateResourceDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_resource_definition::CreateResourceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_resource_definition::CreateResourceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_resource_definition_version::CreateResourceDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_software_update_job::CreateSoftwareUpdateJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_software_update_job::CreateSoftwareUpdateJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_software_update_job::CreateSoftwareUpdateJobError> for Error {
    fn from(
        err: crate::operation::create_software_update_job::CreateSoftwareUpdateJobError,
    ) -> Self {
        match err {
            crate::operation::create_software_update_job::CreateSoftwareUpdateJobError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_software_update_job::CreateSoftwareUpdateJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_software_update_job::CreateSoftwareUpdateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_subscription_definition::CreateSubscriptionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError> for Error {
    fn from(err: crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError) -> Self {
        match err {
            crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_subscription_definition_version::CreateSubscriptionDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_connector_definition::DeleteConnectorDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_connector_definition::DeleteConnectorDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connector_definition::DeleteConnectorDefinitionError> for Error {
    fn from(
        err: crate::operation::delete_connector_definition::DeleteConnectorDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_connector_definition::DeleteConnectorDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_connector_definition::DeleteConnectorDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_core_definition::DeleteCoreDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_core_definition::DeleteCoreDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_core_definition::DeleteCoreDefinitionError> for Error {
    fn from(err: crate::operation::delete_core_definition::DeleteCoreDefinitionError) -> Self {
        match err {
            crate::operation::delete_core_definition::DeleteCoreDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_core_definition::DeleteCoreDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_device_definition::DeleteDeviceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_device_definition::DeleteDeviceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device_definition::DeleteDeviceDefinitionError> for Error {
    fn from(err: crate::operation::delete_device_definition::DeleteDeviceDefinitionError) -> Self {
        match err {
            crate::operation::delete_device_definition::DeleteDeviceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_device_definition::DeleteDeviceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_function_definition::DeleteFunctionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_function_definition::DeleteFunctionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_function_definition::DeleteFunctionDefinitionError> for Error {
    fn from(
        err: crate::operation::delete_function_definition::DeleteFunctionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_function_definition::DeleteFunctionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_function_definition::DeleteFunctionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_group::DeleteGroupError> for Error {
    fn from(err: crate::operation::delete_group::DeleteGroupError) -> Self {
        match err {
            crate::operation::delete_group::DeleteGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_group::DeleteGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_logger_definition::DeleteLoggerDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_logger_definition::DeleteLoggerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_logger_definition::DeleteLoggerDefinitionError> for Error {
    fn from(err: crate::operation::delete_logger_definition::DeleteLoggerDefinitionError) -> Self {
        match err {
            crate::operation::delete_logger_definition::DeleteLoggerDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_logger_definition::DeleteLoggerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_definition::DeleteResourceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_definition::DeleteResourceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_definition::DeleteResourceDefinitionError> for Error {
    fn from(
        err: crate::operation::delete_resource_definition::DeleteResourceDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_resource_definition::DeleteResourceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_resource_definition::DeleteResourceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_subscription_definition::DeleteSubscriptionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError,
    ) -> Self {
        match err {
            crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::disassociate_role_from_group::DisassociateRoleFromGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError> for Error {
    fn from(err: crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError) -> Self {
        match err {
            crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::disassociate_service_role_from_account::DisassociateServiceRoleFromAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_associated_role::GetAssociatedRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_associated_role::GetAssociatedRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_associated_role::GetAssociatedRoleError> for Error {
    fn from(err: crate::operation::get_associated_role::GetAssociatedRoleError) -> Self {
        match err {
            crate::operation::get_associated_role::GetAssociatedRoleError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_associated_role::GetAssociatedRoleError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_associated_role::GetAssociatedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError> for Error {
    fn from(
        err: crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError,
    ) -> Self {
        match err {
            crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_bulk_deployment_status::GetBulkDeploymentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connectivity_info::GetConnectivityInfoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connectivity_info::GetConnectivityInfoError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connectivity_info::GetConnectivityInfoError> for Error {
    fn from(err: crate::operation::get_connectivity_info::GetConnectivityInfoError) -> Self {
        match err {
            crate::operation::get_connectivity_info::GetConnectivityInfoError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_connectivity_info::GetConnectivityInfoError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_connectivity_info::GetConnectivityInfoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connector_definition::GetConnectorDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connector_definition::GetConnectorDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connector_definition::GetConnectorDefinitionError> for Error {
    fn from(err: crate::operation::get_connector_definition::GetConnectorDefinitionError) -> Self {
        match err {
            crate::operation::get_connector_definition::GetConnectorDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_connector_definition::GetConnectorDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_connector_definition_version::GetConnectorDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_definition::GetCoreDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_definition::GetCoreDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_definition::GetCoreDefinitionError> for Error {
    fn from(err: crate::operation::get_core_definition::GetCoreDefinitionError) -> Self {
        match err {
            crate::operation::get_core_definition::GetCoreDefinitionError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::get_core_definition::GetCoreDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_core_definition_version::GetCoreDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_core_definition_version::GetCoreDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_core_definition_version::GetCoreDefinitionVersionError> for Error {
    fn from(
        err: crate::operation::get_core_definition_version::GetCoreDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_core_definition_version::GetCoreDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_core_definition_version::GetCoreDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_deployment_status::GetDeploymentStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_deployment_status::GetDeploymentStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_deployment_status::GetDeploymentStatusError> for Error {
    fn from(err: crate::operation::get_deployment_status::GetDeploymentStatusError) -> Self {
        match err {
            crate::operation::get_deployment_status::GetDeploymentStatusError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_deployment_status::GetDeploymentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_definition::GetDeviceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_device_definition::GetDeviceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_definition::GetDeviceDefinitionError> for Error {
    fn from(err: crate::operation::get_device_definition::GetDeviceDefinitionError) -> Self {
        match err {
            crate::operation::get_device_definition::GetDeviceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_device_definition::GetDeviceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_device_definition_version::GetDeviceDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_function_definition::GetFunctionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_function_definition::GetFunctionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_function_definition::GetFunctionDefinitionError> for Error {
    fn from(err: crate::operation::get_function_definition::GetFunctionDefinitionError) -> Self {
        match err {
            crate::operation::get_function_definition::GetFunctionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_function_definition::GetFunctionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_function_definition_version::GetFunctionDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_group::GetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_group::GetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group::GetGroupError> for Error {
    fn from(err: crate::operation::get_group::GetGroupError) -> Self {
        match err {
            crate::operation::get_group::GetGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_group::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError>
    for Error
{
    fn from(
        err: crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError,
    ) -> Self {
        match err {
            crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_group_certificate_authority::GetGroupCertificateAuthorityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError> for Error {
    fn from(err: crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError) -> Self {
        match err {
            crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_group_certificate_configuration::GetGroupCertificateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_group_version::GetGroupVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_group_version::GetGroupVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group_version::GetGroupVersionError> for Error {
    fn from(err: crate::operation::get_group_version::GetGroupVersionError) -> Self {
        match err {
            crate::operation::get_group_version::GetGroupVersionError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::get_group_version::GetGroupVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_logger_definition::GetLoggerDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_logger_definition::GetLoggerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_logger_definition::GetLoggerDefinitionError> for Error {
    fn from(err: crate::operation::get_logger_definition::GetLoggerDefinitionError) -> Self {
        match err {
            crate::operation::get_logger_definition::GetLoggerDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_logger_definition::GetLoggerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_logger_definition_version::GetLoggerDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_definition::GetResourceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_resource_definition::GetResourceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_definition::GetResourceDefinitionError> for Error {
    fn from(err: crate::operation::get_resource_definition::GetResourceDefinitionError) -> Self {
        match err {
            crate::operation::get_resource_definition::GetResourceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_resource_definition::GetResourceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError,
    ) -> Self {
        match err {
            crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_resource_definition_version::GetResourceDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_service_role_for_account::GetServiceRoleForAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_service_role_for_account::GetServiceRoleForAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_role_for_account::GetServiceRoleForAccountError> for Error {
    fn from(
        err: crate::operation::get_service_role_for_account::GetServiceRoleForAccountError,
    ) -> Self {
        match err {
            crate::operation::get_service_role_for_account::GetServiceRoleForAccountError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_service_role_for_account::GetServiceRoleForAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_subscription_definition::GetSubscriptionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_subscription_definition::GetSubscriptionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_subscription_definition::GetSubscriptionDefinitionError> for Error {
    fn from(
        err: crate::operation::get_subscription_definition::GetSubscriptionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::get_subscription_definition::GetSubscriptionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_subscription_definition::GetSubscriptionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError> for Error {
    fn from(err: crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError) -> Self {
        match err {
            crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_subscription_definition_version::GetSubscriptionDefinitionVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError,
    ) -> Self {
        match err {
            crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_thing_runtime_configuration::GetThingRuntimeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError> for Error {
    fn from(err: crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError) -> Self {
        match err {
            crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_bulk_deployment_detailed_reports::ListBulkDeploymentDetailedReportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_bulk_deployments::ListBulkDeploymentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_bulk_deployments::ListBulkDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_bulk_deployments::ListBulkDeploymentsError> for Error {
    fn from(err: crate::operation::list_bulk_deployments::ListBulkDeploymentsError) -> Self {
        match err {
            crate::operation::list_bulk_deployments::ListBulkDeploymentsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_bulk_deployments::ListBulkDeploymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_connector_definitions::ListConnectorDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_connector_definitions::ListConnectorDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connector_definitions::ListConnectorDefinitionsError> for Error {
    fn from(
        err: crate::operation::list_connector_definitions::ListConnectorDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_connector_definitions::ListConnectorDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_connector_definition_versions::ListConnectorDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_core_definitions::ListCoreDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_core_definitions::ListCoreDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_core_definitions::ListCoreDefinitionsError> for Error {
    fn from(err: crate::operation::list_core_definitions::ListCoreDefinitionsError) -> Self {
        match err {
            crate::operation::list_core_definitions::ListCoreDefinitionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_core_definition_versions::ListCoreDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_deployments::ListDeploymentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_deployments::ListDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_deployments::ListDeploymentsError> for Error {
    fn from(err: crate::operation::list_deployments::ListDeploymentsError) -> Self {
        match err {
            crate::operation::list_deployments::ListDeploymentsError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::list_deployments::ListDeploymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_device_definitions::ListDeviceDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_device_definitions::ListDeviceDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_definitions::ListDeviceDefinitionsError> for Error {
    fn from(err: crate::operation::list_device_definitions::ListDeviceDefinitionsError) -> Self {
        match err {
            crate::operation::list_device_definitions::ListDeviceDefinitionsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_device_definition_versions::ListDeviceDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_function_definitions::ListFunctionDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_function_definitions::ListFunctionDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_function_definitions::ListFunctionDefinitionsError> for Error {
    fn from(
        err: crate::operation::list_function_definitions::ListFunctionDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_function_definitions::ListFunctionDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_function_definition_versions::ListFunctionDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError>
    for Error
{
    fn from(
        err: crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError,
    ) -> Self {
        match err {
            crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_group_certificate_authorities::ListGroupCertificateAuthoritiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_groups::ListGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_groups::ListGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_groups::ListGroupsError> for Error {
    fn from(err: crate::operation::list_groups::ListGroupsError) -> Self {
        match err {
            crate::operation::list_groups::ListGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_group_versions::ListGroupVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_group_versions::ListGroupVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_group_versions::ListGroupVersionsError> for Error {
    fn from(err: crate::operation::list_group_versions::ListGroupVersionsError) -> Self {
        match err {
            crate::operation::list_group_versions::ListGroupVersionsError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::list_group_versions::ListGroupVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_logger_definitions::ListLoggerDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_logger_definitions::ListLoggerDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_logger_definitions::ListLoggerDefinitionsError> for Error {
    fn from(err: crate::operation::list_logger_definitions::ListLoggerDefinitionsError) -> Self {
        match err {
            crate::operation::list_logger_definitions::ListLoggerDefinitionsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_logger_definition_versions::ListLoggerDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_resource_definitions::ListResourceDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_resource_definitions::ListResourceDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resource_definitions::ListResourceDefinitionsError> for Error {
    fn from(
        err: crate::operation::list_resource_definitions::ListResourceDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_resource_definitions::ListResourceDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_resource_definition_versions::ListResourceDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_subscription_definitions::ListSubscriptionDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_subscription_definitions::ListSubscriptionDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscription_definitions::ListSubscriptionDefinitionsError>
    for Error
{
    fn from(
        err: crate::operation::list_subscription_definitions::ListSubscriptionDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_subscription_definitions::ListSubscriptionDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError> for Error {
    fn from(err: crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError) -> Self {
        match err {
            crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_subscription_definition_versions::ListSubscriptionDefinitionVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reset_deployments::ResetDeploymentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reset_deployments::ResetDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reset_deployments::ResetDeploymentsError> for Error {
    fn from(err: crate::operation::reset_deployments::ResetDeploymentsError) -> Self {
        match err {
            crate::operation::reset_deployments::ResetDeploymentsError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::reset_deployments::ResetDeploymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_bulk_deployment::StartBulkDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_bulk_deployment::StartBulkDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_bulk_deployment::StartBulkDeploymentError> for Error {
    fn from(err: crate::operation::start_bulk_deployment::StartBulkDeploymentError) -> Self {
        match err {
            crate::operation::start_bulk_deployment::StartBulkDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_bulk_deployment::StartBulkDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_bulk_deployment::StopBulkDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_bulk_deployment::StopBulkDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_bulk_deployment::StopBulkDeploymentError> for Error {
    fn from(err: crate::operation::stop_bulk_deployment::StopBulkDeploymentError) -> Self {
        match err {
            crate::operation::stop_bulk_deployment::StopBulkDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_bulk_deployment::StopBulkDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connectivity_info::UpdateConnectivityInfoError> for Error {
    fn from(err: crate::operation::update_connectivity_info::UpdateConnectivityInfoError) -> Self {
        match err {
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_connectivity_info::UpdateConnectivityInfoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_connector_definition::UpdateConnectorDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_connector_definition::UpdateConnectorDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connector_definition::UpdateConnectorDefinitionError> for Error {
    fn from(
        err: crate::operation::update_connector_definition::UpdateConnectorDefinitionError,
    ) -> Self {
        match err {
            crate::operation::update_connector_definition::UpdateConnectorDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_connector_definition::UpdateConnectorDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_core_definition::UpdateCoreDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_core_definition::UpdateCoreDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_core_definition::UpdateCoreDefinitionError> for Error {
    fn from(err: crate::operation::update_core_definition::UpdateCoreDefinitionError) -> Self {
        match err {
            crate::operation::update_core_definition::UpdateCoreDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_core_definition::UpdateCoreDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_device_definition::UpdateDeviceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_device_definition::UpdateDeviceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device_definition::UpdateDeviceDefinitionError> for Error {
    fn from(err: crate::operation::update_device_definition::UpdateDeviceDefinitionError) -> Self {
        match err {
            crate::operation::update_device_definition::UpdateDeviceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_device_definition::UpdateDeviceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_function_definition::UpdateFunctionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_function_definition::UpdateFunctionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_function_definition::UpdateFunctionDefinitionError> for Error {
    fn from(
        err: crate::operation::update_function_definition::UpdateFunctionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::update_function_definition::UpdateFunctionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_function_definition::UpdateFunctionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_group::UpdateGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_group::UpdateGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_group::UpdateGroupError> for Error {
    fn from(err: crate::operation::update_group::UpdateGroupError) -> Self {
        match err {
            crate::operation::update_group::UpdateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_group::UpdateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError> for Error {
    fn from(err: crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError) -> Self {
        match err {
            crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_group_certificate_configuration::UpdateGroupCertificateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_logger_definition::UpdateLoggerDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_logger_definition::UpdateLoggerDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_logger_definition::UpdateLoggerDefinitionError> for Error {
    fn from(err: crate::operation::update_logger_definition::UpdateLoggerDefinitionError) -> Self {
        match err {
            crate::operation::update_logger_definition::UpdateLoggerDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_logger_definition::UpdateLoggerDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_resource_definition::UpdateResourceDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_resource_definition::UpdateResourceDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resource_definition::UpdateResourceDefinitionError> for Error {
    fn from(
        err: crate::operation::update_resource_definition::UpdateResourceDefinitionError,
    ) -> Self {
        match err {
            crate::operation::update_resource_definition::UpdateResourceDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_resource_definition::UpdateResourceDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError>
    for Error
{
    fn from(
        err: crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError,
    ) -> Self {
        match err {
            crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_subscription_definition::UpdateSubscriptionDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_thing_runtime_configuration::UpdateThingRuntimeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
