// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Associates a role with a group. Your Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateRoleToGroup {
    _private: (),
}
impl AssociateRoleToGroup {
    /// Creates a new builder-style object to manufacture [`AssociateRoleToGroupInput`](crate::input::AssociateRoleToGroupInput)
    pub fn builder() -> crate::input::associate_role_to_group_input::Builder {
        crate::input::associate_role_to_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateRoleToGroup {
    type Output = std::result::Result<
        crate::output::AssociateRoleToGroupOutput,
        crate::error::AssociateRoleToGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_role_to_group_error(response)
        } else {
            crate::operation_deser::parse_associate_role_to_group_response(response)
        }
    }
}

/// Associates a role with your account. AWS IoT Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateServiceRoleToAccount {
    _private: (),
}
impl AssociateServiceRoleToAccount {
    /// Creates a new builder-style object to manufacture [`AssociateServiceRoleToAccountInput`](crate::input::AssociateServiceRoleToAccountInput)
    pub fn builder() -> crate::input::associate_service_role_to_account_input::Builder {
        crate::input::associate_service_role_to_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateServiceRoleToAccount {
    type Output = std::result::Result<
        crate::output::AssociateServiceRoleToAccountOutput,
        crate::error::AssociateServiceRoleToAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_service_role_to_account_error(response)
        } else {
            crate::operation_deser::parse_associate_service_role_to_account_response(response)
        }
    }
}

/// Creates a connector definition. You may provide the initial version of the connector definition now or use ''CreateConnectorDefinitionVersion'' at a later time.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnectorDefinition {
    _private: (),
}
impl CreateConnectorDefinition {
    /// Creates a new builder-style object to manufacture [`CreateConnectorDefinitionInput`](crate::input::CreateConnectorDefinitionInput)
    pub fn builder() -> crate::input::create_connector_definition_input::Builder {
        crate::input::create_connector_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConnectorDefinition {
    type Output = std::result::Result<
        crate::output::CreateConnectorDefinitionOutput,
        crate::error::CreateConnectorDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_connector_definition_error(response)
        } else {
            crate::operation_deser::parse_create_connector_definition_response(response)
        }
    }
}

/// Creates a version of a connector definition which has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnectorDefinitionVersion {
    _private: (),
}
impl CreateConnectorDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateConnectorDefinitionVersionInput`](crate::input::CreateConnectorDefinitionVersionInput)
    pub fn builder() -> crate::input::create_connector_definition_version_input::Builder {
        crate::input::create_connector_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConnectorDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateConnectorDefinitionVersionOutput,
        crate::error::CreateConnectorDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_connector_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_connector_definition_version_response(response)
        }
    }
}

/// Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. Greengrass groups must each contain exactly one Greengrass core.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCoreDefinition {
    _private: (),
}
impl CreateCoreDefinition {
    /// Creates a new builder-style object to manufacture [`CreateCoreDefinitionInput`](crate::input::CreateCoreDefinitionInput)
    pub fn builder() -> crate::input::create_core_definition_input::Builder {
        crate::input::create_core_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCoreDefinition {
    type Output = std::result::Result<
        crate::output::CreateCoreDefinitionOutput,
        crate::error::CreateCoreDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_core_definition_error(response)
        } else {
            crate::operation_deser::parse_create_core_definition_response(response)
        }
    }
}

/// Creates a version of a core definition that has already been defined. Greengrass groups must each contain exactly one Greengrass core.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCoreDefinitionVersion {
    _private: (),
}
impl CreateCoreDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateCoreDefinitionVersionInput`](crate::input::CreateCoreDefinitionVersionInput)
    pub fn builder() -> crate::input::create_core_definition_version_input::Builder {
        crate::input::create_core_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCoreDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateCoreDefinitionVersionOutput,
        crate::error::CreateCoreDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_core_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_core_definition_version_response(response)
        }
    }
}

/// Creates a deployment. ''CreateDeployment'' requests are idempotent with respect to the ''X-Amzn-Client-Token'' token and the request parameters.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeployment {
    _private: (),
}
impl CreateDeployment {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentInput`](crate::input::CreateDeploymentInput)
    pub fn builder() -> crate::input::create_deployment_input::Builder {
        crate::input::create_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeployment {
    type Output = std::result::Result<
        crate::output::CreateDeploymentOutput,
        crate::error::CreateDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_deployment_error(response)
        } else {
            crate::operation_deser::parse_create_deployment_response(response)
        }
    }
}

/// Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeviceDefinition {
    _private: (),
}
impl CreateDeviceDefinition {
    /// Creates a new builder-style object to manufacture [`CreateDeviceDefinitionInput`](crate::input::CreateDeviceDefinitionInput)
    pub fn builder() -> crate::input::create_device_definition_input::Builder {
        crate::input::create_device_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeviceDefinition {
    type Output = std::result::Result<
        crate::output::CreateDeviceDefinitionOutput,
        crate::error::CreateDeviceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_device_definition_error(response)
        } else {
            crate::operation_deser::parse_create_device_definition_response(response)
        }
    }
}

/// Creates a version of a device definition that has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeviceDefinitionVersion {
    _private: (),
}
impl CreateDeviceDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateDeviceDefinitionVersionInput`](crate::input::CreateDeviceDefinitionVersionInput)
    pub fn builder() -> crate::input::create_device_definition_version_input::Builder {
        crate::input::create_device_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeviceDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateDeviceDefinitionVersionOutput,
        crate::error::CreateDeviceDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_device_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_device_definition_version_response(response)
        }
    }
}

/// Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFunctionDefinition {
    _private: (),
}
impl CreateFunctionDefinition {
    /// Creates a new builder-style object to manufacture [`CreateFunctionDefinitionInput`](crate::input::CreateFunctionDefinitionInput)
    pub fn builder() -> crate::input::create_function_definition_input::Builder {
        crate::input::create_function_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFunctionDefinition {
    type Output = std::result::Result<
        crate::output::CreateFunctionDefinitionOutput,
        crate::error::CreateFunctionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_function_definition_error(response)
        } else {
            crate::operation_deser::parse_create_function_definition_response(response)
        }
    }
}

/// Creates a version of a Lambda function definition that has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFunctionDefinitionVersion {
    _private: (),
}
impl CreateFunctionDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateFunctionDefinitionVersionInput`](crate::input::CreateFunctionDefinitionVersionInput)
    pub fn builder() -> crate::input::create_function_definition_version_input::Builder {
        crate::input::create_function_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFunctionDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateFunctionDefinitionVersionOutput,
        crate::error::CreateFunctionDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_function_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_function_definition_version_response(response)
        }
    }
}

/// Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup'' package (https://github.com/awslabs/aws-greengrass-group-setup) as a library or command-line application to create and deploy Greengrass groups.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroup {
    _private: (),
}
impl CreateGroup {
    /// Creates a new builder-style object to manufacture [`CreateGroupInput`](crate::input::CreateGroupInput)
    pub fn builder() -> crate::input::create_group_input::Builder {
        crate::input::create_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGroup {
    type Output =
        std::result::Result<crate::output::CreateGroupOutput, crate::error::CreateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_group_error(response)
        } else {
            crate::operation_deser::parse_create_group_response(response)
        }
    }
}

/// Creates a CA for the group. If a CA already exists, it will rotate the existing CA.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroupCertificateAuthority {
    _private: (),
}
impl CreateGroupCertificateAuthority {
    /// Creates a new builder-style object to manufacture [`CreateGroupCertificateAuthorityInput`](crate::input::CreateGroupCertificateAuthorityInput)
    pub fn builder() -> crate::input::create_group_certificate_authority_input::Builder {
        crate::input::create_group_certificate_authority_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGroupCertificateAuthority {
    type Output = std::result::Result<
        crate::output::CreateGroupCertificateAuthorityOutput,
        crate::error::CreateGroupCertificateAuthorityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_group_certificate_authority_error(response)
        } else {
            crate::operation_deser::parse_create_group_certificate_authority_response(response)
        }
    }
}

/// Creates a version of a group which has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroupVersion {
    _private: (),
}
impl CreateGroupVersion {
    /// Creates a new builder-style object to manufacture [`CreateGroupVersionInput`](crate::input::CreateGroupVersionInput)
    pub fn builder() -> crate::input::create_group_version_input::Builder {
        crate::input::create_group_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGroupVersion {
    type Output = std::result::Result<
        crate::output::CreateGroupVersionOutput,
        crate::error::CreateGroupVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_group_version_error(response)
        } else {
            crate::operation_deser::parse_create_group_version_response(response)
        }
    }
}

/// Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLoggerDefinition {
    _private: (),
}
impl CreateLoggerDefinition {
    /// Creates a new builder-style object to manufacture [`CreateLoggerDefinitionInput`](crate::input::CreateLoggerDefinitionInput)
    pub fn builder() -> crate::input::create_logger_definition_input::Builder {
        crate::input::create_logger_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLoggerDefinition {
    type Output = std::result::Result<
        crate::output::CreateLoggerDefinitionOutput,
        crate::error::CreateLoggerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_logger_definition_error(response)
        } else {
            crate::operation_deser::parse_create_logger_definition_response(response)
        }
    }
}

/// Creates a version of a logger definition that has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLoggerDefinitionVersion {
    _private: (),
}
impl CreateLoggerDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateLoggerDefinitionVersionInput`](crate::input::CreateLoggerDefinitionVersionInput)
    pub fn builder() -> crate::input::create_logger_definition_version_input::Builder {
        crate::input::create_logger_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLoggerDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateLoggerDefinitionVersionOutput,
        crate::error::CreateLoggerDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_logger_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_logger_definition_version_response(response)
        }
    }
}

/// Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateResourceDefinition {
    _private: (),
}
impl CreateResourceDefinition {
    /// Creates a new builder-style object to manufacture [`CreateResourceDefinitionInput`](crate::input::CreateResourceDefinitionInput)
    pub fn builder() -> crate::input::create_resource_definition_input::Builder {
        crate::input::create_resource_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateResourceDefinition {
    type Output = std::result::Result<
        crate::output::CreateResourceDefinitionOutput,
        crate::error::CreateResourceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_resource_definition_error(response)
        } else {
            crate::operation_deser::parse_create_resource_definition_response(response)
        }
    }
}

/// Creates a version of a resource definition that has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateResourceDefinitionVersion {
    _private: (),
}
impl CreateResourceDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateResourceDefinitionVersionInput`](crate::input::CreateResourceDefinitionVersionInput)
    pub fn builder() -> crate::input::create_resource_definition_version_input::Builder {
        crate::input::create_resource_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateResourceDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateResourceDefinitionVersionOutput,
        crate::error::CreateResourceDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_resource_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_resource_definition_version_response(response)
        }
    }
}

/// Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSoftwareUpdateJob {
    _private: (),
}
impl CreateSoftwareUpdateJob {
    /// Creates a new builder-style object to manufacture [`CreateSoftwareUpdateJobInput`](crate::input::CreateSoftwareUpdateJobInput)
    pub fn builder() -> crate::input::create_software_update_job_input::Builder {
        crate::input::create_software_update_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSoftwareUpdateJob {
    type Output = std::result::Result<
        crate::output::CreateSoftwareUpdateJobOutput,
        crate::error::CreateSoftwareUpdateJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_software_update_job_error(response)
        } else {
            crate::operation_deser::parse_create_software_update_job_response(response)
        }
    }
}

/// Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubscriptionDefinition {
    _private: (),
}
impl CreateSubscriptionDefinition {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionDefinitionInput`](crate::input::CreateSubscriptionDefinitionInput)
    pub fn builder() -> crate::input::create_subscription_definition_input::Builder {
        crate::input::create_subscription_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSubscriptionDefinition {
    type Output = std::result::Result<
        crate::output::CreateSubscriptionDefinitionOutput,
        crate::error::CreateSubscriptionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_subscription_definition_error(response)
        } else {
            crate::operation_deser::parse_create_subscription_definition_response(response)
        }
    }
}

/// Creates a version of a subscription definition which has already been defined.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubscriptionDefinitionVersion {
    _private: (),
}
impl CreateSubscriptionDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionDefinitionVersionInput`](crate::input::CreateSubscriptionDefinitionVersionInput)
    pub fn builder() -> crate::input::create_subscription_definition_version_input::Builder {
        crate::input::create_subscription_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSubscriptionDefinitionVersion {
    type Output = std::result::Result<
        crate::output::CreateSubscriptionDefinitionVersionOutput,
        crate::error::CreateSubscriptionDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_subscription_definition_version_error(response)
        } else {
            crate::operation_deser::parse_create_subscription_definition_version_response(response)
        }
    }
}

/// Deletes a connector definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnectorDefinition {
    _private: (),
}
impl DeleteConnectorDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteConnectorDefinitionInput`](crate::input::DeleteConnectorDefinitionInput)
    pub fn builder() -> crate::input::delete_connector_definition_input::Builder {
        crate::input::delete_connector_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConnectorDefinition {
    type Output = std::result::Result<
        crate::output::DeleteConnectorDefinitionOutput,
        crate::error::DeleteConnectorDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connector_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_connector_definition_response(response)
        }
    }
}

/// Deletes a core definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCoreDefinition {
    _private: (),
}
impl DeleteCoreDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteCoreDefinitionInput`](crate::input::DeleteCoreDefinitionInput)
    pub fn builder() -> crate::input::delete_core_definition_input::Builder {
        crate::input::delete_core_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCoreDefinition {
    type Output = std::result::Result<
        crate::output::DeleteCoreDefinitionOutput,
        crate::error::DeleteCoreDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_core_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_core_definition_response(response)
        }
    }
}

/// Deletes a device definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDeviceDefinition {
    _private: (),
}
impl DeleteDeviceDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteDeviceDefinitionInput`](crate::input::DeleteDeviceDefinitionInput)
    pub fn builder() -> crate::input::delete_device_definition_input::Builder {
        crate::input::delete_device_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDeviceDefinition {
    type Output = std::result::Result<
        crate::output::DeleteDeviceDefinitionOutput,
        crate::error::DeleteDeviceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_device_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_device_definition_response(response)
        }
    }
}

/// Deletes a Lambda function definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFunctionDefinition {
    _private: (),
}
impl DeleteFunctionDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteFunctionDefinitionInput`](crate::input::DeleteFunctionDefinitionInput)
    pub fn builder() -> crate::input::delete_function_definition_input::Builder {
        crate::input::delete_function_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFunctionDefinition {
    type Output = std::result::Result<
        crate::output::DeleteFunctionDefinitionOutput,
        crate::error::DeleteFunctionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_function_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_function_definition_response(response)
        }
    }
}

/// Deletes a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGroup {
    _private: (),
}
impl DeleteGroup {
    /// Creates a new builder-style object to manufacture [`DeleteGroupInput`](crate::input::DeleteGroupInput)
    pub fn builder() -> crate::input::delete_group_input::Builder {
        crate::input::delete_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteGroup {
    type Output =
        std::result::Result<crate::output::DeleteGroupOutput, crate::error::DeleteGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_group_error(response)
        } else {
            crate::operation_deser::parse_delete_group_response(response)
        }
    }
}

/// Deletes a logger definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLoggerDefinition {
    _private: (),
}
impl DeleteLoggerDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteLoggerDefinitionInput`](crate::input::DeleteLoggerDefinitionInput)
    pub fn builder() -> crate::input::delete_logger_definition_input::Builder {
        crate::input::delete_logger_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLoggerDefinition {
    type Output = std::result::Result<
        crate::output::DeleteLoggerDefinitionOutput,
        crate::error::DeleteLoggerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_logger_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_logger_definition_response(response)
        }
    }
}

/// Deletes a resource definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteResourceDefinition {
    _private: (),
}
impl DeleteResourceDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteResourceDefinitionInput`](crate::input::DeleteResourceDefinitionInput)
    pub fn builder() -> crate::input::delete_resource_definition_input::Builder {
        crate::input::delete_resource_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteResourceDefinition {
    type Output = std::result::Result<
        crate::output::DeleteResourceDefinitionOutput,
        crate::error::DeleteResourceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_resource_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_resource_definition_response(response)
        }
    }
}

/// Deletes a subscription definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSubscriptionDefinition {
    _private: (),
}
impl DeleteSubscriptionDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteSubscriptionDefinitionInput`](crate::input::DeleteSubscriptionDefinitionInput)
    pub fn builder() -> crate::input::delete_subscription_definition_input::Builder {
        crate::input::delete_subscription_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSubscriptionDefinition {
    type Output = std::result::Result<
        crate::output::DeleteSubscriptionDefinitionOutput,
        crate::error::DeleteSubscriptionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_subscription_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_subscription_definition_response(response)
        }
    }
}

/// Disassociates the role from a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateRoleFromGroup {
    _private: (),
}
impl DisassociateRoleFromGroup {
    /// Creates a new builder-style object to manufacture [`DisassociateRoleFromGroupInput`](crate::input::DisassociateRoleFromGroupInput)
    pub fn builder() -> crate::input::disassociate_role_from_group_input::Builder {
        crate::input::disassociate_role_from_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateRoleFromGroup {
    type Output = std::result::Result<
        crate::output::DisassociateRoleFromGroupOutput,
        crate::error::DisassociateRoleFromGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_role_from_group_error(response)
        } else {
            crate::operation_deser::parse_disassociate_role_from_group_response(response)
        }
    }
}

/// Disassociates the service role from your account. Without a service role, deployments will not work.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateServiceRoleFromAccount {
    _private: (),
}
impl DisassociateServiceRoleFromAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateServiceRoleFromAccountInput`](crate::input::DisassociateServiceRoleFromAccountInput)
    pub fn builder() -> crate::input::disassociate_service_role_from_account_input::Builder {
        crate::input::disassociate_service_role_from_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateServiceRoleFromAccount {
    type Output = std::result::Result<
        crate::output::DisassociateServiceRoleFromAccountOutput,
        crate::error::DisassociateServiceRoleFromAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_service_role_from_account_error(response)
        } else {
            crate::operation_deser::parse_disassociate_service_role_from_account_response(response)
        }
    }
}

/// Retrieves the role associated with a particular group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssociatedRole {
    _private: (),
}
impl GetAssociatedRole {
    /// Creates a new builder-style object to manufacture [`GetAssociatedRoleInput`](crate::input::GetAssociatedRoleInput)
    pub fn builder() -> crate::input::get_associated_role_input::Builder {
        crate::input::get_associated_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssociatedRole {
    type Output = std::result::Result<
        crate::output::GetAssociatedRoleOutput,
        crate::error::GetAssociatedRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_associated_role_error(response)
        } else {
            crate::operation_deser::parse_get_associated_role_response(response)
        }
    }
}

/// Returns the status of a bulk deployment.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBulkDeploymentStatus {
    _private: (),
}
impl GetBulkDeploymentStatus {
    /// Creates a new builder-style object to manufacture [`GetBulkDeploymentStatusInput`](crate::input::GetBulkDeploymentStatusInput)
    pub fn builder() -> crate::input::get_bulk_deployment_status_input::Builder {
        crate::input::get_bulk_deployment_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBulkDeploymentStatus {
    type Output = std::result::Result<
        crate::output::GetBulkDeploymentStatusOutput,
        crate::error::GetBulkDeploymentStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_bulk_deployment_status_error(response)
        } else {
            crate::operation_deser::parse_get_bulk_deployment_status_response(response)
        }
    }
}

/// Retrieves the connectivity information for a core.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConnectivityInfo {
    _private: (),
}
impl GetConnectivityInfo {
    /// Creates a new builder-style object to manufacture [`GetConnectivityInfoInput`](crate::input::GetConnectivityInfoInput)
    pub fn builder() -> crate::input::get_connectivity_info_input::Builder {
        crate::input::get_connectivity_info_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConnectivityInfo {
    type Output = std::result::Result<
        crate::output::GetConnectivityInfoOutput,
        crate::error::GetConnectivityInfoError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connectivity_info_error(response)
        } else {
            crate::operation_deser::parse_get_connectivity_info_response(response)
        }
    }
}

/// Retrieves information about a connector definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConnectorDefinition {
    _private: (),
}
impl GetConnectorDefinition {
    /// Creates a new builder-style object to manufacture [`GetConnectorDefinitionInput`](crate::input::GetConnectorDefinitionInput)
    pub fn builder() -> crate::input::get_connector_definition_input::Builder {
        crate::input::get_connector_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConnectorDefinition {
    type Output = std::result::Result<
        crate::output::GetConnectorDefinitionOutput,
        crate::error::GetConnectorDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connector_definition_error(response)
        } else {
            crate::operation_deser::parse_get_connector_definition_response(response)
        }
    }
}

/// Retrieves information about a connector definition version, including the connectors that the version contains. Connectors are prebuilt modules that interact with local infrastructure, device protocols, AWS, and other cloud services.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConnectorDefinitionVersion {
    _private: (),
}
impl GetConnectorDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetConnectorDefinitionVersionInput`](crate::input::GetConnectorDefinitionVersionInput)
    pub fn builder() -> crate::input::get_connector_definition_version_input::Builder {
        crate::input::get_connector_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConnectorDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetConnectorDefinitionVersionOutput,
        crate::error::GetConnectorDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connector_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_connector_definition_version_response(response)
        }
    }
}

/// Retrieves information about a core definition version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCoreDefinition {
    _private: (),
}
impl GetCoreDefinition {
    /// Creates a new builder-style object to manufacture [`GetCoreDefinitionInput`](crate::input::GetCoreDefinitionInput)
    pub fn builder() -> crate::input::get_core_definition_input::Builder {
        crate::input::get_core_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCoreDefinition {
    type Output = std::result::Result<
        crate::output::GetCoreDefinitionOutput,
        crate::error::GetCoreDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_core_definition_error(response)
        } else {
            crate::operation_deser::parse_get_core_definition_response(response)
        }
    }
}

/// Retrieves information about a core definition version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCoreDefinitionVersion {
    _private: (),
}
impl GetCoreDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetCoreDefinitionVersionInput`](crate::input::GetCoreDefinitionVersionInput)
    pub fn builder() -> crate::input::get_core_definition_version_input::Builder {
        crate::input::get_core_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCoreDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetCoreDefinitionVersionOutput,
        crate::error::GetCoreDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_core_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_core_definition_version_response(response)
        }
    }
}

/// Returns the status of a deployment.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeploymentStatus {
    _private: (),
}
impl GetDeploymentStatus {
    /// Creates a new builder-style object to manufacture [`GetDeploymentStatusInput`](crate::input::GetDeploymentStatusInput)
    pub fn builder() -> crate::input::get_deployment_status_input::Builder {
        crate::input::get_deployment_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeploymentStatus {
    type Output = std::result::Result<
        crate::output::GetDeploymentStatusOutput,
        crate::error::GetDeploymentStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_deployment_status_error(response)
        } else {
            crate::operation_deser::parse_get_deployment_status_response(response)
        }
    }
}

/// Retrieves information about a device definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceDefinition {
    _private: (),
}
impl GetDeviceDefinition {
    /// Creates a new builder-style object to manufacture [`GetDeviceDefinitionInput`](crate::input::GetDeviceDefinitionInput)
    pub fn builder() -> crate::input::get_device_definition_input::Builder {
        crate::input::get_device_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeviceDefinition {
    type Output = std::result::Result<
        crate::output::GetDeviceDefinitionOutput,
        crate::error::GetDeviceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_device_definition_error(response)
        } else {
            crate::operation_deser::parse_get_device_definition_response(response)
        }
    }
}

/// Retrieves information about a device definition version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceDefinitionVersion {
    _private: (),
}
impl GetDeviceDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetDeviceDefinitionVersionInput`](crate::input::GetDeviceDefinitionVersionInput)
    pub fn builder() -> crate::input::get_device_definition_version_input::Builder {
        crate::input::get_device_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeviceDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetDeviceDefinitionVersionOutput,
        crate::error::GetDeviceDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_device_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_device_definition_version_response(response)
        }
    }
}

/// Retrieves information about a Lambda function definition, including its creation time and latest version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFunctionDefinition {
    _private: (),
}
impl GetFunctionDefinition {
    /// Creates a new builder-style object to manufacture [`GetFunctionDefinitionInput`](crate::input::GetFunctionDefinitionInput)
    pub fn builder() -> crate::input::get_function_definition_input::Builder {
        crate::input::get_function_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFunctionDefinition {
    type Output = std::result::Result<
        crate::output::GetFunctionDefinitionOutput,
        crate::error::GetFunctionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_function_definition_error(response)
        } else {
            crate::operation_deser::parse_get_function_definition_response(response)
        }
    }
}

/// Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFunctionDefinitionVersion {
    _private: (),
}
impl GetFunctionDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetFunctionDefinitionVersionInput`](crate::input::GetFunctionDefinitionVersionInput)
    pub fn builder() -> crate::input::get_function_definition_version_input::Builder {
        crate::input::get_function_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFunctionDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetFunctionDefinitionVersionOutput,
        crate::error::GetFunctionDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_function_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_function_definition_version_response(response)
        }
    }
}

/// Retrieves information about a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroup {
    _private: (),
}
impl GetGroup {
    /// Creates a new builder-style object to manufacture [`GetGroupInput`](crate::input::GetGroupInput)
    pub fn builder() -> crate::input::get_group_input::Builder {
        crate::input::get_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroup {
    type Output = std::result::Result<crate::output::GetGroupOutput, crate::error::GetGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_error(response)
        } else {
            crate::operation_deser::parse_get_group_response(response)
        }
    }
}

/// Retreives the CA associated with a group. Returns the public key of the CA.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupCertificateAuthority {
    _private: (),
}
impl GetGroupCertificateAuthority {
    /// Creates a new builder-style object to manufacture [`GetGroupCertificateAuthorityInput`](crate::input::GetGroupCertificateAuthorityInput)
    pub fn builder() -> crate::input::get_group_certificate_authority_input::Builder {
        crate::input::get_group_certificate_authority_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupCertificateAuthority {
    type Output = std::result::Result<
        crate::output::GetGroupCertificateAuthorityOutput,
        crate::error::GetGroupCertificateAuthorityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_certificate_authority_error(response)
        } else {
            crate::operation_deser::parse_get_group_certificate_authority_response(response)
        }
    }
}

/// Retrieves the current configuration for the CA used by the group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupCertificateConfiguration {
    _private: (),
}
impl GetGroupCertificateConfiguration {
    /// Creates a new builder-style object to manufacture [`GetGroupCertificateConfigurationInput`](crate::input::GetGroupCertificateConfigurationInput)
    pub fn builder() -> crate::input::get_group_certificate_configuration_input::Builder {
        crate::input::get_group_certificate_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupCertificateConfiguration {
    type Output = std::result::Result<
        crate::output::GetGroupCertificateConfigurationOutput,
        crate::error::GetGroupCertificateConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_certificate_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_group_certificate_configuration_response(response)
        }
    }
}

/// Retrieves information about a group version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupVersion {
    _private: (),
}
impl GetGroupVersion {
    /// Creates a new builder-style object to manufacture [`GetGroupVersionInput`](crate::input::GetGroupVersionInput)
    pub fn builder() -> crate::input::get_group_version_input::Builder {
        crate::input::get_group_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupVersion {
    type Output = std::result::Result<
        crate::output::GetGroupVersionOutput,
        crate::error::GetGroupVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_version_error(response)
        } else {
            crate::operation_deser::parse_get_group_version_response(response)
        }
    }
}

/// Retrieves information about a logger definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetLoggerDefinition {
    _private: (),
}
impl GetLoggerDefinition {
    /// Creates a new builder-style object to manufacture [`GetLoggerDefinitionInput`](crate::input::GetLoggerDefinitionInput)
    pub fn builder() -> crate::input::get_logger_definition_input::Builder {
        crate::input::get_logger_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetLoggerDefinition {
    type Output = std::result::Result<
        crate::output::GetLoggerDefinitionOutput,
        crate::error::GetLoggerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_logger_definition_error(response)
        } else {
            crate::operation_deser::parse_get_logger_definition_response(response)
        }
    }
}

/// Retrieves information about a logger definition version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetLoggerDefinitionVersion {
    _private: (),
}
impl GetLoggerDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetLoggerDefinitionVersionInput`](crate::input::GetLoggerDefinitionVersionInput)
    pub fn builder() -> crate::input::get_logger_definition_version_input::Builder {
        crate::input::get_logger_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetLoggerDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetLoggerDefinitionVersionOutput,
        crate::error::GetLoggerDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_logger_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_logger_definition_version_response(response)
        }
    }
}

/// Retrieves information about a resource definition, including its creation time and latest version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceDefinition {
    _private: (),
}
impl GetResourceDefinition {
    /// Creates a new builder-style object to manufacture [`GetResourceDefinitionInput`](crate::input::GetResourceDefinitionInput)
    pub fn builder() -> crate::input::get_resource_definition_input::Builder {
        crate::input::get_resource_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourceDefinition {
    type Output = std::result::Result<
        crate::output::GetResourceDefinitionOutput,
        crate::error::GetResourceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_definition_error(response)
        } else {
            crate::operation_deser::parse_get_resource_definition_response(response)
        }
    }
}

/// Retrieves information about a resource definition version, including which resources are included in the version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceDefinitionVersion {
    _private: (),
}
impl GetResourceDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetResourceDefinitionVersionInput`](crate::input::GetResourceDefinitionVersionInput)
    pub fn builder() -> crate::input::get_resource_definition_version_input::Builder {
        crate::input::get_resource_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourceDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetResourceDefinitionVersionOutput,
        crate::error::GetResourceDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_resource_definition_version_response(response)
        }
    }
}

/// Retrieves the service role that is attached to your account.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceRoleForAccount {
    _private: (),
}
impl GetServiceRoleForAccount {
    /// Creates a new builder-style object to manufacture [`GetServiceRoleForAccountInput`](crate::input::GetServiceRoleForAccountInput)
    pub fn builder() -> crate::input::get_service_role_for_account_input::Builder {
        crate::input::get_service_role_for_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceRoleForAccount {
    type Output = std::result::Result<
        crate::output::GetServiceRoleForAccountOutput,
        crate::error::GetServiceRoleForAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_role_for_account_error(response)
        } else {
            crate::operation_deser::parse_get_service_role_for_account_response(response)
        }
    }
}

/// Retrieves information about a subscription definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSubscriptionDefinition {
    _private: (),
}
impl GetSubscriptionDefinition {
    /// Creates a new builder-style object to manufacture [`GetSubscriptionDefinitionInput`](crate::input::GetSubscriptionDefinitionInput)
    pub fn builder() -> crate::input::get_subscription_definition_input::Builder {
        crate::input::get_subscription_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSubscriptionDefinition {
    type Output = std::result::Result<
        crate::output::GetSubscriptionDefinitionOutput,
        crate::error::GetSubscriptionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_subscription_definition_error(response)
        } else {
            crate::operation_deser::parse_get_subscription_definition_response(response)
        }
    }
}

/// Retrieves information about a subscription definition version.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSubscriptionDefinitionVersion {
    _private: (),
}
impl GetSubscriptionDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`GetSubscriptionDefinitionVersionInput`](crate::input::GetSubscriptionDefinitionVersionInput)
    pub fn builder() -> crate::input::get_subscription_definition_version_input::Builder {
        crate::input::get_subscription_definition_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSubscriptionDefinitionVersion {
    type Output = std::result::Result<
        crate::output::GetSubscriptionDefinitionVersionOutput,
        crate::error::GetSubscriptionDefinitionVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_subscription_definition_version_error(response)
        } else {
            crate::operation_deser::parse_get_subscription_definition_version_response(response)
        }
    }
}

/// Get the runtime configuration of a thing.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetThingRuntimeConfiguration {
    _private: (),
}
impl GetThingRuntimeConfiguration {
    /// Creates a new builder-style object to manufacture [`GetThingRuntimeConfigurationInput`](crate::input::GetThingRuntimeConfigurationInput)
    pub fn builder() -> crate::input::get_thing_runtime_configuration_input::Builder {
        crate::input::get_thing_runtime_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetThingRuntimeConfiguration {
    type Output = std::result::Result<
        crate::output::GetThingRuntimeConfigurationOutput,
        crate::error::GetThingRuntimeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_thing_runtime_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_thing_runtime_configuration_response(response)
        }
    }
}

/// Gets a paginated list of the deployments that have been started in a bulk deployment operation, and their current deployment status.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBulkDeploymentDetailedReports {
    _private: (),
}
impl ListBulkDeploymentDetailedReports {
    /// Creates a new builder-style object to manufacture [`ListBulkDeploymentDetailedReportsInput`](crate::input::ListBulkDeploymentDetailedReportsInput)
    pub fn builder() -> crate::input::list_bulk_deployment_detailed_reports_input::Builder {
        crate::input::list_bulk_deployment_detailed_reports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListBulkDeploymentDetailedReports {
    type Output = std::result::Result<
        crate::output::ListBulkDeploymentDetailedReportsOutput,
        crate::error::ListBulkDeploymentDetailedReportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_bulk_deployment_detailed_reports_error(response)
        } else {
            crate::operation_deser::parse_list_bulk_deployment_detailed_reports_response(response)
        }
    }
}

/// Returns a list of bulk deployments.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBulkDeployments {
    _private: (),
}
impl ListBulkDeployments {
    /// Creates a new builder-style object to manufacture [`ListBulkDeploymentsInput`](crate::input::ListBulkDeploymentsInput)
    pub fn builder() -> crate::input::list_bulk_deployments_input::Builder {
        crate::input::list_bulk_deployments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListBulkDeployments {
    type Output = std::result::Result<
        crate::output::ListBulkDeploymentsOutput,
        crate::error::ListBulkDeploymentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_bulk_deployments_error(response)
        } else {
            crate::operation_deser::parse_list_bulk_deployments_response(response)
        }
    }
}

/// Retrieves a list of connector definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConnectorDefinitions {
    _private: (),
}
impl ListConnectorDefinitions {
    /// Creates a new builder-style object to manufacture [`ListConnectorDefinitionsInput`](crate::input::ListConnectorDefinitionsInput)
    pub fn builder() -> crate::input::list_connector_definitions_input::Builder {
        crate::input::list_connector_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConnectorDefinitions {
    type Output = std::result::Result<
        crate::output::ListConnectorDefinitionsOutput,
        crate::error::ListConnectorDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_connector_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_connector_definitions_response(response)
        }
    }
}

/// Lists the versions of a connector definition, which are containers for connectors. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConnectorDefinitionVersions {
    _private: (),
}
impl ListConnectorDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListConnectorDefinitionVersionsInput`](crate::input::ListConnectorDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_connector_definition_versions_input::Builder {
        crate::input::list_connector_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConnectorDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListConnectorDefinitionVersionsOutput,
        crate::error::ListConnectorDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_connector_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_connector_definition_versions_response(response)
        }
    }
}

/// Retrieves a list of core definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCoreDefinitions {
    _private: (),
}
impl ListCoreDefinitions {
    /// Creates a new builder-style object to manufacture [`ListCoreDefinitionsInput`](crate::input::ListCoreDefinitionsInput)
    pub fn builder() -> crate::input::list_core_definitions_input::Builder {
        crate::input::list_core_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCoreDefinitions {
    type Output = std::result::Result<
        crate::output::ListCoreDefinitionsOutput,
        crate::error::ListCoreDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_core_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_core_definitions_response(response)
        }
    }
}

/// Lists the versions of a core definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCoreDefinitionVersions {
    _private: (),
}
impl ListCoreDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListCoreDefinitionVersionsInput`](crate::input::ListCoreDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_core_definition_versions_input::Builder {
        crate::input::list_core_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCoreDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListCoreDefinitionVersionsOutput,
        crate::error::ListCoreDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_core_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_core_definition_versions_response(response)
        }
    }
}

/// Returns a history of deployments for the group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeployments {
    _private: (),
}
impl ListDeployments {
    /// Creates a new builder-style object to manufacture [`ListDeploymentsInput`](crate::input::ListDeploymentsInput)
    pub fn builder() -> crate::input::list_deployments_input::Builder {
        crate::input::list_deployments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeployments {
    type Output = std::result::Result<
        crate::output::ListDeploymentsOutput,
        crate::error::ListDeploymentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_deployments_error(response)
        } else {
            crate::operation_deser::parse_list_deployments_response(response)
        }
    }
}

/// Retrieves a list of device definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceDefinitions {
    _private: (),
}
impl ListDeviceDefinitions {
    /// Creates a new builder-style object to manufacture [`ListDeviceDefinitionsInput`](crate::input::ListDeviceDefinitionsInput)
    pub fn builder() -> crate::input::list_device_definitions_input::Builder {
        crate::input::list_device_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeviceDefinitions {
    type Output = std::result::Result<
        crate::output::ListDeviceDefinitionsOutput,
        crate::error::ListDeviceDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_device_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_device_definitions_response(response)
        }
    }
}

/// Lists the versions of a device definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceDefinitionVersions {
    _private: (),
}
impl ListDeviceDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListDeviceDefinitionVersionsInput`](crate::input::ListDeviceDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_device_definition_versions_input::Builder {
        crate::input::list_device_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeviceDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListDeviceDefinitionVersionsOutput,
        crate::error::ListDeviceDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_device_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_device_definition_versions_response(response)
        }
    }
}

/// Retrieves a list of Lambda function definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFunctionDefinitions {
    _private: (),
}
impl ListFunctionDefinitions {
    /// Creates a new builder-style object to manufacture [`ListFunctionDefinitionsInput`](crate::input::ListFunctionDefinitionsInput)
    pub fn builder() -> crate::input::list_function_definitions_input::Builder {
        crate::input::list_function_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFunctionDefinitions {
    type Output = std::result::Result<
        crate::output::ListFunctionDefinitionsOutput,
        crate::error::ListFunctionDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_function_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_function_definitions_response(response)
        }
    }
}

/// Lists the versions of a Lambda function definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFunctionDefinitionVersions {
    _private: (),
}
impl ListFunctionDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListFunctionDefinitionVersionsInput`](crate::input::ListFunctionDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_function_definition_versions_input::Builder {
        crate::input::list_function_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFunctionDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListFunctionDefinitionVersionsOutput,
        crate::error::ListFunctionDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_function_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_function_definition_versions_response(response)
        }
    }
}

/// Retrieves the current CAs for a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroupCertificateAuthorities {
    _private: (),
}
impl ListGroupCertificateAuthorities {
    /// Creates a new builder-style object to manufacture [`ListGroupCertificateAuthoritiesInput`](crate::input::ListGroupCertificateAuthoritiesInput)
    pub fn builder() -> crate::input::list_group_certificate_authorities_input::Builder {
        crate::input::list_group_certificate_authorities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroupCertificateAuthorities {
    type Output = std::result::Result<
        crate::output::ListGroupCertificateAuthoritiesOutput,
        crate::error::ListGroupCertificateAuthoritiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_group_certificate_authorities_error(response)
        } else {
            crate::operation_deser::parse_list_group_certificate_authorities_response(response)
        }
    }
}

/// Retrieves a list of groups.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroups {
    _private: (),
}
impl ListGroups {
    /// Creates a new builder-style object to manufacture [`ListGroupsInput`](crate::input::ListGroupsInput)
    pub fn builder() -> crate::input::list_groups_input::Builder {
        crate::input::list_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroups {
    type Output =
        std::result::Result<crate::output::ListGroupsOutput, crate::error::ListGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_groups_error(response)
        } else {
            crate::operation_deser::parse_list_groups_response(response)
        }
    }
}

/// Lists the versions of a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroupVersions {
    _private: (),
}
impl ListGroupVersions {
    /// Creates a new builder-style object to manufacture [`ListGroupVersionsInput`](crate::input::ListGroupVersionsInput)
    pub fn builder() -> crate::input::list_group_versions_input::Builder {
        crate::input::list_group_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroupVersions {
    type Output = std::result::Result<
        crate::output::ListGroupVersionsOutput,
        crate::error::ListGroupVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_group_versions_error(response)
        } else {
            crate::operation_deser::parse_list_group_versions_response(response)
        }
    }
}

/// Retrieves a list of logger definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLoggerDefinitions {
    _private: (),
}
impl ListLoggerDefinitions {
    /// Creates a new builder-style object to manufacture [`ListLoggerDefinitionsInput`](crate::input::ListLoggerDefinitionsInput)
    pub fn builder() -> crate::input::list_logger_definitions_input::Builder {
        crate::input::list_logger_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLoggerDefinitions {
    type Output = std::result::Result<
        crate::output::ListLoggerDefinitionsOutput,
        crate::error::ListLoggerDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_logger_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_logger_definitions_response(response)
        }
    }
}

/// Lists the versions of a logger definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLoggerDefinitionVersions {
    _private: (),
}
impl ListLoggerDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListLoggerDefinitionVersionsInput`](crate::input::ListLoggerDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_logger_definition_versions_input::Builder {
        crate::input::list_logger_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLoggerDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListLoggerDefinitionVersionsOutput,
        crate::error::ListLoggerDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_logger_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_logger_definition_versions_response(response)
        }
    }
}

/// Retrieves a list of resource definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResourceDefinitions {
    _private: (),
}
impl ListResourceDefinitions {
    /// Creates a new builder-style object to manufacture [`ListResourceDefinitionsInput`](crate::input::ListResourceDefinitionsInput)
    pub fn builder() -> crate::input::list_resource_definitions_input::Builder {
        crate::input::list_resource_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResourceDefinitions {
    type Output = std::result::Result<
        crate::output::ListResourceDefinitionsOutput,
        crate::error::ListResourceDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_resource_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_resource_definitions_response(response)
        }
    }
}

/// Lists the versions of a resource definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResourceDefinitionVersions {
    _private: (),
}
impl ListResourceDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListResourceDefinitionVersionsInput`](crate::input::ListResourceDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_resource_definition_versions_input::Builder {
        crate::input::list_resource_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResourceDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListResourceDefinitionVersionsOutput,
        crate::error::ListResourceDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_resource_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_resource_definition_versions_response(response)
        }
    }
}

/// Retrieves a list of subscription definitions.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSubscriptionDefinitions {
    _private: (),
}
impl ListSubscriptionDefinitions {
    /// Creates a new builder-style object to manufacture [`ListSubscriptionDefinitionsInput`](crate::input::ListSubscriptionDefinitionsInput)
    pub fn builder() -> crate::input::list_subscription_definitions_input::Builder {
        crate::input::list_subscription_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSubscriptionDefinitions {
    type Output = std::result::Result<
        crate::output::ListSubscriptionDefinitionsOutput,
        crate::error::ListSubscriptionDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_subscription_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_subscription_definitions_response(response)
        }
    }
}

/// Lists the versions of a subscription definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSubscriptionDefinitionVersions {
    _private: (),
}
impl ListSubscriptionDefinitionVersions {
    /// Creates a new builder-style object to manufacture [`ListSubscriptionDefinitionVersionsInput`](crate::input::ListSubscriptionDefinitionVersionsInput)
    pub fn builder() -> crate::input::list_subscription_definition_versions_input::Builder {
        crate::input::list_subscription_definition_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSubscriptionDefinitionVersions {
    type Output = std::result::Result<
        crate::output::ListSubscriptionDefinitionVersionsOutput,
        crate::error::ListSubscriptionDefinitionVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_subscription_definition_versions_error(response)
        } else {
            crate::operation_deser::parse_list_subscription_definition_versions_response(response)
        }
    }
}

/// Retrieves a list of resource tags for a resource arn.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Resets a group's deployments.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetDeployments {
    _private: (),
}
impl ResetDeployments {
    /// Creates a new builder-style object to manufacture [`ResetDeploymentsInput`](crate::input::ResetDeploymentsInput)
    pub fn builder() -> crate::input::reset_deployments_input::Builder {
        crate::input::reset_deployments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetDeployments {
    type Output = std::result::Result<
        crate::output::ResetDeploymentsOutput,
        crate::error::ResetDeploymentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_deployments_error(response)
        } else {
            crate::operation_deser::parse_reset_deployments_response(response)
        }
    }
}

/// Deploys multiple groups in one operation. This action starts the bulk deployment of a specified set of group versions. Each group version deployment will be triggered with an adaptive rate that has a fixed upper limit. We recommend that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment'' request. These requests are idempotent with respect to the token and the request parameters.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartBulkDeployment {
    _private: (),
}
impl StartBulkDeployment {
    /// Creates a new builder-style object to manufacture [`StartBulkDeploymentInput`](crate::input::StartBulkDeploymentInput)
    pub fn builder() -> crate::input::start_bulk_deployment_input::Builder {
        crate::input::start_bulk_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartBulkDeployment {
    type Output = std::result::Result<
        crate::output::StartBulkDeploymentOutput,
        crate::error::StartBulkDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_bulk_deployment_error(response)
        } else {
            crate::operation_deser::parse_start_bulk_deployment_response(response)
        }
    }
}

/// Stops the execution of a bulk deployment. This action returns a status of ''Stopping'' until the deployment is stopped. You cannot start a new bulk deployment while a previous deployment is in the ''Stopping'' state. This action doesn't rollback completed deployments or cancel pending deployments.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopBulkDeployment {
    _private: (),
}
impl StopBulkDeployment {
    /// Creates a new builder-style object to manufacture [`StopBulkDeploymentInput`](crate::input::StopBulkDeploymentInput)
    pub fn builder() -> crate::input::stop_bulk_deployment_input::Builder {
        crate::input::stop_bulk_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopBulkDeployment {
    type Output = std::result::Result<
        crate::output::StopBulkDeploymentOutput,
        crate::error::StopBulkDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_bulk_deployment_error(response)
        } else {
            crate::operation_deser::parse_stop_bulk_deployment_response(response)
        }
    }
}

/// Adds tags to a Greengrass resource. Valid resources are 'Group', 'ConnectorDefinition', 'CoreDefinition', 'DeviceDefinition', 'FunctionDefinition', 'LoggerDefinition', 'SubscriptionDefinition', 'ResourceDefinition', and 'BulkDeployment'.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Remove resource tags from a Greengrass Resource.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectivityInfo {
    _private: (),
}
impl UpdateConnectivityInfo {
    /// Creates a new builder-style object to manufacture [`UpdateConnectivityInfoInput`](crate::input::UpdateConnectivityInfoInput)
    pub fn builder() -> crate::input::update_connectivity_info_input::Builder {
        crate::input::update_connectivity_info_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConnectivityInfo {
    type Output = std::result::Result<
        crate::output::UpdateConnectivityInfoOutput,
        crate::error::UpdateConnectivityInfoError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_connectivity_info_error(response)
        } else {
            crate::operation_deser::parse_update_connectivity_info_response(response)
        }
    }
}

/// Updates a connector definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnectorDefinition {
    _private: (),
}
impl UpdateConnectorDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorDefinitionInput`](crate::input::UpdateConnectorDefinitionInput)
    pub fn builder() -> crate::input::update_connector_definition_input::Builder {
        crate::input::update_connector_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConnectorDefinition {
    type Output = std::result::Result<
        crate::output::UpdateConnectorDefinitionOutput,
        crate::error::UpdateConnectorDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_connector_definition_error(response)
        } else {
            crate::operation_deser::parse_update_connector_definition_response(response)
        }
    }
}

/// Updates a core definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCoreDefinition {
    _private: (),
}
impl UpdateCoreDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateCoreDefinitionInput`](crate::input::UpdateCoreDefinitionInput)
    pub fn builder() -> crate::input::update_core_definition_input::Builder {
        crate::input::update_core_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateCoreDefinition {
    type Output = std::result::Result<
        crate::output::UpdateCoreDefinitionOutput,
        crate::error::UpdateCoreDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_core_definition_error(response)
        } else {
            crate::operation_deser::parse_update_core_definition_response(response)
        }
    }
}

/// Updates a device definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDeviceDefinition {
    _private: (),
}
impl UpdateDeviceDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateDeviceDefinitionInput`](crate::input::UpdateDeviceDefinitionInput)
    pub fn builder() -> crate::input::update_device_definition_input::Builder {
        crate::input::update_device_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDeviceDefinition {
    type Output = std::result::Result<
        crate::output::UpdateDeviceDefinitionOutput,
        crate::error::UpdateDeviceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_device_definition_error(response)
        } else {
            crate::operation_deser::parse_update_device_definition_response(response)
        }
    }
}

/// Updates a Lambda function definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFunctionDefinition {
    _private: (),
}
impl UpdateFunctionDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateFunctionDefinitionInput`](crate::input::UpdateFunctionDefinitionInput)
    pub fn builder() -> crate::input::update_function_definition_input::Builder {
        crate::input::update_function_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFunctionDefinition {
    type Output = std::result::Result<
        crate::output::UpdateFunctionDefinitionOutput,
        crate::error::UpdateFunctionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_function_definition_error(response)
        } else {
            crate::operation_deser::parse_update_function_definition_response(response)
        }
    }
}

/// Updates a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGroup {
    _private: (),
}
impl UpdateGroup {
    /// Creates a new builder-style object to manufacture [`UpdateGroupInput`](crate::input::UpdateGroupInput)
    pub fn builder() -> crate::input::update_group_input::Builder {
        crate::input::update_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGroup {
    type Output =
        std::result::Result<crate::output::UpdateGroupOutput, crate::error::UpdateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_group_error(response)
        } else {
            crate::operation_deser::parse_update_group_response(response)
        }
    }
}

/// Updates the Certificate expiry time for a group.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGroupCertificateConfiguration {
    _private: (),
}
impl UpdateGroupCertificateConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateGroupCertificateConfigurationInput`](crate::input::UpdateGroupCertificateConfigurationInput)
    pub fn builder() -> crate::input::update_group_certificate_configuration_input::Builder {
        crate::input::update_group_certificate_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGroupCertificateConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateGroupCertificateConfigurationOutput,
        crate::error::UpdateGroupCertificateConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_group_certificate_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_group_certificate_configuration_response(response)
        }
    }
}

/// Updates a logger definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLoggerDefinition {
    _private: (),
}
impl UpdateLoggerDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateLoggerDefinitionInput`](crate::input::UpdateLoggerDefinitionInput)
    pub fn builder() -> crate::input::update_logger_definition_input::Builder {
        crate::input::update_logger_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateLoggerDefinition {
    type Output = std::result::Result<
        crate::output::UpdateLoggerDefinitionOutput,
        crate::error::UpdateLoggerDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_logger_definition_error(response)
        } else {
            crate::operation_deser::parse_update_logger_definition_response(response)
        }
    }
}

/// Updates a resource definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResourceDefinition {
    _private: (),
}
impl UpdateResourceDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateResourceDefinitionInput`](crate::input::UpdateResourceDefinitionInput)
    pub fn builder() -> crate::input::update_resource_definition_input::Builder {
        crate::input::update_resource_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateResourceDefinition {
    type Output = std::result::Result<
        crate::output::UpdateResourceDefinitionOutput,
        crate::error::UpdateResourceDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_resource_definition_error(response)
        } else {
            crate::operation_deser::parse_update_resource_definition_response(response)
        }
    }
}

/// Updates a subscription definition.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSubscriptionDefinition {
    _private: (),
}
impl UpdateSubscriptionDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriptionDefinitionInput`](crate::input::UpdateSubscriptionDefinitionInput)
    pub fn builder() -> crate::input::update_subscription_definition_input::Builder {
        crate::input::update_subscription_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSubscriptionDefinition {
    type Output = std::result::Result<
        crate::output::UpdateSubscriptionDefinitionOutput,
        crate::error::UpdateSubscriptionDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_subscription_definition_error(response)
        } else {
            crate::operation_deser::parse_update_subscription_definition_response(response)
        }
    }
}

/// Updates the runtime configuration of a thing.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateThingRuntimeConfiguration {
    _private: (),
}
impl UpdateThingRuntimeConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateThingRuntimeConfigurationInput`](crate::input::UpdateThingRuntimeConfigurationInput)
    pub fn builder() -> crate::input::update_thing_runtime_configuration_input::Builder {
        crate::input::update_thing_runtime_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateThingRuntimeConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateThingRuntimeConfigurationOutput,
        crate::error::UpdateThingRuntimeConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_thing_runtime_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_thing_runtime_configuration_response(response)
        }
    }
}
