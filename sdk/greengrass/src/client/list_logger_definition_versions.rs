// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLoggerDefinitionVersions`](crate::client::fluent_builders::ListLoggerDefinitionVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`logger_definition_id(impl Into<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::logger_definition_id) / [`set_logger_definition_id(Option<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::set_logger_definition_id): The ID of the logger definition.
    ///   - [`max_results(impl Into<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::max_results) / [`set_max_results(Option<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::set_max_results): The maximum number of results to be returned per request.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLoggerDefinitionVersions::set_next_token): The token for the next set of results, or ''null'' if there are no additional results.
    /// - On success, responds with [`ListLoggerDefinitionVersionsOutput`](crate::output::ListLoggerDefinitionVersionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListLoggerDefinitionVersionsOutput::next_token): The token for the next set of results, or ''null'' if there are no additional results.
    ///   - [`versions(Option<Vec<VersionInformation>>)`](crate::output::ListLoggerDefinitionVersionsOutput::versions): Information about a version.
    /// - On failure, responds with [`SdkError<ListLoggerDefinitionVersionsError>`](crate::error::ListLoggerDefinitionVersionsError)
    pub fn list_logger_definition_versions(
        &self,
    ) -> crate::client::fluent_builders::ListLoggerDefinitionVersions {
        crate::client::fluent_builders::ListLoggerDefinitionVersions::new(self.handle.clone())
    }
}
