// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDeviceDefinitions`](crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(impl Into<String>)`](crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder::max_results) / [`set_max_results(Option<String>)`](crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder::set_max_results):<br>required: **false**<br>The maximum number of results to be returned per request.<br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder::set_next_token):<br>required: **false**<br>The token for the next set of results, or ''null'' if there are no additional results.<br>
    /// - On success, responds with [`ListDeviceDefinitionsOutput`](crate::operation::list_device_definitions::ListDeviceDefinitionsOutput) with field(s):
    ///   - [`definitions(Option<Vec::<DefinitionInformation>>)`](crate::operation::list_device_definitions::ListDeviceDefinitionsOutput::definitions): Information about a definition.
    ///   - [`next_token(Option<String>)`](crate::operation::list_device_definitions::ListDeviceDefinitionsOutput::next_token): The token for the next set of results, or ''null'' if there are no additional results.
    /// - On failure, responds with [`SdkError<ListDeviceDefinitionsError>`](crate::operation::list_device_definitions::ListDeviceDefinitionsError)
    pub fn list_device_definitions(&self) -> crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder {
        crate::operation::list_device_definitions::builders::ListDeviceDefinitionsFluentBuilder::new(self.handle.clone())
    }
}
