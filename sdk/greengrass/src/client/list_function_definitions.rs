// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListFunctionDefinitions`](crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(impl Into<String>)`](crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder::max_results) / [`set_max_results(Option<String>)`](crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder::set_max_results): The maximum number of results to be returned per request.
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder::set_next_token): The token for the next set of results, or ''null'' if there are no additional results.
    /// - On success, responds with [`ListFunctionDefinitionsOutput`](crate::operation::list_function_definitions::ListFunctionDefinitionsOutput) with field(s):
    ///   - [`definitions(Option<Vec<DefinitionInformation>>)`](crate::operation::list_function_definitions::ListFunctionDefinitionsOutput::definitions): Information about a definition.
    ///   - [`next_token(Option<String>)`](crate::operation::list_function_definitions::ListFunctionDefinitionsOutput::next_token): The token for the next set of results, or ''null'' if there are no additional results.
    /// - On failure, responds with [`SdkError<ListFunctionDefinitionsError>`](crate::operation::list_function_definitions::ListFunctionDefinitionsError)
    pub fn list_function_definitions(
        &self,
    ) -> crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder
    {
        crate::operation::list_function_definitions::builders::ListFunctionDefinitionsFluentBuilder::new(self.handle.clone())
    }
}
