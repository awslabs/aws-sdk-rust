// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Attributes that define an Amazon S3 machine learning resource.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3MachineLearningModelResourceData {
    /// The absolute local path of the resource inside the Lambda environment.
    #[doc(hidden)]
    pub destination_path: std::option::Option<std::string::String>,
    /// The owner setting for downloaded machine learning resources.
    #[doc(hidden)]
    pub owner_setting: std::option::Option<crate::types::ResourceDownloadOwnerSetting>,
    /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
    #[doc(hidden)]
    pub s3_uri: std::option::Option<std::string::String>,
}
impl S3MachineLearningModelResourceData {
    /// The absolute local path of the resource inside the Lambda environment.
    pub fn destination_path(&self) -> std::option::Option<&str> {
        self.destination_path.as_deref()
    }
    /// The owner setting for downloaded machine learning resources.
    pub fn owner_setting(
        &self,
    ) -> std::option::Option<&crate::types::ResourceDownloadOwnerSetting> {
        self.owner_setting.as_ref()
    }
    /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
    pub fn s3_uri(&self) -> std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
}
impl S3MachineLearningModelResourceData {
    /// Creates a new builder-style object to manufacture [`S3MachineLearningModelResourceData`](crate::types::S3MachineLearningModelResourceData).
    pub fn builder() -> crate::types::builders::S3MachineLearningModelResourceDataBuilder {
        crate::types::builders::S3MachineLearningModelResourceDataBuilder::default()
    }
}

/// A builder for [`S3MachineLearningModelResourceData`](crate::types::S3MachineLearningModelResourceData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3MachineLearningModelResourceDataBuilder {
    pub(crate) destination_path: std::option::Option<std::string::String>,
    pub(crate) owner_setting: std::option::Option<crate::types::ResourceDownloadOwnerSetting>,
    pub(crate) s3_uri: std::option::Option<std::string::String>,
}
impl S3MachineLearningModelResourceDataBuilder {
    /// The absolute local path of the resource inside the Lambda environment.
    pub fn destination_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_path = Some(input.into());
        self
    }
    /// The absolute local path of the resource inside the Lambda environment.
    pub fn set_destination_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_path = input;
        self
    }
    /// The owner setting for downloaded machine learning resources.
    pub fn owner_setting(mut self, input: crate::types::ResourceDownloadOwnerSetting) -> Self {
        self.owner_setting = Some(input);
        self
    }
    /// The owner setting for downloaded machine learning resources.
    pub fn set_owner_setting(
        mut self,
        input: std::option::Option<crate::types::ResourceDownloadOwnerSetting>,
    ) -> Self {
        self.owner_setting = input;
        self
    }
    /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
    pub fn s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_uri = Some(input.into());
        self
    }
    /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
    pub fn set_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`S3MachineLearningModelResourceData`](crate::types::S3MachineLearningModelResourceData).
    pub fn build(self) -> crate::types::S3MachineLearningModelResourceData {
        crate::types::S3MachineLearningModelResourceData {
            destination_path: self.destination_path,
            owner_setting: self.owner_setting,
            s3_uri: self.s3_uri,
        }
    }
}
