// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Group owner related settings for local resources.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupOwnerSetting {
    /// If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
    #[doc(hidden)]
    pub auto_add_group_owner: bool,
    /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
    #[doc(hidden)]
    pub group_owner: std::option::Option<std::string::String>,
}
impl GroupOwnerSetting {
    /// If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
    pub fn auto_add_group_owner(&self) -> bool {
        self.auto_add_group_owner
    }
    /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
    pub fn group_owner(&self) -> std::option::Option<&str> {
        self.group_owner.as_deref()
    }
}
impl GroupOwnerSetting {
    /// Creates a new builder-style object to manufacture [`GroupOwnerSetting`](crate::types::GroupOwnerSetting).
    pub fn builder() -> crate::types::builders::GroupOwnerSettingBuilder {
        crate::types::builders::GroupOwnerSettingBuilder::default()
    }
}

/// A builder for [`GroupOwnerSetting`](crate::types::GroupOwnerSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupOwnerSettingBuilder {
    pub(crate) auto_add_group_owner: std::option::Option<bool>,
    pub(crate) group_owner: std::option::Option<std::string::String>,
}
impl GroupOwnerSettingBuilder {
    /// If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
    pub fn auto_add_group_owner(mut self, input: bool) -> Self {
        self.auto_add_group_owner = Some(input);
        self
    }
    /// If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
    pub fn set_auto_add_group_owner(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_add_group_owner = input;
        self
    }
    /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
    pub fn group_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_owner = Some(input.into());
        self
    }
    /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
    pub fn set_group_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_owner = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupOwnerSetting`](crate::types::GroupOwnerSetting).
    pub fn build(self) -> crate::types::GroupOwnerSetting {
        crate::types::GroupOwnerSetting {
            auto_add_group_owner: self.auto_add_group_owner.unwrap_or_default(),
            group_owner: self.group_owner,
        }
    }
}
