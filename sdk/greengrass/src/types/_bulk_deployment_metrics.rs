// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Relevant metrics on input records processed during bulk deployment.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BulkDeploymentMetrics {
    /// The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
    #[doc(hidden)]
    pub invalid_input_records: i32,
    /// The total number of group records from the input file that have been processed so far, or attempted.
    #[doc(hidden)]
    pub records_processed: i32,
    /// The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
    #[doc(hidden)]
    pub retry_attempts: i32,
}
impl BulkDeploymentMetrics {
    /// The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
    pub fn invalid_input_records(&self) -> i32 {
        self.invalid_input_records
    }
    /// The total number of group records from the input file that have been processed so far, or attempted.
    pub fn records_processed(&self) -> i32 {
        self.records_processed
    }
    /// The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
    pub fn retry_attempts(&self) -> i32 {
        self.retry_attempts
    }
}
impl BulkDeploymentMetrics {
    /// Creates a new builder-style object to manufacture [`BulkDeploymentMetrics`](crate::types::BulkDeploymentMetrics).
    pub fn builder() -> crate::types::builders::BulkDeploymentMetricsBuilder {
        crate::types::builders::BulkDeploymentMetricsBuilder::default()
    }
}

/// A builder for [`BulkDeploymentMetrics`](crate::types::BulkDeploymentMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BulkDeploymentMetricsBuilder {
    pub(crate) invalid_input_records: std::option::Option<i32>,
    pub(crate) records_processed: std::option::Option<i32>,
    pub(crate) retry_attempts: std::option::Option<i32>,
}
impl BulkDeploymentMetricsBuilder {
    /// The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
    pub fn invalid_input_records(mut self, input: i32) -> Self {
        self.invalid_input_records = Some(input);
        self
    }
    /// The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
    pub fn set_invalid_input_records(mut self, input: std::option::Option<i32>) -> Self {
        self.invalid_input_records = input;
        self
    }
    /// The total number of group records from the input file that have been processed so far, or attempted.
    pub fn records_processed(mut self, input: i32) -> Self {
        self.records_processed = Some(input);
        self
    }
    /// The total number of group records from the input file that have been processed so far, or attempted.
    pub fn set_records_processed(mut self, input: std::option::Option<i32>) -> Self {
        self.records_processed = input;
        self
    }
    /// The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
    pub fn retry_attempts(mut self, input: i32) -> Self {
        self.retry_attempts = Some(input);
        self
    }
    /// The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
    pub fn set_retry_attempts(mut self, input: std::option::Option<i32>) -> Self {
        self.retry_attempts = input;
        self
    }
    /// Consumes the builder and constructs a [`BulkDeploymentMetrics`](crate::types::BulkDeploymentMetrics).
    pub fn build(self) -> crate::types::BulkDeploymentMetrics {
        crate::types::BulkDeploymentMetrics {
            invalid_input_records: self.invalid_input_records.unwrap_or_default(),
            records_processed: self.records_processed.unwrap_or_default(),
            retry_attempts: self.retry_attempts.unwrap_or_default(),
        }
    }
}
