// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configuration information that specifies how a Lambda function runs.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FunctionDefaultExecutionConfig {
    /// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
    #[doc(hidden)]
    pub isolation_mode: std::option::Option<crate::types::FunctionIsolationMode>,
    /// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
    #[doc(hidden)]
    pub run_as: std::option::Option<crate::types::FunctionRunAsConfig>,
}
impl FunctionDefaultExecutionConfig {
    /// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
    pub fn isolation_mode(&self) -> std::option::Option<&crate::types::FunctionIsolationMode> {
        self.isolation_mode.as_ref()
    }
    /// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
    pub fn run_as(&self) -> std::option::Option<&crate::types::FunctionRunAsConfig> {
        self.run_as.as_ref()
    }
}
impl FunctionDefaultExecutionConfig {
    /// Creates a new builder-style object to manufacture [`FunctionDefaultExecutionConfig`](crate::types::FunctionDefaultExecutionConfig).
    pub fn builder() -> crate::types::builders::FunctionDefaultExecutionConfigBuilder {
        crate::types::builders::FunctionDefaultExecutionConfigBuilder::default()
    }
}

/// A builder for [`FunctionDefaultExecutionConfig`](crate::types::FunctionDefaultExecutionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FunctionDefaultExecutionConfigBuilder {
    pub(crate) isolation_mode: std::option::Option<crate::types::FunctionIsolationMode>,
    pub(crate) run_as: std::option::Option<crate::types::FunctionRunAsConfig>,
}
impl FunctionDefaultExecutionConfigBuilder {
    /// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
    pub fn isolation_mode(mut self, input: crate::types::FunctionIsolationMode) -> Self {
        self.isolation_mode = Some(input);
        self
    }
    /// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
    pub fn set_isolation_mode(
        mut self,
        input: std::option::Option<crate::types::FunctionIsolationMode>,
    ) -> Self {
        self.isolation_mode = input;
        self
    }
    /// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
    pub fn run_as(mut self, input: crate::types::FunctionRunAsConfig) -> Self {
        self.run_as = Some(input);
        self
    }
    /// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
    pub fn set_run_as(
        mut self,
        input: std::option::Option<crate::types::FunctionRunAsConfig>,
    ) -> Self {
        self.run_as = input;
        self
    }
    /// Consumes the builder and constructs a [`FunctionDefaultExecutionConfig`](crate::types::FunctionDefaultExecutionConfig).
    pub fn build(self) -> crate::types::FunctionDefaultExecutionConfig {
        crate::types::FunctionDefaultExecutionConfig {
            isolation_mode: self.isolation_mode,
            run_as: self.run_as,
        }
    }
}
