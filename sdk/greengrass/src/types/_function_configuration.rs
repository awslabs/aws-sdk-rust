// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The configuration of the Lambda function.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FunctionConfiguration {
    /// The expected encoding type of the input payload for the function. The default is ''json''.
    #[doc(hidden)]
    pub encoding_type: std::option::Option<crate::types::EncodingType>,
    /// The environment configuration of the function.
    #[doc(hidden)]
    pub environment: std::option::Option<crate::types::FunctionConfigurationEnvironment>,
    /// The execution arguments.
    #[doc(hidden)]
    pub exec_args: std::option::Option<std::string::String>,
    /// The name of the function executable.
    #[doc(hidden)]
    pub executable: std::option::Option<std::string::String>,
    /// The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
    #[doc(hidden)]
    pub memory_size: i32,
    /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
    #[doc(hidden)]
    pub pinned: bool,
    /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
    #[doc(hidden)]
    pub timeout: i32,
    /// The Lambda runtime supported by Greengrass which is to be used instead of the one specified in the Lambda function.
    #[doc(hidden)]
    pub function_runtime_override: std::option::Option<std::string::String>,
}
impl FunctionConfiguration {
    /// The expected encoding type of the input payload for the function. The default is ''json''.
    pub fn encoding_type(&self) -> std::option::Option<&crate::types::EncodingType> {
        self.encoding_type.as_ref()
    }
    /// The environment configuration of the function.
    pub fn environment(
        &self,
    ) -> std::option::Option<&crate::types::FunctionConfigurationEnvironment> {
        self.environment.as_ref()
    }
    /// The execution arguments.
    pub fn exec_args(&self) -> std::option::Option<&str> {
        self.exec_args.as_deref()
    }
    /// The name of the function executable.
    pub fn executable(&self) -> std::option::Option<&str> {
        self.executable.as_deref()
    }
    /// The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
    pub fn memory_size(&self) -> i32 {
        self.memory_size
    }
    /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
    pub fn pinned(&self) -> bool {
        self.pinned
    }
    /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
    pub fn timeout(&self) -> i32 {
        self.timeout
    }
    /// The Lambda runtime supported by Greengrass which is to be used instead of the one specified in the Lambda function.
    pub fn function_runtime_override(&self) -> std::option::Option<&str> {
        self.function_runtime_override.as_deref()
    }
}
impl FunctionConfiguration {
    /// Creates a new builder-style object to manufacture [`FunctionConfiguration`](crate::types::FunctionConfiguration).
    pub fn builder() -> crate::types::builders::FunctionConfigurationBuilder {
        crate::types::builders::FunctionConfigurationBuilder::default()
    }
}

/// A builder for [`FunctionConfiguration`](crate::types::FunctionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FunctionConfigurationBuilder {
    pub(crate) encoding_type: std::option::Option<crate::types::EncodingType>,
    pub(crate) environment: std::option::Option<crate::types::FunctionConfigurationEnvironment>,
    pub(crate) exec_args: std::option::Option<std::string::String>,
    pub(crate) executable: std::option::Option<std::string::String>,
    pub(crate) memory_size: std::option::Option<i32>,
    pub(crate) pinned: std::option::Option<bool>,
    pub(crate) timeout: std::option::Option<i32>,
    pub(crate) function_runtime_override: std::option::Option<std::string::String>,
}
impl FunctionConfigurationBuilder {
    /// The expected encoding type of the input payload for the function. The default is ''json''.
    pub fn encoding_type(mut self, input: crate::types::EncodingType) -> Self {
        self.encoding_type = Some(input);
        self
    }
    /// The expected encoding type of the input payload for the function. The default is ''json''.
    pub fn set_encoding_type(
        mut self,
        input: std::option::Option<crate::types::EncodingType>,
    ) -> Self {
        self.encoding_type = input;
        self
    }
    /// The environment configuration of the function.
    pub fn environment(mut self, input: crate::types::FunctionConfigurationEnvironment) -> Self {
        self.environment = Some(input);
        self
    }
    /// The environment configuration of the function.
    pub fn set_environment(
        mut self,
        input: std::option::Option<crate::types::FunctionConfigurationEnvironment>,
    ) -> Self {
        self.environment = input;
        self
    }
    /// The execution arguments.
    pub fn exec_args(mut self, input: impl Into<std::string::String>) -> Self {
        self.exec_args = Some(input.into());
        self
    }
    /// The execution arguments.
    pub fn set_exec_args(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.exec_args = input;
        self
    }
    /// The name of the function executable.
    pub fn executable(mut self, input: impl Into<std::string::String>) -> Self {
        self.executable = Some(input.into());
        self
    }
    /// The name of the function executable.
    pub fn set_executable(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.executable = input;
        self
    }
    /// The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
    pub fn memory_size(mut self, input: i32) -> Self {
        self.memory_size = Some(input);
        self
    }
    /// The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
    pub fn set_memory_size(mut self, input: std::option::Option<i32>) -> Self {
        self.memory_size = input;
        self
    }
    /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
    pub fn pinned(mut self, input: bool) -> Self {
        self.pinned = Some(input);
        self
    }
    /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
    pub fn set_pinned(mut self, input: std::option::Option<bool>) -> Self {
        self.pinned = input;
        self
    }
    /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = Some(input);
        self
    }
    /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
    pub fn set_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// The Lambda runtime supported by Greengrass which is to be used instead of the one specified in the Lambda function.
    pub fn function_runtime_override(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_runtime_override = Some(input.into());
        self
    }
    /// The Lambda runtime supported by Greengrass which is to be used instead of the one specified in the Lambda function.
    pub fn set_function_runtime_override(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.function_runtime_override = input;
        self
    }
    /// Consumes the builder and constructs a [`FunctionConfiguration`](crate::types::FunctionConfiguration).
    pub fn build(self) -> crate::types::FunctionConfiguration {
        crate::types::FunctionConfiguration {
            encoding_type: self.encoding_type,
            environment: self.environment,
            exec_args: self.exec_args,
            executable: self.executable,
            memory_size: self.memory_size.unwrap_or_default(),
            pinned: self.pinned.unwrap_or_default(),
            timeout: self.timeout.unwrap_or_default(),
            function_runtime_override: self.function_runtime_override,
        }
    }
}
