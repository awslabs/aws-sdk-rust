// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configuration settings for running telemetry.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelemetryConfiguration {
    /// Synchronization status of the device reported configuration with the desired configuration.
    pub configuration_sync_status: ::std::option::Option<crate::types::ConfigurationSyncStatus>,
    /// Configure telemetry to be on or off.
    pub telemetry: ::std::option::Option<crate::types::Telemetry>,
}
impl TelemetryConfiguration {
    /// Synchronization status of the device reported configuration with the desired configuration.
    pub fn configuration_sync_status(&self) -> ::std::option::Option<&crate::types::ConfigurationSyncStatus> {
        self.configuration_sync_status.as_ref()
    }
    /// Configure telemetry to be on or off.
    pub fn telemetry(&self) -> ::std::option::Option<&crate::types::Telemetry> {
        self.telemetry.as_ref()
    }
}
impl TelemetryConfiguration {
    /// Creates a new builder-style object to manufacture [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
    pub fn builder() -> crate::types::builders::TelemetryConfigurationBuilder {
        crate::types::builders::TelemetryConfigurationBuilder::default()
    }
}

/// A builder for [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TelemetryConfigurationBuilder {
    pub(crate) configuration_sync_status: ::std::option::Option<crate::types::ConfigurationSyncStatus>,
    pub(crate) telemetry: ::std::option::Option<crate::types::Telemetry>,
}
impl TelemetryConfigurationBuilder {
    /// Synchronization status of the device reported configuration with the desired configuration.
    pub fn configuration_sync_status(mut self, input: crate::types::ConfigurationSyncStatus) -> Self {
        self.configuration_sync_status = ::std::option::Option::Some(input);
        self
    }
    /// Synchronization status of the device reported configuration with the desired configuration.
    pub fn set_configuration_sync_status(mut self, input: ::std::option::Option<crate::types::ConfigurationSyncStatus>) -> Self {
        self.configuration_sync_status = input;
        self
    }
    /// Synchronization status of the device reported configuration with the desired configuration.
    pub fn get_configuration_sync_status(&self) -> &::std::option::Option<crate::types::ConfigurationSyncStatus> {
        &self.configuration_sync_status
    }
    /// Configure telemetry to be on or off.
    /// This field is required.
    pub fn telemetry(mut self, input: crate::types::Telemetry) -> Self {
        self.telemetry = ::std::option::Option::Some(input);
        self
    }
    /// Configure telemetry to be on or off.
    pub fn set_telemetry(mut self, input: ::std::option::Option<crate::types::Telemetry>) -> Self {
        self.telemetry = input;
        self
    }
    /// Configure telemetry to be on or off.
    pub fn get_telemetry(&self) -> &::std::option::Option<crate::types::Telemetry> {
        &self.telemetry
    }
    /// Consumes the builder and constructs a [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
    pub fn build(self) -> crate::types::TelemetryConfiguration {
        crate::types::TelemetryConfiguration {
            configuration_sync_status: self.configuration_sync_status,
            telemetry: self.telemetry,
        }
    }
}
