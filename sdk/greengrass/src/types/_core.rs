// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about a core.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Core {
    /// The ARN of the certificate associated with the core.
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// If true, the core's local shadow is automatically synced with the cloud.
    #[doc(hidden)]
    pub sync_shadow: bool,
    /// The ARN of the thing which is the core.
    #[doc(hidden)]
    pub thing_arn: std::option::Option<std::string::String>,
}
impl Core {
    /// The ARN of the certificate associated with the core.
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// If true, the core's local shadow is automatically synced with the cloud.
    pub fn sync_shadow(&self) -> bool {
        self.sync_shadow
    }
    /// The ARN of the thing which is the core.
    pub fn thing_arn(&self) -> std::option::Option<&str> {
        self.thing_arn.as_deref()
    }
}
impl Core {
    /// Creates a new builder-style object to manufacture [`Core`](crate::types::Core).
    pub fn builder() -> crate::types::builders::CoreBuilder {
        crate::types::builders::CoreBuilder::default()
    }
}

/// A builder for [`Core`](crate::types::Core).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CoreBuilder {
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) sync_shadow: std::option::Option<bool>,
    pub(crate) thing_arn: std::option::Option<std::string::String>,
}
impl CoreBuilder {
    /// The ARN of the certificate associated with the core.
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// The ARN of the certificate associated with the core.
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// If true, the core's local shadow is automatically synced with the cloud.
    pub fn sync_shadow(mut self, input: bool) -> Self {
        self.sync_shadow = Some(input);
        self
    }
    /// If true, the core's local shadow is automatically synced with the cloud.
    pub fn set_sync_shadow(mut self, input: std::option::Option<bool>) -> Self {
        self.sync_shadow = input;
        self
    }
    /// The ARN of the thing which is the core.
    pub fn thing_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_arn = Some(input.into());
        self
    }
    /// The ARN of the thing which is the core.
    pub fn set_thing_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Core`](crate::types::Core).
    pub fn build(self) -> crate::types::Core {
        crate::types::Core {
            certificate_arn: self.certificate_arn,
            id: self.id,
            sync_shadow: self.sync_shadow.unwrap_or_default(),
            thing_arn: self.thing_arn,
        }
    }
}
