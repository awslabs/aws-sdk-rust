// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about a connector. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Connector {
    /// The ARN of the connector.
    #[doc(hidden)]
    pub connector_arn: std::option::Option<std::string::String>,
    /// A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The parameters or configuration that the connector uses.
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Connector {
    /// The ARN of the connector.
    pub fn connector_arn(&self) -> std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The parameters or configuration that the connector uses.
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
}
impl Connector {
    /// Creates a new builder-style object to manufacture [`Connector`](crate::types::Connector).
    pub fn builder() -> crate::types::builders::ConnectorBuilder {
        crate::types::builders::ConnectorBuilder::default()
    }
}

/// A builder for [`Connector`](crate::types::Connector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectorBuilder {
    pub(crate) connector_arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ConnectorBuilder {
    /// The ARN of the connector.
    pub fn connector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_arn = Some(input.into());
        self
    }
    /// The ARN of the connector.
    pub fn set_connector_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// The parameters or configuration that the connector uses.
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// The parameters or configuration that the connector uses.
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`Connector`](crate::types::Connector).
    pub fn build(self) -> crate::types::Connector {
        crate::types::Connector {
            connector_arn: self.connector_arn,
            id: self.id,
            parameters: self.parameters,
        }
    }
}
