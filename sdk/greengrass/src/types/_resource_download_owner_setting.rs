// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The owner setting for downloaded machine learning resources.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceDownloadOwnerSetting {
    /// The group owner of the resource. This is the name of an existing Linux OS group on the system or a GID. The group's permissions are added to the Lambda process.
    #[doc(hidden)]
    pub group_owner: std::option::Option<std::string::String>,
    /// The permissions that the group owner has to the resource. Valid values are ''rw'' (read/write) or ''ro'' (read-only).
    #[doc(hidden)]
    pub group_permission: std::option::Option<crate::types::Permission>,
}
impl ResourceDownloadOwnerSetting {
    /// The group owner of the resource. This is the name of an existing Linux OS group on the system or a GID. The group's permissions are added to the Lambda process.
    pub fn group_owner(&self) -> std::option::Option<&str> {
        self.group_owner.as_deref()
    }
    /// The permissions that the group owner has to the resource. Valid values are ''rw'' (read/write) or ''ro'' (read-only).
    pub fn group_permission(&self) -> std::option::Option<&crate::types::Permission> {
        self.group_permission.as_ref()
    }
}
impl ResourceDownloadOwnerSetting {
    /// Creates a new builder-style object to manufacture [`ResourceDownloadOwnerSetting`](crate::types::ResourceDownloadOwnerSetting).
    pub fn builder() -> crate::types::builders::ResourceDownloadOwnerSettingBuilder {
        crate::types::builders::ResourceDownloadOwnerSettingBuilder::default()
    }
}

/// A builder for [`ResourceDownloadOwnerSetting`](crate::types::ResourceDownloadOwnerSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceDownloadOwnerSettingBuilder {
    pub(crate) group_owner: std::option::Option<std::string::String>,
    pub(crate) group_permission: std::option::Option<crate::types::Permission>,
}
impl ResourceDownloadOwnerSettingBuilder {
    /// The group owner of the resource. This is the name of an existing Linux OS group on the system or a GID. The group's permissions are added to the Lambda process.
    pub fn group_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_owner = Some(input.into());
        self
    }
    /// The group owner of the resource. This is the name of an existing Linux OS group on the system or a GID. The group's permissions are added to the Lambda process.
    pub fn set_group_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_owner = input;
        self
    }
    /// The permissions that the group owner has to the resource. Valid values are ''rw'' (read/write) or ''ro'' (read-only).
    pub fn group_permission(mut self, input: crate::types::Permission) -> Self {
        self.group_permission = Some(input);
        self
    }
    /// The permissions that the group owner has to the resource. Valid values are ''rw'' (read/write) or ''ro'' (read-only).
    pub fn set_group_permission(
        mut self,
        input: std::option::Option<crate::types::Permission>,
    ) -> Self {
        self.group_permission = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceDownloadOwnerSetting`](crate::types::ResourceDownloadOwnerSetting).
    pub fn build(self) -> crate::types::ResourceDownloadOwnerSetting {
        crate::types::ResourceDownloadOwnerSetting {
            group_owner: self.group_owner,
            group_permission: self.group_permission,
        }
    }
}
