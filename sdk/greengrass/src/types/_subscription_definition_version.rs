// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about a subscription definition version.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubscriptionDefinitionVersion {
    /// A list of subscriptions.
    pub subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
}
impl SubscriptionDefinitionVersion {
    /// A list of subscriptions.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subscriptions.is_none()`.
    pub fn subscriptions(&self) -> &[crate::types::Subscription] {
        self.subscriptions.as_deref().unwrap_or_default()
    }
}
impl SubscriptionDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`SubscriptionDefinitionVersion`](crate::types::SubscriptionDefinitionVersion).
    pub fn builder() -> crate::types::builders::SubscriptionDefinitionVersionBuilder {
        crate::types::builders::SubscriptionDefinitionVersionBuilder::default()
    }
}

/// A builder for [`SubscriptionDefinitionVersion`](crate::types::SubscriptionDefinitionVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubscriptionDefinitionVersionBuilder {
    pub(crate) subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
}
impl SubscriptionDefinitionVersionBuilder {
    /// Appends an item to `subscriptions`.
    ///
    /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
    ///
    /// A list of subscriptions.
    pub fn subscriptions(mut self, input: crate::types::Subscription) -> Self {
        let mut v = self.subscriptions.unwrap_or_default();
        v.push(input);
        self.subscriptions = ::std::option::Option::Some(v);
        self
    }
    /// A list of subscriptions.
    pub fn set_subscriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>) -> Self {
        self.subscriptions = input;
        self
    }
    /// A list of subscriptions.
    pub fn get_subscriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Subscription>> {
        &self.subscriptions
    }
    /// Consumes the builder and constructs a [`SubscriptionDefinitionVersion`](crate::types::SubscriptionDefinitionVersion).
    pub fn build(self) -> crate::types::SubscriptionDefinitionVersion {
        crate::types::SubscriptionDefinitionVersion {
            subscriptions: self.subscriptions,
        }
    }
}
