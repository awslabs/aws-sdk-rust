// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about a core definition version.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoreDefinitionVersion {
    /// A list of cores in the core definition version.
    pub cores: ::std::option::Option<::std::vec::Vec<crate::types::Core>>,
}
impl CoreDefinitionVersion {
    /// A list of cores in the core definition version.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cores.is_none()`.
    pub fn cores(&self) -> &[crate::types::Core] {
        self.cores.as_deref().unwrap_or_default()
    }
}
impl CoreDefinitionVersion {
    /// Creates a new builder-style object to manufacture [`CoreDefinitionVersion`](crate::types::CoreDefinitionVersion).
    pub fn builder() -> crate::types::builders::CoreDefinitionVersionBuilder {
        crate::types::builders::CoreDefinitionVersionBuilder::default()
    }
}

/// A builder for [`CoreDefinitionVersion`](crate::types::CoreDefinitionVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoreDefinitionVersionBuilder {
    pub(crate) cores: ::std::option::Option<::std::vec::Vec<crate::types::Core>>,
}
impl CoreDefinitionVersionBuilder {
    /// Appends an item to `cores`.
    ///
    /// To override the contents of this collection use [`set_cores`](Self::set_cores).
    ///
    /// A list of cores in the core definition version.
    pub fn cores(mut self, input: crate::types::Core) -> Self {
        let mut v = self.cores.unwrap_or_default();
        v.push(input);
        self.cores = ::std::option::Option::Some(v);
        self
    }
    /// A list of cores in the core definition version.
    pub fn set_cores(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Core>>) -> Self {
        self.cores = input;
        self
    }
    /// A list of cores in the core definition version.
    pub fn get_cores(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Core>> {
        &self.cores
    }
    /// Consumes the builder and constructs a [`CoreDefinitionVersion`](crate::types::CoreDefinitionVersion).
    pub fn build(self) -> crate::types::CoreDefinitionVersion {
        crate::types::CoreDefinitionVersion { cores: self.cores }
    }
}
