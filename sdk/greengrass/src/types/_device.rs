// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about a device.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Device {
    /// The ARN of the certificate associated with the device.
    pub certificate_arn: ::std::option::Option<::std::string::String>,
    /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub id: ::std::option::Option<::std::string::String>,
    /// If true, the device's local shadow will be automatically synced with the cloud.
    pub sync_shadow: ::std::option::Option<bool>,
    /// The thing ARN of the device.
    pub thing_arn: ::std::option::Option<::std::string::String>,
}
impl Device {
    /// The ARN of the certificate associated with the device.
    pub fn certificate_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// If true, the device's local shadow will be automatically synced with the cloud.
    pub fn sync_shadow(&self) -> ::std::option::Option<bool> {
        self.sync_shadow
    }
    /// The thing ARN of the device.
    pub fn thing_arn(&self) -> ::std::option::Option<&str> {
        self.thing_arn.as_deref()
    }
}
impl Device {
    /// Creates a new builder-style object to manufacture [`Device`](crate::types::Device).
    pub fn builder() -> crate::types::builders::DeviceBuilder {
        crate::types::builders::DeviceBuilder::default()
    }
}

/// A builder for [`Device`](crate::types::Device).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceBuilder {
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) sync_shadow: ::std::option::Option<bool>,
    pub(crate) thing_arn: ::std::option::Option<::std::string::String>,
}
impl DeviceBuilder {
    /// The ARN of the certificate associated with the device.
    /// This field is required.
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the certificate associated with the device.
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// The ARN of the certificate associated with the device.
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// If true, the device's local shadow will be automatically synced with the cloud.
    pub fn sync_shadow(mut self, input: bool) -> Self {
        self.sync_shadow = ::std::option::Option::Some(input);
        self
    }
    /// If true, the device's local shadow will be automatically synced with the cloud.
    pub fn set_sync_shadow(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sync_shadow = input;
        self
    }
    /// If true, the device's local shadow will be automatically synced with the cloud.
    pub fn get_sync_shadow(&self) -> &::std::option::Option<bool> {
        &self.sync_shadow
    }
    /// The thing ARN of the device.
    /// This field is required.
    pub fn thing_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The thing ARN of the device.
    pub fn set_thing_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_arn = input;
        self
    }
    /// The thing ARN of the device.
    pub fn get_thing_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_arn
    }
    /// Consumes the builder and constructs a [`Device`](crate::types::Device).
    pub fn build(self) -> crate::types::Device {
        crate::types::Device {
            certificate_arn: self.certificate_arn,
            id: self.id,
            sync_shadow: self.sync_shadow,
            thing_arn: self.thing_arn,
        }
    }
}
