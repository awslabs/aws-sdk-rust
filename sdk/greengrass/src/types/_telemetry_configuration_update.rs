// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configuration settings for running telemetry.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TelemetryConfigurationUpdate {
    /// Configure telemetry to be on or off.
    #[doc(hidden)]
    pub telemetry: std::option::Option<crate::types::Telemetry>,
}
impl TelemetryConfigurationUpdate {
    /// Configure telemetry to be on or off.
    pub fn telemetry(&self) -> std::option::Option<&crate::types::Telemetry> {
        self.telemetry.as_ref()
    }
}
impl TelemetryConfigurationUpdate {
    /// Creates a new builder-style object to manufacture [`TelemetryConfigurationUpdate`](crate::types::TelemetryConfigurationUpdate).
    pub fn builder() -> crate::types::builders::TelemetryConfigurationUpdateBuilder {
        crate::types::builders::TelemetryConfigurationUpdateBuilder::default()
    }
}

/// A builder for [`TelemetryConfigurationUpdate`](crate::types::TelemetryConfigurationUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TelemetryConfigurationUpdateBuilder {
    pub(crate) telemetry: std::option::Option<crate::types::Telemetry>,
}
impl TelemetryConfigurationUpdateBuilder {
    /// Configure telemetry to be on or off.
    pub fn telemetry(mut self, input: crate::types::Telemetry) -> Self {
        self.telemetry = Some(input);
        self
    }
    /// Configure telemetry to be on or off.
    pub fn set_telemetry(mut self, input: std::option::Option<crate::types::Telemetry>) -> Self {
        self.telemetry = input;
        self
    }
    /// Consumes the builder and constructs a [`TelemetryConfigurationUpdate`](crate::types::TelemetryConfigurationUpdate).
    pub fn build(self) -> crate::types::TelemetryConfigurationUpdate {
        crate::types::TelemetryConfigurationUpdate {
            telemetry: self.telemetry,
        }
    }
}
