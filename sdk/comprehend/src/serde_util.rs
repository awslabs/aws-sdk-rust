// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_detect_dominant_language_output_correct_errors(
    mut builder: crate::operation::batch_detect_dominant_language::builders::BatchDetectDominantLanguageOutputBuilder,
) -> crate::operation::batch_detect_dominant_language::builders::BatchDetectDominantLanguageOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_detect_entities_output_correct_errors(
    mut builder: crate::operation::batch_detect_entities::builders::BatchDetectEntitiesOutputBuilder,
) -> crate::operation::batch_detect_entities::builders::BatchDetectEntitiesOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_detect_key_phrases_output_correct_errors(
    mut builder: crate::operation::batch_detect_key_phrases::builders::BatchDetectKeyPhrasesOutputBuilder,
) -> crate::operation::batch_detect_key_phrases::builders::BatchDetectKeyPhrasesOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_detect_sentiment_output_correct_errors(
    mut builder: crate::operation::batch_detect_sentiment::builders::BatchDetectSentimentOutputBuilder,
) -> crate::operation::batch_detect_sentiment::builders::BatchDetectSentimentOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_detect_syntax_output_correct_errors(
    mut builder: crate::operation::batch_detect_syntax::builders::BatchDetectSyntaxOutputBuilder,
) -> crate::operation::batch_detect_syntax::builders::BatchDetectSyntaxOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_detect_targeted_sentiment_output_correct_errors(
    mut builder: crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentOutputBuilder,
) -> crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentOutputBuilder {
    if builder.result_list.is_none() {
        builder.result_list = Some(Default::default())
    }
    if builder.error_list.is_none() {
        builder.error_list = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_recognizer_input_data_config_correct_errors(
    mut builder: crate::types::builders::EntityRecognizerInputDataConfigBuilder,
) -> crate::types::builders::EntityRecognizerInputDataConfigBuilder {
    if builder.entity_types.is_none() {
        builder.entity_types = Some(Default::default())
    }
    builder
}

pub(crate) fn input_data_config_correct_errors(
    mut builder: crate::types::builders::InputDataConfigBuilder,
) -> crate::types::builders::InputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn pii_output_data_config_correct_errors(
    mut builder: crate::types::builders::PiiOutputDataConfigBuilder,
) -> crate::types::builders::PiiOutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn task_config_correct_errors(mut builder: crate::types::builders::TaskConfigBuilder) -> crate::types::builders::TaskConfigBuilder {
    if builder.language_code.is_none() {
        builder.language_code = "no value was set".parse::<crate::types::LanguageCode>().ok()
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn document_classification_config_correct_errors(
    mut builder: crate::types::builders::DocumentClassificationConfigBuilder,
) -> crate::types::builders::DocumentClassificationConfigBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::DocumentClassifierMode>().ok()
    }
    builder
}

pub(crate) fn document_classifier_documents_correct_errors(
    mut builder: crate::types::builders::DocumentClassifierDocumentsBuilder,
) -> crate::types::builders::DocumentClassifierDocumentsBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn document_reader_config_correct_errors(
    mut builder: crate::types::builders::DocumentReaderConfigBuilder,
) -> crate::types::builders::DocumentReaderConfigBuilder {
    if builder.document_read_action.is_none() {
        builder.document_read_action = "no value was set".parse::<crate::types::DocumentReadAction>().ok()
    }
    builder
}

pub(crate) fn entity_recognition_config_correct_errors(
    mut builder: crate::types::builders::EntityRecognitionConfigBuilder,
) -> crate::types::builders::EntityRecognitionConfigBuilder {
    if builder.entity_types.is_none() {
        builder.entity_types = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_recognizer_annotations_correct_errors(
    mut builder: crate::types::builders::EntityRecognizerAnnotationsBuilder,
) -> crate::types::builders::EntityRecognizerAnnotationsBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_recognizer_documents_correct_errors(
    mut builder: crate::types::builders::EntityRecognizerDocumentsBuilder,
) -> crate::types::builders::EntityRecognizerDocumentsBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_recognizer_entity_list_correct_errors(
    mut builder: crate::types::builders::EntityRecognizerEntityListBuilder,
) -> crate::types::builders::EntityRecognizerEntityListBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn augmented_manifests_list_item_correct_errors(
    mut builder: crate::types::builders::AugmentedManifestsListItemBuilder,
) -> crate::types::builders::AugmentedManifestsListItemBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.attribute_names.is_none() {
        builder.attribute_names = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_types_list_item_correct_errors(
    mut builder: crate::types::builders::EntityTypesListItemBuilder,
) -> crate::types::builders::EntityTypesListItemBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}
