// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_document_classification_jobs_output_next_token(
    input: &crate::operation::list_document_classification_jobs::ListDocumentClassificationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_document_classifier_summaries_output_next_token(
    input: &crate::operation::list_document_classifier_summaries::ListDocumentClassifierSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_document_classifiers_output_next_token(
    input: &crate::operation::list_document_classifiers::ListDocumentClassifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dominant_language_detection_jobs_output_next_token(
    input: &crate::operation::list_dominant_language_detection_jobs::ListDominantLanguageDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_endpoints_output_next_token(
    input: &crate::operation::list_endpoints::ListEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_entities_detection_jobs_output_next_token(
    input: &crate::operation::list_entities_detection_jobs::ListEntitiesDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_entity_recognizer_summaries_output_next_token(
    input: &crate::operation::list_entity_recognizer_summaries::ListEntityRecognizerSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_entity_recognizers_output_next_token(
    input: &crate::operation::list_entity_recognizers::ListEntityRecognizersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_events_detection_jobs_output_next_token(
    input: &crate::operation::list_events_detection_jobs::ListEventsDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_key_phrases_detection_jobs_output_next_token(
    input: &crate::operation::list_key_phrases_detection_jobs::ListKeyPhrasesDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_pii_entities_detection_jobs_output_next_token(
    input: &crate::operation::list_pii_entities_detection_jobs::ListPiiEntitiesDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sentiment_detection_jobs_output_next_token(
    input: &crate::operation::list_sentiment_detection_jobs::ListSentimentDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_targeted_sentiment_detection_jobs_output_next_token(
    input: &crate::operation::list_targeted_sentiment_detection_jobs::ListTargetedSentimentDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_topics_detection_jobs_output_next_token(
    input: &crate::operation::list_topics_detection_jobs::ListTopicsDetectionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_endpoints_output_endpoint_properties_list(
    input: crate::operation::list_endpoints::ListEndpointsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EndpointProperties>> {
    let input = match input.endpoint_properties_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_pii_entities_detection_jobs_output_pii_entities_detection_job_properties_list(
    input: crate::operation::list_pii_entities_detection_jobs::ListPiiEntitiesDetectionJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PiiEntitiesDetectionJobProperties>> {
    let input = match input.pii_entities_detection_job_properties_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
