// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_entity_recognizer_input_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EntityRecognizerInputDataConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_format {
        object.key("DataFormat").string(var_1.as_str());
    }
    if let Some(var_2) = &input.entity_types {
        let mut array_3 = object.key("EntityTypes").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_entity_types_list_item::ser_entity_types_list_item(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.documents {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Documents").start_object();
        crate::protocol_serde::shape_entity_recognizer_documents::ser_entity_recognizer_documents(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.annotations {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Annotations").start_object();
        crate::protocol_serde::shape_entity_recognizer_annotations::ser_entity_recognizer_annotations(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.entity_list {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EntityList").start_object();
        crate::protocol_serde::shape_entity_recognizer_entity_list::ser_entity_recognizer_entity_list(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.augmented_manifests {
        let mut array_13 = object.key("AugmentedManifests").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_augmented_manifests_list_item::ser_augmented_manifests_list_item(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub(crate) fn de_entity_recognizer_input_data_config<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::EntityRecognizerInputDataConfig>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::EntityRecognizerInputDataConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DataFormat" => {
                                builder = builder.set_data_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::EntityRecognizerDataFormat::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "EntityTypes" => {
                                builder = builder.set_entity_types(
                                    crate::protocol_serde::shape_entity_types_list::de_entity_types_list(tokens)?
                                );
                            }
                            "Documents" => {
                                builder = builder.set_documents(
                                    crate::protocol_serde::shape_entity_recognizer_documents::de_entity_recognizer_documents(tokens)?
                                );
                            }
                            "Annotations" => {
                                builder = builder.set_annotations(
                                    crate::protocol_serde::shape_entity_recognizer_annotations::de_entity_recognizer_annotations(tokens)?
                                );
                            }
                            "EntityList" => {
                                builder = builder.set_entity_list(
                                    crate::protocol_serde::shape_entity_recognizer_entity_list::de_entity_recognizer_entity_list(tokens)?
                                );
                            }
                            "AugmentedManifests" => {
                                builder = builder.set_augmented_manifests(
                                    crate::protocol_serde::shape_entity_recognizer_augmented_manifests_list::de_entity_recognizer_augmented_manifests_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
