// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_entity_recognizer_input_data_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EntityRecognizerInputDataConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.data_format {
        object.key("DataFormat").string(var_1.as_str());
    }
    {
        let mut array_2 = object.key("EntityTypes").start_array();
        for item_3 in &input.entity_types {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_entity_types_list_item::ser_entity_types_list_item(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.documents {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Documents").start_object();
        crate::protocol_serde::shape_entity_recognizer_documents::ser_entity_recognizer_documents(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.annotations {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Annotations").start_object();
        crate::protocol_serde::shape_entity_recognizer_annotations::ser_entity_recognizer_annotations(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.entity_list {
        #[allow(unused_mut)]
        let mut object_10 = object.key("EntityList").start_object();
        crate::protocol_serde::shape_entity_recognizer_entity_list::ser_entity_recognizer_entity_list(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.augmented_manifests {
        let mut array_12 = object.key("AugmentedManifests").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_augmented_manifests_list_item::ser_augmented_manifests_list_item(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub(crate) fn de_entity_recognizer_input_data_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::EntityRecognizerInputDataConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EntityRecognizerInputDataConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DataFormat" => {
                            builder = builder.set_data_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EntityRecognizerDataFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "EntityTypes" => {
                            builder = builder.set_entity_types(crate::protocol_serde::shape_entity_types_list::de_entity_types_list(tokens)?);
                        }
                        "Documents" => {
                            builder = builder.set_documents(
                                crate::protocol_serde::shape_entity_recognizer_documents::de_entity_recognizer_documents(tokens)?,
                            );
                        }
                        "Annotations" => {
                            builder = builder.set_annotations(
                                crate::protocol_serde::shape_entity_recognizer_annotations::de_entity_recognizer_annotations(tokens)?,
                            );
                        }
                        "EntityList" => {
                            builder = builder.set_entity_list(
                                crate::protocol_serde::shape_entity_recognizer_entity_list::de_entity_recognizer_entity_list(tokens)?,
                            );
                        }
                        "AugmentedManifests" => {
                            builder = builder.set_augmented_manifests(
                                    crate::protocol_serde::shape_entity_recognizer_augmented_manifests_list::de_entity_recognizer_augmented_manifests_list(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::entity_recognizer_input_data_config_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
