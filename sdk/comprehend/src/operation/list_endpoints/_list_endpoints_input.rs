// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEndpointsInput {
    /// <p>Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. </p>
    pub filter: ::std::option::Option<crate::types::EndpointFilter>,
    /// <p>Identifies the next page of results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in each page. The default is 100.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListEndpointsInput {
    /// <p>Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. </p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::EndpointFilter> {
        self.filter.as_ref()
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in each page. The default is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListEndpointsInput {
    /// Creates a new builder-style object to manufacture [`ListEndpointsInput`](crate::operation::list_endpoints::ListEndpointsInput).
    pub fn builder() -> crate::operation::list_endpoints::builders::ListEndpointsInputBuilder {
        crate::operation::list_endpoints::builders::ListEndpointsInputBuilder::default()
    }
}

/// A builder for [`ListEndpointsInput`](crate::operation::list_endpoints::ListEndpointsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListEndpointsInputBuilder {
    pub(crate) filter: ::std::option::Option<crate::types::EndpointFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListEndpointsInputBuilder {
    /// <p>Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. </p>
    pub fn filter(mut self, input: crate::types::EndpointFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. </p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::EndpointFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. </p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::EndpointFilter> {
        &self.filter
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in each page. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in each page. The default is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in each page. The default is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListEndpointsInput`](crate::operation::list_endpoints::ListEndpointsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_endpoints::ListEndpointsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_endpoints::ListEndpointsInput {
            filter: self.filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
