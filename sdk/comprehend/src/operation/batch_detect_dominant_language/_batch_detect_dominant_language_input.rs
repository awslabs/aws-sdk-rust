// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchDetectDominantLanguageInput {
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.</p>
    pub text_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDetectDominantLanguageInput {
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.text_list.is_none()`.
    pub fn text_list(&self) -> &[::std::string::String] {
        self.text_list.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for BatchDetectDominantLanguageInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectDominantLanguageInput");
        formatter.field("text_list", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BatchDetectDominantLanguageInput {
    /// Creates a new builder-style object to manufacture [`BatchDetectDominantLanguageInput`](crate::operation::batch_detect_dominant_language::BatchDetectDominantLanguageInput).
    pub fn builder() -> crate::operation::batch_detect_dominant_language::builders::BatchDetectDominantLanguageInputBuilder {
        crate::operation::batch_detect_dominant_language::builders::BatchDetectDominantLanguageInputBuilder::default()
    }
}

/// A builder for [`BatchDetectDominantLanguageInput`](crate::operation::batch_detect_dominant_language::BatchDetectDominantLanguageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct BatchDetectDominantLanguageInputBuilder {
    pub(crate) text_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDetectDominantLanguageInputBuilder {
    /// Appends an item to `text_list`.
    ///
    /// To override the contents of this collection use [`set_text_list`](Self::set_text_list).
    ///
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.</p>
    pub fn text_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.text_list.unwrap_or_default();
        v.push(input.into());
        self.text_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.</p>
    pub fn set_text_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.text_list = input;
        self
    }
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.</p>
    pub fn get_text_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.text_list
    }
    /// Consumes the builder and constructs a [`BatchDetectDominantLanguageInput`](crate::operation::batch_detect_dominant_language::BatchDetectDominantLanguageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_detect_dominant_language::BatchDetectDominantLanguageInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_detect_dominant_language::BatchDetectDominantLanguageInput { text_list: self.text_list })
    }
}
impl ::std::fmt::Debug for BatchDetectDominantLanguageInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectDominantLanguageInputBuilder");
        formatter.field("text_list", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
