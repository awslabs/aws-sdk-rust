// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetectKeyPhrasesOutput {
    /// <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>
    #[doc(hidden)]
    pub key_phrases: std::option::Option<std::vec::Vec<crate::types::KeyPhrase>>,
    _request_id: Option<String>,
}
impl DetectKeyPhrasesOutput {
    /// <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>
    pub fn key_phrases(&self) -> std::option::Option<&[crate::types::KeyPhrase]> {
        self.key_phrases.as_deref()
    }
}
impl std::fmt::Debug for DetectKeyPhrasesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetectKeyPhrasesOutput");
        formatter.field("key_phrases", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for DetectKeyPhrasesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectKeyPhrasesOutput {
    /// Creates a new builder-style object to manufacture [`DetectKeyPhrasesOutput`](crate::operation::detect_key_phrases::DetectKeyPhrasesOutput).
    pub fn builder() -> crate::operation::detect_key_phrases::builders::DetectKeyPhrasesOutputBuilder
    {
        crate::operation::detect_key_phrases::builders::DetectKeyPhrasesOutputBuilder::default()
    }
}

/// A builder for [`DetectKeyPhrasesOutput`](crate::operation::detect_key_phrases::DetectKeyPhrasesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DetectKeyPhrasesOutputBuilder {
    pub(crate) key_phrases: std::option::Option<std::vec::Vec<crate::types::KeyPhrase>>,
    _request_id: Option<String>,
}
impl DetectKeyPhrasesOutputBuilder {
    /// Appends an item to `key_phrases`.
    ///
    /// To override the contents of this collection use [`set_key_phrases`](Self::set_key_phrases).
    ///
    /// <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>
    pub fn key_phrases(mut self, input: crate::types::KeyPhrase) -> Self {
        let mut v = self.key_phrases.unwrap_or_default();
        v.push(input);
        self.key_phrases = Some(v);
        self
    }
    /// <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>
    pub fn set_key_phrases(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeyPhrase>>,
    ) -> Self {
        self.key_phrases = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectKeyPhrasesOutput`](crate::operation::detect_key_phrases::DetectKeyPhrasesOutput).
    pub fn build(self) -> crate::operation::detect_key_phrases::DetectKeyPhrasesOutput {
        crate::operation::detect_key_phrases::DetectKeyPhrasesOutput {
            key_phrases: self.key_phrases,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for DetectKeyPhrasesOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetectKeyPhrasesOutputBuilder");
        formatter.field("key_phrases", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
