// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchDetectTargetedSentimentOutput {
    /// <p>A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.</p>
    #[doc(hidden)]
    pub result_list:
        std::option::Option<std::vec::Vec<crate::types::BatchDetectTargetedSentimentItemResult>>,
    /// <p>List of errors that the operation can return.</p>
    #[doc(hidden)]
    pub error_list: std::option::Option<std::vec::Vec<crate::types::BatchItemError>>,
    _request_id: Option<String>,
}
impl BatchDetectTargetedSentimentOutput {
    /// <p>A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.</p>
    pub fn result_list(
        &self,
    ) -> std::option::Option<&[crate::types::BatchDetectTargetedSentimentItemResult]> {
        self.result_list.as_deref()
    }
    /// <p>List of errors that the operation can return.</p>
    pub fn error_list(&self) -> std::option::Option<&[crate::types::BatchItemError]> {
        self.error_list.as_deref()
    }
}
impl std::fmt::Debug for BatchDetectTargetedSentimentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectTargetedSentimentOutput");
        formatter.field("result_list", &"*** Sensitive Data Redacted ***");
        formatter.field("error_list", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for BatchDetectTargetedSentimentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDetectTargetedSentimentOutput {
    /// Creates a new builder-style object to manufacture [`BatchDetectTargetedSentimentOutput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentOutput).
    pub fn builder() -> crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentOutputBuilder{
        crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentOutputBuilder::default()
    }
}

/// A builder for [`BatchDetectTargetedSentimentOutput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct BatchDetectTargetedSentimentOutputBuilder {
    pub(crate) result_list:
        std::option::Option<std::vec::Vec<crate::types::BatchDetectTargetedSentimentItemResult>>,
    pub(crate) error_list: std::option::Option<std::vec::Vec<crate::types::BatchItemError>>,
    _request_id: Option<String>,
}
impl BatchDetectTargetedSentimentOutputBuilder {
    /// Appends an item to `result_list`.
    ///
    /// To override the contents of this collection use [`set_result_list`](Self::set_result_list).
    ///
    /// <p>A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.</p>
    pub fn result_list(
        mut self,
        input: crate::types::BatchDetectTargetedSentimentItemResult,
    ) -> Self {
        let mut v = self.result_list.unwrap_or_default();
        v.push(input);
        self.result_list = Some(v);
        self
    }
    /// <p>A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty.</p>
    pub fn set_result_list(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::BatchDetectTargetedSentimentItemResult>,
        >,
    ) -> Self {
        self.result_list = input;
        self
    }
    /// Appends an item to `error_list`.
    ///
    /// To override the contents of this collection use [`set_error_list`](Self::set_error_list).
    ///
    /// <p>List of errors that the operation can return.</p>
    pub fn error_list(mut self, input: crate::types::BatchItemError) -> Self {
        let mut v = self.error_list.unwrap_or_default();
        v.push(input);
        self.error_list = Some(v);
        self
    }
    /// <p>List of errors that the operation can return.</p>
    pub fn set_error_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchItemError>>,
    ) -> Self {
        self.error_list = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDetectTargetedSentimentOutput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentOutput {
        crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentOutput {
            result_list: self.result_list,
            error_list: self.error_list,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for BatchDetectTargetedSentimentOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectTargetedSentimentOutputBuilder");
        formatter.field("result_list", &"*** Sensitive Data Redacted ***");
        formatter.field("error_list", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
