// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchDetectTargetedSentimentInput {
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.</p>
    #[doc(hidden)]
    pub text_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The language of the input documents. Currently, English is the only supported language.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::LanguageCode>,
}
impl BatchDetectTargetedSentimentInput {
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.</p>
    pub fn text_list(&self) -> std::option::Option<&[std::string::String]> {
        self.text_list.as_deref()
    }
    /// <p>The language of the input documents. Currently, English is the only supported language.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
}
impl std::fmt::Debug for BatchDetectTargetedSentimentInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectTargetedSentimentInput");
        formatter.field("text_list", &"*** Sensitive Data Redacted ***");
        formatter.field("language_code", &self.language_code);
        formatter.finish()
    }
}
impl BatchDetectTargetedSentimentInput {
    /// Creates a new builder-style object to manufacture [`BatchDetectTargetedSentimentInput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentInput).
    pub fn builder() -> crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentInputBuilder{
        crate::operation::batch_detect_targeted_sentiment::builders::BatchDetectTargetedSentimentInputBuilder::default()
    }
}

/// A builder for [`BatchDetectTargetedSentimentInput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct BatchDetectTargetedSentimentInputBuilder {
    pub(crate) text_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) language_code: std::option::Option<crate::types::LanguageCode>,
}
impl BatchDetectTargetedSentimentInputBuilder {
    /// Appends an item to `text_list`.
    ///
    /// To override the contents of this collection use [`set_text_list`](Self::set_text_list).
    ///
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.</p>
    pub fn text_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.text_list.unwrap_or_default();
        v.push(input.into());
        self.text_list = Some(v);
        self
    }
    /// <p>A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.</p>
    pub fn set_text_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.text_list = input;
        self
    }
    /// <p>The language of the input documents. Currently, English is the only supported language.</p>
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// <p>The language of the input documents. Currently, English is the only supported language.</p>
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::LanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDetectTargetedSentimentInput`](crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::batch_detect_targeted_sentiment::BatchDetectTargetedSentimentInput {
                text_list: self.text_list,
                language_code: self.language_code,
            },
        )
    }
}
impl std::fmt::Debug for BatchDetectTargetedSentimentInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDetectTargetedSentimentInputBuilder");
        formatter.field("text_list", &"*** Sensitive Data Redacted ***");
        formatter.field("language_code", &self.language_code);
        formatter.finish()
    }
}
