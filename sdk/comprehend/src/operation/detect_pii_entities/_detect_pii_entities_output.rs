// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectPiiEntitiesOutput {
    /// <p>A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::types::PiiEntity>>,
    _request_id: Option<String>,
}
impl DetectPiiEntitiesOutput {
    /// <p>A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::types::PiiEntity]> {
        self.entities.as_deref()
    }
}
impl aws_http::request_id::RequestId for DetectPiiEntitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectPiiEntitiesOutput {
    /// Creates a new builder-style object to manufacture [`DetectPiiEntitiesOutput`](crate::operation::detect_pii_entities::DetectPiiEntitiesOutput).
    pub fn builder(
    ) -> crate::operation::detect_pii_entities::builders::DetectPiiEntitiesOutputBuilder {
        crate::operation::detect_pii_entities::builders::DetectPiiEntitiesOutputBuilder::default()
    }
}

/// A builder for [`DetectPiiEntitiesOutput`](crate::operation::detect_pii_entities::DetectPiiEntitiesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectPiiEntitiesOutputBuilder {
    pub(crate) entities: std::option::Option<std::vec::Vec<crate::types::PiiEntity>>,
    _request_id: Option<String>,
}
impl DetectPiiEntitiesOutputBuilder {
    /// Appends an item to `entities`.
    ///
    /// To override the contents of this collection use [`set_entities`](Self::set_entities).
    ///
    /// <p>A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.</p>
    pub fn entities(mut self, input: crate::types::PiiEntity) -> Self {
        let mut v = self.entities.unwrap_or_default();
        v.push(input);
        self.entities = Some(v);
        self
    }
    /// <p>A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.</p>
    pub fn set_entities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PiiEntity>>,
    ) -> Self {
        self.entities = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectPiiEntitiesOutput`](crate::operation::detect_pii_entities::DetectPiiEntitiesOutput).
    pub fn build(self) -> crate::operation::detect_pii_entities::DetectPiiEntitiesOutput {
        crate::operation::detect_pii_entities::DetectPiiEntitiesOutput {
            entities: self.entities,
            _request_id: self._request_id,
        }
    }
}
