// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartKeyPhrasesDetectionJobOutput {
    /// <p>The identifier generated for the job. To get the status of a job, use this identifier with the operation.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows:</p>
    /// <p> <code>arn:
    /// <partition>
    /// :comprehend:
    /// <region>
    /// :
    /// <account-id>
    /// :key-phrases-detection-job/
    /// <job-id></job-id>
    /// </account-id>
    /// </region>
    /// </partition></code> </p>
    /// <p>The following is an example job ARN:</p>
    /// <p> <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code> </p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The status of the job. </p>
    /// <ul>
    /// <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li>
    /// <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li>
    /// <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl StartKeyPhrasesDetectionJobOutput {
    /// <p>The identifier generated for the job. To get the status of a job, use this identifier with the operation.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows:</p>
    /// <p> <code>arn:
    /// <partition>
    /// :comprehend:
    /// <region>
    /// :
    /// <account-id>
    /// :key-phrases-detection-job/
    /// <job-id></job-id>
    /// </account-id>
    /// </region>
    /// </partition></code> </p>
    /// <p>The following is an example job ARN:</p>
    /// <p> <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code> </p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The status of the job. </p>
    /// <ul>
    /// <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li>
    /// <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li>
    /// <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li>
    /// </ul>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartKeyPhrasesDetectionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartKeyPhrasesDetectionJobOutput {
    /// Creates a new builder-style object to manufacture [`StartKeyPhrasesDetectionJobOutput`](crate::operation::start_key_phrases_detection_job::StartKeyPhrasesDetectionJobOutput).
    pub fn builder() -> crate::operation::start_key_phrases_detection_job::builders::StartKeyPhrasesDetectionJobOutputBuilder{
        crate::operation::start_key_phrases_detection_job::builders::StartKeyPhrasesDetectionJobOutputBuilder::default()
    }
}

/// A builder for [`StartKeyPhrasesDetectionJobOutput`](crate::operation::start_key_phrases_detection_job::StartKeyPhrasesDetectionJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartKeyPhrasesDetectionJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_arn: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl StartKeyPhrasesDetectionJobOutputBuilder {
    /// <p>The identifier generated for the job. To get the status of a job, use this identifier with the operation.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The identifier generated for the job. To get the status of a job, use this identifier with the operation.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows:</p>
    /// <p> <code>arn:
    /// <partition>
    /// :comprehend:
    /// <region>
    /// :
    /// <account-id>
    /// :key-phrases-detection-job/
    /// <job-id></job-id>
    /// </account-id>
    /// </region>
    /// </partition></code> </p>
    /// <p>The following is an example job ARN:</p>
    /// <p> <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code> </p>
    pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows:</p>
    /// <p> <code>arn:
    /// <partition>
    /// :comprehend:
    /// <region>
    /// :
    /// <account-id>
    /// :key-phrases-detection-job/
    /// <job-id></job-id>
    /// </account-id>
    /// </region>
    /// </partition></code> </p>
    /// <p>The following is an example job ARN:</p>
    /// <p> <code>arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab</code> </p>
    pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The status of the job. </p>
    /// <ul>
    /// <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li>
    /// <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li>
    /// <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li>
    /// </ul>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The status of the job. </p>
    /// <ul>
    /// <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li>
    /// <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li>
    /// <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li>
    /// </ul>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartKeyPhrasesDetectionJobOutput`](crate::operation::start_key_phrases_detection_job::StartKeyPhrasesDetectionJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::start_key_phrases_detection_job::StartKeyPhrasesDetectionJobOutput {
        crate::operation::start_key_phrases_detection_job::StartKeyPhrasesDetectionJobOutput {
            job_id: self.job_id,
            job_arn: self.job_arn,
            job_status: self.job_status,
            _request_id: self._request_id,
        }
    }
}
