// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDetectDominantLanguageItemResult {
    /// <p>The zero-based index of the document in the input list.</p>
    pub index: ::std::option::Option<i32>,
    /// <p>One or more <code>DominantLanguage</code> objects describing the dominant languages in the document.</p>
    pub languages: ::std::option::Option<::std::vec::Vec<crate::types::DominantLanguage>>,
}
impl BatchDetectDominantLanguageItemResult {
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn index(&self) -> ::std::option::Option<i32> {
        self.index
    }
    /// <p>One or more <code>DominantLanguage</code> objects describing the dominant languages in the document.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.languages.is_none()`.
    pub fn languages(&self) -> &[crate::types::DominantLanguage] {
        self.languages.as_deref().unwrap_or_default()
    }
}
impl BatchDetectDominantLanguageItemResult {
    /// Creates a new builder-style object to manufacture [`BatchDetectDominantLanguageItemResult`](crate::types::BatchDetectDominantLanguageItemResult).
    pub fn builder() -> crate::types::builders::BatchDetectDominantLanguageItemResultBuilder {
        crate::types::builders::BatchDetectDominantLanguageItemResultBuilder::default()
    }
}

/// A builder for [`BatchDetectDominantLanguageItemResult`](crate::types::BatchDetectDominantLanguageItemResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDetectDominantLanguageItemResultBuilder {
    pub(crate) index: ::std::option::Option<i32>,
    pub(crate) languages: ::std::option::Option<::std::vec::Vec<crate::types::DominantLanguage>>,
}
impl BatchDetectDominantLanguageItemResultBuilder {
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn set_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn get_index(&self) -> &::std::option::Option<i32> {
        &self.index
    }
    /// Appends an item to `languages`.
    ///
    /// To override the contents of this collection use [`set_languages`](Self::set_languages).
    ///
    /// <p>One or more <code>DominantLanguage</code> objects describing the dominant languages in the document.</p>
    pub fn languages(mut self, input: crate::types::DominantLanguage) -> Self {
        let mut v = self.languages.unwrap_or_default();
        v.push(input);
        self.languages = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more <code>DominantLanguage</code> objects describing the dominant languages in the document.</p>
    pub fn set_languages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DominantLanguage>>) -> Self {
        self.languages = input;
        self
    }
    /// <p>One or more <code>DominantLanguage</code> objects describing the dominant languages in the document.</p>
    pub fn get_languages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DominantLanguage>> {
        &self.languages
    }
    /// Consumes the builder and constructs a [`BatchDetectDominantLanguageItemResult`](crate::types::BatchDetectDominantLanguageItemResult).
    pub fn build(self) -> crate::types::BatchDetectDominantLanguageItemResult {
        crate::types::BatchDetectDominantLanguageItemResult {
            index: self.index,
            languages: self.languages,
        }
    }
}
