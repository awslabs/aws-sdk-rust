// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the annotations associated with a entity recognizer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityRecognizerAnnotations {
    /// <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub s3_uri: ::std::string::String,
    /// <p> Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub test_s3_uri: ::std::option::Option<::std::string::String>,
}
impl EntityRecognizerAnnotations {
    /// <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn s3_uri(&self) -> &str {
        use std::ops::Deref;
        self.s3_uri.deref()
    }
    /// <p> Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn test_s3_uri(&self) -> ::std::option::Option<&str> {
        self.test_s3_uri.as_deref()
    }
}
impl EntityRecognizerAnnotations {
    /// Creates a new builder-style object to manufacture [`EntityRecognizerAnnotations`](crate::types::EntityRecognizerAnnotations).
    pub fn builder() -> crate::types::builders::EntityRecognizerAnnotationsBuilder {
        crate::types::builders::EntityRecognizerAnnotationsBuilder::default()
    }
}

/// A builder for [`EntityRecognizerAnnotations`](crate::types::EntityRecognizerAnnotations).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntityRecognizerAnnotationsBuilder {
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) test_s3_uri: ::std::option::Option<::std::string::String>,
}
impl EntityRecognizerAnnotationsBuilder {
    /// <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p> Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn test_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn set_test_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_s3_uri = input;
        self
    }
    /// <p> Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.</p>
    pub fn get_test_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_s3_uri
    }
    /// Consumes the builder and constructs a [`EntityRecognizerAnnotations`](crate::types::EntityRecognizerAnnotations).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_uri`](crate::types::builders::EntityRecognizerAnnotationsBuilder::s3_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::EntityRecognizerAnnotations, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EntityRecognizerAnnotations {
            s3_uri: self.s3_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_uri",
                    "s3_uri was not specified but it is required when building EntityRecognizerAnnotations",
                )
            })?,
            test_s3_uri: self.test_s3_uri,
        })
    }
}
