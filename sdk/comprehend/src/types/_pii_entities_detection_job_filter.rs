// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information for filtering a list of PII entity detection jobs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PiiEntitiesDetectionJobFilter {
    /// <p>Filters on the name of the job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>Filters the list of jobs based on job status. Returns only jobs with the specified status.</p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    #[doc(hidden)]
    pub submit_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.</p>
    #[doc(hidden)]
    pub submit_time_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl PiiEntitiesDetectionJobFilter {
    /// <p>Filters on the name of the job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>Filters the list of jobs based on job status. Returns only jobs with the specified status.</p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn submit_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submit_time_before.as_ref()
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn submit_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submit_time_after.as_ref()
    }
}
impl PiiEntitiesDetectionJobFilter {
    /// Creates a new builder-style object to manufacture [`PiiEntitiesDetectionJobFilter`](crate::types::PiiEntitiesDetectionJobFilter).
    pub fn builder() -> crate::types::builders::PiiEntitiesDetectionJobFilterBuilder {
        crate::types::builders::PiiEntitiesDetectionJobFilterBuilder::default()
    }
}

/// A builder for [`PiiEntitiesDetectionJobFilter`](crate::types::PiiEntitiesDetectionJobFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PiiEntitiesDetectionJobFilterBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) submit_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) submit_time_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl PiiEntitiesDetectionJobFilterBuilder {
    /// <p>Filters on the name of the job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>Filters on the name of the job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>Filters the list of jobs based on job status. Returns only jobs with the specified status.</p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>Filters the list of jobs based on job status. Returns only jobs with the specified status.</p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn submit_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submit_time_before = Some(input);
        self
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn set_submit_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submit_time_before = input;
        self
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn submit_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submit_time_after = Some(input);
        self
    }
    /// <p>Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn set_submit_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submit_time_after = input;
        self
    }
    /// Consumes the builder and constructs a [`PiiEntitiesDetectionJobFilter`](crate::types::PiiEntitiesDetectionJobFilter).
    pub fn build(self) -> crate::types::PiiEntitiesDetectionJobFilter {
        crate::types::PiiEntitiesDetectionJobFilter {
            job_name: self.job_name,
            job_status: self.job_status,
            submit_time_before: self.submit_time_before,
            submit_time_after: self.submit_time_after,
        }
    }
}
