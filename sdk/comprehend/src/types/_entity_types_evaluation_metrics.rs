// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about the accuracy of an entity recognizer for a specific entity type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityTypesEvaluationMetrics {
    /// <p>A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. </p>
    #[doc(hidden)]
    pub precision: std::option::Option<f64>,
    /// <p>A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.</p>
    #[doc(hidden)]
    pub recall: std::option::Option<f64>,
    /// <p>A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>
    #[doc(hidden)]
    pub f1_score: std::option::Option<f64>,
}
impl EntityTypesEvaluationMetrics {
    /// <p>A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. </p>
    pub fn precision(&self) -> std::option::Option<f64> {
        self.precision
    }
    /// <p>A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.</p>
    pub fn recall(&self) -> std::option::Option<f64> {
        self.recall
    }
    /// <p>A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>
    pub fn f1_score(&self) -> std::option::Option<f64> {
        self.f1_score
    }
}
impl EntityTypesEvaluationMetrics {
    /// Creates a new builder-style object to manufacture [`EntityTypesEvaluationMetrics`](crate::types::EntityTypesEvaluationMetrics).
    pub fn builder() -> crate::types::builders::EntityTypesEvaluationMetricsBuilder {
        crate::types::builders::EntityTypesEvaluationMetricsBuilder::default()
    }
}

/// A builder for [`EntityTypesEvaluationMetrics`](crate::types::EntityTypesEvaluationMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityTypesEvaluationMetricsBuilder {
    pub(crate) precision: std::option::Option<f64>,
    pub(crate) recall: std::option::Option<f64>,
    pub(crate) f1_score: std::option::Option<f64>,
}
impl EntityTypesEvaluationMetricsBuilder {
    /// <p>A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. </p>
    pub fn precision(mut self, input: f64) -> Self {
        self.precision = Some(input);
        self
    }
    /// <p>A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. </p>
    pub fn set_precision(mut self, input: std::option::Option<f64>) -> Self {
        self.precision = input;
        self
    }
    /// <p>A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.</p>
    pub fn recall(mut self, input: f64) -> Self {
        self.recall = Some(input);
        self
    }
    /// <p>A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.</p>
    pub fn set_recall(mut self, input: std::option::Option<f64>) -> Self {
        self.recall = input;
        self
    }
    /// <p>A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>
    pub fn f1_score(mut self, input: f64) -> Self {
        self.f1_score = Some(input);
        self
    }
    /// <p>A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>
    pub fn set_f1_score(mut self, input: std::option::Option<f64>) -> Self {
        self.f1_score = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityTypesEvaluationMetrics`](crate::types::EntityTypesEvaluationMetrics).
    pub fn build(self) -> crate::types::EntityTypesEvaluationMetrics {
        crate::types::EntityTypesEvaluationMetrics {
            precision: self.precision,
            recall: self.recall,
            f1_score: self.f1_score,
        }
    }
}
