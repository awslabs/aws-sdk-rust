// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about one mention of an entity. The mention information includes the location of the mention in the text and the sentiment of the mention.</p>
/// <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetedSentimentMention {
    /// <p>Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.</p>
    #[doc(hidden)]
    pub score: std::option::Option<f32>,
    /// <p>The confidence that all the entities mentioned in the group relate to the same entity.</p>
    #[doc(hidden)]
    pub group_score: std::option::Option<f32>,
    /// <p>The text in the document that identifies the entity.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The type of the entity. Amazon Comprehend supports a variety of <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities">entity types</a>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TargetedSentimentEntityType>,
    /// <p>Contains the sentiment and sentiment score for the mention.</p>
    #[doc(hidden)]
    pub mention_sentiment: std::option::Option<crate::types::MentionSentiment>,
    /// <p>The offset into the document text where the mention begins.</p>
    #[doc(hidden)]
    pub begin_offset: std::option::Option<i32>,
    /// <p>The offset into the document text where the mention ends.</p>
    #[doc(hidden)]
    pub end_offset: std::option::Option<i32>,
}
impl TargetedSentimentMention {
    /// <p>Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.</p>
    pub fn score(&self) -> std::option::Option<f32> {
        self.score
    }
    /// <p>The confidence that all the entities mentioned in the group relate to the same entity.</p>
    pub fn group_score(&self) -> std::option::Option<f32> {
        self.group_score
    }
    /// <p>The text in the document that identifies the entity.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The type of the entity. Amazon Comprehend supports a variety of <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities">entity types</a>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TargetedSentimentEntityType> {
        self.r#type.as_ref()
    }
    /// <p>Contains the sentiment and sentiment score for the mention.</p>
    pub fn mention_sentiment(&self) -> std::option::Option<&crate::types::MentionSentiment> {
        self.mention_sentiment.as_ref()
    }
    /// <p>The offset into the document text where the mention begins.</p>
    pub fn begin_offset(&self) -> std::option::Option<i32> {
        self.begin_offset
    }
    /// <p>The offset into the document text where the mention ends.</p>
    pub fn end_offset(&self) -> std::option::Option<i32> {
        self.end_offset
    }
}
impl TargetedSentimentMention {
    /// Creates a new builder-style object to manufacture [`TargetedSentimentMention`](crate::types::TargetedSentimentMention).
    pub fn builder() -> crate::types::builders::TargetedSentimentMentionBuilder {
        crate::types::builders::TargetedSentimentMentionBuilder::default()
    }
}

/// A builder for [`TargetedSentimentMention`](crate::types::TargetedSentimentMention).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetedSentimentMentionBuilder {
    pub(crate) score: std::option::Option<f32>,
    pub(crate) group_score: std::option::Option<f32>,
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::TargetedSentimentEntityType>,
    pub(crate) mention_sentiment: std::option::Option<crate::types::MentionSentiment>,
    pub(crate) begin_offset: std::option::Option<i32>,
    pub(crate) end_offset: std::option::Option<i32>,
}
impl TargetedSentimentMentionBuilder {
    /// <p>Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.</p>
    pub fn score(mut self, input: f32) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.</p>
    pub fn set_score(mut self, input: std::option::Option<f32>) -> Self {
        self.score = input;
        self
    }
    /// <p>The confidence that all the entities mentioned in the group relate to the same entity.</p>
    pub fn group_score(mut self, input: f32) -> Self {
        self.group_score = Some(input);
        self
    }
    /// <p>The confidence that all the entities mentioned in the group relate to the same entity.</p>
    pub fn set_group_score(mut self, input: std::option::Option<f32>) -> Self {
        self.group_score = input;
        self
    }
    /// <p>The text in the document that identifies the entity.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>The text in the document that identifies the entity.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The type of the entity. Amazon Comprehend supports a variety of <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities">entity types</a>.</p>
    pub fn r#type(mut self, input: crate::types::TargetedSentimentEntityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the entity. Amazon Comprehend supports a variety of <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities">entity types</a>.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::TargetedSentimentEntityType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Contains the sentiment and sentiment score for the mention.</p>
    pub fn mention_sentiment(mut self, input: crate::types::MentionSentiment) -> Self {
        self.mention_sentiment = Some(input);
        self
    }
    /// <p>Contains the sentiment and sentiment score for the mention.</p>
    pub fn set_mention_sentiment(
        mut self,
        input: std::option::Option<crate::types::MentionSentiment>,
    ) -> Self {
        self.mention_sentiment = input;
        self
    }
    /// <p>The offset into the document text where the mention begins.</p>
    pub fn begin_offset(mut self, input: i32) -> Self {
        self.begin_offset = Some(input);
        self
    }
    /// <p>The offset into the document text where the mention begins.</p>
    pub fn set_begin_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.begin_offset = input;
        self
    }
    /// <p>The offset into the document text where the mention ends.</p>
    pub fn end_offset(mut self, input: i32) -> Self {
        self.end_offset = Some(input);
        self
    }
    /// <p>The offset into the document text where the mention ends.</p>
    pub fn set_end_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.end_offset = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetedSentimentMention`](crate::types::TargetedSentimentMention).
    pub fn build(self) -> crate::types::TargetedSentimentMention {
        crate::types::TargetedSentimentMention {
            score: self.score,
            group_score: self.group_score,
            text: self.text,
            r#type: self.r#type,
            mention_sentiment: self.mention_sentiment,
            begin_offset: self.begin_offset,
            end_offset: self.end_offset,
        }
    }
}
