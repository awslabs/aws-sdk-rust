// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an entity recognizer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EntityRecognizerMetadata {
    /// <p> The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.</p>
    pub number_of_trained_documents: ::std::option::Option<i32>,
    /// <p> The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.</p>
    pub number_of_test_documents: ::std::option::Option<i32>,
    /// <p>Detailed information about the accuracy of an entity recognizer.</p>
    pub evaluation_metrics: ::std::option::Option<crate::types::EntityRecognizerEvaluationMetrics>,
    /// <p>Entity types from the metadata of an entity recognizer.</p>
    pub entity_types: ::std::option::Option<::std::vec::Vec<crate::types::EntityRecognizerMetadataEntityTypesListItem>>,
}
impl EntityRecognizerMetadata {
    /// <p> The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.</p>
    pub fn number_of_trained_documents(&self) -> ::std::option::Option<i32> {
        self.number_of_trained_documents
    }
    /// <p> The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.</p>
    pub fn number_of_test_documents(&self) -> ::std::option::Option<i32> {
        self.number_of_test_documents
    }
    /// <p>Detailed information about the accuracy of an entity recognizer.</p>
    pub fn evaluation_metrics(&self) -> ::std::option::Option<&crate::types::EntityRecognizerEvaluationMetrics> {
        self.evaluation_metrics.as_ref()
    }
    /// <p>Entity types from the metadata of an entity recognizer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entity_types.is_none()`.
    pub fn entity_types(&self) -> &[crate::types::EntityRecognizerMetadataEntityTypesListItem] {
        self.entity_types.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for EntityRecognizerMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EntityRecognizerMetadata");
        formatter.field("number_of_trained_documents", &"*** Sensitive Data Redacted ***");
        formatter.field("number_of_test_documents", &"*** Sensitive Data Redacted ***");
        formatter.field("evaluation_metrics", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_types", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EntityRecognizerMetadata {
    /// Creates a new builder-style object to manufacture [`EntityRecognizerMetadata`](crate::types::EntityRecognizerMetadata).
    pub fn builder() -> crate::types::builders::EntityRecognizerMetadataBuilder {
        crate::types::builders::EntityRecognizerMetadataBuilder::default()
    }
}

/// A builder for [`EntityRecognizerMetadata`](crate::types::EntityRecognizerMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EntityRecognizerMetadataBuilder {
    pub(crate) number_of_trained_documents: ::std::option::Option<i32>,
    pub(crate) number_of_test_documents: ::std::option::Option<i32>,
    pub(crate) evaluation_metrics: ::std::option::Option<crate::types::EntityRecognizerEvaluationMetrics>,
    pub(crate) entity_types: ::std::option::Option<::std::vec::Vec<crate::types::EntityRecognizerMetadataEntityTypesListItem>>,
}
impl EntityRecognizerMetadataBuilder {
    /// <p> The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.</p>
    pub fn number_of_trained_documents(mut self, input: i32) -> Self {
        self.number_of_trained_documents = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.</p>
    pub fn set_number_of_trained_documents(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_trained_documents = input;
        self
    }
    /// <p> The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.</p>
    pub fn get_number_of_trained_documents(&self) -> &::std::option::Option<i32> {
        &self.number_of_trained_documents
    }
    /// <p> The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.</p>
    pub fn number_of_test_documents(mut self, input: i32) -> Self {
        self.number_of_test_documents = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.</p>
    pub fn set_number_of_test_documents(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_test_documents = input;
        self
    }
    /// <p> The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.</p>
    pub fn get_number_of_test_documents(&self) -> &::std::option::Option<i32> {
        &self.number_of_test_documents
    }
    /// <p>Detailed information about the accuracy of an entity recognizer.</p>
    pub fn evaluation_metrics(mut self, input: crate::types::EntityRecognizerEvaluationMetrics) -> Self {
        self.evaluation_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detailed information about the accuracy of an entity recognizer.</p>
    pub fn set_evaluation_metrics(mut self, input: ::std::option::Option<crate::types::EntityRecognizerEvaluationMetrics>) -> Self {
        self.evaluation_metrics = input;
        self
    }
    /// <p>Detailed information about the accuracy of an entity recognizer.</p>
    pub fn get_evaluation_metrics(&self) -> &::std::option::Option<crate::types::EntityRecognizerEvaluationMetrics> {
        &self.evaluation_metrics
    }
    /// Appends an item to `entity_types`.
    ///
    /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
    ///
    /// <p>Entity types from the metadata of an entity recognizer.</p>
    pub fn entity_types(mut self, input: crate::types::EntityRecognizerMetadataEntityTypesListItem) -> Self {
        let mut v = self.entity_types.unwrap_or_default();
        v.push(input);
        self.entity_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Entity types from the metadata of an entity recognizer.</p>
    pub fn set_entity_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::EntityRecognizerMetadataEntityTypesListItem>>,
    ) -> Self {
        self.entity_types = input;
        self
    }
    /// <p>Entity types from the metadata of an entity recognizer.</p>
    pub fn get_entity_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntityRecognizerMetadataEntityTypesListItem>> {
        &self.entity_types
    }
    /// Consumes the builder and constructs a [`EntityRecognizerMetadata`](crate::types::EntityRecognizerMetadata).
    pub fn build(self) -> crate::types::EntityRecognizerMetadata {
        crate::types::EntityRecognizerMetadata {
            number_of_trained_documents: self.number_of_trained_documents,
            number_of_test_documents: self.number_of_test_documents,
            evaluation_metrics: self.evaluation_metrics,
            entity_types: self.entity_types,
        }
    }
}
impl ::std::fmt::Debug for EntityRecognizerMetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EntityRecognizerMetadataBuilder");
        formatter.field("number_of_trained_documents", &"*** Sensitive Data Redacted ***");
        formatter.field("number_of_test_documents", &"*** Sensitive Data Redacted ***");
        formatter.field("evaluation_metrics", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_types", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
