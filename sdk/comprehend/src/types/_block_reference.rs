// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A reference to a block. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlockReference {
    /// <p>Unique identifier for the block.</p>
    pub block_id: ::std::option::Option<::std::string::String>,
    /// <p>Offset of the start of the block within its parent block.</p>
    pub begin_offset: ::std::option::Option<i32>,
    /// <p>Offset of the end of the block within its parent block.</p>
    pub end_offset: ::std::option::Option<i32>,
    /// <p>List of child blocks within this block.</p>
    pub child_blocks: ::std::option::Option<::std::vec::Vec<crate::types::ChildBlock>>,
}
impl BlockReference {
    /// <p>Unique identifier for the block.</p>
    pub fn block_id(&self) -> ::std::option::Option<&str> {
        self.block_id.as_deref()
    }
    /// <p>Offset of the start of the block within its parent block.</p>
    pub fn begin_offset(&self) -> ::std::option::Option<i32> {
        self.begin_offset
    }
    /// <p>Offset of the end of the block within its parent block.</p>
    pub fn end_offset(&self) -> ::std::option::Option<i32> {
        self.end_offset
    }
    /// <p>List of child blocks within this block.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.child_blocks.is_none()`.
    pub fn child_blocks(&self) -> &[crate::types::ChildBlock] {
        self.child_blocks.as_deref().unwrap_or_default()
    }
}
impl BlockReference {
    /// Creates a new builder-style object to manufacture [`BlockReference`](crate::types::BlockReference).
    pub fn builder() -> crate::types::builders::BlockReferenceBuilder {
        crate::types::builders::BlockReferenceBuilder::default()
    }
}

/// A builder for [`BlockReference`](crate::types::BlockReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BlockReferenceBuilder {
    pub(crate) block_id: ::std::option::Option<::std::string::String>,
    pub(crate) begin_offset: ::std::option::Option<i32>,
    pub(crate) end_offset: ::std::option::Option<i32>,
    pub(crate) child_blocks: ::std::option::Option<::std::vec::Vec<crate::types::ChildBlock>>,
}
impl BlockReferenceBuilder {
    /// <p>Unique identifier for the block.</p>
    pub fn block_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.block_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the block.</p>
    pub fn set_block_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.block_id = input;
        self
    }
    /// <p>Unique identifier for the block.</p>
    pub fn get_block_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.block_id
    }
    /// <p>Offset of the start of the block within its parent block.</p>
    pub fn begin_offset(mut self, input: i32) -> Self {
        self.begin_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Offset of the start of the block within its parent block.</p>
    pub fn set_begin_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.begin_offset = input;
        self
    }
    /// <p>Offset of the start of the block within its parent block.</p>
    pub fn get_begin_offset(&self) -> &::std::option::Option<i32> {
        &self.begin_offset
    }
    /// <p>Offset of the end of the block within its parent block.</p>
    pub fn end_offset(mut self, input: i32) -> Self {
        self.end_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Offset of the end of the block within its parent block.</p>
    pub fn set_end_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_offset = input;
        self
    }
    /// <p>Offset of the end of the block within its parent block.</p>
    pub fn get_end_offset(&self) -> &::std::option::Option<i32> {
        &self.end_offset
    }
    /// Appends an item to `child_blocks`.
    ///
    /// To override the contents of this collection use [`set_child_blocks`](Self::set_child_blocks).
    ///
    /// <p>List of child blocks within this block.</p>
    pub fn child_blocks(mut self, input: crate::types::ChildBlock) -> Self {
        let mut v = self.child_blocks.unwrap_or_default();
        v.push(input);
        self.child_blocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of child blocks within this block.</p>
    pub fn set_child_blocks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChildBlock>>) -> Self {
        self.child_blocks = input;
        self
    }
    /// <p>List of child blocks within this block.</p>
    pub fn get_child_blocks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChildBlock>> {
        &self.child_blocks
    }
    /// Consumes the builder and constructs a [`BlockReference`](crate::types::BlockReference).
    pub fn build(self) -> crate::types::BlockReference {
        crate::types::BlockReference {
            block_id: self.block_id,
            begin_offset: self.begin_offset,
            end_offset: self.end_offset,
            child_blocks: self.child_blocks,
        }
    }
}
