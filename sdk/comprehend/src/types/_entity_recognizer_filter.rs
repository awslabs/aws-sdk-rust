// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the operation./&gt;</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityRecognizerFilter {
    /// <p>The status of an entity recognizer.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ModelStatus>,
    /// <p>The name that you assigned the entity recognizer.</p>
    #[doc(hidden)]
    pub recognizer_name: std::option::Option<std::string::String>,
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.</p>
    #[doc(hidden)]
    pub submit_time_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    #[doc(hidden)]
    pub submit_time_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl EntityRecognizerFilter {
    /// <p>The status of an entity recognizer.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>The name that you assigned the entity recognizer.</p>
    pub fn recognizer_name(&self) -> std::option::Option<&str> {
        self.recognizer_name.as_deref()
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn submit_time_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submit_time_before.as_ref()
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn submit_time_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submit_time_after.as_ref()
    }
}
impl EntityRecognizerFilter {
    /// Creates a new builder-style object to manufacture [`EntityRecognizerFilter`](crate::types::EntityRecognizerFilter).
    pub fn builder() -> crate::types::builders::EntityRecognizerFilterBuilder {
        crate::types::builders::EntityRecognizerFilterBuilder::default()
    }
}

/// A builder for [`EntityRecognizerFilter`](crate::types::EntityRecognizerFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityRecognizerFilterBuilder {
    pub(crate) status: std::option::Option<crate::types::ModelStatus>,
    pub(crate) recognizer_name: std::option::Option<std::string::String>,
    pub(crate) submit_time_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) submit_time_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl EntityRecognizerFilterBuilder {
    /// <p>The status of an entity recognizer.</p>
    pub fn status(mut self, input: crate::types::ModelStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of an entity recognizer.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The name that you assigned the entity recognizer.</p>
    pub fn recognizer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.recognizer_name = Some(input.into());
        self
    }
    /// <p>The name that you assigned the entity recognizer.</p>
    pub fn set_recognizer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recognizer_name = input;
        self
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn submit_time_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submit_time_before = Some(input);
        self
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.</p>
    pub fn set_submit_time_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submit_time_before = input;
        self
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn submit_time_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submit_time_after = Some(input);
        self
    }
    /// <p>Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.</p>
    pub fn set_submit_time_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submit_time_after = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityRecognizerFilter`](crate::types::EntityRecognizerFilter).
    pub fn build(self) -> crate::types::EntityRecognizerFilter {
        crate::types::EntityRecognizerFilter {
            status: self.status,
            recognizer_name: self.recognizer_name,
            submit_time_before: self.submit_time_before,
            submit_time_after: self.submit_time_after,
        }
    }
}
