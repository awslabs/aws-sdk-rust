// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDetectSentimentItemResult {
    /// <p>The zero-based index of the document in the input list.</p>
    #[doc(hidden)]
    pub index: std::option::Option<i32>,
    /// <p>The sentiment detected in the document.</p>
    #[doc(hidden)]
    pub sentiment: std::option::Option<crate::types::SentimentType>,
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.</p>
    #[doc(hidden)]
    pub sentiment_score: std::option::Option<crate::types::SentimentScore>,
}
impl BatchDetectSentimentItemResult {
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn index(&self) -> std::option::Option<i32> {
        self.index
    }
    /// <p>The sentiment detected in the document.</p>
    pub fn sentiment(&self) -> std::option::Option<&crate::types::SentimentType> {
        self.sentiment.as_ref()
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.</p>
    pub fn sentiment_score(&self) -> std::option::Option<&crate::types::SentimentScore> {
        self.sentiment_score.as_ref()
    }
}
impl BatchDetectSentimentItemResult {
    /// Creates a new builder-style object to manufacture [`BatchDetectSentimentItemResult`](crate::types::BatchDetectSentimentItemResult).
    pub fn builder() -> crate::types::builders::BatchDetectSentimentItemResultBuilder {
        crate::types::builders::BatchDetectSentimentItemResultBuilder::default()
    }
}

/// A builder for [`BatchDetectSentimentItemResult`](crate::types::BatchDetectSentimentItemResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDetectSentimentItemResultBuilder {
    pub(crate) index: std::option::Option<i32>,
    pub(crate) sentiment: std::option::Option<crate::types::SentimentType>,
    pub(crate) sentiment_score: std::option::Option<crate::types::SentimentScore>,
}
impl BatchDetectSentimentItemResultBuilder {
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The zero-based index of the document in the input list.</p>
    pub fn set_index(mut self, input: std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// <p>The sentiment detected in the document.</p>
    pub fn sentiment(mut self, input: crate::types::SentimentType) -> Self {
        self.sentiment = Some(input);
        self
    }
    /// <p>The sentiment detected in the document.</p>
    pub fn set_sentiment(
        mut self,
        input: std::option::Option<crate::types::SentimentType>,
    ) -> Self {
        self.sentiment = input;
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.</p>
    pub fn sentiment_score(mut self, input: crate::types::SentimentScore) -> Self {
        self.sentiment_score = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.</p>
    pub fn set_sentiment_score(
        mut self,
        input: std::option::Option<crate::types::SentimentScore>,
    ) -> Self {
        self.sentiment_score = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDetectSentimentItemResult`](crate::types::BatchDetectSentimentItemResult).
    pub fn build(self) -> crate::types::BatchDetectSentimentItemResult {
        crate::types::BatchDetectSentimentItemResult {
            index: self.index,
            sentiment: self.sentiment,
            sentiment_score: self.sentiment_score,
        }
    }
}
