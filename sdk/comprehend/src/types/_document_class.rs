// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the class that categorizes the document being analyzed</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentClass {
    /// <p>The name of the class.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>
    #[doc(hidden)]
    pub score: std::option::Option<f32>,
    /// <p>Page number in the input document. This field is present in the response only if your request includes the <code>Byte</code> parameter. </p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
}
impl DocumentClass {
    /// <p>The name of the class.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>
    pub fn score(&self) -> std::option::Option<f32> {
        self.score
    }
    /// <p>Page number in the input document. This field is present in the response only if your request includes the <code>Byte</code> parameter. </p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
}
impl DocumentClass {
    /// Creates a new builder-style object to manufacture [`DocumentClass`](crate::types::DocumentClass).
    pub fn builder() -> crate::types::builders::DocumentClassBuilder {
        crate::types::builders::DocumentClassBuilder::default()
    }
}

/// A builder for [`DocumentClass`](crate::types::DocumentClass).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentClassBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) score: std::option::Option<f32>,
    pub(crate) page: std::option::Option<i32>,
}
impl DocumentClassBuilder {
    /// <p>The name of the class.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the class.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>
    pub fn score(mut self, input: f32) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>
    pub fn set_score(mut self, input: std::option::Option<f32>) -> Self {
        self.score = input;
        self
    }
    /// <p>Page number in the input document. This field is present in the response only if your request includes the <code>Byte</code> parameter. </p>
    pub fn page(mut self, input: i32) -> Self {
        self.page = Some(input);
        self
    }
    /// <p>Page number in the input document. This field is present in the response only if your request includes the <code>Byte</code> parameter. </p>
    pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
        self.page = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentClass`](crate::types::DocumentClass).
    pub fn build(self) -> crate::types::DocumentClass {
        crate::types::DocumentClass {
            name: self.name,
            score: self.score,
            page: self.page,
        }
    }
}
