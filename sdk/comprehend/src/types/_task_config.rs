// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration about the custom classifier associated with the flywheel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaskConfig {
    /// <p>Language code for the language that the model supports.</p>
    pub language_code: crate::types::LanguageCode,
    /// <p>Configuration required for a classification model.</p>
    pub document_classification_config: ::std::option::Option<crate::types::DocumentClassificationConfig>,
    /// <p>Configuration required for an entity recognition model.</p>
    pub entity_recognition_config: ::std::option::Option<crate::types::EntityRecognitionConfig>,
}
impl TaskConfig {
    /// <p>Language code for the language that the model supports.</p>
    pub fn language_code(&self) -> &crate::types::LanguageCode {
        &self.language_code
    }
    /// <p>Configuration required for a classification model.</p>
    pub fn document_classification_config(&self) -> ::std::option::Option<&crate::types::DocumentClassificationConfig> {
        self.document_classification_config.as_ref()
    }
    /// <p>Configuration required for an entity recognition model.</p>
    pub fn entity_recognition_config(&self) -> ::std::option::Option<&crate::types::EntityRecognitionConfig> {
        self.entity_recognition_config.as_ref()
    }
}
impl TaskConfig {
    /// Creates a new builder-style object to manufacture [`TaskConfig`](crate::types::TaskConfig).
    pub fn builder() -> crate::types::builders::TaskConfigBuilder {
        crate::types::builders::TaskConfigBuilder::default()
    }
}

/// A builder for [`TaskConfig`](crate::types::TaskConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TaskConfigBuilder {
    pub(crate) language_code: ::std::option::Option<crate::types::LanguageCode>,
    pub(crate) document_classification_config: ::std::option::Option<crate::types::DocumentClassificationConfig>,
    pub(crate) entity_recognition_config: ::std::option::Option<crate::types::EntityRecognitionConfig>,
}
impl TaskConfigBuilder {
    /// <p>Language code for the language that the model supports.</p>
    /// This field is required.
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Language code for the language that the model supports.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::LanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>Language code for the language that the model supports.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::LanguageCode> {
        &self.language_code
    }
    /// <p>Configuration required for a classification model.</p>
    pub fn document_classification_config(mut self, input: crate::types::DocumentClassificationConfig) -> Self {
        self.document_classification_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration required for a classification model.</p>
    pub fn set_document_classification_config(mut self, input: ::std::option::Option<crate::types::DocumentClassificationConfig>) -> Self {
        self.document_classification_config = input;
        self
    }
    /// <p>Configuration required for a classification model.</p>
    pub fn get_document_classification_config(&self) -> &::std::option::Option<crate::types::DocumentClassificationConfig> {
        &self.document_classification_config
    }
    /// <p>Configuration required for an entity recognition model.</p>
    pub fn entity_recognition_config(mut self, input: crate::types::EntityRecognitionConfig) -> Self {
        self.entity_recognition_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration required for an entity recognition model.</p>
    pub fn set_entity_recognition_config(mut self, input: ::std::option::Option<crate::types::EntityRecognitionConfig>) -> Self {
        self.entity_recognition_config = input;
        self
    }
    /// <p>Configuration required for an entity recognition model.</p>
    pub fn get_entity_recognition_config(&self) -> &::std::option::Option<crate::types::EntityRecognitionConfig> {
        &self.entity_recognition_config
    }
    /// Consumes the builder and constructs a [`TaskConfig`](crate::types::TaskConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`language_code`](crate::types::builders::TaskConfigBuilder::language_code)
    pub fn build(self) -> ::std::result::Result<crate::types::TaskConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaskConfig {
            language_code: self.language_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "language_code",
                    "language_code was not specified but it is required when building TaskConfig",
                )
            })?,
            document_classification_config: self.document_classification_config,
            entity_recognition_config: self.entity_recognition_config,
        })
    }
}
