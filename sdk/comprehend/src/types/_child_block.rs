// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Nested block contained within a block.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChildBlock {
    /// <p>Unique identifier for the child block.</p>
    #[doc(hidden)]
    pub child_block_id: std::option::Option<std::string::String>,
    /// <p>Offset of the start of the child block within its parent block.</p>
    #[doc(hidden)]
    pub begin_offset: std::option::Option<i32>,
    /// <p>Offset of the end of the child block within its parent block.</p>
    #[doc(hidden)]
    pub end_offset: std::option::Option<i32>,
}
impl ChildBlock {
    /// <p>Unique identifier for the child block.</p>
    pub fn child_block_id(&self) -> std::option::Option<&str> {
        self.child_block_id.as_deref()
    }
    /// <p>Offset of the start of the child block within its parent block.</p>
    pub fn begin_offset(&self) -> std::option::Option<i32> {
        self.begin_offset
    }
    /// <p>Offset of the end of the child block within its parent block.</p>
    pub fn end_offset(&self) -> std::option::Option<i32> {
        self.end_offset
    }
}
impl ChildBlock {
    /// Creates a new builder-style object to manufacture [`ChildBlock`](crate::types::ChildBlock).
    pub fn builder() -> crate::types::builders::ChildBlockBuilder {
        crate::types::builders::ChildBlockBuilder::default()
    }
}

/// A builder for [`ChildBlock`](crate::types::ChildBlock).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChildBlockBuilder {
    pub(crate) child_block_id: std::option::Option<std::string::String>,
    pub(crate) begin_offset: std::option::Option<i32>,
    pub(crate) end_offset: std::option::Option<i32>,
}
impl ChildBlockBuilder {
    /// <p>Unique identifier for the child block.</p>
    pub fn child_block_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.child_block_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for the child block.</p>
    pub fn set_child_block_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.child_block_id = input;
        self
    }
    /// <p>Offset of the start of the child block within its parent block.</p>
    pub fn begin_offset(mut self, input: i32) -> Self {
        self.begin_offset = Some(input);
        self
    }
    /// <p>Offset of the start of the child block within its parent block.</p>
    pub fn set_begin_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.begin_offset = input;
        self
    }
    /// <p>Offset of the end of the child block within its parent block.</p>
    pub fn end_offset(mut self, input: i32) -> Self {
        self.end_offset = Some(input);
        self
    }
    /// <p>Offset of the end of the child block within its parent block.</p>
    pub fn set_end_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.end_offset = input;
        self
    }
    /// Consumes the builder and constructs a [`ChildBlock`](crate::types::ChildBlock).
    pub fn build(self) -> crate::types::ChildBlock {
        crate::types::ChildBlock {
            child_block_id: self.child_block_id,
            begin_offset: self.begin_offset,
            end_offset: self.end_offset,
        }
    }
}
