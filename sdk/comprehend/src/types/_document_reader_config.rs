// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. </p>
/// <p> By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type: </p>
/// <ul>
/// <li> <p> <b>Word files</b> - Amazon Comprehend parser extracts the text. </p> </li>
/// <li> <p> <b>Digital PDF files</b> - Amazon Comprehend parser extracts the text. </p> </li>
/// <li> <p> <b>Image files and scanned PDF files</b> - Amazon Comprehend uses the Amazon Textract <code>DetectDocumentText</code> API to extract the text. </p> </li>
/// </ul>
/// <p> <code>DocumentReaderConfig</code> does not apply to plain text files or Word files.</p>
/// <p> For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/detecting-cer.html#detecting-cer-pdf"> Setting text extraction options</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentReaderConfig {
    /// <p>This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The Amazon Comprehend service uses the <code>DetectDocumentText</code> API operation. </p> </li>
    /// <li> <p> <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The Amazon Comprehend service uses the <code>AnalyzeDocument</code> API operation. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub document_read_action: std::option::Option<crate::types::DocumentReadAction>,
    /// <p>Determines the text extraction actions for PDF files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SERVICE_DEFAULT</code> - use the Amazon Comprehend service defaults for PDF files.</p> </li>
    /// <li> <p> <code>FORCE_DOCUMENT_READ_ACTION</code> - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub document_read_mode: std::option::Option<crate::types::DocumentReadMode>,
    /// <p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TABLES</code> - Returns information about any tables that are detected in the input document. </p> </li>
    /// <li> <p> <code>FORMS</code> - Returns information and the data from any forms that are detected in the input document. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub feature_types: std::option::Option<std::vec::Vec<crate::types::DocumentReadFeatureTypes>>,
}
impl DocumentReaderConfig {
    /// <p>This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The Amazon Comprehend service uses the <code>DetectDocumentText</code> API operation. </p> </li>
    /// <li> <p> <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The Amazon Comprehend service uses the <code>AnalyzeDocument</code> API operation. </p> </li>
    /// </ul>
    pub fn document_read_action(&self) -> std::option::Option<&crate::types::DocumentReadAction> {
        self.document_read_action.as_ref()
    }
    /// <p>Determines the text extraction actions for PDF files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SERVICE_DEFAULT</code> - use the Amazon Comprehend service defaults for PDF files.</p> </li>
    /// <li> <p> <code>FORCE_DOCUMENT_READ_ACTION</code> - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files. </p> </li>
    /// </ul>
    pub fn document_read_mode(&self) -> std::option::Option<&crate::types::DocumentReadMode> {
        self.document_read_mode.as_ref()
    }
    /// <p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TABLES</code> - Returns information about any tables that are detected in the input document. </p> </li>
    /// <li> <p> <code>FORMS</code> - Returns information and the data from any forms that are detected in the input document. </p> </li>
    /// </ul>
    pub fn feature_types(&self) -> std::option::Option<&[crate::types::DocumentReadFeatureTypes]> {
        self.feature_types.as_deref()
    }
}
impl DocumentReaderConfig {
    /// Creates a new builder-style object to manufacture [`DocumentReaderConfig`](crate::types::DocumentReaderConfig).
    pub fn builder() -> crate::types::builders::DocumentReaderConfigBuilder {
        crate::types::builders::DocumentReaderConfigBuilder::default()
    }
}

/// A builder for [`DocumentReaderConfig`](crate::types::DocumentReaderConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentReaderConfigBuilder {
    pub(crate) document_read_action: std::option::Option<crate::types::DocumentReadAction>,
    pub(crate) document_read_mode: std::option::Option<crate::types::DocumentReadMode>,
    pub(crate) feature_types:
        std::option::Option<std::vec::Vec<crate::types::DocumentReadFeatureTypes>>,
}
impl DocumentReaderConfigBuilder {
    /// <p>This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The Amazon Comprehend service uses the <code>DetectDocumentText</code> API operation. </p> </li>
    /// <li> <p> <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The Amazon Comprehend service uses the <code>AnalyzeDocument</code> API operation. </p> </li>
    /// </ul>
    pub fn document_read_action(mut self, input: crate::types::DocumentReadAction) -> Self {
        self.document_read_action = Some(input);
        self
    }
    /// <p>This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The Amazon Comprehend service uses the <code>DetectDocumentText</code> API operation. </p> </li>
    /// <li> <p> <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The Amazon Comprehend service uses the <code>AnalyzeDocument</code> API operation. </p> </li>
    /// </ul>
    pub fn set_document_read_action(
        mut self,
        input: std::option::Option<crate::types::DocumentReadAction>,
    ) -> Self {
        self.document_read_action = input;
        self
    }
    /// <p>Determines the text extraction actions for PDF files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SERVICE_DEFAULT</code> - use the Amazon Comprehend service defaults for PDF files.</p> </li>
    /// <li> <p> <code>FORCE_DOCUMENT_READ_ACTION</code> - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files. </p> </li>
    /// </ul>
    pub fn document_read_mode(mut self, input: crate::types::DocumentReadMode) -> Self {
        self.document_read_mode = Some(input);
        self
    }
    /// <p>Determines the text extraction actions for PDF files. Enter one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SERVICE_DEFAULT</code> - use the Amazon Comprehend service defaults for PDF files.</p> </li>
    /// <li> <p> <code>FORCE_DOCUMENT_READ_ACTION</code> - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files. </p> </li>
    /// </ul>
    pub fn set_document_read_mode(
        mut self,
        input: std::option::Option<crate::types::DocumentReadMode>,
    ) -> Self {
        self.document_read_mode = input;
        self
    }
    /// Appends an item to `feature_types`.
    ///
    /// To override the contents of this collection use [`set_feature_types`](Self::set_feature_types).
    ///
    /// <p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TABLES</code> - Returns information about any tables that are detected in the input document. </p> </li>
    /// <li> <p> <code>FORMS</code> - Returns information and the data from any forms that are detected in the input document. </p> </li>
    /// </ul>
    pub fn feature_types(mut self, input: crate::types::DocumentReadFeatureTypes) -> Self {
        let mut v = self.feature_types.unwrap_or_default();
        v.push(input);
        self.feature_types = Some(v);
        self
    }
    /// <p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p>
    /// <ul>
    /// <li> <p> <code>TABLES</code> - Returns information about any tables that are detected in the input document. </p> </li>
    /// <li> <p> <code>FORMS</code> - Returns information and the data from any forms that are detected in the input document. </p> </li>
    /// </ul>
    pub fn set_feature_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentReadFeatureTypes>>,
    ) -> Self {
        self.feature_types = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentReaderConfig`](crate::types::DocumentReaderConfig).
    pub fn build(self) -> crate::types::DocumentReaderConfig {
        crate::types::DocumentReaderConfig {
            document_read_action: self.document_read_action,
            document_read_mode: self.document_read_mode,
            feature_types: self.feature_types,
        }
    }
}
