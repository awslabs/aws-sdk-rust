// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of child blocks for the current block.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelationshipsListItem {
    /// <p>Identifers of the child blocks.</p>
    pub ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Only supported relationship is a child relationship.</p>
    pub r#type: ::std::option::Option<crate::types::RelationshipType>,
}
impl RelationshipsListItem {
    /// <p>Identifers of the child blocks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ids.is_none()`.
    pub fn ids(&self) -> &[::std::string::String] {
        self.ids.as_deref().unwrap_or_default()
    }
    /// <p>Only supported relationship is a child relationship.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RelationshipType> {
        self.r#type.as_ref()
    }
}
impl RelationshipsListItem {
    /// Creates a new builder-style object to manufacture [`RelationshipsListItem`](crate::types::RelationshipsListItem).
    pub fn builder() -> crate::types::builders::RelationshipsListItemBuilder {
        crate::types::builders::RelationshipsListItemBuilder::default()
    }
}

/// A builder for [`RelationshipsListItem`](crate::types::RelationshipsListItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RelationshipsListItemBuilder {
    pub(crate) ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::RelationshipType>,
}
impl RelationshipsListItemBuilder {
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>Identifers of the child blocks.</p>
    pub fn ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ids.unwrap_or_default();
        v.push(input.into());
        self.ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifers of the child blocks.</p>
    pub fn set_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ids = input;
        self
    }
    /// <p>Identifers of the child blocks.</p>
    pub fn get_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ids
    }
    /// <p>Only supported relationship is a child relationship.</p>
    pub fn r#type(mut self, input: crate::types::RelationshipType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only supported relationship is a child relationship.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RelationshipType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Only supported relationship is a child relationship.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RelationshipType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RelationshipsListItem`](crate::types::RelationshipsListItem).
    pub fn build(self) -> crate::types::RelationshipsListItem {
        crate::types::RelationshipsListItem {
            ids: self.ids,
            r#type: self.r#type,
        }
    }
}
