// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SyntaxToken {
    /// <p>A unique identifier for a token.</p>
    #[doc(hidden)]
    pub token_id: std::option::Option<i32>,
    /// <p>The word that was recognized in the source text.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The zero-based offset from the beginning of the source text to the first character in the word.</p>
    #[doc(hidden)]
    pub begin_offset: std::option::Option<i32>,
    /// <p>The zero-based offset from the beginning of the source text to the last character in the word.</p>
    #[doc(hidden)]
    pub end_offset: std::option::Option<i32>,
    /// <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide. </p>
    #[doc(hidden)]
    pub part_of_speech: std::option::Option<crate::types::PartOfSpeechTag>,
}
impl SyntaxToken {
    /// <p>A unique identifier for a token.</p>
    pub fn token_id(&self) -> std::option::Option<i32> {
        self.token_id
    }
    /// <p>The word that was recognized in the source text.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The zero-based offset from the beginning of the source text to the first character in the word.</p>
    pub fn begin_offset(&self) -> std::option::Option<i32> {
        self.begin_offset
    }
    /// <p>The zero-based offset from the beginning of the source text to the last character in the word.</p>
    pub fn end_offset(&self) -> std::option::Option<i32> {
        self.end_offset
    }
    /// <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide. </p>
    pub fn part_of_speech(&self) -> std::option::Option<&crate::types::PartOfSpeechTag> {
        self.part_of_speech.as_ref()
    }
}
impl SyntaxToken {
    /// Creates a new builder-style object to manufacture [`SyntaxToken`](crate::types::SyntaxToken).
    pub fn builder() -> crate::types::builders::SyntaxTokenBuilder {
        crate::types::builders::SyntaxTokenBuilder::default()
    }
}

/// A builder for [`SyntaxToken`](crate::types::SyntaxToken).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SyntaxTokenBuilder {
    pub(crate) token_id: std::option::Option<i32>,
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) begin_offset: std::option::Option<i32>,
    pub(crate) end_offset: std::option::Option<i32>,
    pub(crate) part_of_speech: std::option::Option<crate::types::PartOfSpeechTag>,
}
impl SyntaxTokenBuilder {
    /// <p>A unique identifier for a token.</p>
    pub fn token_id(mut self, input: i32) -> Self {
        self.token_id = Some(input);
        self
    }
    /// <p>A unique identifier for a token.</p>
    pub fn set_token_id(mut self, input: std::option::Option<i32>) -> Self {
        self.token_id = input;
        self
    }
    /// <p>The word that was recognized in the source text.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>The word that was recognized in the source text.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The zero-based offset from the beginning of the source text to the first character in the word.</p>
    pub fn begin_offset(mut self, input: i32) -> Self {
        self.begin_offset = Some(input);
        self
    }
    /// <p>The zero-based offset from the beginning of the source text to the first character in the word.</p>
    pub fn set_begin_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.begin_offset = input;
        self
    }
    /// <p>The zero-based offset from the beginning of the source text to the last character in the word.</p>
    pub fn end_offset(mut self, input: i32) -> Self {
        self.end_offset = Some(input);
        self
    }
    /// <p>The zero-based offset from the beginning of the source text to the last character in the word.</p>
    pub fn set_end_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.end_offset = input;
        self
    }
    /// <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide. </p>
    pub fn part_of_speech(mut self, input: crate::types::PartOfSpeechTag) -> Self {
        self.part_of_speech = Some(input);
        self
    }
    /// <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide. </p>
    pub fn set_part_of_speech(
        mut self,
        input: std::option::Option<crate::types::PartOfSpeechTag>,
    ) -> Self {
        self.part_of_speech = input;
        self
    }
    /// Consumes the builder and constructs a [`SyntaxToken`](crate::types::SyntaxToken).
    pub fn build(self) -> crate::types::SyntaxToken {
        crate::types::SyntaxToken {
            token_id: self.token_id,
            text: self.text,
            begin_offset: self.begin_offset,
            end_offset: self.end_offset,
            part_of_speech: self.part_of_speech,
        }
    }
}
