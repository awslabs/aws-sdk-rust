// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Text extraction encountered one or more page-level errors in the input document.</p>
/// <p>The <code>ErrorCode</code> contains one of the following values:</p>
/// <ul>
/// <li> <p>TEXTRACT_BAD_PAGE - Amazon Textract cannot read the page. For more information about page limits in Amazon Textract, see <a href="https://docs.aws.amazon.com/textract/latest/dg/limits-document.html"> Page Quotas in Amazon Textract</a>.</p> </li>
/// <li> <p>TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED - The number of requests exceeded your throughput limit. For more information about throughput quotas in Amazon Textract, see <a href="https://docs.aws.amazon.com/textract/latest/dg/limits-quotas-explained.html"> Default quotas in Amazon Textract</a>.</p> </li>
/// <li> <p>PAGE_CHARACTERS_EXCEEDED - Too many text characters on the page (10,000 characters maximum).</p> </li>
/// <li> <p>PAGE_SIZE_EXCEEDED - The maximum page size is 10 MB.</p> </li>
/// <li> <p>INTERNAL_SERVER_ERROR - The request encountered a service issue. Try the API request again.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorsListItem {
    /// <p>Page number where the error occurred.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
    /// <p>Error code for the cause of the error.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::PageBasedErrorCode>,
    /// <p>Text message explaining the reason for the error.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl ErrorsListItem {
    /// <p>Page number where the error occurred.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
    /// <p>Error code for the cause of the error.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::PageBasedErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>Text message explaining the reason for the error.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ErrorsListItem {
    /// Creates a new builder-style object to manufacture [`ErrorsListItem`](crate::types::ErrorsListItem).
    pub fn builder() -> crate::types::builders::ErrorsListItemBuilder {
        crate::types::builders::ErrorsListItemBuilder::default()
    }
}

/// A builder for [`ErrorsListItem`](crate::types::ErrorsListItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorsListItemBuilder {
    pub(crate) page: std::option::Option<i32>,
    pub(crate) error_code: std::option::Option<crate::types::PageBasedErrorCode>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl ErrorsListItemBuilder {
    /// <p>Page number where the error occurred.</p>
    pub fn page(mut self, input: i32) -> Self {
        self.page = Some(input);
        self
    }
    /// <p>Page number where the error occurred.</p>
    pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
        self.page = input;
        self
    }
    /// <p>Error code for the cause of the error.</p>
    pub fn error_code(mut self, input: crate::types::PageBasedErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>Error code for the cause of the error.</p>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::PageBasedErrorCode>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Text message explaining the reason for the error.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>Text message explaining the reason for the error.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorsListItem`](crate::types::ErrorsListItem).
    pub fn build(self) -> crate::types::ErrorsListItem {
        crate::types::ErrorsListItem {
            page: self.page,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
