// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the format and location of the input data. You must provide either the <code>Annotations</code> parameter or the <code>EntityList</code> parameter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetEntityRecognizerInputDataConfig {
    /// <p>The S3 location of the annotation documents for your custom entity recognizer.</p>
    pub annotations: ::std::option::Option<crate::types::DatasetEntityRecognizerAnnotations>,
    /// <p>The format and location of the training documents for your custom entity recognizer.</p>
    pub documents: ::std::option::Option<crate::types::DatasetEntityRecognizerDocuments>,
    /// <p>The S3 location of the entity list for your custom entity recognizer.</p>
    pub entity_list: ::std::option::Option<crate::types::DatasetEntityRecognizerEntityList>,
}
impl DatasetEntityRecognizerInputDataConfig {
    /// <p>The S3 location of the annotation documents for your custom entity recognizer.</p>
    pub fn annotations(&self) -> ::std::option::Option<&crate::types::DatasetEntityRecognizerAnnotations> {
        self.annotations.as_ref()
    }
    /// <p>The format and location of the training documents for your custom entity recognizer.</p>
    pub fn documents(&self) -> ::std::option::Option<&crate::types::DatasetEntityRecognizerDocuments> {
        self.documents.as_ref()
    }
    /// <p>The S3 location of the entity list for your custom entity recognizer.</p>
    pub fn entity_list(&self) -> ::std::option::Option<&crate::types::DatasetEntityRecognizerEntityList> {
        self.entity_list.as_ref()
    }
}
impl DatasetEntityRecognizerInputDataConfig {
    /// Creates a new builder-style object to manufacture [`DatasetEntityRecognizerInputDataConfig`](crate::types::DatasetEntityRecognizerInputDataConfig).
    pub fn builder() -> crate::types::builders::DatasetEntityRecognizerInputDataConfigBuilder {
        crate::types::builders::DatasetEntityRecognizerInputDataConfigBuilder::default()
    }
}

/// A builder for [`DatasetEntityRecognizerInputDataConfig`](crate::types::DatasetEntityRecognizerInputDataConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetEntityRecognizerInputDataConfigBuilder {
    pub(crate) annotations: ::std::option::Option<crate::types::DatasetEntityRecognizerAnnotations>,
    pub(crate) documents: ::std::option::Option<crate::types::DatasetEntityRecognizerDocuments>,
    pub(crate) entity_list: ::std::option::Option<crate::types::DatasetEntityRecognizerEntityList>,
}
impl DatasetEntityRecognizerInputDataConfigBuilder {
    /// <p>The S3 location of the annotation documents for your custom entity recognizer.</p>
    pub fn annotations(mut self, input: crate::types::DatasetEntityRecognizerAnnotations) -> Self {
        self.annotations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 location of the annotation documents for your custom entity recognizer.</p>
    pub fn set_annotations(mut self, input: ::std::option::Option<crate::types::DatasetEntityRecognizerAnnotations>) -> Self {
        self.annotations = input;
        self
    }
    /// <p>The S3 location of the annotation documents for your custom entity recognizer.</p>
    pub fn get_annotations(&self) -> &::std::option::Option<crate::types::DatasetEntityRecognizerAnnotations> {
        &self.annotations
    }
    /// <p>The format and location of the training documents for your custom entity recognizer.</p>
    /// This field is required.
    pub fn documents(mut self, input: crate::types::DatasetEntityRecognizerDocuments) -> Self {
        self.documents = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format and location of the training documents for your custom entity recognizer.</p>
    pub fn set_documents(mut self, input: ::std::option::Option<crate::types::DatasetEntityRecognizerDocuments>) -> Self {
        self.documents = input;
        self
    }
    /// <p>The format and location of the training documents for your custom entity recognizer.</p>
    pub fn get_documents(&self) -> &::std::option::Option<crate::types::DatasetEntityRecognizerDocuments> {
        &self.documents
    }
    /// <p>The S3 location of the entity list for your custom entity recognizer.</p>
    pub fn entity_list(mut self, input: crate::types::DatasetEntityRecognizerEntityList) -> Self {
        self.entity_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 location of the entity list for your custom entity recognizer.</p>
    pub fn set_entity_list(mut self, input: ::std::option::Option<crate::types::DatasetEntityRecognizerEntityList>) -> Self {
        self.entity_list = input;
        self
    }
    /// <p>The S3 location of the entity list for your custom entity recognizer.</p>
    pub fn get_entity_list(&self) -> &::std::option::Option<crate::types::DatasetEntityRecognizerEntityList> {
        &self.entity_list
    }
    /// Consumes the builder and constructs a [`DatasetEntityRecognizerInputDataConfig`](crate::types::DatasetEntityRecognizerInputDataConfig).
    pub fn build(self) -> crate::types::DatasetEntityRecognizerInputDataConfig {
        crate::types::DatasetEntityRecognizerInputDataConfig {
            annotations: self.annotations,
            documents: self.documents,
            entity_list: self.entity_list,
        }
    }
}
