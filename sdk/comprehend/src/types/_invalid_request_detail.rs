// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides additional detail about why the request failed:</p>
/// <ul>
/// <li> <p>Document size is too large - Check the size of your file and resubmit the request.</p> </li>
/// <li> <p>Document type is not supported - Check the file type and resubmit the request.</p> </li>
/// <li> <p>Too many pages in the document - Check the number of pages in your file and resubmit the request.</p> </li>
/// <li> <p>Access denied to Amazon Textract - Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InvalidRequestDetail {
    /// <p>Reason code is <code>INVALID_DOCUMENT</code>.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::InvalidRequestDetailReason>,
}
impl InvalidRequestDetail {
    /// <p>Reason code is <code>INVALID_DOCUMENT</code>.</p>
    pub fn reason(&self) -> std::option::Option<&crate::types::InvalidRequestDetailReason> {
        self.reason.as_ref()
    }
}
impl InvalidRequestDetail {
    /// Creates a new builder-style object to manufacture [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
    pub fn builder() -> crate::types::builders::InvalidRequestDetailBuilder {
        crate::types::builders::InvalidRequestDetailBuilder::default()
    }
}

/// A builder for [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InvalidRequestDetailBuilder {
    pub(crate) reason: std::option::Option<crate::types::InvalidRequestDetailReason>,
}
impl InvalidRequestDetailBuilder {
    /// <p>Reason code is <code>INVALID_DOCUMENT</code>.</p>
    pub fn reason(mut self, input: crate::types::InvalidRequestDetailReason) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>Reason code is <code>INVALID_DOCUMENT</code>.</p>
    pub fn set_reason(
        mut self,
        input: std::option::Option<crate::types::InvalidRequestDetailReason>,
    ) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
    pub fn build(self) -> crate::types::InvalidRequestDetail {
        crate::types::InvalidRequestDetail {
            reason: self.reason,
        }
    }
}
