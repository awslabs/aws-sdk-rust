// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the format and location of the input data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityRecognizerInputDataConfig {
    /// <p>The format of your training data:</p>
    /// <ul>
    /// <li> <p> <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list.</p> <p>If you use this value, you must provide your CSV file by using either the <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your training documents by using the <code>Documents</code> parameter.</p> </li>
    /// <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li>
    /// </ul>
    /// <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>
    #[doc(hidden)]
    pub data_format: std::option::Option<crate::types::EntityRecognizerDataFormat>,
    /// <p>The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored.</p>
    /// <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma). </p>
    #[doc(hidden)]
    pub entity_types: std::option::Option<std::vec::Vec<crate::types::EntityTypesListItem>>,
    /// <p>The S3 location of the folder that contains the training documents for your custom entity recognizer.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>
    #[doc(hidden)]
    pub documents: std::option::Option<crate::types::EntityRecognizerDocuments>,
    /// <p>The S3 location of the CSV file that annotates your training documents.</p>
    #[doc(hidden)]
    pub annotations: std::option::Option<crate::types::EntityRecognizerAnnotations>,
    /// <p>The S3 location of the CSV file that has the entity list for your custom entity recognizer.</p>
    #[doc(hidden)]
    pub entity_list: std::option::Option<crate::types::EntityRecognizerEntityList>,
    /// <p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>
    #[doc(hidden)]
    pub augmented_manifests:
        std::option::Option<std::vec::Vec<crate::types::AugmentedManifestsListItem>>,
}
impl EntityRecognizerInputDataConfig {
    /// <p>The format of your training data:</p>
    /// <ul>
    /// <li> <p> <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list.</p> <p>If you use this value, you must provide your CSV file by using either the <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your training documents by using the <code>Documents</code> parameter.</p> </li>
    /// <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li>
    /// </ul>
    /// <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>
    pub fn data_format(&self) -> std::option::Option<&crate::types::EntityRecognizerDataFormat> {
        self.data_format.as_ref()
    }
    /// <p>The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored.</p>
    /// <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma). </p>
    pub fn entity_types(&self) -> std::option::Option<&[crate::types::EntityTypesListItem]> {
        self.entity_types.as_deref()
    }
    /// <p>The S3 location of the folder that contains the training documents for your custom entity recognizer.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>
    pub fn documents(&self) -> std::option::Option<&crate::types::EntityRecognizerDocuments> {
        self.documents.as_ref()
    }
    /// <p>The S3 location of the CSV file that annotates your training documents.</p>
    pub fn annotations(&self) -> std::option::Option<&crate::types::EntityRecognizerAnnotations> {
        self.annotations.as_ref()
    }
    /// <p>The S3 location of the CSV file that has the entity list for your custom entity recognizer.</p>
    pub fn entity_list(&self) -> std::option::Option<&crate::types::EntityRecognizerEntityList> {
        self.entity_list.as_ref()
    }
    /// <p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>
    pub fn augmented_manifests(
        &self,
    ) -> std::option::Option<&[crate::types::AugmentedManifestsListItem]> {
        self.augmented_manifests.as_deref()
    }
}
impl EntityRecognizerInputDataConfig {
    /// Creates a new builder-style object to manufacture [`EntityRecognizerInputDataConfig`](crate::types::EntityRecognizerInputDataConfig).
    pub fn builder() -> crate::types::builders::EntityRecognizerInputDataConfigBuilder {
        crate::types::builders::EntityRecognizerInputDataConfigBuilder::default()
    }
}

/// A builder for [`EntityRecognizerInputDataConfig`](crate::types::EntityRecognizerInputDataConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityRecognizerInputDataConfigBuilder {
    pub(crate) data_format: std::option::Option<crate::types::EntityRecognizerDataFormat>,
    pub(crate) entity_types: std::option::Option<std::vec::Vec<crate::types::EntityTypesListItem>>,
    pub(crate) documents: std::option::Option<crate::types::EntityRecognizerDocuments>,
    pub(crate) annotations: std::option::Option<crate::types::EntityRecognizerAnnotations>,
    pub(crate) entity_list: std::option::Option<crate::types::EntityRecognizerEntityList>,
    pub(crate) augmented_manifests:
        std::option::Option<std::vec::Vec<crate::types::AugmentedManifestsListItem>>,
}
impl EntityRecognizerInputDataConfigBuilder {
    /// <p>The format of your training data:</p>
    /// <ul>
    /// <li> <p> <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list.</p> <p>If you use this value, you must provide your CSV file by using either the <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your training documents by using the <code>Documents</code> parameter.</p> </li>
    /// <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li>
    /// </ul>
    /// <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>
    pub fn data_format(mut self, input: crate::types::EntityRecognizerDataFormat) -> Self {
        self.data_format = Some(input);
        self
    }
    /// <p>The format of your training data:</p>
    /// <ul>
    /// <li> <p> <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list.</p> <p>If you use this value, you must provide your CSV file by using either the <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your training documents by using the <code>Documents</code> parameter.</p> </li>
    /// <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li>
    /// </ul>
    /// <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>
    pub fn set_data_format(
        mut self,
        input: std::option::Option<crate::types::EntityRecognizerDataFormat>,
    ) -> Self {
        self.data_format = input;
        self
    }
    /// Appends an item to `entity_types`.
    ///
    /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
    ///
    /// <p>The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored.</p>
    /// <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma). </p>
    pub fn entity_types(mut self, input: crate::types::EntityTypesListItem) -> Self {
        let mut v = self.entity_types.unwrap_or_default();
        v.push(input);
        self.entity_types = Some(v);
        self
    }
    /// <p>The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored.</p>
    /// <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma). </p>
    pub fn set_entity_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntityTypesListItem>>,
    ) -> Self {
        self.entity_types = input;
        self
    }
    /// <p>The S3 location of the folder that contains the training documents for your custom entity recognizer.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>
    pub fn documents(mut self, input: crate::types::EntityRecognizerDocuments) -> Self {
        self.documents = Some(input);
        self
    }
    /// <p>The S3 location of the folder that contains the training documents for your custom entity recognizer.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>
    pub fn set_documents(
        mut self,
        input: std::option::Option<crate::types::EntityRecognizerDocuments>,
    ) -> Self {
        self.documents = input;
        self
    }
    /// <p>The S3 location of the CSV file that annotates your training documents.</p>
    pub fn annotations(mut self, input: crate::types::EntityRecognizerAnnotations) -> Self {
        self.annotations = Some(input);
        self
    }
    /// <p>The S3 location of the CSV file that annotates your training documents.</p>
    pub fn set_annotations(
        mut self,
        input: std::option::Option<crate::types::EntityRecognizerAnnotations>,
    ) -> Self {
        self.annotations = input;
        self
    }
    /// <p>The S3 location of the CSV file that has the entity list for your custom entity recognizer.</p>
    pub fn entity_list(mut self, input: crate::types::EntityRecognizerEntityList) -> Self {
        self.entity_list = Some(input);
        self
    }
    /// <p>The S3 location of the CSV file that has the entity list for your custom entity recognizer.</p>
    pub fn set_entity_list(
        mut self,
        input: std::option::Option<crate::types::EntityRecognizerEntityList>,
    ) -> Self {
        self.entity_list = input;
        self
    }
    /// Appends an item to `augmented_manifests`.
    ///
    /// To override the contents of this collection use [`set_augmented_manifests`](Self::set_augmented_manifests).
    ///
    /// <p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>
    pub fn augmented_manifests(mut self, input: crate::types::AugmentedManifestsListItem) -> Self {
        let mut v = self.augmented_manifests.unwrap_or_default();
        v.push(input);
        self.augmented_manifests = Some(v);
        self
    }
    /// <p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>
    /// <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>
    pub fn set_augmented_manifests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AugmentedManifestsListItem>>,
    ) -> Self {
        self.augmented_manifests = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityRecognizerInputDataConfig`](crate::types::EntityRecognizerInputDataConfig).
    pub fn build(self) -> crate::types::EntityRecognizerInputDataConfig {
        crate::types::EntityRecognizerInputDataConfig {
            data_format: self.data_format,
            entity_types: self.entity_types,
            documents: self.documents,
            annotations: self.annotations,
            entity_list: self.entity_list,
            augmented_manifests: self.augmented_manifests,
        }
    }
}
