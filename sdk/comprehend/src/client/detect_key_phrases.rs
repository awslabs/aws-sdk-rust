// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectKeyPhrases`](crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder::text) / [`set_text(Option<String>)`](crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder::set_text):<br>required: **true**<br><p>A UTF-8 text string. The string must contain less than 100 KB of UTF-8 encoded characters.</p><br>
    ///   - [`language_code(LanguageCode)`](crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder::set_language_code):<br>required: **true**<br><p>The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.</p><br>
    /// - On success, responds with [`DetectKeyPhrasesOutput`](crate::operation::detect_key_phrases::DetectKeyPhrasesOutput) with field(s):
    ///   - [`key_phrases(Option<Vec::<KeyPhrase>>)`](crate::operation::detect_key_phrases::DetectKeyPhrasesOutput::key_phrases): <p>A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. </p>
    /// - On failure, responds with [`SdkError<DetectKeyPhrasesError>`](crate::operation::detect_key_phrases::DetectKeyPhrasesError)
    pub fn detect_key_phrases(&self) -> crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder {
        crate::operation::detect_key_phrases::builders::DetectKeyPhrasesFluentBuilder::new(self.handle.clone())
    }
}
