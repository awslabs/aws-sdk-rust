// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The number of documents in the request exceeds the limit of 25. Try your request again with fewer documents.</p>
    BatchSizeLimitExceededException(crate::error::BatchSizeLimitExceededException),
    /// <p>Concurrent modification of the tags associated with an Amazon Comprehend resource is not supported. </p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>An internal server error occurred. Retry your request.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The filter specified for the operation is invalid. Specify a different filter.</p>
    InvalidFilterException(crate::error::InvalidFilterException),
    /// <p>The request is invalid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The specified job was not found. Check the job ID and try again.</p>
    JobNotFoundException(crate::error::JobNotFoundException),
    /// <p>The KMS customer managed key (CMK) entered cannot be validated. Verify the key and re-enter it.</p>
    KmsKeyValidationException(crate::error::KmsKeyValidationException),
    /// <p>The specified resource name is already in use. Use a different name and try your request again.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The maximum number of resources per account has been exceeded. Review the resources, and then try your request again.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The specified resource ARN was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The specified resource is not available. Check the resource and try your request again.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>The size of the input text exceeds the limit. Use a smaller document.</p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p>The number of requests exceeds the limit. Resubmit your request later.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The request contains more tag keys than can be associated with a resource (50 tag keys per resource).</p>
    TooManyTagKeysException(crate::error::TooManyTagKeysException),
    /// <p>The request contains more tags than can be associated with a resource (50 tags per resource). The maximum number of tags includes both existing tags and those included in your current request. </p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>Amazon Comprehend can't process the language of the input text. For custom entity recognition APIs, only English, Spanish, French, Italian, German, or Portuguese are accepted. For a list of supported languages, <a href="https://docs.aws.amazon.com/comprehend/latest/dg/supported-languages.html">Supported languages</a> in the Comprehend Developer Guide. </p>
    UnsupportedLanguageException(crate::error::UnsupportedLanguageException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BatchSizeLimitExceededException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidFilterException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::JobNotFoundException(inner) => inner.fmt(f),
            Error::KmsKeyValidationException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::TextSizeLimitExceededException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::TooManyTagKeysException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnsupportedLanguageException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectDominantLanguageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectDominantLanguageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectDominantLanguageError> for Error {
    fn from(err: crate::error::BatchDetectDominantLanguageError) -> Self {
        match err {
            crate::error::BatchDetectDominantLanguageError::BatchSizeLimitExceededException(
                inner,
            ) => Error::BatchSizeLimitExceededException(inner),
            crate::error::BatchDetectDominantLanguageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectDominantLanguageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectDominantLanguageError::TextSizeLimitExceededException(
                inner,
            ) => Error::TextSizeLimitExceededException(inner),
            crate::error::BatchDetectDominantLanguageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectEntitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectEntitiesError> for Error {
    fn from(err: crate::error::BatchDetectEntitiesError) -> Self {
        match err {
            crate::error::BatchDetectEntitiesError::BatchSizeLimitExceededException(inner) => {
                Error::BatchSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectEntitiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectEntitiesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectEntitiesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::BatchDetectEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectKeyPhrasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectKeyPhrasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectKeyPhrasesError> for Error {
    fn from(err: crate::error::BatchDetectKeyPhrasesError) -> Self {
        match err {
            crate::error::BatchDetectKeyPhrasesError::BatchSizeLimitExceededException(inner) => {
                Error::BatchSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectKeyPhrasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectKeyPhrasesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectKeyPhrasesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectKeyPhrasesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::BatchDetectKeyPhrasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectSentimentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectSentimentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectSentimentError> for Error {
    fn from(err: crate::error::BatchDetectSentimentError) -> Self {
        match err {
            crate::error::BatchDetectSentimentError::BatchSizeLimitExceededException(inner) => {
                Error::BatchSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectSentimentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectSentimentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectSentimentError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectSentimentError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::BatchDetectSentimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectSyntaxError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectSyntaxError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectSyntaxError> for Error {
    fn from(err: crate::error::BatchDetectSyntaxError) -> Self {
        match err {
            crate::error::BatchDetectSyntaxError::BatchSizeLimitExceededException(inner) => {
                Error::BatchSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectSyntaxError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectSyntaxError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectSyntaxError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::BatchDetectSyntaxError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::BatchDetectSyntaxError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDetectTargetedSentimentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDetectTargetedSentimentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDetectTargetedSentimentError> for Error {
    fn from(err: crate::error::BatchDetectTargetedSentimentError) -> Self {
        match err {
            crate::error::BatchDetectTargetedSentimentError::BatchSizeLimitExceededException(
                inner,
            ) => Error::BatchSizeLimitExceededException(inner),
            crate::error::BatchDetectTargetedSentimentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDetectTargetedSentimentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::BatchDetectTargetedSentimentError::TextSizeLimitExceededException(
                inner,
            ) => Error::TextSizeLimitExceededException(inner),
            crate::error::BatchDetectTargetedSentimentError::UnsupportedLanguageException(
                inner,
            ) => Error::UnsupportedLanguageException(inner),
            crate::error::BatchDetectTargetedSentimentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ClassifyDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ClassifyDocumentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ClassifyDocumentError> for Error {
    fn from(err: crate::error::ClassifyDocumentError) -> Self {
        match err {
            crate::error::ClassifyDocumentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ClassifyDocumentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ClassifyDocumentError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ClassifyDocumentError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::ClassifyDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ContainsPiiEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ContainsPiiEntitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ContainsPiiEntitiesError> for Error {
    fn from(err: crate::error::ContainsPiiEntitiesError) -> Self {
        match err {
            crate::error::ContainsPiiEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ContainsPiiEntitiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ContainsPiiEntitiesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::ContainsPiiEntitiesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::ContainsPiiEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDocumentClassifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDocumentClassifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDocumentClassifierError> for Error {
    fn from(err: crate::error::CreateDocumentClassifierError) -> Self {
        match err {
            crate::error::CreateDocumentClassifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDocumentClassifierError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateDocumentClassifierError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::CreateDocumentClassifierError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateDocumentClassifierError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateDocumentClassifierError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateDocumentClassifierError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateDocumentClassifierError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::CreateDocumentClassifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEndpointError> for Error {
    fn from(err: crate::error::CreateEndpointError) -> Self {
        match err {
            crate::error::CreateEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateEndpointError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateEndpointError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateEndpointError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateEndpointError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEntityRecognizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEntityRecognizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEntityRecognizerError> for Error {
    fn from(err: crate::error::CreateEntityRecognizerError) -> Self {
        match err {
            crate::error::CreateEntityRecognizerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEntityRecognizerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateEntityRecognizerError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::CreateEntityRecognizerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateEntityRecognizerError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateEntityRecognizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateEntityRecognizerError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateEntityRecognizerError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::CreateEntityRecognizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDocumentClassifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDocumentClassifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDocumentClassifierError> for Error {
    fn from(err: crate::error::DeleteDocumentClassifierError) -> Self {
        match err {
            crate::error::DeleteDocumentClassifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDocumentClassifierError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteDocumentClassifierError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteDocumentClassifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDocumentClassifierError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteDocumentClassifierError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDocumentClassifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEndpointError> for Error {
    fn from(err: crate::error::DeleteEndpointError) -> Self {
        match err {
            crate::error::DeleteEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteEndpointError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEntityRecognizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEntityRecognizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEntityRecognizerError> for Error {
    fn from(err: crate::error::DeleteEntityRecognizerError) -> Self {
        match err {
            crate::error::DeleteEntityRecognizerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEntityRecognizerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteEntityRecognizerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteEntityRecognizerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEntityRecognizerError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteEntityRecognizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEntityRecognizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourcePolicyError> for Error {
    fn from(err: crate::error::DeleteResourcePolicyError) -> Self {
        match err {
            crate::error::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteResourcePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeDocumentClassificationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDocumentClassificationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDocumentClassificationJobError> for Error {
    fn from(err: crate::error::DescribeDocumentClassificationJobError) -> Self {
        match err {
            crate::error::DescribeDocumentClassificationJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeDocumentClassificationJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DescribeDocumentClassificationJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeDocumentClassificationJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::DescribeDocumentClassificationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDocumentClassifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDocumentClassifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDocumentClassifierError> for Error {
    fn from(err: crate::error::DescribeDocumentClassifierError) -> Self {
        match err {
            crate::error::DescribeDocumentClassifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDocumentClassifierError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeDocumentClassifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDocumentClassifierError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeDocumentClassifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDominantLanguageDetectionJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDominantLanguageDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDominantLanguageDetectionJobError> for Error {
    fn from(err: crate::error::DescribeDominantLanguageDetectionJobError) -> Self {
        match err {
            crate::error::DescribeDominantLanguageDetectionJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeDominantLanguageDetectionJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DescribeDominantLanguageDetectionJobError::JobNotFoundException(
                inner,
            ) => Error::JobNotFoundException(inner),
            crate::error::DescribeDominantLanguageDetectionJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::DescribeDominantLanguageDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEndpointError> for Error {
    fn from(err: crate::error::DescribeEndpointError) -> Self {
        match err {
            crate::error::DescribeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEntitiesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::DescribeEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::DescribeEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEntitiesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeEntitiesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEntityRecognizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEntityRecognizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEntityRecognizerError> for Error {
    fn from(err: crate::error::DescribeEntityRecognizerError) -> Self {
        match err {
            crate::error::DescribeEntityRecognizerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEntityRecognizerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEntityRecognizerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeEntityRecognizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeEntityRecognizerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsDetectionJobError> for Error {
    fn from(err: crate::error::DescribeEventsDetectionJobError) -> Self {
        match err {
            crate::error::DescribeEventsDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEventsDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEventsDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeEventsDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeEventsDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeKeyPhrasesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeKeyPhrasesDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeKeyPhrasesDetectionJobError> for Error {
    fn from(err: crate::error::DescribeKeyPhrasesDetectionJobError) -> Self {
        match err {
            crate::error::DescribeKeyPhrasesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeKeyPhrasesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeKeyPhrasesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeKeyPhrasesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeKeyPhrasesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribePiiEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePiiEntitiesDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePiiEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::DescribePiiEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::DescribePiiEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePiiEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribePiiEntitiesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribePiiEntitiesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribePiiEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourcePolicyError> for Error {
    fn from(err: crate::error::DescribeResourcePolicyError) -> Self {
        match err {
            crate::error::DescribeResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeResourcePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSentimentDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSentimentDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSentimentDetectionJobError> for Error {
    fn from(err: crate::error::DescribeSentimentDetectionJobError) -> Self {
        match err {
            crate::error::DescribeSentimentDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSentimentDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeSentimentDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeSentimentDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeTargetedSentimentDetectionJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTargetedSentimentDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTargetedSentimentDetectionJobError> for Error {
    fn from(err: crate::error::DescribeTargetedSentimentDetectionJobError) -> Self {
        match err {
            crate::error::DescribeTargetedSentimentDetectionJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeTargetedSentimentDetectionJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DescribeTargetedSentimentDetectionJobError::JobNotFoundException(
                inner,
            ) => Error::JobNotFoundException(inner),
            crate::error::DescribeTargetedSentimentDetectionJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::DescribeTargetedSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTopicsDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTopicsDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTopicsDetectionJobError> for Error {
    fn from(err: crate::error::DescribeTopicsDetectionJobError) -> Self {
        match err {
            crate::error::DescribeTopicsDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeTopicsDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeTopicsDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::DescribeTopicsDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeTopicsDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectDominantLanguageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectDominantLanguageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectDominantLanguageError> for Error {
    fn from(err: crate::error::DetectDominantLanguageError) -> Self {
        match err {
            crate::error::DetectDominantLanguageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectDominantLanguageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectDominantLanguageError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectDominantLanguageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetectEntitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectEntitiesError> for Error {
    fn from(err: crate::error::DetectEntitiesError) -> Self {
        match err {
            crate::error::DetectEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectEntitiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectEntitiesError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DetectEntitiesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectEntitiesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectKeyPhrasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectKeyPhrasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectKeyPhrasesError> for Error {
    fn from(err: crate::error::DetectKeyPhrasesError) -> Self {
        match err {
            crate::error::DetectKeyPhrasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectKeyPhrasesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectKeyPhrasesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectKeyPhrasesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectKeyPhrasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectPiiEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectPiiEntitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectPiiEntitiesError> for Error {
    fn from(err: crate::error::DetectPiiEntitiesError) -> Self {
        match err {
            crate::error::DetectPiiEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectPiiEntitiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectPiiEntitiesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectPiiEntitiesError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectPiiEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectSentimentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetectSentimentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectSentimentError> for Error {
    fn from(err: crate::error::DetectSentimentError) -> Self {
        match err {
            crate::error::DetectSentimentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectSentimentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectSentimentError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectSentimentError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectSentimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectSyntaxError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetectSyntaxError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectSyntaxError> for Error {
    fn from(err: crate::error::DetectSyntaxError) -> Self {
        match err {
            crate::error::DetectSyntaxError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectSyntaxError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectSyntaxError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectSyntaxError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectSyntaxError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectTargetedSentimentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectTargetedSentimentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectTargetedSentimentError> for Error {
    fn from(err: crate::error::DetectTargetedSentimentError) -> Self {
        match err {
            crate::error::DetectTargetedSentimentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectTargetedSentimentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectTargetedSentimentError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectTargetedSentimentError::UnsupportedLanguageException(inner) => {
                Error::UnsupportedLanguageException(inner)
            }
            crate::error::DetectTargetedSentimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportModelError> for Error {
    fn from(err: crate::error::ImportModelError) -> Self {
        match err {
            crate::error::ImportModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ImportModelError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ImportModelError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::ImportModelError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::ImportModelError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::ImportModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ImportModelError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ImportModelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportModelError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::ImportModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListDocumentClassificationJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListDocumentClassificationJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentClassificationJobsError> for Error {
    fn from(err: crate::error::ListDocumentClassificationJobsError) -> Self {
        match err {
            crate::error::ListDocumentClassificationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDocumentClassificationJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListDocumentClassificationJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDocumentClassificationJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDocumentClassificationJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDocumentClassifiersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDocumentClassifiersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentClassifiersError> for Error {
    fn from(err: crate::error::ListDocumentClassifiersError) -> Self {
        match err {
            crate::error::ListDocumentClassifiersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDocumentClassifiersError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListDocumentClassifiersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDocumentClassifiersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDocumentClassifiersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListDocumentClassifierSummariesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListDocumentClassifierSummariesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentClassifierSummariesError> for Error {
    fn from(err: crate::error::ListDocumentClassifierSummariesError) -> Self {
        match err {
            crate::error::ListDocumentClassifierSummariesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDocumentClassifierSummariesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDocumentClassifierSummariesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDocumentClassifierSummariesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListDominantLanguageDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListDominantLanguageDetectionJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDominantLanguageDetectionJobsError> for Error {
    fn from(err: crate::error::ListDominantLanguageDetectionJobsError) -> Self {
        match err {
            crate::error::ListDominantLanguageDetectionJobsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListDominantLanguageDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListDominantLanguageDetectionJobsError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::ListDominantLanguageDetectionJobsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::ListDominantLanguageDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListEndpointsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEndpointsError> for Error {
    fn from(err: crate::error::ListEndpointsError) -> Self {
        match err {
            crate::error::ListEndpointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEndpointsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEndpointsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntitiesDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntitiesDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntitiesDetectionJobsError> for Error {
    fn from(err: crate::error::ListEntitiesDetectionJobsError) -> Self {
        match err {
            crate::error::ListEntitiesDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEntitiesDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListEntitiesDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEntitiesDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEntitiesDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntityRecognizersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntityRecognizersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntityRecognizersError> for Error {
    fn from(err: crate::error::ListEntityRecognizersError) -> Self {
        match err {
            crate::error::ListEntityRecognizersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEntityRecognizersError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListEntityRecognizersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEntityRecognizersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEntityRecognizersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntityRecognizerSummariesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntityRecognizerSummariesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntityRecognizerSummariesError> for Error {
    fn from(err: crate::error::ListEntityRecognizerSummariesError) -> Self {
        match err {
            crate::error::ListEntityRecognizerSummariesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEntityRecognizerSummariesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEntityRecognizerSummariesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEntityRecognizerSummariesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEventsDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEventsDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEventsDetectionJobsError> for Error {
    fn from(err: crate::error::ListEventsDetectionJobsError) -> Self {
        match err {
            crate::error::ListEventsDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEventsDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListEventsDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEventsDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEventsDetectionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListKeyPhrasesDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListKeyPhrasesDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListKeyPhrasesDetectionJobsError> for Error {
    fn from(err: crate::error::ListKeyPhrasesDetectionJobsError) -> Self {
        match err {
            crate::error::ListKeyPhrasesDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListKeyPhrasesDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListKeyPhrasesDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListKeyPhrasesDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListKeyPhrasesDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPiiEntitiesDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPiiEntitiesDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPiiEntitiesDetectionJobsError> for Error {
    fn from(err: crate::error::ListPiiEntitiesDetectionJobsError) -> Self {
        match err {
            crate::error::ListPiiEntitiesDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPiiEntitiesDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListPiiEntitiesDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListPiiEntitiesDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListPiiEntitiesDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSentimentDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSentimentDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSentimentDetectionJobsError> for Error {
    fn from(err: crate::error::ListSentimentDetectionJobsError) -> Self {
        match err {
            crate::error::ListSentimentDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSentimentDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListSentimentDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListSentimentDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListSentimentDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListTargetedSentimentDetectionJobsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListTargetedSentimentDetectionJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTargetedSentimentDetectionJobsError> for Error {
    fn from(err: crate::error::ListTargetedSentimentDetectionJobsError) -> Self {
        match err {
            crate::error::ListTargetedSentimentDetectionJobsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListTargetedSentimentDetectionJobsError::InvalidFilterException(
                inner,
            ) => Error::InvalidFilterException(inner),
            crate::error::ListTargetedSentimentDetectionJobsError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::ListTargetedSentimentDetectionJobsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::ListTargetedSentimentDetectionJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTopicsDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTopicsDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTopicsDetectionJobsError> for Error {
    fn from(err: crate::error::ListTopicsDetectionJobsError) -> Self {
        match err {
            crate::error::ListTopicsDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTopicsDetectionJobsError::InvalidFilterException(inner) => {
                Error::InvalidFilterException(inner)
            }
            crate::error::ListTopicsDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTopicsDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListTopicsDetectionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResourcePolicyError> for Error {
    fn from(err: crate::error::PutResourcePolicyError) -> Self {
        match err {
            crate::error::PutResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutResourcePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartDocumentClassificationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartDocumentClassificationJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDocumentClassificationJobError> for Error {
    fn from(err: crate::error::StartDocumentClassificationJobError) -> Self {
        match err {
            crate::error::StartDocumentClassificationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartDocumentClassificationJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartDocumentClassificationJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartDocumentClassificationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartDocumentClassificationJobError::ResourceUnavailableException(
                inner,
            ) => Error::ResourceUnavailableException(inner),
            crate::error::StartDocumentClassificationJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartDocumentClassificationJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartDocumentClassificationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartDominantLanguageDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartDominantLanguageDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDominantLanguageDetectionJobError> for Error {
    fn from(err: crate::error::StartDominantLanguageDetectionJobError) -> Self {
        match err {
            crate::error::StartDominantLanguageDetectionJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::StartDominantLanguageDetectionJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::StartDominantLanguageDetectionJobError::KmsKeyValidationException(
                inner,
            ) => Error::KmsKeyValidationException(inner),
            crate::error::StartDominantLanguageDetectionJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::StartDominantLanguageDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartDominantLanguageDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartEntitiesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::StartEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::StartEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartEventsDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartEventsDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartEventsDetectionJobError> for Error {
    fn from(err: crate::error::StartEventsDetectionJobError) -> Self {
        match err {
            crate::error::StartEventsDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartEventsDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartEventsDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartEventsDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartEventsDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartEventsDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartKeyPhrasesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartKeyPhrasesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartKeyPhrasesDetectionJobError> for Error {
    fn from(err: crate::error::StartKeyPhrasesDetectionJobError) -> Self {
        match err {
            crate::error::StartKeyPhrasesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartKeyPhrasesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartKeyPhrasesDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartKeyPhrasesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartKeyPhrasesDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartKeyPhrasesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartPiiEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartPiiEntitiesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartPiiEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::StartPiiEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::StartPiiEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartPiiEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartPiiEntitiesDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartPiiEntitiesDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartPiiEntitiesDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartPiiEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSentimentDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartSentimentDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSentimentDetectionJobError> for Error {
    fn from(err: crate::error::StartSentimentDetectionJobError) -> Self {
        match err {
            crate::error::StartSentimentDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartSentimentDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartSentimentDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartSentimentDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartSentimentDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::StartTargetedSentimentDetectionJobError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartTargetedSentimentDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartTargetedSentimentDetectionJobError> for Error {
    fn from(err: crate::error::StartTargetedSentimentDetectionJobError) -> Self {
        match err {
            crate::error::StartTargetedSentimentDetectionJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::StartTargetedSentimentDetectionJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::StartTargetedSentimentDetectionJobError::KmsKeyValidationException(
                inner,
            ) => Error::KmsKeyValidationException(inner),
            crate::error::StartTargetedSentimentDetectionJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::StartTargetedSentimentDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartTargetedSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartTopicsDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartTopicsDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartTopicsDetectionJobError> for Error {
    fn from(err: crate::error::StartTopicsDetectionJobError) -> Self {
        match err {
            crate::error::StartTopicsDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartTopicsDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartTopicsDetectionJobError::KmsKeyValidationException(inner) => {
                Error::KmsKeyValidationException(inner)
            }
            crate::error::StartTopicsDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartTopicsDetectionJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::StartTopicsDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StopDominantLanguageDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StopDominantLanguageDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDominantLanguageDetectionJobError> for Error {
    fn from(err: crate::error::StopDominantLanguageDetectionJobError) -> Self {
        match err {
            crate::error::StopDominantLanguageDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopDominantLanguageDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopDominantLanguageDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopDominantLanguageDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopEntitiesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::StopEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::StopEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopEntitiesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopEventsDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopEventsDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopEventsDetectionJobError> for Error {
    fn from(err: crate::error::StopEventsDetectionJobError) -> Self {
        match err {
            crate::error::StopEventsDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopEventsDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopEventsDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopEventsDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopKeyPhrasesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopKeyPhrasesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopKeyPhrasesDetectionJobError> for Error {
    fn from(err: crate::error::StopKeyPhrasesDetectionJobError) -> Self {
        match err {
            crate::error::StopKeyPhrasesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopKeyPhrasesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopKeyPhrasesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopKeyPhrasesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopPiiEntitiesDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopPiiEntitiesDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopPiiEntitiesDetectionJobError> for Error {
    fn from(err: crate::error::StopPiiEntitiesDetectionJobError) -> Self {
        match err {
            crate::error::StopPiiEntitiesDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopPiiEntitiesDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopPiiEntitiesDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopPiiEntitiesDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopSentimentDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopSentimentDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopSentimentDetectionJobError> for Error {
    fn from(err: crate::error::StopSentimentDetectionJobError) -> Self {
        match err {
            crate::error::StopSentimentDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopSentimentDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopSentimentDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StopTargetedSentimentDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StopTargetedSentimentDetectionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopTargetedSentimentDetectionJobError> for Error {
    fn from(err: crate::error::StopTargetedSentimentDetectionJobError) -> Self {
        match err {
            crate::error::StopTargetedSentimentDetectionJobError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::StopTargetedSentimentDetectionJobError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::StopTargetedSentimentDetectionJobError::JobNotFoundException(inner) => {
                Error::JobNotFoundException(inner)
            }
            crate::error::StopTargetedSentimentDetectionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StopTrainingDocumentClassifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StopTrainingDocumentClassifierError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopTrainingDocumentClassifierError> for Error {
    fn from(err: crate::error::StopTrainingDocumentClassifierError) -> Self {
        match err {
            crate::error::StopTrainingDocumentClassifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopTrainingDocumentClassifierError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopTrainingDocumentClassifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopTrainingDocumentClassifierError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StopTrainingDocumentClassifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopTrainingEntityRecognizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopTrainingEntityRecognizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopTrainingEntityRecognizerError> for Error {
    fn from(err: crate::error::StopTrainingEntityRecognizerError) -> Self {
        match err {
            crate::error::StopTrainingEntityRecognizerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopTrainingEntityRecognizerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopTrainingEntityRecognizerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopTrainingEntityRecognizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StopTrainingEntityRecognizerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::TooManyTagKeysException(inner) => {
                Error::TooManyTagKeysException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEndpointError> for Error {
    fn from(err: crate::error::UpdateEndpointError) -> Self {
        match err {
            crate::error::UpdateEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateEndpointError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdateEndpointError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::UpdateEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEndpointError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BatchSizeLimitExceededException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidFilterException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::JobNotFoundException(e) => e.request_id(),
            Self::KmsKeyValidationException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::TextSizeLimitExceededException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::TooManyTagKeysException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnsupportedLanguageException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
