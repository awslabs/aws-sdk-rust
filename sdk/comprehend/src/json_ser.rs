// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_detect_dominant_language_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectDominantLanguageInput,
) {
    if let Some(var_1) = &input.text_list {
        let mut array_2 = object.key("TextList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_batch_detect_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectEntitiesInput,
) {
    if let Some(var_4) = &input.text_list {
        let mut array_5 = object.key("TextList").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.language_code {
        object.key("LanguageCode").string(var_7.as_str());
    }
}

pub fn serialize_structure_batch_detect_key_phrases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectKeyPhrasesInput,
) {
    if let Some(var_8) = &input.text_list {
        let mut array_9 = object.key("TextList").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10);
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.language_code {
        object.key("LanguageCode").string(var_11.as_str());
    }
}

pub fn serialize_structure_batch_detect_sentiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectSentimentInput,
) {
    if let Some(var_12) = &input.text_list {
        let mut array_13 = object.key("TextList").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.language_code {
        object.key("LanguageCode").string(var_15.as_str());
    }
}

pub fn serialize_structure_batch_detect_syntax_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectSyntaxInput,
) {
    if let Some(var_16) = &input.text_list {
        let mut array_17 = object.key("TextList").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18);
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.language_code {
        object.key("LanguageCode").string(var_19.as_str());
    }
}

pub fn serialize_structure_classify_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClassifyDocumentInput,
) {
    if let Some(var_20) = &input.text {
        object.key("Text").string(var_20);
    }
    if let Some(var_21) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_21);
    }
}

pub fn serialize_structure_contains_pii_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ContainsPiiEntitiesInput,
) {
    if let Some(var_22) = &input.text {
        object.key("Text").string(var_22);
    }
    if let Some(var_23) = &input.language_code {
        object.key("LanguageCode").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentClassifierInput,
) {
    if let Some(var_24) = &input.document_classifier_name {
        object.key("DocumentClassifierName").string(var_24);
    }
    if let Some(var_25) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_25);
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.input_data_config {
        let mut object_31 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_document_classifier_input_data_config(
            &mut object_31,
            var_30,
        );
        object_31.finish();
    }
    if let Some(var_32) = &input.output_data_config {
        let mut object_33 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_document_classifier_output_data_config(
            &mut object_33,
            var_32,
        );
        object_33.finish();
    }
    if let Some(var_34) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_34);
    }
    if let Some(var_35) = &input.language_code {
        object.key("LanguageCode").string(var_35.as_str());
    }
    if let Some(var_36) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_36);
    }
    if let Some(var_37) = &input.vpc_config {
        let mut object_38 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.mode {
        object.key("Mode").string(var_39.as_str());
    }
    if let Some(var_40) = &input.model_kms_key_id {
        object.key("ModelKmsKeyId").string(var_40);
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_41) = &input.endpoint_name {
        object.key("EndpointName").string(var_41);
    }
    if let Some(var_42) = &input.model_arn {
        object.key("ModelArn").string(var_42);
    }
    if let Some(var_43) = &input.desired_inference_units {
        object.key("DesiredInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_44);
    }
    if let Some(var_45) = &input.tags {
        let mut array_46 = object.key("Tags").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_49);
    }
}

pub fn serialize_structure_create_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntityRecognizerInput,
) {
    if let Some(var_50) = &input.recognizer_name {
        object.key("RecognizerName").string(var_50);
    }
    if let Some(var_51) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_51);
    }
    if let Some(var_52) = &input.tags {
        let mut array_53 = object.key("Tags").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_55, item_54);
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.input_data_config {
        let mut object_57 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_input_data_config(
            &mut object_57,
            var_56,
        );
        object_57.finish();
    }
    if let Some(var_58) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_58);
    }
    if let Some(var_59) = &input.language_code {
        object.key("LanguageCode").string(var_59.as_str());
    }
    if let Some(var_60) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_60);
    }
    if let Some(var_61) = &input.vpc_config {
        let mut object_62 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_62, var_61);
        object_62.finish();
    }
    if let Some(var_63) = &input.model_kms_key_id {
        object.key("ModelKmsKeyId").string(var_63);
    }
}

pub fn serialize_structure_delete_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentClassifierInput,
) {
    if let Some(var_64) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_64);
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_65) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_65);
    }
}

pub fn serialize_structure_delete_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEntityRecognizerInput,
) {
    if let Some(var_66) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_66);
    }
}

pub fn serialize_structure_describe_document_classification_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentClassificationJobInput,
) {
    if let Some(var_67) = &input.job_id {
        object.key("JobId").string(var_67);
    }
}

pub fn serialize_structure_describe_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentClassifierInput,
) {
    if let Some(var_68) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_68);
    }
}

pub fn serialize_structure_describe_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDominantLanguageDetectionJobInput,
) {
    if let Some(var_69) = &input.job_id {
        object.key("JobId").string(var_69);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_70) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_70);
    }
}

pub fn serialize_structure_describe_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntitiesDetectionJobInput,
) {
    if let Some(var_71) = &input.job_id {
        object.key("JobId").string(var_71);
    }
}

pub fn serialize_structure_describe_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntityRecognizerInput,
) {
    if let Some(var_72) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_72);
    }
}

pub fn serialize_structure_describe_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsDetectionJobInput,
) {
    if let Some(var_73) = &input.job_id {
        object.key("JobId").string(var_73);
    }
}

pub fn serialize_structure_describe_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeyPhrasesDetectionJobInput,
) {
    if let Some(var_74) = &input.job_id {
        object.key("JobId").string(var_74);
    }
}

pub fn serialize_structure_describe_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePiiEntitiesDetectionJobInput,
) {
    if let Some(var_75) = &input.job_id {
        object.key("JobId").string(var_75);
    }
}

pub fn serialize_structure_describe_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSentimentDetectionJobInput,
) {
    if let Some(var_76) = &input.job_id {
        object.key("JobId").string(var_76);
    }
}

pub fn serialize_structure_describe_topics_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTopicsDetectionJobInput,
) {
    if let Some(var_77) = &input.job_id {
        object.key("JobId").string(var_77);
    }
}

pub fn serialize_structure_detect_dominant_language_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectDominantLanguageInput,
) {
    if let Some(var_78) = &input.text {
        object.key("Text").string(var_78);
    }
}

pub fn serialize_structure_detect_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectEntitiesInput,
) {
    if let Some(var_79) = &input.text {
        object.key("Text").string(var_79);
    }
    if let Some(var_80) = &input.language_code {
        object.key("LanguageCode").string(var_80.as_str());
    }
    if let Some(var_81) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_81);
    }
}

pub fn serialize_structure_detect_key_phrases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectKeyPhrasesInput,
) {
    if let Some(var_82) = &input.text {
        object.key("Text").string(var_82);
    }
    if let Some(var_83) = &input.language_code {
        object.key("LanguageCode").string(var_83.as_str());
    }
}

pub fn serialize_structure_detect_pii_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectPiiEntitiesInput,
) {
    if let Some(var_84) = &input.text {
        object.key("Text").string(var_84);
    }
    if let Some(var_85) = &input.language_code {
        object.key("LanguageCode").string(var_85.as_str());
    }
}

pub fn serialize_structure_detect_sentiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectSentimentInput,
) {
    if let Some(var_86) = &input.text {
        object.key("Text").string(var_86);
    }
    if let Some(var_87) = &input.language_code {
        object.key("LanguageCode").string(var_87.as_str());
    }
}

pub fn serialize_structure_detect_syntax_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectSyntaxInput,
) {
    if let Some(var_88) = &input.text {
        object.key("Text").string(var_88);
    }
    if let Some(var_89) = &input.language_code {
        object.key("LanguageCode").string(var_89.as_str());
    }
}

pub fn serialize_structure_list_document_classification_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentClassificationJobsInput,
) {
    if let Some(var_90) = &input.filter {
        let mut object_91 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_document_classification_job_filter(
            &mut object_91,
            var_90,
        );
        object_91.finish();
    }
    if let Some(var_92) = &input.next_token {
        object.key("NextToken").string(var_92);
    }
    if let Some(var_93) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_93).into()),
        );
    }
}

pub fn serialize_structure_list_document_classifiers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentClassifiersInput,
) {
    if let Some(var_94) = &input.filter {
        let mut object_95 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_document_classifier_filter(&mut object_95, var_94);
        object_95.finish();
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96);
    }
    if let Some(var_97) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
}

pub fn serialize_structure_list_dominant_language_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDominantLanguageDetectionJobsInput,
) {
    if let Some(var_98) = &input.filter {
        let mut object_99 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_dominant_language_detection_job_filter(
            &mut object_99,
            var_98,
        );
        object_99.finish();
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100);
    }
    if let Some(var_101) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_101).into()),
        );
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_102) = &input.filter {
        let mut object_103 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_endpoint_filter(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104);
    }
    if let Some(var_105) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_105).into()),
        );
    }
}

pub fn serialize_structure_list_entities_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitiesDetectionJobsInput,
) {
    if let Some(var_106) = &input.filter {
        let mut object_107 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_entities_detection_job_filter(
            &mut object_107,
            var_106,
        );
        object_107.finish();
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108);
    }
    if let Some(var_109) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
}

pub fn serialize_structure_list_entity_recognizers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityRecognizersInput,
) {
    if let Some(var_110) = &input.filter {
        let mut object_111 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_filter(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
    if let Some(var_113) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
}

pub fn serialize_structure_list_events_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEventsDetectionJobsInput,
) {
    if let Some(var_114) = &input.filter {
        let mut object_115 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_events_detection_job_filter(&mut object_115, var_114);
        object_115.finish();
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116);
    }
    if let Some(var_117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
}

pub fn serialize_structure_list_key_phrases_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeyPhrasesDetectionJobsInput,
) {
    if let Some(var_118) = &input.filter {
        let mut object_119 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_key_phrases_detection_job_filter(
            &mut object_119,
            var_118,
        );
        object_119.finish();
    }
    if let Some(var_120) = &input.next_token {
        object.key("NextToken").string(var_120);
    }
    if let Some(var_121) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
}

pub fn serialize_structure_list_pii_entities_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPiiEntitiesDetectionJobsInput,
) {
    if let Some(var_122) = &input.filter {
        let mut object_123 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_pii_entities_detection_job_filter(
            &mut object_123,
            var_122,
        );
        object_123.finish();
    }
    if let Some(var_124) = &input.next_token {
        object.key("NextToken").string(var_124);
    }
    if let Some(var_125) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
}

pub fn serialize_structure_list_sentiment_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSentimentDetectionJobsInput,
) {
    if let Some(var_126) = &input.filter {
        let mut object_127 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_sentiment_detection_job_filter(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.next_token {
        object.key("NextToken").string(var_128);
    }
    if let Some(var_129) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_130) = &input.resource_arn {
        object.key("ResourceArn").string(var_130);
    }
}

pub fn serialize_structure_list_topics_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTopicsDetectionJobsInput,
) {
    if let Some(var_131) = &input.filter {
        let mut object_132 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_topics_detection_job_filter(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.next_token {
        object.key("NextToken").string(var_133);
    }
    if let Some(var_134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
}

pub fn serialize_structure_start_document_classification_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDocumentClassificationJobInput,
) {
    if let Some(var_135) = &input.job_name {
        object.key("JobName").string(var_135);
    }
    if let Some(var_136) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_136);
    }
    if let Some(var_137) = &input.input_data_config {
        let mut object_138 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_138, var_137);
        object_138.finish();
    }
    if let Some(var_139) = &input.output_data_config {
        let mut object_140 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_140, var_139);
        object_140.finish();
    }
    if let Some(var_141) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_141);
    }
    if let Some(var_142) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_142);
    }
    if let Some(var_143) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_143);
    }
    if let Some(var_144) = &input.vpc_config {
        let mut object_145 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_145, var_144);
        object_145.finish();
    }
}

pub fn serialize_structure_start_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDominantLanguageDetectionJobInput,
) {
    if let Some(var_146) = &input.input_data_config {
        let mut object_147 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.output_data_config {
        let mut object_149 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_149, var_148);
        object_149.finish();
    }
    if let Some(var_150) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_150);
    }
    if let Some(var_151) = &input.job_name {
        object.key("JobName").string(var_151);
    }
    if let Some(var_152) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_152);
    }
    if let Some(var_153) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_153);
    }
    if let Some(var_154) = &input.vpc_config {
        let mut object_155 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_155, var_154);
        object_155.finish();
    }
}

pub fn serialize_structure_start_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEntitiesDetectionJobInput,
) {
    if let Some(var_156) = &input.input_data_config {
        let mut object_157 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_157, var_156);
        object_157.finish();
    }
    if let Some(var_158) = &input.output_data_config {
        let mut object_159 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_159, var_158);
        object_159.finish();
    }
    if let Some(var_160) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_160);
    }
    if let Some(var_161) = &input.job_name {
        object.key("JobName").string(var_161);
    }
    if let Some(var_162) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_162);
    }
    if let Some(var_163) = &input.language_code {
        object.key("LanguageCode").string(var_163.as_str());
    }
    if let Some(var_164) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_164);
    }
    if let Some(var_165) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_165);
    }
    if let Some(var_166) = &input.vpc_config {
        let mut object_167 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_167, var_166);
        object_167.finish();
    }
}

pub fn serialize_structure_start_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEventsDetectionJobInput,
) {
    if let Some(var_168) = &input.input_data_config {
        let mut object_169 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_169, var_168);
        object_169.finish();
    }
    if let Some(var_170) = &input.output_data_config {
        let mut object_171 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_171, var_170);
        object_171.finish();
    }
    if let Some(var_172) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_172);
    }
    if let Some(var_173) = &input.job_name {
        object.key("JobName").string(var_173);
    }
    if let Some(var_174) = &input.language_code {
        object.key("LanguageCode").string(var_174.as_str());
    }
    if let Some(var_175) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_175);
    }
    if let Some(var_176) = &input.target_event_types {
        let mut array_177 = object.key("TargetEventTypes").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178);
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_start_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartKeyPhrasesDetectionJobInput,
) {
    if let Some(var_179) = &input.input_data_config {
        let mut object_180 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_180, var_179);
        object_180.finish();
    }
    if let Some(var_181) = &input.output_data_config {
        let mut object_182 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_182, var_181);
        object_182.finish();
    }
    if let Some(var_183) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_183);
    }
    if let Some(var_184) = &input.job_name {
        object.key("JobName").string(var_184);
    }
    if let Some(var_185) = &input.language_code {
        object.key("LanguageCode").string(var_185.as_str());
    }
    if let Some(var_186) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_186);
    }
    if let Some(var_187) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_187);
    }
    if let Some(var_188) = &input.vpc_config {
        let mut object_189 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_189, var_188);
        object_189.finish();
    }
}

pub fn serialize_structure_start_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPiiEntitiesDetectionJobInput,
) {
    if let Some(var_190) = &input.input_data_config {
        let mut object_191 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_191, var_190);
        object_191.finish();
    }
    if let Some(var_192) = &input.output_data_config {
        let mut object_193 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_193, var_192);
        object_193.finish();
    }
    if let Some(var_194) = &input.mode {
        object.key("Mode").string(var_194.as_str());
    }
    if let Some(var_195) = &input.redaction_config {
        let mut object_196 = object.key("RedactionConfig").start_object();
        crate::json_ser::serialize_structure_redaction_config(&mut object_196, var_195);
        object_196.finish();
    }
    if let Some(var_197) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_197);
    }
    if let Some(var_198) = &input.job_name {
        object.key("JobName").string(var_198);
    }
    if let Some(var_199) = &input.language_code {
        object.key("LanguageCode").string(var_199.as_str());
    }
    if let Some(var_200) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_200);
    }
}

pub fn serialize_structure_start_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSentimentDetectionJobInput,
) {
    if let Some(var_201) = &input.input_data_config {
        let mut object_202 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_202, var_201);
        object_202.finish();
    }
    if let Some(var_203) = &input.output_data_config {
        let mut object_204 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_204, var_203);
        object_204.finish();
    }
    if let Some(var_205) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_205);
    }
    if let Some(var_206) = &input.job_name {
        object.key("JobName").string(var_206);
    }
    if let Some(var_207) = &input.language_code {
        object.key("LanguageCode").string(var_207.as_str());
    }
    if let Some(var_208) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_208);
    }
    if let Some(var_209) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_209);
    }
    if let Some(var_210) = &input.vpc_config {
        let mut object_211 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_211, var_210);
        object_211.finish();
    }
}

pub fn serialize_structure_start_topics_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTopicsDetectionJobInput,
) {
    if let Some(var_212) = &input.input_data_config {
        let mut object_213 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_213, var_212);
        object_213.finish();
    }
    if let Some(var_214) = &input.output_data_config {
        let mut object_215 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_215, var_214);
        object_215.finish();
    }
    if let Some(var_216) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_216);
    }
    if let Some(var_217) = &input.job_name {
        object.key("JobName").string(var_217);
    }
    if let Some(var_218) = &input.number_of_topics {
        object.key("NumberOfTopics").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_219);
    }
    if let Some(var_220) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_220);
    }
    if let Some(var_221) = &input.vpc_config {
        let mut object_222 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_222, var_221);
        object_222.finish();
    }
}

pub fn serialize_structure_stop_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDominantLanguageDetectionJobInput,
) {
    if let Some(var_223) = &input.job_id {
        object.key("JobId").string(var_223);
    }
}

pub fn serialize_structure_stop_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEntitiesDetectionJobInput,
) {
    if let Some(var_224) = &input.job_id {
        object.key("JobId").string(var_224);
    }
}

pub fn serialize_structure_stop_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEventsDetectionJobInput,
) {
    if let Some(var_225) = &input.job_id {
        object.key("JobId").string(var_225);
    }
}

pub fn serialize_structure_stop_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopKeyPhrasesDetectionJobInput,
) {
    if let Some(var_226) = &input.job_id {
        object.key("JobId").string(var_226);
    }
}

pub fn serialize_structure_stop_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPiiEntitiesDetectionJobInput,
) {
    if let Some(var_227) = &input.job_id {
        object.key("JobId").string(var_227);
    }
}

pub fn serialize_structure_stop_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSentimentDetectionJobInput,
) {
    if let Some(var_228) = &input.job_id {
        object.key("JobId").string(var_228);
    }
}

pub fn serialize_structure_stop_training_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingDocumentClassifierInput,
) {
    if let Some(var_229) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_229);
    }
}

pub fn serialize_structure_stop_training_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingEntityRecognizerInput,
) {
    if let Some(var_230) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_230);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_231) = &input.resource_arn {
        object.key("ResourceArn").string(var_231);
    }
    if let Some(var_232) = &input.tags {
        let mut array_233 = object.key("Tags").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_236) = &input.resource_arn {
        object.key("ResourceArn").string(var_236);
    }
    if let Some(var_237) = &input.tag_keys {
        let mut array_238 = object.key("TagKeys").start_array();
        for item_239 in var_237 {
            {
                array_238.value().string(item_239);
            }
        }
        array_238.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_240) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_240);
    }
    if let Some(var_241) = &input.desired_inference_units {
        object.key("DesiredInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_241).into()),
        );
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_242) = &input.key {
        object.key("Key").string(var_242);
    }
    if let Some(var_243) = &input.value {
        object.key("Value").string(var_243);
    }
}

pub fn serialize_structure_document_classifier_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierInputDataConfig,
) {
    if let Some(var_244) = &input.data_format {
        object.key("DataFormat").string(var_244.as_str());
    }
    if let Some(var_245) = &input.s3_uri {
        object.key("S3Uri").string(var_245);
    }
    if let Some(var_246) = &input.label_delimiter {
        object.key("LabelDelimiter").string(var_246);
    }
    if let Some(var_247) = &input.augmented_manifests {
        let mut array_248 = object.key("AugmentedManifests").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_augmented_manifests_list_item(
                    &mut object_250,
                    item_249,
                );
                object_250.finish();
            }
        }
        array_248.finish();
    }
}

pub fn serialize_structure_document_classifier_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierOutputDataConfig,
) {
    if let Some(var_251) = &input.s3_uri {
        object.key("S3Uri").string(var_251);
    }
    if let Some(var_252) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_252);
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_253) = &input.security_group_ids {
        let mut array_254 = object.key("SecurityGroupIds").start_array();
        for item_255 in var_253 {
            {
                array_254.value().string(item_255);
            }
        }
        array_254.finish();
    }
    if let Some(var_256) = &input.subnets {
        let mut array_257 = object.key("Subnets").start_array();
        for item_258 in var_256 {
            {
                array_257.value().string(item_258);
            }
        }
        array_257.finish();
    }
}

pub fn serialize_structure_entity_recognizer_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerInputDataConfig,
) {
    if let Some(var_259) = &input.data_format {
        object.key("DataFormat").string(var_259.as_str());
    }
    if let Some(var_260) = &input.entity_types {
        let mut array_261 = object.key("EntityTypes").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_entity_types_list_item(
                    &mut object_263,
                    item_262,
                );
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.documents {
        let mut object_265 = object.key("Documents").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_documents(&mut object_265, var_264);
        object_265.finish();
    }
    if let Some(var_266) = &input.annotations {
        let mut object_267 = object.key("Annotations").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_annotations(
            &mut object_267,
            var_266,
        );
        object_267.finish();
    }
    if let Some(var_268) = &input.entity_list {
        let mut object_269 = object.key("EntityList").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_entity_list(
            &mut object_269,
            var_268,
        );
        object_269.finish();
    }
    if let Some(var_270) = &input.augmented_manifests {
        let mut array_271 = object.key("AugmentedManifests").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_augmented_manifests_list_item(
                    &mut object_273,
                    item_272,
                );
                object_273.finish();
            }
        }
        array_271.finish();
    }
}

pub fn serialize_structure_document_classification_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassificationJobFilter,
) {
    if let Some(var_274) = &input.job_name {
        object.key("JobName").string(var_274);
    }
    if let Some(var_275) = &input.job_status {
        object.key("JobStatus").string(var_275.as_str());
    }
    if let Some(var_276) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_276, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_277) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_277, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_document_classifier_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierFilter,
) {
    if let Some(var_278) = &input.status {
        object.key("Status").string(var_278.as_str());
    }
    if let Some(var_279) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_279, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_280) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_280, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_dominant_language_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DominantLanguageDetectionJobFilter,
) {
    if let Some(var_281) = &input.job_name {
        object.key("JobName").string(var_281);
    }
    if let Some(var_282) = &input.job_status {
        object.key("JobStatus").string(var_282.as_str());
    }
    if let Some(var_283) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_283, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_284) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_284, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_endpoint_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointFilter,
) {
    if let Some(var_285) = &input.model_arn {
        object.key("ModelArn").string(var_285);
    }
    if let Some(var_286) = &input.status {
        object.key("Status").string(var_286.as_str());
    }
    if let Some(var_287) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_287, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_288) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_288, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_entities_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntitiesDetectionJobFilter,
) {
    if let Some(var_289) = &input.job_name {
        object.key("JobName").string(var_289);
    }
    if let Some(var_290) = &input.job_status {
        object.key("JobStatus").string(var_290.as_str());
    }
    if let Some(var_291) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_291, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_292) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_292, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_entity_recognizer_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerFilter,
) {
    if let Some(var_293) = &input.status {
        object.key("Status").string(var_293.as_str());
    }
    if let Some(var_294) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_294, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_295) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_295, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_events_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventsDetectionJobFilter,
) {
    if let Some(var_296) = &input.job_name {
        object.key("JobName").string(var_296);
    }
    if let Some(var_297) = &input.job_status {
        object.key("JobStatus").string(var_297.as_str());
    }
    if let Some(var_298) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_298, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_299) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_299, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_key_phrases_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyPhrasesDetectionJobFilter,
) {
    if let Some(var_300) = &input.job_name {
        object.key("JobName").string(var_300);
    }
    if let Some(var_301) = &input.job_status {
        object.key("JobStatus").string(var_301.as_str());
    }
    if let Some(var_302) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_302, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_303) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_303, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_pii_entities_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PiiEntitiesDetectionJobFilter,
) {
    if let Some(var_304) = &input.job_name {
        object.key("JobName").string(var_304);
    }
    if let Some(var_305) = &input.job_status {
        object.key("JobStatus").string(var_305.as_str());
    }
    if let Some(var_306) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_306, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_307) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_307, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_sentiment_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentDetectionJobFilter,
) {
    if let Some(var_308) = &input.job_name {
        object.key("JobName").string(var_308);
    }
    if let Some(var_309) = &input.job_status {
        object.key("JobStatus").string(var_309.as_str());
    }
    if let Some(var_310) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_310, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_311) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_311, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_topics_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicsDetectionJobFilter,
) {
    if let Some(var_312) = &input.job_name {
        object.key("JobName").string(var_312);
    }
    if let Some(var_313) = &input.job_status {
        object.key("JobStatus").string(var_313.as_str());
    }
    if let Some(var_314) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_314, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_315) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_315, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_316) = &input.s3_uri {
        object.key("S3Uri").string(var_316);
    }
    if let Some(var_317) = &input.input_format {
        object.key("InputFormat").string(var_317.as_str());
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_318) = &input.s3_uri {
        object.key("S3Uri").string(var_318);
    }
    if let Some(var_319) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_319);
    }
}

pub fn serialize_structure_redaction_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedactionConfig,
) {
    if let Some(var_320) = &input.pii_entity_types {
        let mut array_321 = object.key("PiiEntityTypes").start_array();
        for item_322 in var_320 {
            {
                array_321.value().string(item_322.as_str());
            }
        }
        array_321.finish();
    }
    if let Some(var_323) = &input.mask_mode {
        object.key("MaskMode").string(var_323.as_str());
    }
    if let Some(var_324) = &input.mask_character {
        object.key("MaskCharacter").string(var_324);
    }
}

pub fn serialize_structure_augmented_manifests_list_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AugmentedManifestsListItem,
) {
    if let Some(var_325) = &input.s3_uri {
        object.key("S3Uri").string(var_325);
    }
    if let Some(var_326) = &input.attribute_names {
        let mut array_327 = object.key("AttributeNames").start_array();
        for item_328 in var_326 {
            {
                array_327.value().string(item_328);
            }
        }
        array_327.finish();
    }
}

pub fn serialize_structure_entity_types_list_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityTypesListItem,
) {
    if let Some(var_329) = &input.r#type {
        object.key("Type").string(var_329);
    }
}

pub fn serialize_structure_entity_recognizer_documents(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerDocuments,
) {
    if let Some(var_330) = &input.s3_uri {
        object.key("S3Uri").string(var_330);
    }
}

pub fn serialize_structure_entity_recognizer_annotations(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerAnnotations,
) {
    if let Some(var_331) = &input.s3_uri {
        object.key("S3Uri").string(var_331);
    }
}

pub fn serialize_structure_entity_recognizer_entity_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerEntityList,
) {
    if let Some(var_332) = &input.s3_uri {
        object.key("S3Uri").string(var_332);
    }
}
