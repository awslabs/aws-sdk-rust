// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_detect_dominant_language_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectDominantLanguageInput,
) {
    if let Some(var_1) = &input.text_list {
        let mut array_2 = object.key("TextList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_batch_detect_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectEntitiesInput,
) {
    if let Some(var_4) = &input.text_list {
        let mut array_5 = object.key("TextList").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.language_code {
        object.key("LanguageCode").string(var_7.as_str());
    }
}

pub fn serialize_structure_batch_detect_key_phrases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectKeyPhrasesInput,
) {
    if let Some(var_8) = &input.text_list {
        let mut array_9 = object.key("TextList").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10);
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.language_code {
        object.key("LanguageCode").string(var_11.as_str());
    }
}

pub fn serialize_structure_batch_detect_sentiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectSentimentInput,
) {
    if let Some(var_12) = &input.text_list {
        let mut array_13 = object.key("TextList").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.language_code {
        object.key("LanguageCode").string(var_15.as_str());
    }
}

pub fn serialize_structure_batch_detect_syntax_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDetectSyntaxInput,
) {
    if let Some(var_16) = &input.text_list {
        let mut array_17 = object.key("TextList").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18);
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.language_code {
        object.key("LanguageCode").string(var_19.as_str());
    }
}

pub fn serialize_structure_classify_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClassifyDocumentInput,
) {
    if let Some(var_20) = &input.text {
        object.key("Text").string(var_20);
    }
    if let Some(var_21) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_21);
    }
}

pub fn serialize_structure_contains_pii_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ContainsPiiEntitiesInput,
) {
    if let Some(var_22) = &input.text {
        object.key("Text").string(var_22);
    }
    if let Some(var_23) = &input.language_code {
        object.key("LanguageCode").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentClassifierInput,
) {
    if let Some(var_24) = &input.document_classifier_name {
        object.key("DocumentClassifierName").string(var_24);
    }
    if let Some(var_25) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_25);
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.input_data_config {
        let mut object_31 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_document_classifier_input_data_config(
            &mut object_31,
            var_30,
        );
        object_31.finish();
    }
    if let Some(var_32) = &input.output_data_config {
        let mut object_33 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_document_classifier_output_data_config(
            &mut object_33,
            var_32,
        );
        object_33.finish();
    }
    if let Some(var_34) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_34);
    }
    if let Some(var_35) = &input.language_code {
        object.key("LanguageCode").string(var_35.as_str());
    }
    if let Some(var_36) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_36);
    }
    if let Some(var_37) = &input.vpc_config {
        let mut object_38 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.mode {
        object.key("Mode").string(var_39.as_str());
    }
    if let Some(var_40) = &input.model_kms_key_id {
        object.key("ModelKmsKeyId").string(var_40);
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_41) = &input.endpoint_name {
        object.key("EndpointName").string(var_41);
    }
    if let Some(var_42) = &input.model_arn {
        object.key("ModelArn").string(var_42);
    }
    if let Some(var_43) = &input.desired_inference_units {
        object.key("DesiredInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_44);
    }
    if let Some(var_45) = &input.tags {
        let mut array_46 = object.key("Tags").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_49);
    }
}

pub fn serialize_structure_create_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntityRecognizerInput,
) {
    if let Some(var_50) = &input.recognizer_name {
        object.key("RecognizerName").string(var_50);
    }
    if let Some(var_51) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_51);
    }
    if let Some(var_52) = &input.tags {
        let mut array_53 = object.key("Tags").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_55, item_54);
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.input_data_config {
        let mut object_57 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_input_data_config(
            &mut object_57,
            var_56,
        );
        object_57.finish();
    }
    if let Some(var_58) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_58);
    }
    if let Some(var_59) = &input.language_code {
        object.key("LanguageCode").string(var_59.as_str());
    }
    if let Some(var_60) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_60);
    }
    if let Some(var_61) = &input.vpc_config {
        let mut object_62 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_62, var_61);
        object_62.finish();
    }
    if let Some(var_63) = &input.model_kms_key_id {
        object.key("ModelKmsKeyId").string(var_63);
    }
}

pub fn serialize_structure_delete_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentClassifierInput,
) {
    if let Some(var_64) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_64);
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_65) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_65);
    }
}

pub fn serialize_structure_delete_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEntityRecognizerInput,
) {
    if let Some(var_66) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_66);
    }
}

pub fn serialize_structure_describe_document_classification_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentClassificationJobInput,
) {
    if let Some(var_67) = &input.job_id {
        object.key("JobId").string(var_67);
    }
}

pub fn serialize_structure_describe_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentClassifierInput,
) {
    if let Some(var_68) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_68);
    }
}

pub fn serialize_structure_describe_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDominantLanguageDetectionJobInput,
) {
    if let Some(var_69) = &input.job_id {
        object.key("JobId").string(var_69);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_70) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_70);
    }
}

pub fn serialize_structure_describe_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntitiesDetectionJobInput,
) {
    if let Some(var_71) = &input.job_id {
        object.key("JobId").string(var_71);
    }
}

pub fn serialize_structure_describe_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntityRecognizerInput,
) {
    if let Some(var_72) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_72);
    }
}

pub fn serialize_structure_describe_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsDetectionJobInput,
) {
    if let Some(var_73) = &input.job_id {
        object.key("JobId").string(var_73);
    }
}

pub fn serialize_structure_describe_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeyPhrasesDetectionJobInput,
) {
    if let Some(var_74) = &input.job_id {
        object.key("JobId").string(var_74);
    }
}

pub fn serialize_structure_describe_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePiiEntitiesDetectionJobInput,
) {
    if let Some(var_75) = &input.job_id {
        object.key("JobId").string(var_75);
    }
}

pub fn serialize_structure_describe_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSentimentDetectionJobInput,
) {
    if let Some(var_76) = &input.job_id {
        object.key("JobId").string(var_76);
    }
}

pub fn serialize_structure_describe_topics_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTopicsDetectionJobInput,
) {
    if let Some(var_77) = &input.job_id {
        object.key("JobId").string(var_77);
    }
}

pub fn serialize_structure_detect_dominant_language_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectDominantLanguageInput,
) {
    if let Some(var_78) = &input.text {
        object.key("Text").string(var_78);
    }
}

pub fn serialize_structure_detect_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectEntitiesInput,
) {
    if let Some(var_79) = &input.text {
        object.key("Text").string(var_79);
    }
    if let Some(var_80) = &input.language_code {
        object.key("LanguageCode").string(var_80.as_str());
    }
    if let Some(var_81) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_81);
    }
}

pub fn serialize_structure_detect_key_phrases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectKeyPhrasesInput,
) {
    if let Some(var_82) = &input.text {
        object.key("Text").string(var_82);
    }
    if let Some(var_83) = &input.language_code {
        object.key("LanguageCode").string(var_83.as_str());
    }
}

pub fn serialize_structure_detect_pii_entities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectPiiEntitiesInput,
) {
    if let Some(var_84) = &input.text {
        object.key("Text").string(var_84);
    }
    if let Some(var_85) = &input.language_code {
        object.key("LanguageCode").string(var_85.as_str());
    }
}

pub fn serialize_structure_detect_sentiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectSentimentInput,
) {
    if let Some(var_86) = &input.text {
        object.key("Text").string(var_86);
    }
    if let Some(var_87) = &input.language_code {
        object.key("LanguageCode").string(var_87.as_str());
    }
}

pub fn serialize_structure_detect_syntax_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectSyntaxInput,
) {
    if let Some(var_88) = &input.text {
        object.key("Text").string(var_88);
    }
    if let Some(var_89) = &input.language_code {
        object.key("LanguageCode").string(var_89.as_str());
    }
}

pub fn serialize_structure_list_document_classification_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentClassificationJobsInput,
) {
    if let Some(var_90) = &input.filter {
        let mut object_91 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_document_classification_job_filter(
            &mut object_91,
            var_90,
        );
        object_91.finish();
    }
    if let Some(var_92) = &input.next_token {
        object.key("NextToken").string(var_92);
    }
    if let Some(var_93) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_93).into()),
        );
    }
}

pub fn serialize_structure_list_document_classifiers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentClassifiersInput,
) {
    if let Some(var_94) = &input.filter {
        let mut object_95 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_document_classifier_filter(&mut object_95, var_94);
        object_95.finish();
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96);
    }
    if let Some(var_97) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
}

pub fn serialize_structure_list_dominant_language_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDominantLanguageDetectionJobsInput,
) {
    if let Some(var_98) = &input.filter {
        let mut object_99 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_dominant_language_detection_job_filter(
            &mut object_99,
            var_98,
        );
        object_99.finish();
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100);
    }
    if let Some(var_101) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_101).into()),
        );
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_102) = &input.filter {
        let mut object_103 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_endpoint_filter(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104);
    }
    if let Some(var_105) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_105).into()),
        );
    }
}

pub fn serialize_structure_list_entities_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitiesDetectionJobsInput,
) {
    if let Some(var_106) = &input.filter {
        let mut object_107 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_entities_detection_job_filter(
            &mut object_107,
            var_106,
        );
        object_107.finish();
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108);
    }
    if let Some(var_109) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
}

pub fn serialize_structure_list_entity_recognizers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityRecognizersInput,
) {
    if let Some(var_110) = &input.filter {
        let mut object_111 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_filter(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
    if let Some(var_113) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
}

pub fn serialize_structure_list_events_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEventsDetectionJobsInput,
) {
    if let Some(var_114) = &input.filter {
        let mut object_115 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_events_detection_job_filter(&mut object_115, var_114);
        object_115.finish();
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116);
    }
    if let Some(var_117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
}

pub fn serialize_structure_list_key_phrases_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListKeyPhrasesDetectionJobsInput,
) {
    if let Some(var_118) = &input.filter {
        let mut object_119 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_key_phrases_detection_job_filter(
            &mut object_119,
            var_118,
        );
        object_119.finish();
    }
    if let Some(var_120) = &input.next_token {
        object.key("NextToken").string(var_120);
    }
    if let Some(var_121) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
}

pub fn serialize_structure_list_pii_entities_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPiiEntitiesDetectionJobsInput,
) {
    if let Some(var_122) = &input.filter {
        let mut object_123 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_pii_entities_detection_job_filter(
            &mut object_123,
            var_122,
        );
        object_123.finish();
    }
    if let Some(var_124) = &input.next_token {
        object.key("NextToken").string(var_124);
    }
    if let Some(var_125) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
}

pub fn serialize_structure_list_sentiment_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSentimentDetectionJobsInput,
) {
    if let Some(var_126) = &input.filter {
        let mut object_127 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_sentiment_detection_job_filter(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.next_token {
        object.key("NextToken").string(var_128);
    }
    if let Some(var_129) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_130) = &input.resource_arn {
        object.key("ResourceArn").string(var_130);
    }
}

pub fn serialize_structure_list_topics_detection_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTopicsDetectionJobsInput,
) {
    if let Some(var_131) = &input.filter {
        let mut object_132 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_topics_detection_job_filter(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.next_token {
        object.key("NextToken").string(var_133);
    }
    if let Some(var_134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
}

pub fn serialize_structure_start_document_classification_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDocumentClassificationJobInput,
) {
    if let Some(var_135) = &input.job_name {
        object.key("JobName").string(var_135);
    }
    if let Some(var_136) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_136);
    }
    if let Some(var_137) = &input.input_data_config {
        let mut object_138 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_138, var_137);
        object_138.finish();
    }
    if let Some(var_139) = &input.output_data_config {
        let mut object_140 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_140, var_139);
        object_140.finish();
    }
    if let Some(var_141) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_141);
    }
    if let Some(var_142) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_142);
    }
    if let Some(var_143) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_143);
    }
    if let Some(var_144) = &input.vpc_config {
        let mut object_145 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("Tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_149, item_148);
                object_149.finish();
            }
        }
        array_147.finish();
    }
}

pub fn serialize_structure_start_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDominantLanguageDetectionJobInput,
) {
    if let Some(var_150) = &input.input_data_config {
        let mut object_151 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_151, var_150);
        object_151.finish();
    }
    if let Some(var_152) = &input.output_data_config {
        let mut object_153 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_154);
    }
    if let Some(var_155) = &input.job_name {
        object.key("JobName").string(var_155);
    }
    if let Some(var_156) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_156);
    }
    if let Some(var_157) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_157);
    }
    if let Some(var_158) = &input.vpc_config {
        let mut object_159 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_159, var_158);
        object_159.finish();
    }
    if let Some(var_160) = &input.tags {
        let mut array_161 = object.key("Tags").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_163, item_162);
                object_163.finish();
            }
        }
        array_161.finish();
    }
}

pub fn serialize_structure_start_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEntitiesDetectionJobInput,
) {
    if let Some(var_164) = &input.input_data_config {
        let mut object_165 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_165, var_164);
        object_165.finish();
    }
    if let Some(var_166) = &input.output_data_config {
        let mut object_167 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_167, var_166);
        object_167.finish();
    }
    if let Some(var_168) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_168);
    }
    if let Some(var_169) = &input.job_name {
        object.key("JobName").string(var_169);
    }
    if let Some(var_170) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_170);
    }
    if let Some(var_171) = &input.language_code {
        object.key("LanguageCode").string(var_171.as_str());
    }
    if let Some(var_172) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_172);
    }
    if let Some(var_173) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_173);
    }
    if let Some(var_174) = &input.vpc_config {
        let mut object_175 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_175, var_174);
        object_175.finish();
    }
    if let Some(var_176) = &input.tags {
        let mut array_177 = object.key("Tags").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
}

pub fn serialize_structure_start_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEventsDetectionJobInput,
) {
    if let Some(var_180) = &input.input_data_config {
        let mut object_181 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_181, var_180);
        object_181.finish();
    }
    if let Some(var_182) = &input.output_data_config {
        let mut object_183 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_183, var_182);
        object_183.finish();
    }
    if let Some(var_184) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_184);
    }
    if let Some(var_185) = &input.job_name {
        object.key("JobName").string(var_185);
    }
    if let Some(var_186) = &input.language_code {
        object.key("LanguageCode").string(var_186.as_str());
    }
    if let Some(var_187) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_187);
    }
    if let Some(var_188) = &input.target_event_types {
        let mut array_189 = object.key("TargetEventTypes").start_array();
        for item_190 in var_188 {
            {
                array_189.value().string(item_190);
            }
        }
        array_189.finish();
    }
    if let Some(var_191) = &input.tags {
        let mut array_192 = object.key("Tags").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_194, item_193);
                object_194.finish();
            }
        }
        array_192.finish();
    }
}

pub fn serialize_structure_start_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartKeyPhrasesDetectionJobInput,
) {
    if let Some(var_195) = &input.input_data_config {
        let mut object_196 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_196, var_195);
        object_196.finish();
    }
    if let Some(var_197) = &input.output_data_config {
        let mut object_198 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_198, var_197);
        object_198.finish();
    }
    if let Some(var_199) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_199);
    }
    if let Some(var_200) = &input.job_name {
        object.key("JobName").string(var_200);
    }
    if let Some(var_201) = &input.language_code {
        object.key("LanguageCode").string(var_201.as_str());
    }
    if let Some(var_202) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_202);
    }
    if let Some(var_203) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_203);
    }
    if let Some(var_204) = &input.vpc_config {
        let mut object_205 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_205, var_204);
        object_205.finish();
    }
    if let Some(var_206) = &input.tags {
        let mut array_207 = object.key("Tags").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_209, item_208);
                object_209.finish();
            }
        }
        array_207.finish();
    }
}

pub fn serialize_structure_start_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPiiEntitiesDetectionJobInput,
) {
    if let Some(var_210) = &input.input_data_config {
        let mut object_211 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_211, var_210);
        object_211.finish();
    }
    if let Some(var_212) = &input.output_data_config {
        let mut object_213 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_213, var_212);
        object_213.finish();
    }
    if let Some(var_214) = &input.mode {
        object.key("Mode").string(var_214.as_str());
    }
    if let Some(var_215) = &input.redaction_config {
        let mut object_216 = object.key("RedactionConfig").start_object();
        crate::json_ser::serialize_structure_redaction_config(&mut object_216, var_215);
        object_216.finish();
    }
    if let Some(var_217) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_217);
    }
    if let Some(var_218) = &input.job_name {
        object.key("JobName").string(var_218);
    }
    if let Some(var_219) = &input.language_code {
        object.key("LanguageCode").string(var_219.as_str());
    }
    if let Some(var_220) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_220);
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_start_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSentimentDetectionJobInput,
) {
    if let Some(var_225) = &input.input_data_config {
        let mut object_226 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.output_data_config {
        let mut object_228 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_229);
    }
    if let Some(var_230) = &input.job_name {
        object.key("JobName").string(var_230);
    }
    if let Some(var_231) = &input.language_code {
        object.key("LanguageCode").string(var_231.as_str());
    }
    if let Some(var_232) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_232);
    }
    if let Some(var_233) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_233);
    }
    if let Some(var_234) = &input.vpc_config {
        let mut object_235 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_235, var_234);
        object_235.finish();
    }
    if let Some(var_236) = &input.tags {
        let mut array_237 = object.key("Tags").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_239, item_238);
                object_239.finish();
            }
        }
        array_237.finish();
    }
}

pub fn serialize_structure_start_topics_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTopicsDetectionJobInput,
) {
    if let Some(var_240) = &input.input_data_config {
        let mut object_241 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_241, var_240);
        object_241.finish();
    }
    if let Some(var_242) = &input.output_data_config {
        let mut object_243 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_243, var_242);
        object_243.finish();
    }
    if let Some(var_244) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_244);
    }
    if let Some(var_245) = &input.job_name {
        object.key("JobName").string(var_245);
    }
    if let Some(var_246) = &input.number_of_topics {
        object.key("NumberOfTopics").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_247);
    }
    if let Some(var_248) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_248);
    }
    if let Some(var_249) = &input.vpc_config {
        let mut object_250 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_250, var_249);
        object_250.finish();
    }
    if let Some(var_251) = &input.tags {
        let mut array_252 = object.key("Tags").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_254, item_253);
                object_254.finish();
            }
        }
        array_252.finish();
    }
}

pub fn serialize_structure_stop_dominant_language_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDominantLanguageDetectionJobInput,
) {
    if let Some(var_255) = &input.job_id {
        object.key("JobId").string(var_255);
    }
}

pub fn serialize_structure_stop_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEntitiesDetectionJobInput,
) {
    if let Some(var_256) = &input.job_id {
        object.key("JobId").string(var_256);
    }
}

pub fn serialize_structure_stop_events_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEventsDetectionJobInput,
) {
    if let Some(var_257) = &input.job_id {
        object.key("JobId").string(var_257);
    }
}

pub fn serialize_structure_stop_key_phrases_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopKeyPhrasesDetectionJobInput,
) {
    if let Some(var_258) = &input.job_id {
        object.key("JobId").string(var_258);
    }
}

pub fn serialize_structure_stop_pii_entities_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPiiEntitiesDetectionJobInput,
) {
    if let Some(var_259) = &input.job_id {
        object.key("JobId").string(var_259);
    }
}

pub fn serialize_structure_stop_sentiment_detection_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSentimentDetectionJobInput,
) {
    if let Some(var_260) = &input.job_id {
        object.key("JobId").string(var_260);
    }
}

pub fn serialize_structure_stop_training_document_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingDocumentClassifierInput,
) {
    if let Some(var_261) = &input.document_classifier_arn {
        object.key("DocumentClassifierArn").string(var_261);
    }
}

pub fn serialize_structure_stop_training_entity_recognizer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingEntityRecognizerInput,
) {
    if let Some(var_262) = &input.entity_recognizer_arn {
        object.key("EntityRecognizerArn").string(var_262);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_263) = &input.resource_arn {
        object.key("ResourceArn").string(var_263);
    }
    if let Some(var_264) = &input.tags {
        let mut array_265 = object.key("Tags").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_268) = &input.resource_arn {
        object.key("ResourceArn").string(var_268);
    }
    if let Some(var_269) = &input.tag_keys {
        let mut array_270 = object.key("TagKeys").start_array();
        for item_271 in var_269 {
            {
                array_270.value().string(item_271);
            }
        }
        array_270.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_272) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_272);
    }
    if let Some(var_273) = &input.desired_inference_units {
        object.key("DesiredInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_273).into()),
        );
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_274) = &input.key {
        object.key("Key").string(var_274);
    }
    if let Some(var_275) = &input.value {
        object.key("Value").string(var_275);
    }
}

pub fn serialize_structure_document_classifier_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierInputDataConfig,
) {
    if let Some(var_276) = &input.data_format {
        object.key("DataFormat").string(var_276.as_str());
    }
    if let Some(var_277) = &input.s3_uri {
        object.key("S3Uri").string(var_277);
    }
    if let Some(var_278) = &input.label_delimiter {
        object.key("LabelDelimiter").string(var_278);
    }
    if let Some(var_279) = &input.augmented_manifests {
        let mut array_280 = object.key("AugmentedManifests").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_augmented_manifests_list_item(
                    &mut object_282,
                    item_281,
                );
                object_282.finish();
            }
        }
        array_280.finish();
    }
}

pub fn serialize_structure_document_classifier_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierOutputDataConfig,
) {
    if let Some(var_283) = &input.s3_uri {
        object.key("S3Uri").string(var_283);
    }
    if let Some(var_284) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_284);
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_285) = &input.security_group_ids {
        let mut array_286 = object.key("SecurityGroupIds").start_array();
        for item_287 in var_285 {
            {
                array_286.value().string(item_287);
            }
        }
        array_286.finish();
    }
    if let Some(var_288) = &input.subnets {
        let mut array_289 = object.key("Subnets").start_array();
        for item_290 in var_288 {
            {
                array_289.value().string(item_290);
            }
        }
        array_289.finish();
    }
}

pub fn serialize_structure_entity_recognizer_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerInputDataConfig,
) {
    if let Some(var_291) = &input.data_format {
        object.key("DataFormat").string(var_291.as_str());
    }
    if let Some(var_292) = &input.entity_types {
        let mut array_293 = object.key("EntityTypes").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_entity_types_list_item(
                    &mut object_295,
                    item_294,
                );
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.documents {
        let mut object_297 = object.key("Documents").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_documents(&mut object_297, var_296);
        object_297.finish();
    }
    if let Some(var_298) = &input.annotations {
        let mut object_299 = object.key("Annotations").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_annotations(
            &mut object_299,
            var_298,
        );
        object_299.finish();
    }
    if let Some(var_300) = &input.entity_list {
        let mut object_301 = object.key("EntityList").start_object();
        crate::json_ser::serialize_structure_entity_recognizer_entity_list(
            &mut object_301,
            var_300,
        );
        object_301.finish();
    }
    if let Some(var_302) = &input.augmented_manifests {
        let mut array_303 = object.key("AugmentedManifests").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_augmented_manifests_list_item(
                    &mut object_305,
                    item_304,
                );
                object_305.finish();
            }
        }
        array_303.finish();
    }
}

pub fn serialize_structure_document_classification_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassificationJobFilter,
) {
    if let Some(var_306) = &input.job_name {
        object.key("JobName").string(var_306);
    }
    if let Some(var_307) = &input.job_status {
        object.key("JobStatus").string(var_307.as_str());
    }
    if let Some(var_308) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_308, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_309) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_309, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_document_classifier_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentClassifierFilter,
) {
    if let Some(var_310) = &input.status {
        object.key("Status").string(var_310.as_str());
    }
    if let Some(var_311) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_311, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_312) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_312, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_dominant_language_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DominantLanguageDetectionJobFilter,
) {
    if let Some(var_313) = &input.job_name {
        object.key("JobName").string(var_313);
    }
    if let Some(var_314) = &input.job_status {
        object.key("JobStatus").string(var_314.as_str());
    }
    if let Some(var_315) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_315, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_316) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_316, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_endpoint_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointFilter,
) {
    if let Some(var_317) = &input.model_arn {
        object.key("ModelArn").string(var_317);
    }
    if let Some(var_318) = &input.status {
        object.key("Status").string(var_318.as_str());
    }
    if let Some(var_319) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_319, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_320) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_320, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_entities_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntitiesDetectionJobFilter,
) {
    if let Some(var_321) = &input.job_name {
        object.key("JobName").string(var_321);
    }
    if let Some(var_322) = &input.job_status {
        object.key("JobStatus").string(var_322.as_str());
    }
    if let Some(var_323) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_323, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_324) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_324, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_entity_recognizer_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerFilter,
) {
    if let Some(var_325) = &input.status {
        object.key("Status").string(var_325.as_str());
    }
    if let Some(var_326) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_326, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_327) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_327, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_events_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventsDetectionJobFilter,
) {
    if let Some(var_328) = &input.job_name {
        object.key("JobName").string(var_328);
    }
    if let Some(var_329) = &input.job_status {
        object.key("JobStatus").string(var_329.as_str());
    }
    if let Some(var_330) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_330, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_331) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_331, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_key_phrases_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyPhrasesDetectionJobFilter,
) {
    if let Some(var_332) = &input.job_name {
        object.key("JobName").string(var_332);
    }
    if let Some(var_333) = &input.job_status {
        object.key("JobStatus").string(var_333.as_str());
    }
    if let Some(var_334) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_334, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_335) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_335, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_pii_entities_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PiiEntitiesDetectionJobFilter,
) {
    if let Some(var_336) = &input.job_name {
        object.key("JobName").string(var_336);
    }
    if let Some(var_337) = &input.job_status {
        object.key("JobStatus").string(var_337.as_str());
    }
    if let Some(var_338) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_338, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_339) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_339, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_sentiment_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentDetectionJobFilter,
) {
    if let Some(var_340) = &input.job_name {
        object.key("JobName").string(var_340);
    }
    if let Some(var_341) = &input.job_status {
        object.key("JobStatus").string(var_341.as_str());
    }
    if let Some(var_342) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_342, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_343) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_343, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_topics_detection_job_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicsDetectionJobFilter,
) {
    if let Some(var_344) = &input.job_name {
        object.key("JobName").string(var_344);
    }
    if let Some(var_345) = &input.job_status {
        object.key("JobStatus").string(var_345.as_str());
    }
    if let Some(var_346) = &input.submit_time_before {
        object
            .key("SubmitTimeBefore")
            .instant(var_346, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_347) = &input.submit_time_after {
        object
            .key("SubmitTimeAfter")
            .instant(var_347, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_348) = &input.s3_uri {
        object.key("S3Uri").string(var_348);
    }
    if let Some(var_349) = &input.input_format {
        object.key("InputFormat").string(var_349.as_str());
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_350) = &input.s3_uri {
        object.key("S3Uri").string(var_350);
    }
    if let Some(var_351) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_351);
    }
}

pub fn serialize_structure_redaction_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedactionConfig,
) {
    if let Some(var_352) = &input.pii_entity_types {
        let mut array_353 = object.key("PiiEntityTypes").start_array();
        for item_354 in var_352 {
            {
                array_353.value().string(item_354.as_str());
            }
        }
        array_353.finish();
    }
    if let Some(var_355) = &input.mask_mode {
        object.key("MaskMode").string(var_355.as_str());
    }
    if let Some(var_356) = &input.mask_character {
        object.key("MaskCharacter").string(var_356);
    }
}

pub fn serialize_structure_augmented_manifests_list_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AugmentedManifestsListItem,
) {
    if let Some(var_357) = &input.s3_uri {
        object.key("S3Uri").string(var_357);
    }
    if let Some(var_358) = &input.attribute_names {
        let mut array_359 = object.key("AttributeNames").start_array();
        for item_360 in var_358 {
            {
                array_359.value().string(item_360);
            }
        }
        array_359.finish();
    }
}

pub fn serialize_structure_entity_types_list_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityTypesListItem,
) {
    if let Some(var_361) = &input.r#type {
        object.key("Type").string(var_361);
    }
}

pub fn serialize_structure_entity_recognizer_documents(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerDocuments,
) {
    if let Some(var_362) = &input.s3_uri {
        object.key("S3Uri").string(var_362);
    }
}

pub fn serialize_structure_entity_recognizer_annotations(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerAnnotations,
) {
    if let Some(var_363) = &input.s3_uri {
        object.key("S3Uri").string(var_363);
    }
}

pub fn serialize_structure_entity_recognizer_entity_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityRecognizerEntityList,
) {
    if let Some(var_364) = &input.s3_uri {
        object.key("S3Uri").string(var_364);
    }
}
