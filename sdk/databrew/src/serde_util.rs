// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_delete_recipe_version_output_correct_errors(
    mut builder: crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionOutputBuilder,
) -> crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_dataset_output_correct_errors(
    mut builder: crate::operation::create_dataset::builders::CreateDatasetOutputBuilder,
) -> crate::operation::create_dataset::builders::CreateDatasetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_profile_job_output_correct_errors(
    mut builder: crate::operation::create_profile_job::builders::CreateProfileJobOutputBuilder,
) -> crate::operation::create_profile_job::builders::CreateProfileJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_recipe_output_correct_errors(
    mut builder: crate::operation::create_recipe::builders::CreateRecipeOutputBuilder,
) -> crate::operation::create_recipe::builders::CreateRecipeOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_recipe_job_output_correct_errors(
    mut builder: crate::operation::create_recipe_job::builders::CreateRecipeJobOutputBuilder,
) -> crate::operation::create_recipe_job::builders::CreateRecipeJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_ruleset_output_correct_errors(
    mut builder: crate::operation::create_ruleset::builders::CreateRulesetOutputBuilder,
) -> crate::operation::create_ruleset::builders::CreateRulesetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_schedule_output_correct_errors(
    mut builder: crate::operation::create_schedule::builders::CreateScheduleOutputBuilder,
) -> crate::operation::create_schedule::builders::CreateScheduleOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_dataset_output_correct_errors(
    mut builder: crate::operation::delete_dataset::builders::DeleteDatasetOutputBuilder,
) -> crate::operation::delete_dataset::builders::DeleteDatasetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_job_output_correct_errors(
    mut builder: crate::operation::delete_job::builders::DeleteJobOutputBuilder,
) -> crate::operation::delete_job::builders::DeleteJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_project_output_correct_errors(
    mut builder: crate::operation::delete_project::builders::DeleteProjectOutputBuilder,
) -> crate::operation::delete_project::builders::DeleteProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_recipe_version_output_correct_errors(
    mut builder: crate::operation::delete_recipe_version::builders::DeleteRecipeVersionOutputBuilder,
) -> crate::operation::delete_recipe_version::builders::DeleteRecipeVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.recipe_version.is_none() {
        builder.recipe_version = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_ruleset_output_correct_errors(
    mut builder: crate::operation::delete_ruleset::builders::DeleteRulesetOutputBuilder,
) -> crate::operation::delete_ruleset::builders::DeleteRulesetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_schedule_output_correct_errors(
    mut builder: crate::operation::delete_schedule::builders::DeleteScheduleOutputBuilder,
) -> crate::operation::delete_schedule::builders::DeleteScheduleOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_dataset_output_correct_errors(
    mut builder: crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder,
) -> crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::InputBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_job_output_correct_errors(
    mut builder: crate::operation::describe_job::builders::DescribeJobOutputBuilder,
) -> crate::operation::describe_job::builders::DescribeJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_job_run_output_correct_errors(
    mut builder: crate::operation::describe_job_run::builders::DescribeJobRunOutputBuilder,
) -> crate::operation::describe_job_run::builders::DescribeJobRunOutputBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_project_output_correct_errors(
    mut builder: crate::operation::describe_project::builders::DescribeProjectOutputBuilder,
) -> crate::operation::describe_project::builders::DescribeProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_recipe_output_correct_errors(
    mut builder: crate::operation::describe_recipe::builders::DescribeRecipeOutputBuilder,
) -> crate::operation::describe_recipe::builders::DescribeRecipeOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_ruleset_output_correct_errors(
    mut builder: crate::operation::describe_ruleset::builders::DescribeRulesetOutputBuilder,
) -> crate::operation::describe_ruleset::builders::DescribeRulesetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_schedule_output_correct_errors(
    mut builder: crate::operation::describe_schedule::builders::DescribeScheduleOutputBuilder,
) -> crate::operation::describe_schedule::builders::DescribeScheduleOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_datasets_output_correct_errors(
    mut builder: crate::operation::list_datasets::builders::ListDatasetsOutputBuilder,
) -> crate::operation::list_datasets::builders::ListDatasetsOutputBuilder {
    if builder.datasets.is_none() {
        builder.datasets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_job_runs_output_correct_errors(
    mut builder: crate::operation::list_job_runs::builders::ListJobRunsOutputBuilder,
) -> crate::operation::list_job_runs::builders::ListJobRunsOutputBuilder {
    if builder.job_runs.is_none() {
        builder.job_runs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_jobs_output_correct_errors(
    mut builder: crate::operation::list_jobs::builders::ListJobsOutputBuilder,
) -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
    if builder.jobs.is_none() {
        builder.jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_projects_output_correct_errors(
    mut builder: crate::operation::list_projects::builders::ListProjectsOutputBuilder,
) -> crate::operation::list_projects::builders::ListProjectsOutputBuilder {
    if builder.projects.is_none() {
        builder.projects = Some(Default::default())
    }
    builder
}

pub(crate) fn list_recipe_versions_output_correct_errors(
    mut builder: crate::operation::list_recipe_versions::builders::ListRecipeVersionsOutputBuilder,
) -> crate::operation::list_recipe_versions::builders::ListRecipeVersionsOutputBuilder {
    if builder.recipes.is_none() {
        builder.recipes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_recipes_output_correct_errors(
    mut builder: crate::operation::list_recipes::builders::ListRecipesOutputBuilder,
) -> crate::operation::list_recipes::builders::ListRecipesOutputBuilder {
    if builder.recipes.is_none() {
        builder.recipes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rulesets_output_correct_errors(
    mut builder: crate::operation::list_rulesets::builders::ListRulesetsOutputBuilder,
) -> crate::operation::list_rulesets::builders::ListRulesetsOutputBuilder {
    if builder.rulesets.is_none() {
        builder.rulesets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_schedules_output_correct_errors(
    mut builder: crate::operation::list_schedules::builders::ListSchedulesOutputBuilder,
) -> crate::operation::list_schedules::builders::ListSchedulesOutputBuilder {
    if builder.schedules.is_none() {
        builder.schedules = Some(Default::default())
    }
    builder
}

pub(crate) fn publish_recipe_output_correct_errors(
    mut builder: crate::operation::publish_recipe::builders::PublishRecipeOutputBuilder,
) -> crate::operation::publish_recipe::builders::PublishRecipeOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn send_project_session_action_output_correct_errors(
    mut builder: crate::operation::send_project_session_action::builders::SendProjectSessionActionOutputBuilder,
) -> crate::operation::send_project_session_action::builders::SendProjectSessionActionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn start_job_run_output_correct_errors(
    mut builder: crate::operation::start_job_run::builders::StartJobRunOutputBuilder,
) -> crate::operation::start_job_run::builders::StartJobRunOutputBuilder {
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_project_session_output_correct_errors(
    mut builder: crate::operation::start_project_session::builders::StartProjectSessionOutputBuilder,
) -> crate::operation::start_project_session::builders::StartProjectSessionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_job_run_output_correct_errors(
    mut builder: crate::operation::stop_job_run::builders::StopJobRunOutputBuilder,
) -> crate::operation::stop_job_run::builders::StopJobRunOutputBuilder {
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_dataset_output_correct_errors(
    mut builder: crate::operation::update_dataset::builders::UpdateDatasetOutputBuilder,
) -> crate::operation::update_dataset::builders::UpdateDatasetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_profile_job_output_correct_errors(
    mut builder: crate::operation::update_profile_job::builders::UpdateProfileJobOutputBuilder,
) -> crate::operation::update_profile_job::builders::UpdateProfileJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_project_output_correct_errors(
    mut builder: crate::operation::update_project::builders::UpdateProjectOutputBuilder,
) -> crate::operation::update_project::builders::UpdateProjectOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_recipe_output_correct_errors(
    mut builder: crate::operation::update_recipe::builders::UpdateRecipeOutputBuilder,
) -> crate::operation::update_recipe::builders::UpdateRecipeOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_recipe_job_output_correct_errors(
    mut builder: crate::operation::update_recipe_job::builders::UpdateRecipeJobOutputBuilder,
) -> crate::operation::update_recipe_job::builders::UpdateRecipeJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_ruleset_output_correct_errors(
    mut builder: crate::operation::update_ruleset::builders::UpdateRulesetOutputBuilder,
) -> crate::operation::update_ruleset::builders::UpdateRulesetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_schedule_output_correct_errors(
    mut builder: crate::operation::update_schedule::builders::UpdateScheduleOutputBuilder,
) -> crate::operation::update_schedule::builders::UpdateScheduleOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn recipe_reference_correct_errors(
    mut builder: crate::types::builders::RecipeReferenceBuilder,
) -> crate::types::builders::RecipeReferenceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn sample_correct_errors(mut builder: crate::types::builders::SampleBuilder) -> crate::types::builders::SampleBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SampleType>().ok()
    }
    builder
}

pub(crate) fn data_catalog_input_definition_correct_errors(
    mut builder: crate::types::builders::DataCatalogInputDefinitionBuilder,
) -> crate::types::builders::DataCatalogInputDefinitionBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn data_catalog_output_correct_errors(
    mut builder: crate::types::builders::DataCatalogOutputBuilder,
) -> crate::types::builders::DataCatalogOutputBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn database_input_definition_correct_errors(
    mut builder: crate::types::builders::DatabaseInputDefinitionBuilder,
) -> crate::types::builders::DatabaseInputDefinitionBuilder {
    if builder.glue_connection_name.is_none() {
        builder.glue_connection_name = Some(Default::default())
    }
    builder
}

pub(crate) fn database_output_correct_errors(
    mut builder: crate::types::builders::DatabaseOutputBuilder,
) -> crate::types::builders::DatabaseOutputBuilder {
    if builder.glue_connection_name.is_none() {
        builder.glue_connection_name = Some(Default::default())
    }
    if builder.database_options.is_none() {
        builder.database_options = {
            let builder = crate::types::builders::DatabaseTableOutputOptionsBuilder::default();
            crate::serde_util::database_table_output_options_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn dataset_correct_errors(mut builder: crate::types::builders::DatasetBuilder) -> crate::types::builders::DatasetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::InputBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn entity_detector_configuration_correct_errors(
    mut builder: crate::types::builders::EntityDetectorConfigurationBuilder,
) -> crate::types::builders::EntityDetectorConfigurationBuilder {
    if builder.entity_types.is_none() {
        builder.entity_types = Some(Default::default())
    }
    builder
}

pub(crate) fn files_limit_correct_errors(mut builder: crate::types::builders::FilesLimitBuilder) -> crate::types::builders::FilesLimitBuilder {
    if builder.max_files.is_none() {
        builder.max_files = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_expression_correct_errors(
    mut builder: crate::types::builders::FilterExpressionBuilder,
) -> crate::types::builders::FilterExpressionBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.values_map.is_none() {
        builder.values_map = Some(Default::default())
    }
    builder
}

pub(crate) fn job_correct_errors(mut builder: crate::types::builders::JobBuilder) -> crate::types::builders::JobBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn output_correct_errors(mut builder: crate::types::builders::OutputBuilder) -> crate::types::builders::OutputBuilder {
    if builder.location.is_none() {
        builder.location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            crate::serde_util::s3_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn project_correct_errors(mut builder: crate::types::builders::ProjectBuilder) -> crate::types::builders::ProjectBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.recipe_name.is_none() {
        builder.recipe_name = Some(Default::default())
    }
    builder
}

pub(crate) fn recipe_correct_errors(mut builder: crate::types::builders::RecipeBuilder) -> crate::types::builders::RecipeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn recipe_step_correct_errors(mut builder: crate::types::builders::RecipeStepBuilder) -> crate::types::builders::RecipeStepBuilder {
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::RecipeActionBuilder::default();
            crate::serde_util::recipe_action_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.check_expression.is_none() {
        builder.check_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn ruleset_item_correct_errors(mut builder: crate::types::builders::RulesetItemBuilder) -> crate::types::builders::RulesetItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_correct_errors(mut builder: crate::types::builders::ScheduleBuilder) -> crate::types::builders::ScheduleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_configuration_correct_errors(
    mut builder: crate::types::builders::ValidationConfigurationBuilder,
) -> crate::types::builders::ValidationConfigurationBuilder {
    if builder.ruleset_arn.is_none() {
        builder.ruleset_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn column_statistics_configuration_correct_errors(
    mut builder: crate::types::builders::ColumnStatisticsConfigurationBuilder,
) -> crate::types::builders::ColumnStatisticsConfigurationBuilder {
    if builder.statistics.is_none() {
        builder.statistics = {
            let builder = crate::types::builders::StatisticsConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn database_table_output_options_correct_errors(
    mut builder: crate::types::builders::DatabaseTableOutputOptionsBuilder,
) -> crate::types::builders::DatabaseTableOutputOptionsBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn dataset_parameter_correct_errors(
    mut builder: crate::types::builders::DatasetParameterBuilder,
) -> crate::types::builders::DatasetParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ParameterType>().ok()
    }
    builder
}

pub(crate) fn recipe_action_correct_errors(mut builder: crate::types::builders::RecipeActionBuilder) -> crate::types::builders::RecipeActionBuilder {
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_table_output_options_correct_errors(
    mut builder: crate::types::builders::S3TableOutputOptionsBuilder,
) -> crate::types::builders::S3TableOutputOptionsBuilder {
    if builder.location.is_none() {
        builder.location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            crate::serde_util::s3_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn threshold_correct_errors(mut builder: crate::types::builders::ThresholdBuilder) -> crate::types::builders::ThresholdBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn allowed_statistics_correct_errors(
    mut builder: crate::types::builders::AllowedStatisticsBuilder,
) -> crate::types::builders::AllowedStatisticsBuilder {
    if builder.statistics.is_none() {
        builder.statistics = Some(Default::default())
    }
    builder
}

pub(crate) fn condition_expression_correct_errors(
    mut builder: crate::types::builders::ConditionExpressionBuilder,
) -> crate::types::builders::ConditionExpressionBuilder {
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    if builder.target_column.is_none() {
        builder.target_column = Some(Default::default())
    }
    builder
}

pub(crate) fn datetime_options_correct_errors(
    mut builder: crate::types::builders::DatetimeOptionsBuilder,
) -> crate::types::builders::DatetimeOptionsBuilder {
    if builder.format.is_none() {
        builder.format = Some(Default::default())
    }
    builder
}

pub(crate) fn statistic_override_correct_errors(
    mut builder: crate::types::builders::StatisticOverrideBuilder,
) -> crate::types::builders::StatisticOverrideBuilder {
    if builder.statistic.is_none() {
        builder.statistic = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}
