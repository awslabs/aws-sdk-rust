// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartProjectSessionInput {
    /// <p>The name of the project to act upon.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.</p>
    #[doc(hidden)]
    pub assume_control: bool,
}
impl StartProjectSessionInput {
    /// <p>The name of the project to act upon.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.</p>
    pub fn assume_control(&self) -> bool {
        self.assume_control
    }
}
impl StartProjectSessionInput {
    /// Creates a new builder-style object to manufacture [`StartProjectSessionInput`](crate::operation::start_project_session::StartProjectSessionInput).
    pub fn builder(
    ) -> crate::operation::start_project_session::builders::StartProjectSessionInputBuilder {
        crate::operation::start_project_session::builders::StartProjectSessionInputBuilder::default(
        )
    }
}

/// A builder for [`StartProjectSessionInput`](crate::operation::start_project_session::StartProjectSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartProjectSessionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) assume_control: std::option::Option<bool>,
}
impl StartProjectSessionInputBuilder {
    /// <p>The name of the project to act upon.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the project to act upon.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.</p>
    pub fn assume_control(mut self, input: bool) -> Self {
        self.assume_control = Some(input);
        self
    }
    /// <p>A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.</p>
    pub fn set_assume_control(mut self, input: std::option::Option<bool>) -> Self {
        self.assume_control = input;
        self
    }
    /// Consumes the builder and constructs a [`StartProjectSessionInput`](crate::operation::start_project_session::StartProjectSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_project_session::StartProjectSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_project_session::StartProjectSessionInput {
                name: self.name,
                assume_control: self.assume_control.unwrap_or_default(),
            },
        )
    }
}
