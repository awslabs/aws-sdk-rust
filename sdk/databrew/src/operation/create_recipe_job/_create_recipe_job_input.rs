// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRecipeJobInput {
    /// <p>The name of the dataset that this job processes.</p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.</p>
    #[doc(hidden)]
    pub encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>The encryption mode for the job, which can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li>
    /// <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub encryption_mode: std::option::Option<crate::types::EncryptionMode>,
    /// <p>A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.</p>
    #[doc(hidden)]
    pub log_subscription: std::option::Option<crate::types::LogSubscription>,
    /// <p>The maximum number of nodes that DataBrew can consume when the job processes data.</p>
    #[doc(hidden)]
    pub max_capacity: i32,
    /// <p>The maximum number of times to retry the job after a job run fails.</p>
    #[doc(hidden)]
    pub max_retries: i32,
    /// <p>One or more artifacts that represent the output from running the job.</p>
    #[doc(hidden)]
    pub outputs: std::option::Option<std::vec::Vec<crate::types::Output>>,
    /// <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
    #[doc(hidden)]
    pub data_catalog_outputs: std::option::Option<std::vec::Vec<crate::types::DataCatalogOutput>>,
    /// <p>Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. </p>
    #[doc(hidden)]
    pub database_outputs: std::option::Option<std::vec::Vec<crate::types::DatabaseOutput>>,
    /// <p>Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>Represents the name and version of a DataBrew recipe.</p>
    #[doc(hidden)]
    pub recipe_reference: std::option::Option<crate::types::RecipeReference>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Metadata tags to apply to this job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.</p>
    #[doc(hidden)]
    pub timeout: i32,
}
impl CreateRecipeJobInput {
    /// <p>The name of the dataset that this job processes.</p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.</p>
    pub fn encryption_key_arn(&self) -> std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The encryption mode for the job, which can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li>
    /// <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li>
    /// </ul>
    pub fn encryption_mode(&self) -> std::option::Option<&crate::types::EncryptionMode> {
        self.encryption_mode.as_ref()
    }
    /// <p>A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.</p>
    pub fn log_subscription(&self) -> std::option::Option<&crate::types::LogSubscription> {
        self.log_subscription.as_ref()
    }
    /// <p>The maximum number of nodes that DataBrew can consume when the job processes data.</p>
    pub fn max_capacity(&self) -> i32 {
        self.max_capacity
    }
    /// <p>The maximum number of times to retry the job after a job run fails.</p>
    pub fn max_retries(&self) -> i32 {
        self.max_retries
    }
    /// <p>One or more artifacts that represent the output from running the job.</p>
    pub fn outputs(&self) -> std::option::Option<&[crate::types::Output]> {
        self.outputs.as_deref()
    }
    /// <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
    pub fn data_catalog_outputs(&self) -> std::option::Option<&[crate::types::DataCatalogOutput]> {
        self.data_catalog_outputs.as_deref()
    }
    /// <p>Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. </p>
    pub fn database_outputs(&self) -> std::option::Option<&[crate::types::DatabaseOutput]> {
        self.database_outputs.as_deref()
    }
    /// <p>Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>Represents the name and version of a DataBrew recipe.</p>
    pub fn recipe_reference(&self) -> std::option::Option<&crate::types::RecipeReference> {
        self.recipe_reference.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Metadata tags to apply to this job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.</p>
    pub fn timeout(&self) -> i32 {
        self.timeout
    }
}
impl CreateRecipeJobInput {
    /// Creates a new builder-style object to manufacture [`CreateRecipeJobInput`](crate::operation::create_recipe_job::CreateRecipeJobInput).
    pub fn builder() -> crate::operation::create_recipe_job::builders::CreateRecipeJobInputBuilder {
        crate::operation::create_recipe_job::builders::CreateRecipeJobInputBuilder::default()
    }
}

/// A builder for [`CreateRecipeJobInput`](crate::operation::create_recipe_job::CreateRecipeJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateRecipeJobInputBuilder {
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
    pub(crate) encryption_mode: std::option::Option<crate::types::EncryptionMode>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) log_subscription: std::option::Option<crate::types::LogSubscription>,
    pub(crate) max_capacity: std::option::Option<i32>,
    pub(crate) max_retries: std::option::Option<i32>,
    pub(crate) outputs: std::option::Option<std::vec::Vec<crate::types::Output>>,
    pub(crate) data_catalog_outputs:
        std::option::Option<std::vec::Vec<crate::types::DataCatalogOutput>>,
    pub(crate) database_outputs: std::option::Option<std::vec::Vec<crate::types::DatabaseOutput>>,
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) recipe_reference: std::option::Option<crate::types::RecipeReference>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) timeout: std::option::Option<i32>,
}
impl CreateRecipeJobInputBuilder {
    /// <p>The name of the dataset that this job processes.</p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset that this job processes.</p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.</p>
    pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.</p>
    pub fn set_encryption_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The encryption mode for the job, which can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li>
    /// <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li>
    /// </ul>
    pub fn encryption_mode(mut self, input: crate::types::EncryptionMode) -> Self {
        self.encryption_mode = Some(input);
        self
    }
    /// <p>The encryption mode for the job, which can be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li>
    /// <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li>
    /// </ul>
    pub fn set_encryption_mode(
        mut self,
        input: std::option::Option<crate::types::EncryptionMode>,
    ) -> Self {
        self.encryption_mode = input;
        self
    }
    /// <p>A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.</p>
    pub fn log_subscription(mut self, input: crate::types::LogSubscription) -> Self {
        self.log_subscription = Some(input);
        self
    }
    /// <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.</p>
    pub fn set_log_subscription(
        mut self,
        input: std::option::Option<crate::types::LogSubscription>,
    ) -> Self {
        self.log_subscription = input;
        self
    }
    /// <p>The maximum number of nodes that DataBrew can consume when the job processes data.</p>
    pub fn max_capacity(mut self, input: i32) -> Self {
        self.max_capacity = Some(input);
        self
    }
    /// <p>The maximum number of nodes that DataBrew can consume when the job processes data.</p>
    pub fn set_max_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.max_capacity = input;
        self
    }
    /// <p>The maximum number of times to retry the job after a job run fails.</p>
    pub fn max_retries(mut self, input: i32) -> Self {
        self.max_retries = Some(input);
        self
    }
    /// <p>The maximum number of times to retry the job after a job run fails.</p>
    pub fn set_max_retries(mut self, input: std::option::Option<i32>) -> Self {
        self.max_retries = input;
        self
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>One or more artifacts that represent the output from running the job.</p>
    pub fn outputs(mut self, input: crate::types::Output) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = Some(v);
        self
    }
    /// <p>One or more artifacts that represent the output from running the job.</p>
    pub fn set_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Output>>,
    ) -> Self {
        self.outputs = input;
        self
    }
    /// Appends an item to `data_catalog_outputs`.
    ///
    /// To override the contents of this collection use [`set_data_catalog_outputs`](Self::set_data_catalog_outputs).
    ///
    /// <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
    pub fn data_catalog_outputs(mut self, input: crate::types::DataCatalogOutput) -> Self {
        let mut v = self.data_catalog_outputs.unwrap_or_default();
        v.push(input);
        self.data_catalog_outputs = Some(v);
        self
    }
    /// <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
    pub fn set_data_catalog_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataCatalogOutput>>,
    ) -> Self {
        self.data_catalog_outputs = input;
        self
    }
    /// Appends an item to `database_outputs`.
    ///
    /// To override the contents of this collection use [`set_database_outputs`](Self::set_database_outputs).
    ///
    /// <p>Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. </p>
    pub fn database_outputs(mut self, input: crate::types::DatabaseOutput) -> Self {
        let mut v = self.database_outputs.unwrap_or_default();
        v.push(input);
        self.database_outputs = Some(v);
        self
    }
    /// <p>Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. </p>
    pub fn set_database_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DatabaseOutput>>,
    ) -> Self {
        self.database_outputs = input;
        self
    }
    /// <p>Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>Represents the name and version of a DataBrew recipe.</p>
    pub fn recipe_reference(mut self, input: crate::types::RecipeReference) -> Self {
        self.recipe_reference = Some(input);
        self
    }
    /// <p>Represents the name and version of a DataBrew recipe.</p>
    pub fn set_recipe_reference(
        mut self,
        input: std::option::Option<crate::types::RecipeReference>,
    ) -> Self {
        self.recipe_reference = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata tags to apply to this job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Metadata tags to apply to this job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = Some(input);
        self
    }
    /// <p>The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.</p>
    pub fn set_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateRecipeJobInput`](crate::operation::create_recipe_job::CreateRecipeJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_recipe_job::CreateRecipeJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_recipe_job::CreateRecipeJobInput {
            dataset_name: self.dataset_name,
            encryption_key_arn: self.encryption_key_arn,
            encryption_mode: self.encryption_mode,
            name: self.name,
            log_subscription: self.log_subscription,
            max_capacity: self.max_capacity.unwrap_or_default(),
            max_retries: self.max_retries.unwrap_or_default(),
            outputs: self.outputs,
            data_catalog_outputs: self.data_catalog_outputs,
            database_outputs: self.database_outputs,
            project_name: self.project_name,
            recipe_reference: self.recipe_reference,
            role_arn: self.role_arn,
            tags: self.tags,
            timeout: self.timeout.unwrap_or_default(),
        })
    }
}
