// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::send_project_session_action::_send_project_session_action_output::SendProjectSessionActionOutputBuilder;

pub use crate::operation::send_project_session_action::_send_project_session_action_input::SendProjectSessionActionInputBuilder;

/// Fluent builder constructing a request to `SendProjectSessionAction`.
///
/// <p>Performs a recipe step within an interactive DataBrew session that's currently open.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendProjectSessionActionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::send_project_session_action::builders::SendProjectSessionActionInputBuilder
            }
impl SendProjectSessionActionFluentBuilder {
    /// Creates a new `SendProjectSessionAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::send_project_session_action::SendProjectSessionAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::send_project_session_action::SendProjectSessionActionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::send_project_session_action::SendProjectSessionActionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::send_project_session_action::SendProjectSessionActionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn preview(mut self, input: bool) -> Self {
        self.inner = self.inner.preview(input);
        self
    }
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn set_preview(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_preview(input);
        self
    }
    /// <p>The name of the project to apply the action to.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the project to apply the action to.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn recipe_step(mut self, input: crate::types::RecipeStep) -> Self {
        self.inner = self.inner.recipe_step(input);
        self
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn set_recipe_step(mut self, input: std::option::Option<crate::types::RecipeStep>) -> Self {
        self.inner = self.inner.set_recipe_step(input);
        self
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn step_index(mut self, input: i32) -> Self {
        self.inner = self.inner.step_index(input);
        self
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn set_step_index(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_step_index(input);
        self
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn client_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_session_id(input.into());
        self
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn set_client_session_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_session_id(input);
        self
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn view_frame(mut self, input: crate::types::ViewFrame) -> Self {
        self.inner = self.inner.view_frame(input);
        self
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn set_view_frame(mut self, input: std::option::Option<crate::types::ViewFrame>) -> Self {
        self.inner = self.inner.set_view_frame(input);
        self
    }
}
