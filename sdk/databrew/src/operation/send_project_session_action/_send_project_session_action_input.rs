// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SendProjectSessionActionInput {
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub preview: ::std::option::Option<bool>,
    /// <p>The name of the project to apply the action to.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub recipe_step: ::std::option::Option<crate::types::RecipeStep>,
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub step_index: ::std::option::Option<i32>,
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub client_session_id: ::std::option::Option<::std::string::String>,
    /// <p>Represents the data being transformed during an action.</p>
    pub view_frame: ::std::option::Option<crate::types::ViewFrame>,
}
impl SendProjectSessionActionInput {
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn preview(&self) -> ::std::option::Option<bool> {
        self.preview
    }
    /// <p>The name of the project to apply the action to.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn recipe_step(&self) -> ::std::option::Option<&crate::types::RecipeStep> {
        self.recipe_step.as_ref()
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn step_index(&self) -> ::std::option::Option<i32> {
        self.step_index
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn client_session_id(&self) -> ::std::option::Option<&str> {
        self.client_session_id.as_deref()
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn view_frame(&self) -> ::std::option::Option<&crate::types::ViewFrame> {
        self.view_frame.as_ref()
    }
}
impl ::std::fmt::Debug for SendProjectSessionActionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendProjectSessionActionInput");
        formatter.field("preview", &self.preview);
        formatter.field("name", &self.name);
        formatter.field("recipe_step", &self.recipe_step);
        formatter.field("step_index", &self.step_index);
        formatter.field("client_session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("view_frame", &self.view_frame);
        formatter.finish()
    }
}
impl SendProjectSessionActionInput {
    /// Creates a new builder-style object to manufacture [`SendProjectSessionActionInput`](crate::operation::send_project_session_action::SendProjectSessionActionInput).
    pub fn builder() -> crate::operation::send_project_session_action::builders::SendProjectSessionActionInputBuilder {
        crate::operation::send_project_session_action::builders::SendProjectSessionActionInputBuilder::default()
    }
}

/// A builder for [`SendProjectSessionActionInput`](crate::operation::send_project_session_action::SendProjectSessionActionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SendProjectSessionActionInputBuilder {
    pub(crate) preview: ::std::option::Option<bool>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) recipe_step: ::std::option::Option<crate::types::RecipeStep>,
    pub(crate) step_index: ::std::option::Option<i32>,
    pub(crate) client_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) view_frame: ::std::option::Option<crate::types::ViewFrame>,
}
impl SendProjectSessionActionInputBuilder {
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn preview(mut self, input: bool) -> Self {
        self.preview = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn set_preview(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preview = input;
        self
    }
    /// <p>If true, the result of the recipe step will be returned, but not applied.</p>
    pub fn get_preview(&self) -> &::std::option::Option<bool> {
        &self.preview
    }
    /// <p>The name of the project to apply the action to.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project to apply the action to.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the project to apply the action to.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn recipe_step(mut self, input: crate::types::RecipeStep) -> Self {
        self.recipe_step = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn set_recipe_step(mut self, input: ::std::option::Option<crate::types::RecipeStep>) -> Self {
        self.recipe_step = input;
        self
    }
    /// <p>Represents a single step from a DataBrew recipe to be performed.</p>
    pub fn get_recipe_step(&self) -> &::std::option::Option<crate::types::RecipeStep> {
        &self.recipe_step
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn step_index(mut self, input: i32) -> Self {
        self.step_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn set_step_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.step_index = input;
        self
    }
    /// <p>The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.</p>
    pub fn get_step_index(&self) -> &::std::option::Option<i32> {
        &self.step_index
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn client_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn set_client_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_session_id = input;
        self
    }
    /// <p>A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.</p>
    pub fn get_client_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_session_id
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn view_frame(mut self, input: crate::types::ViewFrame) -> Self {
        self.view_frame = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn set_view_frame(mut self, input: ::std::option::Option<crate::types::ViewFrame>) -> Self {
        self.view_frame = input;
        self
    }
    /// <p>Represents the data being transformed during an action.</p>
    pub fn get_view_frame(&self) -> &::std::option::Option<crate::types::ViewFrame> {
        &self.view_frame
    }
    /// Consumes the builder and constructs a [`SendProjectSessionActionInput`](crate::operation::send_project_session_action::SendProjectSessionActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_project_session_action::SendProjectSessionActionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_project_session_action::SendProjectSessionActionInput {
            preview: self.preview,
            name: self.name,
            recipe_step: self.recipe_step,
            step_index: self.step_index,
            client_session_id: self.client_session_id,
            view_frame: self.view_frame,
        })
    }
}
impl ::std::fmt::Debug for SendProjectSessionActionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendProjectSessionActionInputBuilder");
        formatter.field("preview", &self.preview);
        formatter.field("name", &self.name);
        formatter.field("recipe_step", &self.recipe_step);
        formatter.field("step_index", &self.step_index);
        formatter.field("client_session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("view_frame", &self.view_frame);
        formatter.finish()
    }
}
