// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_recipe_version::_batch_delete_recipe_version_output::BatchDeleteRecipeVersionOutputBuilder;

pub use crate::operation::batch_delete_recipe_version::_batch_delete_recipe_version_input::BatchDeleteRecipeVersionInputBuilder;

/// Fluent builder constructing a request to `BatchDeleteRecipeVersion`.
///
/// <p>Deletes one or more versions of a recipe at a time.</p>
/// <p>The entire request will be rejected if:</p>
/// <ul>
/// <li> <p>The recipe does not exist.</p> </li>
/// <li> <p>There is an invalid version identifier in the list of versions.</p> </li>
/// <li> <p>The version list is empty.</p> </li>
/// <li> <p>The version list size exceeds 50.</p> </li>
/// <li> <p>The version list contains duplicate entries.</p> </li>
/// </ul>
/// <p>The request will complete successfully, but with partial failures, if:</p>
/// <ul>
/// <li> <p>A version does not exist.</p> </li>
/// <li> <p>A version is being used by a job.</p> </li>
/// <li> <p>You specify <code>LATEST_WORKING</code>, but it's being used by a project.</p> </li>
/// <li> <p>The version fails to be deleted.</p> </li>
/// </ul>
/// <p>The <code>LATEST_WORKING</code> version will only be deleted if the recipe has no other versions. If you try to delete <code>LATEST_WORKING</code> while other versions exist (or if they can't be deleted), then <code>LATEST_WORKING</code> will be listed as partial failure in the response.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteRecipeVersionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder
            }
impl BatchDeleteRecipeVersionFluentBuilder {
    /// Creates a new `BatchDeleteRecipeVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `RecipeVersions`.
    ///
    /// To override the contents of this collection use [`set_recipe_versions`](Self::set_recipe_versions).
    ///
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn recipe_versions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.recipe_versions(input.into());
        self
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn set_recipe_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_recipe_versions(input);
        self
    }
}
