// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_recipe_version::_batch_delete_recipe_version_output::BatchDeleteRecipeVersionOutputBuilder;

pub use crate::operation::batch_delete_recipe_version::_batch_delete_recipe_version_input::BatchDeleteRecipeVersionInputBuilder;

impl crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_delete_recipe_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchDeleteRecipeVersion`.
///
/// <p>Deletes one or more versions of a recipe at a time.</p>
/// <p>The entire request will be rejected if:</p>
/// <ul>
/// <li>
/// <p>The recipe does not exist.</p></li>
/// <li>
/// <p>There is an invalid version identifier in the list of versions.</p></li>
/// <li>
/// <p>The version list is empty.</p></li>
/// <li>
/// <p>The version list size exceeds 50.</p></li>
/// <li>
/// <p>The version list contains duplicate entries.</p></li>
/// </ul>
/// <p>The request will complete successfully, but with partial failures, if:</p>
/// <ul>
/// <li>
/// <p>A version does not exist.</p></li>
/// <li>
/// <p>A version is being used by a job.</p></li>
/// <li>
/// <p>You specify <code>LATEST_WORKING</code>, but it's being used by a project.</p></li>
/// <li>
/// <p>The version fails to be deleted.</p></li>
/// </ul>
/// <p>The <code>LATEST_WORKING</code> version will only be deleted if the recipe has no other versions. If you try to delete <code>LATEST_WORKING</code> while other versions exist (or if they can't be deleted), then <code>LATEST_WORKING</code> will be listed as partial failure in the response.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchDeleteRecipeVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
    > for BatchDeleteRecipeVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchDeleteRecipeVersionFluentBuilder {
    /// Creates a new `BatchDeleteRecipeVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchDeleteRecipeVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionOutput,
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    ///
    /// Appends an item to `RecipeVersions`.
    ///
    /// To override the contents of this collection use [`set_recipe_versions`](Self::set_recipe_versions).
    ///
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn recipe_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.recipe_versions(input.into());
        self
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn set_recipe_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_recipe_versions(input);
        self
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn get_recipe_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_recipe_versions()
    }
}
