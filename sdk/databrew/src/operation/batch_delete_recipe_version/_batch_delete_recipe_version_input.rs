// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteRecipeVersionInput {
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub recipe_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteRecipeVersionInput {
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recipe_versions.is_none()`.
    pub fn recipe_versions(&self) -> &[::std::string::String] {
        self.recipe_versions.as_deref().unwrap_or_default()
    }
}
impl BatchDeleteRecipeVersionInput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteRecipeVersionInput`](crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionInput).
    pub fn builder() -> crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder {
        crate::operation::batch_delete_recipe_version::builders::BatchDeleteRecipeVersionInputBuilder::default()
    }
}

/// A builder for [`BatchDeleteRecipeVersionInput`](crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDeleteRecipeVersionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) recipe_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteRecipeVersionInputBuilder {
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the recipe whose versions are to be deleted.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `recipe_versions`.
    ///
    /// To override the contents of this collection use [`set_recipe_versions`](Self::set_recipe_versions).
    ///
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn recipe_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.recipe_versions.unwrap_or_default();
        v.push(input.into());
        self.recipe_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn set_recipe_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.recipe_versions = input;
        self
    }
    /// <p>An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.</p>
    pub fn get_recipe_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.recipe_versions
    }
    /// Consumes the builder and constructs a [`BatchDeleteRecipeVersionInput`](crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_delete_recipe_version::BatchDeleteRecipeVersionInput {
            name: self.name,
            recipe_versions: self.recipe_versions,
        })
    }
}
