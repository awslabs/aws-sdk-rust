// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDatasetOutput {
    /// <p>The identifier (user name) of the user who created the dataset.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<std::string::String>,
    /// <p>The date and time that the dataset was created.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the dataset.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::InputFormat>,
    /// <p>Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.</p>
    #[doc(hidden)]
    pub format_options: std::option::Option<crate::types::FormatOptions>,
    /// <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.</p>
    #[doc(hidden)]
    pub input: std::option::Option<crate::types::Input>,
    /// <p>The date and time that the dataset was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifier (user name) of the user who last modified the dataset.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<std::string::String>,
    /// <p>The location of the data for this dataset, Amazon S3 or the Glue Data Catalog.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::Source>,
    /// <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
    #[doc(hidden)]
    pub path_options: std::option::Option<crate::types::PathOptions>,
    /// <p>Metadata tags associated with this dataset.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDatasetOutput {
    /// <p>The identifier (user name) of the user who created the dataset.</p>
    pub fn created_by(&self) -> std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time that the dataset was created.</p>
    pub fn create_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_date.as_ref()
    }
    /// <p>The name of the dataset.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::InputFormat> {
        self.format.as_ref()
    }
    /// <p>Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.</p>
    pub fn format_options(&self) -> std::option::Option<&crate::types::FormatOptions> {
        self.format_options.as_ref()
    }
    /// <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.</p>
    pub fn input(&self) -> std::option::Option<&crate::types::Input> {
        self.input.as_ref()
    }
    /// <p>The date and time that the dataset was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The identifier (user name) of the user who last modified the dataset.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>The location of the data for this dataset, Amazon S3 or the Glue Data Catalog.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
    pub fn path_options(&self) -> std::option::Option<&crate::types::PathOptions> {
        self.path_options.as_ref()
    }
    /// <p>Metadata tags associated with this dataset.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDatasetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
    pub fn builder() -> crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder {
        crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder::default()
    }
}

/// A builder for [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDatasetOutputBuilder {
    pub(crate) created_by: std::option::Option<std::string::String>,
    pub(crate) create_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::InputFormat>,
    pub(crate) format_options: std::option::Option<crate::types::FormatOptions>,
    pub(crate) input: std::option::Option<crate::types::Input>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::Source>,
    pub(crate) path_options: std::option::Option<crate::types::PathOptions>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDatasetOutputBuilder {
    /// <p>The identifier (user name) of the user who created the dataset.</p>
    pub fn created_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by = Some(input.into());
        self
    }
    /// <p>The identifier (user name) of the user who created the dataset.</p>
    pub fn set_created_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The date and time that the dataset was created.</p>
    pub fn create_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_date = Some(input);
        self
    }
    /// <p>The date and time that the dataset was created.</p>
    pub fn set_create_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
    pub fn format(mut self, input: crate::types::InputFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::InputFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.</p>
    pub fn format_options(mut self, input: crate::types::FormatOptions) -> Self {
        self.format_options = Some(input);
        self
    }
    /// <p>Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.</p>
    pub fn set_format_options(
        mut self,
        input: std::option::Option<crate::types::FormatOptions>,
    ) -> Self {
        self.format_options = input;
        self
    }
    /// <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.</p>
    pub fn input(mut self, input: crate::types::Input) -> Self {
        self.input = Some(input);
        self
    }
    /// <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.</p>
    pub fn set_input(mut self, input: std::option::Option<crate::types::Input>) -> Self {
        self.input = input;
        self
    }
    /// <p>The date and time that the dataset was last modified.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The date and time that the dataset was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The identifier (user name) of the user who last modified the dataset.</p>
    pub fn last_modified_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_by = Some(input.into());
        self
    }
    /// <p>The identifier (user name) of the user who last modified the dataset.</p>
    pub fn set_last_modified_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The location of the data for this dataset, Amazon S3 or the Glue Data Catalog.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>The location of the data for this dataset, Amazon S3 or the Glue Data Catalog.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
    pub fn path_options(mut self, input: crate::types::PathOptions) -> Self {
        self.path_options = Some(input);
        self
    }
    /// <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
    pub fn set_path_options(
        mut self,
        input: std::option::Option<crate::types::PathOptions>,
    ) -> Self {
        self.path_options = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata tags associated with this dataset.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Metadata tags associated with this dataset.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
    pub fn build(self) -> crate::operation::describe_dataset::DescribeDatasetOutput {
        crate::operation::describe_dataset::DescribeDatasetOutput {
            created_by: self.created_by,
            create_date: self.create_date,
            name: self.name,
            format: self.format,
            format_options: self.format_options,
            input: self.input,
            last_modified_date: self.last_modified_date,
            last_modified_by: self.last_modified_by,
            source: self.source,
            path_options: self.path_options,
            tags: self.tags,
            resource_arn: self.resource_arn,
            _request_id: self._request_id,
        }
    }
}
