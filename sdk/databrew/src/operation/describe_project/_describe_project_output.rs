// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProjectOutput {
    /// <p>The date and time that the project was created.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifier (user name) of the user who created the project.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<std::string::String>,
    /// <p>The dataset associated with the project.</p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The date and time that the project was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifier (user name) of the user who last modified the project.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<std::string::String>,
    /// <p>The name of the project.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The recipe associated with this job.</p>
    #[doc(hidden)]
    pub recipe_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the project.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Represents the sample size and sampling type for DataBrew to use for interactive data analysis.</p>
    #[doc(hidden)]
    pub sample: std::option::Option<crate::types::Sample>,
    /// <p>The ARN of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Metadata tags associated with this project.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Describes the current state of the session:</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONING</code> - allocating resources for the session.</p> </li>
    /// <li> <p> <code>INITIALIZING</code> - getting the session ready for first use.</p> </li>
    /// <li> <p> <code>ASSIGNED</code> - the session is ready for use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub session_status: std::option::Option<crate::types::SessionStatus>,
    /// <p>The identifier (user name) of the user that opened the project for use. </p>
    #[doc(hidden)]
    pub opened_by: std::option::Option<std::string::String>,
    /// <p>The date and time when the project was opened. </p>
    #[doc(hidden)]
    pub open_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeProjectOutput {
    /// <p>The date and time that the project was created.</p>
    pub fn create_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_date.as_ref()
    }
    /// <p>The identifier (user name) of the user who created the project.</p>
    pub fn created_by(&self) -> std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The dataset associated with the project.</p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The date and time that the project was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The identifier (user name) of the user who last modified the project.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>The name of the project.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The recipe associated with this job.</p>
    pub fn recipe_name(&self) -> std::option::Option<&str> {
        self.recipe_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the project.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Represents the sample size and sampling type for DataBrew to use for interactive data analysis.</p>
    pub fn sample(&self) -> std::option::Option<&crate::types::Sample> {
        self.sample.as_ref()
    }
    /// <p>The ARN of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Metadata tags associated with this project.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Describes the current state of the session:</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONING</code> - allocating resources for the session.</p> </li>
    /// <li> <p> <code>INITIALIZING</code> - getting the session ready for first use.</p> </li>
    /// <li> <p> <code>ASSIGNED</code> - the session is ready for use.</p> </li>
    /// </ul>
    pub fn session_status(&self) -> std::option::Option<&crate::types::SessionStatus> {
        self.session_status.as_ref()
    }
    /// <p>The identifier (user name) of the user that opened the project for use. </p>
    pub fn opened_by(&self) -> std::option::Option<&str> {
        self.opened_by.as_deref()
    }
    /// <p>The date and time when the project was opened. </p>
    pub fn open_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.open_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeProjectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProjectOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProjectOutput`](crate::operation::describe_project::DescribeProjectOutput).
    pub fn builder() -> crate::operation::describe_project::builders::DescribeProjectOutputBuilder {
        crate::operation::describe_project::builders::DescribeProjectOutputBuilder::default()
    }
}

/// A builder for [`DescribeProjectOutput`](crate::operation::describe_project::DescribeProjectOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeProjectOutputBuilder {
    pub(crate) create_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_by: std::option::Option<std::string::String>,
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) recipe_name: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) sample: std::option::Option<crate::types::Sample>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) session_status: std::option::Option<crate::types::SessionStatus>,
    pub(crate) opened_by: std::option::Option<std::string::String>,
    pub(crate) open_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeProjectOutputBuilder {
    /// <p>The date and time that the project was created.</p>
    pub fn create_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_date = Some(input);
        self
    }
    /// <p>The date and time that the project was created.</p>
    pub fn set_create_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The identifier (user name) of the user who created the project.</p>
    pub fn created_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by = Some(input.into());
        self
    }
    /// <p>The identifier (user name) of the user who created the project.</p>
    pub fn set_created_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The dataset associated with the project.</p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The dataset associated with the project.</p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The date and time that the project was last modified.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The date and time that the project was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The identifier (user name) of the user who last modified the project.</p>
    pub fn last_modified_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_by = Some(input.into());
        self
    }
    /// <p>The identifier (user name) of the user who last modified the project.</p>
    pub fn set_last_modified_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The name of the project.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The recipe associated with this job.</p>
    pub fn recipe_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.recipe_name = Some(input.into());
        self
    }
    /// <p>The recipe associated with this job.</p>
    pub fn set_recipe_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recipe_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the project.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the project.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>Represents the sample size and sampling type for DataBrew to use for interactive data analysis.</p>
    pub fn sample(mut self, input: crate::types::Sample) -> Self {
        self.sample = Some(input);
        self
    }
    /// <p>Represents the sample size and sampling type for DataBrew to use for interactive data analysis.</p>
    pub fn set_sample(mut self, input: std::option::Option<crate::types::Sample>) -> Self {
        self.sample = input;
        self
    }
    /// <p>The ARN of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata tags associated with this project.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Metadata tags associated with this project.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Describes the current state of the session:</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONING</code> - allocating resources for the session.</p> </li>
    /// <li> <p> <code>INITIALIZING</code> - getting the session ready for first use.</p> </li>
    /// <li> <p> <code>ASSIGNED</code> - the session is ready for use.</p> </li>
    /// </ul>
    pub fn session_status(mut self, input: crate::types::SessionStatus) -> Self {
        self.session_status = Some(input);
        self
    }
    /// <p>Describes the current state of the session:</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONING</code> - allocating resources for the session.</p> </li>
    /// <li> <p> <code>INITIALIZING</code> - getting the session ready for first use.</p> </li>
    /// <li> <p> <code>ASSIGNED</code> - the session is ready for use.</p> </li>
    /// </ul>
    pub fn set_session_status(
        mut self,
        input: std::option::Option<crate::types::SessionStatus>,
    ) -> Self {
        self.session_status = input;
        self
    }
    /// <p>The identifier (user name) of the user that opened the project for use. </p>
    pub fn opened_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.opened_by = Some(input.into());
        self
    }
    /// <p>The identifier (user name) of the user that opened the project for use. </p>
    pub fn set_opened_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.opened_by = input;
        self
    }
    /// <p>The date and time when the project was opened. </p>
    pub fn open_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.open_date = Some(input);
        self
    }
    /// <p>The date and time when the project was opened. </p>
    pub fn set_open_date(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.open_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProjectOutput`](crate::operation::describe_project::DescribeProjectOutput).
    pub fn build(self) -> crate::operation::describe_project::DescribeProjectOutput {
        crate::operation::describe_project::DescribeProjectOutput {
            create_date: self.create_date,
            created_by: self.created_by,
            dataset_name: self.dataset_name,
            last_modified_date: self.last_modified_date,
            last_modified_by: self.last_modified_by,
            name: self.name,
            recipe_name: self.recipe_name,
            resource_arn: self.resource_arn,
            sample: self.sample,
            role_arn: self.role_arn,
            tags: self.tags,
            session_status: self.session_status,
            opened_by: self.opened_by,
            open_date: self.open_date,
            _request_id: self._request_id,
        }
    }
}
