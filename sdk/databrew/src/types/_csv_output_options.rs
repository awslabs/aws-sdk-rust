// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a set of options that define how DataBrew will write a comma-separated value (CSV) file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CsvOutputOptions {
    /// <p>A single character that specifies the delimiter used to create CSV job output.</p>
    #[doc(hidden)]
    pub delimiter: std::option::Option<std::string::String>,
}
impl CsvOutputOptions {
    /// <p>A single character that specifies the delimiter used to create CSV job output.</p>
    pub fn delimiter(&self) -> std::option::Option<&str> {
        self.delimiter.as_deref()
    }
}
impl CsvOutputOptions {
    /// Creates a new builder-style object to manufacture [`CsvOutputOptions`](crate::types::CsvOutputOptions).
    pub fn builder() -> crate::types::builders::CsvOutputOptionsBuilder {
        crate::types::builders::CsvOutputOptionsBuilder::default()
    }
}

/// A builder for [`CsvOutputOptions`](crate::types::CsvOutputOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CsvOutputOptionsBuilder {
    pub(crate) delimiter: std::option::Option<std::string::String>,
}
impl CsvOutputOptionsBuilder {
    /// <p>A single character that specifies the delimiter used to create CSV job output.</p>
    pub fn delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.delimiter = Some(input.into());
        self
    }
    /// <p>A single character that specifies the delimiter used to create CSV job output.</p>
    pub fn set_delimiter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.delimiter = input;
        self
    }
    /// Consumes the builder and constructs a [`CsvOutputOptions`](crate::types::CsvOutputOptions).
    pub fn build(self) -> crate::types::CsvOutputOptions {
        crate::types::CsvOutputOptions {
            delimiter: self.delimiter,
        }
    }
}
