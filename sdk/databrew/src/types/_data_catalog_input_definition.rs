// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents how metadata stored in the Glue Data Catalog is defined in a DataBrew dataset. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataCatalogInputDefinition {
    /// <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the data.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The name of a database in the Data Catalog.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of a database table in the Data Catalog. This table corresponds to a DataBrew dataset.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>Represents an Amazon location where DataBrew can store intermediate results.</p>
    #[doc(hidden)]
    pub temp_directory: std::option::Option<crate::types::S3Location>,
}
impl DataCatalogInputDefinition {
    /// <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the data.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of a database in the Data Catalog.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of a database table in the Data Catalog. This table corresponds to a DataBrew dataset.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>Represents an Amazon location where DataBrew can store intermediate results.</p>
    pub fn temp_directory(&self) -> std::option::Option<&crate::types::S3Location> {
        self.temp_directory.as_ref()
    }
}
impl DataCatalogInputDefinition {
    /// Creates a new builder-style object to manufacture [`DataCatalogInputDefinition`](crate::types::DataCatalogInputDefinition).
    pub fn builder() -> crate::types::builders::DataCatalogInputDefinitionBuilder {
        crate::types::builders::DataCatalogInputDefinitionBuilder::default()
    }
}

/// A builder for [`DataCatalogInputDefinition`](crate::types::DataCatalogInputDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataCatalogInputDefinitionBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) temp_directory: std::option::Option<crate::types::S3Location>,
}
impl DataCatalogInputDefinitionBuilder {
    /// <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the data.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the data.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The name of a database in the Data Catalog.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of a database in the Data Catalog.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of a database table in the Data Catalog. This table corresponds to a DataBrew dataset.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of a database table in the Data Catalog. This table corresponds to a DataBrew dataset.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>Represents an Amazon location where DataBrew can store intermediate results.</p>
    pub fn temp_directory(mut self, input: crate::types::S3Location) -> Self {
        self.temp_directory = Some(input);
        self
    }
    /// <p>Represents an Amazon location where DataBrew can store intermediate results.</p>
    pub fn set_temp_directory(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.temp_directory = input;
        self
    }
    /// Consumes the builder and constructs a [`DataCatalogInputDefinition`](crate::types::DataCatalogInputDefinition).
    pub fn build(self) -> crate::types::DataCatalogInputDefinition {
        crate::types::DataCatalogInputDefinition {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            temp_directory: self.temp_directory,
        }
    }
}
