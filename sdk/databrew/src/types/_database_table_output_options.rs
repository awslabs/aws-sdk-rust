// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatabaseTableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    #[doc(hidden)]
    pub temp_directory: std::option::Option<crate::types::S3Location>,
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
}
impl DatabaseTableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn temp_directory(&self) -> std::option::Option<&crate::types::S3Location> {
        self.temp_directory.as_ref()
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
}
impl DatabaseTableOutputOptions {
    /// Creates a new builder-style object to manufacture [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
    pub fn builder() -> crate::types::builders::DatabaseTableOutputOptionsBuilder {
        crate::types::builders::DatabaseTableOutputOptionsBuilder::default()
    }
}

/// A builder for [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatabaseTableOutputOptionsBuilder {
    pub(crate) temp_directory: std::option::Option<crate::types::S3Location>,
    pub(crate) table_name: std::option::Option<std::string::String>,
}
impl DatabaseTableOutputOptionsBuilder {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn temp_directory(mut self, input: crate::types::S3Location) -> Self {
        self.temp_directory = Some(input);
        self
    }
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn set_temp_directory(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.temp_directory = input;
        self
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
    pub fn build(self) -> crate::types::DatabaseTableOutputOptions {
        crate::types::DatabaseTableOutputOptions {
            temp_directory: self.temp_directory,
            table_name: self.table_name,
        }
    }
}
