// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseTableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub temp_directory: ::std::option::Option<crate::types::S3Location>,
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub table_name: ::std::string::String,
}
impl DatabaseTableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn temp_directory(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.temp_directory.as_ref()
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
}
impl DatabaseTableOutputOptions {
    /// Creates a new builder-style object to manufacture [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
    pub fn builder() -> crate::types::builders::DatabaseTableOutputOptionsBuilder {
        crate::types::builders::DatabaseTableOutputOptionsBuilder::default()
    }
}

/// A builder for [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatabaseTableOutputOptionsBuilder {
    pub(crate) temp_directory: ::std::option::Option<crate::types::S3Location>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
}
impl DatabaseTableOutputOptionsBuilder {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn temp_directory(mut self, input: crate::types::S3Location) -> Self {
        self.temp_directory = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn set_temp_directory(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.temp_directory = input;
        self
    }
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.</p>
    pub fn get_temp_directory(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.temp_directory
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>A prefix for the name of a table DataBrew will create in the database.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// Consumes the builder and constructs a [`DatabaseTableOutputOptions`](crate::types::DatabaseTableOutputOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`table_name`](crate::types::builders::DatabaseTableOutputOptionsBuilder::table_name)
    pub fn build(self) -> ::std::result::Result<crate::types::DatabaseTableOutputOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatabaseTableOutputOptions {
            temp_directory: self.temp_directory,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building DatabaseTableOutputOptions",
                )
            })?,
        })
    }
}
