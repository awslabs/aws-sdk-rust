// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents options that specify how and where DataBrew writes the Amazon S3 output generated by recipe jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3TableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.</p>
    pub location: ::std::option::Option<crate::types::S3Location>,
}
impl S3TableOutputOptions {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.location.as_ref()
    }
}
impl S3TableOutputOptions {
    /// Creates a new builder-style object to manufacture [`S3TableOutputOptions`](crate::types::S3TableOutputOptions).
    pub fn builder() -> crate::types::builders::S3TableOutputOptionsBuilder {
        crate::types::builders::S3TableOutputOptionsBuilder::default()
    }
}

/// A builder for [`S3TableOutputOptions`](crate::types::S3TableOutputOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3TableOutputOptionsBuilder {
    pub(crate) location: ::std::option::Option<crate::types::S3Location>,
}
impl S3TableOutputOptionsBuilder {
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.</p>
    /// This field is required.
    pub fn location(mut self, input: crate::types::S3Location) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.location = input;
        self
    }
    /// <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.location
    }
    /// Consumes the builder and constructs a [`S3TableOutputOptions`](crate::types::S3TableOutputOptions).
    pub fn build(self) -> crate::types::S3TableOutputOptions {
        crate::types::S3TableOutputOptions { location: self.location }
    }
}
