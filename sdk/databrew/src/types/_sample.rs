// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the sample size and sampling type for DataBrew to use for interactive data analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Sample {
    /// <p>The number of rows in the sample.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i32>,
    /// <p>The way in which DataBrew obtains rows from a dataset.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SampleType>,
}
impl Sample {
    /// <p>The number of rows in the sample.</p>
    pub fn size(&self) -> std::option::Option<i32> {
        self.size
    }
    /// <p>The way in which DataBrew obtains rows from a dataset.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SampleType> {
        self.r#type.as_ref()
    }
}
impl Sample {
    /// Creates a new builder-style object to manufacture [`Sample`](crate::types::Sample).
    pub fn builder() -> crate::types::builders::SampleBuilder {
        crate::types::builders::SampleBuilder::default()
    }
}

/// A builder for [`Sample`](crate::types::Sample).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SampleBuilder {
    pub(crate) size: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<crate::types::SampleType>,
}
impl SampleBuilder {
    /// <p>The number of rows in the sample.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The number of rows in the sample.</p>
    pub fn set_size(mut self, input: std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The way in which DataBrew obtains rows from a dataset.</p>
    pub fn r#type(mut self, input: crate::types::SampleType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The way in which DataBrew obtains rows from a dataset.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::SampleType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`Sample`](crate::types::Sample).
    pub fn build(self) -> crate::types::Sample {
        crate::types::Sample {
            size: self.size,
            r#type: self.r#type,
        }
    }
}
