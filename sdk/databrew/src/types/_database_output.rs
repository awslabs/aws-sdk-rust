// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a JDBC database output object which defines the output destination for a DataBrew recipe job to write into.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseOutput {
    /// <p>The Glue connection that stores the connection information for the target database.</p>
    pub glue_connection_name: ::std::string::String,
    /// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
    pub database_options: ::std::option::Option<crate::types::DatabaseTableOutputOptions>,
    /// <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
    pub database_output_mode: ::std::option::Option<crate::types::DatabaseOutputMode>,
}
impl DatabaseOutput {
    /// <p>The Glue connection that stores the connection information for the target database.</p>
    pub fn glue_connection_name(&self) -> &str {
        use std::ops::Deref;
        self.glue_connection_name.deref()
    }
    /// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
    pub fn database_options(&self) -> ::std::option::Option<&crate::types::DatabaseTableOutputOptions> {
        self.database_options.as_ref()
    }
    /// <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
    pub fn database_output_mode(&self) -> ::std::option::Option<&crate::types::DatabaseOutputMode> {
        self.database_output_mode.as_ref()
    }
}
impl DatabaseOutput {
    /// Creates a new builder-style object to manufacture [`DatabaseOutput`](crate::types::DatabaseOutput).
    pub fn builder() -> crate::types::builders::DatabaseOutputBuilder {
        crate::types::builders::DatabaseOutputBuilder::default()
    }
}

/// A builder for [`DatabaseOutput`](crate::types::DatabaseOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatabaseOutputBuilder {
    pub(crate) glue_connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) database_options: ::std::option::Option<crate::types::DatabaseTableOutputOptions>,
    pub(crate) database_output_mode: ::std::option::Option<crate::types::DatabaseOutputMode>,
}
impl DatabaseOutputBuilder {
    /// <p>The Glue connection that stores the connection information for the target database.</p>
    /// This field is required.
    pub fn glue_connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.glue_connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Glue connection that stores the connection information for the target database.</p>
    pub fn set_glue_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.glue_connection_name = input;
        self
    }
    /// <p>The Glue connection that stores the connection information for the target database.</p>
    pub fn get_glue_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.glue_connection_name
    }
    /// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
    /// This field is required.
    pub fn database_options(mut self, input: crate::types::DatabaseTableOutputOptions) -> Self {
        self.database_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
    pub fn set_database_options(mut self, input: ::std::option::Option<crate::types::DatabaseTableOutputOptions>) -> Self {
        self.database_options = input;
        self
    }
    /// <p>Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.</p>
    pub fn get_database_options(&self) -> &::std::option::Option<crate::types::DatabaseTableOutputOptions> {
        &self.database_options
    }
    /// <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
    pub fn database_output_mode(mut self, input: crate::types::DatabaseOutputMode) -> Self {
        self.database_output_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
    pub fn set_database_output_mode(mut self, input: ::std::option::Option<crate::types::DatabaseOutputMode>) -> Self {
        self.database_output_mode = input;
        self
    }
    /// <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
    pub fn get_database_output_mode(&self) -> &::std::option::Option<crate::types::DatabaseOutputMode> {
        &self.database_output_mode
    }
    /// Consumes the builder and constructs a [`DatabaseOutput`](crate::types::DatabaseOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`glue_connection_name`](crate::types::builders::DatabaseOutputBuilder::glue_connection_name)
    pub fn build(self) -> ::std::result::Result<crate::types::DatabaseOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatabaseOutput {
            glue_connection_name: self.glue_connection_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "glue_connection_name",
                    "glue_connection_name was not specified but it is required when building DatabaseOutput",
                )
            })?,
            database_options: self.database_options,
            database_output_mode: self.database_output_mode,
        })
    }
}
