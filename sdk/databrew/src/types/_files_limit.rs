// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a limit imposed on number of Amazon S3 files that should be selected for a dataset from a connected Amazon S3 path.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilesLimit {
    /// <p>The number of Amazon S3 files to select.</p>
    pub max_files: i32,
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as a sorting criteria. Currently it's the only allowed value.</p>
    pub ordered_by: ::std::option::Option<crate::types::OrderedBy>,
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses DESCENDING order, i.e. most recent files are selected first. Another possible value is ASCENDING.</p>
    pub order: ::std::option::Option<crate::types::Order>,
}
impl FilesLimit {
    /// <p>The number of Amazon S3 files to select.</p>
    pub fn max_files(&self) -> i32 {
        self.max_files
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as a sorting criteria. Currently it's the only allowed value.</p>
    pub fn ordered_by(&self) -> ::std::option::Option<&crate::types::OrderedBy> {
        self.ordered_by.as_ref()
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses DESCENDING order, i.e. most recent files are selected first. Another possible value is ASCENDING.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::Order> {
        self.order.as_ref()
    }
}
impl FilesLimit {
    /// Creates a new builder-style object to manufacture [`FilesLimit`](crate::types::FilesLimit).
    pub fn builder() -> crate::types::builders::FilesLimitBuilder {
        crate::types::builders::FilesLimitBuilder::default()
    }
}

/// A builder for [`FilesLimit`](crate::types::FilesLimit).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilesLimitBuilder {
    pub(crate) max_files: ::std::option::Option<i32>,
    pub(crate) ordered_by: ::std::option::Option<crate::types::OrderedBy>,
    pub(crate) order: ::std::option::Option<crate::types::Order>,
}
impl FilesLimitBuilder {
    /// <p>The number of Amazon S3 files to select.</p>
    /// This field is required.
    pub fn max_files(mut self, input: i32) -> Self {
        self.max_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Amazon S3 files to select.</p>
    pub fn set_max_files(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_files = input;
        self
    }
    /// <p>The number of Amazon S3 files to select.</p>
    pub fn get_max_files(&self) -> &::std::option::Option<i32> {
        &self.max_files
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as a sorting criteria. Currently it's the only allowed value.</p>
    pub fn ordered_by(mut self, input: crate::types::OrderedBy) -> Self {
        self.ordered_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as a sorting criteria. Currently it's the only allowed value.</p>
    pub fn set_ordered_by(mut self, input: ::std::option::Option<crate::types::OrderedBy>) -> Self {
        self.ordered_by = input;
        self
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as a sorting criteria. Currently it's the only allowed value.</p>
    pub fn get_ordered_by(&self) -> &::std::option::Option<crate::types::OrderedBy> {
        &self.ordered_by
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses DESCENDING order, i.e. most recent files are selected first. Another possible value is ASCENDING.</p>
    pub fn order(mut self, input: crate::types::Order) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses DESCENDING order, i.e. most recent files are selected first. Another possible value is ASCENDING.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::Order>) -> Self {
        self.order = input;
        self
    }
    /// <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses DESCENDING order, i.e. most recent files are selected first. Another possible value is ASCENDING.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::Order> {
        &self.order
    }
    /// Consumes the builder and constructs a [`FilesLimit`](crate::types::FilesLimit).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_files`](crate::types::builders::FilesLimitBuilder::max_files)
    pub fn build(self) -> ::std::result::Result<crate::types::FilesLimit, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilesLimit {
            max_files: self.max_files.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_files",
                    "max_files was not specified but it is required when building FilesLimit",
                )
            })?,
            ordered_by: self.ordered_by,
            order: self.order,
        })
    }
}
