// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Override of a particular evaluation for a profile job. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatisticOverride {
    /// <p>The name of an evaluation</p>
    #[doc(hidden)]
    pub statistic: std::option::Option<std::string::String>,
    /// <p>A map that includes overrides of an evaluation’s parameters.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StatisticOverride {
    /// <p>The name of an evaluation</p>
    pub fn statistic(&self) -> std::option::Option<&str> {
        self.statistic.as_deref()
    }
    /// <p>A map that includes overrides of an evaluation’s parameters.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
}
impl StatisticOverride {
    /// Creates a new builder-style object to manufacture [`StatisticOverride`](crate::types::StatisticOverride).
    pub fn builder() -> crate::types::builders::StatisticOverrideBuilder {
        crate::types::builders::StatisticOverrideBuilder::default()
    }
}

/// A builder for [`StatisticOverride`](crate::types::StatisticOverride).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatisticOverrideBuilder {
    pub(crate) statistic: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StatisticOverrideBuilder {
    /// <p>The name of an evaluation</p>
    pub fn statistic(mut self, input: impl Into<std::string::String>) -> Self {
        self.statistic = Some(input.into());
        self
    }
    /// <p>The name of an evaluation</p>
    pub fn set_statistic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.statistic = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A map that includes overrides of an evaluation’s parameters.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>A map that includes overrides of an evaluation’s parameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`StatisticOverride`](crate::types::StatisticOverride).
    pub fn build(self) -> crate::types::StatisticOverride {
        crate::types::StatisticOverride {
            statistic: self.statistic,
            parameters: self.parameters,
        }
    }
}
