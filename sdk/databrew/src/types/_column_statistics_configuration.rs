// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for column evaluations for a profile job. ColumnStatisticsConfiguration can be used to select evaluations and override parameters of evaluations for particular columns. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColumnStatisticsConfiguration {
    /// <p>List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns. </p>
    pub selectors: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSelector>>,
    /// <p>Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations. </p>
    pub statistics: ::std::option::Option<crate::types::StatisticsConfiguration>,
}
impl ColumnStatisticsConfiguration {
    /// <p>List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selectors.is_none()`.
    pub fn selectors(&self) -> &[crate::types::ColumnSelector] {
        self.selectors.as_deref().unwrap_or_default()
    }
    /// <p>Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations. </p>
    pub fn statistics(&self) -> ::std::option::Option<&crate::types::StatisticsConfiguration> {
        self.statistics.as_ref()
    }
}
impl ColumnStatisticsConfiguration {
    /// Creates a new builder-style object to manufacture [`ColumnStatisticsConfiguration`](crate::types::ColumnStatisticsConfiguration).
    pub fn builder() -> crate::types::builders::ColumnStatisticsConfigurationBuilder {
        crate::types::builders::ColumnStatisticsConfigurationBuilder::default()
    }
}

/// A builder for [`ColumnStatisticsConfiguration`](crate::types::ColumnStatisticsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ColumnStatisticsConfigurationBuilder {
    pub(crate) selectors: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSelector>>,
    pub(crate) statistics: ::std::option::Option<crate::types::StatisticsConfiguration>,
}
impl ColumnStatisticsConfigurationBuilder {
    /// Appends an item to `selectors`.
    ///
    /// To override the contents of this collection use [`set_selectors`](Self::set_selectors).
    ///
    /// <p>List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns. </p>
    pub fn selectors(mut self, input: crate::types::ColumnSelector) -> Self {
        let mut v = self.selectors.unwrap_or_default();
        v.push(input);
        self.selectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns. </p>
    pub fn set_selectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnSelector>>) -> Self {
        self.selectors = input;
        self
    }
    /// <p>List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns. </p>
    pub fn get_selectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnSelector>> {
        &self.selectors
    }
    /// <p>Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations. </p>
    /// This field is required.
    pub fn statistics(mut self, input: crate::types::StatisticsConfiguration) -> Self {
        self.statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations. </p>
    pub fn set_statistics(mut self, input: ::std::option::Option<crate::types::StatisticsConfiguration>) -> Self {
        self.statistics = input;
        self
    }
    /// <p>Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations. </p>
    pub fn get_statistics(&self) -> &::std::option::Option<crate::types::StatisticsConfiguration> {
        &self.statistics
    }
    /// Consumes the builder and constructs a [`ColumnStatisticsConfiguration`](crate::types::ColumnStatisticsConfiguration).
    pub fn build(self) -> crate::types::ColumnStatisticsConfiguration {
        crate::types::ColumnStatisticsConfiguration {
            selectors: self.selectors,
            statistics: self.statistics,
        }
    }
}
