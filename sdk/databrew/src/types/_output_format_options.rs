// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a set of options that define the structure of comma-separated (CSV) job output.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputFormatOptions {
    /// <p>Represents a set of options that define the structure of comma-separated value (CSV) job output.</p>
    #[doc(hidden)]
    pub csv: std::option::Option<crate::types::CsvOutputOptions>,
}
impl OutputFormatOptions {
    /// <p>Represents a set of options that define the structure of comma-separated value (CSV) job output.</p>
    pub fn csv(&self) -> std::option::Option<&crate::types::CsvOutputOptions> {
        self.csv.as_ref()
    }
}
impl OutputFormatOptions {
    /// Creates a new builder-style object to manufacture [`OutputFormatOptions`](crate::types::OutputFormatOptions).
    pub fn builder() -> crate::types::builders::OutputFormatOptionsBuilder {
        crate::types::builders::OutputFormatOptionsBuilder::default()
    }
}

/// A builder for [`OutputFormatOptions`](crate::types::OutputFormatOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputFormatOptionsBuilder {
    pub(crate) csv: std::option::Option<crate::types::CsvOutputOptions>,
}
impl OutputFormatOptionsBuilder {
    /// <p>Represents a set of options that define the structure of comma-separated value (CSV) job output.</p>
    pub fn csv(mut self, input: crate::types::CsvOutputOptions) -> Self {
        self.csv = Some(input);
        self
    }
    /// <p>Represents a set of options that define the structure of comma-separated value (CSV) job output.</p>
    pub fn set_csv(mut self, input: std::option::Option<crate::types::CsvOutputOptions>) -> Self {
        self.csv = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputFormatOptions`](crate::types::OutputFormatOptions).
    pub fn build(self) -> crate::types::OutputFormatOptions {
        crate::types::OutputFormatOptions { csv: self.csv }
    }
}
