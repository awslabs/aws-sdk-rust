// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for data quality validation. Used to select the Rulesets and Validation Mode to be used in the profile job. When ValidationConfiguration is null, the profile job will run without data quality validation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidationConfiguration {
    /// <p>The Amazon Resource Name (ARN) for the ruleset to be validated in the profile job. The TargetArn of the selected ruleset should be the same as the Amazon Resource Name (ARN) of the dataset that is associated with the profile job.</p>
    #[doc(hidden)]
    pub ruleset_arn: std::option::Option<std::string::String>,
    /// <p>Mode of data quality validation. Default mode is “CHECK_ALL” which verifies all rules defined in the selected ruleset.</p>
    #[doc(hidden)]
    pub validation_mode: std::option::Option<crate::types::ValidationMode>,
}
impl ValidationConfiguration {
    /// <p>The Amazon Resource Name (ARN) for the ruleset to be validated in the profile job. The TargetArn of the selected ruleset should be the same as the Amazon Resource Name (ARN) of the dataset that is associated with the profile job.</p>
    pub fn ruleset_arn(&self) -> std::option::Option<&str> {
        self.ruleset_arn.as_deref()
    }
    /// <p>Mode of data quality validation. Default mode is “CHECK_ALL” which verifies all rules defined in the selected ruleset.</p>
    pub fn validation_mode(&self) -> std::option::Option<&crate::types::ValidationMode> {
        self.validation_mode.as_ref()
    }
}
impl ValidationConfiguration {
    /// Creates a new builder-style object to manufacture [`ValidationConfiguration`](crate::types::ValidationConfiguration).
    pub fn builder() -> crate::types::builders::ValidationConfigurationBuilder {
        crate::types::builders::ValidationConfigurationBuilder::default()
    }
}

/// A builder for [`ValidationConfiguration`](crate::types::ValidationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ValidationConfigurationBuilder {
    pub(crate) ruleset_arn: std::option::Option<std::string::String>,
    pub(crate) validation_mode: std::option::Option<crate::types::ValidationMode>,
}
impl ValidationConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) for the ruleset to be validated in the profile job. The TargetArn of the selected ruleset should be the same as the Amazon Resource Name (ARN) of the dataset that is associated with the profile job.</p>
    pub fn ruleset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.ruleset_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the ruleset to be validated in the profile job. The TargetArn of the selected ruleset should be the same as the Amazon Resource Name (ARN) of the dataset that is associated with the profile job.</p>
    pub fn set_ruleset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ruleset_arn = input;
        self
    }
    /// <p>Mode of data quality validation. Default mode is “CHECK_ALL” which verifies all rules defined in the selected ruleset.</p>
    pub fn validation_mode(mut self, input: crate::types::ValidationMode) -> Self {
        self.validation_mode = Some(input);
        self
    }
    /// <p>Mode of data quality validation. Default mode is “CHECK_ALL” which verifies all rules defined in the selected ruleset.</p>
    pub fn set_validation_mode(
        mut self,
        input: std::option::Option<crate::types::ValidationMode>,
    ) -> Self {
        self.validation_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`ValidationConfiguration`](crate::types::ValidationConfiguration).
    pub fn build(self) -> crate::types::ValidationConfiguration {
        crate::types::ValidationConfiguration {
            ruleset_arn: self.ruleset_arn,
            validation_mode: self.validation_mode,
        }
    }
}
