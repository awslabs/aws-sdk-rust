// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the JSON-specific options that define how input is to be interpreted by Glue DataBrew.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JsonOptions {
    /// <p>A value that specifies whether JSON input contains embedded new line characters.</p>
    #[doc(hidden)]
    pub multi_line: bool,
}
impl JsonOptions {
    /// <p>A value that specifies whether JSON input contains embedded new line characters.</p>
    pub fn multi_line(&self) -> bool {
        self.multi_line
    }
}
impl JsonOptions {
    /// Creates a new builder-style object to manufacture [`JsonOptions`](crate::types::JsonOptions).
    pub fn builder() -> crate::types::builders::JsonOptionsBuilder {
        crate::types::builders::JsonOptionsBuilder::default()
    }
}

/// A builder for [`JsonOptions`](crate::types::JsonOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JsonOptionsBuilder {
    pub(crate) multi_line: std::option::Option<bool>,
}
impl JsonOptionsBuilder {
    /// <p>A value that specifies whether JSON input contains embedded new line characters.</p>
    pub fn multi_line(mut self, input: bool) -> Self {
        self.multi_line = Some(input);
        self
    }
    /// <p>A value that specifies whether JSON input contains embedded new line characters.</p>
    pub fn set_multi_line(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_line = input;
        self
    }
    /// Consumes the builder and constructs a [`JsonOptions`](crate::types::JsonOptions).
    pub fn build(self) -> crate::types::JsonOptions {
        crate::types::JsonOptions {
            multi_line: self.multi_line.unwrap_or_default(),
        }
    }
}
