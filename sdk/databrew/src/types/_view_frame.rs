// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data being transformed during an action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewFrame {
    /// <p>The starting index for the range of columns to return in the view frame.</p>
    pub start_column_index: i32,
    /// <p>The number of columns to include in the view frame, beginning with the <code>StartColumnIndex</code> value and ignoring any columns in the <code>HiddenColumns</code> list.</p>
    pub column_range: ::std::option::Option<i32>,
    /// <p>A list of columns to hide in the view frame.</p>
    pub hidden_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The starting index for the range of rows to return in the view frame.</p>
    pub start_row_index: ::std::option::Option<i32>,
    /// <p>The number of rows to include in the view frame, beginning with the <code>StartRowIndex</code> value.</p>
    pub row_range: ::std::option::Option<i32>,
    /// <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
    pub analytics: ::std::option::Option<crate::types::AnalyticsMode>,
}
impl ViewFrame {
    /// <p>The starting index for the range of columns to return in the view frame.</p>
    pub fn start_column_index(&self) -> i32 {
        self.start_column_index
    }
    /// <p>The number of columns to include in the view frame, beginning with the <code>StartColumnIndex</code> value and ignoring any columns in the <code>HiddenColumns</code> list.</p>
    pub fn column_range(&self) -> ::std::option::Option<i32> {
        self.column_range
    }
    /// <p>A list of columns to hide in the view frame.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hidden_columns.is_none()`.
    pub fn hidden_columns(&self) -> &[::std::string::String] {
        self.hidden_columns.as_deref().unwrap_or_default()
    }
    /// <p>The starting index for the range of rows to return in the view frame.</p>
    pub fn start_row_index(&self) -> ::std::option::Option<i32> {
        self.start_row_index
    }
    /// <p>The number of rows to include in the view frame, beginning with the <code>StartRowIndex</code> value.</p>
    pub fn row_range(&self) -> ::std::option::Option<i32> {
        self.row_range
    }
    /// <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
    pub fn analytics(&self) -> ::std::option::Option<&crate::types::AnalyticsMode> {
        self.analytics.as_ref()
    }
}
impl ViewFrame {
    /// Creates a new builder-style object to manufacture [`ViewFrame`](crate::types::ViewFrame).
    pub fn builder() -> crate::types::builders::ViewFrameBuilder {
        crate::types::builders::ViewFrameBuilder::default()
    }
}

/// A builder for [`ViewFrame`](crate::types::ViewFrame).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ViewFrameBuilder {
    pub(crate) start_column_index: ::std::option::Option<i32>,
    pub(crate) column_range: ::std::option::Option<i32>,
    pub(crate) hidden_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) start_row_index: ::std::option::Option<i32>,
    pub(crate) row_range: ::std::option::Option<i32>,
    pub(crate) analytics: ::std::option::Option<crate::types::AnalyticsMode>,
}
impl ViewFrameBuilder {
    /// <p>The starting index for the range of columns to return in the view frame.</p>
    /// This field is required.
    pub fn start_column_index(mut self, input: i32) -> Self {
        self.start_column_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The starting index for the range of columns to return in the view frame.</p>
    pub fn set_start_column_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_column_index = input;
        self
    }
    /// <p>The starting index for the range of columns to return in the view frame.</p>
    pub fn get_start_column_index(&self) -> &::std::option::Option<i32> {
        &self.start_column_index
    }
    /// <p>The number of columns to include in the view frame, beginning with the <code>StartColumnIndex</code> value and ignoring any columns in the <code>HiddenColumns</code> list.</p>
    pub fn column_range(mut self, input: i32) -> Self {
        self.column_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of columns to include in the view frame, beginning with the <code>StartColumnIndex</code> value and ignoring any columns in the <code>HiddenColumns</code> list.</p>
    pub fn set_column_range(mut self, input: ::std::option::Option<i32>) -> Self {
        self.column_range = input;
        self
    }
    /// <p>The number of columns to include in the view frame, beginning with the <code>StartColumnIndex</code> value and ignoring any columns in the <code>HiddenColumns</code> list.</p>
    pub fn get_column_range(&self) -> &::std::option::Option<i32> {
        &self.column_range
    }
    /// Appends an item to `hidden_columns`.
    ///
    /// To override the contents of this collection use [`set_hidden_columns`](Self::set_hidden_columns).
    ///
    /// <p>A list of columns to hide in the view frame.</p>
    pub fn hidden_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.hidden_columns.unwrap_or_default();
        v.push(input.into());
        self.hidden_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of columns to hide in the view frame.</p>
    pub fn set_hidden_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.hidden_columns = input;
        self
    }
    /// <p>A list of columns to hide in the view frame.</p>
    pub fn get_hidden_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.hidden_columns
    }
    /// <p>The starting index for the range of rows to return in the view frame.</p>
    pub fn start_row_index(mut self, input: i32) -> Self {
        self.start_row_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The starting index for the range of rows to return in the view frame.</p>
    pub fn set_start_row_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_row_index = input;
        self
    }
    /// <p>The starting index for the range of rows to return in the view frame.</p>
    pub fn get_start_row_index(&self) -> &::std::option::Option<i32> {
        &self.start_row_index
    }
    /// <p>The number of rows to include in the view frame, beginning with the <code>StartRowIndex</code> value.</p>
    pub fn row_range(mut self, input: i32) -> Self {
        self.row_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rows to include in the view frame, beginning with the <code>StartRowIndex</code> value.</p>
    pub fn set_row_range(mut self, input: ::std::option::Option<i32>) -> Self {
        self.row_range = input;
        self
    }
    /// <p>The number of rows to include in the view frame, beginning with the <code>StartRowIndex</code> value.</p>
    pub fn get_row_range(&self) -> &::std::option::Option<i32> {
        &self.row_range
    }
    /// <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
    pub fn analytics(mut self, input: crate::types::AnalyticsMode) -> Self {
        self.analytics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
    pub fn set_analytics(mut self, input: ::std::option::Option<crate::types::AnalyticsMode>) -> Self {
        self.analytics = input;
        self
    }
    /// <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
    pub fn get_analytics(&self) -> &::std::option::Option<crate::types::AnalyticsMode> {
        &self.analytics
    }
    /// Consumes the builder and constructs a [`ViewFrame`](crate::types::ViewFrame).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_column_index`](crate::types::builders::ViewFrameBuilder::start_column_index)
    pub fn build(self) -> ::std::result::Result<crate::types::ViewFrame, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ViewFrame {
            start_column_index: self.start_column_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_column_index",
                    "start_column_index was not specified but it is required when building ViewFrame",
                )
            })?,
            column_range: self.column_range,
            hidden_columns: self.hidden_columns,
            start_row_index: self.start_row_index,
            row_range: self.row_range,
            analytics: self.analytics,
        })
    }
}
