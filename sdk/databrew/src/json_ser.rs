// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_delete_recipe_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteRecipeVersionInput,
) {
    if let Some(var_1) = &input.recipe_versions {
        let mut array_2 = object.key("RecipeVersions").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_create_dataset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) {
    if let Some(var_4) = &input.format {
        object.key("Format").string(var_4.as_str());
    }
    if let Some(var_5) = &input.format_options {
        let mut object_6 = object.key("FormatOptions").start_object();
        crate::json_ser::serialize_structure_format_options(&mut object_6, var_5);
        object_6.finish();
    }
    if let Some(var_7) = &input.input {
        let mut object_8 = object.key("Input").start_object();
        crate::json_ser::serialize_structure_input(&mut object_8, var_7);
        object_8.finish();
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9);
    }
    if let Some(var_10) = &input.path_options {
        let mut object_11 = object.key("PathOptions").start_object();
        crate::json_ser::serialize_structure_path_options(&mut object_11, var_10);
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14).string(value_15);
            }
        }
        object_13.finish();
    }
}

pub fn serialize_structure_create_profile_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileJobInput,
) {
    if let Some(var_16) = &input.dataset_name {
        object.key("DatasetName").string(var_16);
    }
    if let Some(var_17) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_17);
    }
    if let Some(var_18) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_18.as_str());
    }
    if let Some(var_19) = &input.job_sample {
        let mut object_20 = object.key("JobSample").start_object();
        crate::json_ser::serialize_structure_job_sample(&mut object_20, var_19);
        object_20.finish();
    }
    if let Some(var_21) = &input.log_subscription {
        object.key("LogSubscription").string(var_21.as_str());
    }
    if input.max_capacity != 0 {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_capacity).into()),
        );
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22);
    }
    if let Some(var_23) = &input.output_location {
        let mut object_24 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_24, var_23);
        object_24.finish();
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25);
    }
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28).string(value_29);
            }
        }
        object_27.finish();
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_30) = &input.dataset_name {
        object.key("DatasetName").string(var_30);
    }
    if let Some(var_31) = &input.name {
        object.key("Name").string(var_31);
    }
    if let Some(var_32) = &input.recipe_name {
        object.key("RecipeName").string(var_32);
    }
    if let Some(var_33) = &input.role_arn {
        object.key("RoleArn").string(var_33);
    }
    if let Some(var_34) = &input.sample {
        let mut object_35 = object.key("Sample").start_object();
        crate::json_ser::serialize_structure_sample(&mut object_35, var_34);
        object_35.finish();
    }
    if let Some(var_36) = &input.tags {
        let mut object_37 = object.key("Tags").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
}

pub fn serialize_structure_create_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRecipeInput,
) {
    if let Some(var_40) = &input.description {
        object.key("Description").string(var_40);
    }
    if let Some(var_41) = &input.name {
        object.key("Name").string(var_41);
    }
    if let Some(var_42) = &input.steps {
        let mut array_43 = object.key("Steps").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_recipe_step(&mut object_45, item_44);
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.tags {
        let mut object_47 = object.key("Tags").start_object();
        for (key_48, value_49) in var_46 {
            {
                object_47.key(key_48).string(value_49);
            }
        }
        object_47.finish();
    }
}

pub fn serialize_structure_create_recipe_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRecipeJobInput,
) {
    if let Some(var_50) = &input.data_catalog_outputs {
        let mut array_51 = object.key("DataCatalogOutputs").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_data_catalog_output(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.dataset_name {
        object.key("DatasetName").string(var_54);
    }
    if let Some(var_55) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_55);
    }
    if let Some(var_56) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_56.as_str());
    }
    if let Some(var_57) = &input.log_subscription {
        object.key("LogSubscription").string(var_57.as_str());
    }
    if input.max_capacity != 0 {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_capacity).into()),
        );
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_58) = &input.name {
        object.key("Name").string(var_58);
    }
    if let Some(var_59) = &input.outputs {
        let mut array_60 = object.key("Outputs").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_output(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.project_name {
        object.key("ProjectName").string(var_63);
    }
    if let Some(var_64) = &input.recipe_reference {
        let mut object_65 = object.key("RecipeReference").start_object();
        crate::json_ser::serialize_structure_recipe_reference(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.role_arn {
        object.key("RoleArn").string(var_66);
    }
    if let Some(var_67) = &input.tags {
        let mut object_68 = object.key("Tags").start_object();
        for (key_69, value_70) in var_67 {
            {
                object_68.key(key_69).string(value_70);
            }
        }
        object_68.finish();
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_create_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScheduleInput,
) {
    if let Some(var_71) = &input.cron_expression {
        object.key("CronExpression").string(var_71);
    }
    if let Some(var_72) = &input.job_names {
        let mut array_73 = object.key("JobNames").start_array();
        for item_74 in var_72 {
            {
                array_73.value().string(item_74);
            }
        }
        array_73.finish();
    }
    if let Some(var_75) = &input.name {
        object.key("Name").string(var_75);
    }
    if let Some(var_76) = &input.tags {
        let mut object_77 = object.key("Tags").start_object();
        for (key_78, value_79) in var_76 {
            {
                object_77.key(key_78).string(value_79);
            }
        }
        object_77.finish();
    }
}

pub fn serialize_structure_publish_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PublishRecipeInput,
) {
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80);
    }
}

pub fn serialize_structure_send_project_session_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendProjectSessionActionInput,
) {
    if let Some(var_81) = &input.client_session_id {
        object.key("ClientSessionId").string(var_81);
    }
    if input.preview {
        object.key("Preview").boolean(input.preview);
    }
    if let Some(var_82) = &input.recipe_step {
        let mut object_83 = object.key("RecipeStep").start_object();
        crate::json_ser::serialize_structure_recipe_step(&mut object_83, var_82);
        object_83.finish();
    }
    if let Some(var_84) = &input.step_index {
        object.key("StepIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.view_frame {
        let mut object_86 = object.key("ViewFrame").start_object();
        crate::json_ser::serialize_structure_view_frame(&mut object_86, var_85);
        object_86.finish();
    }
}

pub fn serialize_structure_start_project_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartProjectSessionInput,
) {
    if input.assume_control {
        object.key("AssumeControl").boolean(input.assume_control);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_87) = &input.tags {
        let mut object_88 = object.key("Tags").start_object();
        for (key_89, value_90) in var_87 {
            {
                object_88.key(key_89).string(value_90);
            }
        }
        object_88.finish();
    }
}

pub fn serialize_structure_update_dataset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetInput,
) {
    if let Some(var_91) = &input.format {
        object.key("Format").string(var_91.as_str());
    }
    if let Some(var_92) = &input.format_options {
        let mut object_93 = object.key("FormatOptions").start_object();
        crate::json_ser::serialize_structure_format_options(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.input {
        let mut object_95 = object.key("Input").start_object();
        crate::json_ser::serialize_structure_input(&mut object_95, var_94);
        object_95.finish();
    }
    if let Some(var_96) = &input.path_options {
        let mut object_97 = object.key("PathOptions").start_object();
        crate::json_ser::serialize_structure_path_options(&mut object_97, var_96);
        object_97.finish();
    }
}

pub fn serialize_structure_update_profile_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileJobInput,
) {
    if let Some(var_98) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_98);
    }
    if let Some(var_99) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_99.as_str());
    }
    if let Some(var_100) = &input.job_sample {
        let mut object_101 = object.key("JobSample").start_object();
        crate::json_ser::serialize_structure_job_sample(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.log_subscription {
        object.key("LogSubscription").string(var_102.as_str());
    }
    if input.max_capacity != 0 {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_capacity).into()),
        );
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_103) = &input.output_location {
        let mut object_104 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_104, var_103);
        object_104.finish();
    }
    if let Some(var_105) = &input.role_arn {
        object.key("RoleArn").string(var_105);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_update_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProjectInput,
) {
    if let Some(var_106) = &input.role_arn {
        object.key("RoleArn").string(var_106);
    }
    if let Some(var_107) = &input.sample {
        let mut object_108 = object.key("Sample").start_object();
        crate::json_ser::serialize_structure_sample(&mut object_108, var_107);
        object_108.finish();
    }
}

pub fn serialize_structure_update_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRecipeInput,
) {
    if let Some(var_109) = &input.description {
        object.key("Description").string(var_109);
    }
    if let Some(var_110) = &input.steps {
        let mut array_111 = object.key("Steps").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_recipe_step(&mut object_113, item_112);
                object_113.finish();
            }
        }
        array_111.finish();
    }
}

pub fn serialize_structure_update_recipe_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRecipeJobInput,
) {
    if let Some(var_114) = &input.data_catalog_outputs {
        let mut array_115 = object.key("DataCatalogOutputs").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_data_catalog_output(&mut object_117, item_116);
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_118);
    }
    if let Some(var_119) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_119.as_str());
    }
    if let Some(var_120) = &input.log_subscription {
        object.key("LogSubscription").string(var_120.as_str());
    }
    if input.max_capacity != 0 {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_capacity).into()),
        );
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_121) = &input.outputs {
        let mut array_122 = object.key("Outputs").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_output(&mut object_124, item_123);
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.role_arn {
        object.key("RoleArn").string(var_125);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
}

pub fn serialize_structure_update_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateScheduleInput,
) {
    if let Some(var_126) = &input.cron_expression {
        object.key("CronExpression").string(var_126);
    }
    if let Some(var_127) = &input.job_names {
        let mut array_128 = object.key("JobNames").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129);
            }
        }
        array_128.finish();
    }
}

pub fn serialize_structure_format_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FormatOptions,
) {
    if let Some(var_130) = &input.json {
        let mut object_131 = object.key("Json").start_object();
        crate::json_ser::serialize_structure_json_options(&mut object_131, var_130);
        object_131.finish();
    }
    if let Some(var_132) = &input.excel {
        let mut object_133 = object.key("Excel").start_object();
        crate::json_ser::serialize_structure_excel_options(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.csv {
        let mut object_135 = object.key("Csv").start_object();
        crate::json_ser::serialize_structure_csv_options(&mut object_135, var_134);
        object_135.finish();
    }
}

pub fn serialize_structure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Input,
) {
    if let Some(var_136) = &input.s3_input_definition {
        let mut object_137 = object.key("S3InputDefinition").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_137, var_136);
        object_137.finish();
    }
    if let Some(var_138) = &input.data_catalog_input_definition {
        let mut object_139 = object.key("DataCatalogInputDefinition").start_object();
        crate::json_ser::serialize_structure_data_catalog_input_definition(
            &mut object_139,
            var_138,
        );
        object_139.finish();
    }
    if let Some(var_140) = &input.database_input_definition {
        let mut object_141 = object.key("DatabaseInputDefinition").start_object();
        crate::json_ser::serialize_structure_database_input_definition(&mut object_141, var_140);
        object_141.finish();
    }
}

pub fn serialize_structure_path_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PathOptions,
) {
    if let Some(var_142) = &input.last_modified_date_condition {
        let mut object_143 = object.key("LastModifiedDateCondition").start_object();
        crate::json_ser::serialize_structure_filter_expression(&mut object_143, var_142);
        object_143.finish();
    }
    if let Some(var_144) = &input.files_limit {
        let mut object_145 = object.key("FilesLimit").start_object();
        crate::json_ser::serialize_structure_files_limit(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.parameters {
        let mut object_147 = object.key("Parameters").start_object();
        for (key_148, value_149) in var_146 {
            {
                let mut object_150 = object_147.key(key_148).start_object();
                crate::json_ser::serialize_structure_dataset_parameter(&mut object_150, value_149);
                object_150.finish();
            }
        }
        object_147.finish();
    }
}

pub fn serialize_structure_job_sample(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobSample,
) {
    if let Some(var_151) = &input.mode {
        object.key("Mode").string(var_151.as_str());
    }
    if let Some(var_152) = &input.size {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_152).into()),
        );
    }
}

pub fn serialize_structure_s3_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) {
    if let Some(var_153) = &input.bucket {
        object.key("Bucket").string(var_153);
    }
    if let Some(var_154) = &input.key {
        object.key("Key").string(var_154);
    }
}

pub fn serialize_structure_sample(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Sample,
) {
    if let Some(var_155) = &input.size {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.r#type {
        object.key("Type").string(var_156.as_str());
    }
}

pub fn serialize_structure_recipe_step(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecipeStep,
) {
    if let Some(var_157) = &input.action {
        let mut object_158 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_recipe_action(&mut object_158, var_157);
        object_158.finish();
    }
    if let Some(var_159) = &input.condition_expressions {
        let mut array_160 = object.key("ConditionExpressions").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_condition_expression(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
}

pub fn serialize_structure_data_catalog_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogOutput,
) {
    if let Some(var_163) = &input.catalog_id {
        object.key("CatalogId").string(var_163);
    }
    if let Some(var_164) = &input.database_name {
        object.key("DatabaseName").string(var_164);
    }
    if let Some(var_165) = &input.table_name {
        object.key("TableName").string(var_165);
    }
    if let Some(var_166) = &input.s3_options {
        let mut object_167 = object.key("S3Options").start_object();
        crate::json_ser::serialize_structure_s3_table_output_options(&mut object_167, var_166);
        object_167.finish();
    }
    if let Some(var_168) = &input.database_options {
        let mut object_169 = object.key("DatabaseOptions").start_object();
        crate::json_ser::serialize_structure_database_table_output_options(
            &mut object_169,
            var_168,
        );
        object_169.finish();
    }
    if input.overwrite {
        object.key("Overwrite").boolean(input.overwrite);
    }
}

pub fn serialize_structure_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Output,
) {
    if let Some(var_170) = &input.compression_format {
        object.key("CompressionFormat").string(var_170.as_str());
    }
    if let Some(var_171) = &input.format {
        object.key("Format").string(var_171.as_str());
    }
    if let Some(var_172) = &input.partition_columns {
        let mut array_173 = object.key("PartitionColumns").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.location {
        let mut object_176 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_176, var_175);
        object_176.finish();
    }
    if input.overwrite {
        object.key("Overwrite").boolean(input.overwrite);
    }
    if let Some(var_177) = &input.format_options {
        let mut object_178 = object.key("FormatOptions").start_object();
        crate::json_ser::serialize_structure_output_format_options(&mut object_178, var_177);
        object_178.finish();
    }
}

pub fn serialize_structure_recipe_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecipeReference,
) {
    if let Some(var_179) = &input.name {
        object.key("Name").string(var_179);
    }
    if let Some(var_180) = &input.recipe_version {
        object.key("RecipeVersion").string(var_180);
    }
}

pub fn serialize_structure_view_frame(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ViewFrame,
) {
    if let Some(var_181) = &input.start_column_index {
        object.key("StartColumnIndex").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.column_range {
        object.key("ColumnRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.hidden_columns {
        let mut array_184 = object.key("HiddenColumns").start_array();
        for item_185 in var_183 {
            {
                array_184.value().string(item_185);
            }
        }
        array_184.finish();
    }
}

pub fn serialize_structure_json_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonOptions,
) {
    if input.multi_line {
        object.key("MultiLine").boolean(input.multi_line);
    }
}

pub fn serialize_structure_excel_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExcelOptions,
) {
    if let Some(var_186) = &input.sheet_names {
        let mut array_187 = object.key("SheetNames").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188);
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.sheet_indexes {
        let mut array_190 = object.key("SheetIndexes").start_array();
        for item_191 in var_189 {
            {
                array_190.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_191).into()),
                );
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.header_row {
        object.key("HeaderRow").boolean(*var_192);
    }
}

pub fn serialize_structure_csv_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvOptions,
) {
    if let Some(var_193) = &input.delimiter {
        object.key("Delimiter").string(var_193);
    }
    if let Some(var_194) = &input.header_row {
        object.key("HeaderRow").boolean(*var_194);
    }
}

pub fn serialize_structure_data_catalog_input_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogInputDefinition,
) {
    if let Some(var_195) = &input.catalog_id {
        object.key("CatalogId").string(var_195);
    }
    if let Some(var_196) = &input.database_name {
        object.key("DatabaseName").string(var_196);
    }
    if let Some(var_197) = &input.table_name {
        object.key("TableName").string(var_197);
    }
    if let Some(var_198) = &input.temp_directory {
        let mut object_199 = object.key("TempDirectory").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_199, var_198);
        object_199.finish();
    }
}

pub fn serialize_structure_database_input_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInputDefinition,
) {
    if let Some(var_200) = &input.glue_connection_name {
        object.key("GlueConnectionName").string(var_200);
    }
    if let Some(var_201) = &input.database_table_name {
        object.key("DatabaseTableName").string(var_201);
    }
    if let Some(var_202) = &input.temp_directory {
        let mut object_203 = object.key("TempDirectory").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_203, var_202);
        object_203.finish();
    }
}

pub fn serialize_structure_filter_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterExpression,
) {
    if let Some(var_204) = &input.expression {
        object.key("Expression").string(var_204);
    }
    if let Some(var_205) = &input.values_map {
        let mut object_206 = object.key("ValuesMap").start_object();
        for (key_207, value_208) in var_205 {
            {
                object_206.key(key_207).string(value_208);
            }
        }
        object_206.finish();
    }
}

pub fn serialize_structure_files_limit(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilesLimit,
) {
    {
        object.key("MaxFiles").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_files).into()),
        );
    }
    if let Some(var_209) = &input.ordered_by {
        object.key("OrderedBy").string(var_209.as_str());
    }
    if let Some(var_210) = &input.order {
        object.key("Order").string(var_210.as_str());
    }
}

pub fn serialize_structure_dataset_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetParameter,
) {
    if let Some(var_211) = &input.name {
        object.key("Name").string(var_211);
    }
    if let Some(var_212) = &input.r#type {
        object.key("Type").string(var_212.as_str());
    }
    if let Some(var_213) = &input.datetime_options {
        let mut object_214 = object.key("DatetimeOptions").start_object();
        crate::json_ser::serialize_structure_datetime_options(&mut object_214, var_213);
        object_214.finish();
    }
    if input.create_column {
        object.key("CreateColumn").boolean(input.create_column);
    }
    if let Some(var_215) = &input.filter {
        let mut object_216 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_filter_expression(&mut object_216, var_215);
        object_216.finish();
    }
}

pub fn serialize_structure_recipe_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecipeAction,
) {
    if let Some(var_217) = &input.operation {
        object.key("Operation").string(var_217);
    }
    if let Some(var_218) = &input.parameters {
        let mut object_219 = object.key("Parameters").start_object();
        for (key_220, value_221) in var_218 {
            {
                object_219.key(key_220).string(value_221);
            }
        }
        object_219.finish();
    }
}

pub fn serialize_structure_condition_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionExpression,
) {
    if let Some(var_222) = &input.condition {
        object.key("Condition").string(var_222);
    }
    if let Some(var_223) = &input.value {
        object.key("Value").string(var_223);
    }
    if let Some(var_224) = &input.target_column {
        object.key("TargetColumn").string(var_224);
    }
}

pub fn serialize_structure_s3_table_output_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3TableOutputOptions,
) {
    if let Some(var_225) = &input.location {
        let mut object_226 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_226, var_225);
        object_226.finish();
    }
}

pub fn serialize_structure_database_table_output_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseTableOutputOptions,
) {
    if let Some(var_227) = &input.temp_directory {
        let mut object_228 = object.key("TempDirectory").start_object();
        crate::json_ser::serialize_structure_s3_location(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.table_name {
        object.key("TableName").string(var_229);
    }
}

pub fn serialize_structure_output_format_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputFormatOptions,
) {
    if let Some(var_230) = &input.csv {
        let mut object_231 = object.key("Csv").start_object();
        crate::json_ser::serialize_structure_csv_output_options(&mut object_231, var_230);
        object_231.finish();
    }
}

pub fn serialize_structure_datetime_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatetimeOptions,
) {
    if let Some(var_232) = &input.format {
        object.key("Format").string(var_232);
    }
    if let Some(var_233) = &input.timezone_offset {
        object.key("TimezoneOffset").string(var_233);
    }
    if let Some(var_234) = &input.locale_code {
        object.key("LocaleCode").string(var_234);
    }
}

pub fn serialize_structure_csv_output_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvOutputOptions,
) {
    if let Some(var_235) = &input.delimiter {
        object.key("Delimiter").string(var_235);
    }
}
