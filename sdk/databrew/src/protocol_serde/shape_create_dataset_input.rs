// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dataset::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.format {
        object.key("Format").string(var_1.as_str());
    }
    if let Some(var_2) = &input.format_options {
        #[allow(unused_mut)]
        let mut object_3 = object.key("FormatOptions").start_object();
        crate::protocol_serde::shape_format_options::ser_format_options(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.input {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Input").start_object();
        crate::protocol_serde::shape_input::ser_input(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.path_options {
        #[allow(unused_mut)]
        let mut object_8 = object.key("PathOptions").start_object();
        crate::protocol_serde::shape_path_options::ser_path_options(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
