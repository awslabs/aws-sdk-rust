// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_job_run_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_job_run::DescribeJobRunOutput,
    crate::operation::describe_job_run::DescribeJobRunError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::describe_job_run::DescribeJobRunError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::describe_job_run::DescribeJobRunError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => {
            crate::operation::describe_job_run::DescribeJobRunError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_job_run::DescribeJobRunError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::operation::describe_job_run::DescribeJobRunError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ValidationExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::describe_job_run::DescribeJobRunError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::describe_job_run::DescribeJobRunError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_job_run_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_job_run::DescribeJobRunOutput,
    crate::operation::describe_job_run::DescribeJobRunError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::describe_job_run::builders::DescribeJobRunOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_describe_job_run::de_describe_job_run(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::describe_job_run::DescribeJobRunError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_describe_job_run(
    value: &[u8],
    mut builder: crate::operation::describe_job_run::builders::DescribeJobRunOutputBuilder,
) -> Result<
    crate::operation::describe_job_run::builders::DescribeJobRunOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "Attempt" => {
                        builder = builder.set_attempt(
                            aws_smithy_json::deserialize::token::expect_number_or_null(
                                tokens.next(),
                            )?
                            .map(i32::try_from)
                            .transpose()?,
                        );
                    }
                    "CompletedOn" => {
                        builder = builder.set_completed_on(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "DataCatalogOutputs" => {
                        builder = builder.set_data_catalog_outputs(
                            crate::protocol_serde::shape_data_catalog_output_list::de_data_catalog_output_list(tokens)?
                        );
                    }
                    "DatabaseOutputs" => {
                        builder = builder.set_database_outputs(
                            crate::protocol_serde::shape_database_output_list::de_database_output_list(tokens)?
                        );
                    }
                    "DatasetName" => {
                        builder = builder.set_dataset_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ErrorMessage" => {
                        builder = builder.set_error_message(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "ExecutionTime" => {
                        builder = builder.set_execution_time(
                            aws_smithy_json::deserialize::token::expect_number_or_null(
                                tokens.next(),
                            )?
                            .map(i32::try_from)
                            .transpose()?,
                        );
                    }
                    "JobName" => {
                        builder = builder.set_job_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "JobSample" => {
                        builder = builder.set_job_sample(
                            crate::protocol_serde::shape_job_sample::de_job_sample(tokens)?,
                        );
                    }
                    "LogGroupName" => {
                        builder = builder.set_log_group_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "LogSubscription" => {
                        builder = builder.set_log_subscription(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::LogSubscription::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "Outputs" => {
                        builder = builder.set_outputs(
                            crate::protocol_serde::shape_output_list::de_output_list(tokens)?,
                        );
                    }
                    "ProfileConfiguration" => {
                        builder = builder.set_profile_configuration(
                            crate::protocol_serde::shape_profile_configuration::de_profile_configuration(tokens)?
                        );
                    }
                    "RecipeReference" => {
                        builder = builder.set_recipe_reference(
                            crate::protocol_serde::shape_recipe_reference::de_recipe_reference(
                                tokens,
                            )?,
                        );
                    }
                    "RunId" => {
                        builder = builder.set_run_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "StartedBy" => {
                        builder = builder.set_started_by(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "StartedOn" => {
                        builder = builder.set_started_on(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "State" => {
                        builder = builder.set_state(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::JobRunState::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "ValidationConfigurations" => {
                        builder = builder.set_validation_configurations(
                            crate::protocol_serde::shape_validation_configuration_list::de_validation_configuration_list(tokens)?
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
