// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_path_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PathOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.last_modified_date_condition {
        #[allow(unused_mut)]
        let mut object_2 = object.key("LastModifiedDateCondition").start_object();
        crate::protocol_serde::shape_filter_expression::ser_filter_expression(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.files_limit {
        #[allow(unused_mut)]
        let mut object_4 = object.key("FilesLimit").start_object();
        crate::protocol_serde::shape_files_limit::ser_files_limit(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Parameters").start_object();
        for (key_7, value_8) in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_9 = object_6.key(key_7.as_str()).start_object();
                crate::protocol_serde::shape_dataset_parameter::ser_dataset_parameter(&mut object_9, value_8)?;
                object_9.finish();
            }
        }
        object_6.finish();
    }
    Ok(())
}

pub(crate) fn de_path_options<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::PathOptions>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PathOptionsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LastModifiedDateCondition" => {
                            builder = builder
                                .set_last_modified_date_condition(crate::protocol_serde::shape_filter_expression::de_filter_expression(tokens)?);
                        }
                        "FilesLimit" => {
                            builder = builder.set_files_limit(crate::protocol_serde::shape_files_limit::de_files_limit(tokens)?);
                        }
                        "Parameters" => {
                            builder = builder.set_parameters(crate::protocol_serde::shape_path_parameters_map::de_path_parameters_map(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
