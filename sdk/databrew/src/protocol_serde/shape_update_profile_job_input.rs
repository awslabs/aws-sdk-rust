// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_profile_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_profile_job::UpdateProfileJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Configuration").start_object();
        crate::protocol_serde::shape_profile_configuration::ser_profile_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.job_sample {
        #[allow(unused_mut)]
        let mut object_6 = object.key("JobSample").start_object();
        crate::protocol_serde::shape_job_sample::ser_job_sample(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.log_subscription {
        object.key("LogSubscription").string(var_7.as_str());
    }
    if let Some(var_8) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OutputLocation").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.role_arn {
        object.key("RoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.validation_configurations {
        let mut array_15 = object.key("ValidationConfigurations").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_validation_configuration::ser_validation_configuration(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
