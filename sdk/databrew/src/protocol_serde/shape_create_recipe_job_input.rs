// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_recipe_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_recipe_job::CreateRecipeJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.data_catalog_outputs {
        let mut array_2 = object.key("DataCatalogOutputs").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_data_catalog_output::ser_data_catalog_output(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.database_outputs {
        let mut array_6 = object.key("DatabaseOutputs").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_database_output::ser_database_output(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.dataset_name {
        object.key("DatasetName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.log_subscription {
        object.key("LogSubscription").string(var_12.as_str());
    }
    if let Some(var_13) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.name {
        object.key("Name").string(var_15.as_str());
    }
    if let Some(var_16) = &input.outputs {
        let mut array_17 = object.key("Outputs").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_output::ser_output(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.project_name {
        object.key("ProjectName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.recipe_reference {
        #[allow(unused_mut)]
        let mut object_22 = object.key("RecipeReference").start_object();
        crate::protocol_serde::shape_recipe_reference::ser_recipe_reference(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.role_arn {
        object.key("RoleArn").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        #[allow(unused_mut)]
        let mut object_25 = object.key("Tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26.as_str()).string(value_27.as_str());
            }
        }
        object_25.finish();
    }
    if let Some(var_28) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    Ok(())
}
