// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Rule,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if input.disabled {
        object.key("Disabled").boolean(input.disabled);
    }
    if let Some(var_2) = &input.check_expression {
        object.key("CheckExpression").string(var_2.as_str());
    }
    if let Some(var_3) = &input.substitution_map {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SubstitutionMap").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.threshold {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Threshold").start_object();
        crate::protocol_serde::shape_threshold::ser_threshold(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.column_selectors {
        let mut array_10 = object.key("ColumnSelectors").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_column_selector::ser_column_selector(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub(crate) fn de_rule<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Rule>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RuleBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Disabled" => {
                                builder = builder.set_disabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CheckExpression" => {
                                builder = builder.set_check_expression(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SubstitutionMap" => {
                                builder = builder.set_substitution_map(
                                    crate::protocol_serde::shape_values_map::de_values_map(tokens)?,
                                );
                            }
                            "Threshold" => {
                                builder = builder.set_threshold(
                                    crate::protocol_serde::shape_threshold::de_threshold(tokens)?,
                                );
                            }
                            "ColumnSelectors" => {
                                builder = builder.set_column_selectors(
                                    crate::protocol_serde::shape_column_selector_list::de_column_selector_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
