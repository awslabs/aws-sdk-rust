// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_profile_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_profile_job::CreateProfileJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Configuration").start_object();
        crate::protocol_serde::shape_profile_configuration::ser_profile_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.dataset_name {
        object.key("DatasetName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.job_sample {
        #[allow(unused_mut)]
        let mut object_7 = object.key("JobSample").start_object();
        crate::protocol_serde::shape_job_sample::ser_job_sample(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.log_subscription {
        object.key("LogSubscription").string(var_8.as_str());
    }
    if let Some(var_9) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.name {
        object.key("Name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_13 = object.key("OutputLocation").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.role_arn {
        object.key("RoleArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.validation_configurations {
        let mut array_21 = object.key("ValidationConfigurations").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_validation_configuration::ser_validation_configuration(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}
