// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_profile_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_profile_job::CreateProfileJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Configuration").start_object();
        crate::protocol_serde::shape_profile_configuration::ser_profile_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.dataset_name {
        object.key("DatasetName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.job_sample {
        #[allow(unused_mut)]
        let mut object_7 = object.key("JobSample").start_object();
        crate::protocol_serde::shape_job_sample::ser_job_sample(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.log_subscription {
        object.key("LogSubscription").string(var_8.as_str());
    }
    if input.max_capacity != 0 {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_capacity).into()),
        );
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OutputLocation").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.role_arn {
        object.key("RoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_17) = &input.validation_configurations {
        let mut array_18 = object.key("ValidationConfigurations").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_validation_configuration::ser_validation_configuration(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}
