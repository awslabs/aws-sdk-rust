// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Output,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.compression_format {
        object.key("CompressionFormat").string(var_1.as_str());
    }
    if let Some(var_2) = &input.format {
        object.key("Format").string(var_2.as_str());
    }
    if let Some(var_3) = &input.partition_columns {
        let mut array_4 = object.key("PartitionColumns").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.location {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_7, var_6)?;
        object_7.finish();
    }
    if input.overwrite {
        object.key("Overwrite").boolean(input.overwrite);
    }
    if let Some(var_8) = &input.format_options {
        #[allow(unused_mut)]
        let mut object_9 = object.key("FormatOptions").start_object();
        crate::protocol_serde::shape_output_format_options::ser_output_format_options(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.max_output_files {
        object.key("MaxOutputFiles").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_output<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Output>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OutputBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "CompressionFormat" => {
                                builder = builder.set_compression_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::CompressionFormat::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "Format" => {
                                builder = builder.set_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::OutputFormat::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "PartitionColumns" => {
                                builder = builder.set_partition_columns(
                                    crate::protocol_serde::shape_column_name_list::de_column_name_list(tokens)?
                                );
                            }
                            "Location" => {
                                builder = builder.set_location(
                                    crate::protocol_serde::shape_s3_location::de_s3_location(
                                        tokens,
                                    )?,
                                );
                            }
                            "Overwrite" => {
                                builder = builder.set_overwrite(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "FormatOptions" => {
                                builder = builder.set_format_options(
                                    crate::protocol_serde::shape_output_format_options::de_output_format_options(tokens)?
                                );
                            }
                            "MaxOutputFiles" => {
                                builder = builder.set_max_output_files(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
