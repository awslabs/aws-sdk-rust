// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_associate_encryption_config;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_associate_identity_provider_config;

pub(crate) mod shape_create_addon;

pub(crate) mod shape_create_cluster;

pub(crate) mod shape_create_fargate_profile;

pub(crate) mod shape_create_nodegroup;

pub(crate) mod shape_delete_addon;

pub(crate) mod shape_delete_cluster;

pub(crate) mod shape_delete_fargate_profile;

pub(crate) mod shape_delete_nodegroup;

pub(crate) mod shape_deregister_cluster;

pub(crate) mod shape_describe_addon;

pub(crate) mod shape_describe_addon_configuration;

pub(crate) mod shape_describe_addon_versions;

pub(crate) mod shape_describe_cluster;

pub(crate) mod shape_describe_fargate_profile;

pub(crate) mod shape_describe_identity_provider_config;

pub(crate) mod shape_describe_nodegroup;

pub(crate) mod shape_describe_update;

pub(crate) mod shape_disassociate_identity_provider_config;

pub(crate) mod shape_list_addons;

pub(crate) mod shape_list_clusters;

pub(crate) mod shape_list_fargate_profiles;

pub(crate) mod shape_list_identity_provider_configs;

pub(crate) mod shape_list_nodegroups;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_updates;

pub(crate) mod shape_register_cluster;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_addon;

pub(crate) mod shape_update_cluster_config;

pub(crate) mod shape_update_cluster_version;

pub(crate) mod shape_update_nodegroup_config;

pub(crate) mod shape_update_nodegroup_version;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_associate_encryption_config_input;

pub(crate) mod shape_associate_identity_provider_config_input;

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_client_exception;

pub(crate) mod shape_create_addon_input;

pub(crate) mod shape_create_cluster_input;

pub(crate) mod shape_create_fargate_profile_input;

pub(crate) mod shape_create_nodegroup_input;

pub(crate) mod shape_describe_identity_provider_config_input;

pub(crate) mod shape_disassociate_identity_provider_config_input;

pub(crate) mod shape_invalid_parameter_exception;

pub(crate) mod shape_invalid_request_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_register_cluster_input;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_limit_exceeded_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_resource_propagation_delay_exception;

pub(crate) mod shape_server_exception;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_unsupported_availability_zone_exception;

pub(crate) mod shape_update_addon_input;

pub(crate) mod shape_update_cluster_config_input;

pub(crate) mod shape_update_cluster_version_input;

pub(crate) mod shape_update_nodegroup_config_input;

pub(crate) mod shape_update_nodegroup_version_input;

pub(crate) mod shape_addon;

pub(crate) mod shape_addons;

pub(crate) mod shape_cluster;

pub(crate) mod shape_connector_config_request;

pub(crate) mod shape_encryption_config;

pub(crate) mod shape_fargate_profile;

pub(crate) mod shape_fargate_profile_selector;

pub(crate) mod shape_identity_provider_config;

pub(crate) mod shape_identity_provider_config_response;

pub(crate) mod shape_identity_provider_configs;

pub(crate) mod shape_kubernetes_network_config_request;

pub(crate) mod shape_launch_template_specification;

pub(crate) mod shape_logging;

pub(crate) mod shape_nodegroup;

pub(crate) mod shape_nodegroup_scaling_config;

pub(crate) mod shape_nodegroup_update_config;

pub(crate) mod shape_oidc_identity_provider_config_request;

pub(crate) mod shape_outpost_config_request;

pub(crate) mod shape_remote_access_config;

pub(crate) mod shape_string_list;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_taint;

pub(crate) mod shape_update;

pub(crate) mod shape_update_labels_payload;

pub(crate) mod shape_update_taints_payload;

pub(crate) mod shape_vpc_config_request;

pub(crate) mod shape_addon_health;

pub(crate) mod shape_addon_info;

pub(crate) mod shape_certificate;

pub(crate) mod shape_cluster_health;

pub(crate) mod shape_connector_config_response;

pub(crate) mod shape_control_plane_placement_request;

pub(crate) mod shape_encryption_config_list;

pub(crate) mod shape_error_details;

pub(crate) mod shape_fargate_profile_selectors;

pub(crate) mod shape_identity;

pub(crate) mod shape_kubernetes_network_config_response;

pub(crate) mod shape_labels_map;

pub(crate) mod shape_log_setup;

pub(crate) mod shape_marketplace_information;

pub(crate) mod shape_nodegroup_health;

pub(crate) mod shape_nodegroup_resources;

pub(crate) mod shape_oidc_identity_provider_config;

pub(crate) mod shape_outpost_config_response;

pub(crate) mod shape_provider;

pub(crate) mod shape_taints_list;

pub(crate) mod shape_update_params;

pub(crate) mod shape_vpc_config_response;

pub(crate) mod shape_addon_issue_list;

pub(crate) mod shape_addon_version_info_list;

pub(crate) mod shape_auto_scaling_group_list;

pub(crate) mod shape_cluster_issue_list;

pub(crate) mod shape_control_plane_placement_response;

pub(crate) mod shape_error_detail;

pub(crate) mod shape_issue_list;

pub(crate) mod shape_log_setups;

pub(crate) mod shape_oidc;

pub(crate) mod shape_required_claims_map;

pub(crate) mod shape_update_param;

pub(crate) mod shape_addon_issue;

pub(crate) mod shape_addon_version_info;

pub(crate) mod shape_auto_scaling_group;

pub(crate) mod shape_cluster_issue;

pub(crate) mod shape_fargate_profile_label;

pub(crate) mod shape_issue;

pub(crate) mod shape_compatibilities;

pub(crate) mod shape_log_types;

pub(crate) mod shape_compatibility;
