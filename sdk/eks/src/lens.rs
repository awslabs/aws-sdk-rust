// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_addon_versions_output_next_token(
    input: &crate::operation::describe_addon_versions::DescribeAddonVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_addons_output_next_token(
    input: &crate::operation::list_addons::ListAddonsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_clusters_output_next_token(
    input: &crate::operation::list_clusters::ListClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_fargate_profiles_output_next_token(
    input: &crate::operation::list_fargate_profiles::ListFargateProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_identity_provider_configs_output_next_token(
    input: &crate::operation::list_identity_provider_configs::ListIdentityProviderConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_nodegroups_output_next_token(
    input: &crate::operation::list_nodegroups::ListNodegroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_updates_output_next_token(
    input: &crate::operation::list_updates::ListUpdatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_addon_versions_output_addons(
    input: crate::operation::describe_addon_versions::DescribeAddonVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AddonInfo>> {
    let input = match input.addons {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_addons_output_addons(
    input: crate::operation::list_addons::ListAddonsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.addons {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_clusters_output_clusters(
    input: crate::operation::list_clusters::ListClustersOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_fargate_profiles_output_fargate_profile_names(
    input: crate::operation::list_fargate_profiles::ListFargateProfilesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.fargate_profile_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_identity_provider_configs_output_identity_provider_configs(
    input: crate::operation::list_identity_provider_configs::ListIdentityProviderConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::IdentityProviderConfig>> {
    let input = match input.identity_provider_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_nodegroups_output_nodegroups(
    input: crate::operation::list_nodegroups::ListNodegroupsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.nodegroups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_updates_output_update_ids(
    input: crate::operation::list_updates::ListUpdatesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.update_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
