// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `UpdateParamType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let updateparamtype = unimplemented!();
/// match updateparamtype {
///     UpdateParamType::AddonVersion => { /* ... */ },
///     UpdateParamType::AuthenticationMode => { /* ... */ },
///     UpdateParamType::ClusterLogging => { /* ... */ },
///     UpdateParamType::ComputeConfig => { /* ... */ },
///     UpdateParamType::ConfigurationValues => { /* ... */ },
///     UpdateParamType::DeletionProtection => { /* ... */ },
///     UpdateParamType::DesiredSize => { /* ... */ },
///     UpdateParamType::EncryptionConfig => { /* ... */ },
///     UpdateParamType::EndpointPrivateAccess => { /* ... */ },
///     UpdateParamType::EndpointPublicAccess => { /* ... */ },
///     UpdateParamType::IdentityProviderConfig => { /* ... */ },
///     UpdateParamType::KubernetesNetworkConfig => { /* ... */ },
///     UpdateParamType::LabelsToAdd => { /* ... */ },
///     UpdateParamType::LabelsToRemove => { /* ... */ },
///     UpdateParamType::LaunchTemplateName => { /* ... */ },
///     UpdateParamType::LaunchTemplateVersion => { /* ... */ },
///     UpdateParamType::MaxSize => { /* ... */ },
///     UpdateParamType::MaxUnavailable => { /* ... */ },
///     UpdateParamType::MaxUnavailablePercentage => { /* ... */ },
///     UpdateParamType::MinSize => { /* ... */ },
///     UpdateParamType::NodeRepairConfig => { /* ... */ },
///     UpdateParamType::NodeRepairEnabled => { /* ... */ },
///     UpdateParamType::PlatformVersion => { /* ... */ },
///     UpdateParamType::PodIdentityAssociations => { /* ... */ },
///     UpdateParamType::PublicAccessCidrs => { /* ... */ },
///     UpdateParamType::ReleaseVersion => { /* ... */ },
///     UpdateParamType::RemoteNetworkConfig => { /* ... */ },
///     UpdateParamType::ResolveConflicts => { /* ... */ },
///     UpdateParamType::SecurityGroups => { /* ... */ },
///     UpdateParamType::ServiceAccountRoleArn => { /* ... */ },
///     UpdateParamType::StorageConfig => { /* ... */ },
///     UpdateParamType::Subnets => { /* ... */ },
///     UpdateParamType::TaintsToAdd => { /* ... */ },
///     UpdateParamType::TaintsToRemove => { /* ... */ },
///     UpdateParamType::UpdateStrategy => { /* ... */ },
///     UpdateParamType::UpgradePolicy => { /* ... */ },
///     UpdateParamType::Version => { /* ... */ },
///     UpdateParamType::ZonalShiftConfig => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `updateparamtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `UpdateParamType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `UpdateParamType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `UpdateParamType::NewFeature` is defined.
/// Specifically, when `updateparamtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `UpdateParamType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum UpdateParamType {
    #[allow(missing_docs)] // documentation missing in model
    AddonVersion,
    #[allow(missing_docs)] // documentation missing in model
    AuthenticationMode,
    #[allow(missing_docs)] // documentation missing in model
    ClusterLogging,
    #[allow(missing_docs)] // documentation missing in model
    ComputeConfig,
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationValues,
    #[allow(missing_docs)] // documentation missing in model
    DeletionProtection,
    #[allow(missing_docs)] // documentation missing in model
    DesiredSize,
    #[allow(missing_docs)] // documentation missing in model
    EncryptionConfig,
    #[allow(missing_docs)] // documentation missing in model
    EndpointPrivateAccess,
    #[allow(missing_docs)] // documentation missing in model
    EndpointPublicAccess,
    #[allow(missing_docs)] // documentation missing in model
    IdentityProviderConfig,
    #[allow(missing_docs)] // documentation missing in model
    KubernetesNetworkConfig,
    #[allow(missing_docs)] // documentation missing in model
    LabelsToAdd,
    #[allow(missing_docs)] // documentation missing in model
    LabelsToRemove,
    #[allow(missing_docs)] // documentation missing in model
    LaunchTemplateName,
    #[allow(missing_docs)] // documentation missing in model
    LaunchTemplateVersion,
    #[allow(missing_docs)] // documentation missing in model
    MaxSize,
    #[allow(missing_docs)] // documentation missing in model
    MaxUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    MaxUnavailablePercentage,
    #[allow(missing_docs)] // documentation missing in model
    MinSize,
    #[allow(missing_docs)] // documentation missing in model
    NodeRepairConfig,
    #[allow(missing_docs)] // documentation missing in model
    NodeRepairEnabled,
    #[allow(missing_docs)] // documentation missing in model
    PlatformVersion,
    #[allow(missing_docs)] // documentation missing in model
    PodIdentityAssociations,
    #[allow(missing_docs)] // documentation missing in model
    PublicAccessCidrs,
    #[allow(missing_docs)] // documentation missing in model
    ReleaseVersion,
    #[allow(missing_docs)] // documentation missing in model
    RemoteNetworkConfig,
    #[allow(missing_docs)] // documentation missing in model
    ResolveConflicts,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroups,
    #[allow(missing_docs)] // documentation missing in model
    ServiceAccountRoleArn,
    #[allow(missing_docs)] // documentation missing in model
    StorageConfig,
    #[allow(missing_docs)] // documentation missing in model
    Subnets,
    #[allow(missing_docs)] // documentation missing in model
    TaintsToAdd,
    #[allow(missing_docs)] // documentation missing in model
    TaintsToRemove,
    #[allow(missing_docs)] // documentation missing in model
    UpdateStrategy,
    #[allow(missing_docs)] // documentation missing in model
    UpgradePolicy,
    #[allow(missing_docs)] // documentation missing in model
    Version,
    #[allow(missing_docs)] // documentation missing in model
    ZonalShiftConfig,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for UpdateParamType {
    fn from(s: &str) -> Self {
        match s {
            "AddonVersion" => UpdateParamType::AddonVersion,
            "AuthenticationMode" => UpdateParamType::AuthenticationMode,
            "ClusterLogging" => UpdateParamType::ClusterLogging,
            "ComputeConfig" => UpdateParamType::ComputeConfig,
            "ConfigurationValues" => UpdateParamType::ConfigurationValues,
            "DeletionProtection" => UpdateParamType::DeletionProtection,
            "DesiredSize" => UpdateParamType::DesiredSize,
            "EncryptionConfig" => UpdateParamType::EncryptionConfig,
            "EndpointPrivateAccess" => UpdateParamType::EndpointPrivateAccess,
            "EndpointPublicAccess" => UpdateParamType::EndpointPublicAccess,
            "IdentityProviderConfig" => UpdateParamType::IdentityProviderConfig,
            "KubernetesNetworkConfig" => UpdateParamType::KubernetesNetworkConfig,
            "LabelsToAdd" => UpdateParamType::LabelsToAdd,
            "LabelsToRemove" => UpdateParamType::LabelsToRemove,
            "LaunchTemplateName" => UpdateParamType::LaunchTemplateName,
            "LaunchTemplateVersion" => UpdateParamType::LaunchTemplateVersion,
            "MaxSize" => UpdateParamType::MaxSize,
            "MaxUnavailable" => UpdateParamType::MaxUnavailable,
            "MaxUnavailablePercentage" => UpdateParamType::MaxUnavailablePercentage,
            "MinSize" => UpdateParamType::MinSize,
            "NodeRepairConfig" => UpdateParamType::NodeRepairConfig,
            "NodeRepairEnabled" => UpdateParamType::NodeRepairEnabled,
            "PlatformVersion" => UpdateParamType::PlatformVersion,
            "PodIdentityAssociations" => UpdateParamType::PodIdentityAssociations,
            "PublicAccessCidrs" => UpdateParamType::PublicAccessCidrs,
            "ReleaseVersion" => UpdateParamType::ReleaseVersion,
            "RemoteNetworkConfig" => UpdateParamType::RemoteNetworkConfig,
            "ResolveConflicts" => UpdateParamType::ResolveConflicts,
            "SecurityGroups" => UpdateParamType::SecurityGroups,
            "ServiceAccountRoleArn" => UpdateParamType::ServiceAccountRoleArn,
            "StorageConfig" => UpdateParamType::StorageConfig,
            "Subnets" => UpdateParamType::Subnets,
            "TaintsToAdd" => UpdateParamType::TaintsToAdd,
            "TaintsToRemove" => UpdateParamType::TaintsToRemove,
            "UpdateStrategy" => UpdateParamType::UpdateStrategy,
            "UpgradePolicy" => UpdateParamType::UpgradePolicy,
            "Version" => UpdateParamType::Version,
            "ZonalShiftConfig" => UpdateParamType::ZonalShiftConfig,
            other => UpdateParamType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for UpdateParamType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(UpdateParamType::from(s))
    }
}
impl UpdateParamType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            UpdateParamType::AddonVersion => "AddonVersion",
            UpdateParamType::AuthenticationMode => "AuthenticationMode",
            UpdateParamType::ClusterLogging => "ClusterLogging",
            UpdateParamType::ComputeConfig => "ComputeConfig",
            UpdateParamType::ConfigurationValues => "ConfigurationValues",
            UpdateParamType::DeletionProtection => "DeletionProtection",
            UpdateParamType::DesiredSize => "DesiredSize",
            UpdateParamType::EncryptionConfig => "EncryptionConfig",
            UpdateParamType::EndpointPrivateAccess => "EndpointPrivateAccess",
            UpdateParamType::EndpointPublicAccess => "EndpointPublicAccess",
            UpdateParamType::IdentityProviderConfig => "IdentityProviderConfig",
            UpdateParamType::KubernetesNetworkConfig => "KubernetesNetworkConfig",
            UpdateParamType::LabelsToAdd => "LabelsToAdd",
            UpdateParamType::LabelsToRemove => "LabelsToRemove",
            UpdateParamType::LaunchTemplateName => "LaunchTemplateName",
            UpdateParamType::LaunchTemplateVersion => "LaunchTemplateVersion",
            UpdateParamType::MaxSize => "MaxSize",
            UpdateParamType::MaxUnavailable => "MaxUnavailable",
            UpdateParamType::MaxUnavailablePercentage => "MaxUnavailablePercentage",
            UpdateParamType::MinSize => "MinSize",
            UpdateParamType::NodeRepairConfig => "NodeRepairConfig",
            UpdateParamType::NodeRepairEnabled => "NodeRepairEnabled",
            UpdateParamType::PlatformVersion => "PlatformVersion",
            UpdateParamType::PodIdentityAssociations => "PodIdentityAssociations",
            UpdateParamType::PublicAccessCidrs => "PublicAccessCidrs",
            UpdateParamType::ReleaseVersion => "ReleaseVersion",
            UpdateParamType::RemoteNetworkConfig => "RemoteNetworkConfig",
            UpdateParamType::ResolveConflicts => "ResolveConflicts",
            UpdateParamType::SecurityGroups => "SecurityGroups",
            UpdateParamType::ServiceAccountRoleArn => "ServiceAccountRoleArn",
            UpdateParamType::StorageConfig => "StorageConfig",
            UpdateParamType::Subnets => "Subnets",
            UpdateParamType::TaintsToAdd => "TaintsToAdd",
            UpdateParamType::TaintsToRemove => "TaintsToRemove",
            UpdateParamType::UpdateStrategy => "UpdateStrategy",
            UpdateParamType::UpgradePolicy => "UpgradePolicy",
            UpdateParamType::Version => "Version",
            UpdateParamType::ZonalShiftConfig => "ZonalShiftConfig",
            UpdateParamType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AddonVersion",
            "AuthenticationMode",
            "ClusterLogging",
            "ComputeConfig",
            "ConfigurationValues",
            "DeletionProtection",
            "DesiredSize",
            "EncryptionConfig",
            "EndpointPrivateAccess",
            "EndpointPublicAccess",
            "IdentityProviderConfig",
            "KubernetesNetworkConfig",
            "LabelsToAdd",
            "LabelsToRemove",
            "LaunchTemplateName",
            "LaunchTemplateVersion",
            "MaxSize",
            "MaxUnavailable",
            "MaxUnavailablePercentage",
            "MinSize",
            "NodeRepairConfig",
            "NodeRepairEnabled",
            "PlatformVersion",
            "PodIdentityAssociations",
            "PublicAccessCidrs",
            "ReleaseVersion",
            "RemoteNetworkConfig",
            "ResolveConflicts",
            "SecurityGroups",
            "ServiceAccountRoleArn",
            "StorageConfig",
            "Subnets",
            "TaintsToAdd",
            "TaintsToRemove",
            "UpdateStrategy",
            "UpgradePolicy",
            "Version",
            "ZonalShiftConfig",
        ]
    }
}
impl ::std::convert::AsRef<str> for UpdateParamType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl UpdateParamType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for UpdateParamType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            UpdateParamType::AddonVersion => write!(f, "AddonVersion"),
            UpdateParamType::AuthenticationMode => write!(f, "AuthenticationMode"),
            UpdateParamType::ClusterLogging => write!(f, "ClusterLogging"),
            UpdateParamType::ComputeConfig => write!(f, "ComputeConfig"),
            UpdateParamType::ConfigurationValues => write!(f, "ConfigurationValues"),
            UpdateParamType::DeletionProtection => write!(f, "DeletionProtection"),
            UpdateParamType::DesiredSize => write!(f, "DesiredSize"),
            UpdateParamType::EncryptionConfig => write!(f, "EncryptionConfig"),
            UpdateParamType::EndpointPrivateAccess => write!(f, "EndpointPrivateAccess"),
            UpdateParamType::EndpointPublicAccess => write!(f, "EndpointPublicAccess"),
            UpdateParamType::IdentityProviderConfig => write!(f, "IdentityProviderConfig"),
            UpdateParamType::KubernetesNetworkConfig => write!(f, "KubernetesNetworkConfig"),
            UpdateParamType::LabelsToAdd => write!(f, "LabelsToAdd"),
            UpdateParamType::LabelsToRemove => write!(f, "LabelsToRemove"),
            UpdateParamType::LaunchTemplateName => write!(f, "LaunchTemplateName"),
            UpdateParamType::LaunchTemplateVersion => write!(f, "LaunchTemplateVersion"),
            UpdateParamType::MaxSize => write!(f, "MaxSize"),
            UpdateParamType::MaxUnavailable => write!(f, "MaxUnavailable"),
            UpdateParamType::MaxUnavailablePercentage => write!(f, "MaxUnavailablePercentage"),
            UpdateParamType::MinSize => write!(f, "MinSize"),
            UpdateParamType::NodeRepairConfig => write!(f, "NodeRepairConfig"),
            UpdateParamType::NodeRepairEnabled => write!(f, "NodeRepairEnabled"),
            UpdateParamType::PlatformVersion => write!(f, "PlatformVersion"),
            UpdateParamType::PodIdentityAssociations => write!(f, "PodIdentityAssociations"),
            UpdateParamType::PublicAccessCidrs => write!(f, "PublicAccessCidrs"),
            UpdateParamType::ReleaseVersion => write!(f, "ReleaseVersion"),
            UpdateParamType::RemoteNetworkConfig => write!(f, "RemoteNetworkConfig"),
            UpdateParamType::ResolveConflicts => write!(f, "ResolveConflicts"),
            UpdateParamType::SecurityGroups => write!(f, "SecurityGroups"),
            UpdateParamType::ServiceAccountRoleArn => write!(f, "ServiceAccountRoleArn"),
            UpdateParamType::StorageConfig => write!(f, "StorageConfig"),
            UpdateParamType::Subnets => write!(f, "Subnets"),
            UpdateParamType::TaintsToAdd => write!(f, "TaintsToAdd"),
            UpdateParamType::TaintsToRemove => write!(f, "TaintsToRemove"),
            UpdateParamType::UpdateStrategy => write!(f, "UpdateStrategy"),
            UpdateParamType::UpgradePolicy => write!(f, "UpgradePolicy"),
            UpdateParamType::Version => write!(f, "Version"),
            UpdateParamType::ZonalShiftConfig => write!(f, "ZonalShiftConfig"),
            UpdateParamType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
