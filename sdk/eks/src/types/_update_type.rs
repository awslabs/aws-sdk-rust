// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `UpdateType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let updatetype = unimplemented!();
/// match updatetype {
///     UpdateType::AccessConfigUpdate => { /* ... */ },
///     UpdateType::AddonUpdate => { /* ... */ },
///     UpdateType::AssociateEncryptionConfig => { /* ... */ },
///     UpdateType::AssociateIdentityProviderConfig => { /* ... */ },
///     UpdateType::AutoModeUpdate => { /* ... */ },
///     UpdateType::ConfigUpdate => { /* ... */ },
///     UpdateType::DeletionProtectionUpdate => { /* ... */ },
///     UpdateType::DisassociateIdentityProviderConfig => { /* ... */ },
///     UpdateType::EndpointAccessUpdate => { /* ... */ },
///     UpdateType::LoggingUpdate => { /* ... */ },
///     UpdateType::RemoteNetworkConfigUpdate => { /* ... */ },
///     UpdateType::UpgradePolicyUpdate => { /* ... */ },
///     UpdateType::VersionUpdate => { /* ... */ },
///     UpdateType::VpcConfigUpdate => { /* ... */ },
///     UpdateType::ZonalShiftConfigUpdate => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `updatetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `UpdateType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `UpdateType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `UpdateType::NewFeature` is defined.
/// Specifically, when `updatetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `UpdateType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum UpdateType {
    #[allow(missing_docs)] // documentation missing in model
    AccessConfigUpdate,
    #[allow(missing_docs)] // documentation missing in model
    AddonUpdate,
    #[allow(missing_docs)] // documentation missing in model
    AssociateEncryptionConfig,
    #[allow(missing_docs)] // documentation missing in model
    AssociateIdentityProviderConfig,
    #[allow(missing_docs)] // documentation missing in model
    AutoModeUpdate,
    #[allow(missing_docs)] // documentation missing in model
    ConfigUpdate,
    #[allow(missing_docs)] // documentation missing in model
    DeletionProtectionUpdate,
    #[allow(missing_docs)] // documentation missing in model
    DisassociateIdentityProviderConfig,
    #[allow(missing_docs)] // documentation missing in model
    EndpointAccessUpdate,
    #[allow(missing_docs)] // documentation missing in model
    LoggingUpdate,
    #[allow(missing_docs)] // documentation missing in model
    RemoteNetworkConfigUpdate,
    #[allow(missing_docs)] // documentation missing in model
    UpgradePolicyUpdate,
    #[allow(missing_docs)] // documentation missing in model
    VersionUpdate,
    #[allow(missing_docs)] // documentation missing in model
    VpcConfigUpdate,
    #[allow(missing_docs)] // documentation missing in model
    ZonalShiftConfigUpdate,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for UpdateType {
    fn from(s: &str) -> Self {
        match s {
            "AccessConfigUpdate" => UpdateType::AccessConfigUpdate,
            "AddonUpdate" => UpdateType::AddonUpdate,
            "AssociateEncryptionConfig" => UpdateType::AssociateEncryptionConfig,
            "AssociateIdentityProviderConfig" => UpdateType::AssociateIdentityProviderConfig,
            "AutoModeUpdate" => UpdateType::AutoModeUpdate,
            "ConfigUpdate" => UpdateType::ConfigUpdate,
            "DeletionProtectionUpdate" => UpdateType::DeletionProtectionUpdate,
            "DisassociateIdentityProviderConfig" => UpdateType::DisassociateIdentityProviderConfig,
            "EndpointAccessUpdate" => UpdateType::EndpointAccessUpdate,
            "LoggingUpdate" => UpdateType::LoggingUpdate,
            "RemoteNetworkConfigUpdate" => UpdateType::RemoteNetworkConfigUpdate,
            "UpgradePolicyUpdate" => UpdateType::UpgradePolicyUpdate,
            "VersionUpdate" => UpdateType::VersionUpdate,
            "VpcConfigUpdate" => UpdateType::VpcConfigUpdate,
            "ZonalShiftConfigUpdate" => UpdateType::ZonalShiftConfigUpdate,
            other => UpdateType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for UpdateType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(UpdateType::from(s))
    }
}
impl UpdateType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            UpdateType::AccessConfigUpdate => "AccessConfigUpdate",
            UpdateType::AddonUpdate => "AddonUpdate",
            UpdateType::AssociateEncryptionConfig => "AssociateEncryptionConfig",
            UpdateType::AssociateIdentityProviderConfig => "AssociateIdentityProviderConfig",
            UpdateType::AutoModeUpdate => "AutoModeUpdate",
            UpdateType::ConfigUpdate => "ConfigUpdate",
            UpdateType::DeletionProtectionUpdate => "DeletionProtectionUpdate",
            UpdateType::DisassociateIdentityProviderConfig => "DisassociateIdentityProviderConfig",
            UpdateType::EndpointAccessUpdate => "EndpointAccessUpdate",
            UpdateType::LoggingUpdate => "LoggingUpdate",
            UpdateType::RemoteNetworkConfigUpdate => "RemoteNetworkConfigUpdate",
            UpdateType::UpgradePolicyUpdate => "UpgradePolicyUpdate",
            UpdateType::VersionUpdate => "VersionUpdate",
            UpdateType::VpcConfigUpdate => "VpcConfigUpdate",
            UpdateType::ZonalShiftConfigUpdate => "ZonalShiftConfigUpdate",
            UpdateType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessConfigUpdate",
            "AddonUpdate",
            "AssociateEncryptionConfig",
            "AssociateIdentityProviderConfig",
            "AutoModeUpdate",
            "ConfigUpdate",
            "DeletionProtectionUpdate",
            "DisassociateIdentityProviderConfig",
            "EndpointAccessUpdate",
            "LoggingUpdate",
            "RemoteNetworkConfigUpdate",
            "UpgradePolicyUpdate",
            "VersionUpdate",
            "VpcConfigUpdate",
            "ZonalShiftConfigUpdate",
        ]
    }
}
impl ::std::convert::AsRef<str> for UpdateType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl UpdateType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for UpdateType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            UpdateType::AccessConfigUpdate => write!(f, "AccessConfigUpdate"),
            UpdateType::AddonUpdate => write!(f, "AddonUpdate"),
            UpdateType::AssociateEncryptionConfig => write!(f, "AssociateEncryptionConfig"),
            UpdateType::AssociateIdentityProviderConfig => write!(f, "AssociateIdentityProviderConfig"),
            UpdateType::AutoModeUpdate => write!(f, "AutoModeUpdate"),
            UpdateType::ConfigUpdate => write!(f, "ConfigUpdate"),
            UpdateType::DeletionProtectionUpdate => write!(f, "DeletionProtectionUpdate"),
            UpdateType::DisassociateIdentityProviderConfig => write!(f, "DisassociateIdentityProviderConfig"),
            UpdateType::EndpointAccessUpdate => write!(f, "EndpointAccessUpdate"),
            UpdateType::LoggingUpdate => write!(f, "LoggingUpdate"),
            UpdateType::RemoteNetworkConfigUpdate => write!(f, "RemoteNetworkConfigUpdate"),
            UpdateType::UpgradePolicyUpdate => write!(f, "UpgradePolicyUpdate"),
            UpdateType::VersionUpdate => write!(f, "VersionUpdate"),
            UpdateType::VpcConfigUpdate => write!(f, "VpcConfigUpdate"),
            UpdateType::ZonalShiftConfigUpdate => write!(f, "ZonalShiftConfigUpdate"),
            UpdateType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
