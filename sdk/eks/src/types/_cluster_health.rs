// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. You can't use this API with an Amazon EKS cluster on the Amazon Web Services cloud. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClusterHealth {
    /// <p>An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.</p>
    #[doc(hidden)]
    pub issues: std::option::Option<std::vec::Vec<crate::types::ClusterIssue>>,
}
impl ClusterHealth {
    /// <p>An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.</p>
    pub fn issues(&self) -> std::option::Option<&[crate::types::ClusterIssue]> {
        self.issues.as_deref()
    }
}
impl ClusterHealth {
    /// Creates a new builder-style object to manufacture [`ClusterHealth`](crate::types::ClusterHealth).
    pub fn builder() -> crate::types::builders::ClusterHealthBuilder {
        crate::types::builders::ClusterHealthBuilder::default()
    }
}

/// A builder for [`ClusterHealth`](crate::types::ClusterHealth).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusterHealthBuilder {
    pub(crate) issues: std::option::Option<std::vec::Vec<crate::types::ClusterIssue>>,
}
impl ClusterHealthBuilder {
    /// Appends an item to `issues`.
    ///
    /// To override the contents of this collection use [`set_issues`](Self::set_issues).
    ///
    /// <p>An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.</p>
    pub fn issues(mut self, input: crate::types::ClusterIssue) -> Self {
        let mut v = self.issues.unwrap_or_default();
        v.push(input);
        self.issues = Some(v);
        self
    }
    /// <p>An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.</p>
    pub fn set_issues(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ClusterIssue>>,
    ) -> Self {
        self.issues = input;
        self
    }
    /// Consumes the builder and constructs a [`ClusterHealth`](crate::types::ClusterHealth).
    pub fn build(self) -> crate::types::ClusterHealth {
        crate::types::ClusterHealth {
            issues: self.issues,
        }
    }
}
