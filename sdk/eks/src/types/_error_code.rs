// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorcode = unimplemented!();
/// match errorcode {
///     ErrorCode::AccessDenied => { /* ... */ },
///     ErrorCode::AdmissionRequestDenied => { /* ... */ },
///     ErrorCode::ClusterUnreachable => { /* ... */ },
///     ErrorCode::ConfigurationConflict => { /* ... */ },
///     ErrorCode::EniLimitReached => { /* ... */ },
///     ErrorCode::InsufficientFreeAddresses => { /* ... */ },
///     ErrorCode::InsufficientNumberOfReplicas => { /* ... */ },
///     ErrorCode::IpNotAvailable => { /* ... */ },
///     ErrorCode::K8SResourceNotFound => { /* ... */ },
///     ErrorCode::NodeCreationFailure => { /* ... */ },
///     ErrorCode::OperationNotPermitted => { /* ... */ },
///     ErrorCode::PodEvictionFailure => { /* ... */ },
///     ErrorCode::SecurityGroupNotFound => { /* ... */ },
///     ErrorCode::SubnetNotFound => { /* ... */ },
///     ErrorCode::UnknownValue => { /* ... */ },
///     ErrorCode::UnsupportedAddonModification => { /* ... */ },
///     ErrorCode::VpcIdNotFound => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorCode::NewFeature` is defined.
/// Specifically, when `errorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `ErrorCode::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    AdmissionRequestDenied,
    #[allow(missing_docs)] // documentation missing in model
    ClusterUnreachable,
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationConflict,
    #[allow(missing_docs)] // documentation missing in model
    EniLimitReached,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientFreeAddresses,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientNumberOfReplicas,
    #[allow(missing_docs)] // documentation missing in model
    IpNotAvailable,
    #[allow(missing_docs)] // documentation missing in model
    K8SResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    NodeCreationFailure,
    #[allow(missing_docs)] // documentation missing in model
    OperationNotPermitted,
    #[allow(missing_docs)] // documentation missing in model
    PodEvictionFailure,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroupNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SubnetNotFound,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedAddonModification,
    #[allow(missing_docs)] // documentation missing in model
    VpcIdNotFound,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "AccessDenied" => ErrorCode::AccessDenied,
            "AdmissionRequestDenied" => ErrorCode::AdmissionRequestDenied,
            "ClusterUnreachable" => ErrorCode::ClusterUnreachable,
            "ConfigurationConflict" => ErrorCode::ConfigurationConflict,
            "EniLimitReached" => ErrorCode::EniLimitReached,
            "InsufficientFreeAddresses" => ErrorCode::InsufficientFreeAddresses,
            "InsufficientNumberOfReplicas" => ErrorCode::InsufficientNumberOfReplicas,
            "IpNotAvailable" => ErrorCode::IpNotAvailable,
            "K8sResourceNotFound" => ErrorCode::K8SResourceNotFound,
            "NodeCreationFailure" => ErrorCode::NodeCreationFailure,
            "OperationNotPermitted" => ErrorCode::OperationNotPermitted,
            "PodEvictionFailure" => ErrorCode::PodEvictionFailure,
            "SecurityGroupNotFound" => ErrorCode::SecurityGroupNotFound,
            "SubnetNotFound" => ErrorCode::SubnetNotFound,
            "Unknown" => ErrorCode::UnknownValue,
            "UnsupportedAddonModification" => ErrorCode::UnsupportedAddonModification,
            "VpcIdNotFound" => ErrorCode::VpcIdNotFound,
            other => ErrorCode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ErrorCode::from(s))
    }
}
impl ErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorCode::AccessDenied => "AccessDenied",
            ErrorCode::AdmissionRequestDenied => "AdmissionRequestDenied",
            ErrorCode::ClusterUnreachable => "ClusterUnreachable",
            ErrorCode::ConfigurationConflict => "ConfigurationConflict",
            ErrorCode::EniLimitReached => "EniLimitReached",
            ErrorCode::InsufficientFreeAddresses => "InsufficientFreeAddresses",
            ErrorCode::InsufficientNumberOfReplicas => "InsufficientNumberOfReplicas",
            ErrorCode::IpNotAvailable => "IpNotAvailable",
            ErrorCode::K8SResourceNotFound => "K8sResourceNotFound",
            ErrorCode::NodeCreationFailure => "NodeCreationFailure",
            ErrorCode::OperationNotPermitted => "OperationNotPermitted",
            ErrorCode::PodEvictionFailure => "PodEvictionFailure",
            ErrorCode::SecurityGroupNotFound => "SecurityGroupNotFound",
            ErrorCode::SubnetNotFound => "SubnetNotFound",
            ErrorCode::UnknownValue => "Unknown",
            ErrorCode::UnsupportedAddonModification => "UnsupportedAddonModification",
            ErrorCode::VpcIdNotFound => "VpcIdNotFound",
            ErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessDenied",
            "AdmissionRequestDenied",
            "ClusterUnreachable",
            "ConfigurationConflict",
            "EniLimitReached",
            "InsufficientFreeAddresses",
            "InsufficientNumberOfReplicas",
            "IpNotAvailable",
            "K8sResourceNotFound",
            "NodeCreationFailure",
            "OperationNotPermitted",
            "PodEvictionFailure",
            "SecurityGroupNotFound",
            "SubnetNotFound",
            "Unknown",
            "UnsupportedAddonModification",
            "VpcIdNotFound",
        ]
    }
}
impl AsRef<str> for ErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
