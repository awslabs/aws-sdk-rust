// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon EKS add-on. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html">Amazon EKS add-ons</a> in the <i>Amazon EKS User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Addon {
    /// <p>The name of the add-on.</p>
    #[doc(hidden)]
    pub addon_name: std::option::Option<std::string::String>,
    /// <p>The name of the cluster.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The status of the add-on.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AddonStatus>,
    /// <p>The version of the add-on.</p>
    #[doc(hidden)]
    pub addon_version: std::option::Option<std::string::String>,
    /// <p>An object that represents the health of the add-on.</p>
    #[doc(hidden)]
    pub health: std::option::Option<crate::types::AddonHealth>,
    /// <p>The Amazon Resource Name (ARN) of the add-on.</p>
    #[doc(hidden)]
    pub addon_arn: std::option::Option<std::string::String>,
    /// <p>The date and time that the add-on was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the add-on was last modified.</p>
    #[doc(hidden)]
    pub modified_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes service account that the add-on uses.</p>
    #[doc(hidden)]
    pub service_account_role_arn: std::option::Option<std::string::String>,
    /// <p>The metadata that you apply to the add-on to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Add-on tags do not propagate to any other resources associated with the cluster. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The publisher of the add-on.</p>
    #[doc(hidden)]
    pub publisher: std::option::Option<std::string::String>,
    /// <p>The owner of the add-on.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.</p>
    #[doc(hidden)]
    pub marketplace_information: std::option::Option<crate::types::MarketplaceInformation>,
    /// <p>The configuration values that you provided.</p>
    #[doc(hidden)]
    pub configuration_values: std::option::Option<std::string::String>,
}
impl Addon {
    /// <p>The name of the add-on.</p>
    pub fn addon_name(&self) -> std::option::Option<&str> {
        self.addon_name.as_deref()
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The status of the add-on.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AddonStatus> {
        self.status.as_ref()
    }
    /// <p>The version of the add-on.</p>
    pub fn addon_version(&self) -> std::option::Option<&str> {
        self.addon_version.as_deref()
    }
    /// <p>An object that represents the health of the add-on.</p>
    pub fn health(&self) -> std::option::Option<&crate::types::AddonHealth> {
        self.health.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the add-on.</p>
    pub fn addon_arn(&self) -> std::option::Option<&str> {
        self.addon_arn.as_deref()
    }
    /// <p>The date and time that the add-on was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time that the add-on was last modified.</p>
    pub fn modified_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes service account that the add-on uses.</p>
    pub fn service_account_role_arn(&self) -> std::option::Option<&str> {
        self.service_account_role_arn.as_deref()
    }
    /// <p>The metadata that you apply to the add-on to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Add-on tags do not propagate to any other resources associated with the cluster. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The publisher of the add-on.</p>
    pub fn publisher(&self) -> std::option::Option<&str> {
        self.publisher.as_deref()
    }
    /// <p>The owner of the add-on.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.</p>
    pub fn marketplace_information(
        &self,
    ) -> std::option::Option<&crate::types::MarketplaceInformation> {
        self.marketplace_information.as_ref()
    }
    /// <p>The configuration values that you provided.</p>
    pub fn configuration_values(&self) -> std::option::Option<&str> {
        self.configuration_values.as_deref()
    }
}
impl Addon {
    /// Creates a new builder-style object to manufacture [`Addon`](crate::types::Addon).
    pub fn builder() -> crate::types::builders::AddonBuilder {
        crate::types::builders::AddonBuilder::default()
    }
}

/// A builder for [`Addon`](crate::types::Addon).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddonBuilder {
    pub(crate) addon_name: std::option::Option<std::string::String>,
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AddonStatus>,
    pub(crate) addon_version: std::option::Option<std::string::String>,
    pub(crate) health: std::option::Option<crate::types::AddonHealth>,
    pub(crate) addon_arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) modified_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) service_account_role_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) publisher: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) marketplace_information: std::option::Option<crate::types::MarketplaceInformation>,
    pub(crate) configuration_values: std::option::Option<std::string::String>,
}
impl AddonBuilder {
    /// <p>The name of the add-on.</p>
    pub fn addon_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_name = Some(input.into());
        self
    }
    /// <p>The name of the add-on.</p>
    pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_name = input;
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The status of the add-on.</p>
    pub fn status(mut self, input: crate::types::AddonStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the add-on.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::AddonStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The version of the add-on.</p>
    pub fn addon_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_version = Some(input.into());
        self
    }
    /// <p>The version of the add-on.</p>
    pub fn set_addon_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_version = input;
        self
    }
    /// <p>An object that represents the health of the add-on.</p>
    pub fn health(mut self, input: crate::types::AddonHealth) -> Self {
        self.health = Some(input);
        self
    }
    /// <p>An object that represents the health of the add-on.</p>
    pub fn set_health(mut self, input: std::option::Option<crate::types::AddonHealth>) -> Self {
        self.health = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the add-on.</p>
    pub fn addon_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the add-on.</p>
    pub fn set_addon_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_arn = input;
        self
    }
    /// <p>The date and time that the add-on was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time that the add-on was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the add-on was last modified.</p>
    pub fn modified_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.modified_at = Some(input);
        self
    }
    /// <p>The date and time that the add-on was last modified.</p>
    pub fn set_modified_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes service account that the add-on uses.</p>
    pub fn service_account_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_account_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes service account that the add-on uses.</p>
    pub fn set_service_account_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_account_role_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata that you apply to the add-on to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Add-on tags do not propagate to any other resources associated with the cluster. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The metadata that you apply to the add-on to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Add-on tags do not propagate to any other resources associated with the cluster. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The publisher of the add-on.</p>
    pub fn publisher(mut self, input: impl Into<std::string::String>) -> Self {
        self.publisher = Some(input.into());
        self
    }
    /// <p>The publisher of the add-on.</p>
    pub fn set_publisher(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.publisher = input;
        self
    }
    /// <p>The owner of the add-on.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The owner of the add-on.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.</p>
    pub fn marketplace_information(mut self, input: crate::types::MarketplaceInformation) -> Self {
        self.marketplace_information = Some(input);
        self
    }
    /// <p>Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.</p>
    pub fn set_marketplace_information(
        mut self,
        input: std::option::Option<crate::types::MarketplaceInformation>,
    ) -> Self {
        self.marketplace_information = input;
        self
    }
    /// <p>The configuration values that you provided.</p>
    pub fn configuration_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_values = Some(input.into());
        self
    }
    /// <p>The configuration values that you provided.</p>
    pub fn set_configuration_values(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_values = input;
        self
    }
    /// Consumes the builder and constructs a [`Addon`](crate::types::Addon).
    pub fn build(self) -> crate::types::Addon {
        crate::types::Addon {
            addon_name: self.addon_name,
            cluster_name: self.cluster_name,
            status: self.status,
            addon_version: self.addon_version,
            health: self.health,
            addon_arn: self.addon_arn,
            created_at: self.created_at,
            modified_at: self.modified_at,
            service_account_role_arn: self.service_account_role_arn,
            tags: self.tags,
            publisher: self.publisher,
            owner: self.owner,
            marketplace_information: self.marketplace_information,
            configuration_values: self.configuration_values,
        }
    }
}
