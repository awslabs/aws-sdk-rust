// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a node group launch template specification. The launch template can't include <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html"> <code>SubnetId</code> </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html"> <code>IamInstanceProfile</code> </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html"> <code>RequestSpotInstances</code> </a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html"> <code>HibernationOptions</code> </a>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html"> <code>TerminateInstances</code> </a>, or the node group deployment or update will fail. For more information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html"> <code>CreateLaunchTemplate</code> </a> in the Amazon EC2 API Reference. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>
/// <p>You must specify either the launch template ID or the launch template name in the request, but not both.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateSpecification {
    /// <p>The name of the launch template.</p>
    /// <p>You must specify either the launch template name or the launch template ID in the request, but not both.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version number of the launch template to use. If no version is specified, then the template's default version is used.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The ID of the launch template.</p>
    /// <p>You must specify either the launch template ID or the launch template name in the request, but not both.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl LaunchTemplateSpecification {
    /// <p>The name of the launch template.</p>
    /// <p>You must specify either the launch template name or the launch template ID in the request, but not both.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version number of the launch template to use. If no version is specified, then the template's default version is used.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The ID of the launch template.</p>
    /// <p>You must specify either the launch template ID or the launch template name in the request, but not both.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl LaunchTemplateSpecification {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
    pub fn builder() -> crate::types::builders::LaunchTemplateSpecificationBuilder {
        crate::types::builders::LaunchTemplateSpecificationBuilder::default()
    }
}

/// A builder for [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateSpecificationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl LaunchTemplateSpecificationBuilder {
    /// <p>The name of the launch template.</p>
    /// <p>You must specify either the launch template name or the launch template ID in the request, but not both.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the launch template.</p>
    /// <p>You must specify either the launch template name or the launch template ID in the request, but not both.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The version number of the launch template to use. If no version is specified, then the template's default version is used.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version number of the launch template to use. If no version is specified, then the template's default version is used.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The ID of the launch template.</p>
    /// <p>You must specify either the launch template ID or the launch template name in the request, but not both.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the launch template.</p>
    /// <p>You must specify either the launch template ID or the launch template name in the request, but not both.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
    pub fn build(self) -> crate::types::LaunchTemplateSpecification {
        crate::types::LaunchTemplateSpecification {
            name: self.name,
            version: self.version,
            id: self.id,
        }
    }
}
