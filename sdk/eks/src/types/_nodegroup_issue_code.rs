// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `NodegroupIssueCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let nodegroupissuecode = unimplemented!();
/// match nodegroupissuecode {
///     NodegroupIssueCode::AccessDenied => { /* ... */ },
///     NodegroupIssueCode::AmiIdNotFound => { /* ... */ },
///     NodegroupIssueCode::AsgInstanceLaunchFailures => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupInstanceRefreshActive => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupInvalidConfiguration => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupNotFound => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupOptInRequired => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupRateLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::ClusterUnreachable => { /* ... */ },
///     NodegroupIssueCode::Ec2InstanceTypeDoesNotExist => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateDeletionFailure => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateInvalidConfiguration => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateMaxLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateNotFound => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateVersionMaxLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch => { /* ... */ },
///     NodegroupIssueCode::Ec2SecurityGroupDeletionFailure => { /* ... */ },
///     NodegroupIssueCode::Ec2SecurityGroupNotFound => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetInvalidConfiguration => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetListTooLong => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetNotFound => { /* ... */ },
///     NodegroupIssueCode::IamInstanceProfileNotFound => { /* ... */ },
///     NodegroupIssueCode::IamLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::IamNodeRoleNotFound => { /* ... */ },
///     NodegroupIssueCode::IamThrottling => { /* ... */ },
///     NodegroupIssueCode::InstanceLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::InsufficientFreeAddresses => { /* ... */ },
///     NodegroupIssueCode::InternalFailure => { /* ... */ },
///     NodegroupIssueCode::KubernetesLabelInvalid => { /* ... */ },
///     NodegroupIssueCode::LimitExceeded => { /* ... */ },
///     NodegroupIssueCode::NodeCreationFailure => { /* ... */ },
///     NodegroupIssueCode::NodeTerminationFailure => { /* ... */ },
///     NodegroupIssueCode::PodEvictionFailure => { /* ... */ },
///     NodegroupIssueCode::SourceEc2LaunchTemplateNotFound => { /* ... */ },
///     NodegroupIssueCode::UnknownValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `nodegroupissuecode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `NodegroupIssueCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `NodegroupIssueCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `NodegroupIssueCode::NewFeature` is defined.
/// Specifically, when `nodegroupissuecode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `NodegroupIssueCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
///
/// _Note: `NodegroupIssueCode::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum NodegroupIssueCode {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    AmiIdNotFound,
    #[allow(missing_docs)] // documentation missing in model
    AsgInstanceLaunchFailures,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupInstanceRefreshActive,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupInvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupNotFound,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupOptInRequired,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupRateLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ClusterUnreachable,
    #[allow(missing_docs)] // documentation missing in model
    Ec2InstanceTypeDoesNotExist,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateDeletionFailure,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateInvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateMaxLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateVersionMaxLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateVersionMismatch,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SecurityGroupDeletionFailure,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SecurityGroupNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetInvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetListTooLong,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetMissingIpv6Assignment,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetNotFound,
    #[allow(missing_docs)] // documentation missing in model
    IamInstanceProfileNotFound,
    #[allow(missing_docs)] // documentation missing in model
    IamLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    IamNodeRoleNotFound,
    #[allow(missing_docs)] // documentation missing in model
    IamThrottling,
    #[allow(missing_docs)] // documentation missing in model
    InstanceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientFreeAddresses,
    #[allow(missing_docs)] // documentation missing in model
    InternalFailure,
    #[allow(missing_docs)] // documentation missing in model
    KubernetesLabelInvalid,
    #[allow(missing_docs)] // documentation missing in model
    LimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    NodeCreationFailure,
    #[allow(missing_docs)] // documentation missing in model
    NodeTerminationFailure,
    #[allow(missing_docs)] // documentation missing in model
    PodEvictionFailure,
    #[allow(missing_docs)] // documentation missing in model
    SourceEc2LaunchTemplateNotFound,
    ///
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for NodegroupIssueCode {
    fn from(s: &str) -> Self {
        match s {
            "AccessDenied" => NodegroupIssueCode::AccessDenied,
            "AmiIdNotFound" => NodegroupIssueCode::AmiIdNotFound,
            "AsgInstanceLaunchFailures" => NodegroupIssueCode::AsgInstanceLaunchFailures,
            "AutoScalingGroupInstanceRefreshActive" => NodegroupIssueCode::AutoScalingGroupInstanceRefreshActive,
            "AutoScalingGroupInvalidConfiguration" => NodegroupIssueCode::AutoScalingGroupInvalidConfiguration,
            "AutoScalingGroupNotFound" => NodegroupIssueCode::AutoScalingGroupNotFound,
            "AutoScalingGroupOptInRequired" => NodegroupIssueCode::AutoScalingGroupOptInRequired,
            "AutoScalingGroupRateLimitExceeded" => NodegroupIssueCode::AutoScalingGroupRateLimitExceeded,
            "ClusterUnreachable" => NodegroupIssueCode::ClusterUnreachable,
            "Ec2InstanceTypeDoesNotExist" => NodegroupIssueCode::Ec2InstanceTypeDoesNotExist,
            "Ec2LaunchTemplateDeletionFailure" => NodegroupIssueCode::Ec2LaunchTemplateDeletionFailure,
            "Ec2LaunchTemplateInvalidConfiguration" => NodegroupIssueCode::Ec2LaunchTemplateInvalidConfiguration,
            "Ec2LaunchTemplateMaxLimitExceeded" => NodegroupIssueCode::Ec2LaunchTemplateMaxLimitExceeded,
            "Ec2LaunchTemplateNotFound" => NodegroupIssueCode::Ec2LaunchTemplateNotFound,
            "Ec2LaunchTemplateVersionMaxLimitExceeded" => NodegroupIssueCode::Ec2LaunchTemplateVersionMaxLimitExceeded,
            "Ec2LaunchTemplateVersionMismatch" => NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch,
            "Ec2SecurityGroupDeletionFailure" => NodegroupIssueCode::Ec2SecurityGroupDeletionFailure,
            "Ec2SecurityGroupNotFound" => NodegroupIssueCode::Ec2SecurityGroupNotFound,
            "Ec2SubnetInvalidConfiguration" => NodegroupIssueCode::Ec2SubnetInvalidConfiguration,
            "Ec2SubnetListTooLong" => NodegroupIssueCode::Ec2SubnetListTooLong,
            "Ec2SubnetMissingIpv6Assignment" => NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment,
            "Ec2SubnetNotFound" => NodegroupIssueCode::Ec2SubnetNotFound,
            "IamInstanceProfileNotFound" => NodegroupIssueCode::IamInstanceProfileNotFound,
            "IamLimitExceeded" => NodegroupIssueCode::IamLimitExceeded,
            "IamNodeRoleNotFound" => NodegroupIssueCode::IamNodeRoleNotFound,
            "IamThrottling" => NodegroupIssueCode::IamThrottling,
            "InstanceLimitExceeded" => NodegroupIssueCode::InstanceLimitExceeded,
            "InsufficientFreeAddresses" => NodegroupIssueCode::InsufficientFreeAddresses,
            "InternalFailure" => NodegroupIssueCode::InternalFailure,
            "KubernetesLabelInvalid" => NodegroupIssueCode::KubernetesLabelInvalid,
            "LimitExceeded" => NodegroupIssueCode::LimitExceeded,
            "NodeCreationFailure" => NodegroupIssueCode::NodeCreationFailure,
            "NodeTerminationFailure" => NodegroupIssueCode::NodeTerminationFailure,
            "PodEvictionFailure" => NodegroupIssueCode::PodEvictionFailure,
            "SourceEc2LaunchTemplateNotFound" => NodegroupIssueCode::SourceEc2LaunchTemplateNotFound,
            "Unknown" => NodegroupIssueCode::UnknownValue,
            other => NodegroupIssueCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for NodegroupIssueCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(NodegroupIssueCode::from(s))
    }
}
impl NodegroupIssueCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            NodegroupIssueCode::AccessDenied => "AccessDenied",
            NodegroupIssueCode::AmiIdNotFound => "AmiIdNotFound",
            NodegroupIssueCode::AsgInstanceLaunchFailures => "AsgInstanceLaunchFailures",
            NodegroupIssueCode::AutoScalingGroupInstanceRefreshActive => "AutoScalingGroupInstanceRefreshActive",
            NodegroupIssueCode::AutoScalingGroupInvalidConfiguration => "AutoScalingGroupInvalidConfiguration",
            NodegroupIssueCode::AutoScalingGroupNotFound => "AutoScalingGroupNotFound",
            NodegroupIssueCode::AutoScalingGroupOptInRequired => "AutoScalingGroupOptInRequired",
            NodegroupIssueCode::AutoScalingGroupRateLimitExceeded => "AutoScalingGroupRateLimitExceeded",
            NodegroupIssueCode::ClusterUnreachable => "ClusterUnreachable",
            NodegroupIssueCode::Ec2InstanceTypeDoesNotExist => "Ec2InstanceTypeDoesNotExist",
            NodegroupIssueCode::Ec2LaunchTemplateDeletionFailure => "Ec2LaunchTemplateDeletionFailure",
            NodegroupIssueCode::Ec2LaunchTemplateInvalidConfiguration => "Ec2LaunchTemplateInvalidConfiguration",
            NodegroupIssueCode::Ec2LaunchTemplateMaxLimitExceeded => "Ec2LaunchTemplateMaxLimitExceeded",
            NodegroupIssueCode::Ec2LaunchTemplateNotFound => "Ec2LaunchTemplateNotFound",
            NodegroupIssueCode::Ec2LaunchTemplateVersionMaxLimitExceeded => "Ec2LaunchTemplateVersionMaxLimitExceeded",
            NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch => "Ec2LaunchTemplateVersionMismatch",
            NodegroupIssueCode::Ec2SecurityGroupDeletionFailure => "Ec2SecurityGroupDeletionFailure",
            NodegroupIssueCode::Ec2SecurityGroupNotFound => "Ec2SecurityGroupNotFound",
            NodegroupIssueCode::Ec2SubnetInvalidConfiguration => "Ec2SubnetInvalidConfiguration",
            NodegroupIssueCode::Ec2SubnetListTooLong => "Ec2SubnetListTooLong",
            NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment => "Ec2SubnetMissingIpv6Assignment",
            NodegroupIssueCode::Ec2SubnetNotFound => "Ec2SubnetNotFound",
            NodegroupIssueCode::IamInstanceProfileNotFound => "IamInstanceProfileNotFound",
            NodegroupIssueCode::IamLimitExceeded => "IamLimitExceeded",
            NodegroupIssueCode::IamNodeRoleNotFound => "IamNodeRoleNotFound",
            NodegroupIssueCode::IamThrottling => "IamThrottling",
            NodegroupIssueCode::InstanceLimitExceeded => "InstanceLimitExceeded",
            NodegroupIssueCode::InsufficientFreeAddresses => "InsufficientFreeAddresses",
            NodegroupIssueCode::InternalFailure => "InternalFailure",
            NodegroupIssueCode::KubernetesLabelInvalid => "KubernetesLabelInvalid",
            NodegroupIssueCode::LimitExceeded => "LimitExceeded",
            NodegroupIssueCode::NodeCreationFailure => "NodeCreationFailure",
            NodegroupIssueCode::NodeTerminationFailure => "NodeTerminationFailure",
            NodegroupIssueCode::PodEvictionFailure => "PodEvictionFailure",
            NodegroupIssueCode::SourceEc2LaunchTemplateNotFound => "SourceEc2LaunchTemplateNotFound",
            NodegroupIssueCode::UnknownValue => "Unknown",
            NodegroupIssueCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessDenied",
            "AmiIdNotFound",
            "AsgInstanceLaunchFailures",
            "AutoScalingGroupInstanceRefreshActive",
            "AutoScalingGroupInvalidConfiguration",
            "AutoScalingGroupNotFound",
            "AutoScalingGroupOptInRequired",
            "AutoScalingGroupRateLimitExceeded",
            "ClusterUnreachable",
            "Ec2InstanceTypeDoesNotExist",
            "Ec2LaunchTemplateDeletionFailure",
            "Ec2LaunchTemplateInvalidConfiguration",
            "Ec2LaunchTemplateMaxLimitExceeded",
            "Ec2LaunchTemplateNotFound",
            "Ec2LaunchTemplateVersionMaxLimitExceeded",
            "Ec2LaunchTemplateVersionMismatch",
            "Ec2SecurityGroupDeletionFailure",
            "Ec2SecurityGroupNotFound",
            "Ec2SubnetInvalidConfiguration",
            "Ec2SubnetListTooLong",
            "Ec2SubnetMissingIpv6Assignment",
            "Ec2SubnetNotFound",
            "IamInstanceProfileNotFound",
            "IamLimitExceeded",
            "IamNodeRoleNotFound",
            "IamThrottling",
            "InstanceLimitExceeded",
            "InsufficientFreeAddresses",
            "InternalFailure",
            "KubernetesLabelInvalid",
            "LimitExceeded",
            "NodeCreationFailure",
            "NodeTerminationFailure",
            "PodEvictionFailure",
            "SourceEc2LaunchTemplateNotFound",
            "Unknown",
        ]
    }
}
impl ::std::convert::AsRef<str> for NodegroupIssueCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl NodegroupIssueCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for NodegroupIssueCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            NodegroupIssueCode::AccessDenied => write!(f, "AccessDenied"),
            NodegroupIssueCode::AmiIdNotFound => write!(f, "AmiIdNotFound"),
            NodegroupIssueCode::AsgInstanceLaunchFailures => write!(f, "AsgInstanceLaunchFailures"),
            NodegroupIssueCode::AutoScalingGroupInstanceRefreshActive => write!(f, "AutoScalingGroupInstanceRefreshActive"),
            NodegroupIssueCode::AutoScalingGroupInvalidConfiguration => write!(f, "AutoScalingGroupInvalidConfiguration"),
            NodegroupIssueCode::AutoScalingGroupNotFound => write!(f, "AutoScalingGroupNotFound"),
            NodegroupIssueCode::AutoScalingGroupOptInRequired => write!(f, "AutoScalingGroupOptInRequired"),
            NodegroupIssueCode::AutoScalingGroupRateLimitExceeded => write!(f, "AutoScalingGroupRateLimitExceeded"),
            NodegroupIssueCode::ClusterUnreachable => write!(f, "ClusterUnreachable"),
            NodegroupIssueCode::Ec2InstanceTypeDoesNotExist => write!(f, "Ec2InstanceTypeDoesNotExist"),
            NodegroupIssueCode::Ec2LaunchTemplateDeletionFailure => write!(f, "Ec2LaunchTemplateDeletionFailure"),
            NodegroupIssueCode::Ec2LaunchTemplateInvalidConfiguration => write!(f, "Ec2LaunchTemplateInvalidConfiguration"),
            NodegroupIssueCode::Ec2LaunchTemplateMaxLimitExceeded => write!(f, "Ec2LaunchTemplateMaxLimitExceeded"),
            NodegroupIssueCode::Ec2LaunchTemplateNotFound => write!(f, "Ec2LaunchTemplateNotFound"),
            NodegroupIssueCode::Ec2LaunchTemplateVersionMaxLimitExceeded => write!(f, "Ec2LaunchTemplateVersionMaxLimitExceeded"),
            NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch => write!(f, "Ec2LaunchTemplateVersionMismatch"),
            NodegroupIssueCode::Ec2SecurityGroupDeletionFailure => write!(f, "Ec2SecurityGroupDeletionFailure"),
            NodegroupIssueCode::Ec2SecurityGroupNotFound => write!(f, "Ec2SecurityGroupNotFound"),
            NodegroupIssueCode::Ec2SubnetInvalidConfiguration => write!(f, "Ec2SubnetInvalidConfiguration"),
            NodegroupIssueCode::Ec2SubnetListTooLong => write!(f, "Ec2SubnetListTooLong"),
            NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment => write!(f, "Ec2SubnetMissingIpv6Assignment"),
            NodegroupIssueCode::Ec2SubnetNotFound => write!(f, "Ec2SubnetNotFound"),
            NodegroupIssueCode::IamInstanceProfileNotFound => write!(f, "IamInstanceProfileNotFound"),
            NodegroupIssueCode::IamLimitExceeded => write!(f, "IamLimitExceeded"),
            NodegroupIssueCode::IamNodeRoleNotFound => write!(f, "IamNodeRoleNotFound"),
            NodegroupIssueCode::IamThrottling => write!(f, "IamThrottling"),
            NodegroupIssueCode::InstanceLimitExceeded => write!(f, "InstanceLimitExceeded"),
            NodegroupIssueCode::InsufficientFreeAddresses => write!(f, "InsufficientFreeAddresses"),
            NodegroupIssueCode::InternalFailure => write!(f, "InternalFailure"),
            NodegroupIssueCode::KubernetesLabelInvalid => write!(f, "KubernetesLabelInvalid"),
            NodegroupIssueCode::LimitExceeded => write!(f, "LimitExceeded"),
            NodegroupIssueCode::NodeCreationFailure => write!(f, "NodeCreationFailure"),
            NodegroupIssueCode::NodeTerminationFailure => write!(f, "NodeTerminationFailure"),
            NodegroupIssueCode::PodEvictionFailure => write!(f, "PodEvictionFailure"),
            NodegroupIssueCode::SourceEc2LaunchTemplateNotFound => write!(f, "SourceEc2LaunchTemplateNotFound"),
            NodegroupIssueCode::UnknownValue => write!(f, "Unknown"),
            NodegroupIssueCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
