// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `NodegroupIssueCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let nodegroupissuecode = unimplemented!();
/// match nodegroupissuecode {
///     NodegroupIssueCode::AccessDenied => { /* ... */ },
///     NodegroupIssueCode::AsgInstanceLaunchFailures => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupInvalidConfiguration => { /* ... */ },
///     NodegroupIssueCode::AutoScalingGroupNotFound => { /* ... */ },
///     NodegroupIssueCode::ClusterUnreachable => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateNotFound => { /* ... */ },
///     NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch => { /* ... */ },
///     NodegroupIssueCode::Ec2SecurityGroupDeletionFailure => { /* ... */ },
///     NodegroupIssueCode::Ec2SecurityGroupNotFound => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetInvalidConfiguration => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment => { /* ... */ },
///     NodegroupIssueCode::Ec2SubnetNotFound => { /* ... */ },
///     NodegroupIssueCode::IamInstanceProfileNotFound => { /* ... */ },
///     NodegroupIssueCode::IamLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::IamNodeRoleNotFound => { /* ... */ },
///     NodegroupIssueCode::InstanceLimitExceeded => { /* ... */ },
///     NodegroupIssueCode::InsufficientFreeAddresses => { /* ... */ },
///     NodegroupIssueCode::InternalFailure => { /* ... */ },
///     NodegroupIssueCode::NodeCreationFailure => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `nodegroupissuecode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `NodegroupIssueCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `NodegroupIssueCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `NodegroupIssueCode::NewFeature` is defined.
/// Specifically, when `nodegroupissuecode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `NodegroupIssueCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum NodegroupIssueCode {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    AsgInstanceLaunchFailures,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupInvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingGroupNotFound,
    #[allow(missing_docs)] // documentation missing in model
    ClusterUnreachable,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Ec2LaunchTemplateVersionMismatch,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SecurityGroupDeletionFailure,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SecurityGroupNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetInvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetMissingIpv6Assignment,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SubnetNotFound,
    #[allow(missing_docs)] // documentation missing in model
    IamInstanceProfileNotFound,
    #[allow(missing_docs)] // documentation missing in model
    IamLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    IamNodeRoleNotFound,
    #[allow(missing_docs)] // documentation missing in model
    InstanceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientFreeAddresses,
    #[allow(missing_docs)] // documentation missing in model
    InternalFailure,
    #[allow(missing_docs)] // documentation missing in model
    NodeCreationFailure,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for NodegroupIssueCode {
    fn from(s: &str) -> Self {
        match s {
            "AccessDenied" => NodegroupIssueCode::AccessDenied,
            "AsgInstanceLaunchFailures" => NodegroupIssueCode::AsgInstanceLaunchFailures,
            "AutoScalingGroupInvalidConfiguration" => {
                NodegroupIssueCode::AutoScalingGroupInvalidConfiguration
            }
            "AutoScalingGroupNotFound" => NodegroupIssueCode::AutoScalingGroupNotFound,
            "ClusterUnreachable" => NodegroupIssueCode::ClusterUnreachable,
            "Ec2LaunchTemplateNotFound" => NodegroupIssueCode::Ec2LaunchTemplateNotFound,
            "Ec2LaunchTemplateVersionMismatch" => {
                NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch
            }
            "Ec2SecurityGroupDeletionFailure" => {
                NodegroupIssueCode::Ec2SecurityGroupDeletionFailure
            }
            "Ec2SecurityGroupNotFound" => NodegroupIssueCode::Ec2SecurityGroupNotFound,
            "Ec2SubnetInvalidConfiguration" => NodegroupIssueCode::Ec2SubnetInvalidConfiguration,
            "Ec2SubnetMissingIpv6Assignment" => NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment,
            "Ec2SubnetNotFound" => NodegroupIssueCode::Ec2SubnetNotFound,
            "IamInstanceProfileNotFound" => NodegroupIssueCode::IamInstanceProfileNotFound,
            "IamLimitExceeded" => NodegroupIssueCode::IamLimitExceeded,
            "IamNodeRoleNotFound" => NodegroupIssueCode::IamNodeRoleNotFound,
            "InstanceLimitExceeded" => NodegroupIssueCode::InstanceLimitExceeded,
            "InsufficientFreeAddresses" => NodegroupIssueCode::InsufficientFreeAddresses,
            "InternalFailure" => NodegroupIssueCode::InternalFailure,
            "NodeCreationFailure" => NodegroupIssueCode::NodeCreationFailure,
            other => NodegroupIssueCode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for NodegroupIssueCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(NodegroupIssueCode::from(s))
    }
}
impl NodegroupIssueCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            NodegroupIssueCode::AccessDenied => "AccessDenied",
            NodegroupIssueCode::AsgInstanceLaunchFailures => "AsgInstanceLaunchFailures",
            NodegroupIssueCode::AutoScalingGroupInvalidConfiguration => {
                "AutoScalingGroupInvalidConfiguration"
            }
            NodegroupIssueCode::AutoScalingGroupNotFound => "AutoScalingGroupNotFound",
            NodegroupIssueCode::ClusterUnreachable => "ClusterUnreachable",
            NodegroupIssueCode::Ec2LaunchTemplateNotFound => "Ec2LaunchTemplateNotFound",
            NodegroupIssueCode::Ec2LaunchTemplateVersionMismatch => {
                "Ec2LaunchTemplateVersionMismatch"
            }
            NodegroupIssueCode::Ec2SecurityGroupDeletionFailure => {
                "Ec2SecurityGroupDeletionFailure"
            }
            NodegroupIssueCode::Ec2SecurityGroupNotFound => "Ec2SecurityGroupNotFound",
            NodegroupIssueCode::Ec2SubnetInvalidConfiguration => "Ec2SubnetInvalidConfiguration",
            NodegroupIssueCode::Ec2SubnetMissingIpv6Assignment => "Ec2SubnetMissingIpv6Assignment",
            NodegroupIssueCode::Ec2SubnetNotFound => "Ec2SubnetNotFound",
            NodegroupIssueCode::IamInstanceProfileNotFound => "IamInstanceProfileNotFound",
            NodegroupIssueCode::IamLimitExceeded => "IamLimitExceeded",
            NodegroupIssueCode::IamNodeRoleNotFound => "IamNodeRoleNotFound",
            NodegroupIssueCode::InstanceLimitExceeded => "InstanceLimitExceeded",
            NodegroupIssueCode::InsufficientFreeAddresses => "InsufficientFreeAddresses",
            NodegroupIssueCode::InternalFailure => "InternalFailure",
            NodegroupIssueCode::NodeCreationFailure => "NodeCreationFailure",
            NodegroupIssueCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessDenied",
            "AsgInstanceLaunchFailures",
            "AutoScalingGroupInvalidConfiguration",
            "AutoScalingGroupNotFound",
            "ClusterUnreachable",
            "Ec2LaunchTemplateNotFound",
            "Ec2LaunchTemplateVersionMismatch",
            "Ec2SecurityGroupDeletionFailure",
            "Ec2SecurityGroupNotFound",
            "Ec2SubnetInvalidConfiguration",
            "Ec2SubnetMissingIpv6Assignment",
            "Ec2SubnetNotFound",
            "IamInstanceProfileNotFound",
            "IamLimitExceeded",
            "IamNodeRoleNotFound",
            "InstanceLimitExceeded",
            "InsufficientFreeAddresses",
            "InternalFailure",
            "NodeCreationFailure",
        ]
    }
}
impl AsRef<str> for NodegroupIssueCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
