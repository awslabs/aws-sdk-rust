// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption configuration for the cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionConfig {
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    pub resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
    pub provider: ::std::option::Option<crate::types::Provider>,
}
impl EncryptionConfig {
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[::std::string::String] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
    pub fn provider(&self) -> ::std::option::Option<&crate::types::Provider> {
        self.provider.as_ref()
    }
}
impl EncryptionConfig {
    /// Creates a new builder-style object to manufacture [`EncryptionConfig`](crate::types::EncryptionConfig).
    pub fn builder() -> crate::types::builders::EncryptionConfigBuilder {
        crate::types::builders::EncryptionConfigBuilder::default()
    }
}

/// A builder for [`EncryptionConfig`](crate::types::EncryptionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EncryptionConfigBuilder {
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) provider: ::std::option::Option<crate::types::Provider>,
}
impl EncryptionConfigBuilder {
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    pub fn resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>Specifies the resources to be encrypted. The only supported value is "secrets".</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resources
    }
    /// <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
    pub fn provider(mut self, input: crate::types::Provider) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::Provider>) -> Self {
        self.provider = input;
        self
    }
    /// <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::Provider> {
        &self.provider
    }
    /// Consumes the builder and constructs a [`EncryptionConfig`](crate::types::EncryptionConfig).
    pub fn build(self) -> crate::types::EncryptionConfig {
        crate::types::EncryptionConfig {
            resources: self.resources,
            provider: self.provider,
        }
    }
}
