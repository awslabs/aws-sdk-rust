// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing an Amazon EKS cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Cluster {
    /// <p>The name of the cluster.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Unix epoch timestamp in seconds for when the cluster was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Kubernetes server version for the cluster.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The endpoint for your Kubernetes API server.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the <i>Amazon EKS User Guide</i>.</p>
    #[doc(hidden)]
    pub resources_vpc_config: std::option::Option<crate::types::VpcConfigResponse>,
    /// <p>The Kubernetes network configuration for the cluster.</p>
    #[doc(hidden)]
    pub kubernetes_network_config:
        std::option::Option<crate::types::KubernetesNetworkConfigResponse>,
    /// <p>The logging configuration for your cluster.</p>
    #[doc(hidden)]
    pub logging: std::option::Option<crate::types::Logging>,
    /// <p>The identity provider information for the cluster.</p>
    #[doc(hidden)]
    pub identity: std::option::Option<crate::types::Identity>,
    /// <p>The current status of the cluster.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ClusterStatus>,
    /// <p>The <code>certificate-authority-data</code> for your cluster.</p>
    #[doc(hidden)]
    pub certificate_authority: std::option::Option<crate::types::Certificate>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The platform version of your Amazon EKS cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html">Platform Versions</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p>
    #[doc(hidden)]
    pub platform_version: std::option::Option<std::string::String>,
    /// <p>The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The encryption configuration for the cluster.</p>
    #[doc(hidden)]
    pub encryption_config: std::option::Option<std::vec::Vec<crate::types::EncryptionConfig>>,
    /// <p>The configuration used to connect to a cluster for registration.</p>
    #[doc(hidden)]
    pub connector_config: std::option::Option<crate::types::ConnectorConfigResponse>,
    /// <p>The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    #[doc(hidden)]
    pub health: std::option::Option<crate::types::ClusterHealth>,
    /// <p>An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    #[doc(hidden)]
    pub outpost_config: std::option::Option<crate::types::OutpostConfigResponse>,
}
impl Cluster {
    /// <p>The name of the cluster.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Unix epoch timestamp in seconds for when the cluster was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Kubernetes server version for the cluster.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The endpoint for your Kubernetes API server.</p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn resources_vpc_config(&self) -> std::option::Option<&crate::types::VpcConfigResponse> {
        self.resources_vpc_config.as_ref()
    }
    /// <p>The Kubernetes network configuration for the cluster.</p>
    pub fn kubernetes_network_config(
        &self,
    ) -> std::option::Option<&crate::types::KubernetesNetworkConfigResponse> {
        self.kubernetes_network_config.as_ref()
    }
    /// <p>The logging configuration for your cluster.</p>
    pub fn logging(&self) -> std::option::Option<&crate::types::Logging> {
        self.logging.as_ref()
    }
    /// <p>The identity provider information for the cluster.</p>
    pub fn identity(&self) -> std::option::Option<&crate::types::Identity> {
        self.identity.as_ref()
    }
    /// <p>The current status of the cluster.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ClusterStatus> {
        self.status.as_ref()
    }
    /// <p>The <code>certificate-authority-data</code> for your cluster.</p>
    pub fn certificate_authority(&self) -> std::option::Option<&crate::types::Certificate> {
        self.certificate_authority.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The platform version of your Amazon EKS cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html">Platform Versions</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p>
    pub fn platform_version(&self) -> std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The encryption configuration for the cluster.</p>
    pub fn encryption_config(&self) -> std::option::Option<&[crate::types::EncryptionConfig]> {
        self.encryption_config.as_deref()
    }
    /// <p>The configuration used to connect to a cluster for registration.</p>
    pub fn connector_config(&self) -> std::option::Option<&crate::types::ConnectorConfigResponse> {
        self.connector_config.as_ref()
    }
    /// <p>The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn health(&self) -> std::option::Option<&crate::types::ClusterHealth> {
        self.health.as_ref()
    }
    /// <p>An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn outpost_config(&self) -> std::option::Option<&crate::types::OutpostConfigResponse> {
        self.outpost_config.as_ref()
    }
}
impl Cluster {
    /// Creates a new builder-style object to manufacture [`Cluster`](crate::types::Cluster).
    pub fn builder() -> crate::types::builders::ClusterBuilder {
        crate::types::builders::ClusterBuilder::default()
    }
}

/// A builder for [`Cluster`](crate::types::Cluster).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusterBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) resources_vpc_config: std::option::Option<crate::types::VpcConfigResponse>,
    pub(crate) kubernetes_network_config:
        std::option::Option<crate::types::KubernetesNetworkConfigResponse>,
    pub(crate) logging: std::option::Option<crate::types::Logging>,
    pub(crate) identity: std::option::Option<crate::types::Identity>,
    pub(crate) status: std::option::Option<crate::types::ClusterStatus>,
    pub(crate) certificate_authority: std::option::Option<crate::types::Certificate>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) platform_version: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) encryption_config:
        std::option::Option<std::vec::Vec<crate::types::EncryptionConfig>>,
    pub(crate) connector_config: std::option::Option<crate::types::ConnectorConfigResponse>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) health: std::option::Option<crate::types::ClusterHealth>,
    pub(crate) outpost_config: std::option::Option<crate::types::OutpostConfigResponse>,
}
impl ClusterBuilder {
    /// <p>The name of the cluster.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Unix epoch timestamp in seconds for when the cluster was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The Unix epoch timestamp in seconds for when the cluster was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Kubernetes server version for the cluster.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The Kubernetes server version for the cluster.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The endpoint for your Kubernetes API server.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint for your Kubernetes API server.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn resources_vpc_config(mut self, input: crate::types::VpcConfigResponse) -> Self {
        self.resources_vpc_config = Some(input);
        self
    }
    /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn set_resources_vpc_config(
        mut self,
        input: std::option::Option<crate::types::VpcConfigResponse>,
    ) -> Self {
        self.resources_vpc_config = input;
        self
    }
    /// <p>The Kubernetes network configuration for the cluster.</p>
    pub fn kubernetes_network_config(
        mut self,
        input: crate::types::KubernetesNetworkConfigResponse,
    ) -> Self {
        self.kubernetes_network_config = Some(input);
        self
    }
    /// <p>The Kubernetes network configuration for the cluster.</p>
    pub fn set_kubernetes_network_config(
        mut self,
        input: std::option::Option<crate::types::KubernetesNetworkConfigResponse>,
    ) -> Self {
        self.kubernetes_network_config = input;
        self
    }
    /// <p>The logging configuration for your cluster.</p>
    pub fn logging(mut self, input: crate::types::Logging) -> Self {
        self.logging = Some(input);
        self
    }
    /// <p>The logging configuration for your cluster.</p>
    pub fn set_logging(mut self, input: std::option::Option<crate::types::Logging>) -> Self {
        self.logging = input;
        self
    }
    /// <p>The identity provider information for the cluster.</p>
    pub fn identity(mut self, input: crate::types::Identity) -> Self {
        self.identity = Some(input);
        self
    }
    /// <p>The identity provider information for the cluster.</p>
    pub fn set_identity(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.identity = input;
        self
    }
    /// <p>The current status of the cluster.</p>
    pub fn status(mut self, input: crate::types::ClusterStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the cluster.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ClusterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The <code>certificate-authority-data</code> for your cluster.</p>
    pub fn certificate_authority(mut self, input: crate::types::Certificate) -> Self {
        self.certificate_authority = Some(input);
        self
    }
    /// <p>The <code>certificate-authority-data</code> for your cluster.</p>
    pub fn set_certificate_authority(
        mut self,
        input: std::option::Option<crate::types::Certificate>,
    ) -> Self {
        self.certificate_authority = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The platform version of your Amazon EKS cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html">Platform Versions</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p>
    pub fn platform_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_version = Some(input.into());
        self
    }
    /// <p>The platform version of your Amazon EKS cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html">Platform Versions</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p>
    pub fn set_platform_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `encryption_config`.
    ///
    /// To override the contents of this collection use [`set_encryption_config`](Self::set_encryption_config).
    ///
    /// <p>The encryption configuration for the cluster.</p>
    pub fn encryption_config(mut self, input: crate::types::EncryptionConfig) -> Self {
        let mut v = self.encryption_config.unwrap_or_default();
        v.push(input);
        self.encryption_config = Some(v);
        self
    }
    /// <p>The encryption configuration for the cluster.</p>
    pub fn set_encryption_config(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EncryptionConfig>>,
    ) -> Self {
        self.encryption_config = input;
        self
    }
    /// <p>The configuration used to connect to a cluster for registration.</p>
    pub fn connector_config(mut self, input: crate::types::ConnectorConfigResponse) -> Self {
        self.connector_config = Some(input);
        self
    }
    /// <p>The configuration used to connect to a cluster for registration.</p>
    pub fn set_connector_config(
        mut self,
        input: std::option::Option<crate::types::ConnectorConfigResponse>,
    ) -> Self {
        self.connector_config = input;
        self
    }
    /// <p>The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn health(mut self, input: crate::types::ClusterHealth) -> Self {
        self.health = Some(input);
        self
    }
    /// <p>An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn set_health(mut self, input: std::option::Option<crate::types::ClusterHealth>) -> Self {
        self.health = input;
        self
    }
    /// <p>An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn outpost_config(mut self, input: crate::types::OutpostConfigResponse) -> Self {
        self.outpost_config = Some(input);
        self
    }
    /// <p>An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.</p>
    pub fn set_outpost_config(
        mut self,
        input: std::option::Option<crate::types::OutpostConfigResponse>,
    ) -> Self {
        self.outpost_config = input;
        self
    }
    /// Consumes the builder and constructs a [`Cluster`](crate::types::Cluster).
    pub fn build(self) -> crate::types::Cluster {
        crate::types::Cluster {
            name: self.name,
            arn: self.arn,
            created_at: self.created_at,
            version: self.version,
            endpoint: self.endpoint,
            role_arn: self.role_arn,
            resources_vpc_config: self.resources_vpc_config,
            kubernetes_network_config: self.kubernetes_network_config,
            logging: self.logging,
            identity: self.identity,
            status: self.status,
            certificate_authority: self.certificate_authority,
            client_request_token: self.client_request_token,
            platform_version: self.platform_version,
            tags: self.tags,
            encryption_config: self.encryption_config,
            connector_config: self.connector_config,
            id: self.id,
            health: self.health,
            outpost_config: self.outpost_config,
        }
    }
}
