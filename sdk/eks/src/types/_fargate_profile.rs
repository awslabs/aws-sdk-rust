// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing an Fargate profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FargateProfile {
    /// <p>The name of the Fargate profile.</p>
    #[doc(hidden)]
    pub fargate_profile_name: std::option::Option<std::string::String>,
    /// <p>The full Amazon Resource Name (ARN) of the Fargate profile.</p>
    #[doc(hidden)]
    pub fargate_profile_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon EKS cluster that the Fargate profile belongs to.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The Unix epoch timestamp in seconds for when the Fargate profile was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    #[doc(hidden)]
    pub pod_execution_role_arn: std::option::Option<std::string::String>,
    /// <p>The IDs of subnets to launch pods into.</p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The selectors to match for pods to use this Fargate profile.</p>
    #[doc(hidden)]
    pub selectors: std::option::Option<std::vec::Vec<crate::types::FargateProfileSelector>>,
    /// <p>The current status of the Fargate profile.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FargateProfileStatus>,
    /// <p>The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FargateProfile {
    /// <p>The name of the Fargate profile.</p>
    pub fn fargate_profile_name(&self) -> std::option::Option<&str> {
        self.fargate_profile_name.as_deref()
    }
    /// <p>The full Amazon Resource Name (ARN) of the Fargate profile.</p>
    pub fn fargate_profile_arn(&self) -> std::option::Option<&str> {
        self.fargate_profile_arn.as_deref()
    }
    /// <p>The name of the Amazon EKS cluster that the Fargate profile belongs to.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The Unix epoch timestamp in seconds for when the Fargate profile was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn pod_execution_role_arn(&self) -> std::option::Option<&str> {
        self.pod_execution_role_arn.as_deref()
    }
    /// <p>The IDs of subnets to launch pods into.</p>
    pub fn subnets(&self) -> std::option::Option<&[std::string::String]> {
        self.subnets.as_deref()
    }
    /// <p>The selectors to match for pods to use this Fargate profile.</p>
    pub fn selectors(&self) -> std::option::Option<&[crate::types::FargateProfileSelector]> {
        self.selectors.as_deref()
    }
    /// <p>The current status of the Fargate profile.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::FargateProfileStatus> {
        self.status.as_ref()
    }
    /// <p>The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl FargateProfile {
    /// Creates a new builder-style object to manufacture [`FargateProfile`](crate::types::FargateProfile).
    pub fn builder() -> crate::types::builders::FargateProfileBuilder {
        crate::types::builders::FargateProfileBuilder::default()
    }
}

/// A builder for [`FargateProfile`](crate::types::FargateProfile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FargateProfileBuilder {
    pub(crate) fargate_profile_name: std::option::Option<std::string::String>,
    pub(crate) fargate_profile_arn: std::option::Option<std::string::String>,
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) pod_execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) selectors: std::option::Option<std::vec::Vec<crate::types::FargateProfileSelector>>,
    pub(crate) status: std::option::Option<crate::types::FargateProfileStatus>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FargateProfileBuilder {
    /// <p>The name of the Fargate profile.</p>
    pub fn fargate_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.fargate_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the Fargate profile.</p>
    pub fn set_fargate_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fargate_profile_name = input;
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the Fargate profile.</p>
    pub fn fargate_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.fargate_profile_arn = Some(input.into());
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the Fargate profile.</p>
    pub fn set_fargate_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fargate_profile_arn = input;
        self
    }
    /// <p>The name of the Amazon EKS cluster that the Fargate profile belongs to.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon EKS cluster that the Fargate profile belongs to.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The Unix epoch timestamp in seconds for when the Fargate profile was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The Unix epoch timestamp in seconds for when the Fargate profile was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn pod_execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.pod_execution_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    pub fn set_pod_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pod_execution_role_arn = input;
        self
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The IDs of subnets to launch pods into.</p>
    pub fn subnets(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = Some(v);
        self
    }
    /// <p>The IDs of subnets to launch pods into.</p>
    pub fn set_subnets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnets = input;
        self
    }
    /// Appends an item to `selectors`.
    ///
    /// To override the contents of this collection use [`set_selectors`](Self::set_selectors).
    ///
    /// <p>The selectors to match for pods to use this Fargate profile.</p>
    pub fn selectors(mut self, input: crate::types::FargateProfileSelector) -> Self {
        let mut v = self.selectors.unwrap_or_default();
        v.push(input);
        self.selectors = Some(v);
        self
    }
    /// <p>The selectors to match for pods to use this Fargate profile.</p>
    pub fn set_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FargateProfileSelector>>,
    ) -> Self {
        self.selectors = input;
        self
    }
    /// <p>The current status of the Fargate profile.</p>
    pub fn status(mut self, input: crate::types::FargateProfileStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the Fargate profile.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::FargateProfileStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`FargateProfile`](crate::types::FargateProfile).
    pub fn build(self) -> crate::types::FargateProfile {
        crate::types::FargateProfile {
            fargate_profile_name: self.fargate_profile_name,
            fargate_profile_arn: self.fargate_profile_arn,
            cluster_name: self.cluster_name,
            created_at: self.created_at,
            pod_execution_role_arn: self.pod_execution_role_arn,
            subnets: self.subnets,
            selectors: self.selectors,
            status: self.status,
            tags: self.tags,
        }
    }
}
