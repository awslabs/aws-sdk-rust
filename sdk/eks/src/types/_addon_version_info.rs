// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an add-on version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddonVersionInfo {
    /// <p>The version of the add-on.</p>
    #[doc(hidden)]
    pub addon_version: std::option::Option<std::string::String>,
    /// <p>The architectures that the version supports.</p>
    #[doc(hidden)]
    pub architecture: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An object representing the compatibilities of a version.</p>
    #[doc(hidden)]
    pub compatibilities: std::option::Option<std::vec::Vec<crate::types::Compatibility>>,
    /// <p>Whether the add-on requires configuration.</p>
    #[doc(hidden)]
    pub requires_configuration: bool,
}
impl AddonVersionInfo {
    /// <p>The version of the add-on.</p>
    pub fn addon_version(&self) -> std::option::Option<&str> {
        self.addon_version.as_deref()
    }
    /// <p>The architectures that the version supports.</p>
    pub fn architecture(&self) -> std::option::Option<&[std::string::String]> {
        self.architecture.as_deref()
    }
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn compatibilities(&self) -> std::option::Option<&[crate::types::Compatibility]> {
        self.compatibilities.as_deref()
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn requires_configuration(&self) -> bool {
        self.requires_configuration
    }
}
impl AddonVersionInfo {
    /// Creates a new builder-style object to manufacture [`AddonVersionInfo`](crate::types::AddonVersionInfo).
    pub fn builder() -> crate::types::builders::AddonVersionInfoBuilder {
        crate::types::builders::AddonVersionInfoBuilder::default()
    }
}

/// A builder for [`AddonVersionInfo`](crate::types::AddonVersionInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddonVersionInfoBuilder {
    pub(crate) addon_version: std::option::Option<std::string::String>,
    pub(crate) architecture: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) compatibilities: std::option::Option<std::vec::Vec<crate::types::Compatibility>>,
    pub(crate) requires_configuration: std::option::Option<bool>,
}
impl AddonVersionInfoBuilder {
    /// <p>The version of the add-on.</p>
    pub fn addon_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_version = Some(input.into());
        self
    }
    /// <p>The version of the add-on.</p>
    pub fn set_addon_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_version = input;
        self
    }
    /// Appends an item to `architecture`.
    ///
    /// To override the contents of this collection use [`set_architecture`](Self::set_architecture).
    ///
    /// <p>The architectures that the version supports.</p>
    pub fn architecture(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.architecture.unwrap_or_default();
        v.push(input.into());
        self.architecture = Some(v);
        self
    }
    /// <p>The architectures that the version supports.</p>
    pub fn set_architecture(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.architecture = input;
        self
    }
    /// Appends an item to `compatibilities`.
    ///
    /// To override the contents of this collection use [`set_compatibilities`](Self::set_compatibilities).
    ///
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn compatibilities(mut self, input: crate::types::Compatibility) -> Self {
        let mut v = self.compatibilities.unwrap_or_default();
        v.push(input);
        self.compatibilities = Some(v);
        self
    }
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn set_compatibilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Compatibility>>,
    ) -> Self {
        self.compatibilities = input;
        self
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn requires_configuration(mut self, input: bool) -> Self {
        self.requires_configuration = Some(input);
        self
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn set_requires_configuration(mut self, input: std::option::Option<bool>) -> Self {
        self.requires_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`AddonVersionInfo`](crate::types::AddonVersionInfo).
    pub fn build(self) -> crate::types::AddonVersionInfo {
        crate::types::AddonVersionInfo {
            addon_version: self.addon_version,
            architecture: self.architecture,
            compatibilities: self.compatibilities,
            requires_configuration: self.requires_configuration.unwrap_or_default(),
        }
    }
}
