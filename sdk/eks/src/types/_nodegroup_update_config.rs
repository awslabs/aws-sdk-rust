// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The node group update configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodegroupUpdateConfig {
    /// <p>The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or <code>maxUnavailablePercentage</code> is required to have a value.The maximum number is 100.</p>
    #[doc(hidden)]
    pub max_unavailable: std::option::Option<i32>,
    /// <p>The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or <code>maxUnavailable</code> is required to have a value.</p>
    #[doc(hidden)]
    pub max_unavailable_percentage: std::option::Option<i32>,
}
impl NodegroupUpdateConfig {
    /// <p>The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or <code>maxUnavailablePercentage</code> is required to have a value.The maximum number is 100.</p>
    pub fn max_unavailable(&self) -> std::option::Option<i32> {
        self.max_unavailable
    }
    /// <p>The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or <code>maxUnavailable</code> is required to have a value.</p>
    pub fn max_unavailable_percentage(&self) -> std::option::Option<i32> {
        self.max_unavailable_percentage
    }
}
impl NodegroupUpdateConfig {
    /// Creates a new builder-style object to manufacture [`NodegroupUpdateConfig`](crate::types::NodegroupUpdateConfig).
    pub fn builder() -> crate::types::builders::NodegroupUpdateConfigBuilder {
        crate::types::builders::NodegroupUpdateConfigBuilder::default()
    }
}

/// A builder for [`NodegroupUpdateConfig`](crate::types::NodegroupUpdateConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodegroupUpdateConfigBuilder {
    pub(crate) max_unavailable: std::option::Option<i32>,
    pub(crate) max_unavailable_percentage: std::option::Option<i32>,
}
impl NodegroupUpdateConfigBuilder {
    /// <p>The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or <code>maxUnavailablePercentage</code> is required to have a value.The maximum number is 100.</p>
    pub fn max_unavailable(mut self, input: i32) -> Self {
        self.max_unavailable = Some(input);
        self
    }
    /// <p>The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or <code>maxUnavailablePercentage</code> is required to have a value.The maximum number is 100.</p>
    pub fn set_max_unavailable(mut self, input: std::option::Option<i32>) -> Self {
        self.max_unavailable = input;
        self
    }
    /// <p>The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or <code>maxUnavailable</code> is required to have a value.</p>
    pub fn max_unavailable_percentage(mut self, input: i32) -> Self {
        self.max_unavailable_percentage = Some(input);
        self
    }
    /// <p>The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or <code>maxUnavailable</code> is required to have a value.</p>
    pub fn set_max_unavailable_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.max_unavailable_percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`NodegroupUpdateConfig`](crate::types::NodegroupUpdateConfig).
    pub fn build(self) -> crate::types::NodegroupUpdateConfig {
        crate::types::NodegroupUpdateConfig {
            max_unavailable: self.max_unavailable,
            max_unavailable_percentage: self.max_unavailable_percentage,
        }
    }
}
