// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The health of the add-on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddonHealth {
    /// <p>An object representing the health issues for an add-on.</p>
    pub issues: ::std::option::Option<::std::vec::Vec<crate::types::AddonIssue>>,
}
impl AddonHealth {
    /// <p>An object representing the health issues for an add-on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.issues.is_none()`.
    pub fn issues(&self) -> &[crate::types::AddonIssue] {
        self.issues.as_deref().unwrap_or_default()
    }
}
impl AddonHealth {
    /// Creates a new builder-style object to manufacture [`AddonHealth`](crate::types::AddonHealth).
    pub fn builder() -> crate::types::builders::AddonHealthBuilder {
        crate::types::builders::AddonHealthBuilder::default()
    }
}

/// A builder for [`AddonHealth`](crate::types::AddonHealth).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddonHealthBuilder {
    pub(crate) issues: ::std::option::Option<::std::vec::Vec<crate::types::AddonIssue>>,
}
impl AddonHealthBuilder {
    /// Appends an item to `issues`.
    ///
    /// To override the contents of this collection use [`set_issues`](Self::set_issues).
    ///
    /// <p>An object representing the health issues for an add-on.</p>
    pub fn issues(mut self, input: crate::types::AddonIssue) -> Self {
        let mut v = self.issues.unwrap_or_default();
        v.push(input);
        self.issues = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object representing the health issues for an add-on.</p>
    pub fn set_issues(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddonIssue>>) -> Self {
        self.issues = input;
        self
    }
    /// <p>An object representing the health issues for an add-on.</p>
    pub fn get_issues(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddonIssue>> {
        &self.issues
    }
    /// Consumes the builder and constructs a [`AddonHealth`](crate::types::AddonHealth).
    pub fn build(self) -> crate::types::AddonHealth {
        crate::types::AddonHealth { issues: self.issues }
    }
}
