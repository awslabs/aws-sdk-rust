// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Kubernetes network configuration for the cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KubernetesNetworkConfigRequest {
    /// <p>Don't specify a value if you select <code>ipv6</code> for <b>ipFamily</b>. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the <code>10.100.0.0/16</code> or <code>172.20.0.0/16</code> CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Within one of the following private IP address blocks: <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code>, or <code>192.168.0.0/16</code>.</p> </li>
    /// <li> <p>Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.</p> </li>
    /// <li> <p>Between /24 and /12.</p> </li>
    /// </ul> <important>
    /// <p>You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.</p>
    /// </important>
    #[doc(hidden)]
    pub service_ipv4_cidr: std::option::Option<std::string::String>,
    /// <p>Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, <code>ipv4</code> is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify <code>ipv6</code>, the VPC and subnets that you specify for cluster creation must have both <code>IPv4</code> and <code>IPv6</code> CIDR blocks assigned to them. You can't specify <code>ipv6</code> for clusters in China Regions.</p>
    /// <p>You can only specify <code>ipv6</code> for <code>1.21</code> and later clusters that use version <code>1.10.1</code> or later of the Amazon VPC CNI add-on. If you specify <code>ipv6</code>, then ensure that your VPC meets the requirements listed in the considerations listed in <a href="https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html">Assigning IPv6 addresses to pods and services</a> in the Amazon EKS User Guide. Kubernetes assigns services <code>IPv6</code> addresses from the unique local address range <code>(fc00::/7)</code>. You can't specify a custom <code>IPv6</code> CIDR block. Pod addresses are assigned from the subnet's <code>IPv6</code> CIDR.</p>
    #[doc(hidden)]
    pub ip_family: std::option::Option<crate::types::IpFamily>,
}
impl KubernetesNetworkConfigRequest {
    /// <p>Don't specify a value if you select <code>ipv6</code> for <b>ipFamily</b>. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the <code>10.100.0.0/16</code> or <code>172.20.0.0/16</code> CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Within one of the following private IP address blocks: <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code>, or <code>192.168.0.0/16</code>.</p> </li>
    /// <li> <p>Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.</p> </li>
    /// <li> <p>Between /24 and /12.</p> </li>
    /// </ul> <important>
    /// <p>You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.</p>
    /// </important>
    pub fn service_ipv4_cidr(&self) -> std::option::Option<&str> {
        self.service_ipv4_cidr.as_deref()
    }
    /// <p>Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, <code>ipv4</code> is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify <code>ipv6</code>, the VPC and subnets that you specify for cluster creation must have both <code>IPv4</code> and <code>IPv6</code> CIDR blocks assigned to them. You can't specify <code>ipv6</code> for clusters in China Regions.</p>
    /// <p>You can only specify <code>ipv6</code> for <code>1.21</code> and later clusters that use version <code>1.10.1</code> or later of the Amazon VPC CNI add-on. If you specify <code>ipv6</code>, then ensure that your VPC meets the requirements listed in the considerations listed in <a href="https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html">Assigning IPv6 addresses to pods and services</a> in the Amazon EKS User Guide. Kubernetes assigns services <code>IPv6</code> addresses from the unique local address range <code>(fc00::/7)</code>. You can't specify a custom <code>IPv6</code> CIDR block. Pod addresses are assigned from the subnet's <code>IPv6</code> CIDR.</p>
    pub fn ip_family(&self) -> std::option::Option<&crate::types::IpFamily> {
        self.ip_family.as_ref()
    }
}
impl KubernetesNetworkConfigRequest {
    /// Creates a new builder-style object to manufacture [`KubernetesNetworkConfigRequest`](crate::types::KubernetesNetworkConfigRequest).
    pub fn builder() -> crate::types::builders::KubernetesNetworkConfigRequestBuilder {
        crate::types::builders::KubernetesNetworkConfigRequestBuilder::default()
    }
}

/// A builder for [`KubernetesNetworkConfigRequest`](crate::types::KubernetesNetworkConfigRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KubernetesNetworkConfigRequestBuilder {
    pub(crate) service_ipv4_cidr: std::option::Option<std::string::String>,
    pub(crate) ip_family: std::option::Option<crate::types::IpFamily>,
}
impl KubernetesNetworkConfigRequestBuilder {
    /// <p>Don't specify a value if you select <code>ipv6</code> for <b>ipFamily</b>. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the <code>10.100.0.0/16</code> or <code>172.20.0.0/16</code> CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Within one of the following private IP address blocks: <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code>, or <code>192.168.0.0/16</code>.</p> </li>
    /// <li> <p>Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.</p> </li>
    /// <li> <p>Between /24 and /12.</p> </li>
    /// </ul> <important>
    /// <p>You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.</p>
    /// </important>
    pub fn service_ipv4_cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_ipv4_cidr = Some(input.into());
        self
    }
    /// <p>Don't specify a value if you select <code>ipv6</code> for <b>ipFamily</b>. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the <code>10.100.0.0/16</code> or <code>172.20.0.0/16</code> CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Within one of the following private IP address blocks: <code>10.0.0.0/8</code>, <code>172.16.0.0/12</code>, or <code>192.168.0.0/16</code>.</p> </li>
    /// <li> <p>Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.</p> </li>
    /// <li> <p>Between /24 and /12.</p> </li>
    /// </ul> <important>
    /// <p>You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.</p>
    /// </important>
    pub fn set_service_ipv4_cidr(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_ipv4_cidr = input;
        self
    }
    /// <p>Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, <code>ipv4</code> is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify <code>ipv6</code>, the VPC and subnets that you specify for cluster creation must have both <code>IPv4</code> and <code>IPv6</code> CIDR blocks assigned to them. You can't specify <code>ipv6</code> for clusters in China Regions.</p>
    /// <p>You can only specify <code>ipv6</code> for <code>1.21</code> and later clusters that use version <code>1.10.1</code> or later of the Amazon VPC CNI add-on. If you specify <code>ipv6</code>, then ensure that your VPC meets the requirements listed in the considerations listed in <a href="https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html">Assigning IPv6 addresses to pods and services</a> in the Amazon EKS User Guide. Kubernetes assigns services <code>IPv6</code> addresses from the unique local address range <code>(fc00::/7)</code>. You can't specify a custom <code>IPv6</code> CIDR block. Pod addresses are assigned from the subnet's <code>IPv6</code> CIDR.</p>
    pub fn ip_family(mut self, input: crate::types::IpFamily) -> Self {
        self.ip_family = Some(input);
        self
    }
    /// <p>Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, <code>ipv4</code> is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify <code>ipv6</code>, the VPC and subnets that you specify for cluster creation must have both <code>IPv4</code> and <code>IPv6</code> CIDR blocks assigned to them. You can't specify <code>ipv6</code> for clusters in China Regions.</p>
    /// <p>You can only specify <code>ipv6</code> for <code>1.21</code> and later clusters that use version <code>1.10.1</code> or later of the Amazon VPC CNI add-on. If you specify <code>ipv6</code>, then ensure that your VPC meets the requirements listed in the considerations listed in <a href="https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html">Assigning IPv6 addresses to pods and services</a> in the Amazon EKS User Guide. Kubernetes assigns services <code>IPv6</code> addresses from the unique local address range <code>(fc00::/7)</code>. You can't specify a custom <code>IPv6</code> CIDR block. Pod addresses are assigned from the subnet's <code>IPv6</code> CIDR.</p>
    pub fn set_ip_family(mut self, input: std::option::Option<crate::types::IpFamily>) -> Self {
        self.ip_family = input;
        self
    }
    /// Consumes the builder and constructs a [`KubernetesNetworkConfigRequest`](crate::types::KubernetesNetworkConfigRequest).
    pub fn build(self) -> crate::types::KubernetesNetworkConfigRequest {
        crate::types::KubernetesNetworkConfigRequest {
            service_ipv4_cidr: self.service_ipv4_cidr,
            ip_family: self.ip_family,
        }
    }
}
