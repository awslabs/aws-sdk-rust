// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_identity_provider_config::_disassociate_identity_provider_config_output::DisassociateIdentityProviderConfigOutputBuilder;

pub use crate::operation::disassociate_identity_provider_config::_disassociate_identity_provider_config_input::DisassociateIdentityProviderConfigInputBuilder;

/// Fluent builder constructing a request to `DisassociateIdentityProviderConfig`.
///
/// <p>Disassociates an identity provider configuration from a cluster. If you disassociate an identity provider from your cluster, users included in the provider can no longer access the cluster. However, you can still access the cluster with Amazon Web Services IAM users.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateIdentityProviderConfigFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::disassociate_identity_provider_config::builders::DisassociateIdentityProviderConfigInputBuilder
            }
impl DisassociateIdentityProviderConfigFluentBuilder {
    /// Creates a new `DisassociateIdentityProviderConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::disassociate_identity_provider_config::DisassociateIdentityProviderConfig, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::disassociate_identity_provider_config::DisassociateIdentityProviderConfigError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::disassociate_identity_provider_config::DisassociateIdentityProviderConfigOutput, aws_smithy_http::result::SdkError<crate::operation::disassociate_identity_provider_config::DisassociateIdentityProviderConfigError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the cluster to disassociate an identity provider from.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the cluster to disassociate an identity provider from.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>An object representing an identity provider configuration.</p>
    pub fn identity_provider_config(mut self, input: crate::types::IdentityProviderConfig) -> Self {
        self.inner = self.inner.identity_provider_config(input);
        self
    }
    /// <p>An object representing an identity provider configuration.</p>
    pub fn set_identity_provider_config(
        mut self,
        input: std::option::Option<crate::types::IdentityProviderConfig>,
    ) -> Self {
        self.inner = self.inner.set_identity_provider_config(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}
