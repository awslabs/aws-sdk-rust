// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_eks_anywhere_subscription::_create_eks_anywhere_subscription_output::CreateEksAnywhereSubscriptionOutputBuilder;

pub use crate::operation::create_eks_anywhere_subscription::_create_eks_anywhere_subscription_input::CreateEksAnywhereSubscriptionInputBuilder;

impl crate::operation::create_eks_anywhere_subscription::builders::CreateEksAnywhereSubscriptionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_eks_anywhere_subscription();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateEksAnywhereSubscription`.
///
/// <p>Creates an EKS Anywhere subscription. When a subscription is created, it is a contract agreement for the length of the term specified in the request. Licenses that are used to validate support are provisioned in Amazon Web Services License Manager and the caller account is granted access to EKS Anywhere Curated Packages.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateEksAnywhereSubscriptionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_eks_anywhere_subscription::builders::CreateEksAnywhereSubscriptionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionOutput,
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionError,
    > for CreateEksAnywhereSubscriptionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionOutput,
            crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateEksAnywhereSubscriptionFluentBuilder {
    /// Creates a new `CreateEksAnywhereSubscription`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateEksAnywhereSubscription as a reference.
    pub fn as_input(&self) -> &crate::operation::create_eks_anywhere_subscription::builders::CreateEksAnywhereSubscriptionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscription::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscription::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionOutput,
        crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn term(mut self, input: crate::types::EksAnywhereSubscriptionTerm) -> Self {
        self.inner = self.inner.term(input);
        self
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn set_term(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>) -> Self {
        self.inner = self.inner.set_term(input);
        self
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn get_term(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionTerm> {
        self.inner.get_term()
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 100. This value can't be changed after creating the subscription.</p>
    pub fn license_quantity(mut self, input: i32) -> Self {
        self.inner = self.inner.license_quantity(input);
        self
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 100. This value can't be changed after creating the subscription.</p>
    pub fn set_license_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_license_quantity(input);
        self
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 100. This value can't be changed after creating the subscription.</p>
    pub fn get_license_quantity(&self) -> &::std::option::Option<i32> {
        self.inner.get_license_quantity()
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn license_type(mut self, input: crate::types::EksAnywhereSubscriptionLicenseType) -> Self {
        self.inner = self.inner.license_type(input);
        self
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>) -> Self {
        self.inner = self.inner.set_license_type(input);
        self
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType> {
        self.inner.get_license_type()
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_renew(input);
        self
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn set_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_renew(input);
        self
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn get_auto_renew(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_renew()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags don't propagate to any other resources associated with the subscription.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags don't propagate to any other resources associated with the subscription.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags don't propagate to any other resources associated with the subscription.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
