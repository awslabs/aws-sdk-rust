// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateEncryptionConfigInput {
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration you are using for encryption.</p>
    pub encryption_config: ::std::option::Option<::std::vec::Vec<crate::types::EncryptionConfig>>,
    /// <p>The client request token you are using with the encryption configuration.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl AssociateEncryptionConfigInput {
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The configuration you are using for encryption.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.encryption_config.is_none()`.
    pub fn encryption_config(&self) -> &[crate::types::EncryptionConfig] {
        self.encryption_config.as_deref().unwrap_or_default()
    }
    /// <p>The client request token you are using with the encryption configuration.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl AssociateEncryptionConfigInput {
    /// Creates a new builder-style object to manufacture [`AssociateEncryptionConfigInput`](crate::operation::associate_encryption_config::AssociateEncryptionConfigInput).
    pub fn builder() -> crate::operation::associate_encryption_config::builders::AssociateEncryptionConfigInputBuilder {
        crate::operation::associate_encryption_config::builders::AssociateEncryptionConfigInputBuilder::default()
    }
}

/// A builder for [`AssociateEncryptionConfigInput`](crate::operation::associate_encryption_config::AssociateEncryptionConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateEncryptionConfigInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_config: ::std::option::Option<::std::vec::Vec<crate::types::EncryptionConfig>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl AssociateEncryptionConfigInputBuilder {
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the cluster that you are associating with encryption configuration.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// Appends an item to `encryption_config`.
    ///
    /// To override the contents of this collection use [`set_encryption_config`](Self::set_encryption_config).
    ///
    /// <p>The configuration you are using for encryption.</p>
    pub fn encryption_config(mut self, input: crate::types::EncryptionConfig) -> Self {
        let mut v = self.encryption_config.unwrap_or_default();
        v.push(input);
        self.encryption_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration you are using for encryption.</p>
    pub fn set_encryption_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EncryptionConfig>>) -> Self {
        self.encryption_config = input;
        self
    }
    /// <p>The configuration you are using for encryption.</p>
    pub fn get_encryption_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EncryptionConfig>> {
        &self.encryption_config
    }
    /// <p>The client request token you are using with the encryption configuration.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client request token you are using with the encryption configuration.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The client request token you are using with the encryption configuration.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`AssociateEncryptionConfigInput`](crate::operation::associate_encryption_config::AssociateEncryptionConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_encryption_config::AssociateEncryptionConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_encryption_config::AssociateEncryptionConfigInput {
            cluster_name: self.cluster_name,
            encryption_config: self.encryption_config,
            client_request_token: self.client_request_token,
        })
    }
}
