// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAddonConfigurationOutput {
    /// <p>The name of the add-on.</p>
    #[doc(hidden)]
    pub addon_name: std::option::Option<std::string::String>,
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html"> <code>DescribeAddonVersions</code> </a>.</p>
    #[doc(hidden)]
    pub addon_version: std::option::Option<std::string::String>,
    /// <p>A JSON schema that's used to validate the configuration values that you provide when an addon is created or updated.</p>
    #[doc(hidden)]
    pub configuration_schema: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAddonConfigurationOutput {
    /// <p>The name of the add-on.</p>
    pub fn addon_name(&self) -> std::option::Option<&str> {
        self.addon_name.as_deref()
    }
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html"> <code>DescribeAddonVersions</code> </a>.</p>
    pub fn addon_version(&self) -> std::option::Option<&str> {
        self.addon_version.as_deref()
    }
    /// <p>A JSON schema that's used to validate the configuration values that you provide when an addon is created or updated.</p>
    pub fn configuration_schema(&self) -> std::option::Option<&str> {
        self.configuration_schema.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAddonConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAddonConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddonConfigurationOutput`](crate::operation::describe_addon_configuration::DescribeAddonConfigurationOutput).
    pub fn builder() -> crate::operation::describe_addon_configuration::builders::DescribeAddonConfigurationOutputBuilder{
        crate::operation::describe_addon_configuration::builders::DescribeAddonConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeAddonConfigurationOutput`](crate::operation::describe_addon_configuration::DescribeAddonConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAddonConfigurationOutputBuilder {
    pub(crate) addon_name: std::option::Option<std::string::String>,
    pub(crate) addon_version: std::option::Option<std::string::String>,
    pub(crate) configuration_schema: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAddonConfigurationOutputBuilder {
    /// <p>The name of the add-on.</p>
    pub fn addon_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_name = Some(input.into());
        self
    }
    /// <p>The name of the add-on.</p>
    pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_name = input;
        self
    }
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html"> <code>DescribeAddonVersions</code> </a>.</p>
    pub fn addon_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.addon_version = Some(input.into());
        self
    }
    /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html"> <code>DescribeAddonVersions</code> </a>.</p>
    pub fn set_addon_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.addon_version = input;
        self
    }
    /// <p>A JSON schema that's used to validate the configuration values that you provide when an addon is created or updated.</p>
    pub fn configuration_schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_schema = Some(input.into());
        self
    }
    /// <p>A JSON schema that's used to validate the configuration values that you provide when an addon is created or updated.</p>
    pub fn set_configuration_schema(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_schema = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAddonConfigurationOutput`](crate::operation::describe_addon_configuration::DescribeAddonConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_addon_configuration::DescribeAddonConfigurationOutput {
        crate::operation::describe_addon_configuration::DescribeAddonConfigurationOutput {
            addon_name: self.addon_name,
            addon_version: self.addon_version,
            configuration_schema: self.configuration_schema,
            _request_id: self._request_id,
        }
    }
}
