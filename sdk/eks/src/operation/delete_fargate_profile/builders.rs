// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_fargate_profile::_delete_fargate_profile_output::DeleteFargateProfileOutputBuilder;

pub use crate::operation::delete_fargate_profile::_delete_fargate_profile_input::DeleteFargateProfileInputBuilder;

/// Fluent builder constructing a request to `DeleteFargateProfile`.
///
/// <p>Deletes an Fargate profile.</p>
/// <p>When you delete a Fargate profile, any pods running on Fargate that were created with the profile are deleted. If those pods match another Fargate profile, then they are scheduled on Fargate with that profile. If they no longer match any Fargate profiles, then they are not scheduled on Fargate and they may remain in a pending state.</p>
/// <p>Only one Fargate profile in a cluster can be in the <code>DELETING</code> status at a time. You must wait for a Fargate profile to finish deleting before you can delete any other profiles in that cluster.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFargateProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_fargate_profile::builders::DeleteFargateProfileInputBuilder,
}
impl DeleteFargateProfileFluentBuilder {
    /// Creates a new `DeleteFargateProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_fargate_profile::DeleteFargateProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_fargate_profile::DeleteFargateProfileError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_fargate_profile::DeleteFargateProfileOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_fargate_profile::DeleteFargateProfileError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Amazon EKS cluster associated with the Fargate profile to delete.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the Amazon EKS cluster associated with the Fargate profile to delete.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name of the Fargate profile to delete.</p>
    pub fn fargate_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fargate_profile_name(input.into());
        self
    }
    /// <p>The name of the Fargate profile to delete.</p>
    pub fn set_fargate_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_fargate_profile_name(input);
        self
    }
}
