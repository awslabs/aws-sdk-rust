// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateNodegroupConfigInput {
    /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The name of the managed node group to update.</p>
    #[doc(hidden)]
    pub nodegroup_name: std::option::Option<std::string::String>,
    /// <p>The Kubernetes labels to be applied to the nodes in the node group after the update.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<crate::types::UpdateLabelsPayload>,
    /// <p>The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html">Node taints on managed node groups</a>.</p>
    #[doc(hidden)]
    pub taints: std::option::Option<crate::types::UpdateTaintsPayload>,
    /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
    #[doc(hidden)]
    pub scaling_config: std::option::Option<crate::types::NodegroupScalingConfig>,
    /// <p>The node group update configuration.</p>
    #[doc(hidden)]
    pub update_config: std::option::Option<crate::types::NodegroupUpdateConfig>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
}
impl UpdateNodegroupConfigInput {
    /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The name of the managed node group to update.</p>
    pub fn nodegroup_name(&self) -> std::option::Option<&str> {
        self.nodegroup_name.as_deref()
    }
    /// <p>The Kubernetes labels to be applied to the nodes in the node group after the update.</p>
    pub fn labels(&self) -> std::option::Option<&crate::types::UpdateLabelsPayload> {
        self.labels.as_ref()
    }
    /// <p>The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html">Node taints on managed node groups</a>.</p>
    pub fn taints(&self) -> std::option::Option<&crate::types::UpdateTaintsPayload> {
        self.taints.as_ref()
    }
    /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
    pub fn scaling_config(&self) -> std::option::Option<&crate::types::NodegroupScalingConfig> {
        self.scaling_config.as_ref()
    }
    /// <p>The node group update configuration.</p>
    pub fn update_config(&self) -> std::option::Option<&crate::types::NodegroupUpdateConfig> {
        self.update_config.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl UpdateNodegroupConfigInput {
    /// Creates a new builder-style object to manufacture [`UpdateNodegroupConfigInput`](crate::operation::update_nodegroup_config::UpdateNodegroupConfigInput).
    pub fn builder(
    ) -> crate::operation::update_nodegroup_config::builders::UpdateNodegroupConfigInputBuilder
    {
        crate::operation::update_nodegroup_config::builders::UpdateNodegroupConfigInputBuilder::default()
    }
}

/// A builder for [`UpdateNodegroupConfigInput`](crate::operation::update_nodegroup_config::UpdateNodegroupConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateNodegroupConfigInputBuilder {
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) nodegroup_name: std::option::Option<std::string::String>,
    pub(crate) labels: std::option::Option<crate::types::UpdateLabelsPayload>,
    pub(crate) taints: std::option::Option<crate::types::UpdateTaintsPayload>,
    pub(crate) scaling_config: std::option::Option<crate::types::NodegroupScalingConfig>,
    pub(crate) update_config: std::option::Option<crate::types::NodegroupUpdateConfig>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
}
impl UpdateNodegroupConfigInputBuilder {
    /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the managed node group to update.</p>
    pub fn nodegroup_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.nodegroup_name = Some(input.into());
        self
    }
    /// <p>The name of the managed node group to update.</p>
    pub fn set_nodegroup_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.nodegroup_name = input;
        self
    }
    /// <p>The Kubernetes labels to be applied to the nodes in the node group after the update.</p>
    pub fn labels(mut self, input: crate::types::UpdateLabelsPayload) -> Self {
        self.labels = Some(input);
        self
    }
    /// <p>The Kubernetes labels to be applied to the nodes in the node group after the update.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<crate::types::UpdateLabelsPayload>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// <p>The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html">Node taints on managed node groups</a>.</p>
    pub fn taints(mut self, input: crate::types::UpdateTaintsPayload) -> Self {
        self.taints = Some(input);
        self
    }
    /// <p>The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html">Node taints on managed node groups</a>.</p>
    pub fn set_taints(
        mut self,
        input: std::option::Option<crate::types::UpdateTaintsPayload>,
    ) -> Self {
        self.taints = input;
        self
    }
    /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
    pub fn scaling_config(mut self, input: crate::types::NodegroupScalingConfig) -> Self {
        self.scaling_config = Some(input);
        self
    }
    /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
    pub fn set_scaling_config(
        mut self,
        input: std::option::Option<crate::types::NodegroupScalingConfig>,
    ) -> Self {
        self.scaling_config = input;
        self
    }
    /// <p>The node group update configuration.</p>
    pub fn update_config(mut self, input: crate::types::NodegroupUpdateConfig) -> Self {
        self.update_config = Some(input);
        self
    }
    /// <p>The node group update configuration.</p>
    pub fn set_update_config(
        mut self,
        input: std::option::Option<crate::types::NodegroupUpdateConfig>,
    ) -> Self {
        self.update_config = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateNodegroupConfigInput`](crate::operation::update_nodegroup_config::UpdateNodegroupConfigInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_nodegroup_config::UpdateNodegroupConfigInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_nodegroup_config::UpdateNodegroupConfigInput {
                cluster_name: self.cluster_name,
                nodegroup_name: self.nodegroup_name,
                labels: self.labels,
                taints: self.taints,
                scaling_config: self.scaling_config,
                update_config: self.update_config,
                client_request_token: self.client_request_token,
            },
        )
    }
}
