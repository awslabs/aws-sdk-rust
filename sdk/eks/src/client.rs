// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSWesleyFrontend`.
///
/// This client allows ergonomic access to a `AWSWesleyFrontend`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `AssociateEncryptionConfig` operation.
    ///
    /// See [`AssociateEncryptionConfig`](crate::client::fluent_builders::AssociateEncryptionConfig) for more information about the
    /// operation and its arguments.
    pub fn associate_encryption_config(
        &self,
    ) -> fluent_builders::AssociateEncryptionConfig<C, M, R> {
        fluent_builders::AssociateEncryptionConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AssociateIdentityProviderConfig` operation.
    ///
    /// See [`AssociateIdentityProviderConfig`](crate::client::fluent_builders::AssociateIdentityProviderConfig) for more information about the
    /// operation and its arguments.
    pub fn associate_identity_provider_config(
        &self,
    ) -> fluent_builders::AssociateIdentityProviderConfig<C, M, R> {
        fluent_builders::AssociateIdentityProviderConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateAddon` operation.
    ///
    /// See [`CreateAddon`](crate::client::fluent_builders::CreateAddon) for more information about the
    /// operation and its arguments.
    pub fn create_addon(&self) -> fluent_builders::CreateAddon<C, M, R> {
        fluent_builders::CreateAddon::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateCluster` operation.
    ///
    /// See [`CreateCluster`](crate::client::fluent_builders::CreateCluster) for more information about the
    /// operation and its arguments.
    pub fn create_cluster(&self) -> fluent_builders::CreateCluster<C, M, R> {
        fluent_builders::CreateCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateFargateProfile` operation.
    ///
    /// See [`CreateFargateProfile`](crate::client::fluent_builders::CreateFargateProfile) for more information about the
    /// operation and its arguments.
    pub fn create_fargate_profile(&self) -> fluent_builders::CreateFargateProfile<C, M, R> {
        fluent_builders::CreateFargateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateNodegroup` operation.
    ///
    /// See [`CreateNodegroup`](crate::client::fluent_builders::CreateNodegroup) for more information about the
    /// operation and its arguments.
    pub fn create_nodegroup(&self) -> fluent_builders::CreateNodegroup<C, M, R> {
        fluent_builders::CreateNodegroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteAddon` operation.
    ///
    /// See [`DeleteAddon`](crate::client::fluent_builders::DeleteAddon) for more information about the
    /// operation and its arguments.
    pub fn delete_addon(&self) -> fluent_builders::DeleteAddon<C, M, R> {
        fluent_builders::DeleteAddon::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteCluster` operation.
    ///
    /// See [`DeleteCluster`](crate::client::fluent_builders::DeleteCluster) for more information about the
    /// operation and its arguments.
    pub fn delete_cluster(&self) -> fluent_builders::DeleteCluster<C, M, R> {
        fluent_builders::DeleteCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteFargateProfile` operation.
    ///
    /// See [`DeleteFargateProfile`](crate::client::fluent_builders::DeleteFargateProfile) for more information about the
    /// operation and its arguments.
    pub fn delete_fargate_profile(&self) -> fluent_builders::DeleteFargateProfile<C, M, R> {
        fluent_builders::DeleteFargateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteNodegroup` operation.
    ///
    /// See [`DeleteNodegroup`](crate::client::fluent_builders::DeleteNodegroup) for more information about the
    /// operation and its arguments.
    pub fn delete_nodegroup(&self) -> fluent_builders::DeleteNodegroup<C, M, R> {
        fluent_builders::DeleteNodegroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeregisterCluster` operation.
    ///
    /// See [`DeregisterCluster`](crate::client::fluent_builders::DeregisterCluster) for more information about the
    /// operation and its arguments.
    pub fn deregister_cluster(&self) -> fluent_builders::DeregisterCluster<C, M, R> {
        fluent_builders::DeregisterCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeAddon` operation.
    ///
    /// See [`DescribeAddon`](crate::client::fluent_builders::DescribeAddon) for more information about the
    /// operation and its arguments.
    pub fn describe_addon(&self) -> fluent_builders::DescribeAddon<C, M, R> {
        fluent_builders::DescribeAddon::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeAddonVersions` operation.
    ///
    /// See [`DescribeAddonVersions`](crate::client::fluent_builders::DescribeAddonVersions) for more information about the
    /// operation and its arguments.
    pub fn describe_addon_versions(&self) -> fluent_builders::DescribeAddonVersions<C, M, R> {
        fluent_builders::DescribeAddonVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeCluster` operation.
    ///
    /// See [`DescribeCluster`](crate::client::fluent_builders::DescribeCluster) for more information about the
    /// operation and its arguments.
    pub fn describe_cluster(&self) -> fluent_builders::DescribeCluster<C, M, R> {
        fluent_builders::DescribeCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeFargateProfile` operation.
    ///
    /// See [`DescribeFargateProfile`](crate::client::fluent_builders::DescribeFargateProfile) for more information about the
    /// operation and its arguments.
    pub fn describe_fargate_profile(&self) -> fluent_builders::DescribeFargateProfile<C, M, R> {
        fluent_builders::DescribeFargateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeIdentityProviderConfig` operation.
    ///
    /// See [`DescribeIdentityProviderConfig`](crate::client::fluent_builders::DescribeIdentityProviderConfig) for more information about the
    /// operation and its arguments.
    pub fn describe_identity_provider_config(
        &self,
    ) -> fluent_builders::DescribeIdentityProviderConfig<C, M, R> {
        fluent_builders::DescribeIdentityProviderConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeNodegroup` operation.
    ///
    /// See [`DescribeNodegroup`](crate::client::fluent_builders::DescribeNodegroup) for more information about the
    /// operation and its arguments.
    pub fn describe_nodegroup(&self) -> fluent_builders::DescribeNodegroup<C, M, R> {
        fluent_builders::DescribeNodegroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeUpdate` operation.
    ///
    /// See [`DescribeUpdate`](crate::client::fluent_builders::DescribeUpdate) for more information about the
    /// operation and its arguments.
    pub fn describe_update(&self) -> fluent_builders::DescribeUpdate<C, M, R> {
        fluent_builders::DescribeUpdate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DisassociateIdentityProviderConfig` operation.
    ///
    /// See [`DisassociateIdentityProviderConfig`](crate::client::fluent_builders::DisassociateIdentityProviderConfig) for more information about the
    /// operation and its arguments.
    pub fn disassociate_identity_provider_config(
        &self,
    ) -> fluent_builders::DisassociateIdentityProviderConfig<C, M, R> {
        fluent_builders::DisassociateIdentityProviderConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListAddons` operation.
    ///
    /// See [`ListAddons`](crate::client::fluent_builders::ListAddons) for more information about the
    /// operation and its arguments.
    pub fn list_addons(&self) -> fluent_builders::ListAddons<C, M, R> {
        fluent_builders::ListAddons::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListClusters` operation.
    ///
    /// See [`ListClusters`](crate::client::fluent_builders::ListClusters) for more information about the
    /// operation and its arguments.
    pub fn list_clusters(&self) -> fluent_builders::ListClusters<C, M, R> {
        fluent_builders::ListClusters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListFargateProfiles` operation.
    ///
    /// See [`ListFargateProfiles`](crate::client::fluent_builders::ListFargateProfiles) for more information about the
    /// operation and its arguments.
    pub fn list_fargate_profiles(&self) -> fluent_builders::ListFargateProfiles<C, M, R> {
        fluent_builders::ListFargateProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListIdentityProviderConfigs` operation.
    ///
    /// See [`ListIdentityProviderConfigs`](crate::client::fluent_builders::ListIdentityProviderConfigs) for more information about the
    /// operation and its arguments.
    pub fn list_identity_provider_configs(
        &self,
    ) -> fluent_builders::ListIdentityProviderConfigs<C, M, R> {
        fluent_builders::ListIdentityProviderConfigs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListNodegroups` operation.
    ///
    /// See [`ListNodegroups`](crate::client::fluent_builders::ListNodegroups) for more information about the
    /// operation and its arguments.
    pub fn list_nodegroups(&self) -> fluent_builders::ListNodegroups<C, M, R> {
        fluent_builders::ListNodegroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListTagsForResource` operation.
    ///
    /// See [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) for more information about the
    /// operation and its arguments.
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListUpdates` operation.
    ///
    /// See [`ListUpdates`](crate::client::fluent_builders::ListUpdates) for more information about the
    /// operation and its arguments.
    pub fn list_updates(&self) -> fluent_builders::ListUpdates<C, M, R> {
        fluent_builders::ListUpdates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RegisterCluster` operation.
    ///
    /// See [`RegisterCluster`](crate::client::fluent_builders::RegisterCluster) for more information about the
    /// operation and its arguments.
    pub fn register_cluster(&self) -> fluent_builders::RegisterCluster<C, M, R> {
        fluent_builders::RegisterCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `TagResource` operation.
    ///
    /// See [`TagResource`](crate::client::fluent_builders::TagResource) for more information about the
    /// operation and its arguments.
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UntagResource` operation.
    ///
    /// See [`UntagResource`](crate::client::fluent_builders::UntagResource) for more information about the
    /// operation and its arguments.
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateAddon` operation.
    ///
    /// See [`UpdateAddon`](crate::client::fluent_builders::UpdateAddon) for more information about the
    /// operation and its arguments.
    pub fn update_addon(&self) -> fluent_builders::UpdateAddon<C, M, R> {
        fluent_builders::UpdateAddon::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateClusterConfig` operation.
    ///
    /// See [`UpdateClusterConfig`](crate::client::fluent_builders::UpdateClusterConfig) for more information about the
    /// operation and its arguments.
    pub fn update_cluster_config(&self) -> fluent_builders::UpdateClusterConfig<C, M, R> {
        fluent_builders::UpdateClusterConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateClusterVersion` operation.
    ///
    /// See [`UpdateClusterVersion`](crate::client::fluent_builders::UpdateClusterVersion) for more information about the
    /// operation and its arguments.
    pub fn update_cluster_version(&self) -> fluent_builders::UpdateClusterVersion<C, M, R> {
        fluent_builders::UpdateClusterVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateNodegroupConfig` operation.
    ///
    /// See [`UpdateNodegroupConfig`](crate::client::fluent_builders::UpdateNodegroupConfig) for more information about the
    /// operation and its arguments.
    pub fn update_nodegroup_config(&self) -> fluent_builders::UpdateNodegroupConfig<C, M, R> {
        fluent_builders::UpdateNodegroupConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateNodegroupVersion` operation.
    ///
    /// See [`UpdateNodegroupVersion`](crate::client::fluent_builders::UpdateNodegroupVersion) for more information about the
    /// operation and its arguments.
    pub fn update_nodegroup_version(&self) -> fluent_builders::UpdateNodegroupVersion<C, M, R> {
        fluent_builders::UpdateNodegroupVersion::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `AssociateEncryptionConfig`.
    ///
    /// <p>Associate encryption configuration to an existing cluster.</p>
    /// <p>You can use this API to enable encryption on existing clusters which do not have
    /// encryption already enabled. This allows you to implement a defense-in-depth security
    /// strategy without migrating applications to new Amazon EKS clusters.</p>
    #[derive(std::fmt::Debug)]
    pub struct AssociateEncryptionConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_encryption_config_input::Builder,
    }
    impl<C, M, R> AssociateEncryptionConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AssociateEncryptionConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateEncryptionConfigOutput,
            aws_smithy_http::result::SdkError<crate::error::AssociateEncryptionConfigError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateEncryptionConfigInputOperationOutputAlias,
                crate::output::AssociateEncryptionConfigOutput,
                crate::error::AssociateEncryptionConfigError,
                crate::input::AssociateEncryptionConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster that you are associating with encryption configuration.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster that you are associating with encryption configuration.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// Appends an item to `encryptionConfig`.
        ///
        /// To override the contents of this collection use [`set_encryption_config`](Self::set_encryption_config).
        ///
        /// <p>The configuration you are using for encryption.</p>
        pub fn encryption_config(mut self, inp: impl Into<crate::model::EncryptionConfig>) -> Self {
            self.inner = self.inner.encryption_config(inp);
            self
        }
        /// <p>The configuration you are using for encryption.</p>
        pub fn set_encryption_config(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EncryptionConfig>>,
        ) -> Self {
            self.inner = self.inner.set_encryption_config(input);
            self
        }
        /// <p>The client request token you are using with the encryption configuration.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>The client request token you are using with the encryption configuration.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AssociateIdentityProviderConfig`.
    ///
    /// <p>Associate an identity provider configuration to a cluster.</p>
    /// <p>If you want to authenticate identities using an identity provider, you can create an
    /// identity provider configuration and associate it to your cluster. After configuring
    /// authentication to your cluster you can create Kubernetes <code>roles</code> and
    /// <code>clusterroles</code> to assign permissions to the roles, and then bind the
    /// roles to the identities using Kubernetes <code>rolebindings</code> and
    /// <code>clusterrolebindings</code>. For more information see <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">Using RBAC
    /// Authorization</a> in the Kubernetes documentation.</p>
    #[derive(std::fmt::Debug)]
    pub struct AssociateIdentityProviderConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_identity_provider_config_input::Builder,
    }
    impl<C, M, R> AssociateIdentityProviderConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AssociateIdentityProviderConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateIdentityProviderConfigOutput,
            aws_smithy_http::result::SdkError<crate::error::AssociateIdentityProviderConfigError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateIdentityProviderConfigInputOperationOutputAlias,
                crate::output::AssociateIdentityProviderConfigOutput,
                crate::error::AssociateIdentityProviderConfigError,
                crate::input::AssociateIdentityProviderConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to associate the configuration to.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster to associate the configuration to.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>An object that represents an OpenID Connect (OIDC) identity provider
        /// configuration.</p>
        pub fn oidc(mut self, inp: crate::model::OidcIdentityProviderConfigRequest) -> Self {
            self.inner = self.inner.oidc(inp);
            self
        }
        /// <p>An object that represents an OpenID Connect (OIDC) identity provider
        /// configuration.</p>
        pub fn set_oidc(
            mut self,
            input: std::option::Option<crate::model::OidcIdentityProviderConfigRequest>,
        ) -> Self {
            self.inner = self.inner.set_oidc(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The metadata to apply to the configuration to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The metadata to apply to the configuration to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateAddon`.
    ///
    /// <p>Creates an Amazon EKS add-on.</p>
    /// <p>Amazon EKS add-ons help to automate the provisioning and lifecycle management of common
    /// operational software for Amazon EKS clusters. Amazon EKS add-ons can only be used with Amazon EKS
    /// clusters running version 1.18 with platform version <code>eks.3</code> or later because
    /// add-ons rely on the Server-side Apply Kubernetes feature, which is only available in
    /// Kubernetes 1.18 and later.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateAddon<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_addon_input::Builder,
    }
    impl<C, M, R> CreateAddon<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateAddon`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateAddonOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateAddonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateAddonInputOperationOutputAlias,
                crate::output::CreateAddonOutput,
                crate::error::CreateAddonError,
                crate::input::CreateAddonInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to create the add-on for.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster to create the add-on for.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
        /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn addon_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_version(inp);
            self
        }
        /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn set_addon_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_addon_version(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
        /// permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
        /// <note>
        /// <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
        /// your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
        /// IAM roles for service accounts on your cluster</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        /// </note>
        pub fn service_account_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_account_role_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
        /// permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
        /// <note>
        /// <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
        /// your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
        /// IAM roles for service accounts on your cluster</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        /// </note>
        pub fn set_service_account_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_account_role_arn(input);
            self
        }
        /// <p>How to resolve parameter value conflicts when migrating an existing add-on to an Amazon EKS
        /// add-on.</p>
        pub fn resolve_conflicts(mut self, inp: crate::model::ResolveConflicts) -> Self {
            self.inner = self.inner.resolve_conflicts(inp);
            self
        }
        /// <p>How to resolve parameter value conflicts when migrating an existing add-on to an Amazon EKS
        /// add-on.</p>
        pub fn set_resolve_conflicts(
            mut self,
            input: std::option::Option<crate::model::ResolveConflicts>,
        ) -> Self {
            self.inner = self.inner.set_resolve_conflicts(input);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The metadata to apply to the cluster to assist with categorization and organization.
        /// Each tag consists of a key and an optional value, both of which you define. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The metadata to apply to the cluster to assist with categorization and organization.
        /// Each tag consists of a key and an optional value, both of which you define. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateCluster`.
    ///
    /// <p>Creates an Amazon EKS control plane. </p>
    /// <p>The Amazon EKS control plane consists of control plane instances that run the Kubernetes
    /// software, such as <code>etcd</code> and the API server. The control plane runs in an
    /// account managed by Amazon Web Services, and the Kubernetes API is exposed via the Amazon EKS API server
    /// endpoint. Each Amazon EKS cluster control plane is single-tenant and unique and runs on its
    /// own set of Amazon EC2 instances.</p>
    /// <p>The cluster control plane is provisioned across multiple Availability Zones and
    /// fronted by an Elastic Load Balancing Network Load Balancer. Amazon EKS also provisions elastic network interfaces in your VPC
    /// subnets to provide connectivity from the control plane instances to the nodes (for
    /// example, to support <code>kubectl exec</code>, <code>logs</code>, and <code>proxy</code>
    /// data flows).</p>
    /// <p>Amazon EKS nodes run in your Amazon Web Services account and connect to your cluster's control plane via
    /// the Kubernetes API server endpoint and a certificate file that is created for your
    /// cluster.</p>
    ///
    /// <p>Cluster creation typically takes several minutes. After you create an Amazon EKS cluster,
    /// you must configure your Kubernetes tooling to communicate with the API server and launch
    /// nodes into your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-auth.html">Managing Cluster
    /// Authentication</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html">Launching Amazon EKS nodes</a> in the <i>Amazon EKS User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_cluster_input::Builder,
    }
    impl<C, M, R> CreateCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateClusterInputOperationOutputAlias,
                crate::output::CreateClusterOutput,
                crate::error::CreateClusterError,
                crate::input::CreateClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique name to give to your cluster.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The unique name to give to your cluster.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The desired Kubernetes version for your cluster. If you don't specify a value here,
        /// the latest version available in Amazon EKS is used.</p>
        pub fn version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(inp);
            self
        }
        /// <p>The desired Kubernetes version for your cluster. If you don't specify a value here,
        /// the latest version available in Amazon EKS is used.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control
        /// plane to make calls to Amazon Web Services API operations on your behalf. For more information, see
        /// <a href="https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html">Amazon EKS
        /// Service IAM Role</a> in the <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control
        /// plane to make calls to Amazon Web Services API operations on your behalf. For more information, see
        /// <a href="https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html">Amazon EKS
        /// Service IAM Role</a> in the <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(input);
            self
        }
        /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have
        /// specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC
        /// Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the
        /// <i>Amazon EKS User Guide</i>. You must specify at least two subnets. You can specify up to five
        /// security groups, but we recommend that you use a dedicated security group for your
        /// cluster control plane.</p>
        pub fn resources_vpc_config(mut self, inp: crate::model::VpcConfigRequest) -> Self {
            self.inner = self.inner.resources_vpc_config(inp);
            self
        }
        /// <p>The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have
        /// specific requirements to work properly with Kubernetes. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html">Cluster VPC
        /// Considerations</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html">Cluster Security Group Considerations</a> in the
        /// <i>Amazon EKS User Guide</i>. You must specify at least two subnets. You can specify up to five
        /// security groups, but we recommend that you use a dedicated security group for your
        /// cluster control plane.</p>
        pub fn set_resources_vpc_config(
            mut self,
            input: std::option::Option<crate::model::VpcConfigRequest>,
        ) -> Self {
            self.inner = self.inner.set_resources_vpc_config(input);
            self
        }
        /// <p>The Kubernetes network configuration for the cluster.</p>
        pub fn kubernetes_network_config(
            mut self,
            inp: crate::model::KubernetesNetworkConfigRequest,
        ) -> Self {
            self.inner = self.inner.kubernetes_network_config(inp);
            self
        }
        /// <p>The Kubernetes network configuration for the cluster.</p>
        pub fn set_kubernetes_network_config(
            mut self,
            input: std::option::Option<crate::model::KubernetesNetworkConfigRequest>,
        ) -> Self {
            self.inner = self.inner.set_kubernetes_network_config(input);
            self
        }
        /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
        /// CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS Cluster control plane logs</a> in the
        /// <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        /// <note>
        /// <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
        /// control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p>
        /// </note>
        pub fn logging(mut self, inp: crate::model::Logging) -> Self {
            self.inner = self.inner.logging(inp);
            self
        }
        /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
        /// CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS Cluster control plane logs</a> in the
        /// <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        /// <note>
        /// <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
        /// control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p>
        /// </note>
        pub fn set_logging(mut self, input: std::option::Option<crate::model::Logging>) -> Self {
            self.inner = self.inner.set_logging(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The metadata to apply to the cluster to assist with categorization and organization.
        /// Each tag consists of a key and an optional value, both of which you define.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The metadata to apply to the cluster to assist with categorization and organization.
        /// Each tag consists of a key and an optional value, both of which you define.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// Appends an item to `encryptionConfig`.
        ///
        /// To override the contents of this collection use [`set_encryption_config`](Self::set_encryption_config).
        ///
        /// <p>The encryption configuration for the cluster.</p>
        pub fn encryption_config(mut self, inp: impl Into<crate::model::EncryptionConfig>) -> Self {
            self.inner = self.inner.encryption_config(inp);
            self
        }
        /// <p>The encryption configuration for the cluster.</p>
        pub fn set_encryption_config(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EncryptionConfig>>,
        ) -> Self {
            self.inner = self.inner.set_encryption_config(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateFargateProfile`.
    ///
    /// <p>Creates an Fargate profile for your Amazon EKS cluster. You must have at least one Fargate
    /// profile in a cluster to be able to run pods on Fargate.</p>
    /// <p>The Fargate profile allows an administrator to declare which pods run on Fargate and specify
    /// which pods run on which Fargate profile. This declaration is done through the profile’s
    /// selectors. Each profile can have up to five selectors that contain a namespace and
    /// labels. A namespace is required for every selector. The label field consists of multiple
    /// optional key-value pairs. Pods that match the selectors are scheduled on Fargate. If a
    /// to-be-scheduled pod matches any of the selectors in the Fargate profile, then that pod is
    /// run on Fargate.</p>
    /// <p>When you create a Fargate profile, you must specify a pod execution role to use with the
    /// pods that are scheduled with the profile. This role is added to the cluster's Kubernetes
    /// <a href="https://kubernetes.io/docs/admin/authorization/rbac/">Role Based Access
    /// Control</a> (RBAC) for authorization so that the <code>kubelet</code> that is
    /// running on the Fargate infrastructure can register with your Amazon EKS cluster so that it can
    /// appear in your cluster as a node. The pod execution role also provides IAM permissions
    /// to the Fargate infrastructure to allow read access to Amazon ECR image repositories. For more
    /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.</p>
    /// <p>Fargate profiles are immutable. However, you can create a new updated profile to replace
    /// an existing profile and then delete the original after the updated profile has finished
    /// creating.</p>
    /// <p>If any Fargate profiles in a cluster are in the <code>DELETING</code> status, you must
    /// wait for that Fargate profile to finish deleting before you can create any other profiles
    /// in that cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/fargate-profile.html">Fargate Profile</a> in the <i>Amazon EKS User Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateFargateProfile<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_fargate_profile_input::Builder,
    }
    impl<C, M, R> CreateFargateProfile<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateFargateProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateFargateProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateFargateProfileError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateFargateProfileInputOperationOutputAlias,
                crate::output::CreateFargateProfileOutput,
                crate::error::CreateFargateProfileError,
                crate::input::CreateFargateProfileInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Fargate profile.</p>
        pub fn fargate_profile_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.fargate_profile_name(inp);
            self
        }
        /// <p>The name of the Fargate profile.</p>
        pub fn set_fargate_profile_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_fargate_profile_name(input);
            self
        }
        /// <p>The name of the Amazon EKS cluster to apply the Fargate profile to.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster to apply the Fargate profile to.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in
        /// the Fargate profile. The pod execution role allows Fargate infrastructure to register with
        /// your cluster as a node, and it provides read access to Amazon ECR image repositories. For
        /// more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        pub fn pod_execution_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pod_execution_role_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in
        /// the Fargate profile. The pod execution role allows Fargate infrastructure to register with
        /// your cluster as a node, and it provides read access to Amazon ECR image repositories. For
        /// more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html">Pod Execution Role</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        pub fn set_pod_execution_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pod_execution_role_arn(input);
            self
        }
        /// Appends an item to `subnets`.
        ///
        /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
        ///
        /// <p>The IDs of subnets to launch your pods into. At this time, pods running on Fargate are
        /// not assigned public IP addresses, so only private subnets (with no direct route to an
        /// Internet Gateway) are accepted for this parameter.</p>
        pub fn subnets(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnets(inp);
            self
        }
        /// <p>The IDs of subnets to launch your pods into. At this time, pods running on Fargate are
        /// not assigned public IP addresses, so only private subnets (with no direct route to an
        /// Internet Gateway) are accepted for this parameter.</p>
        pub fn set_subnets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnets(input);
            self
        }
        /// Appends an item to `selectors`.
        ///
        /// To override the contents of this collection use [`set_selectors`](Self::set_selectors).
        ///
        /// <p>The selectors to match for pods to use this Fargate profile. Each selector must have an
        /// associated namespace. Optionally, you can also specify labels for a namespace. You may
        /// specify up to five selectors in a Fargate profile.</p>
        pub fn selectors(mut self, inp: impl Into<crate::model::FargateProfileSelector>) -> Self {
            self.inner = self.inner.selectors(inp);
            self
        }
        /// <p>The selectors to match for pods to use this Fargate profile. Each selector must have an
        /// associated namespace. Optionally, you can also specify labels for a namespace. You may
        /// specify up to five selectors in a Fargate profile.</p>
        pub fn set_selectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FargateProfileSelector>>,
        ) -> Self {
            self.inner = self.inner.set_selectors(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The metadata to apply to the Fargate profile to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define. Fargate profile tags do not propagate to any other resources associated with the
        /// Fargate profile, such as the pods that are scheduled with it.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The metadata to apply to the Fargate profile to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define. Fargate profile tags do not propagate to any other resources associated with the
        /// Fargate profile, such as the pods that are scheduled with it.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateNodegroup`.
    ///
    /// <p>Creates a managed node group for an Amazon EKS cluster. You can only create a node group
    /// for your cluster that is equal to the current Kubernetes version for the cluster. All
    /// node groups are created with the latest AMI release version for the respective minor
    /// Kubernetes version of the cluster, unless you deploy a custom AMI using a launch
    /// template. For more information about using launch templates, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch
    /// template support</a>.</p>
    /// <p>An Amazon EKS managed node group is an Amazon EC2 Auto Scaling group and associated Amazon EC2 instances that
    /// are managed by Amazon Web Services for an Amazon EKS cluster. Each node group uses a version of the Amazon EKS
    /// optimized Amazon Linux 2 AMI. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html">Managed
    /// Node Groups</a> in the <i>Amazon EKS User Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct CreateNodegroup<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_nodegroup_input::Builder,
    }
    impl<C, M, R> CreateNodegroup<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateNodegroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateNodegroupOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateNodegroupError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateNodegroupInputOperationOutputAlias,
                crate::output::CreateNodegroupOutput,
                crate::error::CreateNodegroupError,
                crate::input::CreateNodegroupInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to create the node group in.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster to create the node group in.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The unique name to give your node group.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The unique name to give your node group.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
        /// <p>The scaling configuration details for the Auto Scaling group that is created for your
        /// node group.</p>
        pub fn scaling_config(mut self, inp: crate::model::NodegroupScalingConfig) -> Self {
            self.inner = self.inner.scaling_config(inp);
            self
        }
        /// <p>The scaling configuration details for the Auto Scaling group that is created for your
        /// node group.</p>
        pub fn set_scaling_config(
            mut self,
            input: std::option::Option<crate::model::NodegroupScalingConfig>,
        ) -> Self {
            self.inner = self.inner.set_scaling_config(input);
            self
        }
        /// <p>The root device disk size (in GiB) for your node group instances. The default disk
        /// size is 20 GiB. If you specify <code>launchTemplate</code>, then don't specify  <code>diskSize</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn disk_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.disk_size(inp);
            self
        }
        /// <p>The root device disk size (in GiB) for your node group instances. The default disk
        /// size is 20 GiB. If you specify <code>launchTemplate</code>, then don't specify  <code>diskSize</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_disk_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_disk_size(input);
            self
        }
        /// Appends an item to `subnets`.
        ///
        /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
        ///
        /// <p>The subnets to use for the Auto Scaling group that is created for your node group.
        /// If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">
        /// <code>SubnetId</code>
        /// </a> in your launch template, or the node group
        /// deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn subnets(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnets(inp);
            self
        }
        /// <p>The subnets to use for the Auto Scaling group that is created for your node group.
        /// If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">
        /// <code>SubnetId</code>
        /// </a> in your launch template, or the node group
        /// deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_subnets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnets(input);
            self
        }
        /// Appends an item to `instanceTypes`.
        ///
        /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
        ///
        /// <p>Specify the instance types for a node group. If you specify a GPU instance type, be
        /// sure to specify <code>AL2_x86_64_GPU</code> with the <code>amiType</code> parameter. If
        /// you specify <code>launchTemplate</code>, then you can specify zero or one instance type
        /// in your launch template <i>or</i> you can specify 0-20 instance types for
        /// <code>instanceTypes</code>. If however, you specify an instance type in your launch
        /// template <i>and</i> specify any <code>instanceTypes</code>, the node group
        /// deployment will fail. If you don't specify an instance type in a launch template or for
        /// <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you
        /// specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying
        /// multiple values for <code>instanceTypes</code>. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types">Managed node group capacity types</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in
        /// the <i>Amazon EKS User Guide</i>.</p>
        pub fn instance_types(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_types(inp);
            self
        }
        /// <p>Specify the instance types for a node group. If you specify a GPU instance type, be
        /// sure to specify <code>AL2_x86_64_GPU</code> with the <code>amiType</code> parameter. If
        /// you specify <code>launchTemplate</code>, then you can specify zero or one instance type
        /// in your launch template <i>or</i> you can specify 0-20 instance types for
        /// <code>instanceTypes</code>. If however, you specify an instance type in your launch
        /// template <i>and</i> specify any <code>instanceTypes</code>, the node group
        /// deployment will fail. If you don't specify an instance type in a launch template or for
        /// <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you
        /// specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying
        /// multiple values for <code>instanceTypes</code>. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types">Managed node group capacity types</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in
        /// the <i>Amazon EKS User Guide</i>.</p>
        pub fn set_instance_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_types(input);
            self
        }
        /// <p>The AMI type for your node group. GPU instance types should use the
        /// <code>AL2_x86_64_GPU</code> AMI type. Non-GPU instances should use the
        /// <code>AL2_x86_64</code> AMI type. Arm instances should use the
        /// <code>AL2_ARM_64</code> AMI type. All types use the Amazon EKS optimized Amazon Linux 2 AMI.
        /// If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn ami_type(mut self, inp: crate::model::AmiTypes) -> Self {
            self.inner = self.inner.ami_type(inp);
            self
        }
        /// <p>The AMI type for your node group. GPU instance types should use the
        /// <code>AL2_x86_64_GPU</code> AMI type. Non-GPU instances should use the
        /// <code>AL2_x86_64</code> AMI type. Arm instances should use the
        /// <code>AL2_ARM_64</code> AMI type. All types use the Amazon EKS optimized Amazon Linux 2 AMI.
        /// If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_ami_type(mut self, input: std::option::Option<crate::model::AmiTypes>) -> Self {
            self.inner = self.inner.set_ami_type(input);
            self
        }
        /// <p>The remote access (SSH) configuration to use with your node group. If you specify <code>launchTemplate</code>,
        /// then don't specify  <code>remoteAccess</code>, or the node group  deployment
        /// will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn remote_access(mut self, inp: crate::model::RemoteAccessConfig) -> Self {
            self.inner = self.inner.remote_access(inp);
            self
        }
        /// <p>The remote access (SSH) configuration to use with your node group. If you specify <code>launchTemplate</code>,
        /// then don't specify  <code>remoteAccess</code>, or the node group  deployment
        /// will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_remote_access(
            mut self,
            input: std::option::Option<crate::model::RemoteAccessConfig>,
        ) -> Self {
            self.inner = self.inner.set_remote_access(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker
        /// node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive
        /// permissions for these API calls through an IAM instance profile and associated
        /// policies. Before you can launch nodes and register them into a cluster, you must create
        /// an IAM role for those nodes to use when they are launched. For more information, see
        /// <a href="https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html">Amazon EKS node IAM role</a> in the <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.
        /// If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html">
        /// <code>IamInstanceProfile</code>
        /// </a> in your launch template,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn node_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.node_role(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker
        /// node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive
        /// permissions for these API calls through an IAM instance profile and associated
        /// policies. Before you can launch nodes and register them into a cluster, you must create
        /// an IAM role for those nodes to use when they are launched. For more information, see
        /// <a href="https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html">Amazon EKS node IAM role</a> in the <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.
        /// If you specify <code>launchTemplate</code>, then don't specify  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html">
        /// <code>IamInstanceProfile</code>
        /// </a> in your launch template,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_node_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_node_role(input);
            self
        }
        /// Adds a key-value pair to `labels`.
        ///
        /// To override the contents of this collection use [`set_labels`](Self::set_labels).
        ///
        /// <p>The Kubernetes labels to be applied to the nodes in the node group when they are
        /// created.</p>
        pub fn labels(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.labels(k, v);
            self
        }
        /// <p>The Kubernetes labels to be applied to the nodes in the node group when they are
        /// created.</p>
        pub fn set_labels(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_labels(input);
            self
        }
        /// Appends an item to `taints`.
        ///
        /// To override the contents of this collection use [`set_taints`](Self::set_taints).
        ///
        /// <p>The Kubernetes taints to be applied to the nodes in the node group.</p>
        pub fn taints(mut self, inp: impl Into<crate::model::Taint>) -> Self {
            self.inner = self.inner.taints(inp);
            self
        }
        /// <p>The Kubernetes taints to be applied to the nodes in the node group.</p>
        pub fn set_taints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Taint>>,
        ) -> Self {
            self.inner = self.inner.set_taints(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The metadata to apply to the node group to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define. Node group tags do not propagate to any other resources associated with the node
        /// group, such as the Amazon EC2 instances or subnets.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The metadata to apply to the node group to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you
        /// define. Node group tags do not propagate to any other resources associated with the node
        /// group, such as the Amazon EC2 instances or subnets.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
        /// <p>An object representing a node group's launch template specification. If specified,
        /// then do not specify <code>instanceTypes</code>, <code>diskSize</code>, or
        /// <code>remoteAccess</code> and make sure that the launch template meets the
        /// requirements in <code>launchTemplateSpecification</code>.</p>
        pub fn launch_template(mut self, inp: crate::model::LaunchTemplateSpecification) -> Self {
            self.inner = self.inner.launch_template(inp);
            self
        }
        /// <p>An object representing a node group's launch template specification. If specified,
        /// then do not specify <code>instanceTypes</code>, <code>diskSize</code>, or
        /// <code>remoteAccess</code> and make sure that the launch template meets the
        /// requirements in <code>launchTemplateSpecification</code>.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplateSpecification>,
        ) -> Self {
            self.inner = self.inner.set_launch_template(input);
            self
        }
        /// <p>The node group update configuration.</p>
        pub fn update_config(mut self, inp: crate::model::NodegroupUpdateConfig) -> Self {
            self.inner = self.inner.update_config(inp);
            self
        }
        /// <p>The node group update configuration.</p>
        pub fn set_update_config(
            mut self,
            input: std::option::Option<crate::model::NodegroupUpdateConfig>,
        ) -> Self {
            self.inner = self.inner.set_update_config(input);
            self
        }
        /// <p>The capacity type for your node group.</p>
        pub fn capacity_type(mut self, inp: crate::model::CapacityTypes) -> Self {
            self.inner = self.inner.capacity_type(inp);
            self
        }
        /// <p>The capacity type for your node group.</p>
        pub fn set_capacity_type(
            mut self,
            input: std::option::Option<crate::model::CapacityTypes>,
        ) -> Self {
            self.inner = self.inner.set_capacity_type(input);
            self
        }
        /// <p>The Kubernetes version to use for your managed nodes. By default, the Kubernetes
        /// version of the cluster is used, and this is the only accepted specified value.
        /// If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify  <code>version</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(inp);
            self
        }
        /// <p>The Kubernetes version to use for your managed nodes. By default, the Kubernetes
        /// version of the cluster is used, and this is the only accepted specified value.
        /// If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify  <code>version</code>,
        /// or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
        /// <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default,
        /// the latest available AMI version for the node group's current Kubernetes version is
        /// used. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS
        /// optimized Amazon Linux 2 AMI versions</a> in the <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>,
        /// and your launch template uses a custom AMI, then don't specify  <code>releaseVersion</code>, or the node group
        /// deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn release_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.release_version(inp);
            self
        }
        /// <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default,
        /// the latest available AMI version for the node group's current Kubernetes version is
        /// used. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS
        /// optimized Amazon Linux 2 AMI versions</a> in the <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>,
        /// and your launch template uses a custom AMI, then don't specify  <code>releaseVersion</code>, or the node group
        /// deployment will fail. For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_release_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_release_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteAddon`.
    ///
    /// <p>Delete an Amazon EKS add-on.</p>
    /// <p>When you remove the add-on, it will also be deleted from the cluster. You can always
    /// manually start an add-on on the cluster using the Kubernetes API.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteAddon<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_addon_input::Builder,
    }
    impl<C, M, R> DeleteAddon<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteAddon`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAddonOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteAddonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAddonInputOperationOutputAlias,
                crate::output::DeleteAddonOutput,
                crate::error::DeleteAddonError,
                crate::input::DeleteAddonInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to delete the add-on from.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster to delete the add-on from.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
        /// <p>Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on. If an IAM account is associated with the add-on, it is not removed.</p>
        pub fn preserve(mut self, inp: bool) -> Self {
            self.inner = self.inner.preserve(inp);
            self
        }
        /// <p>Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on. If an IAM account is associated with the add-on, it is not removed.</p>
        pub fn set_preserve(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_preserve(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCluster`.
    ///
    /// <p>Deletes the Amazon EKS cluster control plane.</p>
    /// <p>If you have active services in your cluster that are associated with a load balancer,
    /// you must delete those services before deleting the cluster so that the load balancers
    /// are deleted properly. Otherwise, you can have orphaned resources in your VPC that
    /// prevent you from being able to delete the VPC. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/delete-cluster.html">Deleting a
    /// Cluster</a> in the <i>Amazon EKS User Guide</i>.</p>
    /// <p>If you have managed node groups or Fargate profiles attached to the cluster, you must
    /// delete them first. For more information, see <a>DeleteNodegroup</a> and <a>DeleteFargateProfile</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_cluster_input::Builder,
    }
    impl<C, M, R> DeleteCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteClusterInputOperationOutputAlias,
                crate::output::DeleteClusterOutput,
                crate::error::DeleteClusterError,
                crate::input::DeleteClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to delete.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the cluster to delete.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteFargateProfile`.
    ///
    /// <p>Deletes an Fargate profile.</p>
    /// <p>When you delete a Fargate profile, any pods running on Fargate that were created with the
    /// profile are deleted. If those pods match another Fargate profile, then they are scheduled
    /// on Fargate with that profile. If they no longer match any Fargate profiles, then they are not
    /// scheduled on Fargate and they may remain in a pending state.</p>
    /// <p>Only one Fargate profile in a cluster can be in the <code>DELETING</code> status at a
    /// time. You must wait for a Fargate profile to finish deleting before you can delete any
    /// other profiles in that cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteFargateProfile<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_fargate_profile_input::Builder,
    }
    impl<C, M, R> DeleteFargateProfile<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteFargateProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteFargateProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteFargateProfileError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteFargateProfileInputOperationOutputAlias,
                crate::output::DeleteFargateProfileOutput,
                crate::error::DeleteFargateProfileError,
                crate::input::DeleteFargateProfileInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster associated with the Fargate profile to delete.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster associated with the Fargate profile to delete.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the Fargate profile to delete.</p>
        pub fn fargate_profile_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.fargate_profile_name(inp);
            self
        }
        /// <p>The name of the Fargate profile to delete.</p>
        pub fn set_fargate_profile_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_fargate_profile_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteNodegroup`.
    ///
    /// <p>Deletes an Amazon EKS node group for a cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteNodegroup<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_nodegroup_input::Builder,
    }
    impl<C, M, R> DeleteNodegroup<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteNodegroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteNodegroupOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteNodegroupError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteNodegroupInputOperationOutputAlias,
                crate::output::DeleteNodegroupOutput,
                crate::error::DeleteNodegroupError,
                crate::input::DeleteNodegroupInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster that is associated with your node group.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster that is associated with your node group.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the node group to delete.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the node group to delete.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeregisterCluster`.
    ///
    /// <p>Deregisters a connected cluster to remove it from the Amazon EKS control plane.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeregisterCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_cluster_input::Builder,
    }
    impl<C, M, R> DeregisterCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeregisterCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DeregisterClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterClusterInputOperationOutputAlias,
                crate::output::DeregisterClusterOutput,
                crate::error::DeregisterClusterError,
                crate::input::DeregisterClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the connected cluster to deregister.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the connected cluster to deregister.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeAddon`.
    ///
    /// <p>Describes an Amazon EKS add-on.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeAddon<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_addon_input::Builder,
    }
    impl<C, M, R> DescribeAddon<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeAddon`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAddonOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeAddonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAddonInputOperationOutputAlias,
                crate::output::DescribeAddonOutput,
                crate::error::DescribeAddonError,
                crate::input::DescribeAddonInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeAddonVersions`.
    ///
    /// <p>Describes the Kubernetes versions that the add-on can be used with.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeAddonVersions<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_addon_versions_input::Builder,
    }
    impl<C, M, R> DescribeAddonVersions<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeAddonVersions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAddonVersionsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeAddonVersionsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAddonVersionsInputOperationOutputAlias,
                crate::output::DescribeAddonVersionsOutput,
                crate::error::DescribeAddonVersionsError,
                crate::input::DescribeAddonVersionsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The Kubernetes versions that the add-on can be used with.</p>
        pub fn kubernetes_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kubernetes_version(inp);
            self
        }
        /// <p>The Kubernetes versions that the add-on can be used with.</p>
        pub fn set_kubernetes_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_kubernetes_version(input);
            self
        }
        /// <p>The maximum number of results to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of results to return.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>DescribeAddonVersionsRequest</code> where <code>maxResults</code> was used and
        /// the results exceeded the value of that parameter. Pagination continues from the end of
        /// the previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>DescribeAddonVersionsRequest</code> where <code>maxResults</code> was used and
        /// the results exceeded the value of that parameter. Pagination continues from the end of
        /// the previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeCluster`.
    ///
    /// <p>Returns descriptive information about an Amazon EKS cluster.</p>
    /// <p>The API server endpoint and certificate authority data returned by this operation are
    /// required for <code>kubelet</code> and <code>kubectl</code> to communicate with your
    /// Kubernetes API server. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html">Create a
    /// kubeconfig for Amazon EKS</a>.</p>
    /// <note>
    /// <p>The API server endpoint and certificate authority data aren't available until the
    /// cluster reaches the <code>ACTIVE</code> state.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct DescribeCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_cluster_input::Builder,
    }
    impl<C, M, R> DescribeCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeClusterInputOperationOutputAlias,
                crate::output::DescribeClusterOutput,
                crate::error::DescribeClusterError,
                crate::input::DescribeClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to describe.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the cluster to describe.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeFargateProfile`.
    ///
    /// <p>Returns descriptive information about an Fargate profile.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeFargateProfile<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_fargate_profile_input::Builder,
    }
    impl<C, M, R> DescribeFargateProfile<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeFargateProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeFargateProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeFargateProfileError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeFargateProfileInputOperationOutputAlias,
                crate::output::DescribeFargateProfileOutput,
                crate::error::DescribeFargateProfileError,
                crate::input::DescribeFargateProfileInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster associated with the Fargate profile.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster associated with the Fargate profile.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the Fargate profile to describe.</p>
        pub fn fargate_profile_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.fargate_profile_name(inp);
            self
        }
        /// <p>The name of the Fargate profile to describe.</p>
        pub fn set_fargate_profile_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_fargate_profile_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeIdentityProviderConfig`.
    ///
    /// <p>Returns descriptive information about an identity provider configuration.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeIdentityProviderConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_identity_provider_config_input::Builder,
    }
    impl<C, M, R> DescribeIdentityProviderConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeIdentityProviderConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeIdentityProviderConfigOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeIdentityProviderConfigError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeIdentityProviderConfigInputOperationOutputAlias,
                crate::output::DescribeIdentityProviderConfigOutput,
                crate::error::DescribeIdentityProviderConfigError,
                crate::input::DescribeIdentityProviderConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster name that the identity provider configuration is associated to.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The cluster name that the identity provider configuration is associated to.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>An object that represents an identity provider configuration.</p>
        pub fn identity_provider_config(
            mut self,
            inp: crate::model::IdentityProviderConfig,
        ) -> Self {
            self.inner = self.inner.identity_provider_config(inp);
            self
        }
        /// <p>An object that represents an identity provider configuration.</p>
        pub fn set_identity_provider_config(
            mut self,
            input: std::option::Option<crate::model::IdentityProviderConfig>,
        ) -> Self {
            self.inner = self.inner.set_identity_provider_config(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeNodegroup`.
    ///
    /// <p>Returns descriptive information about an Amazon EKS node group.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeNodegroup<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_nodegroup_input::Builder,
    }
    impl<C, M, R> DescribeNodegroup<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeNodegroup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNodegroupOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeNodegroupError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeNodegroupInputOperationOutputAlias,
                crate::output::DescribeNodegroupOutput,
                crate::error::DescribeNodegroupError,
                crate::input::DescribeNodegroupInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster associated with the node group.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster associated with the node group.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the node group to describe.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the node group to describe.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeUpdate`.
    ///
    /// <p>Returns descriptive information about an update against your Amazon EKS cluster or
    /// associated managed node group.</p>
    /// <p>When the status of the update is <code>Succeeded</code>, the update is complete. If an
    /// update fails, the status is <code>Failed</code>, and an error detail explains the reason
    /// for the failure.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeUpdate<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_update_input::Builder,
    }
    impl<C, M, R> DescribeUpdate<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeUpdate`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUpdateOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeUpdateError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeUpdateInputOperationOutputAlias,
                crate::output::DescribeUpdateOutput,
                crate::error::DescribeUpdateError,
                crate::input::DescribeUpdateInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster associated with the update.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster associated with the update.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The ID of the update to describe.</p>
        pub fn update_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.update_id(inp);
            self
        }
        /// <p>The ID of the update to describe.</p>
        pub fn set_update_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_update_id(input);
            self
        }
        /// <p>The name of the Amazon EKS node group associated with the update.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS node group associated with the update.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisassociateIdentityProviderConfig`.
    ///
    /// <p>Disassociates an identity provider configuration from a cluster. If you disassociate
    /// an identity provider from your cluster, users included in the provider can no longer
    /// access the cluster. However, you can still access the cluster with Amazon Web Services IAM
    /// users.</p>
    #[derive(std::fmt::Debug)]
    pub struct DisassociateIdentityProviderConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_identity_provider_config_input::Builder,
    }
    impl<C, M, R> DisassociateIdentityProviderConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DisassociateIdentityProviderConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateIdentityProviderConfigOutput,
            aws_smithy_http::result::SdkError<
                crate::error::DisassociateIdentityProviderConfigError,
            >,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateIdentityProviderConfigInputOperationOutputAlias,
                crate::output::DisassociateIdentityProviderConfigOutput,
                crate::error::DisassociateIdentityProviderConfigError,
                crate::input::DisassociateIdentityProviderConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster to disassociate an identity provider from.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster to disassociate an identity provider from.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>An object that represents an identity provider configuration.</p>
        pub fn identity_provider_config(
            mut self,
            inp: crate::model::IdentityProviderConfig,
        ) -> Self {
            self.inner = self.inner.identity_provider_config(inp);
            self
        }
        /// <p>An object that represents an identity provider configuration.</p>
        pub fn set_identity_provider_config(
            mut self,
            input: std::option::Option<crate::model::IdentityProviderConfig>,
        ) -> Self {
            self.inner = self.inner.set_identity_provider_config(input);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListAddons`.
    ///
    /// <p>Lists the available add-ons.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListAddons<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_addons_input::Builder,
    }
    impl<C, M, R> ListAddons<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListAddons`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAddonsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListAddonsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListAddonsInputOperationOutputAlias,
                crate::output::ListAddonsOutput,
                crate::error::ListAddonsError,
                crate::input::ListAddonsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The maximum number of add-on results returned by <code>ListAddonsRequest</code> in
        /// paginated output. When you use this parameter, <code>ListAddonsRequest</code> returns
        /// only <code>maxResults</code> results in a single page along with a
        /// <code>nextToken</code> response element. You can see the remaining results of the
        /// initial request by sending another <code>ListAddonsRequest</code> request with the
        /// returned <code>nextToken</code> value. This value can be between 1 and
        /// 100. If you don't use this parameter, <code>ListAddonsRequest</code>
        /// returns up to 100 results and a <code>nextToken</code> value, if
        /// applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of add-on results returned by <code>ListAddonsRequest</code> in
        /// paginated output. When you use this parameter, <code>ListAddonsRequest</code> returns
        /// only <code>maxResults</code> results in a single page along with a
        /// <code>nextToken</code> response element. You can see the remaining results of the
        /// initial request by sending another <code>ListAddonsRequest</code> request with the
        /// returned <code>nextToken</code> value. This value can be between 1 and
        /// 100. If you don't use this parameter, <code>ListAddonsRequest</code>
        /// returns up to 100 results and a <code>nextToken</code> value, if
        /// applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListAddonsRequest</code> where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListAddonsRequest</code> where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListClusters`.
    ///
    /// <p>Lists the Amazon EKS clusters in your Amazon Web Services account in the specified Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListClusters<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_clusters_input::Builder,
    }
    impl<C, M, R> ListClusters<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListClusters`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClustersOutput,
            aws_smithy_http::result::SdkError<crate::error::ListClustersError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListClustersInputOperationOutputAlias,
                crate::output::ListClustersOutput,
                crate::error::ListClustersError,
                crate::input::ListClustersInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The maximum number of cluster results returned by <code>ListClusters</code> in
        /// paginated output. When you use this parameter, <code>ListClusters</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListClusters</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListClusters</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of cluster results returned by <code>ListClusters</code> in
        /// paginated output. When you use this parameter, <code>ListClusters</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListClusters</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListClusters</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListClusters</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListClusters</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// Appends an item to `include`.
        ///
        /// To override the contents of this collection use [`set_include`](Self::set_include).
        ///
        /// <p>Indicates whether connected clusters are included in the returned list. Default value is 'ALL'.</p>
        pub fn include(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.include(inp);
            self
        }
        /// <p>Indicates whether connected clusters are included in the returned list. Default value is 'ALL'.</p>
        pub fn set_include(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_include(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListFargateProfiles`.
    ///
    /// <p>Lists the Fargate profiles associated with the specified cluster in your Amazon Web Services
    /// account in the specified Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListFargateProfiles<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_fargate_profiles_input::Builder,
    }
    impl<C, M, R> ListFargateProfiles<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListFargateProfiles`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListFargateProfilesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListFargateProfilesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListFargateProfilesInputOperationOutputAlias,
                crate::output::ListFargateProfilesOutput,
                crate::error::ListFargateProfilesError,
                crate::input::ListFargateProfilesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster that you would like to list Fargate profiles in.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster that you would like to list Fargate profiles in.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The maximum number of Fargate profile results returned by
        /// <code>ListFargateProfiles</code> in paginated output. When you use this parameter,
        /// <code>ListFargateProfiles</code> returns only <code>maxResults</code> results in a
        /// single page along with a <code>nextToken</code> response element. You can see the
        /// remaining results of the initial request by sending another
        /// <code>ListFargateProfiles</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListFargateProfiles</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of Fargate profile results returned by
        /// <code>ListFargateProfiles</code> in paginated output. When you use this parameter,
        /// <code>ListFargateProfiles</code> returns only <code>maxResults</code> results in a
        /// single page along with a <code>nextToken</code> response element. You can see the
        /// remaining results of the initial request by sending another
        /// <code>ListFargateProfiles</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListFargateProfiles</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListFargateProfiles</code> request where <code>maxResults</code> was used and
        /// the results exceeded the value of that parameter. Pagination continues from the end of
        /// the previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListFargateProfiles</code> request where <code>maxResults</code> was used and
        /// the results exceeded the value of that parameter. Pagination continues from the end of
        /// the previous results that returned the <code>nextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListIdentityProviderConfigs`.
    ///
    /// <p>A list of identity provider configurations.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListIdentityProviderConfigs<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_identity_provider_configs_input::Builder,
    }
    impl<C, M, R> ListIdentityProviderConfigs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListIdentityProviderConfigs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListIdentityProviderConfigsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListIdentityProviderConfigsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListIdentityProviderConfigsInputOperationOutputAlias,
                crate::output::ListIdentityProviderConfigsOutput,
                crate::error::ListIdentityProviderConfigsError,
                crate::input::ListIdentityProviderConfigsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster name that you want to list identity provider configurations for.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The cluster name that you want to list identity provider configurations for.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The maximum number of identity provider configurations returned by
        /// <code>ListIdentityProviderConfigs</code> in paginated output. When you use this
        /// parameter, <code>ListIdentityProviderConfigs</code> returns only <code>maxResults</code>
        /// results in a single page along with a <code>nextToken</code> response element. You can
        /// see the remaining results of the initial request by sending another
        /// <code>ListIdentityProviderConfigs</code> request with the returned
        /// <code>nextToken</code> value. This value can be between 1 and
        /// 100. If you don't use this parameter,
        /// <code>ListIdentityProviderConfigs</code> returns up to 100 results
        /// and a <code>nextToken</code> value, if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of identity provider configurations returned by
        /// <code>ListIdentityProviderConfigs</code> in paginated output. When you use this
        /// parameter, <code>ListIdentityProviderConfigs</code> returns only <code>maxResults</code>
        /// results in a single page along with a <code>nextToken</code> response element. You can
        /// see the remaining results of the initial request by sending another
        /// <code>ListIdentityProviderConfigs</code> request with the returned
        /// <code>nextToken</code> value. This value can be between 1 and
        /// 100. If you don't use this parameter,
        /// <code>ListIdentityProviderConfigs</code> returns up to 100 results
        /// and a <code>nextToken</code> value, if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>IdentityProviderConfigsRequest</code> where <code>maxResults</code> was used
        /// and the results exceeded the value of that parameter. Pagination continues from the end
        /// of the previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>IdentityProviderConfigsRequest</code> where <code>maxResults</code> was used
        /// and the results exceeded the value of that parameter. Pagination continues from the end
        /// of the previous results that returned the <code>nextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListNodegroups`.
    ///
    /// <p>Lists the Amazon EKS managed node groups associated with the specified cluster in your
    /// Amazon Web Services account in the specified Region. Self-managed node groups are not listed.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListNodegroups<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_nodegroups_input::Builder,
    }
    impl<C, M, R> ListNodegroups<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListNodegroups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListNodegroupsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListNodegroupsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListNodegroupsInputOperationOutputAlias,
                crate::output::ListNodegroupsOutput,
                crate::error::ListNodegroupsError,
                crate::input::ListNodegroupsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster that you would like to list node groups in.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster that you would like to list node groups in.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The maximum number of node group results returned by <code>ListNodegroups</code> in
        /// paginated output. When you use this parameter, <code>ListNodegroups</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListNodegroups</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListNodegroups</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of node group results returned by <code>ListNodegroups</code> in
        /// paginated output. When you use this parameter, <code>ListNodegroups</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListNodegroups</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't
        /// use this parameter, <code>ListNodegroups</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListNodegroups</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListNodegroups</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>List the tags for an Amazon EKS resource.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the
        /// supported resources are Amazon EKS clusters and managed node groups.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the
        /// supported resources are Amazon EKS clusters and managed node groups.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListUpdates`.
    ///
    /// <p>Lists the updates associated with an Amazon EKS cluster or managed node group in your Amazon Web Services
    /// account, in the specified Region.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListUpdates<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_updates_input::Builder,
    }
    impl<C, M, R> ListUpdates<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListUpdates`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUpdatesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListUpdatesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListUpdatesInputOperationOutputAlias,
                crate::output::ListUpdatesOutput,
                crate::error::ListUpdatesError,
                crate::input::ListUpdatesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster to list updates for.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster to list updates for.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The name of the Amazon EKS managed node group to list updates for.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS managed node group to list updates for.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
        /// <p>The names of the installed add-ons that have available updates.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The names of the installed add-ons that have available updates.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListUpdates</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListUpdates</code> request where <code>maxResults</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of update results returned by <code>ListUpdates</code> in paginated
        /// output. When you use this parameter, <code>ListUpdates</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListUpdates</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListUpdates</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of update results returned by <code>ListUpdates</code> in paginated
        /// output. When you use this parameter, <code>ListUpdates</code> returns only
        /// <code>maxResults</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListUpdates</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListUpdates</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RegisterCluster`.
    ///
    /// <p>Connects a Kubernetes cluster to the Amazon EKS control plane. </p>
    /// <p>Any Kubernetes cluster can be connected to the Amazon EKS control plane to view current information about the cluster and its nodes.
    /// </p>
    /// <p>Cluster connection requires two steps. First, send a <code>
    /// <a>RegisterClusterRequest</a>
    /// </code> to add it to the Amazon EKS control plane.</p>
    /// <p>Second, a <a href="https://amazon-eks.s3.us-west-2.amazonaws.com/eks-connector/manifests/eks-connector/latest/eks-connector.yaml">Manifest</a> containing the <code>activationID</code> and <code>activationCode</code> must be applied to the Kubernetes cluster through it's native provider to provide visibility.</p>
    ///
    /// <p>After the Manifest is updated and applied, then the connected cluster is visible to the Amazon EKS control plane. If the Manifest is not applied within a set amount of time,
    /// then the connected cluster will no longer be visible and must be deregistered. See <a>DeregisterCluster</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct RegisterCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_cluster_input::Builder,
    }
    impl<C, M, R> RegisterCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RegisterCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::RegisterClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterClusterInputOperationOutputAlias,
                crate::output::RegisterClusterOutput,
                crate::error::RegisterClusterError,
                crate::input::RegisterClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>Define a unique name for this cluster within your AWS account.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>Define a unique name for this cluster within your AWS account.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.</p>
        pub fn connector_config(mut self, inp: crate::model::ConnectorConfigRequest) -> Self {
            self.inner = self.inner.connector_config(inp);
            self
        }
        /// <p>The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.</p>
        pub fn set_connector_config(
            mut self,
            input: std::option::Option<crate::model::ConnectorConfigRequest>,
        ) -> Self {
            self.inner = self.inner.set_connector_config(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Associates the specified tags to a resource with the specified
    /// <code>resourceArn</code>. If existing tags on a resource are not specified in the
    /// request parameters, they are not changed. When a resource is deleted, the tags
    /// associated with that resource are deleted as well. Tags that you create for Amazon EKS
    /// resources do not propagate to any other resources associated with the cluster. For
    /// example, if you tag a cluster with this operation, that tag does not automatically
    /// propagate to the subnets and nodes associated with the cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources
        /// are Amazon EKS clusters and managed node groups.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources
        /// are Amazon EKS clusters and managed node groups.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Deletes specified tags from a resource.</p>
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported
        /// resources are Amazon EKS clusters and managed node groups.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported
        /// resources are Amazon EKS clusters and managed node groups.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>The keys of the tags to be removed.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        /// <p>The keys of the tags to be removed.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateAddon`.
    ///
    /// <p>Updates an Amazon EKS add-on.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateAddon<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_addon_input::Builder,
    }
    impl<C, M, R> UpdateAddon<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateAddon`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateAddonOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateAddonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateAddonInputOperationOutputAlias,
                crate::output::UpdateAddonOutput,
                crate::error::UpdateAddonError,
                crate::input::UpdateAddonInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn addon_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_name(inp);
            self
        }
        /// <p>The name of the add-on. The name must match one of the names returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html">
        /// <code>ListAddons</code>
        /// </a>.</p>
        pub fn set_addon_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_addon_name(input);
            self
        }
        /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn addon_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.addon_version(inp);
            self
        }
        /// <p>The version of the add-on. The version must match one of the versions returned by <a href="https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html">
        /// <code>DescribeAddonVersions</code>
        /// </a>.</p>
        pub fn set_addon_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_addon_version(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
        /// permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
        /// <note>
        /// <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
        /// your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
        /// IAM roles for service accounts on your cluster</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        /// </note>
        pub fn service_account_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_account_role_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the
        /// permissions assigned to the node IAM role. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p>
        /// <note>
        /// <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for
        /// your cluster. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html">Enabling
        /// IAM roles for service accounts on your cluster</a> in the
        /// <i>Amazon EKS User Guide</i>.</p>
        /// </note>
        pub fn set_service_account_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_account_role_arn(input);
            self
        }
        /// <p>How to resolve parameter value conflicts when applying the new version of the add-on
        /// to the cluster.</p>
        pub fn resolve_conflicts(mut self, inp: crate::model::ResolveConflicts) -> Self {
            self.inner = self.inner.resolve_conflicts(inp);
            self
        }
        /// <p>How to resolve parameter value conflicts when applying the new version of the add-on
        /// to the cluster.</p>
        pub fn set_resolve_conflicts(
            mut self,
            input: std::option::Option<crate::model::ResolveConflicts>,
        ) -> Self {
            self.inner = self.inner.set_resolve_conflicts(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateClusterConfig`.
    ///
    /// <p>Updates an Amazon EKS cluster configuration. Your cluster continues to function during the
    /// update. The response output includes an update ID that you can use to track the status
    /// of your cluster update with the <a>DescribeUpdate</a> API operation.</p>
    /// <p>You can use this API operation to enable or disable exporting the Kubernetes control
    /// plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't
    /// exported to CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS
    /// Cluster Control Plane Logs</a> in the
    /// <i>
    /// <i>Amazon EKS User Guide</i>
    /// </i>.</p>
    /// <note>
    /// <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
    /// control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p>
    /// </note>
    /// <p>You can also use this API operation to enable or disable public and private access to
    /// your cluster's Kubernetes API server endpoint. By default, public access is enabled, and
    /// private access is disabled. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html">Amazon EKS cluster
    /// endpoint access control</a> in the <i>
    /// <i>Amazon EKS User Guide</i>
    /// </i>. </p>
    /// <important>
    /// <p>You can't update the subnets or security group IDs for an existing cluster.</p>
    /// </important>
    /// <p>Cluster updates are asynchronous, and they should finish within a few minutes. During
    /// an update, the cluster status moves to <code>UPDATING</code> (this status transition is
    /// eventually consistent). When the update is complete (either <code>Failed</code> or
    /// <code>Successful</code>), the cluster status moves to <code>Active</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateClusterConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_cluster_config_input::Builder,
    }
    impl<C, M, R> UpdateClusterConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateClusterConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateClusterConfigOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateClusterConfigError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateClusterConfigInputOperationOutputAlias,
                crate::output::UpdateClusterConfigOutput,
                crate::error::UpdateClusterConfigError,
                crate::input::UpdateClusterConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster to update.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster to update.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>An object representing the VPC configuration to use for an Amazon EKS cluster.</p>
        pub fn resources_vpc_config(mut self, inp: crate::model::VpcConfigRequest) -> Self {
            self.inner = self.inner.resources_vpc_config(inp);
            self
        }
        /// <p>An object representing the VPC configuration to use for an Amazon EKS cluster.</p>
        pub fn set_resources_vpc_config(
            mut self,
            input: std::option::Option<crate::model::VpcConfigRequest>,
        ) -> Self {
            self.inner = self.inner.set_resources_vpc_config(input);
            self
        }
        /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
        /// CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS cluster control plane logs</a> in the
        /// <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        /// <note>
        /// <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
        /// control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p>
        /// </note>
        pub fn logging(mut self, inp: crate::model::Logging) -> Self {
            self.inner = self.inner.logging(inp);
            self
        }
        /// <p>Enable or disable exporting the Kubernetes control plane logs for your cluster to
        /// CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS cluster control plane logs</a> in the
        /// <i>
        /// <i>Amazon EKS User Guide</i>
        /// </i>.</p>
        /// <note>
        /// <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported
        /// control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p>
        /// </note>
        pub fn set_logging(mut self, input: std::option::Option<crate::model::Logging>) -> Self {
            self.inner = self.inner.set_logging(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateClusterVersion`.
    ///
    /// <p>Updates an Amazon EKS cluster to the specified Kubernetes version. Your cluster continues
    /// to function during the update. The response output includes an update ID that you can
    /// use to track the status of your cluster update with the <a>DescribeUpdate</a>
    /// API operation.</p>
    /// <p>Cluster updates are asynchronous, and they should finish within a few minutes. During
    /// an update, the cluster status moves to <code>UPDATING</code> (this status transition is
    /// eventually consistent). When the update is complete (either <code>Failed</code> or
    /// <code>Successful</code>), the cluster status moves to <code>Active</code>.</p>
    /// <p>If your cluster has managed node groups attached to it, all of your node groups’
    /// Kubernetes versions must match the cluster’s Kubernetes version in order to update the
    /// cluster to a new Kubernetes version.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateClusterVersion<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_cluster_version_input::Builder,
    }
    impl<C, M, R> UpdateClusterVersion<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateClusterVersion`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateClusterVersionOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateClusterVersionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateClusterVersionInputOperationOutputAlias,
                crate::output::UpdateClusterVersionOutput,
                crate::error::UpdateClusterVersionError,
                crate::input::UpdateClusterVersionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster to update.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster to update.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The desired Kubernetes version following a successful update.</p>
        pub fn version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(inp);
            self
        }
        /// <p>The desired Kubernetes version following a successful update.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateNodegroupConfig`.
    ///
    /// <p>Updates an Amazon EKS managed node group configuration. Your node group continues to
    /// function during the update. The response output includes an update ID that you can use
    /// to track the status of your node group update with the <a>DescribeUpdate</a>
    /// API operation. Currently you can update the Kubernetes labels for a node group or the
    /// scaling configuration.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateNodegroupConfig<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_nodegroup_config_input::Builder,
    }
    impl<C, M, R> UpdateNodegroupConfig<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateNodegroupConfig`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateNodegroupConfigOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateNodegroupConfigError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateNodegroupConfigInputOperationOutputAlias,
                crate::output::UpdateNodegroupConfigOutput,
                crate::error::UpdateNodegroupConfigError,
                crate::input::UpdateNodegroupConfigInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster that the managed node group resides in.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the managed node group to update.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the managed node group to update.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
        /// <p>The Kubernetes labels to be applied to the nodes in the node group after the
        /// update.</p>
        pub fn labels(mut self, inp: crate::model::UpdateLabelsPayload) -> Self {
            self.inner = self.inner.labels(inp);
            self
        }
        /// <p>The Kubernetes labels to be applied to the nodes in the node group after the
        /// update.</p>
        pub fn set_labels(
            mut self,
            input: std::option::Option<crate::model::UpdateLabelsPayload>,
        ) -> Self {
            self.inner = self.inner.set_labels(input);
            self
        }
        /// <p>The Kubernetes taints to be applied to the nodes in the node group after the
        /// update.</p>
        pub fn taints(mut self, inp: crate::model::UpdateTaintsPayload) -> Self {
            self.inner = self.inner.taints(inp);
            self
        }
        /// <p>The Kubernetes taints to be applied to the nodes in the node group after the
        /// update.</p>
        pub fn set_taints(
            mut self,
            input: std::option::Option<crate::model::UpdateTaintsPayload>,
        ) -> Self {
            self.inner = self.inner.set_taints(input);
            self
        }
        /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
        pub fn scaling_config(mut self, inp: crate::model::NodegroupScalingConfig) -> Self {
            self.inner = self.inner.scaling_config(inp);
            self
        }
        /// <p>The scaling configuration details for the Auto Scaling group after the update.</p>
        pub fn set_scaling_config(
            mut self,
            input: std::option::Option<crate::model::NodegroupScalingConfig>,
        ) -> Self {
            self.inner = self.inner.set_scaling_config(input);
            self
        }
        /// <p>The node group update configuration.</p>
        pub fn update_config(mut self, inp: crate::model::NodegroupUpdateConfig) -> Self {
            self.inner = self.inner.update_config(inp);
            self
        }
        /// <p>The node group update configuration.</p>
        pub fn set_update_config(
            mut self,
            input: std::option::Option<crate::model::NodegroupUpdateConfig>,
        ) -> Self {
            self.inner = self.inner.set_update_config(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateNodegroupVersion`.
    ///
    /// <p>Updates the Kubernetes version or AMI version of an Amazon EKS managed node group.</p>
    /// <p>You can update a node group using a launch template only if the node group was
    /// originally deployed with a launch template. If you need to update a custom AMI in a node
    /// group that was deployed with a launch template, then update your custom AMI, specify the
    /// new ID in a new version of the launch template, and then update the node group to the
    /// new version of the launch template.</p>
    /// <p>If you update without a launch template, then you can update to the latest available
    /// AMI version of a node group's current Kubernetes version by not specifying a Kubernetes
    /// version in the request. You can update to the latest AMI version of your cluster's
    /// current Kubernetes version by specifying your cluster's Kubernetes version in the
    /// request. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS
    /// optimized Amazon Linux 2 AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p>
    /// <p>You cannot roll back a node group to an earlier Kubernetes version or AMI
    /// version.</p>
    /// <p>When a node in a managed node group is terminated due to a scaling action or update,
    /// the pods in that node are drained first. Amazon EKS attempts to drain the nodes gracefully
    /// and will fail if it is unable to do so. You can <code>force</code> the update if Amazon EKS
    /// is unable to drain the nodes as a result of a pod disruption budget issue.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateNodegroupVersion<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_nodegroup_version_input::Builder,
    }
    impl<C, M, R> UpdateNodegroupVersion<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateNodegroupVersion`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateNodegroupVersionOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateNodegroupVersionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateNodegroupVersionInputOperationOutputAlias,
                crate::output::UpdateNodegroupVersionOutput,
                crate::error::UpdateNodegroupVersionError,
                crate::input::UpdateNodegroupVersionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input.make_operation(&self.handle.conf).map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon EKS cluster that is associated with the managed node group to
        /// update.</p>
        pub fn cluster_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(inp);
            self
        }
        /// <p>The name of the Amazon EKS cluster that is associated with the managed node group to
        /// update.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>The name of the managed node group to update.</p>
        pub fn nodegroup_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.nodegroup_name(inp);
            self
        }
        /// <p>The name of the managed node group to update.</p>
        pub fn set_nodegroup_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_nodegroup_name(input);
            self
        }
        /// <p>The Kubernetes version to update to. If no version is specified, then the Kubernetes
        /// version of the node group does not change. You can specify the Kubernetes version of the
        /// cluster to update the node group to the latest AMI version of the cluster's Kubernetes
        /// version. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
        /// <code>version</code>, or the node group  update will fail.
        /// For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.version(inp);
            self
        }
        /// <p>The Kubernetes version to update to. If no version is specified, then the Kubernetes
        /// version of the node group does not change. You can specify the Kubernetes version of the
        /// cluster to update the node group to the latest AMI version of the cluster's Kubernetes
        /// version. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
        /// <code>version</code>, or the node group  update will fail.
        /// For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_version(input);
            self
        }
        /// <p>The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the
        /// latest available AMI version for the node group's Kubernetes version is used. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS optimized Amazon Linux 2 AMI versions </a> in the
        /// <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
        /// <code>releaseVersion</code>, or the node group  update will fail.
        /// For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn release_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.release_version(inp);
            self
        }
        /// <p>The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the
        /// latest available AMI version for the node group's Kubernetes version is used. For more
        /// information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html">Amazon EKS optimized Amazon Linux 2 AMI versions </a> in the
        /// <i>Amazon EKS User Guide</i>. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify
        /// <code>releaseVersion</code>, or the node group  update will fail.
        /// For more information about using launch templates with Amazon EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch template support</a> in the Amazon EKS User Guide.</p>
        pub fn set_release_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_release_version(input);
            self
        }
        /// <p>An object representing a node group's launch template specification. You can only
        /// update a node group using a launch template if the node group was originally deployed
        /// with a launch template.</p>
        pub fn launch_template(mut self, inp: crate::model::LaunchTemplateSpecification) -> Self {
            self.inner = self.inner.launch_template(inp);
            self
        }
        /// <p>An object representing a node group's launch template specification. You can only
        /// update a node group using a launch template if the node group was originally deployed
        /// with a launch template.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplateSpecification>,
        ) -> Self {
            self.inner = self.inner.set_launch_template(input);
            self
        }
        /// <p>Force the update if the existing node group's pods are unable to be drained due to a
        /// pod disruption budget issue. If an update fails because pods could not be drained, you
        /// can force the update after it fails to terminate the old node whether or not any pods
        /// are running on the node.</p>
        pub fn force(mut self, inp: bool) -> Self {
            self.inner = self.inner.force(inp);
            self
        }
        /// <p>Force the update if the existing node group's pods are unable to be drained due to a
        /// pod disruption budget issue. If an update fails because pods could not be drained, you
        /// can force the update after it fails to terminate the old node whether or not any pods
        /// are running on the node.</p>
        pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_request_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_request_token(inp);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn set_client_request_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_request_token(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
