// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterCluster`](crate::client::fluent_builders::RegisterCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::RegisterCluster::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::RegisterCluster::set_name): <p>Define a unique name for this cluster for your Region.</p>
    ///   - [`connector_config(ConnectorConfigRequest)`](crate::client::fluent_builders::RegisterCluster::connector_config) / [`set_connector_config(Option<ConnectorConfigRequest>)`](crate::client::fluent_builders::RegisterCluster::set_connector_config): <p>The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::RegisterCluster::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::RegisterCluster::set_client_request_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::RegisterCluster::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::RegisterCluster::set_tags): <p>The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Cluster tags do not propagate to any other resources associated with the cluster.</p>
    /// - On success, responds with [`RegisterClusterOutput`](crate::output::RegisterClusterOutput) with field(s):
    ///   - [`cluster(Option<Cluster>)`](crate::output::RegisterClusterOutput::cluster): <p>An object representing an Amazon EKS cluster.</p>
    /// - On failure, responds with [`SdkError<RegisterClusterError>`](crate::error::RegisterClusterError)
    pub fn register_cluster(&self) -> crate::client::fluent_builders::RegisterCluster {
        crate::client::fluent_builders::RegisterCluster::new(self.handle.clone())
    }
}
