// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_schedule_action_create_result_correct_errors(
    mut builder: crate::types::builders::BatchScheduleActionCreateResultBuilder,
) -> crate::types::builders::BatchScheduleActionCreateResultBuilder {
    if builder.schedule_actions.is_none() {
        builder.schedule_actions = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_schedule_action_delete_result_correct_errors(
    mut builder: crate::types::builders::BatchScheduleActionDeleteResultBuilder,
) -> crate::types::builders::BatchScheduleActionDeleteResultBuilder {
    if builder.schedule_actions.is_none() {
        builder.schedule_actions = Some(Default::default())
    }
    builder
}

pub(crate) fn encoder_settings_correct_errors(
    mut builder: crate::types::builders::EncoderSettingsBuilder,
) -> crate::types::builders::EncoderSettingsBuilder {
    if builder.audio_descriptions.is_none() {
        builder.audio_descriptions = Some(Default::default())
    }
    if builder.output_groups.is_none() {
        builder.output_groups = Some(Default::default())
    }
    if builder.timecode_config.is_none() {
        builder.timecode_config = {
            let builder = crate::types::builders::TimecodeConfigBuilder::default();
            Some(crate::serde_util::timecode_config_correct_errors(builder).build())
        }
    }
    if builder.video_descriptions.is_none() {
        builder.video_descriptions = Some(Default::default())
    }
    builder
}

pub(crate) fn multiplex_program_settings_correct_errors(
    mut builder: crate::types::builders::MultiplexProgramSettingsBuilder,
) -> crate::types::builders::MultiplexProgramSettingsBuilder {
    if builder.program_number.is_none() {
        builder.program_number = Some(Default::default())
    }
    builder
}

pub(crate) fn multiplex_settings_correct_errors(
    mut builder: crate::types::builders::MultiplexSettingsBuilder,
) -> crate::types::builders::MultiplexSettingsBuilder {
    if builder.transport_stream_bitrate.is_none() {
        builder.transport_stream_bitrate = Some(Default::default())
    }
    if builder.transport_stream_id.is_none() {
        builder.transport_stream_id = Some(Default::default())
    }
    builder
}

pub(crate) fn motion_graphics_configuration_correct_errors(
    mut builder: crate::types::builders::MotionGraphicsConfigurationBuilder,
) -> crate::types::builders::MotionGraphicsConfigurationBuilder {
    if builder.motion_graphics_settings.is_none() {
        builder.motion_graphics_settings = {
            let builder = crate::types::builders::MotionGraphicsSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn multiplex_program_service_descriptor_correct_errors(
    mut builder: crate::types::builders::MultiplexProgramServiceDescriptorBuilder,
) -> crate::types::builders::MultiplexProgramServiceDescriptorBuilder {
    if builder.provider_name.is_none() {
        builder.provider_name = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_action_correct_errors(
    mut builder: crate::types::builders::ScheduleActionBuilder,
) -> crate::types::builders::ScheduleActionBuilder {
    if builder.action_name.is_none() {
        builder.action_name = Some(Default::default())
    }
    if builder.schedule_action_settings.is_none() {
        builder.schedule_action_settings = {
            let builder = crate::types::builders::ScheduleActionSettingsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.schedule_action_start_settings.is_none() {
        builder.schedule_action_start_settings = {
            let builder = crate::types::builders::ScheduleActionStartSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn thumbnail_configuration_correct_errors(
    mut builder: crate::types::builders::ThumbnailConfigurationBuilder,
) -> crate::types::builders::ThumbnailConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ThumbnailState>().ok()
    }
    builder
}

pub(crate) fn timecode_config_correct_errors(
    mut builder: crate::types::builders::TimecodeConfigBuilder,
) -> crate::types::builders::TimecodeConfigBuilder {
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::TimecodeConfigSource>().ok()
    }
    builder
}

pub(crate) fn audio_description_correct_errors(
    mut builder: crate::types::builders::AudioDescriptionBuilder,
) -> crate::types::builders::AudioDescriptionBuilder {
    if builder.audio_selector_name.is_none() {
        builder.audio_selector_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn automatic_input_failover_settings_correct_errors(
    mut builder: crate::types::builders::AutomaticInputFailoverSettingsBuilder,
) -> crate::types::builders::AutomaticInputFailoverSettingsBuilder {
    if builder.secondary_input_id.is_none() {
        builder.secondary_input_id = Some(Default::default())
    }
    builder
}

pub(crate) fn caption_description_correct_errors(
    mut builder: crate::types::builders::CaptionDescriptionBuilder,
) -> crate::types::builders::CaptionDescriptionBuilder {
    if builder.caption_selector_name.is_none() {
        builder.caption_selector_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn input_location_correct_errors(
    mut builder: crate::types::builders::InputLocationBuilder,
) -> crate::types::builders::InputLocationBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn output_group_correct_errors(mut builder: crate::types::builders::OutputGroupBuilder) -> crate::types::builders::OutputGroupBuilder {
    if builder.output_group_settings.is_none() {
        builder.output_group_settings = {
            let builder = crate::types::builders::OutputGroupSettingsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn video_description_correct_errors(
    mut builder: crate::types::builders::VideoDescriptionBuilder,
) -> crate::types::builders::VideoDescriptionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn esam_correct_errors(mut builder: crate::types::builders::EsamBuilder) -> crate::types::builders::EsamBuilder {
    if builder.acquisition_point_id.is_none() {
        builder.acquisition_point_id = Some(Default::default())
    }
    if builder.pois_endpoint.is_none() {
        builder.pois_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn fixed_mode_schedule_action_start_settings_correct_errors(
    mut builder: crate::types::builders::FixedModeScheduleActionStartSettingsBuilder,
) -> crate::types::builders::FixedModeScheduleActionStartSettingsBuilder {
    if builder.time.is_none() {
        builder.time = Some(Default::default())
    }
    builder
}

pub(crate) fn follow_mode_schedule_action_start_settings_correct_errors(
    mut builder: crate::types::builders::FollowModeScheduleActionStartSettingsBuilder,
) -> crate::types::builders::FollowModeScheduleActionStartSettingsBuilder {
    if builder.follow_point.is_none() {
        builder.follow_point = "no value was set".parse::<crate::types::FollowPoint>().ok()
    }
    if builder.reference_action_name.is_none() {
        builder.reference_action_name = Some(Default::default())
    }
    builder
}

pub(crate) fn hls_timed_metadata_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::HlsTimedMetadataScheduleActionSettingsBuilder,
) -> crate::types::builders::HlsTimedMetadataScheduleActionSettingsBuilder {
    if builder.id3.is_none() {
        builder.id3 = Some(Default::default())
    }
    builder
}

pub(crate) fn input_switch_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::InputSwitchScheduleActionSettingsBuilder,
) -> crate::types::builders::InputSwitchScheduleActionSettingsBuilder {
    if builder.input_attachment_name_reference.is_none() {
        builder.input_attachment_name_reference = Some(Default::default())
    }
    builder
}

pub(crate) fn remix_settings_correct_errors(
    mut builder: crate::types::builders::RemixSettingsBuilder,
) -> crate::types::builders::RemixSettingsBuilder {
    if builder.channel_mappings.is_none() {
        builder.channel_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn scte35_input_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::Scte35InputScheduleActionSettingsBuilder,
) -> crate::types::builders::Scte35InputScheduleActionSettingsBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::Scte35InputMode>().ok()
    }
    builder
}

pub(crate) fn scte35_return_to_network_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::Scte35ReturnToNetworkScheduleActionSettingsBuilder,
) -> crate::types::builders::Scte35ReturnToNetworkScheduleActionSettingsBuilder {
    if builder.splice_event_id.is_none() {
        builder.splice_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn scte35_splice_insert_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::Scte35SpliceInsertScheduleActionSettingsBuilder,
) -> crate::types::builders::Scte35SpliceInsertScheduleActionSettingsBuilder {
    if builder.splice_event_id.is_none() {
        builder.splice_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn scte35_time_signal_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::Scte35TimeSignalScheduleActionSettingsBuilder,
) -> crate::types::builders::Scte35TimeSignalScheduleActionSettingsBuilder {
    if builder.scte35_descriptors.is_none() {
        builder.scte35_descriptors = Some(Default::default())
    }
    builder
}

pub(crate) fn static_image_activate_schedule_action_settings_correct_errors(
    mut builder: crate::types::builders::StaticImageActivateScheduleActionSettingsBuilder,
) -> crate::types::builders::StaticImageActivateScheduleActionSettingsBuilder {
    if builder.image.is_none() {
        builder.image = {
            let builder = crate::types::builders::InputLocationBuilder::default();
            Some(crate::serde_util::input_location_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn archive_group_settings_correct_errors(
    mut builder: crate::types::builders::ArchiveGroupSettingsBuilder,
) -> crate::types::builders::ArchiveGroupSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn audio_selector_correct_errors(
    mut builder: crate::types::builders::AudioSelectorBuilder,
) -> crate::types::builders::AudioSelectorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn caption_selector_correct_errors(
    mut builder: crate::types::builders::CaptionSelectorBuilder,
) -> crate::types::builders::CaptionSelectorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn frame_capture_group_settings_correct_errors(
    mut builder: crate::types::builders::FrameCaptureGroupSettingsBuilder,
) -> crate::types::builders::FrameCaptureGroupSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn h265_settings_correct_errors(mut builder: crate::types::builders::H265SettingsBuilder) -> crate::types::builders::H265SettingsBuilder {
    if builder.framerate_denominator.is_none() {
        builder.framerate_denominator = Some(Default::default())
    }
    if builder.framerate_numerator.is_none() {
        builder.framerate_numerator = Some(Default::default())
    }
    builder
}

pub(crate) fn hls_group_settings_correct_errors(
    mut builder: crate::types::builders::HlsGroupSettingsBuilder,
) -> crate::types::builders::HlsGroupSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn input_clipping_settings_correct_errors(
    mut builder: crate::types::builders::InputClippingSettingsBuilder,
) -> crate::types::builders::InputClippingSettingsBuilder {
    if builder.input_timecode_source.is_none() {
        builder.input_timecode_source = "no value was set".parse::<crate::types::InputTimecodeSource>().ok()
    }
    builder
}

pub(crate) fn media_package_group_settings_correct_errors(
    mut builder: crate::types::builders::MediaPackageGroupSettingsBuilder,
) -> crate::types::builders::MediaPackageGroupSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn mpeg2_settings_correct_errors(
    mut builder: crate::types::builders::Mpeg2SettingsBuilder,
) -> crate::types::builders::Mpeg2SettingsBuilder {
    if builder.framerate_denominator.is_none() {
        builder.framerate_denominator = Some(Default::default())
    }
    if builder.framerate_numerator.is_none() {
        builder.framerate_numerator = Some(Default::default())
    }
    builder
}

pub(crate) fn ms_smooth_group_settings_correct_errors(
    mut builder: crate::types::builders::MsSmoothGroupSettingsBuilder,
) -> crate::types::builders::MsSmoothGroupSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn output_correct_errors(mut builder: crate::types::builders::OutputBuilder) -> crate::types::builders::OutputBuilder {
    if builder.output_settings.is_none() {
        builder.output_settings = {
            let builder = crate::types::builders::OutputSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn audio_channel_mapping_correct_errors(
    mut builder: crate::types::builders::AudioChannelMappingBuilder,
) -> crate::types::builders::AudioChannelMappingBuilder {
    if builder.input_channel_levels.is_none() {
        builder.input_channel_levels = Some(Default::default())
    }
    if builder.output_channel.is_none() {
        builder.output_channel = Some(Default::default())
    }
    builder
}

pub(crate) fn nielsen_cbet_correct_errors(mut builder: crate::types::builders::NielsenCbetBuilder) -> crate::types::builders::NielsenCbetBuilder {
    if builder.cbet_check_digit_string.is_none() {
        builder.cbet_check_digit_string = Some(Default::default())
    }
    if builder.cbet_stepaside.is_none() {
        builder.cbet_stepaside = "no value was set".parse::<crate::types::NielsenWatermarksCbetStepaside>().ok()
    }
    if builder.csid.is_none() {
        builder.csid = Some(Default::default())
    }
    builder
}

pub(crate) fn nielsen_naes_ii_nw_correct_errors(
    mut builder: crate::types::builders::NielsenNaesIiNwBuilder,
) -> crate::types::builders::NielsenNaesIiNwBuilder {
    if builder.check_digit_string.is_none() {
        builder.check_digit_string = Some(Default::default())
    }
    if builder.sid.is_none() {
        builder.sid = Some(Default::default())
    }
    builder
}

pub(crate) fn pipeline_pause_state_settings_correct_errors(
    mut builder: crate::types::builders::PipelinePauseStateSettingsBuilder,
) -> crate::types::builders::PipelinePauseStateSettingsBuilder {
    if builder.pipeline_id.is_none() {
        builder.pipeline_id = "no value was set".parse::<crate::types::PipelineId>().ok()
    }
    builder
}

pub(crate) fn scte35_descriptor_correct_errors(
    mut builder: crate::types::builders::Scte35DescriptorBuilder,
) -> crate::types::builders::Scte35DescriptorBuilder {
    if builder.scte35_descriptor_settings.is_none() {
        builder.scte35_descriptor_settings = {
            let builder = crate::types::builders::Scte35DescriptorSettingsBuilder::default();
            Some(crate::serde_util::scte35_descriptor_settings_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn timecode_burnin_settings_correct_errors(
    mut builder: crate::types::builders::TimecodeBurninSettingsBuilder,
) -> crate::types::builders::TimecodeBurninSettingsBuilder {
    if builder.font_size.is_none() {
        builder.font_size = "no value was set".parse::<crate::types::TimecodeBurninFontSize>().ok()
    }
    if builder.position.is_none() {
        builder.position = "no value was set".parse::<crate::types::TimecodeBurninPosition>().ok()
    }
    builder
}

pub(crate) fn archive_output_settings_correct_errors(
    mut builder: crate::types::builders::ArchiveOutputSettingsBuilder,
) -> crate::types::builders::ArchiveOutputSettingsBuilder {
    if builder.container_settings.is_none() {
        builder.container_settings = {
            let builder = crate::types::builders::ArchiveContainerSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn audio_hls_rendition_selection_correct_errors(
    mut builder: crate::types::builders::AudioHlsRenditionSelectionBuilder,
) -> crate::types::builders::AudioHlsRenditionSelectionBuilder {
    if builder.group_id.is_none() {
        builder.group_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_language_selection_correct_errors(
    mut builder: crate::types::builders::AudioLanguageSelectionBuilder,
) -> crate::types::builders::AudioLanguageSelectionBuilder {
    if builder.language_code.is_none() {
        builder.language_code = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_pid_selection_correct_errors(
    mut builder: crate::types::builders::AudioPidSelectionBuilder,
) -> crate::types::builders::AudioPidSelectionBuilder {
    if builder.pid.is_none() {
        builder.pid = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_silence_failover_settings_correct_errors(
    mut builder: crate::types::builders::AudioSilenceFailoverSettingsBuilder,
) -> crate::types::builders::AudioSilenceFailoverSettingsBuilder {
    if builder.audio_selector_name.is_none() {
        builder.audio_selector_name = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_track_selection_correct_errors(
    mut builder: crate::types::builders::AudioTrackSelectionBuilder,
) -> crate::types::builders::AudioTrackSelectionBuilder {
    if builder.tracks.is_none() {
        builder.tracks = Some(Default::default())
    }
    builder
}

pub(crate) fn caption_language_mapping_correct_errors(
    mut builder: crate::types::builders::CaptionLanguageMappingBuilder,
) -> crate::types::builders::CaptionLanguageMappingBuilder {
    if builder.caption_channel.is_none() {
        builder.caption_channel = Some(Default::default())
    }
    if builder.language_code.is_none() {
        builder.language_code = Some(Default::default())
    }
    if builder.language_description.is_none() {
        builder.language_description = Some(Default::default())
    }
    builder
}

pub(crate) fn hls_output_settings_correct_errors(
    mut builder: crate::types::builders::HlsOutputSettingsBuilder,
) -> crate::types::builders::HlsOutputSettingsBuilder {
    if builder.hls_settings.is_none() {
        builder.hls_settings = {
            let builder = crate::types::builders::HlsSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn multiplex_output_settings_correct_errors(
    mut builder: crate::types::builders::MultiplexOutputSettingsBuilder,
) -> crate::types::builders::MultiplexOutputSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn rtmp_output_settings_correct_errors(
    mut builder: crate::types::builders::RtmpOutputSettingsBuilder,
) -> crate::types::builders::RtmpOutputSettingsBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn scte35_descriptor_settings_correct_errors(
    mut builder: crate::types::builders::Scte35DescriptorSettingsBuilder,
) -> crate::types::builders::Scte35DescriptorSettingsBuilder {
    if builder.segmentation_descriptor_scte35_descriptor_settings.is_none() {
        builder.segmentation_descriptor_scte35_descriptor_settings = {
            let builder = crate::types::builders::Scte35SegmentationDescriptorBuilder::default();
            Some(crate::serde_util::scte35_segmentation_descriptor_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn static_key_settings_correct_errors(
    mut builder: crate::types::builders::StaticKeySettingsBuilder,
) -> crate::types::builders::StaticKeySettingsBuilder {
    if builder.static_key_value.is_none() {
        builder.static_key_value = Some(Default::default())
    }
    builder
}

pub(crate) fn udp_output_settings_correct_errors(
    mut builder: crate::types::builders::UdpOutputSettingsBuilder,
) -> crate::types::builders::UdpOutputSettingsBuilder {
    if builder.container_settings.is_none() {
        builder.container_settings = {
            let builder = crate::types::builders::UdpContainerSettingsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::OutputLocationRefBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn audio_dolby_e_decode_correct_errors(
    mut builder: crate::types::builders::AudioDolbyEDecodeBuilder,
) -> crate::types::builders::AudioDolbyEDecodeBuilder {
    if builder.program_selection.is_none() {
        builder.program_selection = "no value was set".parse::<crate::types::DolbyEProgramSelection>().ok()
    }
    builder
}

pub(crate) fn caption_rectangle_correct_errors(
    mut builder: crate::types::builders::CaptionRectangleBuilder,
) -> crate::types::builders::CaptionRectangleBuilder {
    if builder.height.is_none() {
        builder.height = Some(Default::default())
    }
    if builder.left_offset.is_none() {
        builder.left_offset = Some(Default::default())
    }
    if builder.top_offset.is_none() {
        builder.top_offset = Some(Default::default())
    }
    if builder.width.is_none() {
        builder.width = Some(Default::default())
    }
    builder
}

pub(crate) fn input_channel_level_correct_errors(
    mut builder: crate::types::builders::InputChannelLevelBuilder,
) -> crate::types::builders::InputChannelLevelBuilder {
    if builder.gain.is_none() {
        builder.gain = Some(Default::default())
    }
    if builder.input_channel.is_none() {
        builder.input_channel = Some(Default::default())
    }
    builder
}

pub(crate) fn scte35_segmentation_descriptor_correct_errors(
    mut builder: crate::types::builders::Scte35SegmentationDescriptorBuilder,
) -> crate::types::builders::Scte35SegmentationDescriptorBuilder {
    if builder.segmentation_cancel_indicator.is_none() {
        builder.segmentation_cancel_indicator = "no value was set".parse::<crate::types::Scte35SegmentationCancelIndicator>().ok()
    }
    if builder.segmentation_event_id.is_none() {
        builder.segmentation_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_track_correct_errors(mut builder: crate::types::builders::AudioTrackBuilder) -> crate::types::builders::AudioTrackBuilder {
    if builder.track.is_none() {
        builder.track = Some(Default::default())
    }
    builder
}

pub(crate) fn scte35_delivery_restrictions_correct_errors(
    mut builder: crate::types::builders::Scte35DeliveryRestrictionsBuilder,
) -> crate::types::builders::Scte35DeliveryRestrictionsBuilder {
    if builder.archive_allowed_flag.is_none() {
        builder.archive_allowed_flag = "no value was set".parse::<crate::types::Scte35ArchiveAllowedFlag>().ok()
    }
    if builder.device_restrictions.is_none() {
        builder.device_restrictions = "no value was set".parse::<crate::types::Scte35DeviceRestrictions>().ok()
    }
    if builder.no_regional_blackout_flag.is_none() {
        builder.no_regional_blackout_flag = "no value was set".parse::<crate::types::Scte35NoRegionalBlackoutFlag>().ok()
    }
    if builder.web_delivery_allowed_flag.is_none() {
        builder.web_delivery_allowed_flag = "no value was set".parse::<crate::types::Scte35WebDeliveryAllowedFlag>().ok()
    }
    builder
}

pub(crate) fn standard_hls_settings_correct_errors(
    mut builder: crate::types::builders::StandardHlsSettingsBuilder,
) -> crate::types::builders::StandardHlsSettingsBuilder {
    if builder.m3u8_settings.is_none() {
        builder.m3u8_settings = {
            let builder = crate::types::builders::M3u8SettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn dvb_nit_settings_correct_errors(
    mut builder: crate::types::builders::DvbNitSettingsBuilder,
) -> crate::types::builders::DvbNitSettingsBuilder {
    if builder.network_id.is_none() {
        builder.network_id = Some(Default::default())
    }
    if builder.network_name.is_none() {
        builder.network_name = Some(Default::default())
    }
    builder
}
