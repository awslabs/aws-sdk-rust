// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in a CreateClusterRequest.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterNetworkSettingsCreateRequest {
    /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub default_route: ::std::option::Option<::std::string::String>,
    /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
    pub interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMappingCreateRequest>>,
}
impl ClusterNetworkSettingsCreateRequest {
    /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn default_route(&self) -> ::std::option::Option<&str> {
        self.default_route.as_deref()
    }
    /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.interface_mappings.is_none()`.
    pub fn interface_mappings(&self) -> &[crate::types::InterfaceMappingCreateRequest] {
        self.interface_mappings.as_deref().unwrap_or_default()
    }
}
impl ClusterNetworkSettingsCreateRequest {
    /// Creates a new builder-style object to manufacture [`ClusterNetworkSettingsCreateRequest`](crate::types::ClusterNetworkSettingsCreateRequest).
    pub fn builder() -> crate::types::builders::ClusterNetworkSettingsCreateRequestBuilder {
        crate::types::builders::ClusterNetworkSettingsCreateRequestBuilder::default()
    }
}

/// A builder for [`ClusterNetworkSettingsCreateRequest`](crate::types::ClusterNetworkSettingsCreateRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterNetworkSettingsCreateRequestBuilder {
    pub(crate) default_route: ::std::option::Option<::std::string::String>,
    pub(crate) interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMappingCreateRequest>>,
}
impl ClusterNetworkSettingsCreateRequestBuilder {
    /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn default_route(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_route = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn set_default_route(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_route = input;
        self
    }
    /// Specify one network interface as the default route for traffic to and from the Node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn get_default_route(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_route
    }
    /// Appends an item to `interface_mappings`.
    ///
    /// To override the contents of this collection use [`set_interface_mappings`](Self::set_interface_mappings).
    ///
    /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
    pub fn interface_mappings(mut self, input: crate::types::InterfaceMappingCreateRequest) -> Self {
        let mut v = self.interface_mappings.unwrap_or_default();
        v.push(input);
        self.interface_mappings = ::std::option::Option::Some(v);
        self
    }
    /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
    pub fn set_interface_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMappingCreateRequest>>) -> Self {
        self.interface_mappings = input;
        self
    }
    /// An array of interfaceMapping objects for this Cluster. You must create a mapping for node interfaces that you plan to use for encoding traffic. You typically don't create a mapping for the management interface. You define this mapping in the Cluster so that the mapping can be used by all the Nodes. Each mapping logically connects one interface on the nodes with one Network. Each mapping consists of a pair of parameters. The logicalInterfaceName parameter creates a logical name for the Node interface that handles a specific type of traffic. For example, my-Inputs-Interface. The networkID parameter refers to the ID of the network. When you create the Nodes in this Cluster, you will associate the logicalInterfaceName with the appropriate physical interface.
    pub fn get_interface_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InterfaceMappingCreateRequest>> {
        &self.interface_mappings
    }
    /// Consumes the builder and constructs a [`ClusterNetworkSettingsCreateRequest`](crate::types::ClusterNetworkSettingsCreateRequest).
    pub fn build(self) -> crate::types::ClusterNetworkSettingsCreateRequest {
        crate::types::ClusterNetworkSettingsCreateRequest {
            default_route: self.default_route,
            interface_mappings: self.interface_mappings,
        }
    }
}
