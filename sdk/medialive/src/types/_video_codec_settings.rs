// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Video Codec Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoCodecSettings {
    /// Frame Capture Settings
    pub frame_capture_settings: ::std::option::Option<crate::types::FrameCaptureSettings>,
    /// H264 Settings
    pub h264_settings: ::std::option::Option<crate::types::H264Settings>,
    /// H265 Settings
    pub h265_settings: ::std::option::Option<crate::types::H265Settings>,
    /// Mpeg2 Settings
    pub mpeg2_settings: ::std::option::Option<crate::types::Mpeg2Settings>,
    /// Av1 Settings
    pub av1_settings: ::std::option::Option<crate::types::Av1Settings>,
}
impl VideoCodecSettings {
    /// Frame Capture Settings
    pub fn frame_capture_settings(&self) -> ::std::option::Option<&crate::types::FrameCaptureSettings> {
        self.frame_capture_settings.as_ref()
    }
    /// H264 Settings
    pub fn h264_settings(&self) -> ::std::option::Option<&crate::types::H264Settings> {
        self.h264_settings.as_ref()
    }
    /// H265 Settings
    pub fn h265_settings(&self) -> ::std::option::Option<&crate::types::H265Settings> {
        self.h265_settings.as_ref()
    }
    /// Mpeg2 Settings
    pub fn mpeg2_settings(&self) -> ::std::option::Option<&crate::types::Mpeg2Settings> {
        self.mpeg2_settings.as_ref()
    }
    /// Av1 Settings
    pub fn av1_settings(&self) -> ::std::option::Option<&crate::types::Av1Settings> {
        self.av1_settings.as_ref()
    }
}
impl VideoCodecSettings {
    /// Creates a new builder-style object to manufacture [`VideoCodecSettings`](crate::types::VideoCodecSettings).
    pub fn builder() -> crate::types::builders::VideoCodecSettingsBuilder {
        crate::types::builders::VideoCodecSettingsBuilder::default()
    }
}

/// A builder for [`VideoCodecSettings`](crate::types::VideoCodecSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoCodecSettingsBuilder {
    pub(crate) frame_capture_settings: ::std::option::Option<crate::types::FrameCaptureSettings>,
    pub(crate) h264_settings: ::std::option::Option<crate::types::H264Settings>,
    pub(crate) h265_settings: ::std::option::Option<crate::types::H265Settings>,
    pub(crate) mpeg2_settings: ::std::option::Option<crate::types::Mpeg2Settings>,
    pub(crate) av1_settings: ::std::option::Option<crate::types::Av1Settings>,
}
impl VideoCodecSettingsBuilder {
    /// Frame Capture Settings
    pub fn frame_capture_settings(mut self, input: crate::types::FrameCaptureSettings) -> Self {
        self.frame_capture_settings = ::std::option::Option::Some(input);
        self
    }
    /// Frame Capture Settings
    pub fn set_frame_capture_settings(mut self, input: ::std::option::Option<crate::types::FrameCaptureSettings>) -> Self {
        self.frame_capture_settings = input;
        self
    }
    /// Frame Capture Settings
    pub fn get_frame_capture_settings(&self) -> &::std::option::Option<crate::types::FrameCaptureSettings> {
        &self.frame_capture_settings
    }
    /// H264 Settings
    pub fn h264_settings(mut self, input: crate::types::H264Settings) -> Self {
        self.h264_settings = ::std::option::Option::Some(input);
        self
    }
    /// H264 Settings
    pub fn set_h264_settings(mut self, input: ::std::option::Option<crate::types::H264Settings>) -> Self {
        self.h264_settings = input;
        self
    }
    /// H264 Settings
    pub fn get_h264_settings(&self) -> &::std::option::Option<crate::types::H264Settings> {
        &self.h264_settings
    }
    /// H265 Settings
    pub fn h265_settings(mut self, input: crate::types::H265Settings) -> Self {
        self.h265_settings = ::std::option::Option::Some(input);
        self
    }
    /// H265 Settings
    pub fn set_h265_settings(mut self, input: ::std::option::Option<crate::types::H265Settings>) -> Self {
        self.h265_settings = input;
        self
    }
    /// H265 Settings
    pub fn get_h265_settings(&self) -> &::std::option::Option<crate::types::H265Settings> {
        &self.h265_settings
    }
    /// Mpeg2 Settings
    pub fn mpeg2_settings(mut self, input: crate::types::Mpeg2Settings) -> Self {
        self.mpeg2_settings = ::std::option::Option::Some(input);
        self
    }
    /// Mpeg2 Settings
    pub fn set_mpeg2_settings(mut self, input: ::std::option::Option<crate::types::Mpeg2Settings>) -> Self {
        self.mpeg2_settings = input;
        self
    }
    /// Mpeg2 Settings
    pub fn get_mpeg2_settings(&self) -> &::std::option::Option<crate::types::Mpeg2Settings> {
        &self.mpeg2_settings
    }
    /// Av1 Settings
    pub fn av1_settings(mut self, input: crate::types::Av1Settings) -> Self {
        self.av1_settings = ::std::option::Option::Some(input);
        self
    }
    /// Av1 Settings
    pub fn set_av1_settings(mut self, input: ::std::option::Option<crate::types::Av1Settings>) -> Self {
        self.av1_settings = input;
        self
    }
    /// Av1 Settings
    pub fn get_av1_settings(&self) -> &::std::option::Option<crate::types::Av1Settings> {
        &self.av1_settings
    }
    /// Consumes the builder and constructs a [`VideoCodecSettings`](crate::types::VideoCodecSettings).
    pub fn build(self) -> crate::types::VideoCodecSettings {
        crate::types::VideoCodecSettings {
            frame_capture_settings: self.frame_capture_settings,
            h264_settings: self.h264_settings,
            h265_settings: self.h265_settings,
            mpeg2_settings: self.mpeg2_settings,
            av1_settings: self.av1_settings,
        }
    }
}
