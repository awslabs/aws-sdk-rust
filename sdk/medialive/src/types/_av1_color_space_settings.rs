// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Av1 Color Space Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Av1ColorSpaceSettings {
    /// Passthrough applies no color space conversion to the output
    pub color_space_passthrough_settings: ::std::option::Option<crate::types::ColorSpacePassthroughSettings>,
    /// Hdr10 Settings
    pub hdr10_settings: ::std::option::Option<crate::types::Hdr10Settings>,
    /// Rec601 Settings
    pub rec601_settings: ::std::option::Option<crate::types::Rec601Settings>,
    /// Rec709 Settings
    pub rec709_settings: ::std::option::Option<crate::types::Rec709Settings>,
}
impl Av1ColorSpaceSettings {
    /// Passthrough applies no color space conversion to the output
    pub fn color_space_passthrough_settings(&self) -> ::std::option::Option<&crate::types::ColorSpacePassthroughSettings> {
        self.color_space_passthrough_settings.as_ref()
    }
    /// Hdr10 Settings
    pub fn hdr10_settings(&self) -> ::std::option::Option<&crate::types::Hdr10Settings> {
        self.hdr10_settings.as_ref()
    }
    /// Rec601 Settings
    pub fn rec601_settings(&self) -> ::std::option::Option<&crate::types::Rec601Settings> {
        self.rec601_settings.as_ref()
    }
    /// Rec709 Settings
    pub fn rec709_settings(&self) -> ::std::option::Option<&crate::types::Rec709Settings> {
        self.rec709_settings.as_ref()
    }
}
impl Av1ColorSpaceSettings {
    /// Creates a new builder-style object to manufacture [`Av1ColorSpaceSettings`](crate::types::Av1ColorSpaceSettings).
    pub fn builder() -> crate::types::builders::Av1ColorSpaceSettingsBuilder {
        crate::types::builders::Av1ColorSpaceSettingsBuilder::default()
    }
}

/// A builder for [`Av1ColorSpaceSettings`](crate::types::Av1ColorSpaceSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Av1ColorSpaceSettingsBuilder {
    pub(crate) color_space_passthrough_settings: ::std::option::Option<crate::types::ColorSpacePassthroughSettings>,
    pub(crate) hdr10_settings: ::std::option::Option<crate::types::Hdr10Settings>,
    pub(crate) rec601_settings: ::std::option::Option<crate::types::Rec601Settings>,
    pub(crate) rec709_settings: ::std::option::Option<crate::types::Rec709Settings>,
}
impl Av1ColorSpaceSettingsBuilder {
    /// Passthrough applies no color space conversion to the output
    pub fn color_space_passthrough_settings(mut self, input: crate::types::ColorSpacePassthroughSettings) -> Self {
        self.color_space_passthrough_settings = ::std::option::Option::Some(input);
        self
    }
    /// Passthrough applies no color space conversion to the output
    pub fn set_color_space_passthrough_settings(mut self, input: ::std::option::Option<crate::types::ColorSpacePassthroughSettings>) -> Self {
        self.color_space_passthrough_settings = input;
        self
    }
    /// Passthrough applies no color space conversion to the output
    pub fn get_color_space_passthrough_settings(&self) -> &::std::option::Option<crate::types::ColorSpacePassthroughSettings> {
        &self.color_space_passthrough_settings
    }
    /// Hdr10 Settings
    pub fn hdr10_settings(mut self, input: crate::types::Hdr10Settings) -> Self {
        self.hdr10_settings = ::std::option::Option::Some(input);
        self
    }
    /// Hdr10 Settings
    pub fn set_hdr10_settings(mut self, input: ::std::option::Option<crate::types::Hdr10Settings>) -> Self {
        self.hdr10_settings = input;
        self
    }
    /// Hdr10 Settings
    pub fn get_hdr10_settings(&self) -> &::std::option::Option<crate::types::Hdr10Settings> {
        &self.hdr10_settings
    }
    /// Rec601 Settings
    pub fn rec601_settings(mut self, input: crate::types::Rec601Settings) -> Self {
        self.rec601_settings = ::std::option::Option::Some(input);
        self
    }
    /// Rec601 Settings
    pub fn set_rec601_settings(mut self, input: ::std::option::Option<crate::types::Rec601Settings>) -> Self {
        self.rec601_settings = input;
        self
    }
    /// Rec601 Settings
    pub fn get_rec601_settings(&self) -> &::std::option::Option<crate::types::Rec601Settings> {
        &self.rec601_settings
    }
    /// Rec709 Settings
    pub fn rec709_settings(mut self, input: crate::types::Rec709Settings) -> Self {
        self.rec709_settings = ::std::option::Option::Some(input);
        self
    }
    /// Rec709 Settings
    pub fn set_rec709_settings(mut self, input: ::std::option::Option<crate::types::Rec709Settings>) -> Self {
        self.rec709_settings = input;
        self
    }
    /// Rec709 Settings
    pub fn get_rec709_settings(&self) -> &::std::option::Option<crate::types::Rec709Settings> {
        &self.rec709_settings
    }
    /// Consumes the builder and constructs a [`Av1ColorSpaceSettings`](crate::types::Av1ColorSpaceSettings).
    pub fn build(self) -> crate::types::Av1ColorSpaceSettings {
        crate::types::Av1ColorSpaceSettings {
            color_space_passthrough_settings: self.color_space_passthrough_settings,
            hdr10_settings: self.hdr10_settings,
            rec601_settings: self.rec601_settings,
            rec709_settings: self.rec709_settings,
        }
    }
}
