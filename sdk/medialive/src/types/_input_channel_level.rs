// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Input Channel Level
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputChannelLevel {
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    pub gain: ::std::option::Option<i32>,
    /// The index of the input channel used as a source.
    pub input_channel: ::std::option::Option<i32>,
}
impl InputChannelLevel {
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    pub fn gain(&self) -> ::std::option::Option<i32> {
        self.gain
    }
    /// The index of the input channel used as a source.
    pub fn input_channel(&self) -> ::std::option::Option<i32> {
        self.input_channel
    }
}
impl InputChannelLevel {
    /// Creates a new builder-style object to manufacture [`InputChannelLevel`](crate::types::InputChannelLevel).
    pub fn builder() -> crate::types::builders::InputChannelLevelBuilder {
        crate::types::builders::InputChannelLevelBuilder::default()
    }
}

/// A builder for [`InputChannelLevel`](crate::types::InputChannelLevel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputChannelLevelBuilder {
    pub(crate) gain: ::std::option::Option<i32>,
    pub(crate) input_channel: ::std::option::Option<i32>,
}
impl InputChannelLevelBuilder {
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    /// This field is required.
    pub fn gain(mut self, input: i32) -> Self {
        self.gain = ::std::option::Option::Some(input);
        self
    }
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    pub fn set_gain(mut self, input: ::std::option::Option<i32>) -> Self {
        self.gain = input;
        self
    }
    /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
    pub fn get_gain(&self) -> &::std::option::Option<i32> {
        &self.gain
    }
    /// The index of the input channel used as a source.
    /// This field is required.
    pub fn input_channel(mut self, input: i32) -> Self {
        self.input_channel = ::std::option::Option::Some(input);
        self
    }
    /// The index of the input channel used as a source.
    pub fn set_input_channel(mut self, input: ::std::option::Option<i32>) -> Self {
        self.input_channel = input;
        self
    }
    /// The index of the input channel used as a source.
    pub fn get_input_channel(&self) -> &::std::option::Option<i32> {
        &self.input_channel
    }
    /// Consumes the builder and constructs a [`InputChannelLevel`](crate::types::InputChannelLevel).
    pub fn build(self) -> crate::types::InputChannelLevel {
        crate::types::InputChannelLevel {
            gain: self.gain,
            input_channel: self.input_channel,
        }
    }
}
