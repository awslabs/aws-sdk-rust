// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Bandwidth Reduction Filter Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BandwidthReductionFilterSettings {
    /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
    pub post_filter_sharpening: ::std::option::Option<crate::types::BandwidthReductionPostFilterSharpening>,
    /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
    pub strength: ::std::option::Option<crate::types::BandwidthReductionFilterStrength>,
}
impl BandwidthReductionFilterSettings {
    /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
    pub fn post_filter_sharpening(&self) -> ::std::option::Option<&crate::types::BandwidthReductionPostFilterSharpening> {
        self.post_filter_sharpening.as_ref()
    }
    /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
    pub fn strength(&self) -> ::std::option::Option<&crate::types::BandwidthReductionFilterStrength> {
        self.strength.as_ref()
    }
}
impl BandwidthReductionFilterSettings {
    /// Creates a new builder-style object to manufacture [`BandwidthReductionFilterSettings`](crate::types::BandwidthReductionFilterSettings).
    pub fn builder() -> crate::types::builders::BandwidthReductionFilterSettingsBuilder {
        crate::types::builders::BandwidthReductionFilterSettingsBuilder::default()
    }
}

/// A builder for [`BandwidthReductionFilterSettings`](crate::types::BandwidthReductionFilterSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BandwidthReductionFilterSettingsBuilder {
    pub(crate) post_filter_sharpening: ::std::option::Option<crate::types::BandwidthReductionPostFilterSharpening>,
    pub(crate) strength: ::std::option::Option<crate::types::BandwidthReductionFilterStrength>,
}
impl BandwidthReductionFilterSettingsBuilder {
    /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
    pub fn post_filter_sharpening(mut self, input: crate::types::BandwidthReductionPostFilterSharpening) -> Self {
        self.post_filter_sharpening = ::std::option::Option::Some(input);
        self
    }
    /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
    pub fn set_post_filter_sharpening(mut self, input: ::std::option::Option<crate::types::BandwidthReductionPostFilterSharpening>) -> Self {
        self.post_filter_sharpening = input;
        self
    }
    /// Configures the sharpening control, which is available when the bandwidth reduction filter is enabled. This control sharpens edges and contours, which produces a specific artistic effect that you might want. We recommend that you test each of the values (including DISABLED) to observe the sharpening effect on the content.
    pub fn get_post_filter_sharpening(&self) -> &::std::option::Option<crate::types::BandwidthReductionPostFilterSharpening> {
        &self.post_filter_sharpening
    }
    /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
    pub fn strength(mut self, input: crate::types::BandwidthReductionFilterStrength) -> Self {
        self.strength = ::std::option::Option::Some(input);
        self
    }
    /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
    pub fn set_strength(mut self, input: ::std::option::Option<crate::types::BandwidthReductionFilterStrength>) -> Self {
        self.strength = input;
        self
    }
    /// Enables the bandwidth reduction filter. The filter strengths range from 1 to 4. We recommend that you always enable this filter and use AUTO, to let MediaLive apply the optimum filtering for the context.
    pub fn get_strength(&self) -> &::std::option::Option<crate::types::BandwidthReductionFilterStrength> {
        &self.strength
    }
    /// Consumes the builder and constructs a [`BandwidthReductionFilterSettings`](crate::types::BandwidthReductionFilterSettings).
    pub fn build(self) -> crate::types::BandwidthReductionFilterSettings {
        crate::types::BandwidthReductionFilterSettings {
            post_filter_sharpening: self.post_filter_sharpening,
            strength: self.strength,
        }
    }
}
