// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Audio Codec Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioCodecSettings {
    /// Aac Settings
    #[doc(hidden)]
    pub aac_settings: std::option::Option<crate::types::AacSettings>,
    /// Ac3 Settings
    #[doc(hidden)]
    pub ac3_settings: std::option::Option<crate::types::Ac3Settings>,
    /// Eac3 Atmos Settings
    #[doc(hidden)]
    pub eac3_atmos_settings: std::option::Option<crate::types::Eac3AtmosSettings>,
    /// Eac3 Settings
    #[doc(hidden)]
    pub eac3_settings: std::option::Option<crate::types::Eac3Settings>,
    /// Mp2 Settings
    #[doc(hidden)]
    pub mp2_settings: std::option::Option<crate::types::Mp2Settings>,
    /// Pass Through Settings
    #[doc(hidden)]
    pub pass_through_settings: std::option::Option<crate::types::PassThroughSettings>,
    /// Wav Settings
    #[doc(hidden)]
    pub wav_settings: std::option::Option<crate::types::WavSettings>,
}
impl AudioCodecSettings {
    /// Aac Settings
    pub fn aac_settings(&self) -> std::option::Option<&crate::types::AacSettings> {
        self.aac_settings.as_ref()
    }
    /// Ac3 Settings
    pub fn ac3_settings(&self) -> std::option::Option<&crate::types::Ac3Settings> {
        self.ac3_settings.as_ref()
    }
    /// Eac3 Atmos Settings
    pub fn eac3_atmos_settings(&self) -> std::option::Option<&crate::types::Eac3AtmosSettings> {
        self.eac3_atmos_settings.as_ref()
    }
    /// Eac3 Settings
    pub fn eac3_settings(&self) -> std::option::Option<&crate::types::Eac3Settings> {
        self.eac3_settings.as_ref()
    }
    /// Mp2 Settings
    pub fn mp2_settings(&self) -> std::option::Option<&crate::types::Mp2Settings> {
        self.mp2_settings.as_ref()
    }
    /// Pass Through Settings
    pub fn pass_through_settings(&self) -> std::option::Option<&crate::types::PassThroughSettings> {
        self.pass_through_settings.as_ref()
    }
    /// Wav Settings
    pub fn wav_settings(&self) -> std::option::Option<&crate::types::WavSettings> {
        self.wav_settings.as_ref()
    }
}
impl AudioCodecSettings {
    /// Creates a new builder-style object to manufacture [`AudioCodecSettings`](crate::types::AudioCodecSettings).
    pub fn builder() -> crate::types::builders::AudioCodecSettingsBuilder {
        crate::types::builders::AudioCodecSettingsBuilder::default()
    }
}

/// A builder for [`AudioCodecSettings`](crate::types::AudioCodecSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioCodecSettingsBuilder {
    pub(crate) aac_settings: std::option::Option<crate::types::AacSettings>,
    pub(crate) ac3_settings: std::option::Option<crate::types::Ac3Settings>,
    pub(crate) eac3_atmos_settings: std::option::Option<crate::types::Eac3AtmosSettings>,
    pub(crate) eac3_settings: std::option::Option<crate::types::Eac3Settings>,
    pub(crate) mp2_settings: std::option::Option<crate::types::Mp2Settings>,
    pub(crate) pass_through_settings: std::option::Option<crate::types::PassThroughSettings>,
    pub(crate) wav_settings: std::option::Option<crate::types::WavSettings>,
}
impl AudioCodecSettingsBuilder {
    /// Aac Settings
    pub fn aac_settings(mut self, input: crate::types::AacSettings) -> Self {
        self.aac_settings = Some(input);
        self
    }
    /// Aac Settings
    pub fn set_aac_settings(
        mut self,
        input: std::option::Option<crate::types::AacSettings>,
    ) -> Self {
        self.aac_settings = input;
        self
    }
    /// Ac3 Settings
    pub fn ac3_settings(mut self, input: crate::types::Ac3Settings) -> Self {
        self.ac3_settings = Some(input);
        self
    }
    /// Ac3 Settings
    pub fn set_ac3_settings(
        mut self,
        input: std::option::Option<crate::types::Ac3Settings>,
    ) -> Self {
        self.ac3_settings = input;
        self
    }
    /// Eac3 Atmos Settings
    pub fn eac3_atmos_settings(mut self, input: crate::types::Eac3AtmosSettings) -> Self {
        self.eac3_atmos_settings = Some(input);
        self
    }
    /// Eac3 Atmos Settings
    pub fn set_eac3_atmos_settings(
        mut self,
        input: std::option::Option<crate::types::Eac3AtmosSettings>,
    ) -> Self {
        self.eac3_atmos_settings = input;
        self
    }
    /// Eac3 Settings
    pub fn eac3_settings(mut self, input: crate::types::Eac3Settings) -> Self {
        self.eac3_settings = Some(input);
        self
    }
    /// Eac3 Settings
    pub fn set_eac3_settings(
        mut self,
        input: std::option::Option<crate::types::Eac3Settings>,
    ) -> Self {
        self.eac3_settings = input;
        self
    }
    /// Mp2 Settings
    pub fn mp2_settings(mut self, input: crate::types::Mp2Settings) -> Self {
        self.mp2_settings = Some(input);
        self
    }
    /// Mp2 Settings
    pub fn set_mp2_settings(
        mut self,
        input: std::option::Option<crate::types::Mp2Settings>,
    ) -> Self {
        self.mp2_settings = input;
        self
    }
    /// Pass Through Settings
    pub fn pass_through_settings(mut self, input: crate::types::PassThroughSettings) -> Self {
        self.pass_through_settings = Some(input);
        self
    }
    /// Pass Through Settings
    pub fn set_pass_through_settings(
        mut self,
        input: std::option::Option<crate::types::PassThroughSettings>,
    ) -> Self {
        self.pass_through_settings = input;
        self
    }
    /// Wav Settings
    pub fn wav_settings(mut self, input: crate::types::WavSettings) -> Self {
        self.wav_settings = Some(input);
        self
    }
    /// Wav Settings
    pub fn set_wav_settings(
        mut self,
        input: std::option::Option<crate::types::WavSettings>,
    ) -> Self {
        self.wav_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioCodecSettings`](crate::types::AudioCodecSettings).
    pub fn build(self) -> crate::types::AudioCodecSettings {
        crate::types::AudioCodecSettings {
            aac_settings: self.aac_settings,
            ac3_settings: self.ac3_settings,
            eac3_atmos_settings: self.eac3_atmos_settings,
            eac3_settings: self.eac3_settings,
            mp2_settings: self.mp2_settings,
            pass_through_settings: self.pass_through_settings,
            wav_settings: self.wav_settings,
        }
    }
}
