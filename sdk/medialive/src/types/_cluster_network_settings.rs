// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in DescribeClusterResult, DescribeClusterSummary, UpdateClusterResult.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterNetworkSettings {
    /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub default_route: ::std::option::Option<::std::string::String>,
    /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
    pub interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMapping>>,
}
impl ClusterNetworkSettings {
    /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn default_route(&self) -> ::std::option::Option<&str> {
        self.default_route.as_deref()
    }
    /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.interface_mappings.is_none()`.
    pub fn interface_mappings(&self) -> &[crate::types::InterfaceMapping] {
        self.interface_mappings.as_deref().unwrap_or_default()
    }
}
impl ClusterNetworkSettings {
    /// Creates a new builder-style object to manufacture [`ClusterNetworkSettings`](crate::types::ClusterNetworkSettings).
    pub fn builder() -> crate::types::builders::ClusterNetworkSettingsBuilder {
        crate::types::builders::ClusterNetworkSettingsBuilder::default()
    }
}

/// A builder for [`ClusterNetworkSettings`](crate::types::ClusterNetworkSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterNetworkSettingsBuilder {
    pub(crate) default_route: ::std::option::Option<::std::string::String>,
    pub(crate) interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMapping>>,
}
impl ClusterNetworkSettingsBuilder {
    /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn default_route(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_route = ::std::option::Option::Some(input.into());
        self
    }
    /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn set_default_route(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_route = input;
        self
    }
    /// The network interface that is the default route for traffic to and from the node. MediaLive Anywhere uses this default when the destination for the traffic isn't covered by the route table for any of the networks. Specify the value of the appropriate logicalInterfaceName parameter that you create in the interfaceMappings.
    pub fn get_default_route(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_route
    }
    /// Appends an item to `interface_mappings`.
    ///
    /// To override the contents of this collection use [`set_interface_mappings`](Self::set_interface_mappings).
    ///
    /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
    pub fn interface_mappings(mut self, input: crate::types::InterfaceMapping) -> Self {
        let mut v = self.interface_mappings.unwrap_or_default();
        v.push(input);
        self.interface_mappings = ::std::option::Option::Some(v);
        self
    }
    /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
    pub fn set_interface_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InterfaceMapping>>) -> Self {
        self.interface_mappings = input;
        self
    }
    /// An array of interfaceMapping objects for this Cluster. Each mapping logically connects one interface on the nodes with one Network. You need only one mapping for each interface because all the Nodes share the mapping.
    pub fn get_interface_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InterfaceMapping>> {
        &self.interface_mappings
    }
    /// Consumes the builder and constructs a [`ClusterNetworkSettings`](crate::types::ClusterNetworkSettings).
    pub fn build(self) -> crate::types::ClusterNetworkSettings {
        crate::types::ClusterNetworkSettings {
            default_route: self.default_route,
            interface_mappings: self.interface_mappings,
        }
    }
}
