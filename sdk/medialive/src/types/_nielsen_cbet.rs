// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Nielsen CBET
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NielsenCbet {
    /// Enter the CBET check digits to use in the watermark.
    pub cbet_check_digit_string: ::std::option::Option<::std::string::String>,
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    pub cbet_stepaside: ::std::option::Option<crate::types::NielsenWatermarksCbetStepaside>,
    /// Enter the CBET Source ID (CSID) to use in the watermark
    pub csid: ::std::option::Option<::std::string::String>,
}
impl NielsenCbet {
    /// Enter the CBET check digits to use in the watermark.
    pub fn cbet_check_digit_string(&self) -> ::std::option::Option<&str> {
        self.cbet_check_digit_string.as_deref()
    }
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    pub fn cbet_stepaside(&self) -> ::std::option::Option<&crate::types::NielsenWatermarksCbetStepaside> {
        self.cbet_stepaside.as_ref()
    }
    /// Enter the CBET Source ID (CSID) to use in the watermark
    pub fn csid(&self) -> ::std::option::Option<&str> {
        self.csid.as_deref()
    }
}
impl NielsenCbet {
    /// Creates a new builder-style object to manufacture [`NielsenCbet`](crate::types::NielsenCbet).
    pub fn builder() -> crate::types::builders::NielsenCbetBuilder {
        crate::types::builders::NielsenCbetBuilder::default()
    }
}

/// A builder for [`NielsenCbet`](crate::types::NielsenCbet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NielsenCbetBuilder {
    pub(crate) cbet_check_digit_string: ::std::option::Option<::std::string::String>,
    pub(crate) cbet_stepaside: ::std::option::Option<crate::types::NielsenWatermarksCbetStepaside>,
    pub(crate) csid: ::std::option::Option<::std::string::String>,
}
impl NielsenCbetBuilder {
    /// Enter the CBET check digits to use in the watermark.
    /// This field is required.
    pub fn cbet_check_digit_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cbet_check_digit_string = ::std::option::Option::Some(input.into());
        self
    }
    /// Enter the CBET check digits to use in the watermark.
    pub fn set_cbet_check_digit_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cbet_check_digit_string = input;
        self
    }
    /// Enter the CBET check digits to use in the watermark.
    pub fn get_cbet_check_digit_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.cbet_check_digit_string
    }
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    /// This field is required.
    pub fn cbet_stepaside(mut self, input: crate::types::NielsenWatermarksCbetStepaside) -> Self {
        self.cbet_stepaside = ::std::option::Option::Some(input);
        self
    }
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    pub fn set_cbet_stepaside(mut self, input: ::std::option::Option<crate::types::NielsenWatermarksCbetStepaside>) -> Self {
        self.cbet_stepaside = input;
        self
    }
    /// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
    pub fn get_cbet_stepaside(&self) -> &::std::option::Option<crate::types::NielsenWatermarksCbetStepaside> {
        &self.cbet_stepaside
    }
    /// Enter the CBET Source ID (CSID) to use in the watermark
    /// This field is required.
    pub fn csid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.csid = ::std::option::Option::Some(input.into());
        self
    }
    /// Enter the CBET Source ID (CSID) to use in the watermark
    pub fn set_csid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.csid = input;
        self
    }
    /// Enter the CBET Source ID (CSID) to use in the watermark
    pub fn get_csid(&self) -> &::std::option::Option<::std::string::String> {
        &self.csid
    }
    /// Consumes the builder and constructs a [`NielsenCbet`](crate::types::NielsenCbet).
    pub fn build(self) -> crate::types::NielsenCbet {
        crate::types::NielsenCbet {
            cbet_check_digit_string: self.cbet_check_digit_string,
            cbet_stepaside: self.cbet_stepaside,
            csid: self.csid,
        }
    }
}
