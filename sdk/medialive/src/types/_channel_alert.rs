// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An alert on a channel
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChannelAlert {
    /// The type of the alert
    pub alert_type: ::std::option::Option<::std::string::String>,
    /// The time when the alert was cleared
    pub cleared_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// The unique ID for this alert instance
    pub id: ::std::option::Option<::std::string::String>,
    /// The user facing alert message which can have more context
    pub message: ::std::option::Option<::std::string::String>,
    /// The ID of the pipeline this alert is associated with
    pub pipeline_id: ::std::option::Option<::std::string::String>,
    /// The time when the alert was set
    pub set_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// The state of the alert
    pub state: ::std::option::Option<crate::types::ChannelAlertState>,
}
impl ChannelAlert {
    /// The type of the alert
    pub fn alert_type(&self) -> ::std::option::Option<&str> {
        self.alert_type.as_deref()
    }
    /// The time when the alert was cleared
    pub fn cleared_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.cleared_timestamp.as_ref()
    }
    /// The unique ID for this alert instance
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The user facing alert message which can have more context
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// The ID of the pipeline this alert is associated with
    pub fn pipeline_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_id.as_deref()
    }
    /// The time when the alert was set
    pub fn set_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.set_timestamp.as_ref()
    }
    /// The state of the alert
    pub fn state(&self) -> ::std::option::Option<&crate::types::ChannelAlertState> {
        self.state.as_ref()
    }
}
impl ChannelAlert {
    /// Creates a new builder-style object to manufacture [`ChannelAlert`](crate::types::ChannelAlert).
    pub fn builder() -> crate::types::builders::ChannelAlertBuilder {
        crate::types::builders::ChannelAlertBuilder::default()
    }
}

/// A builder for [`ChannelAlert`](crate::types::ChannelAlert).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChannelAlertBuilder {
    pub(crate) alert_type: ::std::option::Option<::std::string::String>,
    pub(crate) cleared_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_id: ::std::option::Option<::std::string::String>,
    pub(crate) set_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::ChannelAlertState>,
}
impl ChannelAlertBuilder {
    /// The type of the alert
    pub fn alert_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alert_type = ::std::option::Option::Some(input.into());
        self
    }
    /// The type of the alert
    pub fn set_alert_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alert_type = input;
        self
    }
    /// The type of the alert
    pub fn get_alert_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.alert_type
    }
    /// The time when the alert was cleared
    pub fn cleared_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.cleared_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// The time when the alert was cleared
    pub fn set_cleared_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.cleared_timestamp = input;
        self
    }
    /// The time when the alert was cleared
    pub fn get_cleared_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.cleared_timestamp
    }
    /// The unique ID for this alert instance
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The unique ID for this alert instance
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The unique ID for this alert instance
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// The user facing alert message which can have more context
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// The user facing alert message which can have more context
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// The user facing alert message which can have more context
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// The ID of the pipeline this alert is associated with
    pub fn pipeline_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the pipeline this alert is associated with
    pub fn set_pipeline_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_id = input;
        self
    }
    /// The ID of the pipeline this alert is associated with
    pub fn get_pipeline_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_id
    }
    /// The time when the alert was set
    pub fn set_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.set_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// The time when the alert was set
    pub fn set_set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.set_timestamp = input;
        self
    }
    /// The time when the alert was set
    pub fn get_set_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.set_timestamp
    }
    /// The state of the alert
    pub fn state(mut self, input: crate::types::ChannelAlertState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// The state of the alert
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ChannelAlertState>) -> Self {
        self.state = input;
        self
    }
    /// The state of the alert
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ChannelAlertState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`ChannelAlert`](crate::types::ChannelAlert).
    pub fn build(self) -> crate::types::ChannelAlert {
        crate::types::ChannelAlert {
            alert_type: self.alert_type,
            cleared_timestamp: self.cleared_timestamp,
            id: self.id,
            message: self.message,
            pipeline_id: self.pipeline_id,
            set_timestamp: self.set_timestamp,
            state: self.state,
        }
    }
}
