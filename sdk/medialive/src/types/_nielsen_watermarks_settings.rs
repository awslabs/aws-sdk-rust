// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Nielsen Watermarks Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NielsenWatermarksSettings {
    /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
    #[doc(hidden)]
    pub nielsen_cbet_settings: std::option::Option<crate::types::NielsenCbet>,
    /// Choose the distribution types that you want to assign to the watermarks: - PROGRAM_CONTENT - FINAL_DISTRIBUTOR
    #[doc(hidden)]
    pub nielsen_distribution_type:
        std::option::Option<crate::types::NielsenWatermarksDistributionTypes>,
    /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
    #[doc(hidden)]
    pub nielsen_naes_ii_nw_settings: std::option::Option<crate::types::NielsenNaesIiNw>,
}
impl NielsenWatermarksSettings {
    /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
    pub fn nielsen_cbet_settings(&self) -> std::option::Option<&crate::types::NielsenCbet> {
        self.nielsen_cbet_settings.as_ref()
    }
    /// Choose the distribution types that you want to assign to the watermarks: - PROGRAM_CONTENT - FINAL_DISTRIBUTOR
    pub fn nielsen_distribution_type(
        &self,
    ) -> std::option::Option<&crate::types::NielsenWatermarksDistributionTypes> {
        self.nielsen_distribution_type.as_ref()
    }
    /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
    pub fn nielsen_naes_ii_nw_settings(
        &self,
    ) -> std::option::Option<&crate::types::NielsenNaesIiNw> {
        self.nielsen_naes_ii_nw_settings.as_ref()
    }
}
impl NielsenWatermarksSettings {
    /// Creates a new builder-style object to manufacture [`NielsenWatermarksSettings`](crate::types::NielsenWatermarksSettings).
    pub fn builder() -> crate::types::builders::NielsenWatermarksSettingsBuilder {
        crate::types::builders::NielsenWatermarksSettingsBuilder::default()
    }
}

/// A builder for [`NielsenWatermarksSettings`](crate::types::NielsenWatermarksSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NielsenWatermarksSettingsBuilder {
    pub(crate) nielsen_cbet_settings: std::option::Option<crate::types::NielsenCbet>,
    pub(crate) nielsen_distribution_type:
        std::option::Option<crate::types::NielsenWatermarksDistributionTypes>,
    pub(crate) nielsen_naes_ii_nw_settings: std::option::Option<crate::types::NielsenNaesIiNw>,
}
impl NielsenWatermarksSettingsBuilder {
    /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
    pub fn nielsen_cbet_settings(mut self, input: crate::types::NielsenCbet) -> Self {
        self.nielsen_cbet_settings = Some(input);
        self
    }
    /// Complete these fields only if you want to insert watermarks of type Nielsen CBET
    pub fn set_nielsen_cbet_settings(
        mut self,
        input: std::option::Option<crate::types::NielsenCbet>,
    ) -> Self {
        self.nielsen_cbet_settings = input;
        self
    }
    /// Choose the distribution types that you want to assign to the watermarks: - PROGRAM_CONTENT - FINAL_DISTRIBUTOR
    pub fn nielsen_distribution_type(
        mut self,
        input: crate::types::NielsenWatermarksDistributionTypes,
    ) -> Self {
        self.nielsen_distribution_type = Some(input);
        self
    }
    /// Choose the distribution types that you want to assign to the watermarks: - PROGRAM_CONTENT - FINAL_DISTRIBUTOR
    pub fn set_nielsen_distribution_type(
        mut self,
        input: std::option::Option<crate::types::NielsenWatermarksDistributionTypes>,
    ) -> Self {
        self.nielsen_distribution_type = input;
        self
    }
    /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
    pub fn nielsen_naes_ii_nw_settings(mut self, input: crate::types::NielsenNaesIiNw) -> Self {
        self.nielsen_naes_ii_nw_settings = Some(input);
        self
    }
    /// Complete these fields only if you want to insert watermarks of type Nielsen NAES II (N2) and Nielsen NAES VI (NW).
    pub fn set_nielsen_naes_ii_nw_settings(
        mut self,
        input: std::option::Option<crate::types::NielsenNaesIiNw>,
    ) -> Self {
        self.nielsen_naes_ii_nw_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`NielsenWatermarksSettings`](crate::types::NielsenWatermarksSettings).
    pub fn build(self) -> crate::types::NielsenWatermarksSettings {
        crate::types::NielsenWatermarksSettings {
            nielsen_cbet_settings: self.nielsen_cbet_settings,
            nielsen_distribution_type: self.nielsen_distribution_type,
            nielsen_naes_ii_nw_settings: self.nielsen_naes_ii_nw_settings,
        }
    }
}
