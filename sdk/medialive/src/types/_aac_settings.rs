// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Aac Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AacSettings {
    /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
    #[doc(hidden)]
    pub bitrate: f64,
    /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    #[doc(hidden)]
    pub coding_mode: std::option::Option<crate::types::AacCodingMode>,
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
    #[doc(hidden)]
    pub input_type: std::option::Option<crate::types::AacInputType>,
    /// AAC Profile.
    #[doc(hidden)]
    pub profile: std::option::Option<crate::types::AacProfile>,
    /// Rate Control Mode.
    #[doc(hidden)]
    pub rate_control_mode: std::option::Option<crate::types::AacRateControlMode>,
    /// Sets LATM / LOAS AAC output for raw containers.
    #[doc(hidden)]
    pub raw_format: std::option::Option<crate::types::AacRawFormat>,
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    #[doc(hidden)]
    pub sample_rate: f64,
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    #[doc(hidden)]
    pub spec: std::option::Option<crate::types::AacSpec>,
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    #[doc(hidden)]
    pub vbr_quality: std::option::Option<crate::types::AacVbrQuality>,
}
impl AacSettings {
    /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
    pub fn bitrate(&self) -> f64 {
        self.bitrate
    }
    /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    pub fn coding_mode(&self) -> std::option::Option<&crate::types::AacCodingMode> {
        self.coding_mode.as_ref()
    }
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
    pub fn input_type(&self) -> std::option::Option<&crate::types::AacInputType> {
        self.input_type.as_ref()
    }
    /// AAC Profile.
    pub fn profile(&self) -> std::option::Option<&crate::types::AacProfile> {
        self.profile.as_ref()
    }
    /// Rate Control Mode.
    pub fn rate_control_mode(&self) -> std::option::Option<&crate::types::AacRateControlMode> {
        self.rate_control_mode.as_ref()
    }
    /// Sets LATM / LOAS AAC output for raw containers.
    pub fn raw_format(&self) -> std::option::Option<&crate::types::AacRawFormat> {
        self.raw_format.as_ref()
    }
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    pub fn sample_rate(&self) -> f64 {
        self.sample_rate
    }
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    pub fn spec(&self) -> std::option::Option<&crate::types::AacSpec> {
        self.spec.as_ref()
    }
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    pub fn vbr_quality(&self) -> std::option::Option<&crate::types::AacVbrQuality> {
        self.vbr_quality.as_ref()
    }
}
impl AacSettings {
    /// Creates a new builder-style object to manufacture [`AacSettings`](crate::types::AacSettings).
    pub fn builder() -> crate::types::builders::AacSettingsBuilder {
        crate::types::builders::AacSettingsBuilder::default()
    }
}

/// A builder for [`AacSettings`](crate::types::AacSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AacSettingsBuilder {
    pub(crate) bitrate: std::option::Option<f64>,
    pub(crate) coding_mode: std::option::Option<crate::types::AacCodingMode>,
    pub(crate) input_type: std::option::Option<crate::types::AacInputType>,
    pub(crate) profile: std::option::Option<crate::types::AacProfile>,
    pub(crate) rate_control_mode: std::option::Option<crate::types::AacRateControlMode>,
    pub(crate) raw_format: std::option::Option<crate::types::AacRawFormat>,
    pub(crate) sample_rate: std::option::Option<f64>,
    pub(crate) spec: std::option::Option<crate::types::AacSpec>,
    pub(crate) vbr_quality: std::option::Option<crate::types::AacVbrQuality>,
}
impl AacSettingsBuilder {
    /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
    pub fn bitrate(mut self, input: f64) -> Self {
        self.bitrate = Some(input);
        self
    }
    /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
    pub fn set_bitrate(mut self, input: std::option::Option<f64>) -> Self {
        self.bitrate = input;
        self
    }
    /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    pub fn coding_mode(mut self, input: crate::types::AacCodingMode) -> Self {
        self.coding_mode = Some(input);
        self
    }
    /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
    pub fn set_coding_mode(
        mut self,
        input: std::option::Option<crate::types::AacCodingMode>,
    ) -> Self {
        self.coding_mode = input;
        self
    }
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
    pub fn input_type(mut self, input: crate::types::AacInputType) -> Self {
        self.input_type = Some(input);
        self
    }
    /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
    pub fn set_input_type(
        mut self,
        input: std::option::Option<crate::types::AacInputType>,
    ) -> Self {
        self.input_type = input;
        self
    }
    /// AAC Profile.
    pub fn profile(mut self, input: crate::types::AacProfile) -> Self {
        self.profile = Some(input);
        self
    }
    /// AAC Profile.
    pub fn set_profile(mut self, input: std::option::Option<crate::types::AacProfile>) -> Self {
        self.profile = input;
        self
    }
    /// Rate Control Mode.
    pub fn rate_control_mode(mut self, input: crate::types::AacRateControlMode) -> Self {
        self.rate_control_mode = Some(input);
        self
    }
    /// Rate Control Mode.
    pub fn set_rate_control_mode(
        mut self,
        input: std::option::Option<crate::types::AacRateControlMode>,
    ) -> Self {
        self.rate_control_mode = input;
        self
    }
    /// Sets LATM / LOAS AAC output for raw containers.
    pub fn raw_format(mut self, input: crate::types::AacRawFormat) -> Self {
        self.raw_format = Some(input);
        self
    }
    /// Sets LATM / LOAS AAC output for raw containers.
    pub fn set_raw_format(
        mut self,
        input: std::option::Option<crate::types::AacRawFormat>,
    ) -> Self {
        self.raw_format = input;
        self
    }
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    pub fn sample_rate(mut self, input: f64) -> Self {
        self.sample_rate = Some(input);
        self
    }
    /// Sample rate in Hz. Valid values depend on rate control mode and profile.
    pub fn set_sample_rate(mut self, input: std::option::Option<f64>) -> Self {
        self.sample_rate = input;
        self
    }
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    pub fn spec(mut self, input: crate::types::AacSpec) -> Self {
        self.spec = Some(input);
        self
    }
    /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
    pub fn set_spec(mut self, input: std::option::Option<crate::types::AacSpec>) -> Self {
        self.spec = input;
        self
    }
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    pub fn vbr_quality(mut self, input: crate::types::AacVbrQuality) -> Self {
        self.vbr_quality = Some(input);
        self
    }
    /// VBR Quality Level - Only used if rateControlMode is VBR.
    pub fn set_vbr_quality(
        mut self,
        input: std::option::Option<crate::types::AacVbrQuality>,
    ) -> Self {
        self.vbr_quality = input;
        self
    }
    /// Consumes the builder and constructs a [`AacSettings`](crate::types::AacSettings).
    pub fn build(self) -> crate::types::AacSettings {
        crate::types::AacSettings {
            bitrate: self.bitrate.unwrap_or_default(),
            coding_mode: self.coding_mode,
            input_type: self.input_type,
            profile: self.profile,
            rate_control_mode: self.rate_control_mode,
            raw_format: self.raw_format,
            sample_rate: self.sample_rate.unwrap_or_default(),
            spec: self.spec,
            vbr_quality: self.vbr_quality,
        }
    }
}
