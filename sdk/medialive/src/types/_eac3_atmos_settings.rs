// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Eac3 Atmos Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Eac3AtmosSettings {
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode. // * @affectsRightSizing true
    #[doc(hidden)]
    pub bitrate: f64,
    /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
    #[doc(hidden)]
    pub coding_mode: std::option::Option<crate::types::Eac3AtmosCodingMode>,
    /// Sets the dialnorm for the output. Default 23.
    #[doc(hidden)]
    pub dialnorm: i32,
    /// Sets the Dolby dynamic range compression profile.
    #[doc(hidden)]
    pub drc_line: std::option::Option<crate::types::Eac3AtmosDrcLine>,
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    #[doc(hidden)]
    pub drc_rf: std::option::Option<crate::types::Eac3AtmosDrcRf>,
    /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    #[doc(hidden)]
    pub height_trim: f64,
    /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    #[doc(hidden)]
    pub surround_trim: f64,
}
impl Eac3AtmosSettings {
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode. // * @affectsRightSizing true
    pub fn bitrate(&self) -> f64 {
        self.bitrate
    }
    /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
    pub fn coding_mode(&self) -> std::option::Option<&crate::types::Eac3AtmosCodingMode> {
        self.coding_mode.as_ref()
    }
    /// Sets the dialnorm for the output. Default 23.
    pub fn dialnorm(&self) -> i32 {
        self.dialnorm
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn drc_line(&self) -> std::option::Option<&crate::types::Eac3AtmosDrcLine> {
        self.drc_line.as_ref()
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn drc_rf(&self) -> std::option::Option<&crate::types::Eac3AtmosDrcRf> {
        self.drc_rf.as_ref()
    }
    /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn height_trim(&self) -> f64 {
        self.height_trim
    }
    /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn surround_trim(&self) -> f64 {
        self.surround_trim
    }
}
impl Eac3AtmosSettings {
    /// Creates a new builder-style object to manufacture [`Eac3AtmosSettings`](crate::types::Eac3AtmosSettings).
    pub fn builder() -> crate::types::builders::Eac3AtmosSettingsBuilder {
        crate::types::builders::Eac3AtmosSettingsBuilder::default()
    }
}

/// A builder for [`Eac3AtmosSettings`](crate::types::Eac3AtmosSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Eac3AtmosSettingsBuilder {
    pub(crate) bitrate: std::option::Option<f64>,
    pub(crate) coding_mode: std::option::Option<crate::types::Eac3AtmosCodingMode>,
    pub(crate) dialnorm: std::option::Option<i32>,
    pub(crate) drc_line: std::option::Option<crate::types::Eac3AtmosDrcLine>,
    pub(crate) drc_rf: std::option::Option<crate::types::Eac3AtmosDrcRf>,
    pub(crate) height_trim: std::option::Option<f64>,
    pub(crate) surround_trim: std::option::Option<f64>,
}
impl Eac3AtmosSettingsBuilder {
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode. // * @affectsRightSizing true
    pub fn bitrate(mut self, input: f64) -> Self {
        self.bitrate = Some(input);
        self
    }
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode. // * @affectsRightSizing true
    pub fn set_bitrate(mut self, input: std::option::Option<f64>) -> Self {
        self.bitrate = input;
        self
    }
    /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
    pub fn coding_mode(mut self, input: crate::types::Eac3AtmosCodingMode) -> Self {
        self.coding_mode = Some(input);
        self
    }
    /// Dolby Digital Plus with Dolby Atmos coding mode. Determines number of channels.
    pub fn set_coding_mode(
        mut self,
        input: std::option::Option<crate::types::Eac3AtmosCodingMode>,
    ) -> Self {
        self.coding_mode = input;
        self
    }
    /// Sets the dialnorm for the output. Default 23.
    pub fn dialnorm(mut self, input: i32) -> Self {
        self.dialnorm = Some(input);
        self
    }
    /// Sets the dialnorm for the output. Default 23.
    pub fn set_dialnorm(mut self, input: std::option::Option<i32>) -> Self {
        self.dialnorm = input;
        self
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn drc_line(mut self, input: crate::types::Eac3AtmosDrcLine) -> Self {
        self.drc_line = Some(input);
        self
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn set_drc_line(
        mut self,
        input: std::option::Option<crate::types::Eac3AtmosDrcLine>,
    ) -> Self {
        self.drc_line = input;
        self
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn drc_rf(mut self, input: crate::types::Eac3AtmosDrcRf) -> Self {
        self.drc_rf = Some(input);
        self
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn set_drc_rf(mut self, input: std::option::Option<crate::types::Eac3AtmosDrcRf>) -> Self {
        self.drc_rf = input;
        self
    }
    /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn height_trim(mut self, input: f64) -> Self {
        self.height_trim = Some(input);
        self
    }
    /// Height dimensional trim. Sets the maximum amount to attenuate the height channels when the downstream player isn??t configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn set_height_trim(mut self, input: std::option::Option<f64>) -> Self {
        self.height_trim = input;
        self
    }
    /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn surround_trim(mut self, input: f64) -> Self {
        self.surround_trim = Some(input);
        self
    }
    /// Surround dimensional trim. Sets the maximum amount to attenuate the surround channels when the downstream player isn't configured to handle Dolby Digital Plus with Dolby Atmos and must remix the channels.
    pub fn set_surround_trim(mut self, input: std::option::Option<f64>) -> Self {
        self.surround_trim = input;
        self
    }
    /// Consumes the builder and constructs a [`Eac3AtmosSettings`](crate::types::Eac3AtmosSettings).
    pub fn build(self) -> crate::types::Eac3AtmosSettings {
        crate::types::Eac3AtmosSettings {
            bitrate: self.bitrate.unwrap_or_default(),
            coding_mode: self.coding_mode,
            dialnorm: self.dialnorm.unwrap_or_default(),
            drc_line: self.drc_line,
            drc_rf: self.drc_rf,
            height_trim: self.height_trim.unwrap_or_default(),
            surround_trim: self.surround_trim.unwrap_or_default(),
        }
    }
}
