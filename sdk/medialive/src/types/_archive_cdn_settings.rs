// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Archive Cdn Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArchiveCdnSettings {
    /// Archive S3 Settings
    #[doc(hidden)]
    pub archive_s3_settings: std::option::Option<crate::types::ArchiveS3Settings>,
}
impl ArchiveCdnSettings {
    /// Archive S3 Settings
    pub fn archive_s3_settings(&self) -> std::option::Option<&crate::types::ArchiveS3Settings> {
        self.archive_s3_settings.as_ref()
    }
}
impl ArchiveCdnSettings {
    /// Creates a new builder-style object to manufacture [`ArchiveCdnSettings`](crate::types::ArchiveCdnSettings).
    pub fn builder() -> crate::types::builders::ArchiveCdnSettingsBuilder {
        crate::types::builders::ArchiveCdnSettingsBuilder::default()
    }
}

/// A builder for [`ArchiveCdnSettings`](crate::types::ArchiveCdnSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArchiveCdnSettingsBuilder {
    pub(crate) archive_s3_settings: std::option::Option<crate::types::ArchiveS3Settings>,
}
impl ArchiveCdnSettingsBuilder {
    /// Archive S3 Settings
    pub fn archive_s3_settings(mut self, input: crate::types::ArchiveS3Settings) -> Self {
        self.archive_s3_settings = Some(input);
        self
    }
    /// Archive S3 Settings
    pub fn set_archive_s3_settings(
        mut self,
        input: std::option::Option<crate::types::ArchiveS3Settings>,
    ) -> Self {
        self.archive_s3_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`ArchiveCdnSettings`](crate::types::ArchiveCdnSettings).
    pub fn build(self) -> crate::types::ArchiveCdnSettings {
        crate::types::ArchiveCdnSettings {
            archive_s3_settings: self.archive_s3_settings,
        }
    }
}
