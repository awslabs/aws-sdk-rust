// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Caption Destination Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptionDestinationSettings {
    /// Arib Destination Settings
    #[doc(hidden)]
    pub arib_destination_settings: std::option::Option<crate::types::AribDestinationSettings>,
    /// Burn In Destination Settings
    #[doc(hidden)]
    pub burn_in_destination_settings: std::option::Option<crate::types::BurnInDestinationSettings>,
    /// Dvb Sub Destination Settings
    #[doc(hidden)]
    pub dvb_sub_destination_settings: std::option::Option<crate::types::DvbSubDestinationSettings>,
    /// Ebu Tt DDestination Settings
    #[doc(hidden)]
    pub ebu_tt_d_destination_settings: std::option::Option<crate::types::EbuTtDDestinationSettings>,
    /// Embedded Destination Settings
    #[doc(hidden)]
    pub embedded_destination_settings:
        std::option::Option<crate::types::EmbeddedDestinationSettings>,
    /// Embedded Plus Scte20 Destination Settings
    #[doc(hidden)]
    pub embedded_plus_scte20_destination_settings:
        std::option::Option<crate::types::EmbeddedPlusScte20DestinationSettings>,
    /// Rtmp Caption Info Destination Settings
    #[doc(hidden)]
    pub rtmp_caption_info_destination_settings:
        std::option::Option<crate::types::RtmpCaptionInfoDestinationSettings>,
    /// Scte20 Plus Embedded Destination Settings
    #[doc(hidden)]
    pub scte20_plus_embedded_destination_settings:
        std::option::Option<crate::types::Scte20PlusEmbeddedDestinationSettings>,
    /// Scte27 Destination Settings
    #[doc(hidden)]
    pub scte27_destination_settings: std::option::Option<crate::types::Scte27DestinationSettings>,
    /// Smpte Tt Destination Settings
    #[doc(hidden)]
    pub smpte_tt_destination_settings:
        std::option::Option<crate::types::SmpteTtDestinationSettings>,
    /// Teletext Destination Settings
    #[doc(hidden)]
    pub teletext_destination_settings:
        std::option::Option<crate::types::TeletextDestinationSettings>,
    /// Ttml Destination Settings
    #[doc(hidden)]
    pub ttml_destination_settings: std::option::Option<crate::types::TtmlDestinationSettings>,
    /// Webvtt Destination Settings
    #[doc(hidden)]
    pub webvtt_destination_settings: std::option::Option<crate::types::WebvttDestinationSettings>,
}
impl CaptionDestinationSettings {
    /// Arib Destination Settings
    pub fn arib_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::AribDestinationSettings> {
        self.arib_destination_settings.as_ref()
    }
    /// Burn In Destination Settings
    pub fn burn_in_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::BurnInDestinationSettings> {
        self.burn_in_destination_settings.as_ref()
    }
    /// Dvb Sub Destination Settings
    pub fn dvb_sub_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::DvbSubDestinationSettings> {
        self.dvb_sub_destination_settings.as_ref()
    }
    /// Ebu Tt DDestination Settings
    pub fn ebu_tt_d_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::EbuTtDDestinationSettings> {
        self.ebu_tt_d_destination_settings.as_ref()
    }
    /// Embedded Destination Settings
    pub fn embedded_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::EmbeddedDestinationSettings> {
        self.embedded_destination_settings.as_ref()
    }
    /// Embedded Plus Scte20 Destination Settings
    pub fn embedded_plus_scte20_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::EmbeddedPlusScte20DestinationSettings> {
        self.embedded_plus_scte20_destination_settings.as_ref()
    }
    /// Rtmp Caption Info Destination Settings
    pub fn rtmp_caption_info_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::RtmpCaptionInfoDestinationSettings> {
        self.rtmp_caption_info_destination_settings.as_ref()
    }
    /// Scte20 Plus Embedded Destination Settings
    pub fn scte20_plus_embedded_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::Scte20PlusEmbeddedDestinationSettings> {
        self.scte20_plus_embedded_destination_settings.as_ref()
    }
    /// Scte27 Destination Settings
    pub fn scte27_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::Scte27DestinationSettings> {
        self.scte27_destination_settings.as_ref()
    }
    /// Smpte Tt Destination Settings
    pub fn smpte_tt_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::SmpteTtDestinationSettings> {
        self.smpte_tt_destination_settings.as_ref()
    }
    /// Teletext Destination Settings
    pub fn teletext_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::TeletextDestinationSettings> {
        self.teletext_destination_settings.as_ref()
    }
    /// Ttml Destination Settings
    pub fn ttml_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::TtmlDestinationSettings> {
        self.ttml_destination_settings.as_ref()
    }
    /// Webvtt Destination Settings
    pub fn webvtt_destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::WebvttDestinationSettings> {
        self.webvtt_destination_settings.as_ref()
    }
}
impl CaptionDestinationSettings {
    /// Creates a new builder-style object to manufacture [`CaptionDestinationSettings`](crate::types::CaptionDestinationSettings).
    pub fn builder() -> crate::types::builders::CaptionDestinationSettingsBuilder {
        crate::types::builders::CaptionDestinationSettingsBuilder::default()
    }
}

/// A builder for [`CaptionDestinationSettings`](crate::types::CaptionDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptionDestinationSettingsBuilder {
    pub(crate) arib_destination_settings:
        std::option::Option<crate::types::AribDestinationSettings>,
    pub(crate) burn_in_destination_settings:
        std::option::Option<crate::types::BurnInDestinationSettings>,
    pub(crate) dvb_sub_destination_settings:
        std::option::Option<crate::types::DvbSubDestinationSettings>,
    pub(crate) ebu_tt_d_destination_settings:
        std::option::Option<crate::types::EbuTtDDestinationSettings>,
    pub(crate) embedded_destination_settings:
        std::option::Option<crate::types::EmbeddedDestinationSettings>,
    pub(crate) embedded_plus_scte20_destination_settings:
        std::option::Option<crate::types::EmbeddedPlusScte20DestinationSettings>,
    pub(crate) rtmp_caption_info_destination_settings:
        std::option::Option<crate::types::RtmpCaptionInfoDestinationSettings>,
    pub(crate) scte20_plus_embedded_destination_settings:
        std::option::Option<crate::types::Scte20PlusEmbeddedDestinationSettings>,
    pub(crate) scte27_destination_settings:
        std::option::Option<crate::types::Scte27DestinationSettings>,
    pub(crate) smpte_tt_destination_settings:
        std::option::Option<crate::types::SmpteTtDestinationSettings>,
    pub(crate) teletext_destination_settings:
        std::option::Option<crate::types::TeletextDestinationSettings>,
    pub(crate) ttml_destination_settings:
        std::option::Option<crate::types::TtmlDestinationSettings>,
    pub(crate) webvtt_destination_settings:
        std::option::Option<crate::types::WebvttDestinationSettings>,
}
impl CaptionDestinationSettingsBuilder {
    /// Arib Destination Settings
    pub fn arib_destination_settings(
        mut self,
        input: crate::types::AribDestinationSettings,
    ) -> Self {
        self.arib_destination_settings = Some(input);
        self
    }
    /// Arib Destination Settings
    pub fn set_arib_destination_settings(
        mut self,
        input: std::option::Option<crate::types::AribDestinationSettings>,
    ) -> Self {
        self.arib_destination_settings = input;
        self
    }
    /// Burn In Destination Settings
    pub fn burn_in_destination_settings(
        mut self,
        input: crate::types::BurnInDestinationSettings,
    ) -> Self {
        self.burn_in_destination_settings = Some(input);
        self
    }
    /// Burn In Destination Settings
    pub fn set_burn_in_destination_settings(
        mut self,
        input: std::option::Option<crate::types::BurnInDestinationSettings>,
    ) -> Self {
        self.burn_in_destination_settings = input;
        self
    }
    /// Dvb Sub Destination Settings
    pub fn dvb_sub_destination_settings(
        mut self,
        input: crate::types::DvbSubDestinationSettings,
    ) -> Self {
        self.dvb_sub_destination_settings = Some(input);
        self
    }
    /// Dvb Sub Destination Settings
    pub fn set_dvb_sub_destination_settings(
        mut self,
        input: std::option::Option<crate::types::DvbSubDestinationSettings>,
    ) -> Self {
        self.dvb_sub_destination_settings = input;
        self
    }
    /// Ebu Tt DDestination Settings
    pub fn ebu_tt_d_destination_settings(
        mut self,
        input: crate::types::EbuTtDDestinationSettings,
    ) -> Self {
        self.ebu_tt_d_destination_settings = Some(input);
        self
    }
    /// Ebu Tt DDestination Settings
    pub fn set_ebu_tt_d_destination_settings(
        mut self,
        input: std::option::Option<crate::types::EbuTtDDestinationSettings>,
    ) -> Self {
        self.ebu_tt_d_destination_settings = input;
        self
    }
    /// Embedded Destination Settings
    pub fn embedded_destination_settings(
        mut self,
        input: crate::types::EmbeddedDestinationSettings,
    ) -> Self {
        self.embedded_destination_settings = Some(input);
        self
    }
    /// Embedded Destination Settings
    pub fn set_embedded_destination_settings(
        mut self,
        input: std::option::Option<crate::types::EmbeddedDestinationSettings>,
    ) -> Self {
        self.embedded_destination_settings = input;
        self
    }
    /// Embedded Plus Scte20 Destination Settings
    pub fn embedded_plus_scte20_destination_settings(
        mut self,
        input: crate::types::EmbeddedPlusScte20DestinationSettings,
    ) -> Self {
        self.embedded_plus_scte20_destination_settings = Some(input);
        self
    }
    /// Embedded Plus Scte20 Destination Settings
    pub fn set_embedded_plus_scte20_destination_settings(
        mut self,
        input: std::option::Option<crate::types::EmbeddedPlusScte20DestinationSettings>,
    ) -> Self {
        self.embedded_plus_scte20_destination_settings = input;
        self
    }
    /// Rtmp Caption Info Destination Settings
    pub fn rtmp_caption_info_destination_settings(
        mut self,
        input: crate::types::RtmpCaptionInfoDestinationSettings,
    ) -> Self {
        self.rtmp_caption_info_destination_settings = Some(input);
        self
    }
    /// Rtmp Caption Info Destination Settings
    pub fn set_rtmp_caption_info_destination_settings(
        mut self,
        input: std::option::Option<crate::types::RtmpCaptionInfoDestinationSettings>,
    ) -> Self {
        self.rtmp_caption_info_destination_settings = input;
        self
    }
    /// Scte20 Plus Embedded Destination Settings
    pub fn scte20_plus_embedded_destination_settings(
        mut self,
        input: crate::types::Scte20PlusEmbeddedDestinationSettings,
    ) -> Self {
        self.scte20_plus_embedded_destination_settings = Some(input);
        self
    }
    /// Scte20 Plus Embedded Destination Settings
    pub fn set_scte20_plus_embedded_destination_settings(
        mut self,
        input: std::option::Option<crate::types::Scte20PlusEmbeddedDestinationSettings>,
    ) -> Self {
        self.scte20_plus_embedded_destination_settings = input;
        self
    }
    /// Scte27 Destination Settings
    pub fn scte27_destination_settings(
        mut self,
        input: crate::types::Scte27DestinationSettings,
    ) -> Self {
        self.scte27_destination_settings = Some(input);
        self
    }
    /// Scte27 Destination Settings
    pub fn set_scte27_destination_settings(
        mut self,
        input: std::option::Option<crate::types::Scte27DestinationSettings>,
    ) -> Self {
        self.scte27_destination_settings = input;
        self
    }
    /// Smpte Tt Destination Settings
    pub fn smpte_tt_destination_settings(
        mut self,
        input: crate::types::SmpteTtDestinationSettings,
    ) -> Self {
        self.smpte_tt_destination_settings = Some(input);
        self
    }
    /// Smpte Tt Destination Settings
    pub fn set_smpte_tt_destination_settings(
        mut self,
        input: std::option::Option<crate::types::SmpteTtDestinationSettings>,
    ) -> Self {
        self.smpte_tt_destination_settings = input;
        self
    }
    /// Teletext Destination Settings
    pub fn teletext_destination_settings(
        mut self,
        input: crate::types::TeletextDestinationSettings,
    ) -> Self {
        self.teletext_destination_settings = Some(input);
        self
    }
    /// Teletext Destination Settings
    pub fn set_teletext_destination_settings(
        mut self,
        input: std::option::Option<crate::types::TeletextDestinationSettings>,
    ) -> Self {
        self.teletext_destination_settings = input;
        self
    }
    /// Ttml Destination Settings
    pub fn ttml_destination_settings(
        mut self,
        input: crate::types::TtmlDestinationSettings,
    ) -> Self {
        self.ttml_destination_settings = Some(input);
        self
    }
    /// Ttml Destination Settings
    pub fn set_ttml_destination_settings(
        mut self,
        input: std::option::Option<crate::types::TtmlDestinationSettings>,
    ) -> Self {
        self.ttml_destination_settings = input;
        self
    }
    /// Webvtt Destination Settings
    pub fn webvtt_destination_settings(
        mut self,
        input: crate::types::WebvttDestinationSettings,
    ) -> Self {
        self.webvtt_destination_settings = Some(input);
        self
    }
    /// Webvtt Destination Settings
    pub fn set_webvtt_destination_settings(
        mut self,
        input: std::option::Option<crate::types::WebvttDestinationSettings>,
    ) -> Self {
        self.webvtt_destination_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptionDestinationSettings`](crate::types::CaptionDestinationSettings).
    pub fn build(self) -> crate::types::CaptionDestinationSettings {
        crate::types::CaptionDestinationSettings {
            arib_destination_settings: self.arib_destination_settings,
            burn_in_destination_settings: self.burn_in_destination_settings,
            dvb_sub_destination_settings: self.dvb_sub_destination_settings,
            ebu_tt_d_destination_settings: self.ebu_tt_d_destination_settings,
            embedded_destination_settings: self.embedded_destination_settings,
            embedded_plus_scte20_destination_settings: self
                .embedded_plus_scte20_destination_settings,
            rtmp_caption_info_destination_settings: self.rtmp_caption_info_destination_settings,
            scte20_plus_embedded_destination_settings: self
                .scte20_plus_embedded_destination_settings,
            scte27_destination_settings: self.scte27_destination_settings,
            smpte_tt_destination_settings: self.smpte_tt_destination_settings,
            teletext_destination_settings: self.teletext_destination_settings,
            ttml_destination_settings: self.ttml_destination_settings,
            webvtt_destination_settings: self.webvtt_destination_settings,
        }
    }
}
