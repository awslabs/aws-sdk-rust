// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Hls Webdav Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsWebdavSettings {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    #[doc(hidden)]
    pub connection_retry_interval: i32,
    /// Size in seconds of file cache for streaming outputs.
    #[doc(hidden)]
    pub filecache_duration: i32,
    /// Specify whether or not to use chunked transfer encoding to WebDAV.
    #[doc(hidden)]
    pub http_transfer_mode: std::option::Option<crate::types::HlsWebdavHttpTransferMode>,
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    #[doc(hidden)]
    pub num_retries: i32,
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    #[doc(hidden)]
    pub restart_delay: i32,
}
impl HlsWebdavSettings {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn connection_retry_interval(&self) -> i32 {
        self.connection_retry_interval
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(&self) -> i32 {
        self.filecache_duration
    }
    /// Specify whether or not to use chunked transfer encoding to WebDAV.
    pub fn http_transfer_mode(
        &self,
    ) -> std::option::Option<&crate::types::HlsWebdavHttpTransferMode> {
        self.http_transfer_mode.as_ref()
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn num_retries(&self) -> i32 {
        self.num_retries
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn restart_delay(&self) -> i32 {
        self.restart_delay
    }
}
impl HlsWebdavSettings {
    /// Creates a new builder-style object to manufacture [`HlsWebdavSettings`](crate::types::HlsWebdavSettings).
    pub fn builder() -> crate::types::builders::HlsWebdavSettingsBuilder {
        crate::types::builders::HlsWebdavSettingsBuilder::default()
    }
}

/// A builder for [`HlsWebdavSettings`](crate::types::HlsWebdavSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsWebdavSettingsBuilder {
    pub(crate) connection_retry_interval: std::option::Option<i32>,
    pub(crate) filecache_duration: std::option::Option<i32>,
    pub(crate) http_transfer_mode: std::option::Option<crate::types::HlsWebdavHttpTransferMode>,
    pub(crate) num_retries: std::option::Option<i32>,
    pub(crate) restart_delay: std::option::Option<i32>,
}
impl HlsWebdavSettingsBuilder {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn connection_retry_interval(mut self, input: i32) -> Self {
        self.connection_retry_interval = Some(input);
        self
    }
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn set_connection_retry_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.connection_retry_interval = input;
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(mut self, input: i32) -> Self {
        self.filecache_duration = Some(input);
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn set_filecache_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.filecache_duration = input;
        self
    }
    /// Specify whether or not to use chunked transfer encoding to WebDAV.
    pub fn http_transfer_mode(mut self, input: crate::types::HlsWebdavHttpTransferMode) -> Self {
        self.http_transfer_mode = Some(input);
        self
    }
    /// Specify whether or not to use chunked transfer encoding to WebDAV.
    pub fn set_http_transfer_mode(
        mut self,
        input: std::option::Option<crate::types::HlsWebdavHttpTransferMode>,
    ) -> Self {
        self.http_transfer_mode = input;
        self
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn num_retries(mut self, input: i32) -> Self {
        self.num_retries = Some(input);
        self
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn set_num_retries(mut self, input: std::option::Option<i32>) -> Self {
        self.num_retries = input;
        self
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn restart_delay(mut self, input: i32) -> Self {
        self.restart_delay = Some(input);
        self
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn set_restart_delay(mut self, input: std::option::Option<i32>) -> Self {
        self.restart_delay = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsWebdavSettings`](crate::types::HlsWebdavSettings).
    pub fn build(self) -> crate::types::HlsWebdavSettings {
        crate::types::HlsWebdavSettings {
            connection_retry_interval: self.connection_retry_interval.unwrap_or_default(),
            filecache_duration: self.filecache_duration.unwrap_or_default(),
            http_transfer_mode: self.http_transfer_mode,
            num_retries: self.num_retries.unwrap_or_default(),
            restart_delay: self.restart_delay.unwrap_or_default(),
        }
    }
}
