// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains information on a single schedule action.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduleAction {
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    pub action_name: ::std::option::Option<::std::string::String>,
    /// Settings for this schedule action.
    pub schedule_action_settings: ::std::option::Option<crate::types::ScheduleActionSettings>,
    /// The time for the action to start in the channel.
    pub schedule_action_start_settings: ::std::option::Option<crate::types::ScheduleActionStartSettings>,
}
impl ScheduleAction {
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    pub fn action_name(&self) -> ::std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// Settings for this schedule action.
    pub fn schedule_action_settings(&self) -> ::std::option::Option<&crate::types::ScheduleActionSettings> {
        self.schedule_action_settings.as_ref()
    }
    /// The time for the action to start in the channel.
    pub fn schedule_action_start_settings(&self) -> ::std::option::Option<&crate::types::ScheduleActionStartSettings> {
        self.schedule_action_start_settings.as_ref()
    }
}
impl ScheduleAction {
    /// Creates a new builder-style object to manufacture [`ScheduleAction`](crate::types::ScheduleAction).
    pub fn builder() -> crate::types::builders::ScheduleActionBuilder {
        crate::types::builders::ScheduleActionBuilder::default()
    }
}

/// A builder for [`ScheduleAction`](crate::types::ScheduleAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduleActionBuilder {
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_action_settings: ::std::option::Option<crate::types::ScheduleActionSettings>,
    pub(crate) schedule_action_start_settings: ::std::option::Option<crate::types::ScheduleActionStartSettings>,
}
impl ScheduleActionBuilder {
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    /// This field is required.
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// Settings for this schedule action.
    /// This field is required.
    pub fn schedule_action_settings(mut self, input: crate::types::ScheduleActionSettings) -> Self {
        self.schedule_action_settings = ::std::option::Option::Some(input);
        self
    }
    /// Settings for this schedule action.
    pub fn set_schedule_action_settings(mut self, input: ::std::option::Option<crate::types::ScheduleActionSettings>) -> Self {
        self.schedule_action_settings = input;
        self
    }
    /// Settings for this schedule action.
    pub fn get_schedule_action_settings(&self) -> &::std::option::Option<crate::types::ScheduleActionSettings> {
        &self.schedule_action_settings
    }
    /// The time for the action to start in the channel.
    /// This field is required.
    pub fn schedule_action_start_settings(mut self, input: crate::types::ScheduleActionStartSettings) -> Self {
        self.schedule_action_start_settings = ::std::option::Option::Some(input);
        self
    }
    /// The time for the action to start in the channel.
    pub fn set_schedule_action_start_settings(mut self, input: ::std::option::Option<crate::types::ScheduleActionStartSettings>) -> Self {
        self.schedule_action_start_settings = input;
        self
    }
    /// The time for the action to start in the channel.
    pub fn get_schedule_action_start_settings(&self) -> &::std::option::Option<crate::types::ScheduleActionStartSettings> {
        &self.schedule_action_start_settings
    }
    /// Consumes the builder and constructs a [`ScheduleAction`](crate::types::ScheduleAction).
    pub fn build(self) -> crate::types::ScheduleAction {
        crate::types::ScheduleAction {
            action_name: self.action_name,
            schedule_action_settings: self.schedule_action_settings,
            schedule_action_start_settings: self.schedule_action_start_settings,
        }
    }
}
