// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Transport stream service descriptor configuration for the Multiplex program.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultiplexProgramServiceDescriptor {
    /// Name of the provider.
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// Name of the service.
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
}
impl MultiplexProgramServiceDescriptor {
    /// Name of the provider.
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// Name of the service.
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
}
impl MultiplexProgramServiceDescriptor {
    /// Creates a new builder-style object to manufacture [`MultiplexProgramServiceDescriptor`](crate::types::MultiplexProgramServiceDescriptor).
    pub fn builder() -> crate::types::builders::MultiplexProgramServiceDescriptorBuilder {
        crate::types::builders::MultiplexProgramServiceDescriptorBuilder::default()
    }
}

/// A builder for [`MultiplexProgramServiceDescriptor`](crate::types::MultiplexProgramServiceDescriptor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultiplexProgramServiceDescriptorBuilder {
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
}
impl MultiplexProgramServiceDescriptorBuilder {
    /// Name of the provider.
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// Name of the provider.
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// Name of the service.
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// Name of the service.
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// Consumes the builder and constructs a [`MultiplexProgramServiceDescriptor`](crate::types::MultiplexProgramServiceDescriptor).
    pub fn build(self) -> crate::types::MultiplexProgramServiceDescriptor {
        crate::types::MultiplexProgramServiceDescriptor {
            provider_name: self.provider_name,
            service_name: self.service_name,
        }
    }
}
