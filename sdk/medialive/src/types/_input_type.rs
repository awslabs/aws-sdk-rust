// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InputType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let inputtype = unimplemented!();
/// match inputtype {
///     InputType::AwsCdi => { /* ... */ },
///     InputType::InputDevice => { /* ... */ },
///     InputType::Mediaconnect => { /* ... */ },
///     InputType::Mp4File => { /* ... */ },
///     InputType::RtmpPull => { /* ... */ },
///     InputType::RtmpPush => { /* ... */ },
///     InputType::RtpPush => { /* ... */ },
///     InputType::TsFile => { /* ... */ },
///     InputType::UdpPush => { /* ... */ },
///     InputType::UrlPull => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `inputtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InputType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InputType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InputType::NewFeature` is defined.
/// Specifically, when `inputtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InputType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// The different types of inputs that AWS Elemental MediaLive supports.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InputType {
    #[allow(missing_docs)] // documentation missing in model
    AwsCdi,
    #[allow(missing_docs)] // documentation missing in model
    InputDevice,
    #[allow(missing_docs)] // documentation missing in model
    Mediaconnect,
    #[allow(missing_docs)] // documentation missing in model
    Mp4File,
    #[allow(missing_docs)] // documentation missing in model
    RtmpPull,
    #[allow(missing_docs)] // documentation missing in model
    RtmpPush,
    #[allow(missing_docs)] // documentation missing in model
    RtpPush,
    #[allow(missing_docs)] // documentation missing in model
    TsFile,
    #[allow(missing_docs)] // documentation missing in model
    UdpPush,
    #[allow(missing_docs)] // documentation missing in model
    UrlPull,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for InputType {
    fn from(s: &str) -> Self {
        match s {
            "AWS_CDI" => InputType::AwsCdi,
            "INPUT_DEVICE" => InputType::InputDevice,
            "MEDIACONNECT" => InputType::Mediaconnect,
            "MP4_FILE" => InputType::Mp4File,
            "RTMP_PULL" => InputType::RtmpPull,
            "RTMP_PUSH" => InputType::RtmpPush,
            "RTP_PUSH" => InputType::RtpPush,
            "TS_FILE" => InputType::TsFile,
            "UDP_PUSH" => InputType::UdpPush,
            "URL_PULL" => InputType::UrlPull,
            other => InputType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for InputType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InputType::from(s))
    }
}
impl InputType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InputType::AwsCdi => "AWS_CDI",
            InputType::InputDevice => "INPUT_DEVICE",
            InputType::Mediaconnect => "MEDIACONNECT",
            InputType::Mp4File => "MP4_FILE",
            InputType::RtmpPull => "RTMP_PULL",
            InputType::RtmpPush => "RTMP_PUSH",
            InputType::RtpPush => "RTP_PUSH",
            InputType::TsFile => "TS_FILE",
            InputType::UdpPush => "UDP_PUSH",
            InputType::UrlPull => "URL_PULL",
            InputType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS_CDI",
            "INPUT_DEVICE",
            "MEDIACONNECT",
            "MP4_FILE",
            "RTMP_PULL",
            "RTMP_PUSH",
            "RTP_PUSH",
            "TS_FILE",
            "UDP_PUSH",
            "URL_PULL",
        ]
    }
}
impl AsRef<str> for InputType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
