// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Pair of multicast url and source ip address (optional) that make up a multicast source.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MulticastSourceCreateRequest {
    /// This represents the ip address of the device sending the multicast stream.
    pub source_ip: ::std::option::Option<::std::string::String>,
    /// This represents the customer's source URL where multicast stream is pulled from.
    pub url: ::std::option::Option<::std::string::String>,
}
impl MulticastSourceCreateRequest {
    /// This represents the ip address of the device sending the multicast stream.
    pub fn source_ip(&self) -> ::std::option::Option<&str> {
        self.source_ip.as_deref()
    }
    /// This represents the customer's source URL where multicast stream is pulled from.
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl MulticastSourceCreateRequest {
    /// Creates a new builder-style object to manufacture [`MulticastSourceCreateRequest`](crate::types::MulticastSourceCreateRequest).
    pub fn builder() -> crate::types::builders::MulticastSourceCreateRequestBuilder {
        crate::types::builders::MulticastSourceCreateRequestBuilder::default()
    }
}

/// A builder for [`MulticastSourceCreateRequest`](crate::types::MulticastSourceCreateRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MulticastSourceCreateRequestBuilder {
    pub(crate) source_ip: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl MulticastSourceCreateRequestBuilder {
    /// This represents the ip address of the device sending the multicast stream.
    pub fn source_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// This represents the ip address of the device sending the multicast stream.
    pub fn set_source_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_ip = input;
        self
    }
    /// This represents the ip address of the device sending the multicast stream.
    pub fn get_source_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_ip
    }
    /// This represents the customer's source URL where multicast stream is pulled from.
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// This represents the customer's source URL where multicast stream is pulled from.
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// This represents the customer's source URL where multicast stream is pulled from.
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`MulticastSourceCreateRequest`](crate::types::MulticastSourceCreateRequest).
    pub fn build(self) -> crate::types::MulticastSourceCreateRequest {
        crate::types::MulticastSourceCreateRequest {
            source_ip: self.source_ip,
            url: self.url,
        }
    }
}
