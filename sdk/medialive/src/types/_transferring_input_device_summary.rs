// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Details about the input device that is being transferred.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransferringInputDeviceSummary {
    /// The unique ID of the input device.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The optional message that the sender has attached to the transfer.
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// The AWS account ID for the recipient of the input device transfer.
    #[doc(hidden)]
    pub target_customer_id: std::option::Option<std::string::String>,
    /// The type (direction) of the input device transfer.
    #[doc(hidden)]
    pub transfer_type: std::option::Option<crate::types::InputDeviceTransferType>,
}
impl TransferringInputDeviceSummary {
    /// The unique ID of the input device.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The optional message that the sender has attached to the transfer.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// The AWS account ID for the recipient of the input device transfer.
    pub fn target_customer_id(&self) -> std::option::Option<&str> {
        self.target_customer_id.as_deref()
    }
    /// The type (direction) of the input device transfer.
    pub fn transfer_type(&self) -> std::option::Option<&crate::types::InputDeviceTransferType> {
        self.transfer_type.as_ref()
    }
}
impl TransferringInputDeviceSummary {
    /// Creates a new builder-style object to manufacture [`TransferringInputDeviceSummary`](crate::types::TransferringInputDeviceSummary).
    pub fn builder() -> crate::types::builders::TransferringInputDeviceSummaryBuilder {
        crate::types::builders::TransferringInputDeviceSummaryBuilder::default()
    }
}

/// A builder for [`TransferringInputDeviceSummary`](crate::types::TransferringInputDeviceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransferringInputDeviceSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) target_customer_id: std::option::Option<std::string::String>,
    pub(crate) transfer_type: std::option::Option<crate::types::InputDeviceTransferType>,
}
impl TransferringInputDeviceSummaryBuilder {
    /// The unique ID of the input device.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The unique ID of the input device.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The optional message that the sender has attached to the transfer.
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// The optional message that the sender has attached to the transfer.
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// The AWS account ID for the recipient of the input device transfer.
    pub fn target_customer_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_customer_id = Some(input.into());
        self
    }
    /// The AWS account ID for the recipient of the input device transfer.
    pub fn set_target_customer_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_customer_id = input;
        self
    }
    /// The type (direction) of the input device transfer.
    pub fn transfer_type(mut self, input: crate::types::InputDeviceTransferType) -> Self {
        self.transfer_type = Some(input);
        self
    }
    /// The type (direction) of the input device transfer.
    pub fn set_transfer_type(
        mut self,
        input: std::option::Option<crate::types::InputDeviceTransferType>,
    ) -> Self {
        self.transfer_type = input;
        self
    }
    /// Consumes the builder and constructs a [`TransferringInputDeviceSummary`](crate::types::TransferringInputDeviceSummary).
    pub fn build(self) -> crate::types::TransferringInputDeviceSummary {
        crate::types::TransferringInputDeviceSummary {
            id: self.id,
            message: self.message,
            target_customer_id: self.target_customer_id,
            transfer_type: self.transfer_type,
        }
    }
}
