// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in CreateNodeRequest.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeInterfaceMappingCreateRequest {
    /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
    pub logical_interface_name: ::std::option::Option<::std::string::String>,
    /// The style of the network -- NAT or BRIDGE.
    pub network_interface_mode: ::std::option::Option<crate::types::NetworkInterfaceMode>,
    /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
    pub physical_interface_name: ::std::option::Option<::std::string::String>,
}
impl NodeInterfaceMappingCreateRequest {
    /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
    pub fn logical_interface_name(&self) -> ::std::option::Option<&str> {
        self.logical_interface_name.as_deref()
    }
    /// The style of the network -- NAT or BRIDGE.
    pub fn network_interface_mode(&self) -> ::std::option::Option<&crate::types::NetworkInterfaceMode> {
        self.network_interface_mode.as_ref()
    }
    /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
    pub fn physical_interface_name(&self) -> ::std::option::Option<&str> {
        self.physical_interface_name.as_deref()
    }
}
impl NodeInterfaceMappingCreateRequest {
    /// Creates a new builder-style object to manufacture [`NodeInterfaceMappingCreateRequest`](crate::types::NodeInterfaceMappingCreateRequest).
    pub fn builder() -> crate::types::builders::NodeInterfaceMappingCreateRequestBuilder {
        crate::types::builders::NodeInterfaceMappingCreateRequestBuilder::default()
    }
}

/// A builder for [`NodeInterfaceMappingCreateRequest`](crate::types::NodeInterfaceMappingCreateRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeInterfaceMappingCreateRequestBuilder {
    pub(crate) logical_interface_name: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_mode: ::std::option::Option<crate::types::NetworkInterfaceMode>,
    pub(crate) physical_interface_name: ::std::option::Option<::std::string::String>,
}
impl NodeInterfaceMappingCreateRequestBuilder {
    /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
    pub fn logical_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
    pub fn set_logical_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_interface_name = input;
        self
    }
    /// Specify one of the logicalInterfaceNames that you created in the Cluster that this node belongs to. For example, my-Inputs-Interface.
    pub fn get_logical_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_interface_name
    }
    /// The style of the network -- NAT or BRIDGE.
    pub fn network_interface_mode(mut self, input: crate::types::NetworkInterfaceMode) -> Self {
        self.network_interface_mode = ::std::option::Option::Some(input);
        self
    }
    /// The style of the network -- NAT or BRIDGE.
    pub fn set_network_interface_mode(mut self, input: ::std::option::Option<crate::types::NetworkInterfaceMode>) -> Self {
        self.network_interface_mode = input;
        self
    }
    /// The style of the network -- NAT or BRIDGE.
    pub fn get_network_interface_mode(&self) -> &::std::option::Option<crate::types::NetworkInterfaceMode> {
        &self.network_interface_mode
    }
    /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
    pub fn physical_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.physical_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
    pub fn set_physical_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.physical_interface_name = input;
        self
    }
    /// Specify the physical name that corresponds to the logicalInterfaceName that you specified in this interface mapping. For example, Eth1 or ENO1234EXAMPLE.
    pub fn get_physical_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.physical_interface_name
    }
    /// Consumes the builder and constructs a [`NodeInterfaceMappingCreateRequest`](crate::types::NodeInterfaceMappingCreateRequest).
    pub fn build(self) -> crate::types::NodeInterfaceMappingCreateRequest {
        crate::types::NodeInterfaceMappingCreateRequest {
            logical_interface_name: self.logical_interface_name,
            network_interface_mode: self.network_interface_mode,
            physical_interface_name: self.physical_interface_name,
        }
    }
}
