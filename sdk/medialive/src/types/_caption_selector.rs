// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptionSelector {
    /// When specified this field indicates the three letter language code of the caption track to extract from the source.
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
    /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Caption selector settings.
    #[doc(hidden)]
    pub selector_settings: std::option::Option<crate::types::CaptionSelectorSettings>,
}
impl CaptionSelector {
    /// When specified this field indicates the three letter language code of the caption track to extract from the source.
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Caption selector settings.
    pub fn selector_settings(&self) -> std::option::Option<&crate::types::CaptionSelectorSettings> {
        self.selector_settings.as_ref()
    }
}
impl CaptionSelector {
    /// Creates a new builder-style object to manufacture [`CaptionSelector`](crate::types::CaptionSelector).
    pub fn builder() -> crate::types::builders::CaptionSelectorBuilder {
        crate::types::builders::CaptionSelectorBuilder::default()
    }
}

/// A builder for [`CaptionSelector`](crate::types::CaptionSelector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptionSelectorBuilder {
    pub(crate) language_code: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) selector_settings: std::option::Option<crate::types::CaptionSelectorSettings>,
}
impl CaptionSelectorBuilder {
    /// When specified this field indicates the three letter language code of the caption track to extract from the source.
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// When specified this field indicates the three letter language code of the caption track to extract from the source.
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Caption selector settings.
    pub fn selector_settings(mut self, input: crate::types::CaptionSelectorSettings) -> Self {
        self.selector_settings = Some(input);
        self
    }
    /// Caption selector settings.
    pub fn set_selector_settings(
        mut self,
        input: std::option::Option<crate::types::CaptionSelectorSettings>,
    ) -> Self {
        self.selector_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptionSelector`](crate::types::CaptionSelector).
    pub fn build(self) -> crate::types::CaptionSelector {
        crate::types::CaptionSelector {
            language_code: self.language_code,
            name: self.name,
            selector_settings: self.selector_settings,
        }
    }
}
