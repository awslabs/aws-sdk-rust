// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Audio Description
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioDescription {
    /// Advanced audio normalization settings.
    #[doc(hidden)]
    pub audio_normalization_settings: std::option::Option<crate::types::AudioNormalizationSettings>,
    /// The name of the AudioSelector used as the source for this AudioDescription.
    #[doc(hidden)]
    pub audio_selector_name: std::option::Option<std::string::String>,
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    #[doc(hidden)]
    pub audio_type: std::option::Option<crate::types::AudioType>,
    /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
    #[doc(hidden)]
    pub audio_type_control: std::option::Option<crate::types::AudioDescriptionAudioTypeControl>,
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
    #[doc(hidden)]
    pub audio_watermarking_settings: std::option::Option<crate::types::AudioWatermarkSettings>,
    /// Audio codec settings.
    #[doc(hidden)]
    pub codec_settings: std::option::Option<crate::types::AudioCodecSettings>,
    /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
    /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
    #[doc(hidden)]
    pub language_code_control:
        std::option::Option<crate::types::AudioDescriptionLanguageCodeControl>,
    /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Settings that control how input audio channels are remixed into the output audio channels.
    #[doc(hidden)]
    pub remix_settings: std::option::Option<crate::types::RemixSettings>,
    /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
}
impl AudioDescription {
    /// Advanced audio normalization settings.
    pub fn audio_normalization_settings(
        &self,
    ) -> std::option::Option<&crate::types::AudioNormalizationSettings> {
        self.audio_normalization_settings.as_ref()
    }
    /// The name of the AudioSelector used as the source for this AudioDescription.
    pub fn audio_selector_name(&self) -> std::option::Option<&str> {
        self.audio_selector_name.as_deref()
    }
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    pub fn audio_type(&self) -> std::option::Option<&crate::types::AudioType> {
        self.audio_type.as_ref()
    }
    /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
    pub fn audio_type_control(
        &self,
    ) -> std::option::Option<&crate::types::AudioDescriptionAudioTypeControl> {
        self.audio_type_control.as_ref()
    }
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
    pub fn audio_watermarking_settings(
        &self,
    ) -> std::option::Option<&crate::types::AudioWatermarkSettings> {
        self.audio_watermarking_settings.as_ref()
    }
    /// Audio codec settings.
    pub fn codec_settings(&self) -> std::option::Option<&crate::types::AudioCodecSettings> {
        self.codec_settings.as_ref()
    }
    /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
    pub fn language_code_control(
        &self,
    ) -> std::option::Option<&crate::types::AudioDescriptionLanguageCodeControl> {
        self.language_code_control.as_ref()
    }
    /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Settings that control how input audio channels are remixed into the output audio channels.
    pub fn remix_settings(&self) -> std::option::Option<&crate::types::RemixSettings> {
        self.remix_settings.as_ref()
    }
    /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
}
impl AudioDescription {
    /// Creates a new builder-style object to manufacture [`AudioDescription`](crate::types::AudioDescription).
    pub fn builder() -> crate::types::builders::AudioDescriptionBuilder {
        crate::types::builders::AudioDescriptionBuilder::default()
    }
}

/// A builder for [`AudioDescription`](crate::types::AudioDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioDescriptionBuilder {
    pub(crate) audio_normalization_settings:
        std::option::Option<crate::types::AudioNormalizationSettings>,
    pub(crate) audio_selector_name: std::option::Option<std::string::String>,
    pub(crate) audio_type: std::option::Option<crate::types::AudioType>,
    pub(crate) audio_type_control:
        std::option::Option<crate::types::AudioDescriptionAudioTypeControl>,
    pub(crate) audio_watermarking_settings:
        std::option::Option<crate::types::AudioWatermarkSettings>,
    pub(crate) codec_settings: std::option::Option<crate::types::AudioCodecSettings>,
    pub(crate) language_code: std::option::Option<std::string::String>,
    pub(crate) language_code_control:
        std::option::Option<crate::types::AudioDescriptionLanguageCodeControl>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) remix_settings: std::option::Option<crate::types::RemixSettings>,
    pub(crate) stream_name: std::option::Option<std::string::String>,
}
impl AudioDescriptionBuilder {
    /// Advanced audio normalization settings.
    pub fn audio_normalization_settings(
        mut self,
        input: crate::types::AudioNormalizationSettings,
    ) -> Self {
        self.audio_normalization_settings = Some(input);
        self
    }
    /// Advanced audio normalization settings.
    pub fn set_audio_normalization_settings(
        mut self,
        input: std::option::Option<crate::types::AudioNormalizationSettings>,
    ) -> Self {
        self.audio_normalization_settings = input;
        self
    }
    /// The name of the AudioSelector used as the source for this AudioDescription.
    pub fn audio_selector_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.audio_selector_name = Some(input.into());
        self
    }
    /// The name of the AudioSelector used as the source for this AudioDescription.
    pub fn set_audio_selector_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.audio_selector_name = input;
        self
    }
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    pub fn audio_type(mut self, input: crate::types::AudioType) -> Self {
        self.audio_type = Some(input);
        self
    }
    /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
    pub fn set_audio_type(mut self, input: std::option::Option<crate::types::AudioType>) -> Self {
        self.audio_type = input;
        self
    }
    /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
    pub fn audio_type_control(
        mut self,
        input: crate::types::AudioDescriptionAudioTypeControl,
    ) -> Self {
        self.audio_type_control = Some(input);
        self
    }
    /// Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
    pub fn set_audio_type_control(
        mut self,
        input: std::option::Option<crate::types::AudioDescriptionAudioTypeControl>,
    ) -> Self {
        self.audio_type_control = input;
        self
    }
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
    pub fn audio_watermarking_settings(
        mut self,
        input: crate::types::AudioWatermarkSettings,
    ) -> Self {
        self.audio_watermarking_settings = Some(input);
        self
    }
    /// Settings to configure one or more solutions that insert audio watermarks in the audio encode
    pub fn set_audio_watermarking_settings(
        mut self,
        input: std::option::Option<crate::types::AudioWatermarkSettings>,
    ) -> Self {
        self.audio_watermarking_settings = input;
        self
    }
    /// Audio codec settings.
    pub fn codec_settings(mut self, input: crate::types::AudioCodecSettings) -> Self {
        self.codec_settings = Some(input);
        self
    }
    /// Audio codec settings.
    pub fn set_codec_settings(
        mut self,
        input: std::option::Option<crate::types::AudioCodecSettings>,
    ) -> Self {
        self.codec_settings = input;
        self
    }
    /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
    pub fn language_code_control(
        mut self,
        input: crate::types::AudioDescriptionLanguageCodeControl,
    ) -> Self {
        self.language_code_control = Some(input);
        self
    }
    /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
    pub fn set_language_code_control(
        mut self,
        input: std::option::Option<crate::types::AudioDescriptionLanguageCodeControl>,
    ) -> Self {
        self.language_code_control = input;
        self
    }
    /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Settings that control how input audio channels are remixed into the output audio channels.
    pub fn remix_settings(mut self, input: crate::types::RemixSettings) -> Self {
        self.remix_settings = Some(input);
        self
    }
    /// Settings that control how input audio channels are remixed into the output audio channels.
    pub fn set_remix_settings(
        mut self,
        input: std::option::Option<crate::types::RemixSettings>,
    ) -> Self {
        self.remix_settings = input;
        self
    }
    /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_name = Some(input.into());
        self
    }
    /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioDescription`](crate::types::AudioDescription).
    pub fn build(self) -> crate::types::AudioDescription {
        crate::types::AudioDescription {
            audio_normalization_settings: self.audio_normalization_settings,
            audio_selector_name: self.audio_selector_name,
            audio_type: self.audio_type,
            audio_type_control: self.audio_type_control,
            audio_watermarking_settings: self.audio_watermarking_settings,
            codec_settings: self.codec_settings,
            language_code: self.language_code,
            language_code_control: self.language_code_control,
            name: self.name,
            remix_settings: self.remix_settings,
            stream_name: self.stream_name,
        }
    }
}
