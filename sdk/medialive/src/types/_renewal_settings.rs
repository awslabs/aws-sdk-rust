// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The Renewal settings for Reservations
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RenewalSettings {
    /// Automatic renewal status for the reservation
    #[doc(hidden)]
    pub automatic_renewal: std::option::Option<crate::types::ReservationAutomaticRenewal>,
    /// Count for the reservation renewal
    #[doc(hidden)]
    pub renewal_count: i32,
}
impl RenewalSettings {
    /// Automatic renewal status for the reservation
    pub fn automatic_renewal(
        &self,
    ) -> std::option::Option<&crate::types::ReservationAutomaticRenewal> {
        self.automatic_renewal.as_ref()
    }
    /// Count for the reservation renewal
    pub fn renewal_count(&self) -> i32 {
        self.renewal_count
    }
}
impl RenewalSettings {
    /// Creates a new builder-style object to manufacture [`RenewalSettings`](crate::types::RenewalSettings).
    pub fn builder() -> crate::types::builders::RenewalSettingsBuilder {
        crate::types::builders::RenewalSettingsBuilder::default()
    }
}

/// A builder for [`RenewalSettings`](crate::types::RenewalSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RenewalSettingsBuilder {
    pub(crate) automatic_renewal: std::option::Option<crate::types::ReservationAutomaticRenewal>,
    pub(crate) renewal_count: std::option::Option<i32>,
}
impl RenewalSettingsBuilder {
    /// Automatic renewal status for the reservation
    pub fn automatic_renewal(mut self, input: crate::types::ReservationAutomaticRenewal) -> Self {
        self.automatic_renewal = Some(input);
        self
    }
    /// Automatic renewal status for the reservation
    pub fn set_automatic_renewal(
        mut self,
        input: std::option::Option<crate::types::ReservationAutomaticRenewal>,
    ) -> Self {
        self.automatic_renewal = input;
        self
    }
    /// Count for the reservation renewal
    pub fn renewal_count(mut self, input: i32) -> Self {
        self.renewal_count = Some(input);
        self
    }
    /// Count for the reservation renewal
    pub fn set_renewal_count(mut self, input: std::option::Option<i32>) -> Self {
        self.renewal_count = input;
        self
    }
    /// Consumes the builder and constructs a [`RenewalSettings`](crate::types::RenewalSettings).
    pub fn build(self) -> crate::types::RenewalSettings {
        crate::types::RenewalSettings {
            automatic_renewal: self.automatic_renewal,
            renewal_count: self.renewal_count.unwrap_or_default(),
        }
    }
}
