// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Output Group Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputGroupSettings {
    /// Archive Group Settings
    #[doc(hidden)]
    pub archive_group_settings: std::option::Option<crate::types::ArchiveGroupSettings>,
    /// Frame Capture Group Settings
    #[doc(hidden)]
    pub frame_capture_group_settings: std::option::Option<crate::types::FrameCaptureGroupSettings>,
    /// Hls Group Settings
    #[doc(hidden)]
    pub hls_group_settings: std::option::Option<crate::types::HlsGroupSettings>,
    /// Media Package Group Settings
    #[doc(hidden)]
    pub media_package_group_settings: std::option::Option<crate::types::MediaPackageGroupSettings>,
    /// Ms Smooth Group Settings
    #[doc(hidden)]
    pub ms_smooth_group_settings: std::option::Option<crate::types::MsSmoothGroupSettings>,
    /// Multiplex Group Settings
    #[doc(hidden)]
    pub multiplex_group_settings: std::option::Option<crate::types::MultiplexGroupSettings>,
    /// Rtmp Group Settings
    #[doc(hidden)]
    pub rtmp_group_settings: std::option::Option<crate::types::RtmpGroupSettings>,
    /// Udp Group Settings
    #[doc(hidden)]
    pub udp_group_settings: std::option::Option<crate::types::UdpGroupSettings>,
}
impl OutputGroupSettings {
    /// Archive Group Settings
    pub fn archive_group_settings(
        &self,
    ) -> std::option::Option<&crate::types::ArchiveGroupSettings> {
        self.archive_group_settings.as_ref()
    }
    /// Frame Capture Group Settings
    pub fn frame_capture_group_settings(
        &self,
    ) -> std::option::Option<&crate::types::FrameCaptureGroupSettings> {
        self.frame_capture_group_settings.as_ref()
    }
    /// Hls Group Settings
    pub fn hls_group_settings(&self) -> std::option::Option<&crate::types::HlsGroupSettings> {
        self.hls_group_settings.as_ref()
    }
    /// Media Package Group Settings
    pub fn media_package_group_settings(
        &self,
    ) -> std::option::Option<&crate::types::MediaPackageGroupSettings> {
        self.media_package_group_settings.as_ref()
    }
    /// Ms Smooth Group Settings
    pub fn ms_smooth_group_settings(
        &self,
    ) -> std::option::Option<&crate::types::MsSmoothGroupSettings> {
        self.ms_smooth_group_settings.as_ref()
    }
    /// Multiplex Group Settings
    pub fn multiplex_group_settings(
        &self,
    ) -> std::option::Option<&crate::types::MultiplexGroupSettings> {
        self.multiplex_group_settings.as_ref()
    }
    /// Rtmp Group Settings
    pub fn rtmp_group_settings(&self) -> std::option::Option<&crate::types::RtmpGroupSettings> {
        self.rtmp_group_settings.as_ref()
    }
    /// Udp Group Settings
    pub fn udp_group_settings(&self) -> std::option::Option<&crate::types::UdpGroupSettings> {
        self.udp_group_settings.as_ref()
    }
}
impl OutputGroupSettings {
    /// Creates a new builder-style object to manufacture [`OutputGroupSettings`](crate::types::OutputGroupSettings).
    pub fn builder() -> crate::types::builders::OutputGroupSettingsBuilder {
        crate::types::builders::OutputGroupSettingsBuilder::default()
    }
}

/// A builder for [`OutputGroupSettings`](crate::types::OutputGroupSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputGroupSettingsBuilder {
    pub(crate) archive_group_settings: std::option::Option<crate::types::ArchiveGroupSettings>,
    pub(crate) frame_capture_group_settings:
        std::option::Option<crate::types::FrameCaptureGroupSettings>,
    pub(crate) hls_group_settings: std::option::Option<crate::types::HlsGroupSettings>,
    pub(crate) media_package_group_settings:
        std::option::Option<crate::types::MediaPackageGroupSettings>,
    pub(crate) ms_smooth_group_settings: std::option::Option<crate::types::MsSmoothGroupSettings>,
    pub(crate) multiplex_group_settings: std::option::Option<crate::types::MultiplexGroupSettings>,
    pub(crate) rtmp_group_settings: std::option::Option<crate::types::RtmpGroupSettings>,
    pub(crate) udp_group_settings: std::option::Option<crate::types::UdpGroupSettings>,
}
impl OutputGroupSettingsBuilder {
    /// Archive Group Settings
    pub fn archive_group_settings(mut self, input: crate::types::ArchiveGroupSettings) -> Self {
        self.archive_group_settings = Some(input);
        self
    }
    /// Archive Group Settings
    pub fn set_archive_group_settings(
        mut self,
        input: std::option::Option<crate::types::ArchiveGroupSettings>,
    ) -> Self {
        self.archive_group_settings = input;
        self
    }
    /// Frame Capture Group Settings
    pub fn frame_capture_group_settings(
        mut self,
        input: crate::types::FrameCaptureGroupSettings,
    ) -> Self {
        self.frame_capture_group_settings = Some(input);
        self
    }
    /// Frame Capture Group Settings
    pub fn set_frame_capture_group_settings(
        mut self,
        input: std::option::Option<crate::types::FrameCaptureGroupSettings>,
    ) -> Self {
        self.frame_capture_group_settings = input;
        self
    }
    /// Hls Group Settings
    pub fn hls_group_settings(mut self, input: crate::types::HlsGroupSettings) -> Self {
        self.hls_group_settings = Some(input);
        self
    }
    /// Hls Group Settings
    pub fn set_hls_group_settings(
        mut self,
        input: std::option::Option<crate::types::HlsGroupSettings>,
    ) -> Self {
        self.hls_group_settings = input;
        self
    }
    /// Media Package Group Settings
    pub fn media_package_group_settings(
        mut self,
        input: crate::types::MediaPackageGroupSettings,
    ) -> Self {
        self.media_package_group_settings = Some(input);
        self
    }
    /// Media Package Group Settings
    pub fn set_media_package_group_settings(
        mut self,
        input: std::option::Option<crate::types::MediaPackageGroupSettings>,
    ) -> Self {
        self.media_package_group_settings = input;
        self
    }
    /// Ms Smooth Group Settings
    pub fn ms_smooth_group_settings(mut self, input: crate::types::MsSmoothGroupSettings) -> Self {
        self.ms_smooth_group_settings = Some(input);
        self
    }
    /// Ms Smooth Group Settings
    pub fn set_ms_smooth_group_settings(
        mut self,
        input: std::option::Option<crate::types::MsSmoothGroupSettings>,
    ) -> Self {
        self.ms_smooth_group_settings = input;
        self
    }
    /// Multiplex Group Settings
    pub fn multiplex_group_settings(mut self, input: crate::types::MultiplexGroupSettings) -> Self {
        self.multiplex_group_settings = Some(input);
        self
    }
    /// Multiplex Group Settings
    pub fn set_multiplex_group_settings(
        mut self,
        input: std::option::Option<crate::types::MultiplexGroupSettings>,
    ) -> Self {
        self.multiplex_group_settings = input;
        self
    }
    /// Rtmp Group Settings
    pub fn rtmp_group_settings(mut self, input: crate::types::RtmpGroupSettings) -> Self {
        self.rtmp_group_settings = Some(input);
        self
    }
    /// Rtmp Group Settings
    pub fn set_rtmp_group_settings(
        mut self,
        input: std::option::Option<crate::types::RtmpGroupSettings>,
    ) -> Self {
        self.rtmp_group_settings = input;
        self
    }
    /// Udp Group Settings
    pub fn udp_group_settings(mut self, input: crate::types::UdpGroupSettings) -> Self {
        self.udp_group_settings = Some(input);
        self
    }
    /// Udp Group Settings
    pub fn set_udp_group_settings(
        mut self,
        input: std::option::Option<crate::types::UdpGroupSettings>,
    ) -> Self {
        self.udp_group_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputGroupSettings`](crate::types::OutputGroupSettings).
    pub fn build(self) -> crate::types::OutputGroupSettings {
        crate::types::OutputGroupSettings {
            archive_group_settings: self.archive_group_settings,
            frame_capture_group_settings: self.frame_capture_group_settings,
            hls_group_settings: self.hls_group_settings,
            media_package_group_settings: self.media_package_group_settings,
            ms_smooth_group_settings: self.ms_smooth_group_settings,
            multiplex_group_settings: self.multiplex_group_settings,
            rtmp_group_settings: self.rtmp_group_settings,
            udp_group_settings: self.udp_group_settings,
        }
    }
}
