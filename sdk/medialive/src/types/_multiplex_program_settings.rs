// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Multiplex Program settings configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiplexProgramSettings {
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    pub preferred_channel_pipeline: ::std::option::Option<crate::types::PreferredChannelPipeline>,
    /// Unique program number.
    pub program_number: ::std::option::Option<i32>,
    /// Transport stream service descriptor configuration for the Multiplex program.
    pub service_descriptor: ::std::option::Option<crate::types::MultiplexProgramServiceDescriptor>,
    /// Program video settings configuration.
    pub video_settings: ::std::option::Option<crate::types::MultiplexVideoSettings>,
}
impl MultiplexProgramSettings {
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    pub fn preferred_channel_pipeline(&self) -> ::std::option::Option<&crate::types::PreferredChannelPipeline> {
        self.preferred_channel_pipeline.as_ref()
    }
    /// Unique program number.
    pub fn program_number(&self) -> ::std::option::Option<i32> {
        self.program_number
    }
    /// Transport stream service descriptor configuration for the Multiplex program.
    pub fn service_descriptor(&self) -> ::std::option::Option<&crate::types::MultiplexProgramServiceDescriptor> {
        self.service_descriptor.as_ref()
    }
    /// Program video settings configuration.
    pub fn video_settings(&self) -> ::std::option::Option<&crate::types::MultiplexVideoSettings> {
        self.video_settings.as_ref()
    }
}
impl MultiplexProgramSettings {
    /// Creates a new builder-style object to manufacture [`MultiplexProgramSettings`](crate::types::MultiplexProgramSettings).
    pub fn builder() -> crate::types::builders::MultiplexProgramSettingsBuilder {
        crate::types::builders::MultiplexProgramSettingsBuilder::default()
    }
}

/// A builder for [`MultiplexProgramSettings`](crate::types::MultiplexProgramSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultiplexProgramSettingsBuilder {
    pub(crate) preferred_channel_pipeline: ::std::option::Option<crate::types::PreferredChannelPipeline>,
    pub(crate) program_number: ::std::option::Option<i32>,
    pub(crate) service_descriptor: ::std::option::Option<crate::types::MultiplexProgramServiceDescriptor>,
    pub(crate) video_settings: ::std::option::Option<crate::types::MultiplexVideoSettings>,
}
impl MultiplexProgramSettingsBuilder {
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    pub fn preferred_channel_pipeline(mut self, input: crate::types::PreferredChannelPipeline) -> Self {
        self.preferred_channel_pipeline = ::std::option::Option::Some(input);
        self
    }
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    pub fn set_preferred_channel_pipeline(mut self, input: ::std::option::Option<crate::types::PreferredChannelPipeline>) -> Self {
        self.preferred_channel_pipeline = input;
        self
    }
    /// Indicates which pipeline is preferred by the multiplex for program ingest.
    pub fn get_preferred_channel_pipeline(&self) -> &::std::option::Option<crate::types::PreferredChannelPipeline> {
        &self.preferred_channel_pipeline
    }
    /// Unique program number.
    /// This field is required.
    pub fn program_number(mut self, input: i32) -> Self {
        self.program_number = ::std::option::Option::Some(input);
        self
    }
    /// Unique program number.
    pub fn set_program_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.program_number = input;
        self
    }
    /// Unique program number.
    pub fn get_program_number(&self) -> &::std::option::Option<i32> {
        &self.program_number
    }
    /// Transport stream service descriptor configuration for the Multiplex program.
    pub fn service_descriptor(mut self, input: crate::types::MultiplexProgramServiceDescriptor) -> Self {
        self.service_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// Transport stream service descriptor configuration for the Multiplex program.
    pub fn set_service_descriptor(mut self, input: ::std::option::Option<crate::types::MultiplexProgramServiceDescriptor>) -> Self {
        self.service_descriptor = input;
        self
    }
    /// Transport stream service descriptor configuration for the Multiplex program.
    pub fn get_service_descriptor(&self) -> &::std::option::Option<crate::types::MultiplexProgramServiceDescriptor> {
        &self.service_descriptor
    }
    /// Program video settings configuration.
    pub fn video_settings(mut self, input: crate::types::MultiplexVideoSettings) -> Self {
        self.video_settings = ::std::option::Option::Some(input);
        self
    }
    /// Program video settings configuration.
    pub fn set_video_settings(mut self, input: ::std::option::Option<crate::types::MultiplexVideoSettings>) -> Self {
        self.video_settings = input;
        self
    }
    /// Program video settings configuration.
    pub fn get_video_settings(&self) -> &::std::option::Option<crate::types::MultiplexVideoSettings> {
        &self.video_settings
    }
    /// Consumes the builder and constructs a [`MultiplexProgramSettings`](crate::types::MultiplexProgramSettings).
    pub fn build(self) -> crate::types::MultiplexProgramSettings {
        crate::types::MultiplexProgramSettings {
            preferred_channel_pipeline: self.preferred_channel_pipeline,
            program_number: self.program_number,
            service_descriptor: self.service_descriptor,
            video_settings: self.video_settings,
        }
    }
}
