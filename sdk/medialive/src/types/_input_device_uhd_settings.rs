// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings that describe the active source from the input device, and the video characteristics of that source.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputDeviceUhdSettings {
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    #[doc(hidden)]
    pub active_input: std::option::Option<crate::types::InputDeviceActiveInput>,
    /// The source at the input device that is currently active. You can specify this source.
    #[doc(hidden)]
    pub configured_input: std::option::Option<crate::types::InputDeviceConfiguredInput>,
    /// The state of the input device.
    #[doc(hidden)]
    pub device_state: std::option::Option<crate::types::InputDeviceState>,
    /// The frame rate of the video source.
    #[doc(hidden)]
    pub framerate: f64,
    /// The height of the video source, in pixels.
    #[doc(hidden)]
    pub height: i32,
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    #[doc(hidden)]
    pub max_bitrate: i32,
    /// The scan type of the video source.
    #[doc(hidden)]
    pub scan_type: std::option::Option<crate::types::InputDeviceScanType>,
    /// The width of the video source, in pixels.
    #[doc(hidden)]
    pub width: i32,
    /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
    #[doc(hidden)]
    pub latency_ms: i32,
}
impl InputDeviceUhdSettings {
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    pub fn active_input(&self) -> std::option::Option<&crate::types::InputDeviceActiveInput> {
        self.active_input.as_ref()
    }
    /// The source at the input device that is currently active. You can specify this source.
    pub fn configured_input(
        &self,
    ) -> std::option::Option<&crate::types::InputDeviceConfiguredInput> {
        self.configured_input.as_ref()
    }
    /// The state of the input device.
    pub fn device_state(&self) -> std::option::Option<&crate::types::InputDeviceState> {
        self.device_state.as_ref()
    }
    /// The frame rate of the video source.
    pub fn framerate(&self) -> f64 {
        self.framerate
    }
    /// The height of the video source, in pixels.
    pub fn height(&self) -> i32 {
        self.height
    }
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    pub fn max_bitrate(&self) -> i32 {
        self.max_bitrate
    }
    /// The scan type of the video source.
    pub fn scan_type(&self) -> std::option::Option<&crate::types::InputDeviceScanType> {
        self.scan_type.as_ref()
    }
    /// The width of the video source, in pixels.
    pub fn width(&self) -> i32 {
        self.width
    }
    /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
    pub fn latency_ms(&self) -> i32 {
        self.latency_ms
    }
}
impl InputDeviceUhdSettings {
    /// Creates a new builder-style object to manufacture [`InputDeviceUhdSettings`](crate::types::InputDeviceUhdSettings).
    pub fn builder() -> crate::types::builders::InputDeviceUhdSettingsBuilder {
        crate::types::builders::InputDeviceUhdSettingsBuilder::default()
    }
}

/// A builder for [`InputDeviceUhdSettings`](crate::types::InputDeviceUhdSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputDeviceUhdSettingsBuilder {
    pub(crate) active_input: std::option::Option<crate::types::InputDeviceActiveInput>,
    pub(crate) configured_input: std::option::Option<crate::types::InputDeviceConfiguredInput>,
    pub(crate) device_state: std::option::Option<crate::types::InputDeviceState>,
    pub(crate) framerate: std::option::Option<f64>,
    pub(crate) height: std::option::Option<i32>,
    pub(crate) max_bitrate: std::option::Option<i32>,
    pub(crate) scan_type: std::option::Option<crate::types::InputDeviceScanType>,
    pub(crate) width: std::option::Option<i32>,
    pub(crate) latency_ms: std::option::Option<i32>,
}
impl InputDeviceUhdSettingsBuilder {
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    pub fn active_input(mut self, input: crate::types::InputDeviceActiveInput) -> Self {
        self.active_input = Some(input);
        self
    }
    /// If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
    pub fn set_active_input(
        mut self,
        input: std::option::Option<crate::types::InputDeviceActiveInput>,
    ) -> Self {
        self.active_input = input;
        self
    }
    /// The source at the input device that is currently active. You can specify this source.
    pub fn configured_input(mut self, input: crate::types::InputDeviceConfiguredInput) -> Self {
        self.configured_input = Some(input);
        self
    }
    /// The source at the input device that is currently active. You can specify this source.
    pub fn set_configured_input(
        mut self,
        input: std::option::Option<crate::types::InputDeviceConfiguredInput>,
    ) -> Self {
        self.configured_input = input;
        self
    }
    /// The state of the input device.
    pub fn device_state(mut self, input: crate::types::InputDeviceState) -> Self {
        self.device_state = Some(input);
        self
    }
    /// The state of the input device.
    pub fn set_device_state(
        mut self,
        input: std::option::Option<crate::types::InputDeviceState>,
    ) -> Self {
        self.device_state = input;
        self
    }
    /// The frame rate of the video source.
    pub fn framerate(mut self, input: f64) -> Self {
        self.framerate = Some(input);
        self
    }
    /// The frame rate of the video source.
    pub fn set_framerate(mut self, input: std::option::Option<f64>) -> Self {
        self.framerate = input;
        self
    }
    /// The height of the video source, in pixels.
    pub fn height(mut self, input: i32) -> Self {
        self.height = Some(input);
        self
    }
    /// The height of the video source, in pixels.
    pub fn set_height(mut self, input: std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.max_bitrate = Some(input);
        self
    }
    /// The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
    pub fn set_max_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.max_bitrate = input;
        self
    }
    /// The scan type of the video source.
    pub fn scan_type(mut self, input: crate::types::InputDeviceScanType) -> Self {
        self.scan_type = Some(input);
        self
    }
    /// The scan type of the video source.
    pub fn set_scan_type(
        mut self,
        input: std::option::Option<crate::types::InputDeviceScanType>,
    ) -> Self {
        self.scan_type = input;
        self
    }
    /// The width of the video source, in pixels.
    pub fn width(mut self, input: i32) -> Self {
        self.width = Some(input);
        self
    }
    /// The width of the video source, in pixels.
    pub fn set_width(mut self, input: std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
    pub fn latency_ms(mut self, input: i32) -> Self {
        self.latency_ms = Some(input);
        self
    }
    /// The Link device's buffer size (latency) in milliseconds (ms). You can specify this value.
    pub fn set_latency_ms(mut self, input: std::option::Option<i32>) -> Self {
        self.latency_ms = input;
        self
    }
    /// Consumes the builder and constructs a [`InputDeviceUhdSettings`](crate::types::InputDeviceUhdSettings).
    pub fn build(self) -> crate::types::InputDeviceUhdSettings {
        crate::types::InputDeviceUhdSettings {
            active_input: self.active_input,
            configured_input: self.configured_input,
            device_state: self.device_state,
            framerate: self.framerate.unwrap_or_default(),
            height: self.height.unwrap_or_default(),
            max_bitrate: self.max_bitrate.unwrap_or_default(),
            scan_type: self.scan_type,
            width: self.width.unwrap_or_default(),
            latency_ms: self.latency_ms.unwrap_or_default(),
        }
    }
}
