// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Frame Capture Cdn Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FrameCaptureCdnSettings {
    /// Frame Capture S3 Settings
    #[doc(hidden)]
    pub frame_capture_s3_settings: std::option::Option<crate::types::FrameCaptureS3Settings>,
}
impl FrameCaptureCdnSettings {
    /// Frame Capture S3 Settings
    pub fn frame_capture_s3_settings(
        &self,
    ) -> std::option::Option<&crate::types::FrameCaptureS3Settings> {
        self.frame_capture_s3_settings.as_ref()
    }
}
impl FrameCaptureCdnSettings {
    /// Creates a new builder-style object to manufacture [`FrameCaptureCdnSettings`](crate::types::FrameCaptureCdnSettings).
    pub fn builder() -> crate::types::builders::FrameCaptureCdnSettingsBuilder {
        crate::types::builders::FrameCaptureCdnSettingsBuilder::default()
    }
}

/// A builder for [`FrameCaptureCdnSettings`](crate::types::FrameCaptureCdnSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FrameCaptureCdnSettingsBuilder {
    pub(crate) frame_capture_s3_settings: std::option::Option<crate::types::FrameCaptureS3Settings>,
}
impl FrameCaptureCdnSettingsBuilder {
    /// Frame Capture S3 Settings
    pub fn frame_capture_s3_settings(
        mut self,
        input: crate::types::FrameCaptureS3Settings,
    ) -> Self {
        self.frame_capture_s3_settings = Some(input);
        self
    }
    /// Frame Capture S3 Settings
    pub fn set_frame_capture_s3_settings(
        mut self,
        input: std::option::Option<crate::types::FrameCaptureS3Settings>,
    ) -> Self {
        self.frame_capture_s3_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`FrameCaptureCdnSettings`](crate::types::FrameCaptureCdnSettings).
    pub fn build(self) -> crate::types::FrameCaptureCdnSettings {
        crate::types::FrameCaptureCdnSettings {
            frame_capture_s3_settings: self.frame_capture_s3_settings,
        }
    }
}
