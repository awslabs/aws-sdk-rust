// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings to specify if an action follows another.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FollowModeScheduleActionStartSettings {
    /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
    #[doc(hidden)]
    pub follow_point: std::option::Option<crate::types::FollowPoint>,
    /// The action name of another action that this one refers to.
    #[doc(hidden)]
    pub reference_action_name: std::option::Option<std::string::String>,
}
impl FollowModeScheduleActionStartSettings {
    /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
    pub fn follow_point(&self) -> std::option::Option<&crate::types::FollowPoint> {
        self.follow_point.as_ref()
    }
    /// The action name of another action that this one refers to.
    pub fn reference_action_name(&self) -> std::option::Option<&str> {
        self.reference_action_name.as_deref()
    }
}
impl FollowModeScheduleActionStartSettings {
    /// Creates a new builder-style object to manufacture [`FollowModeScheduleActionStartSettings`](crate::types::FollowModeScheduleActionStartSettings).
    pub fn builder() -> crate::types::builders::FollowModeScheduleActionStartSettingsBuilder {
        crate::types::builders::FollowModeScheduleActionStartSettingsBuilder::default()
    }
}

/// A builder for [`FollowModeScheduleActionStartSettings`](crate::types::FollowModeScheduleActionStartSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FollowModeScheduleActionStartSettingsBuilder {
    pub(crate) follow_point: std::option::Option<crate::types::FollowPoint>,
    pub(crate) reference_action_name: std::option::Option<std::string::String>,
}
impl FollowModeScheduleActionStartSettingsBuilder {
    /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
    pub fn follow_point(mut self, input: crate::types::FollowPoint) -> Self {
        self.follow_point = Some(input);
        self
    }
    /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
    pub fn set_follow_point(
        mut self,
        input: std::option::Option<crate::types::FollowPoint>,
    ) -> Self {
        self.follow_point = input;
        self
    }
    /// The action name of another action that this one refers to.
    pub fn reference_action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference_action_name = Some(input.into());
        self
    }
    /// The action name of another action that this one refers to.
    pub fn set_reference_action_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reference_action_name = input;
        self
    }
    /// Consumes the builder and constructs a [`FollowModeScheduleActionStartSettings`](crate::types::FollowModeScheduleActionStartSettings).
    pub fn build(self) -> crate::types::FollowModeScheduleActionStartSettings {
        crate::types::FollowModeScheduleActionStartSettings {
            follow_point: self.follow_point,
            reference_action_name: self.reference_action_name,
        }
    }
}
