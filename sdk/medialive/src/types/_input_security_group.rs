// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An Input Security Group
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputSecurityGroup {
    /// Unique ARN of Input Security Group
    pub arn: ::std::option::Option<::std::string::String>,
    /// The Id of the Input Security Group
    pub id: ::std::option::Option<::std::string::String>,
    /// The list of inputs currently using this Input Security Group.
    pub inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// The current state of the Input Security Group.
    pub state: ::std::option::Option<crate::types::InputSecurityGroupState>,
    /// A collection of key-value pairs.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// Whitelist rules and their sync status
    pub whitelist_rules: ::std::option::Option<::std::vec::Vec<crate::types::InputWhitelistRule>>,
}
impl InputSecurityGroup {
    /// Unique ARN of Input Security Group
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The Id of the Input Security Group
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The list of inputs currently using this Input Security Group.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> &[::std::string::String] {
        self.inputs.as_deref().unwrap_or_default()
    }
    /// The current state of the Input Security Group.
    pub fn state(&self) -> ::std::option::Option<&crate::types::InputSecurityGroupState> {
        self.state.as_ref()
    }
    /// A collection of key-value pairs.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// Whitelist rules and their sync status
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.whitelist_rules.is_none()`.
    pub fn whitelist_rules(&self) -> &[crate::types::InputWhitelistRule] {
        self.whitelist_rules.as_deref().unwrap_or_default()
    }
}
impl InputSecurityGroup {
    /// Creates a new builder-style object to manufacture [`InputSecurityGroup`](crate::types::InputSecurityGroup).
    pub fn builder() -> crate::types::builders::InputSecurityGroupBuilder {
        crate::types::builders::InputSecurityGroupBuilder::default()
    }
}

/// A builder for [`InputSecurityGroup`](crate::types::InputSecurityGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputSecurityGroupBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) state: ::std::option::Option<crate::types::InputSecurityGroupState>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) whitelist_rules: ::std::option::Option<::std::vec::Vec<crate::types::InputWhitelistRule>>,
}
impl InputSecurityGroupBuilder {
    /// Unique ARN of Input Security Group
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Unique ARN of Input Security Group
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Unique ARN of Input Security Group
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// The Id of the Input Security Group
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The Id of the Input Security Group
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The Id of the Input Security Group
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// The list of inputs currently using this Input Security Group.
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// The list of inputs currently using this Input Security Group.
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// The list of inputs currently using this Input Security Group.
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// The current state of the Input Security Group.
    pub fn state(mut self, input: crate::types::InputSecurityGroupState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// The current state of the Input Security Group.
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::InputSecurityGroupState>) -> Self {
        self.state = input;
        self
    }
    /// The current state of the Input Security Group.
    pub fn get_state(&self) -> &::std::option::Option<crate::types::InputSecurityGroupState> {
        &self.state
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of key-value pairs.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// A collection of key-value pairs.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// A collection of key-value pairs.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Appends an item to `whitelist_rules`.
    ///
    /// To override the contents of this collection use [`set_whitelist_rules`](Self::set_whitelist_rules).
    ///
    /// Whitelist rules and their sync status
    pub fn whitelist_rules(mut self, input: crate::types::InputWhitelistRule) -> Self {
        let mut v = self.whitelist_rules.unwrap_or_default();
        v.push(input);
        self.whitelist_rules = ::std::option::Option::Some(v);
        self
    }
    /// Whitelist rules and their sync status
    pub fn set_whitelist_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputWhitelistRule>>) -> Self {
        self.whitelist_rules = input;
        self
    }
    /// Whitelist rules and their sync status
    pub fn get_whitelist_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputWhitelistRule>> {
        &self.whitelist_rules
    }
    /// Consumes the builder and constructs a [`InputSecurityGroup`](crate::types::InputSecurityGroup).
    pub fn build(self) -> crate::types::InputSecurityGroup {
        crate::types::InputSecurityGroup {
            arn: self.arn,
            id: self.id,
            inputs: self.inputs,
            state: self.state,
            tags: self.tags,
            whitelist_rules: self.whitelist_rules,
        }
    }
}
