// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains configuration for a Multiplex event
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultiplexSettings {
    /// Maximum video buffer delay in milliseconds.
    #[doc(hidden)]
    pub maximum_video_buffer_delay_milliseconds: i32,
    /// Transport stream bit rate.
    #[doc(hidden)]
    pub transport_stream_bitrate: i32,
    /// Transport stream ID.
    #[doc(hidden)]
    pub transport_stream_id: i32,
    /// Transport stream reserved bit rate.
    #[doc(hidden)]
    pub transport_stream_reserved_bitrate: i32,
}
impl MultiplexSettings {
    /// Maximum video buffer delay in milliseconds.
    pub fn maximum_video_buffer_delay_milliseconds(&self) -> i32 {
        self.maximum_video_buffer_delay_milliseconds
    }
    /// Transport stream bit rate.
    pub fn transport_stream_bitrate(&self) -> i32 {
        self.transport_stream_bitrate
    }
    /// Transport stream ID.
    pub fn transport_stream_id(&self) -> i32 {
        self.transport_stream_id
    }
    /// Transport stream reserved bit rate.
    pub fn transport_stream_reserved_bitrate(&self) -> i32 {
        self.transport_stream_reserved_bitrate
    }
}
impl MultiplexSettings {
    /// Creates a new builder-style object to manufacture [`MultiplexSettings`](crate::types::MultiplexSettings).
    pub fn builder() -> crate::types::builders::MultiplexSettingsBuilder {
        crate::types::builders::MultiplexSettingsBuilder::default()
    }
}

/// A builder for [`MultiplexSettings`](crate::types::MultiplexSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultiplexSettingsBuilder {
    pub(crate) maximum_video_buffer_delay_milliseconds: std::option::Option<i32>,
    pub(crate) transport_stream_bitrate: std::option::Option<i32>,
    pub(crate) transport_stream_id: std::option::Option<i32>,
    pub(crate) transport_stream_reserved_bitrate: std::option::Option<i32>,
}
impl MultiplexSettingsBuilder {
    /// Maximum video buffer delay in milliseconds.
    pub fn maximum_video_buffer_delay_milliseconds(mut self, input: i32) -> Self {
        self.maximum_video_buffer_delay_milliseconds = Some(input);
        self
    }
    /// Maximum video buffer delay in milliseconds.
    pub fn set_maximum_video_buffer_delay_milliseconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.maximum_video_buffer_delay_milliseconds = input;
        self
    }
    /// Transport stream bit rate.
    pub fn transport_stream_bitrate(mut self, input: i32) -> Self {
        self.transport_stream_bitrate = Some(input);
        self
    }
    /// Transport stream bit rate.
    pub fn set_transport_stream_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.transport_stream_bitrate = input;
        self
    }
    /// Transport stream ID.
    pub fn transport_stream_id(mut self, input: i32) -> Self {
        self.transport_stream_id = Some(input);
        self
    }
    /// Transport stream ID.
    pub fn set_transport_stream_id(mut self, input: std::option::Option<i32>) -> Self {
        self.transport_stream_id = input;
        self
    }
    /// Transport stream reserved bit rate.
    pub fn transport_stream_reserved_bitrate(mut self, input: i32) -> Self {
        self.transport_stream_reserved_bitrate = Some(input);
        self
    }
    /// Transport stream reserved bit rate.
    pub fn set_transport_stream_reserved_bitrate(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.transport_stream_reserved_bitrate = input;
        self
    }
    /// Consumes the builder and constructs a [`MultiplexSettings`](crate::types::MultiplexSettings).
    pub fn build(self) -> crate::types::MultiplexSettings {
        crate::types::MultiplexSettings {
            maximum_video_buffer_delay_milliseconds: self
                .maximum_video_buffer_delay_milliseconds
                .unwrap_or_default(),
            transport_stream_bitrate: self.transport_stream_bitrate.unwrap_or_default(),
            transport_stream_id: self.transport_stream_id.unwrap_or_default(),
            transport_stream_reserved_bitrate: self
                .transport_stream_reserved_bitrate
                .unwrap_or_default(),
        }
    }
}
