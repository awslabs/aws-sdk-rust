// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Ms Smooth Group Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MsSmoothGroupSettings {
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    pub acquisition_point_id: ::std::option::Option<::std::string::String>,
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    pub audio_only_timecode_control: ::std::option::Option<crate::types::SmoothGroupAudioOnlyTimecodeControl>,
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
    pub certificate_mode: ::std::option::Option<crate::types::SmoothGroupCertificateMode>,
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    pub connection_retry_interval: ::std::option::Option<i32>,
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    pub destination: ::std::option::Option<crate::types::OutputLocationRef>,
    /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
    pub event_id: ::std::option::Option<::std::string::String>,
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
    pub event_id_mode: ::std::option::Option<crate::types::SmoothGroupEventIdMode>,
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    pub event_stop_behavior: ::std::option::Option<crate::types::SmoothGroupEventStopBehavior>,
    /// Size in seconds of file cache for streaming outputs.
    pub filecache_duration: ::std::option::Option<i32>,
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    pub fragment_length: ::std::option::Option<i32>,
    /// Parameter that control output group behavior on input loss.
    pub input_loss_action: ::std::option::Option<crate::types::InputLossActionForMsSmoothOut>,
    /// Number of retry attempts.
    pub num_retries: ::std::option::Option<i32>,
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    pub restart_delay: ::std::option::Option<i32>,
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub segmentation_mode: ::std::option::Option<crate::types::SmoothGroupSegmentationMode>,
    /// Number of milliseconds to delay the output from the second pipeline.
    pub send_delay_ms: ::std::option::Option<i32>,
    /// Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
    pub sparse_track_type: ::std::option::Option<crate::types::SmoothGroupSparseTrackType>,
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    pub stream_manifest_behavior: ::std::option::Option<crate::types::SmoothGroupStreamManifestBehavior>,
    /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
    pub timestamp_offset: ::std::option::Option<::std::string::String>,
    /// Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
    pub timestamp_offset_mode: ::std::option::Option<crate::types::SmoothGroupTimestampOffsetMode>,
}
impl MsSmoothGroupSettings {
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    pub fn acquisition_point_id(&self) -> ::std::option::Option<&str> {
        self.acquisition_point_id.as_deref()
    }
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    pub fn audio_only_timecode_control(&self) -> ::std::option::Option<&crate::types::SmoothGroupAudioOnlyTimecodeControl> {
        self.audio_only_timecode_control.as_ref()
    }
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
    pub fn certificate_mode(&self) -> ::std::option::Option<&crate::types::SmoothGroupCertificateMode> {
        self.certificate_mode.as_ref()
    }
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    pub fn connection_retry_interval(&self) -> ::std::option::Option<i32> {
        self.connection_retry_interval
    }
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    pub fn destination(&self) -> ::std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
    pub fn event_id_mode(&self) -> ::std::option::Option<&crate::types::SmoothGroupEventIdMode> {
        self.event_id_mode.as_ref()
    }
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    pub fn event_stop_behavior(&self) -> ::std::option::Option<&crate::types::SmoothGroupEventStopBehavior> {
        self.event_stop_behavior.as_ref()
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(&self) -> ::std::option::Option<i32> {
        self.filecache_duration
    }
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    pub fn fragment_length(&self) -> ::std::option::Option<i32> {
        self.fragment_length
    }
    /// Parameter that control output group behavior on input loss.
    pub fn input_loss_action(&self) -> ::std::option::Option<&crate::types::InputLossActionForMsSmoothOut> {
        self.input_loss_action.as_ref()
    }
    /// Number of retry attempts.
    pub fn num_retries(&self) -> ::std::option::Option<i32> {
        self.num_retries
    }
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    pub fn restart_delay(&self) -> ::std::option::Option<i32> {
        self.restart_delay
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn segmentation_mode(&self) -> ::std::option::Option<&crate::types::SmoothGroupSegmentationMode> {
        self.segmentation_mode.as_ref()
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn send_delay_ms(&self) -> ::std::option::Option<i32> {
        self.send_delay_ms
    }
    /// Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
    pub fn sparse_track_type(&self) -> ::std::option::Option<&crate::types::SmoothGroupSparseTrackType> {
        self.sparse_track_type.as_ref()
    }
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    pub fn stream_manifest_behavior(&self) -> ::std::option::Option<&crate::types::SmoothGroupStreamManifestBehavior> {
        self.stream_manifest_behavior.as_ref()
    }
    /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
    pub fn timestamp_offset(&self) -> ::std::option::Option<&str> {
        self.timestamp_offset.as_deref()
    }
    /// Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
    pub fn timestamp_offset_mode(&self) -> ::std::option::Option<&crate::types::SmoothGroupTimestampOffsetMode> {
        self.timestamp_offset_mode.as_ref()
    }
}
impl MsSmoothGroupSettings {
    /// Creates a new builder-style object to manufacture [`MsSmoothGroupSettings`](crate::types::MsSmoothGroupSettings).
    pub fn builder() -> crate::types::builders::MsSmoothGroupSettingsBuilder {
        crate::types::builders::MsSmoothGroupSettingsBuilder::default()
    }
}

/// A builder for [`MsSmoothGroupSettings`](crate::types::MsSmoothGroupSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MsSmoothGroupSettingsBuilder {
    pub(crate) acquisition_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) audio_only_timecode_control: ::std::option::Option<crate::types::SmoothGroupAudioOnlyTimecodeControl>,
    pub(crate) certificate_mode: ::std::option::Option<crate::types::SmoothGroupCertificateMode>,
    pub(crate) connection_retry_interval: ::std::option::Option<i32>,
    pub(crate) destination: ::std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_id_mode: ::std::option::Option<crate::types::SmoothGroupEventIdMode>,
    pub(crate) event_stop_behavior: ::std::option::Option<crate::types::SmoothGroupEventStopBehavior>,
    pub(crate) filecache_duration: ::std::option::Option<i32>,
    pub(crate) fragment_length: ::std::option::Option<i32>,
    pub(crate) input_loss_action: ::std::option::Option<crate::types::InputLossActionForMsSmoothOut>,
    pub(crate) num_retries: ::std::option::Option<i32>,
    pub(crate) restart_delay: ::std::option::Option<i32>,
    pub(crate) segmentation_mode: ::std::option::Option<crate::types::SmoothGroupSegmentationMode>,
    pub(crate) send_delay_ms: ::std::option::Option<i32>,
    pub(crate) sparse_track_type: ::std::option::Option<crate::types::SmoothGroupSparseTrackType>,
    pub(crate) stream_manifest_behavior: ::std::option::Option<crate::types::SmoothGroupStreamManifestBehavior>,
    pub(crate) timestamp_offset: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp_offset_mode: ::std::option::Option<crate::types::SmoothGroupTimestampOffsetMode>,
}
impl MsSmoothGroupSettingsBuilder {
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    pub fn acquisition_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.acquisition_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    pub fn set_acquisition_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.acquisition_point_id = input;
        self
    }
    /// The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
    pub fn get_acquisition_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.acquisition_point_id
    }
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    pub fn audio_only_timecode_control(mut self, input: crate::types::SmoothGroupAudioOnlyTimecodeControl) -> Self {
        self.audio_only_timecode_control = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    pub fn set_audio_only_timecode_control(mut self, input: ::std::option::Option<crate::types::SmoothGroupAudioOnlyTimecodeControl>) -> Self {
        self.audio_only_timecode_control = input;
        self
    }
    /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
    pub fn get_audio_only_timecode_control(&self) -> &::std::option::Option<crate::types::SmoothGroupAudioOnlyTimecodeControl> {
        &self.audio_only_timecode_control
    }
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
    pub fn certificate_mode(mut self, input: crate::types::SmoothGroupCertificateMode) -> Self {
        self.certificate_mode = ::std::option::Option::Some(input);
        self
    }
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
    pub fn set_certificate_mode(mut self, input: ::std::option::Option<crate::types::SmoothGroupCertificateMode>) -> Self {
        self.certificate_mode = input;
        self
    }
    /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
    pub fn get_certificate_mode(&self) -> &::std::option::Option<crate::types::SmoothGroupCertificateMode> {
        &self.certificate_mode
    }
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    pub fn connection_retry_interval(mut self, input: i32) -> Self {
        self.connection_retry_interval = ::std::option::Option::Some(input);
        self
    }
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    pub fn set_connection_retry_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.connection_retry_interval = input;
        self
    }
    /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
    pub fn get_connection_retry_interval(&self) -> &::std::option::Option<i32> {
        &self.connection_retry_interval
    }
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    /// This field is required.
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::OutputLocationRef>) -> Self {
        self.destination = input;
        self
    }
    /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::OutputLocationRef> {
        &self.destination
    }
    /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
    pub fn event_id_mode(mut self, input: crate::types::SmoothGroupEventIdMode) -> Self {
        self.event_id_mode = ::std::option::Option::Some(input);
        self
    }
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
    pub fn set_event_id_mode(mut self, input: ::std::option::Option<crate::types::SmoothGroupEventIdMode>) -> Self {
        self.event_id_mode = input;
        self
    }
    /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
    pub fn get_event_id_mode(&self) -> &::std::option::Option<crate::types::SmoothGroupEventIdMode> {
        &self.event_id_mode
    }
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    pub fn event_stop_behavior(mut self, input: crate::types::SmoothGroupEventStopBehavior) -> Self {
        self.event_stop_behavior = ::std::option::Option::Some(input);
        self
    }
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    pub fn set_event_stop_behavior(mut self, input: ::std::option::Option<crate::types::SmoothGroupEventStopBehavior>) -> Self {
        self.event_stop_behavior = input;
        self
    }
    /// When set to sendEos, send EOS signal to IIS server when stopping the event
    pub fn get_event_stop_behavior(&self) -> &::std::option::Option<crate::types::SmoothGroupEventStopBehavior> {
        &self.event_stop_behavior
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(mut self, input: i32) -> Self {
        self.filecache_duration = ::std::option::Option::Some(input);
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn set_filecache_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.filecache_duration = input;
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn get_filecache_duration(&self) -> &::std::option::Option<i32> {
        &self.filecache_duration
    }
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    pub fn fragment_length(mut self, input: i32) -> Self {
        self.fragment_length = ::std::option::Option::Some(input);
        self
    }
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    pub fn set_fragment_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fragment_length = input;
        self
    }
    /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
    pub fn get_fragment_length(&self) -> &::std::option::Option<i32> {
        &self.fragment_length
    }
    /// Parameter that control output group behavior on input loss.
    pub fn input_loss_action(mut self, input: crate::types::InputLossActionForMsSmoothOut) -> Self {
        self.input_loss_action = ::std::option::Option::Some(input);
        self
    }
    /// Parameter that control output group behavior on input loss.
    pub fn set_input_loss_action(mut self, input: ::std::option::Option<crate::types::InputLossActionForMsSmoothOut>) -> Self {
        self.input_loss_action = input;
        self
    }
    /// Parameter that control output group behavior on input loss.
    pub fn get_input_loss_action(&self) -> &::std::option::Option<crate::types::InputLossActionForMsSmoothOut> {
        &self.input_loss_action
    }
    /// Number of retry attempts.
    pub fn num_retries(mut self, input: i32) -> Self {
        self.num_retries = ::std::option::Option::Some(input);
        self
    }
    /// Number of retry attempts.
    pub fn set_num_retries(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_retries = input;
        self
    }
    /// Number of retry attempts.
    pub fn get_num_retries(&self) -> &::std::option::Option<i32> {
        &self.num_retries
    }
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    pub fn restart_delay(mut self, input: i32) -> Self {
        self.restart_delay = ::std::option::Option::Some(input);
        self
    }
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    pub fn set_restart_delay(mut self, input: ::std::option::Option<i32>) -> Self {
        self.restart_delay = input;
        self
    }
    /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
    pub fn get_restart_delay(&self) -> &::std::option::Option<i32> {
        &self.restart_delay
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn segmentation_mode(mut self, input: crate::types::SmoothGroupSegmentationMode) -> Self {
        self.segmentation_mode = ::std::option::Option::Some(input);
        self
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn set_segmentation_mode(mut self, input: ::std::option::Option<crate::types::SmoothGroupSegmentationMode>) -> Self {
        self.segmentation_mode = input;
        self
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn get_segmentation_mode(&self) -> &::std::option::Option<crate::types::SmoothGroupSegmentationMode> {
        &self.segmentation_mode
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn send_delay_ms(mut self, input: i32) -> Self {
        self.send_delay_ms = ::std::option::Option::Some(input);
        self
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn set_send_delay_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.send_delay_ms = input;
        self
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn get_send_delay_ms(&self) -> &::std::option::Option<i32> {
        &self.send_delay_ms
    }
    /// Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
    pub fn sparse_track_type(mut self, input: crate::types::SmoothGroupSparseTrackType) -> Self {
        self.sparse_track_type = ::std::option::Option::Some(input);
        self
    }
    /// Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
    pub fn set_sparse_track_type(mut self, input: ::std::option::Option<crate::types::SmoothGroupSparseTrackType>) -> Self {
        self.sparse_track_type = input;
        self
    }
    /// Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
    pub fn get_sparse_track_type(&self) -> &::std::option::Option<crate::types::SmoothGroupSparseTrackType> {
        &self.sparse_track_type
    }
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    pub fn stream_manifest_behavior(mut self, input: crate::types::SmoothGroupStreamManifestBehavior) -> Self {
        self.stream_manifest_behavior = ::std::option::Option::Some(input);
        self
    }
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    pub fn set_stream_manifest_behavior(mut self, input: ::std::option::Option<crate::types::SmoothGroupStreamManifestBehavior>) -> Self {
        self.stream_manifest_behavior = input;
        self
    }
    /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
    pub fn get_stream_manifest_behavior(&self) -> &::std::option::Option<crate::types::SmoothGroupStreamManifestBehavior> {
        &self.stream_manifest_behavior
    }
    /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
    pub fn timestamp_offset(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timestamp_offset = ::std::option::Option::Some(input.into());
        self
    }
    /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
    pub fn set_timestamp_offset(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timestamp_offset = input;
        self
    }
    /// Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
    pub fn get_timestamp_offset(&self) -> &::std::option::Option<::std::string::String> {
        &self.timestamp_offset
    }
    /// Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
    pub fn timestamp_offset_mode(mut self, input: crate::types::SmoothGroupTimestampOffsetMode) -> Self {
        self.timestamp_offset_mode = ::std::option::Option::Some(input);
        self
    }
    /// Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
    pub fn set_timestamp_offset_mode(mut self, input: ::std::option::Option<crate::types::SmoothGroupTimestampOffsetMode>) -> Self {
        self.timestamp_offset_mode = input;
        self
    }
    /// Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
    pub fn get_timestamp_offset_mode(&self) -> &::std::option::Option<crate::types::SmoothGroupTimestampOffsetMode> {
        &self.timestamp_offset_mode
    }
    /// Consumes the builder and constructs a [`MsSmoothGroupSettings`](crate::types::MsSmoothGroupSettings).
    pub fn build(self) -> crate::types::MsSmoothGroupSettings {
        crate::types::MsSmoothGroupSettings {
            acquisition_point_id: self.acquisition_point_id,
            audio_only_timecode_control: self.audio_only_timecode_control,
            certificate_mode: self.certificate_mode,
            connection_retry_interval: self.connection_retry_interval,
            destination: self.destination,
            event_id: self.event_id,
            event_id_mode: self.event_id_mode,
            event_stop_behavior: self.event_stop_behavior,
            filecache_duration: self.filecache_duration,
            fragment_length: self.fragment_length,
            input_loss_action: self.input_loss_action,
            num_retries: self.num_retries,
            restart_delay: self.restart_delay,
            segmentation_mode: self.segmentation_mode,
            send_delay_ms: self.send_delay_ms,
            sparse_track_type: self.sparse_track_type,
            stream_manifest_behavior: self.stream_manifest_behavior,
            timestamp_offset: self.timestamp_offset,
            timestamp_offset_mode: self.timestamp_offset_mode,
        }
    }
}
