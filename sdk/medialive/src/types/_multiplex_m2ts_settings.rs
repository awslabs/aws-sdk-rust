// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Multiplex M2ts Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiplexM2tsSettings {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub absent_input_audio_behavior: ::std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>,
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub arib: ::std::option::Option<crate::types::M2tsArib>,
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub audio_buffer_model: ::std::option::Option<crate::types::M2tsAudioBufferModel>,
    /// The number of audio frames to insert for each PES packet.
    pub audio_frames_per_pes: ::std::option::Option<i32>,
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub audio_stream_type: ::std::option::Option<crate::types::M2tsAudioStreamType>,
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub cc_descriptor: ::std::option::Option<crate::types::M2tsCcDescriptor>,
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub ebif: ::std::option::Option<crate::types::M2tsEbifControl>,
    /// Include or exclude the ES Rate field in the PES header.
    pub es_rate_in_pes: ::std::option::Option<crate::types::M2tsEsRateInPes>,
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub klv: ::std::option::Option<crate::types::M2tsKlv>,
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub nielsen_id3_behavior: ::std::option::Option<crate::types::M2tsNielsenId3Behavior>,
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub pcr_control: ::std::option::Option<crate::types::M2tsPcrControl>,
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub pcr_period: ::std::option::Option<i32>,
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub scte35_control: ::std::option::Option<crate::types::M2tsScte35Control>,
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub scte35_preroll_pullup_milliseconds: ::std::option::Option<f64>,
}
impl MultiplexM2tsSettings {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn absent_input_audio_behavior(&self) -> ::std::option::Option<&crate::types::M2tsAbsentInputAudioBehavior> {
        self.absent_input_audio_behavior.as_ref()
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn arib(&self) -> ::std::option::Option<&crate::types::M2tsArib> {
        self.arib.as_ref()
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn audio_buffer_model(&self) -> ::std::option::Option<&crate::types::M2tsAudioBufferModel> {
        self.audio_buffer_model.as_ref()
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(&self) -> ::std::option::Option<i32> {
        self.audio_frames_per_pes
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn audio_stream_type(&self) -> ::std::option::Option<&crate::types::M2tsAudioStreamType> {
        self.audio_stream_type.as_ref()
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn cc_descriptor(&self) -> ::std::option::Option<&crate::types::M2tsCcDescriptor> {
        self.cc_descriptor.as_ref()
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn ebif(&self) -> ::std::option::Option<&crate::types::M2tsEbifControl> {
        self.ebif.as_ref()
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn es_rate_in_pes(&self) -> ::std::option::Option<&crate::types::M2tsEsRateInPes> {
        self.es_rate_in_pes.as_ref()
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv(&self) -> ::std::option::Option<&crate::types::M2tsKlv> {
        self.klv.as_ref()
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(&self) -> ::std::option::Option<&crate::types::M2tsNielsenId3Behavior> {
        self.nielsen_id3_behavior.as_ref()
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(&self) -> ::std::option::Option<&crate::types::M2tsPcrControl> {
        self.pcr_control.as_ref()
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn pcr_period(&self) -> ::std::option::Option<i32> {
        self.pcr_period
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn scte35_control(&self) -> ::std::option::Option<&crate::types::M2tsScte35Control> {
        self.scte35_control.as_ref()
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn scte35_preroll_pullup_milliseconds(&self) -> ::std::option::Option<f64> {
        self.scte35_preroll_pullup_milliseconds
    }
}
impl MultiplexM2tsSettings {
    /// Creates a new builder-style object to manufacture [`MultiplexM2tsSettings`](crate::types::MultiplexM2tsSettings).
    pub fn builder() -> crate::types::builders::MultiplexM2tsSettingsBuilder {
        crate::types::builders::MultiplexM2tsSettingsBuilder::default()
    }
}

/// A builder for [`MultiplexM2tsSettings`](crate::types::MultiplexM2tsSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MultiplexM2tsSettingsBuilder {
    pub(crate) absent_input_audio_behavior: ::std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>,
    pub(crate) arib: ::std::option::Option<crate::types::M2tsArib>,
    pub(crate) audio_buffer_model: ::std::option::Option<crate::types::M2tsAudioBufferModel>,
    pub(crate) audio_frames_per_pes: ::std::option::Option<i32>,
    pub(crate) audio_stream_type: ::std::option::Option<crate::types::M2tsAudioStreamType>,
    pub(crate) cc_descriptor: ::std::option::Option<crate::types::M2tsCcDescriptor>,
    pub(crate) ebif: ::std::option::Option<crate::types::M2tsEbifControl>,
    pub(crate) es_rate_in_pes: ::std::option::Option<crate::types::M2tsEsRateInPes>,
    pub(crate) klv: ::std::option::Option<crate::types::M2tsKlv>,
    pub(crate) nielsen_id3_behavior: ::std::option::Option<crate::types::M2tsNielsenId3Behavior>,
    pub(crate) pcr_control: ::std::option::Option<crate::types::M2tsPcrControl>,
    pub(crate) pcr_period: ::std::option::Option<i32>,
    pub(crate) scte35_control: ::std::option::Option<crate::types::M2tsScte35Control>,
    pub(crate) scte35_preroll_pullup_milliseconds: ::std::option::Option<f64>,
}
impl MultiplexM2tsSettingsBuilder {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn absent_input_audio_behavior(mut self, input: crate::types::M2tsAbsentInputAudioBehavior) -> Self {
        self.absent_input_audio_behavior = ::std::option::Option::Some(input);
        self
    }
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn set_absent_input_audio_behavior(mut self, input: ::std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>) -> Self {
        self.absent_input_audio_behavior = input;
        self
    }
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn get_absent_input_audio_behavior(&self) -> &::std::option::Option<crate::types::M2tsAbsentInputAudioBehavior> {
        &self.absent_input_audio_behavior
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn arib(mut self, input: crate::types::M2tsArib) -> Self {
        self.arib = ::std::option::Option::Some(input);
        self
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn set_arib(mut self, input: ::std::option::Option<crate::types::M2tsArib>) -> Self {
        self.arib = input;
        self
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn get_arib(&self) -> &::std::option::Option<crate::types::M2tsArib> {
        &self.arib
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn audio_buffer_model(mut self, input: crate::types::M2tsAudioBufferModel) -> Self {
        self.audio_buffer_model = ::std::option::Option::Some(input);
        self
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn set_audio_buffer_model(mut self, input: ::std::option::Option<crate::types::M2tsAudioBufferModel>) -> Self {
        self.audio_buffer_model = input;
        self
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn get_audio_buffer_model(&self) -> &::std::option::Option<crate::types::M2tsAudioBufferModel> {
        &self.audio_buffer_model
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(mut self, input: i32) -> Self {
        self.audio_frames_per_pes = ::std::option::Option::Some(input);
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn set_audio_frames_per_pes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.audio_frames_per_pes = input;
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn get_audio_frames_per_pes(&self) -> &::std::option::Option<i32> {
        &self.audio_frames_per_pes
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn audio_stream_type(mut self, input: crate::types::M2tsAudioStreamType) -> Self {
        self.audio_stream_type = ::std::option::Option::Some(input);
        self
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn set_audio_stream_type(mut self, input: ::std::option::Option<crate::types::M2tsAudioStreamType>) -> Self {
        self.audio_stream_type = input;
        self
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn get_audio_stream_type(&self) -> &::std::option::Option<crate::types::M2tsAudioStreamType> {
        &self.audio_stream_type
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn cc_descriptor(mut self, input: crate::types::M2tsCcDescriptor) -> Self {
        self.cc_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn set_cc_descriptor(mut self, input: ::std::option::Option<crate::types::M2tsCcDescriptor>) -> Self {
        self.cc_descriptor = input;
        self
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn get_cc_descriptor(&self) -> &::std::option::Option<crate::types::M2tsCcDescriptor> {
        &self.cc_descriptor
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn ebif(mut self, input: crate::types::M2tsEbifControl) -> Self {
        self.ebif = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn set_ebif(mut self, input: ::std::option::Option<crate::types::M2tsEbifControl>) -> Self {
        self.ebif = input;
        self
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn get_ebif(&self) -> &::std::option::Option<crate::types::M2tsEbifControl> {
        &self.ebif
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn es_rate_in_pes(mut self, input: crate::types::M2tsEsRateInPes) -> Self {
        self.es_rate_in_pes = ::std::option::Option::Some(input);
        self
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn set_es_rate_in_pes(mut self, input: ::std::option::Option<crate::types::M2tsEsRateInPes>) -> Self {
        self.es_rate_in_pes = input;
        self
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn get_es_rate_in_pes(&self) -> &::std::option::Option<crate::types::M2tsEsRateInPes> {
        &self.es_rate_in_pes
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv(mut self, input: crate::types::M2tsKlv) -> Self {
        self.klv = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn set_klv(mut self, input: ::std::option::Option<crate::types::M2tsKlv>) -> Self {
        self.klv = input;
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn get_klv(&self) -> &::std::option::Option<crate::types::M2tsKlv> {
        &self.klv
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(mut self, input: crate::types::M2tsNielsenId3Behavior) -> Self {
        self.nielsen_id3_behavior = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn set_nielsen_id3_behavior(mut self, input: ::std::option::Option<crate::types::M2tsNielsenId3Behavior>) -> Self {
        self.nielsen_id3_behavior = input;
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn get_nielsen_id3_behavior(&self) -> &::std::option::Option<crate::types::M2tsNielsenId3Behavior> {
        &self.nielsen_id3_behavior
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(mut self, input: crate::types::M2tsPcrControl) -> Self {
        self.pcr_control = ::std::option::Option::Some(input);
        self
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn set_pcr_control(mut self, input: ::std::option::Option<crate::types::M2tsPcrControl>) -> Self {
        self.pcr_control = input;
        self
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn get_pcr_control(&self) -> &::std::option::Option<crate::types::M2tsPcrControl> {
        &self.pcr_control
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn pcr_period(mut self, input: i32) -> Self {
        self.pcr_period = ::std::option::Option::Some(input);
        self
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn set_pcr_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pcr_period = input;
        self
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn get_pcr_period(&self) -> &::std::option::Option<i32> {
        &self.pcr_period
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn scte35_control(mut self, input: crate::types::M2tsScte35Control) -> Self {
        self.scte35_control = ::std::option::Option::Some(input);
        self
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn set_scte35_control(mut self, input: ::std::option::Option<crate::types::M2tsScte35Control>) -> Self {
        self.scte35_control = input;
        self
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn get_scte35_control(&self) -> &::std::option::Option<crate::types::M2tsScte35Control> {
        &self.scte35_control
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn scte35_preroll_pullup_milliseconds(mut self, input: f64) -> Self {
        self.scte35_preroll_pullup_milliseconds = ::std::option::Option::Some(input);
        self
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn set_scte35_preroll_pullup_milliseconds(mut self, input: ::std::option::Option<f64>) -> Self {
        self.scte35_preroll_pullup_milliseconds = input;
        self
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn get_scte35_preroll_pullup_milliseconds(&self) -> &::std::option::Option<f64> {
        &self.scte35_preroll_pullup_milliseconds
    }
    /// Consumes the builder and constructs a [`MultiplexM2tsSettings`](crate::types::MultiplexM2tsSettings).
    pub fn build(self) -> crate::types::MultiplexM2tsSettings {
        crate::types::MultiplexM2tsSettings {
            absent_input_audio_behavior: self.absent_input_audio_behavior,
            arib: self.arib,
            audio_buffer_model: self.audio_buffer_model,
            audio_frames_per_pes: self.audio_frames_per_pes,
            audio_stream_type: self.audio_stream_type,
            cc_descriptor: self.cc_descriptor,
            ebif: self.ebif,
            es_rate_in_pes: self.es_rate_in_pes,
            klv: self.klv,
            nielsen_id3_behavior: self.nielsen_id3_behavior,
            pcr_control: self.pcr_control,
            pcr_period: self.pcr_period,
            scte35_control: self.scte35_control,
            scte35_preroll_pullup_milliseconds: self.scte35_preroll_pullup_milliseconds,
        }
    }
}
