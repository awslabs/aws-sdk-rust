// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Rtmp Output Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RtmpOutputSettings {
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
    pub certificate_mode: ::std::option::Option<crate::types::RtmpOutputCertificateMode>,
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    pub connection_retry_interval: ::std::option::Option<i32>,
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    pub destination: ::std::option::Option<crate::types::OutputLocationRef>,
    /// Number of retry attempts.
    pub num_retries: ::std::option::Option<i32>,
}
impl RtmpOutputSettings {
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
    pub fn certificate_mode(&self) -> ::std::option::Option<&crate::types::RtmpOutputCertificateMode> {
        self.certificate_mode.as_ref()
    }
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    pub fn connection_retry_interval(&self) -> ::std::option::Option<i32> {
        self.connection_retry_interval
    }
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    pub fn destination(&self) -> ::std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// Number of retry attempts.
    pub fn num_retries(&self) -> ::std::option::Option<i32> {
        self.num_retries
    }
}
impl RtmpOutputSettings {
    /// Creates a new builder-style object to manufacture [`RtmpOutputSettings`](crate::types::RtmpOutputSettings).
    pub fn builder() -> crate::types::builders::RtmpOutputSettingsBuilder {
        crate::types::builders::RtmpOutputSettingsBuilder::default()
    }
}

/// A builder for [`RtmpOutputSettings`](crate::types::RtmpOutputSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RtmpOutputSettingsBuilder {
    pub(crate) certificate_mode: ::std::option::Option<crate::types::RtmpOutputCertificateMode>,
    pub(crate) connection_retry_interval: ::std::option::Option<i32>,
    pub(crate) destination: ::std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) num_retries: ::std::option::Option<i32>,
}
impl RtmpOutputSettingsBuilder {
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
    pub fn certificate_mode(mut self, input: crate::types::RtmpOutputCertificateMode) -> Self {
        self.certificate_mode = ::std::option::Option::Some(input);
        self
    }
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
    pub fn set_certificate_mode(mut self, input: ::std::option::Option<crate::types::RtmpOutputCertificateMode>) -> Self {
        self.certificate_mode = input;
        self
    }
    /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
    pub fn get_certificate_mode(&self) -> &::std::option::Option<crate::types::RtmpOutputCertificateMode> {
        &self.certificate_mode
    }
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    pub fn connection_retry_interval(mut self, input: i32) -> Self {
        self.connection_retry_interval = ::std::option::Option::Some(input);
        self
    }
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    pub fn set_connection_retry_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.connection_retry_interval = input;
        self
    }
    /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
    pub fn get_connection_retry_interval(&self) -> &::std::option::Option<i32> {
        &self.connection_retry_interval
    }
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    /// This field is required.
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::OutputLocationRef>) -> Self {
        self.destination = input;
        self
    }
    /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::OutputLocationRef> {
        &self.destination
    }
    /// Number of retry attempts.
    pub fn num_retries(mut self, input: i32) -> Self {
        self.num_retries = ::std::option::Option::Some(input);
        self
    }
    /// Number of retry attempts.
    pub fn set_num_retries(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_retries = input;
        self
    }
    /// Number of retry attempts.
    pub fn get_num_retries(&self) -> &::std::option::Option<i32> {
        &self.num_retries
    }
    /// Consumes the builder and constructs a [`RtmpOutputSettings`](crate::types::RtmpOutputSettings).
    pub fn build(self) -> crate::types::RtmpOutputSettings {
        crate::types::RtmpOutputSettings {
            certificate_mode: self.certificate_mode,
            connection_retry_interval: self.connection_retry_interval,
            destination: self.destination,
            num_retries: self.num_retries,
        }
    }
}
