// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Start time for the action.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FixedModeScheduleActionStartSettings {
    /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
    #[doc(hidden)]
    pub time: std::option::Option<std::string::String>,
}
impl FixedModeScheduleActionStartSettings {
    /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
    pub fn time(&self) -> std::option::Option<&str> {
        self.time.as_deref()
    }
}
impl FixedModeScheduleActionStartSettings {
    /// Creates a new builder-style object to manufacture [`FixedModeScheduleActionStartSettings`](crate::types::FixedModeScheduleActionStartSettings).
    pub fn builder() -> crate::types::builders::FixedModeScheduleActionStartSettingsBuilder {
        crate::types::builders::FixedModeScheduleActionStartSettingsBuilder::default()
    }
}

/// A builder for [`FixedModeScheduleActionStartSettings`](crate::types::FixedModeScheduleActionStartSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FixedModeScheduleActionStartSettingsBuilder {
    pub(crate) time: std::option::Option<std::string::String>,
}
impl FixedModeScheduleActionStartSettingsBuilder {
    /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
    pub fn time(mut self, input: impl Into<std::string::String>) -> Self {
        self.time = Some(input.into());
        self
    }
    /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
    pub fn set_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time = input;
        self
    }
    /// Consumes the builder and constructs a [`FixedModeScheduleActionStartSettings`](crate::types::FixedModeScheduleActionStartSettings).
    pub fn build(self) -> crate::types::FixedModeScheduleActionStartSettings {
        crate::types::FixedModeScheduleActionStartSettings { time: self.time }
    }
}
