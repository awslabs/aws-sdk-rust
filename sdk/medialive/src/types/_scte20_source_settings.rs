// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Scte20 Source Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Scte20SourceSettings {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[doc(hidden)]
    pub convert608_to708: std::option::Option<crate::types::Scte20Convert608To708>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[doc(hidden)]
    pub source608_channel_number: i32,
}
impl Scte20SourceSettings {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn convert608_to708(&self) -> std::option::Option<&crate::types::Scte20Convert608To708> {
        self.convert608_to708.as_ref()
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn source608_channel_number(&self) -> i32 {
        self.source608_channel_number
    }
}
impl Scte20SourceSettings {
    /// Creates a new builder-style object to manufacture [`Scte20SourceSettings`](crate::types::Scte20SourceSettings).
    pub fn builder() -> crate::types::builders::Scte20SourceSettingsBuilder {
        crate::types::builders::Scte20SourceSettingsBuilder::default()
    }
}

/// A builder for [`Scte20SourceSettings`](crate::types::Scte20SourceSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Scte20SourceSettingsBuilder {
    pub(crate) convert608_to708: std::option::Option<crate::types::Scte20Convert608To708>,
    pub(crate) source608_channel_number: std::option::Option<i32>,
}
impl Scte20SourceSettingsBuilder {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn convert608_to708(mut self, input: crate::types::Scte20Convert608To708) -> Self {
        self.convert608_to708 = Some(input);
        self
    }
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn set_convert608_to708(
        mut self,
        input: std::option::Option<crate::types::Scte20Convert608To708>,
    ) -> Self {
        self.convert608_to708 = input;
        self
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn source608_channel_number(mut self, input: i32) -> Self {
        self.source608_channel_number = Some(input);
        self
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn set_source608_channel_number(mut self, input: std::option::Option<i32>) -> Self {
        self.source608_channel_number = input;
        self
    }
    /// Consumes the builder and constructs a [`Scte20SourceSettings`](crate::types::Scte20SourceSettings).
    pub fn build(self) -> crate::types::Scte20SourceSettings {
        crate::types::Scte20SourceSettings {
            convert608_to708: self.convert608_to708,
            source608_channel_number: self.source608_channel_number.unwrap_or_default(),
        }
    }
}
