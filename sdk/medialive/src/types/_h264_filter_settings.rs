// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// H264 Filter Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct H264FilterSettings {
    /// Temporal Filter Settings
    #[doc(hidden)]
    pub temporal_filter_settings: std::option::Option<crate::types::TemporalFilterSettings>,
}
impl H264FilterSettings {
    /// Temporal Filter Settings
    pub fn temporal_filter_settings(
        &self,
    ) -> std::option::Option<&crate::types::TemporalFilterSettings> {
        self.temporal_filter_settings.as_ref()
    }
}
impl H264FilterSettings {
    /// Creates a new builder-style object to manufacture [`H264FilterSettings`](crate::types::H264FilterSettings).
    pub fn builder() -> crate::types::builders::H264FilterSettingsBuilder {
        crate::types::builders::H264FilterSettingsBuilder::default()
    }
}

/// A builder for [`H264FilterSettings`](crate::types::H264FilterSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct H264FilterSettingsBuilder {
    pub(crate) temporal_filter_settings: std::option::Option<crate::types::TemporalFilterSettings>,
}
impl H264FilterSettingsBuilder {
    /// Temporal Filter Settings
    pub fn temporal_filter_settings(mut self, input: crate::types::TemporalFilterSettings) -> Self {
        self.temporal_filter_settings = Some(input);
        self
    }
    /// Temporal Filter Settings
    pub fn set_temporal_filter_settings(
        mut self,
        input: std::option::Option<crate::types::TemporalFilterSettings>,
    ) -> Self {
        self.temporal_filter_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`H264FilterSettings`](crate::types::H264FilterSettings).
    pub fn build(self) -> crate::types::H264FilterSettings {
        crate::types::H264FilterSettings {
            temporal_filter_settings: self.temporal_filter_settings,
        }
    }
}
