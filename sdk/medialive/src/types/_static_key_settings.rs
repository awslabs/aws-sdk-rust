// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Static Key Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StaticKeySettings {
    /// The URL of the license server used for protecting content.
    #[doc(hidden)]
    pub key_provider_server: std::option::Option<crate::types::InputLocation>,
    /// Static key value as a 32 character hexadecimal string.
    #[doc(hidden)]
    pub static_key_value: std::option::Option<std::string::String>,
}
impl StaticKeySettings {
    /// The URL of the license server used for protecting content.
    pub fn key_provider_server(&self) -> std::option::Option<&crate::types::InputLocation> {
        self.key_provider_server.as_ref()
    }
    /// Static key value as a 32 character hexadecimal string.
    pub fn static_key_value(&self) -> std::option::Option<&str> {
        self.static_key_value.as_deref()
    }
}
impl StaticKeySettings {
    /// Creates a new builder-style object to manufacture [`StaticKeySettings`](crate::types::StaticKeySettings).
    pub fn builder() -> crate::types::builders::StaticKeySettingsBuilder {
        crate::types::builders::StaticKeySettingsBuilder::default()
    }
}

/// A builder for [`StaticKeySettings`](crate::types::StaticKeySettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StaticKeySettingsBuilder {
    pub(crate) key_provider_server: std::option::Option<crate::types::InputLocation>,
    pub(crate) static_key_value: std::option::Option<std::string::String>,
}
impl StaticKeySettingsBuilder {
    /// The URL of the license server used for protecting content.
    pub fn key_provider_server(mut self, input: crate::types::InputLocation) -> Self {
        self.key_provider_server = Some(input);
        self
    }
    /// The URL of the license server used for protecting content.
    pub fn set_key_provider_server(
        mut self,
        input: std::option::Option<crate::types::InputLocation>,
    ) -> Self {
        self.key_provider_server = input;
        self
    }
    /// Static key value as a 32 character hexadecimal string.
    pub fn static_key_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.static_key_value = Some(input.into());
        self
    }
    /// Static key value as a 32 character hexadecimal string.
    pub fn set_static_key_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.static_key_value = input;
        self
    }
    /// Consumes the builder and constructs a [`StaticKeySettings`](crate::types::StaticKeySettings).
    pub fn build(self) -> crate::types::StaticKeySettings {
        crate::types::StaticKeySettings {
            key_provider_server: self.key_provider_server,
            static_key_value: self.static_key_value,
        }
    }
}
