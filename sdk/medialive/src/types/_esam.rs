// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Esam
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Esam {
    /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
    #[doc(hidden)]
    pub acquisition_point_id: std::option::Option<std::string::String>,
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    #[doc(hidden)]
    pub ad_avail_offset: i32,
    /// Documentation update needed
    #[doc(hidden)]
    pub password_param: std::option::Option<std::string::String>,
    /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
    #[doc(hidden)]
    pub pois_endpoint: std::option::Option<std::string::String>,
    /// Documentation update needed
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
    #[doc(hidden)]
    pub zone_identity: std::option::Option<std::string::String>,
}
impl Esam {
    /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
    pub fn acquisition_point_id(&self) -> std::option::Option<&str> {
        self.acquisition_point_id.as_deref()
    }
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    pub fn ad_avail_offset(&self) -> i32 {
        self.ad_avail_offset
    }
    /// Documentation update needed
    pub fn password_param(&self) -> std::option::Option<&str> {
        self.password_param.as_deref()
    }
    /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
    pub fn pois_endpoint(&self) -> std::option::Option<&str> {
        self.pois_endpoint.as_deref()
    }
    /// Documentation update needed
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
    pub fn zone_identity(&self) -> std::option::Option<&str> {
        self.zone_identity.as_deref()
    }
}
impl Esam {
    /// Creates a new builder-style object to manufacture [`Esam`](crate::types::Esam).
    pub fn builder() -> crate::types::builders::EsamBuilder {
        crate::types::builders::EsamBuilder::default()
    }
}

/// A builder for [`Esam`](crate::types::Esam).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EsamBuilder {
    pub(crate) acquisition_point_id: std::option::Option<std::string::String>,
    pub(crate) ad_avail_offset: std::option::Option<i32>,
    pub(crate) password_param: std::option::Option<std::string::String>,
    pub(crate) pois_endpoint: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) zone_identity: std::option::Option<std::string::String>,
}
impl EsamBuilder {
    /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
    pub fn acquisition_point_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.acquisition_point_id = Some(input.into());
        self
    }
    /// Sent as acquisitionPointIdentity to identify the MediaLive channel to the POIS.
    pub fn set_acquisition_point_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.acquisition_point_id = input;
        self
    }
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    pub fn ad_avail_offset(mut self, input: i32) -> Self {
        self.ad_avail_offset = Some(input);
        self
    }
    /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
    pub fn set_ad_avail_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.ad_avail_offset = input;
        self
    }
    /// Documentation update needed
    pub fn password_param(mut self, input: impl Into<std::string::String>) -> Self {
        self.password_param = Some(input.into());
        self
    }
    /// Documentation update needed
    pub fn set_password_param(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password_param = input;
        self
    }
    /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
    pub fn pois_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.pois_endpoint = Some(input.into());
        self
    }
    /// The URL of the signal conditioner endpoint on the Placement Opportunity Information System (POIS). MediaLive sends SignalProcessingEvents here when SCTE-35 messages are read.
    pub fn set_pois_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pois_endpoint = input;
        self
    }
    /// Documentation update needed
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// Documentation update needed
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
    pub fn zone_identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.zone_identity = Some(input.into());
        self
    }
    /// Optional data sent as zoneIdentity to identify the MediaLive channel to the POIS.
    pub fn set_zone_identity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.zone_identity = input;
        self
    }
    /// Consumes the builder and constructs a [`Esam`](crate::types::Esam).
    pub fn build(self) -> crate::types::Esam {
        crate::types::Esam {
            acquisition_point_id: self.acquisition_point_id,
            ad_avail_offset: self.ad_avail_offset.unwrap_or_default(),
            password_param: self.password_param,
            pois_endpoint: self.pois_endpoint,
            username: self.username,
            zone_identity: self.zone_identity,
        }
    }
}
