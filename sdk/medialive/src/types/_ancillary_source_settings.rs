// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Ancillary Source Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AncillarySourceSettings {
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    #[doc(hidden)]
    pub source_ancillary_channel_number: i32,
}
impl AncillarySourceSettings {
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    pub fn source_ancillary_channel_number(&self) -> i32 {
        self.source_ancillary_channel_number
    }
}
impl AncillarySourceSettings {
    /// Creates a new builder-style object to manufacture [`AncillarySourceSettings`](crate::types::AncillarySourceSettings).
    pub fn builder() -> crate::types::builders::AncillarySourceSettingsBuilder {
        crate::types::builders::AncillarySourceSettingsBuilder::default()
    }
}

/// A builder for [`AncillarySourceSettings`](crate::types::AncillarySourceSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AncillarySourceSettingsBuilder {
    pub(crate) source_ancillary_channel_number: std::option::Option<i32>,
}
impl AncillarySourceSettingsBuilder {
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    pub fn source_ancillary_channel_number(mut self, input: i32) -> Self {
        self.source_ancillary_channel_number = Some(input);
        self
    }
    /// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
    pub fn set_source_ancillary_channel_number(mut self, input: std::option::Option<i32>) -> Self {
        self.source_ancillary_channel_number = input;
        self
    }
    /// Consumes the builder and constructs a [`AncillarySourceSettings`](crate::types::AncillarySourceSettings).
    pub fn build(self) -> crate::types::AncillarySourceSettings {
        crate::types::AncillarySourceSettings {
            source_ancillary_channel_number: self
                .source_ancillary_channel_number
                .unwrap_or_default(),
        }
    }
}
