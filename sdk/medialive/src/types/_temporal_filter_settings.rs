// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Temporal Filter Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemporalFilterSettings {
    /// If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
    #[doc(hidden)]
    pub post_filter_sharpening:
        std::option::Option<crate::types::TemporalFilterPostFilterSharpening>,
    /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
    #[doc(hidden)]
    pub strength: std::option::Option<crate::types::TemporalFilterStrength>,
}
impl TemporalFilterSettings {
    /// If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
    pub fn post_filter_sharpening(
        &self,
    ) -> std::option::Option<&crate::types::TemporalFilterPostFilterSharpening> {
        self.post_filter_sharpening.as_ref()
    }
    /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
    pub fn strength(&self) -> std::option::Option<&crate::types::TemporalFilterStrength> {
        self.strength.as_ref()
    }
}
impl TemporalFilterSettings {
    /// Creates a new builder-style object to manufacture [`TemporalFilterSettings`](crate::types::TemporalFilterSettings).
    pub fn builder() -> crate::types::builders::TemporalFilterSettingsBuilder {
        crate::types::builders::TemporalFilterSettingsBuilder::default()
    }
}

/// A builder for [`TemporalFilterSettings`](crate::types::TemporalFilterSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemporalFilterSettingsBuilder {
    pub(crate) post_filter_sharpening:
        std::option::Option<crate::types::TemporalFilterPostFilterSharpening>,
    pub(crate) strength: std::option::Option<crate::types::TemporalFilterStrength>,
}
impl TemporalFilterSettingsBuilder {
    /// If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
    pub fn post_filter_sharpening(
        mut self,
        input: crate::types::TemporalFilterPostFilterSharpening,
    ) -> Self {
        self.post_filter_sharpening = Some(input);
        self
    }
    /// If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
    pub fn set_post_filter_sharpening(
        mut self,
        input: std::option::Option<crate::types::TemporalFilterPostFilterSharpening>,
    ) -> Self {
        self.post_filter_sharpening = input;
        self
    }
    /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
    pub fn strength(mut self, input: crate::types::TemporalFilterStrength) -> Self {
        self.strength = Some(input);
        self
    }
    /// Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
    pub fn set_strength(
        mut self,
        input: std::option::Option<crate::types::TemporalFilterStrength>,
    ) -> Self {
        self.strength = input;
        self
    }
    /// Consumes the builder and constructs a [`TemporalFilterSettings`](crate::types::TemporalFilterSettings).
    pub fn build(self) -> crate::types::TemporalFilterSettings {
        crate::types::TemporalFilterSettings {
            post_filter_sharpening: self.post_filter_sharpening,
            strength: self.strength,
        }
    }
}
