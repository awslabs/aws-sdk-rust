// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TemporalFilterStrength`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let temporalfilterstrength = unimplemented!();
/// match temporalfilterstrength {
///     TemporalFilterStrength::Auto => { /* ... */ },
///     TemporalFilterStrength::Strength1 => { /* ... */ },
///     TemporalFilterStrength::Strength10 => { /* ... */ },
///     TemporalFilterStrength::Strength11 => { /* ... */ },
///     TemporalFilterStrength::Strength12 => { /* ... */ },
///     TemporalFilterStrength::Strength13 => { /* ... */ },
///     TemporalFilterStrength::Strength14 => { /* ... */ },
///     TemporalFilterStrength::Strength15 => { /* ... */ },
///     TemporalFilterStrength::Strength16 => { /* ... */ },
///     TemporalFilterStrength::Strength2 => { /* ... */ },
///     TemporalFilterStrength::Strength3 => { /* ... */ },
///     TemporalFilterStrength::Strength4 => { /* ... */ },
///     TemporalFilterStrength::Strength5 => { /* ... */ },
///     TemporalFilterStrength::Strength6 => { /* ... */ },
///     TemporalFilterStrength::Strength7 => { /* ... */ },
///     TemporalFilterStrength::Strength8 => { /* ... */ },
///     TemporalFilterStrength::Strength9 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `temporalfilterstrength` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TemporalFilterStrength::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TemporalFilterStrength::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TemporalFilterStrength::NewFeature` is defined.
/// Specifically, when `temporalfilterstrength` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TemporalFilterStrength::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Temporal Filter Strength
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TemporalFilterStrength {
    #[allow(missing_docs)] // documentation missing in model
    Auto,
    #[allow(missing_docs)] // documentation missing in model
    Strength1,
    #[allow(missing_docs)] // documentation missing in model
    Strength10,
    #[allow(missing_docs)] // documentation missing in model
    Strength11,
    #[allow(missing_docs)] // documentation missing in model
    Strength12,
    #[allow(missing_docs)] // documentation missing in model
    Strength13,
    #[allow(missing_docs)] // documentation missing in model
    Strength14,
    #[allow(missing_docs)] // documentation missing in model
    Strength15,
    #[allow(missing_docs)] // documentation missing in model
    Strength16,
    #[allow(missing_docs)] // documentation missing in model
    Strength2,
    #[allow(missing_docs)] // documentation missing in model
    Strength3,
    #[allow(missing_docs)] // documentation missing in model
    Strength4,
    #[allow(missing_docs)] // documentation missing in model
    Strength5,
    #[allow(missing_docs)] // documentation missing in model
    Strength6,
    #[allow(missing_docs)] // documentation missing in model
    Strength7,
    #[allow(missing_docs)] // documentation missing in model
    Strength8,
    #[allow(missing_docs)] // documentation missing in model
    Strength9,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for TemporalFilterStrength {
    fn from(s: &str) -> Self {
        match s {
            "AUTO" => TemporalFilterStrength::Auto,
            "STRENGTH_1" => TemporalFilterStrength::Strength1,
            "STRENGTH_10" => TemporalFilterStrength::Strength10,
            "STRENGTH_11" => TemporalFilterStrength::Strength11,
            "STRENGTH_12" => TemporalFilterStrength::Strength12,
            "STRENGTH_13" => TemporalFilterStrength::Strength13,
            "STRENGTH_14" => TemporalFilterStrength::Strength14,
            "STRENGTH_15" => TemporalFilterStrength::Strength15,
            "STRENGTH_16" => TemporalFilterStrength::Strength16,
            "STRENGTH_2" => TemporalFilterStrength::Strength2,
            "STRENGTH_3" => TemporalFilterStrength::Strength3,
            "STRENGTH_4" => TemporalFilterStrength::Strength4,
            "STRENGTH_5" => TemporalFilterStrength::Strength5,
            "STRENGTH_6" => TemporalFilterStrength::Strength6,
            "STRENGTH_7" => TemporalFilterStrength::Strength7,
            "STRENGTH_8" => TemporalFilterStrength::Strength8,
            "STRENGTH_9" => TemporalFilterStrength::Strength9,
            other => TemporalFilterStrength::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for TemporalFilterStrength {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TemporalFilterStrength::from(s))
    }
}
impl TemporalFilterStrength {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TemporalFilterStrength::Auto => "AUTO",
            TemporalFilterStrength::Strength1 => "STRENGTH_1",
            TemporalFilterStrength::Strength10 => "STRENGTH_10",
            TemporalFilterStrength::Strength11 => "STRENGTH_11",
            TemporalFilterStrength::Strength12 => "STRENGTH_12",
            TemporalFilterStrength::Strength13 => "STRENGTH_13",
            TemporalFilterStrength::Strength14 => "STRENGTH_14",
            TemporalFilterStrength::Strength15 => "STRENGTH_15",
            TemporalFilterStrength::Strength16 => "STRENGTH_16",
            TemporalFilterStrength::Strength2 => "STRENGTH_2",
            TemporalFilterStrength::Strength3 => "STRENGTH_3",
            TemporalFilterStrength::Strength4 => "STRENGTH_4",
            TemporalFilterStrength::Strength5 => "STRENGTH_5",
            TemporalFilterStrength::Strength6 => "STRENGTH_6",
            TemporalFilterStrength::Strength7 => "STRENGTH_7",
            TemporalFilterStrength::Strength8 => "STRENGTH_8",
            TemporalFilterStrength::Strength9 => "STRENGTH_9",
            TemporalFilterStrength::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTO",
            "STRENGTH_1",
            "STRENGTH_10",
            "STRENGTH_11",
            "STRENGTH_12",
            "STRENGTH_13",
            "STRENGTH_14",
            "STRENGTH_15",
            "STRENGTH_16",
            "STRENGTH_2",
            "STRENGTH_3",
            "STRENGTH_4",
            "STRENGTH_5",
            "STRENGTH_6",
            "STRENGTH_7",
            "STRENGTH_8",
            "STRENGTH_9",
        ]
    }
}
impl AsRef<str> for TemporalFilterStrength {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
