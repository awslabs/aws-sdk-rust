// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A mapping that's used to pair a logical network interface name on a Node with the physical interface name exposed in the operating system.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeInterfaceMapping {
    /// A uniform logical interface name to address in a MediaLive channel configuration.
    pub logical_interface_name: ::std::option::Option<::std::string::String>,
    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    pub network_interface_mode: ::std::option::Option<crate::types::NetworkInterfaceMode>,
    /// The name of the physical interface on the hardware that will be running Elemental anywhere.
    pub physical_interface_name: ::std::option::Option<::std::string::String>,
}
impl NodeInterfaceMapping {
    /// A uniform logical interface name to address in a MediaLive channel configuration.
    pub fn logical_interface_name(&self) -> ::std::option::Option<&str> {
        self.logical_interface_name.as_deref()
    }
    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    pub fn network_interface_mode(&self) -> ::std::option::Option<&crate::types::NetworkInterfaceMode> {
        self.network_interface_mode.as_ref()
    }
    /// The name of the physical interface on the hardware that will be running Elemental anywhere.
    pub fn physical_interface_name(&self) -> ::std::option::Option<&str> {
        self.physical_interface_name.as_deref()
    }
}
impl NodeInterfaceMapping {
    /// Creates a new builder-style object to manufacture [`NodeInterfaceMapping`](crate::types::NodeInterfaceMapping).
    pub fn builder() -> crate::types::builders::NodeInterfaceMappingBuilder {
        crate::types::builders::NodeInterfaceMappingBuilder::default()
    }
}

/// A builder for [`NodeInterfaceMapping`](crate::types::NodeInterfaceMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeInterfaceMappingBuilder {
    pub(crate) logical_interface_name: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_mode: ::std::option::Option<crate::types::NetworkInterfaceMode>,
    pub(crate) physical_interface_name: ::std::option::Option<::std::string::String>,
}
impl NodeInterfaceMappingBuilder {
    /// A uniform logical interface name to address in a MediaLive channel configuration.
    pub fn logical_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// A uniform logical interface name to address in a MediaLive channel configuration.
    pub fn set_logical_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_interface_name = input;
        self
    }
    /// A uniform logical interface name to address in a MediaLive channel configuration.
    pub fn get_logical_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_interface_name
    }
    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    pub fn network_interface_mode(mut self, input: crate::types::NetworkInterfaceMode) -> Self {
        self.network_interface_mode = ::std::option::Option::Some(input);
        self
    }
    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    pub fn set_network_interface_mode(mut self, input: ::std::option::Option<crate::types::NetworkInterfaceMode>) -> Self {
        self.network_interface_mode = input;
        self
    }
    /// Used in NodeInterfaceMapping and NodeInterfaceMappingCreateRequest
    pub fn get_network_interface_mode(&self) -> &::std::option::Option<crate::types::NetworkInterfaceMode> {
        &self.network_interface_mode
    }
    /// The name of the physical interface on the hardware that will be running Elemental anywhere.
    pub fn physical_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.physical_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the physical interface on the hardware that will be running Elemental anywhere.
    pub fn set_physical_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.physical_interface_name = input;
        self
    }
    /// The name of the physical interface on the hardware that will be running Elemental anywhere.
    pub fn get_physical_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.physical_interface_name
    }
    /// Consumes the builder and constructs a [`NodeInterfaceMapping`](crate::types::NodeInterfaceMapping).
    pub fn build(self) -> crate::types::NodeInterfaceMapping {
        crate::types::NodeInterfaceMapping {
            logical_interface_name: self.logical_interface_name,
            network_interface_mode: self.network_interface_mode,
            physical_interface_name: self.physical_interface_name,
        }
    }
}
