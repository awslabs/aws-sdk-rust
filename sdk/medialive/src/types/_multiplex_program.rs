// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The multiplex program object.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultiplexProgram {
    /// The MediaLive channel associated with the program.
    #[doc(hidden)]
    pub channel_id: std::option::Option<std::string::String>,
    /// The settings for this multiplex program.
    #[doc(hidden)]
    pub multiplex_program_settings: std::option::Option<crate::types::MultiplexProgramSettings>,
    /// The packet identifier map for this multiplex program.
    #[doc(hidden)]
    pub packet_identifiers_map:
        std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>,
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    #[doc(hidden)]
    pub pipeline_details:
        std::option::Option<std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>,
    /// The name of the multiplex program.
    #[doc(hidden)]
    pub program_name: std::option::Option<std::string::String>,
}
impl MultiplexProgram {
    /// The MediaLive channel associated with the program.
    pub fn channel_id(&self) -> std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// The settings for this multiplex program.
    pub fn multiplex_program_settings(
        &self,
    ) -> std::option::Option<&crate::types::MultiplexProgramSettings> {
        self.multiplex_program_settings.as_ref()
    }
    /// The packet identifier map for this multiplex program.
    pub fn packet_identifiers_map(
        &self,
    ) -> std::option::Option<&crate::types::MultiplexProgramPacketIdentifiersMap> {
        self.packet_identifiers_map.as_ref()
    }
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn pipeline_details(
        &self,
    ) -> std::option::Option<&[crate::types::MultiplexProgramPipelineDetail]> {
        self.pipeline_details.as_deref()
    }
    /// The name of the multiplex program.
    pub fn program_name(&self) -> std::option::Option<&str> {
        self.program_name.as_deref()
    }
}
impl MultiplexProgram {
    /// Creates a new builder-style object to manufacture [`MultiplexProgram`](crate::types::MultiplexProgram).
    pub fn builder() -> crate::types::builders::MultiplexProgramBuilder {
        crate::types::builders::MultiplexProgramBuilder::default()
    }
}

/// A builder for [`MultiplexProgram`](crate::types::MultiplexProgram).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultiplexProgramBuilder {
    pub(crate) channel_id: std::option::Option<std::string::String>,
    pub(crate) multiplex_program_settings:
        std::option::Option<crate::types::MultiplexProgramSettings>,
    pub(crate) packet_identifiers_map:
        std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>,
    pub(crate) pipeline_details:
        std::option::Option<std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>,
    pub(crate) program_name: std::option::Option<std::string::String>,
}
impl MultiplexProgramBuilder {
    /// The MediaLive channel associated with the program.
    pub fn channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_id = Some(input.into());
        self
    }
    /// The MediaLive channel associated with the program.
    pub fn set_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// The settings for this multiplex program.
    pub fn multiplex_program_settings(
        mut self,
        input: crate::types::MultiplexProgramSettings,
    ) -> Self {
        self.multiplex_program_settings = Some(input);
        self
    }
    /// The settings for this multiplex program.
    pub fn set_multiplex_program_settings(
        mut self,
        input: std::option::Option<crate::types::MultiplexProgramSettings>,
    ) -> Self {
        self.multiplex_program_settings = input;
        self
    }
    /// The packet identifier map for this multiplex program.
    pub fn packet_identifiers_map(
        mut self,
        input: crate::types::MultiplexProgramPacketIdentifiersMap,
    ) -> Self {
        self.packet_identifiers_map = Some(input);
        self
    }
    /// The packet identifier map for this multiplex program.
    pub fn set_packet_identifiers_map(
        mut self,
        input: std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>,
    ) -> Self {
        self.packet_identifiers_map = input;
        self
    }
    /// Appends an item to `pipeline_details`.
    ///
    /// To override the contents of this collection use [`set_pipeline_details`](Self::set_pipeline_details).
    ///
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn pipeline_details(mut self, input: crate::types::MultiplexProgramPipelineDetail) -> Self {
        let mut v = self.pipeline_details.unwrap_or_default();
        v.push(input);
        self.pipeline_details = Some(v);
        self
    }
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn set_pipeline_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>,
    ) -> Self {
        self.pipeline_details = input;
        self
    }
    /// The name of the multiplex program.
    pub fn program_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.program_name = Some(input.into());
        self
    }
    /// The name of the multiplex program.
    pub fn set_program_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// Consumes the builder and constructs a [`MultiplexProgram`](crate::types::MultiplexProgram).
    pub fn build(self) -> crate::types::MultiplexProgram {
        crate::types::MultiplexProgram {
            channel_id: self.channel_id,
            multiplex_program_settings: self.multiplex_program_settings,
            packet_identifiers_map: self.packet_identifiers_map,
            pipeline_details: self.pipeline_details,
            program_name: self.program_name,
        }
    }
}
