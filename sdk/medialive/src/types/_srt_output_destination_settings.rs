// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for SrtOutputDestinationSettings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SrtOutputDestinationSettings {
    /// Arn used to extract the password from Secrets Manager
    pub encryption_passphrase_secret_arn: ::std::option::Option<::std::string::String>,
    /// Stream id for SRT destinations (URLs of type srt://)
    pub stream_id: ::std::option::Option<::std::string::String>,
    /// A URL specifying a destination
    pub url: ::std::option::Option<::std::string::String>,
}
impl SrtOutputDestinationSettings {
    /// Arn used to extract the password from Secrets Manager
    pub fn encryption_passphrase_secret_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_passphrase_secret_arn.as_deref()
    }
    /// Stream id for SRT destinations (URLs of type srt://)
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// A URL specifying a destination
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl SrtOutputDestinationSettings {
    /// Creates a new builder-style object to manufacture [`SrtOutputDestinationSettings`](crate::types::SrtOutputDestinationSettings).
    pub fn builder() -> crate::types::builders::SrtOutputDestinationSettingsBuilder {
        crate::types::builders::SrtOutputDestinationSettingsBuilder::default()
    }
}

/// A builder for [`SrtOutputDestinationSettings`](crate::types::SrtOutputDestinationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SrtOutputDestinationSettingsBuilder {
    pub(crate) encryption_passphrase_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl SrtOutputDestinationSettingsBuilder {
    /// Arn used to extract the password from Secrets Manager
    pub fn encryption_passphrase_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_passphrase_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Arn used to extract the password from Secrets Manager
    pub fn set_encryption_passphrase_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_passphrase_secret_arn = input;
        self
    }
    /// Arn used to extract the password from Secrets Manager
    pub fn get_encryption_passphrase_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_passphrase_secret_arn
    }
    /// Stream id for SRT destinations (URLs of type srt://)
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Stream id for SRT destinations (URLs of type srt://)
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// Stream id for SRT destinations (URLs of type srt://)
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// A URL specifying a destination
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// A URL specifying a destination
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// A URL specifying a destination
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`SrtOutputDestinationSettings`](crate::types::SrtOutputDestinationSettings).
    pub fn build(self) -> crate::types::SrtOutputDestinationSettings {
        crate::types::SrtOutputDestinationSettings {
            encryption_passphrase_secret_arn: self.encryption_passphrase_secret_arn,
            stream_id: self.stream_id,
            url: self.url,
        }
    }
}
