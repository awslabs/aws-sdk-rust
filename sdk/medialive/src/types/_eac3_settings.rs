// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Eac3 Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Eac3Settings {
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub attenuation_control: std::option::Option<crate::types::Eac3AttenuationControl>,
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    #[doc(hidden)]
    pub bitrate: f64,
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    #[doc(hidden)]
    pub bitstream_mode: std::option::Option<crate::types::Eac3BitstreamMode>,
    /// Dolby Digital Plus coding mode. Determines number of channels.
    #[doc(hidden)]
    pub coding_mode: std::option::Option<crate::types::Eac3CodingMode>,
    /// When set to enabled, activates a DC highpass filter for all input channels.
    #[doc(hidden)]
    pub dc_filter: std::option::Option<crate::types::Eac3DcFilter>,
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    #[doc(hidden)]
    pub dialnorm: i32,
    /// Sets the Dolby dynamic range compression profile.
    #[doc(hidden)]
    pub drc_line: std::option::Option<crate::types::Eac3DrcLine>,
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    #[doc(hidden)]
    pub drc_rf: std::option::Option<crate::types::Eac3DrcRf>,
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    #[doc(hidden)]
    pub lfe_control: std::option::Option<crate::types::Eac3LfeControl>,
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    #[doc(hidden)]
    pub lfe_filter: std::option::Option<crate::types::Eac3LfeFilter>,
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub lo_ro_center_mix_level: f64,
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub lo_ro_surround_mix_level: f64,
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub lt_rt_center_mix_level: f64,
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub lt_rt_surround_mix_level: f64,
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    #[doc(hidden)]
    pub metadata_control: std::option::Option<crate::types::Eac3MetadataControl>,
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    #[doc(hidden)]
    pub passthrough_control: std::option::Option<crate::types::Eac3PassthroughControl>,
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub phase_control: std::option::Option<crate::types::Eac3PhaseControl>,
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    #[doc(hidden)]
    pub stereo_downmix: std::option::Option<crate::types::Eac3StereoDownmix>,
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    #[doc(hidden)]
    pub surround_ex_mode: std::option::Option<crate::types::Eac3SurroundExMode>,
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    #[doc(hidden)]
    pub surround_mode: std::option::Option<crate::types::Eac3SurroundMode>,
}
impl Eac3Settings {
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    pub fn attenuation_control(
        &self,
    ) -> std::option::Option<&crate::types::Eac3AttenuationControl> {
        self.attenuation_control.as_ref()
    }
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    pub fn bitrate(&self) -> f64 {
        self.bitrate
    }
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    pub fn bitstream_mode(&self) -> std::option::Option<&crate::types::Eac3BitstreamMode> {
        self.bitstream_mode.as_ref()
    }
    /// Dolby Digital Plus coding mode. Determines number of channels.
    pub fn coding_mode(&self) -> std::option::Option<&crate::types::Eac3CodingMode> {
        self.coding_mode.as_ref()
    }
    /// When set to enabled, activates a DC highpass filter for all input channels.
    pub fn dc_filter(&self) -> std::option::Option<&crate::types::Eac3DcFilter> {
        self.dc_filter.as_ref()
    }
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    pub fn dialnorm(&self) -> i32 {
        self.dialnorm
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn drc_line(&self) -> std::option::Option<&crate::types::Eac3DrcLine> {
        self.drc_line.as_ref()
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn drc_rf(&self) -> std::option::Option<&crate::types::Eac3DrcRf> {
        self.drc_rf.as_ref()
    }
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    pub fn lfe_control(&self) -> std::option::Option<&crate::types::Eac3LfeControl> {
        self.lfe_control.as_ref()
    }
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    pub fn lfe_filter(&self) -> std::option::Option<&crate::types::Eac3LfeFilter> {
        self.lfe_filter.as_ref()
    }
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    pub fn lo_ro_center_mix_level(&self) -> f64 {
        self.lo_ro_center_mix_level
    }
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    pub fn lo_ro_surround_mix_level(&self) -> f64 {
        self.lo_ro_surround_mix_level
    }
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    pub fn lt_rt_center_mix_level(&self) -> f64 {
        self.lt_rt_center_mix_level
    }
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    pub fn lt_rt_surround_mix_level(&self) -> f64 {
        self.lt_rt_surround_mix_level
    }
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    pub fn metadata_control(&self) -> std::option::Option<&crate::types::Eac3MetadataControl> {
        self.metadata_control.as_ref()
    }
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    pub fn passthrough_control(
        &self,
    ) -> std::option::Option<&crate::types::Eac3PassthroughControl> {
        self.passthrough_control.as_ref()
    }
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    pub fn phase_control(&self) -> std::option::Option<&crate::types::Eac3PhaseControl> {
        self.phase_control.as_ref()
    }
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    pub fn stereo_downmix(&self) -> std::option::Option<&crate::types::Eac3StereoDownmix> {
        self.stereo_downmix.as_ref()
    }
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    pub fn surround_ex_mode(&self) -> std::option::Option<&crate::types::Eac3SurroundExMode> {
        self.surround_ex_mode.as_ref()
    }
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    pub fn surround_mode(&self) -> std::option::Option<&crate::types::Eac3SurroundMode> {
        self.surround_mode.as_ref()
    }
}
impl Eac3Settings {
    /// Creates a new builder-style object to manufacture [`Eac3Settings`](crate::types::Eac3Settings).
    pub fn builder() -> crate::types::builders::Eac3SettingsBuilder {
        crate::types::builders::Eac3SettingsBuilder::default()
    }
}

/// A builder for [`Eac3Settings`](crate::types::Eac3Settings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Eac3SettingsBuilder {
    pub(crate) attenuation_control: std::option::Option<crate::types::Eac3AttenuationControl>,
    pub(crate) bitrate: std::option::Option<f64>,
    pub(crate) bitstream_mode: std::option::Option<crate::types::Eac3BitstreamMode>,
    pub(crate) coding_mode: std::option::Option<crate::types::Eac3CodingMode>,
    pub(crate) dc_filter: std::option::Option<crate::types::Eac3DcFilter>,
    pub(crate) dialnorm: std::option::Option<i32>,
    pub(crate) drc_line: std::option::Option<crate::types::Eac3DrcLine>,
    pub(crate) drc_rf: std::option::Option<crate::types::Eac3DrcRf>,
    pub(crate) lfe_control: std::option::Option<crate::types::Eac3LfeControl>,
    pub(crate) lfe_filter: std::option::Option<crate::types::Eac3LfeFilter>,
    pub(crate) lo_ro_center_mix_level: std::option::Option<f64>,
    pub(crate) lo_ro_surround_mix_level: std::option::Option<f64>,
    pub(crate) lt_rt_center_mix_level: std::option::Option<f64>,
    pub(crate) lt_rt_surround_mix_level: std::option::Option<f64>,
    pub(crate) metadata_control: std::option::Option<crate::types::Eac3MetadataControl>,
    pub(crate) passthrough_control: std::option::Option<crate::types::Eac3PassthroughControl>,
    pub(crate) phase_control: std::option::Option<crate::types::Eac3PhaseControl>,
    pub(crate) stereo_downmix: std::option::Option<crate::types::Eac3StereoDownmix>,
    pub(crate) surround_ex_mode: std::option::Option<crate::types::Eac3SurroundExMode>,
    pub(crate) surround_mode: std::option::Option<crate::types::Eac3SurroundMode>,
}
impl Eac3SettingsBuilder {
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    pub fn attenuation_control(mut self, input: crate::types::Eac3AttenuationControl) -> Self {
        self.attenuation_control = Some(input);
        self
    }
    /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
    pub fn set_attenuation_control(
        mut self,
        input: std::option::Option<crate::types::Eac3AttenuationControl>,
    ) -> Self {
        self.attenuation_control = input;
        self
    }
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    pub fn bitrate(mut self, input: f64) -> Self {
        self.bitrate = Some(input);
        self
    }
    /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
    pub fn set_bitrate(mut self, input: std::option::Option<f64>) -> Self {
        self.bitrate = input;
        self
    }
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    pub fn bitstream_mode(mut self, input: crate::types::Eac3BitstreamMode) -> Self {
        self.bitstream_mode = Some(input);
        self
    }
    /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
    pub fn set_bitstream_mode(
        mut self,
        input: std::option::Option<crate::types::Eac3BitstreamMode>,
    ) -> Self {
        self.bitstream_mode = input;
        self
    }
    /// Dolby Digital Plus coding mode. Determines number of channels.
    pub fn coding_mode(mut self, input: crate::types::Eac3CodingMode) -> Self {
        self.coding_mode = Some(input);
        self
    }
    /// Dolby Digital Plus coding mode. Determines number of channels.
    pub fn set_coding_mode(
        mut self,
        input: std::option::Option<crate::types::Eac3CodingMode>,
    ) -> Self {
        self.coding_mode = input;
        self
    }
    /// When set to enabled, activates a DC highpass filter for all input channels.
    pub fn dc_filter(mut self, input: crate::types::Eac3DcFilter) -> Self {
        self.dc_filter = Some(input);
        self
    }
    /// When set to enabled, activates a DC highpass filter for all input channels.
    pub fn set_dc_filter(mut self, input: std::option::Option<crate::types::Eac3DcFilter>) -> Self {
        self.dc_filter = input;
        self
    }
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    pub fn dialnorm(mut self, input: i32) -> Self {
        self.dialnorm = Some(input);
        self
    }
    /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
    pub fn set_dialnorm(mut self, input: std::option::Option<i32>) -> Self {
        self.dialnorm = input;
        self
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn drc_line(mut self, input: crate::types::Eac3DrcLine) -> Self {
        self.drc_line = Some(input);
        self
    }
    /// Sets the Dolby dynamic range compression profile.
    pub fn set_drc_line(mut self, input: std::option::Option<crate::types::Eac3DrcLine>) -> Self {
        self.drc_line = input;
        self
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn drc_rf(mut self, input: crate::types::Eac3DrcRf) -> Self {
        self.drc_rf = Some(input);
        self
    }
    /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
    pub fn set_drc_rf(mut self, input: std::option::Option<crate::types::Eac3DrcRf>) -> Self {
        self.drc_rf = input;
        self
    }
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    pub fn lfe_control(mut self, input: crate::types::Eac3LfeControl) -> Self {
        self.lfe_control = Some(input);
        self
    }
    /// When encoding 3/2 audio, setting to lfe enables the LFE channel
    pub fn set_lfe_control(
        mut self,
        input: std::option::Option<crate::types::Eac3LfeControl>,
    ) -> Self {
        self.lfe_control = input;
        self
    }
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    pub fn lfe_filter(mut self, input: crate::types::Eac3LfeFilter) -> Self {
        self.lfe_filter = Some(input);
        self
    }
    /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
    pub fn set_lfe_filter(
        mut self,
        input: std::option::Option<crate::types::Eac3LfeFilter>,
    ) -> Self {
        self.lfe_filter = input;
        self
    }
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    pub fn lo_ro_center_mix_level(mut self, input: f64) -> Self {
        self.lo_ro_center_mix_level = Some(input);
        self
    }
    /// Left only/Right only center mix level. Only used for 3/2 coding mode.
    pub fn set_lo_ro_center_mix_level(mut self, input: std::option::Option<f64>) -> Self {
        self.lo_ro_center_mix_level = input;
        self
    }
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    pub fn lo_ro_surround_mix_level(mut self, input: f64) -> Self {
        self.lo_ro_surround_mix_level = Some(input);
        self
    }
    /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
    pub fn set_lo_ro_surround_mix_level(mut self, input: std::option::Option<f64>) -> Self {
        self.lo_ro_surround_mix_level = input;
        self
    }
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    pub fn lt_rt_center_mix_level(mut self, input: f64) -> Self {
        self.lt_rt_center_mix_level = Some(input);
        self
    }
    /// Left total/Right total center mix level. Only used for 3/2 coding mode.
    pub fn set_lt_rt_center_mix_level(mut self, input: std::option::Option<f64>) -> Self {
        self.lt_rt_center_mix_level = input;
        self
    }
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    pub fn lt_rt_surround_mix_level(mut self, input: f64) -> Self {
        self.lt_rt_surround_mix_level = Some(input);
        self
    }
    /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
    pub fn set_lt_rt_surround_mix_level(mut self, input: std::option::Option<f64>) -> Self {
        self.lt_rt_surround_mix_level = input;
        self
    }
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    pub fn metadata_control(mut self, input: crate::types::Eac3MetadataControl) -> Self {
        self.metadata_control = Some(input);
        self
    }
    /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
    pub fn set_metadata_control(
        mut self,
        input: std::option::Option<crate::types::Eac3MetadataControl>,
    ) -> Self {
        self.metadata_control = input;
        self
    }
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    pub fn passthrough_control(mut self, input: crate::types::Eac3PassthroughControl) -> Self {
        self.passthrough_control = Some(input);
        self
    }
    /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
    pub fn set_passthrough_control(
        mut self,
        input: std::option::Option<crate::types::Eac3PassthroughControl>,
    ) -> Self {
        self.passthrough_control = input;
        self
    }
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    pub fn phase_control(mut self, input: crate::types::Eac3PhaseControl) -> Self {
        self.phase_control = Some(input);
        self
    }
    /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
    pub fn set_phase_control(
        mut self,
        input: std::option::Option<crate::types::Eac3PhaseControl>,
    ) -> Self {
        self.phase_control = input;
        self
    }
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    pub fn stereo_downmix(mut self, input: crate::types::Eac3StereoDownmix) -> Self {
        self.stereo_downmix = Some(input);
        self
    }
    /// Stereo downmix preference. Only used for 3/2 coding mode.
    pub fn set_stereo_downmix(
        mut self,
        input: std::option::Option<crate::types::Eac3StereoDownmix>,
    ) -> Self {
        self.stereo_downmix = input;
        self
    }
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    pub fn surround_ex_mode(mut self, input: crate::types::Eac3SurroundExMode) -> Self {
        self.surround_ex_mode = Some(input);
        self
    }
    /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
    pub fn set_surround_ex_mode(
        mut self,
        input: std::option::Option<crate::types::Eac3SurroundExMode>,
    ) -> Self {
        self.surround_ex_mode = input;
        self
    }
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    pub fn surround_mode(mut self, input: crate::types::Eac3SurroundMode) -> Self {
        self.surround_mode = Some(input);
        self
    }
    /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
    pub fn set_surround_mode(
        mut self,
        input: std::option::Option<crate::types::Eac3SurroundMode>,
    ) -> Self {
        self.surround_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`Eac3Settings`](crate::types::Eac3Settings).
    pub fn build(self) -> crate::types::Eac3Settings {
        crate::types::Eac3Settings {
            attenuation_control: self.attenuation_control,
            bitrate: self.bitrate.unwrap_or_default(),
            bitstream_mode: self.bitstream_mode,
            coding_mode: self.coding_mode,
            dc_filter: self.dc_filter,
            dialnorm: self.dialnorm.unwrap_or_default(),
            drc_line: self.drc_line,
            drc_rf: self.drc_rf,
            lfe_control: self.lfe_control,
            lfe_filter: self.lfe_filter,
            lo_ro_center_mix_level: self.lo_ro_center_mix_level.unwrap_or_default(),
            lo_ro_surround_mix_level: self.lo_ro_surround_mix_level.unwrap_or_default(),
            lt_rt_center_mix_level: self.lt_rt_center_mix_level.unwrap_or_default(),
            lt_rt_surround_mix_level: self.lt_rt_surround_mix_level.unwrap_or_default(),
            metadata_control: self.metadata_control,
            passthrough_control: self.passthrough_control,
            phase_control: self.phase_control,
            stereo_downmix: self.stereo_downmix,
            surround_ex_mode: self.surround_ex_mode,
            surround_mode: self.surround_mode,
        }
    }
}
