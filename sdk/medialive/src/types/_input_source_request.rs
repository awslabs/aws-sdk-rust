// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for for a PULL type input.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputSourceRequest {
    /// The key used to extract the password from EC2 Parameter store.
    #[doc(hidden)]
    pub password_param: std::option::Option<std::string::String>,
    /// This represents the customer's source URL where stream is pulled from.
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// The username for the input source.
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
}
impl InputSourceRequest {
    /// The key used to extract the password from EC2 Parameter store.
    pub fn password_param(&self) -> std::option::Option<&str> {
        self.password_param.as_deref()
    }
    /// This represents the customer's source URL where stream is pulled from.
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// The username for the input source.
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl InputSourceRequest {
    /// Creates a new builder-style object to manufacture [`InputSourceRequest`](crate::types::InputSourceRequest).
    pub fn builder() -> crate::types::builders::InputSourceRequestBuilder {
        crate::types::builders::InputSourceRequestBuilder::default()
    }
}

/// A builder for [`InputSourceRequest`](crate::types::InputSourceRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputSourceRequestBuilder {
    pub(crate) password_param: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
}
impl InputSourceRequestBuilder {
    /// The key used to extract the password from EC2 Parameter store.
    pub fn password_param(mut self, input: impl Into<std::string::String>) -> Self {
        self.password_param = Some(input.into());
        self
    }
    /// The key used to extract the password from EC2 Parameter store.
    pub fn set_password_param(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password_param = input;
        self
    }
    /// This represents the customer's source URL where stream is pulled from.
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// This represents the customer's source URL where stream is pulled from.
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// The username for the input source.
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// The username for the input source.
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Consumes the builder and constructs a [`InputSourceRequest`](crate::types::InputSourceRequest).
    pub fn build(self) -> crate::types::InputSourceRequest {
        crate::types::InputSourceRequest {
            password_param: self.password_param,
            url: self.url,
            username: self.username,
        }
    }
}
