// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Global Configuration
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GlobalConfiguration {
    /// Value to set the initial audio gain for the Live Event.
    #[doc(hidden)]
    pub initial_audio_gain: i32,
    /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    #[doc(hidden)]
    pub input_end_action: std::option::Option<crate::types::GlobalConfigurationInputEndAction>,
    /// Settings for system actions when input is lost.
    #[doc(hidden)]
    pub input_loss_behavior: std::option::Option<crate::types::InputLossBehavior>,
    /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    #[doc(hidden)]
    pub output_locking_mode:
        std::option::Option<crate::types::GlobalConfigurationOutputLockingMode>,
    /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    #[doc(hidden)]
    pub output_timing_source:
        std::option::Option<crate::types::GlobalConfigurationOutputTimingSource>,
    /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    #[doc(hidden)]
    pub support_low_framerate_inputs:
        std::option::Option<crate::types::GlobalConfigurationLowFramerateInputs>,
}
impl GlobalConfiguration {
    /// Value to set the initial audio gain for the Live Event.
    pub fn initial_audio_gain(&self) -> i32 {
        self.initial_audio_gain
    }
    /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    pub fn input_end_action(
        &self,
    ) -> std::option::Option<&crate::types::GlobalConfigurationInputEndAction> {
        self.input_end_action.as_ref()
    }
    /// Settings for system actions when input is lost.
    pub fn input_loss_behavior(&self) -> std::option::Option<&crate::types::InputLossBehavior> {
        self.input_loss_behavior.as_ref()
    }
    /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    pub fn output_locking_mode(
        &self,
    ) -> std::option::Option<&crate::types::GlobalConfigurationOutputLockingMode> {
        self.output_locking_mode.as_ref()
    }
    /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    pub fn output_timing_source(
        &self,
    ) -> std::option::Option<&crate::types::GlobalConfigurationOutputTimingSource> {
        self.output_timing_source.as_ref()
    }
    /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    pub fn support_low_framerate_inputs(
        &self,
    ) -> std::option::Option<&crate::types::GlobalConfigurationLowFramerateInputs> {
        self.support_low_framerate_inputs.as_ref()
    }
}
impl GlobalConfiguration {
    /// Creates a new builder-style object to manufacture [`GlobalConfiguration`](crate::types::GlobalConfiguration).
    pub fn builder() -> crate::types::builders::GlobalConfigurationBuilder {
        crate::types::builders::GlobalConfigurationBuilder::default()
    }
}

/// A builder for [`GlobalConfiguration`](crate::types::GlobalConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GlobalConfigurationBuilder {
    pub(crate) initial_audio_gain: std::option::Option<i32>,
    pub(crate) input_end_action:
        std::option::Option<crate::types::GlobalConfigurationInputEndAction>,
    pub(crate) input_loss_behavior: std::option::Option<crate::types::InputLossBehavior>,
    pub(crate) output_locking_mode:
        std::option::Option<crate::types::GlobalConfigurationOutputLockingMode>,
    pub(crate) output_timing_source:
        std::option::Option<crate::types::GlobalConfigurationOutputTimingSource>,
    pub(crate) support_low_framerate_inputs:
        std::option::Option<crate::types::GlobalConfigurationLowFramerateInputs>,
}
impl GlobalConfigurationBuilder {
    /// Value to set the initial audio gain for the Live Event.
    pub fn initial_audio_gain(mut self, input: i32) -> Self {
        self.initial_audio_gain = Some(input);
        self
    }
    /// Value to set the initial audio gain for the Live Event.
    pub fn set_initial_audio_gain(mut self, input: std::option::Option<i32>) -> Self {
        self.initial_audio_gain = input;
        self
    }
    /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    pub fn input_end_action(
        mut self,
        input: crate::types::GlobalConfigurationInputEndAction,
    ) -> Self {
        self.input_end_action = Some(input);
        self
    }
    /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
    pub fn set_input_end_action(
        mut self,
        input: std::option::Option<crate::types::GlobalConfigurationInputEndAction>,
    ) -> Self {
        self.input_end_action = input;
        self
    }
    /// Settings for system actions when input is lost.
    pub fn input_loss_behavior(mut self, input: crate::types::InputLossBehavior) -> Self {
        self.input_loss_behavior = Some(input);
        self
    }
    /// Settings for system actions when input is lost.
    pub fn set_input_loss_behavior(
        mut self,
        input: std::option::Option<crate::types::InputLossBehavior>,
    ) -> Self {
        self.input_loss_behavior = input;
        self
    }
    /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    pub fn output_locking_mode(
        mut self,
        input: crate::types::GlobalConfigurationOutputLockingMode,
    ) -> Self {
        self.output_locking_mode = Some(input);
        self
    }
    /// Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
    pub fn set_output_locking_mode(
        mut self,
        input: std::option::Option<crate::types::GlobalConfigurationOutputLockingMode>,
    ) -> Self {
        self.output_locking_mode = input;
        self
    }
    /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    pub fn output_timing_source(
        mut self,
        input: crate::types::GlobalConfigurationOutputTimingSource,
    ) -> Self {
        self.output_timing_source = Some(input);
        self
    }
    /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
    pub fn set_output_timing_source(
        mut self,
        input: std::option::Option<crate::types::GlobalConfigurationOutputTimingSource>,
    ) -> Self {
        self.output_timing_source = input;
        self
    }
    /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    pub fn support_low_framerate_inputs(
        mut self,
        input: crate::types::GlobalConfigurationLowFramerateInputs,
    ) -> Self {
        self.support_low_framerate_inputs = Some(input);
        self
    }
    /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
    pub fn set_support_low_framerate_inputs(
        mut self,
        input: std::option::Option<crate::types::GlobalConfigurationLowFramerateInputs>,
    ) -> Self {
        self.support_low_framerate_inputs = input;
        self
    }
    /// Consumes the builder and constructs a [`GlobalConfiguration`](crate::types::GlobalConfiguration).
    pub fn build(self) -> crate::types::GlobalConfiguration {
        crate::types::GlobalConfiguration {
            initial_audio_gain: self.initial_audio_gain.unwrap_or_default(),
            input_end_action: self.input_end_action,
            input_loss_behavior: self.input_loss_behavior,
            output_locking_mode: self.output_locking_mode,
            output_timing_source: self.output_timing_source,
            support_low_framerate_inputs: self.support_low_framerate_inputs,
        }
    }
}
