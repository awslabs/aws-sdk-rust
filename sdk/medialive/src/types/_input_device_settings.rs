// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for an input device.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputDeviceSettings {
    /// The unique ID for the device.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl InputDeviceSettings {
    /// The unique ID for the device.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl InputDeviceSettings {
    /// Creates a new builder-style object to manufacture [`InputDeviceSettings`](crate::types::InputDeviceSettings).
    pub fn builder() -> crate::types::builders::InputDeviceSettingsBuilder {
        crate::types::builders::InputDeviceSettingsBuilder::default()
    }
}

/// A builder for [`InputDeviceSettings`](crate::types::InputDeviceSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputDeviceSettingsBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
}
impl InputDeviceSettingsBuilder {
    /// The unique ID for the device.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The unique ID for the device.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`InputDeviceSettings`](crate::types::InputDeviceSettings).
    pub fn build(self) -> crate::types::InputDeviceSettings {
        crate::types::InputDeviceSettings { id: self.id }
    }
}
