// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Hls Input Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsInputSettings {
    /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
    #[doc(hidden)]
    pub bandwidth: i32,
    /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
    #[doc(hidden)]
    pub buffer_segments: i32,
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    #[doc(hidden)]
    pub retries: i32,
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    #[doc(hidden)]
    pub retry_interval: i32,
    /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
    #[doc(hidden)]
    pub scte35_source: std::option::Option<crate::types::HlsScte35SourceType>,
}
impl HlsInputSettings {
    /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
    pub fn bandwidth(&self) -> i32 {
        self.bandwidth
    }
    /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
    pub fn buffer_segments(&self) -> i32 {
        self.buffer_segments
    }
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    pub fn retries(&self) -> i32 {
        self.retries
    }
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    pub fn retry_interval(&self) -> i32 {
        self.retry_interval
    }
    /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
    pub fn scte35_source(&self) -> std::option::Option<&crate::types::HlsScte35SourceType> {
        self.scte35_source.as_ref()
    }
}
impl HlsInputSettings {
    /// Creates a new builder-style object to manufacture [`HlsInputSettings`](crate::types::HlsInputSettings).
    pub fn builder() -> crate::types::builders::HlsInputSettingsBuilder {
        crate::types::builders::HlsInputSettingsBuilder::default()
    }
}

/// A builder for [`HlsInputSettings`](crate::types::HlsInputSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsInputSettingsBuilder {
    pub(crate) bandwidth: std::option::Option<i32>,
    pub(crate) buffer_segments: std::option::Option<i32>,
    pub(crate) retries: std::option::Option<i32>,
    pub(crate) retry_interval: std::option::Option<i32>,
    pub(crate) scte35_source: std::option::Option<crate::types::HlsScte35SourceType>,
}
impl HlsInputSettingsBuilder {
    /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
    pub fn bandwidth(mut self, input: i32) -> Self {
        self.bandwidth = Some(input);
        self
    }
    /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
    pub fn set_bandwidth(mut self, input: std::option::Option<i32>) -> Self {
        self.bandwidth = input;
        self
    }
    /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
    pub fn buffer_segments(mut self, input: i32) -> Self {
        self.buffer_segments = Some(input);
        self
    }
    /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
    pub fn set_buffer_segments(mut self, input: std::option::Option<i32>) -> Self {
        self.buffer_segments = input;
        self
    }
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    pub fn retries(mut self, input: i32) -> Self {
        self.retries = Some(input);
        self
    }
    /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
    pub fn set_retries(mut self, input: std::option::Option<i32>) -> Self {
        self.retries = input;
        self
    }
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    pub fn retry_interval(mut self, input: i32) -> Self {
        self.retry_interval = Some(input);
        self
    }
    /// The number of seconds between retries when an attempt to read a manifest or segment fails.
    pub fn set_retry_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.retry_interval = input;
        self
    }
    /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
    pub fn scte35_source(mut self, input: crate::types::HlsScte35SourceType) -> Self {
        self.scte35_source = Some(input);
        self
    }
    /// Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
    pub fn set_scte35_source(
        mut self,
        input: std::option::Option<crate::types::HlsScte35SourceType>,
    ) -> Self {
        self.scte35_source = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsInputSettings`](crate::types::HlsInputSettings).
    pub fn build(self) -> crate::types::HlsInputSettings {
        crate::types::HlsInputSettings {
            bandwidth: self.bandwidth.unwrap_or_default(),
            buffer_segments: self.buffer_segments.unwrap_or_default(),
            retries: self.retries.unwrap_or_default(),
            retry_interval: self.retry_interval.unwrap_or_default(),
            scte35_source: self.scte35_source,
        }
    }
}
