// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings to specify the rendering of motion graphics into the video stream.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MotionGraphicsActivateScheduleActionSettings {
    /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
    #[doc(hidden)]
    pub duration: i64,
    /// Key used to extract the password from EC2 Parameter store
    #[doc(hidden)]
    pub password_param: std::option::Option<std::string::String>,
    /// URI of the HTML5 content to be rendered into the live stream.
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// Documentation update needed
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
}
impl MotionGraphicsActivateScheduleActionSettings {
    /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
    pub fn duration(&self) -> i64 {
        self.duration
    }
    /// Key used to extract the password from EC2 Parameter store
    pub fn password_param(&self) -> std::option::Option<&str> {
        self.password_param.as_deref()
    }
    /// URI of the HTML5 content to be rendered into the live stream.
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// Documentation update needed
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl MotionGraphicsActivateScheduleActionSettings {
    /// Creates a new builder-style object to manufacture [`MotionGraphicsActivateScheduleActionSettings`](crate::types::MotionGraphicsActivateScheduleActionSettings).
    pub fn builder() -> crate::types::builders::MotionGraphicsActivateScheduleActionSettingsBuilder
    {
        crate::types::builders::MotionGraphicsActivateScheduleActionSettingsBuilder::default()
    }
}

/// A builder for [`MotionGraphicsActivateScheduleActionSettings`](crate::types::MotionGraphicsActivateScheduleActionSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MotionGraphicsActivateScheduleActionSettingsBuilder {
    pub(crate) duration: std::option::Option<i64>,
    pub(crate) password_param: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
}
impl MotionGraphicsActivateScheduleActionSettingsBuilder {
    /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = Some(input);
        self
    }
    /// Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
    pub fn set_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// Key used to extract the password from EC2 Parameter store
    pub fn password_param(mut self, input: impl Into<std::string::String>) -> Self {
        self.password_param = Some(input.into());
        self
    }
    /// Key used to extract the password from EC2 Parameter store
    pub fn set_password_param(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password_param = input;
        self
    }
    /// URI of the HTML5 content to be rendered into the live stream.
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// URI of the HTML5 content to be rendered into the live stream.
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Documentation update needed
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// Documentation update needed
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Consumes the builder and constructs a [`MotionGraphicsActivateScheduleActionSettings`](crate::types::MotionGraphicsActivateScheduleActionSettings).
    pub fn build(self) -> crate::types::MotionGraphicsActivateScheduleActionSettings {
        crate::types::MotionGraphicsActivateScheduleActionSettings {
            duration: self.duration.unwrap_or_default(),
            password_param: self.password_param,
            url: self.url,
            username: self.username,
        }
    }
}
