// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Audio Selector Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioSelectorSettings {
    /// Audio Hls Rendition Selection
    #[doc(hidden)]
    pub audio_hls_rendition_selection:
        std::option::Option<crate::types::AudioHlsRenditionSelection>,
    /// Audio Language Selection
    #[doc(hidden)]
    pub audio_language_selection: std::option::Option<crate::types::AudioLanguageSelection>,
    /// Audio Pid Selection
    #[doc(hidden)]
    pub audio_pid_selection: std::option::Option<crate::types::AudioPidSelection>,
    /// Audio Track Selection
    #[doc(hidden)]
    pub audio_track_selection: std::option::Option<crate::types::AudioTrackSelection>,
}
impl AudioSelectorSettings {
    /// Audio Hls Rendition Selection
    pub fn audio_hls_rendition_selection(
        &self,
    ) -> std::option::Option<&crate::types::AudioHlsRenditionSelection> {
        self.audio_hls_rendition_selection.as_ref()
    }
    /// Audio Language Selection
    pub fn audio_language_selection(
        &self,
    ) -> std::option::Option<&crate::types::AudioLanguageSelection> {
        self.audio_language_selection.as_ref()
    }
    /// Audio Pid Selection
    pub fn audio_pid_selection(&self) -> std::option::Option<&crate::types::AudioPidSelection> {
        self.audio_pid_selection.as_ref()
    }
    /// Audio Track Selection
    pub fn audio_track_selection(&self) -> std::option::Option<&crate::types::AudioTrackSelection> {
        self.audio_track_selection.as_ref()
    }
}
impl AudioSelectorSettings {
    /// Creates a new builder-style object to manufacture [`AudioSelectorSettings`](crate::types::AudioSelectorSettings).
    pub fn builder() -> crate::types::builders::AudioSelectorSettingsBuilder {
        crate::types::builders::AudioSelectorSettingsBuilder::default()
    }
}

/// A builder for [`AudioSelectorSettings`](crate::types::AudioSelectorSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioSelectorSettingsBuilder {
    pub(crate) audio_hls_rendition_selection:
        std::option::Option<crate::types::AudioHlsRenditionSelection>,
    pub(crate) audio_language_selection: std::option::Option<crate::types::AudioLanguageSelection>,
    pub(crate) audio_pid_selection: std::option::Option<crate::types::AudioPidSelection>,
    pub(crate) audio_track_selection: std::option::Option<crate::types::AudioTrackSelection>,
}
impl AudioSelectorSettingsBuilder {
    /// Audio Hls Rendition Selection
    pub fn audio_hls_rendition_selection(
        mut self,
        input: crate::types::AudioHlsRenditionSelection,
    ) -> Self {
        self.audio_hls_rendition_selection = Some(input);
        self
    }
    /// Audio Hls Rendition Selection
    pub fn set_audio_hls_rendition_selection(
        mut self,
        input: std::option::Option<crate::types::AudioHlsRenditionSelection>,
    ) -> Self {
        self.audio_hls_rendition_selection = input;
        self
    }
    /// Audio Language Selection
    pub fn audio_language_selection(mut self, input: crate::types::AudioLanguageSelection) -> Self {
        self.audio_language_selection = Some(input);
        self
    }
    /// Audio Language Selection
    pub fn set_audio_language_selection(
        mut self,
        input: std::option::Option<crate::types::AudioLanguageSelection>,
    ) -> Self {
        self.audio_language_selection = input;
        self
    }
    /// Audio Pid Selection
    pub fn audio_pid_selection(mut self, input: crate::types::AudioPidSelection) -> Self {
        self.audio_pid_selection = Some(input);
        self
    }
    /// Audio Pid Selection
    pub fn set_audio_pid_selection(
        mut self,
        input: std::option::Option<crate::types::AudioPidSelection>,
    ) -> Self {
        self.audio_pid_selection = input;
        self
    }
    /// Audio Track Selection
    pub fn audio_track_selection(mut self, input: crate::types::AudioTrackSelection) -> Self {
        self.audio_track_selection = Some(input);
        self
    }
    /// Audio Track Selection
    pub fn set_audio_track_selection(
        mut self,
        input: std::option::Option<crate::types::AudioTrackSelection>,
    ) -> Self {
        self.audio_track_selection = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioSelectorSettings`](crate::types::AudioSelectorSettings).
    pub fn build(self) -> crate::types::AudioSelectorSettings {
        crate::types::AudioSelectorSettings {
            audio_hls_rendition_selection: self.audio_hls_rendition_selection,
            audio_language_selection: self.audio_language_selection,
            audio_pid_selection: self.audio_pid_selection,
            audio_track_selection: self.audio_track_selection,
        }
    }
}
