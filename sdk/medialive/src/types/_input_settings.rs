// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Live Event input parameters. There can be multiple inputs in a single Live Event.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputSettings {
    /// Used to select the audio stream to decode for inputs that have multiple available.
    #[doc(hidden)]
    pub audio_selectors: std::option::Option<std::vec::Vec<crate::types::AudioSelector>>,
    /// Used to select the caption input to use for inputs that have multiple available.
    #[doc(hidden)]
    pub caption_selectors: std::option::Option<std::vec::Vec<crate::types::CaptionSelector>>,
    /// Enable or disable the deblock filter when filtering.
    #[doc(hidden)]
    pub deblock_filter: std::option::Option<crate::types::InputDeblockFilter>,
    /// Enable or disable the denoise filter when filtering.
    #[doc(hidden)]
    pub denoise_filter: std::option::Option<crate::types::InputDenoiseFilter>,
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    #[doc(hidden)]
    pub filter_strength: i32,
    /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
    #[doc(hidden)]
    pub input_filter: std::option::Option<crate::types::InputFilter>,
    /// Input settings.
    #[doc(hidden)]
    pub network_input_settings: std::option::Option<crate::types::NetworkInputSettings>,
    /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
    #[doc(hidden)]
    pub scte35_pid: i32,
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
    #[doc(hidden)]
    pub smpte2038_data_preference: std::option::Option<crate::types::Smpte2038DataPreference>,
    /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
    #[doc(hidden)]
    pub source_end_behavior: std::option::Option<crate::types::InputSourceEndBehavior>,
    /// Informs which video elementary stream to decode for input types that have multiple available.
    #[doc(hidden)]
    pub video_selector: std::option::Option<crate::types::VideoSelector>,
}
impl InputSettings {
    /// Used to select the audio stream to decode for inputs that have multiple available.
    pub fn audio_selectors(&self) -> std::option::Option<&[crate::types::AudioSelector]> {
        self.audio_selectors.as_deref()
    }
    /// Used to select the caption input to use for inputs that have multiple available.
    pub fn caption_selectors(&self) -> std::option::Option<&[crate::types::CaptionSelector]> {
        self.caption_selectors.as_deref()
    }
    /// Enable or disable the deblock filter when filtering.
    pub fn deblock_filter(&self) -> std::option::Option<&crate::types::InputDeblockFilter> {
        self.deblock_filter.as_ref()
    }
    /// Enable or disable the denoise filter when filtering.
    pub fn denoise_filter(&self) -> std::option::Option<&crate::types::InputDenoiseFilter> {
        self.denoise_filter.as_ref()
    }
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    pub fn filter_strength(&self) -> i32 {
        self.filter_strength
    }
    /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
    pub fn input_filter(&self) -> std::option::Option<&crate::types::InputFilter> {
        self.input_filter.as_ref()
    }
    /// Input settings.
    pub fn network_input_settings(
        &self,
    ) -> std::option::Option<&crate::types::NetworkInputSettings> {
        self.network_input_settings.as_ref()
    }
    /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
    pub fn scte35_pid(&self) -> i32 {
        self.scte35_pid
    }
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
    pub fn smpte2038_data_preference(
        &self,
    ) -> std::option::Option<&crate::types::Smpte2038DataPreference> {
        self.smpte2038_data_preference.as_ref()
    }
    /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
    pub fn source_end_behavior(
        &self,
    ) -> std::option::Option<&crate::types::InputSourceEndBehavior> {
        self.source_end_behavior.as_ref()
    }
    /// Informs which video elementary stream to decode for input types that have multiple available.
    pub fn video_selector(&self) -> std::option::Option<&crate::types::VideoSelector> {
        self.video_selector.as_ref()
    }
}
impl InputSettings {
    /// Creates a new builder-style object to manufacture [`InputSettings`](crate::types::InputSettings).
    pub fn builder() -> crate::types::builders::InputSettingsBuilder {
        crate::types::builders::InputSettingsBuilder::default()
    }
}

/// A builder for [`InputSettings`](crate::types::InputSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputSettingsBuilder {
    pub(crate) audio_selectors: std::option::Option<std::vec::Vec<crate::types::AudioSelector>>,
    pub(crate) caption_selectors: std::option::Option<std::vec::Vec<crate::types::CaptionSelector>>,
    pub(crate) deblock_filter: std::option::Option<crate::types::InputDeblockFilter>,
    pub(crate) denoise_filter: std::option::Option<crate::types::InputDenoiseFilter>,
    pub(crate) filter_strength: std::option::Option<i32>,
    pub(crate) input_filter: std::option::Option<crate::types::InputFilter>,
    pub(crate) network_input_settings: std::option::Option<crate::types::NetworkInputSettings>,
    pub(crate) scte35_pid: std::option::Option<i32>,
    pub(crate) smpte2038_data_preference:
        std::option::Option<crate::types::Smpte2038DataPreference>,
    pub(crate) source_end_behavior: std::option::Option<crate::types::InputSourceEndBehavior>,
    pub(crate) video_selector: std::option::Option<crate::types::VideoSelector>,
}
impl InputSettingsBuilder {
    /// Appends an item to `audio_selectors`.
    ///
    /// To override the contents of this collection use [`set_audio_selectors`](Self::set_audio_selectors).
    ///
    /// Used to select the audio stream to decode for inputs that have multiple available.
    pub fn audio_selectors(mut self, input: crate::types::AudioSelector) -> Self {
        let mut v = self.audio_selectors.unwrap_or_default();
        v.push(input);
        self.audio_selectors = Some(v);
        self
    }
    /// Used to select the audio stream to decode for inputs that have multiple available.
    pub fn set_audio_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AudioSelector>>,
    ) -> Self {
        self.audio_selectors = input;
        self
    }
    /// Appends an item to `caption_selectors`.
    ///
    /// To override the contents of this collection use [`set_caption_selectors`](Self::set_caption_selectors).
    ///
    /// Used to select the caption input to use for inputs that have multiple available.
    pub fn caption_selectors(mut self, input: crate::types::CaptionSelector) -> Self {
        let mut v = self.caption_selectors.unwrap_or_default();
        v.push(input);
        self.caption_selectors = Some(v);
        self
    }
    /// Used to select the caption input to use for inputs that have multiple available.
    pub fn set_caption_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CaptionSelector>>,
    ) -> Self {
        self.caption_selectors = input;
        self
    }
    /// Enable or disable the deblock filter when filtering.
    pub fn deblock_filter(mut self, input: crate::types::InputDeblockFilter) -> Self {
        self.deblock_filter = Some(input);
        self
    }
    /// Enable or disable the deblock filter when filtering.
    pub fn set_deblock_filter(
        mut self,
        input: std::option::Option<crate::types::InputDeblockFilter>,
    ) -> Self {
        self.deblock_filter = input;
        self
    }
    /// Enable or disable the denoise filter when filtering.
    pub fn denoise_filter(mut self, input: crate::types::InputDenoiseFilter) -> Self {
        self.denoise_filter = Some(input);
        self
    }
    /// Enable or disable the denoise filter when filtering.
    pub fn set_denoise_filter(
        mut self,
        input: std::option::Option<crate::types::InputDenoiseFilter>,
    ) -> Self {
        self.denoise_filter = input;
        self
    }
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    pub fn filter_strength(mut self, input: i32) -> Self {
        self.filter_strength = Some(input);
        self
    }
    /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
    pub fn set_filter_strength(mut self, input: std::option::Option<i32>) -> Self {
        self.filter_strength = input;
        self
    }
    /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
    pub fn input_filter(mut self, input: crate::types::InputFilter) -> Self {
        self.input_filter = Some(input);
        self
    }
    /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
    pub fn set_input_filter(
        mut self,
        input: std::option::Option<crate::types::InputFilter>,
    ) -> Self {
        self.input_filter = input;
        self
    }
    /// Input settings.
    pub fn network_input_settings(mut self, input: crate::types::NetworkInputSettings) -> Self {
        self.network_input_settings = Some(input);
        self
    }
    /// Input settings.
    pub fn set_network_input_settings(
        mut self,
        input: std::option::Option<crate::types::NetworkInputSettings>,
    ) -> Self {
        self.network_input_settings = input;
        self
    }
    /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
    pub fn scte35_pid(mut self, input: i32) -> Self {
        self.scte35_pid = Some(input);
        self
    }
    /// PID from which to read SCTE-35 messages. If left undefined, EML will select the first SCTE-35 PID found in the input.
    pub fn set_scte35_pid(mut self, input: std::option::Option<i32>) -> Self {
        self.scte35_pid = input;
        self
    }
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
    pub fn smpte2038_data_preference(
        mut self,
        input: crate::types::Smpte2038DataPreference,
    ) -> Self {
        self.smpte2038_data_preference = Some(input);
        self
    }
    /// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
    pub fn set_smpte2038_data_preference(
        mut self,
        input: std::option::Option<crate::types::Smpte2038DataPreference>,
    ) -> Self {
        self.smpte2038_data_preference = input;
        self
    }
    /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
    pub fn source_end_behavior(mut self, input: crate::types::InputSourceEndBehavior) -> Self {
        self.source_end_behavior = Some(input);
        self
    }
    /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
    pub fn set_source_end_behavior(
        mut self,
        input: std::option::Option<crate::types::InputSourceEndBehavior>,
    ) -> Self {
        self.source_end_behavior = input;
        self
    }
    /// Informs which video elementary stream to decode for input types that have multiple available.
    pub fn video_selector(mut self, input: crate::types::VideoSelector) -> Self {
        self.video_selector = Some(input);
        self
    }
    /// Informs which video elementary stream to decode for input types that have multiple available.
    pub fn set_video_selector(
        mut self,
        input: std::option::Option<crate::types::VideoSelector>,
    ) -> Self {
        self.video_selector = input;
        self
    }
    /// Consumes the builder and constructs a [`InputSettings`](crate::types::InputSettings).
    pub fn build(self) -> crate::types::InputSettings {
        crate::types::InputSettings {
            audio_selectors: self.audio_selectors,
            caption_selectors: self.caption_selectors,
            deblock_filter: self.deblock_filter,
            denoise_filter: self.denoise_filter,
            filter_strength: self.filter_strength.unwrap_or_default(),
            input_filter: self.input_filter,
            network_input_settings: self.network_input_settings,
            scte35_pid: self.scte35_pid.unwrap_or_default(),
            smpte2038_data_preference: self.smpte2038_data_preference,
            source_end_behavior: self.source_end_behavior,
            video_selector: self.video_selector,
        }
    }
}
