// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for InputAttachment
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputAttachment {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    pub automatic_input_failover_settings: ::std::option::Option<crate::types::AutomaticInputFailoverSettings>,
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    pub input_attachment_name: ::std::option::Option<::std::string::String>,
    /// The ID of the input
    pub input_id: ::std::option::Option<::std::string::String>,
    /// Settings of an input (caption selector, etc.)
    pub input_settings: ::std::option::Option<crate::types::InputSettings>,
    /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
    pub logical_interface_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InputAttachment {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    pub fn automatic_input_failover_settings(&self) -> ::std::option::Option<&crate::types::AutomaticInputFailoverSettings> {
        self.automatic_input_failover_settings.as_ref()
    }
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    pub fn input_attachment_name(&self) -> ::std::option::Option<&str> {
        self.input_attachment_name.as_deref()
    }
    /// The ID of the input
    pub fn input_id(&self) -> ::std::option::Option<&str> {
        self.input_id.as_deref()
    }
    /// Settings of an input (caption selector, etc.)
    pub fn input_settings(&self) -> ::std::option::Option<&crate::types::InputSettings> {
        self.input_settings.as_ref()
    }
    /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.logical_interface_names.is_none()`.
    pub fn logical_interface_names(&self) -> &[::std::string::String] {
        self.logical_interface_names.as_deref().unwrap_or_default()
    }
}
impl InputAttachment {
    /// Creates a new builder-style object to manufacture [`InputAttachment`](crate::types::InputAttachment).
    pub fn builder() -> crate::types::builders::InputAttachmentBuilder {
        crate::types::builders::InputAttachmentBuilder::default()
    }
}

/// A builder for [`InputAttachment`](crate::types::InputAttachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputAttachmentBuilder {
    pub(crate) automatic_input_failover_settings: ::std::option::Option<crate::types::AutomaticInputFailoverSettings>,
    pub(crate) input_attachment_name: ::std::option::Option<::std::string::String>,
    pub(crate) input_id: ::std::option::Option<::std::string::String>,
    pub(crate) input_settings: ::std::option::Option<crate::types::InputSettings>,
    pub(crate) logical_interface_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InputAttachmentBuilder {
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    pub fn automatic_input_failover_settings(mut self, input: crate::types::AutomaticInputFailoverSettings) -> Self {
        self.automatic_input_failover_settings = ::std::option::Option::Some(input);
        self
    }
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    pub fn set_automatic_input_failover_settings(mut self, input: ::std::option::Option<crate::types::AutomaticInputFailoverSettings>) -> Self {
        self.automatic_input_failover_settings = input;
        self
    }
    /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
    pub fn get_automatic_input_failover_settings(&self) -> &::std::option::Option<crate::types::AutomaticInputFailoverSettings> {
        &self.automatic_input_failover_settings
    }
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    pub fn input_attachment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_attachment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    pub fn set_input_attachment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_attachment_name = input;
        self
    }
    /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
    pub fn get_input_attachment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_attachment_name
    }
    /// The ID of the input
    pub fn input_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the input
    pub fn set_input_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_id = input;
        self
    }
    /// The ID of the input
    pub fn get_input_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_id
    }
    /// Settings of an input (caption selector, etc.)
    pub fn input_settings(mut self, input: crate::types::InputSettings) -> Self {
        self.input_settings = ::std::option::Option::Some(input);
        self
    }
    /// Settings of an input (caption selector, etc.)
    pub fn set_input_settings(mut self, input: ::std::option::Option<crate::types::InputSettings>) -> Self {
        self.input_settings = input;
        self
    }
    /// Settings of an input (caption selector, etc.)
    pub fn get_input_settings(&self) -> &::std::option::Option<crate::types::InputSettings> {
        &self.input_settings
    }
    /// Appends an item to `logical_interface_names`.
    ///
    /// To override the contents of this collection use [`set_logical_interface_names`](Self::set_logical_interface_names).
    ///
    /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
    pub fn logical_interface_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.logical_interface_names.unwrap_or_default();
        v.push(input.into());
        self.logical_interface_names = ::std::option::Option::Some(v);
        self
    }
    /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
    pub fn set_logical_interface_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.logical_interface_names = input;
        self
    }
    /// Optional assignment of an input to a logical interface on the Node. Only applies to on premises channels.
    pub fn get_logical_interface_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.logical_interface_names
    }
    /// Consumes the builder and constructs a [`InputAttachment`](crate::types::InputAttachment).
    pub fn build(self) -> crate::types::InputAttachment {
        crate::types::InputAttachment {
            automatic_input_failover_settings: self.automatic_input_failover_settings,
            input_attachment_name: self.input_attachment_name,
            input_id: self.input_id,
            input_settings: self.input_settings,
            logical_interface_names: self.logical_interface_names,
        }
    }
}
