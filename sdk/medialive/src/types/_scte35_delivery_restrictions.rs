// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Scte35DeliveryRestrictions {
    /// Corresponds to SCTE-35 archive_allowed_flag.
    pub archive_allowed_flag: ::std::option::Option<crate::types::Scte35ArchiveAllowedFlag>,
    /// Corresponds to SCTE-35 device_restrictions parameter.
    pub device_restrictions: ::std::option::Option<crate::types::Scte35DeviceRestrictions>,
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    pub no_regional_blackout_flag: ::std::option::Option<crate::types::Scte35NoRegionalBlackoutFlag>,
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    pub web_delivery_allowed_flag: ::std::option::Option<crate::types::Scte35WebDeliveryAllowedFlag>,
}
impl Scte35DeliveryRestrictions {
    /// Corresponds to SCTE-35 archive_allowed_flag.
    pub fn archive_allowed_flag(&self) -> ::std::option::Option<&crate::types::Scte35ArchiveAllowedFlag> {
        self.archive_allowed_flag.as_ref()
    }
    /// Corresponds to SCTE-35 device_restrictions parameter.
    pub fn device_restrictions(&self) -> ::std::option::Option<&crate::types::Scte35DeviceRestrictions> {
        self.device_restrictions.as_ref()
    }
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    pub fn no_regional_blackout_flag(&self) -> ::std::option::Option<&crate::types::Scte35NoRegionalBlackoutFlag> {
        self.no_regional_blackout_flag.as_ref()
    }
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    pub fn web_delivery_allowed_flag(&self) -> ::std::option::Option<&crate::types::Scte35WebDeliveryAllowedFlag> {
        self.web_delivery_allowed_flag.as_ref()
    }
}
impl Scte35DeliveryRestrictions {
    /// Creates a new builder-style object to manufacture [`Scte35DeliveryRestrictions`](crate::types::Scte35DeliveryRestrictions).
    pub fn builder() -> crate::types::builders::Scte35DeliveryRestrictionsBuilder {
        crate::types::builders::Scte35DeliveryRestrictionsBuilder::default()
    }
}

/// A builder for [`Scte35DeliveryRestrictions`](crate::types::Scte35DeliveryRestrictions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Scte35DeliveryRestrictionsBuilder {
    pub(crate) archive_allowed_flag: ::std::option::Option<crate::types::Scte35ArchiveAllowedFlag>,
    pub(crate) device_restrictions: ::std::option::Option<crate::types::Scte35DeviceRestrictions>,
    pub(crate) no_regional_blackout_flag: ::std::option::Option<crate::types::Scte35NoRegionalBlackoutFlag>,
    pub(crate) web_delivery_allowed_flag: ::std::option::Option<crate::types::Scte35WebDeliveryAllowedFlag>,
}
impl Scte35DeliveryRestrictionsBuilder {
    /// Corresponds to SCTE-35 archive_allowed_flag.
    /// This field is required.
    pub fn archive_allowed_flag(mut self, input: crate::types::Scte35ArchiveAllowedFlag) -> Self {
        self.archive_allowed_flag = ::std::option::Option::Some(input);
        self
    }
    /// Corresponds to SCTE-35 archive_allowed_flag.
    pub fn set_archive_allowed_flag(mut self, input: ::std::option::Option<crate::types::Scte35ArchiveAllowedFlag>) -> Self {
        self.archive_allowed_flag = input;
        self
    }
    /// Corresponds to SCTE-35 archive_allowed_flag.
    pub fn get_archive_allowed_flag(&self) -> &::std::option::Option<crate::types::Scte35ArchiveAllowedFlag> {
        &self.archive_allowed_flag
    }
    /// Corresponds to SCTE-35 device_restrictions parameter.
    /// This field is required.
    pub fn device_restrictions(mut self, input: crate::types::Scte35DeviceRestrictions) -> Self {
        self.device_restrictions = ::std::option::Option::Some(input);
        self
    }
    /// Corresponds to SCTE-35 device_restrictions parameter.
    pub fn set_device_restrictions(mut self, input: ::std::option::Option<crate::types::Scte35DeviceRestrictions>) -> Self {
        self.device_restrictions = input;
        self
    }
    /// Corresponds to SCTE-35 device_restrictions parameter.
    pub fn get_device_restrictions(&self) -> &::std::option::Option<crate::types::Scte35DeviceRestrictions> {
        &self.device_restrictions
    }
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    /// This field is required.
    pub fn no_regional_blackout_flag(mut self, input: crate::types::Scte35NoRegionalBlackoutFlag) -> Self {
        self.no_regional_blackout_flag = ::std::option::Option::Some(input);
        self
    }
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    pub fn set_no_regional_blackout_flag(mut self, input: ::std::option::Option<crate::types::Scte35NoRegionalBlackoutFlag>) -> Self {
        self.no_regional_blackout_flag = input;
        self
    }
    /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
    pub fn get_no_regional_blackout_flag(&self) -> &::std::option::Option<crate::types::Scte35NoRegionalBlackoutFlag> {
        &self.no_regional_blackout_flag
    }
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    /// This field is required.
    pub fn web_delivery_allowed_flag(mut self, input: crate::types::Scte35WebDeliveryAllowedFlag) -> Self {
        self.web_delivery_allowed_flag = ::std::option::Option::Some(input);
        self
    }
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    pub fn set_web_delivery_allowed_flag(mut self, input: ::std::option::Option<crate::types::Scte35WebDeliveryAllowedFlag>) -> Self {
        self.web_delivery_allowed_flag = input;
        self
    }
    /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
    pub fn get_web_delivery_allowed_flag(&self) -> &::std::option::Option<crate::types::Scte35WebDeliveryAllowedFlag> {
        &self.web_delivery_allowed_flag
    }
    /// Consumes the builder and constructs a [`Scte35DeliveryRestrictions`](crate::types::Scte35DeliveryRestrictions).
    pub fn build(self) -> crate::types::Scte35DeliveryRestrictions {
        crate::types::Scte35DeliveryRestrictions {
            archive_allowed_flag: self.archive_allowed_flag,
            device_restrictions: self.device_restrictions,
            no_regional_blackout_flag: self.no_regional_blackout_flag,
            web_delivery_allowed_flag: self.web_delivery_allowed_flag,
        }
    }
}
