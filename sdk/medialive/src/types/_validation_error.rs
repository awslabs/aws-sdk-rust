// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for ValidationError
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidationError {
    /// Path to the source of the error.
    #[doc(hidden)]
    pub element_path: std::option::Option<std::string::String>,
    /// The error message.
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl ValidationError {
    /// Path to the source of the error.
    pub fn element_path(&self) -> std::option::Option<&str> {
        self.element_path.as_deref()
    }
    /// The error message.
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ValidationError {
    /// Creates a new builder-style object to manufacture [`ValidationError`](crate::types::ValidationError).
    pub fn builder() -> crate::types::builders::ValidationErrorBuilder {
        crate::types::builders::ValidationErrorBuilder::default()
    }
}

/// A builder for [`ValidationError`](crate::types::ValidationError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ValidationErrorBuilder {
    pub(crate) element_path: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl ValidationErrorBuilder {
    /// Path to the source of the error.
    pub fn element_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.element_path = Some(input.into());
        self
    }
    /// Path to the source of the error.
    pub fn set_element_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.element_path = input;
        self
    }
    /// The error message.
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// The error message.
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ValidationError`](crate::types::ValidationError).
    pub fn build(self) -> crate::types::ValidationError {
        crate::types::ValidationError {
            element_path: self.element_path,
            error_message: self.error_message,
        }
    }
}
