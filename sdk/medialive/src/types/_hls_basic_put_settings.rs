// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Hls Basic Put Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsBasicPutSettings {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    #[doc(hidden)]
    pub connection_retry_interval: i32,
    /// Size in seconds of file cache for streaming outputs.
    #[doc(hidden)]
    pub filecache_duration: i32,
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    #[doc(hidden)]
    pub num_retries: i32,
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    #[doc(hidden)]
    pub restart_delay: i32,
}
impl HlsBasicPutSettings {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn connection_retry_interval(&self) -> i32 {
        self.connection_retry_interval
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(&self) -> i32 {
        self.filecache_duration
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn num_retries(&self) -> i32 {
        self.num_retries
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn restart_delay(&self) -> i32 {
        self.restart_delay
    }
}
impl HlsBasicPutSettings {
    /// Creates a new builder-style object to manufacture [`HlsBasicPutSettings`](crate::types::HlsBasicPutSettings).
    pub fn builder() -> crate::types::builders::HlsBasicPutSettingsBuilder {
        crate::types::builders::HlsBasicPutSettingsBuilder::default()
    }
}

/// A builder for [`HlsBasicPutSettings`](crate::types::HlsBasicPutSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsBasicPutSettingsBuilder {
    pub(crate) connection_retry_interval: std::option::Option<i32>,
    pub(crate) filecache_duration: std::option::Option<i32>,
    pub(crate) num_retries: std::option::Option<i32>,
    pub(crate) restart_delay: std::option::Option<i32>,
}
impl HlsBasicPutSettingsBuilder {
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn connection_retry_interval(mut self, input: i32) -> Self {
        self.connection_retry_interval = Some(input);
        self
    }
    /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
    pub fn set_connection_retry_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.connection_retry_interval = input;
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn filecache_duration(mut self, input: i32) -> Self {
        self.filecache_duration = Some(input);
        self
    }
    /// Size in seconds of file cache for streaming outputs.
    pub fn set_filecache_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.filecache_duration = input;
        self
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn num_retries(mut self, input: i32) -> Self {
        self.num_retries = Some(input);
        self
    }
    /// Number of retry attempts that will be made before the Live Event is put into an error state.
    pub fn set_num_retries(mut self, input: std::option::Option<i32>) -> Self {
        self.num_retries = input;
        self
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn restart_delay(mut self, input: i32) -> Self {
        self.restart_delay = Some(input);
        self
    }
    /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
    pub fn set_restart_delay(mut self, input: std::option::Option<i32>) -> Self {
        self.restart_delay = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsBasicPutSettings`](crate::types::HlsBasicPutSettings).
    pub fn build(self) -> crate::types::HlsBasicPutSettings {
        crate::types::HlsBasicPutSettings {
            connection_retry_interval: self.connection_retry_interval.unwrap_or_default(),
            filecache_duration: self.filecache_duration.unwrap_or_default(),
            num_retries: self.num_retries.unwrap_or_default(),
            restart_delay: self.restart_delay.unwrap_or_default(),
        }
    }
}
