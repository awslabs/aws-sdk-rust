// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// M2ts Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct M2tsSettings {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    #[doc(hidden)]
    pub absent_input_audio_behavior:
        std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>,
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    #[doc(hidden)]
    pub arib: std::option::Option<crate::types::M2tsArib>,
    /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub arib_captions_pid: std::option::Option<std::string::String>,
    /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
    #[doc(hidden)]
    pub arib_captions_pid_control: std::option::Option<crate::types::M2tsAribCaptionsPidControl>,
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    #[doc(hidden)]
    pub audio_buffer_model: std::option::Option<crate::types::M2tsAudioBufferModel>,
    /// The number of audio frames to insert for each PES packet.
    #[doc(hidden)]
    pub audio_frames_per_pes: i32,
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub audio_pids: std::option::Option<std::string::String>,
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    #[doc(hidden)]
    pub audio_stream_type: std::option::Option<crate::types::M2tsAudioStreamType>,
    /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
    #[doc(hidden)]
    pub bitrate: i32,
    /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
    #[doc(hidden)]
    pub buffer_model: std::option::Option<crate::types::M2tsBufferModel>,
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    #[doc(hidden)]
    pub cc_descriptor: std::option::Option<crate::types::M2tsCcDescriptor>,
    /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
    #[doc(hidden)]
    pub dvb_nit_settings: std::option::Option<crate::types::DvbNitSettings>,
    /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
    #[doc(hidden)]
    pub dvb_sdt_settings: std::option::Option<crate::types::DvbSdtSettings>,
    /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub dvb_sub_pids: std::option::Option<std::string::String>,
    /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
    #[doc(hidden)]
    pub dvb_tdt_settings: std::option::Option<crate::types::DvbTdtSettings>,
    /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub dvb_teletext_pid: std::option::Option<std::string::String>,
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    #[doc(hidden)]
    pub ebif: std::option::Option<crate::types::M2tsEbifControl>,
    /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
    #[doc(hidden)]
    pub ebp_audio_interval: std::option::Option<crate::types::M2tsAudioInterval>,
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    #[doc(hidden)]
    pub ebp_lookahead_ms: i32,
    /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
    #[doc(hidden)]
    pub ebp_placement: std::option::Option<crate::types::M2tsEbpPlacement>,
    /// This field is unused and deprecated.
    #[doc(hidden)]
    pub ecm_pid: std::option::Option<std::string::String>,
    /// Include or exclude the ES Rate field in the PES header.
    #[doc(hidden)]
    pub es_rate_in_pes: std::option::Option<crate::types::M2tsEsRateInPes>,
    /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub etv_platform_pid: std::option::Option<std::string::String>,
    /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub etv_signal_pid: std::option::Option<std::string::String>,
    /// The length in seconds of each fragment. Only used with EBP markers.
    #[doc(hidden)]
    pub fragment_time: f64,
    /// If set to passthrough, passes any KLV data from the input source to this output.
    #[doc(hidden)]
    pub klv: std::option::Option<crate::types::M2tsKlv>,
    /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub klv_data_pids: std::option::Option<std::string::String>,
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    #[doc(hidden)]
    pub nielsen_id3_behavior: std::option::Option<crate::types::M2tsNielsenId3Behavior>,
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    #[doc(hidden)]
    pub null_packet_bitrate: f64,
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    #[doc(hidden)]
    pub pat_interval: i32,
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    #[doc(hidden)]
    pub pcr_control: std::option::Option<crate::types::M2tsPcrControl>,
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    #[doc(hidden)]
    pub pcr_period: i32,
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub pcr_pid: std::option::Option<std::string::String>,
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    #[doc(hidden)]
    pub pmt_interval: i32,
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub pmt_pid: std::option::Option<std::string::String>,
    /// The value of the program number field in the Program Map Table.
    #[doc(hidden)]
    pub program_num: i32,
    /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
    #[doc(hidden)]
    pub rate_mode: std::option::Option<crate::types::M2tsRateMode>,
    /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub scte27_pids: std::option::Option<std::string::String>,
    /// Optionally pass SCTE-35 signals from the input source to this output.
    #[doc(hidden)]
    pub scte35_control: std::option::Option<crate::types::M2tsScte35Control>,
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub scte35_pid: std::option::Option<std::string::String>,
    /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    #[doc(hidden)]
    pub segmentation_markers: std::option::Option<crate::types::M2tsSegmentationMarkers>,
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
    #[doc(hidden)]
    pub segmentation_style: std::option::Option<crate::types::M2tsSegmentationStyle>,
    /// The length in seconds of each segment. Required unless markers is set to _none_.
    #[doc(hidden)]
    pub segmentation_time: f64,
    /// When set to passthrough, timed metadata will be passed through from input to output.
    #[doc(hidden)]
    pub timed_metadata_behavior: std::option::Option<crate::types::M2tsTimedMetadataBehavior>,
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub timed_metadata_pid: std::option::Option<std::string::String>,
    /// The value of the transport stream ID field in the Program Map Table.
    #[doc(hidden)]
    pub transport_stream_id: i32,
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    #[doc(hidden)]
    pub video_pid: std::option::Option<std::string::String>,
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    #[doc(hidden)]
    pub scte35_preroll_pullup_milliseconds: f64,
}
impl M2tsSettings {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn absent_input_audio_behavior(
        &self,
    ) -> std::option::Option<&crate::types::M2tsAbsentInputAudioBehavior> {
        self.absent_input_audio_behavior.as_ref()
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn arib(&self) -> std::option::Option<&crate::types::M2tsArib> {
        self.arib.as_ref()
    }
    /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn arib_captions_pid(&self) -> std::option::Option<&str> {
        self.arib_captions_pid.as_deref()
    }
    /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
    pub fn arib_captions_pid_control(
        &self,
    ) -> std::option::Option<&crate::types::M2tsAribCaptionsPidControl> {
        self.arib_captions_pid_control.as_ref()
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn audio_buffer_model(&self) -> std::option::Option<&crate::types::M2tsAudioBufferModel> {
        self.audio_buffer_model.as_ref()
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(&self) -> i32 {
        self.audio_frames_per_pes
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn audio_pids(&self) -> std::option::Option<&str> {
        self.audio_pids.as_deref()
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn audio_stream_type(&self) -> std::option::Option<&crate::types::M2tsAudioStreamType> {
        self.audio_stream_type.as_ref()
    }
    /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
    pub fn bitrate(&self) -> i32 {
        self.bitrate
    }
    /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
    pub fn buffer_model(&self) -> std::option::Option<&crate::types::M2tsBufferModel> {
        self.buffer_model.as_ref()
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn cc_descriptor(&self) -> std::option::Option<&crate::types::M2tsCcDescriptor> {
        self.cc_descriptor.as_ref()
    }
    /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
    pub fn dvb_nit_settings(&self) -> std::option::Option<&crate::types::DvbNitSettings> {
        self.dvb_nit_settings.as_ref()
    }
    /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
    pub fn dvb_sdt_settings(&self) -> std::option::Option<&crate::types::DvbSdtSettings> {
        self.dvb_sdt_settings.as_ref()
    }
    /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn dvb_sub_pids(&self) -> std::option::Option<&str> {
        self.dvb_sub_pids.as_deref()
    }
    /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
    pub fn dvb_tdt_settings(&self) -> std::option::Option<&crate::types::DvbTdtSettings> {
        self.dvb_tdt_settings.as_ref()
    }
    /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn dvb_teletext_pid(&self) -> std::option::Option<&str> {
        self.dvb_teletext_pid.as_deref()
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn ebif(&self) -> std::option::Option<&crate::types::M2tsEbifControl> {
        self.ebif.as_ref()
    }
    /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
    pub fn ebp_audio_interval(&self) -> std::option::Option<&crate::types::M2tsAudioInterval> {
        self.ebp_audio_interval.as_ref()
    }
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    pub fn ebp_lookahead_ms(&self) -> i32 {
        self.ebp_lookahead_ms
    }
    /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
    pub fn ebp_placement(&self) -> std::option::Option<&crate::types::M2tsEbpPlacement> {
        self.ebp_placement.as_ref()
    }
    /// This field is unused and deprecated.
    pub fn ecm_pid(&self) -> std::option::Option<&str> {
        self.ecm_pid.as_deref()
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn es_rate_in_pes(&self) -> std::option::Option<&crate::types::M2tsEsRateInPes> {
        self.es_rate_in_pes.as_ref()
    }
    /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn etv_platform_pid(&self) -> std::option::Option<&str> {
        self.etv_platform_pid.as_deref()
    }
    /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn etv_signal_pid(&self) -> std::option::Option<&str> {
        self.etv_signal_pid.as_deref()
    }
    /// The length in seconds of each fragment. Only used with EBP markers.
    pub fn fragment_time(&self) -> f64 {
        self.fragment_time
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv(&self) -> std::option::Option<&crate::types::M2tsKlv> {
        self.klv.as_ref()
    }
    /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn klv_data_pids(&self) -> std::option::Option<&str> {
        self.klv_data_pids.as_deref()
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(
        &self,
    ) -> std::option::Option<&crate::types::M2tsNielsenId3Behavior> {
        self.nielsen_id3_behavior.as_ref()
    }
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    pub fn null_packet_bitrate(&self) -> f64 {
        self.null_packet_bitrate
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn pat_interval(&self) -> i32 {
        self.pat_interval
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(&self) -> std::option::Option<&crate::types::M2tsPcrControl> {
        self.pcr_control.as_ref()
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn pcr_period(&self) -> i32 {
        self.pcr_period
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn pcr_pid(&self) -> std::option::Option<&str> {
        self.pcr_pid.as_deref()
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn pmt_interval(&self) -> i32 {
        self.pmt_interval
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn pmt_pid(&self) -> std::option::Option<&str> {
        self.pmt_pid.as_deref()
    }
    /// The value of the program number field in the Program Map Table.
    pub fn program_num(&self) -> i32 {
        self.program_num
    }
    /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
    pub fn rate_mode(&self) -> std::option::Option<&crate::types::M2tsRateMode> {
        self.rate_mode.as_ref()
    }
    /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn scte27_pids(&self) -> std::option::Option<&str> {
        self.scte27_pids.as_deref()
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn scte35_control(&self) -> std::option::Option<&crate::types::M2tsScte35Control> {
        self.scte35_control.as_ref()
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn scte35_pid(&self) -> std::option::Option<&str> {
        self.scte35_pid.as_deref()
    }
    /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    pub fn segmentation_markers(
        &self,
    ) -> std::option::Option<&crate::types::M2tsSegmentationMarkers> {
        self.segmentation_markers.as_ref()
    }
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
    pub fn segmentation_style(&self) -> std::option::Option<&crate::types::M2tsSegmentationStyle> {
        self.segmentation_style.as_ref()
    }
    /// The length in seconds of each segment. Required unless markers is set to _none_.
    pub fn segmentation_time(&self) -> f64 {
        self.segmentation_time
    }
    /// When set to passthrough, timed metadata will be passed through from input to output.
    pub fn timed_metadata_behavior(
        &self,
    ) -> std::option::Option<&crate::types::M2tsTimedMetadataBehavior> {
        self.timed_metadata_behavior.as_ref()
    }
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn timed_metadata_pid(&self) -> std::option::Option<&str> {
        self.timed_metadata_pid.as_deref()
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn transport_stream_id(&self) -> i32 {
        self.transport_stream_id
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn video_pid(&self) -> std::option::Option<&str> {
        self.video_pid.as_deref()
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn scte35_preroll_pullup_milliseconds(&self) -> f64 {
        self.scte35_preroll_pullup_milliseconds
    }
}
impl M2tsSettings {
    /// Creates a new builder-style object to manufacture [`M2tsSettings`](crate::types::M2tsSettings).
    pub fn builder() -> crate::types::builders::M2tsSettingsBuilder {
        crate::types::builders::M2tsSettingsBuilder::default()
    }
}

/// A builder for [`M2tsSettings`](crate::types::M2tsSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct M2tsSettingsBuilder {
    pub(crate) absent_input_audio_behavior:
        std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>,
    pub(crate) arib: std::option::Option<crate::types::M2tsArib>,
    pub(crate) arib_captions_pid: std::option::Option<std::string::String>,
    pub(crate) arib_captions_pid_control:
        std::option::Option<crate::types::M2tsAribCaptionsPidControl>,
    pub(crate) audio_buffer_model: std::option::Option<crate::types::M2tsAudioBufferModel>,
    pub(crate) audio_frames_per_pes: std::option::Option<i32>,
    pub(crate) audio_pids: std::option::Option<std::string::String>,
    pub(crate) audio_stream_type: std::option::Option<crate::types::M2tsAudioStreamType>,
    pub(crate) bitrate: std::option::Option<i32>,
    pub(crate) buffer_model: std::option::Option<crate::types::M2tsBufferModel>,
    pub(crate) cc_descriptor: std::option::Option<crate::types::M2tsCcDescriptor>,
    pub(crate) dvb_nit_settings: std::option::Option<crate::types::DvbNitSettings>,
    pub(crate) dvb_sdt_settings: std::option::Option<crate::types::DvbSdtSettings>,
    pub(crate) dvb_sub_pids: std::option::Option<std::string::String>,
    pub(crate) dvb_tdt_settings: std::option::Option<crate::types::DvbTdtSettings>,
    pub(crate) dvb_teletext_pid: std::option::Option<std::string::String>,
    pub(crate) ebif: std::option::Option<crate::types::M2tsEbifControl>,
    pub(crate) ebp_audio_interval: std::option::Option<crate::types::M2tsAudioInterval>,
    pub(crate) ebp_lookahead_ms: std::option::Option<i32>,
    pub(crate) ebp_placement: std::option::Option<crate::types::M2tsEbpPlacement>,
    pub(crate) ecm_pid: std::option::Option<std::string::String>,
    pub(crate) es_rate_in_pes: std::option::Option<crate::types::M2tsEsRateInPes>,
    pub(crate) etv_platform_pid: std::option::Option<std::string::String>,
    pub(crate) etv_signal_pid: std::option::Option<std::string::String>,
    pub(crate) fragment_time: std::option::Option<f64>,
    pub(crate) klv: std::option::Option<crate::types::M2tsKlv>,
    pub(crate) klv_data_pids: std::option::Option<std::string::String>,
    pub(crate) nielsen_id3_behavior: std::option::Option<crate::types::M2tsNielsenId3Behavior>,
    pub(crate) null_packet_bitrate: std::option::Option<f64>,
    pub(crate) pat_interval: std::option::Option<i32>,
    pub(crate) pcr_control: std::option::Option<crate::types::M2tsPcrControl>,
    pub(crate) pcr_period: std::option::Option<i32>,
    pub(crate) pcr_pid: std::option::Option<std::string::String>,
    pub(crate) pmt_interval: std::option::Option<i32>,
    pub(crate) pmt_pid: std::option::Option<std::string::String>,
    pub(crate) program_num: std::option::Option<i32>,
    pub(crate) rate_mode: std::option::Option<crate::types::M2tsRateMode>,
    pub(crate) scte27_pids: std::option::Option<std::string::String>,
    pub(crate) scte35_control: std::option::Option<crate::types::M2tsScte35Control>,
    pub(crate) scte35_pid: std::option::Option<std::string::String>,
    pub(crate) segmentation_markers: std::option::Option<crate::types::M2tsSegmentationMarkers>,
    pub(crate) segmentation_style: std::option::Option<crate::types::M2tsSegmentationStyle>,
    pub(crate) segmentation_time: std::option::Option<f64>,
    pub(crate) timed_metadata_behavior:
        std::option::Option<crate::types::M2tsTimedMetadataBehavior>,
    pub(crate) timed_metadata_pid: std::option::Option<std::string::String>,
    pub(crate) transport_stream_id: std::option::Option<i32>,
    pub(crate) video_pid: std::option::Option<std::string::String>,
    pub(crate) scte35_preroll_pullup_milliseconds: std::option::Option<f64>,
}
impl M2tsSettingsBuilder {
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn absent_input_audio_behavior(
        mut self,
        input: crate::types::M2tsAbsentInputAudioBehavior,
    ) -> Self {
        self.absent_input_audio_behavior = Some(input);
        self
    }
    /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
    pub fn set_absent_input_audio_behavior(
        mut self,
        input: std::option::Option<crate::types::M2tsAbsentInputAudioBehavior>,
    ) -> Self {
        self.absent_input_audio_behavior = input;
        self
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn arib(mut self, input: crate::types::M2tsArib) -> Self {
        self.arib = Some(input);
        self
    }
    /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
    pub fn set_arib(mut self, input: std::option::Option<crate::types::M2tsArib>) -> Self {
        self.arib = input;
        self
    }
    /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn arib_captions_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.arib_captions_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_arib_captions_pid(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.arib_captions_pid = input;
        self
    }
    /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
    pub fn arib_captions_pid_control(
        mut self,
        input: crate::types::M2tsAribCaptionsPidControl,
    ) -> Self {
        self.arib_captions_pid_control = Some(input);
        self
    }
    /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
    pub fn set_arib_captions_pid_control(
        mut self,
        input: std::option::Option<crate::types::M2tsAribCaptionsPidControl>,
    ) -> Self {
        self.arib_captions_pid_control = input;
        self
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn audio_buffer_model(mut self, input: crate::types::M2tsAudioBufferModel) -> Self {
        self.audio_buffer_model = Some(input);
        self
    }
    /// When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
    pub fn set_audio_buffer_model(
        mut self,
        input: std::option::Option<crate::types::M2tsAudioBufferModel>,
    ) -> Self {
        self.audio_buffer_model = input;
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(mut self, input: i32) -> Self {
        self.audio_frames_per_pes = Some(input);
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn set_audio_frames_per_pes(mut self, input: std::option::Option<i32>) -> Self {
        self.audio_frames_per_pes = input;
        self
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn audio_pids(mut self, input: impl Into<std::string::String>) -> Self {
        self.audio_pids = Some(input.into());
        self
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_audio_pids(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.audio_pids = input;
        self
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn audio_stream_type(mut self, input: crate::types::M2tsAudioStreamType) -> Self {
        self.audio_stream_type = Some(input);
        self
    }
    /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
    pub fn set_audio_stream_type(
        mut self,
        input: std::option::Option<crate::types::M2tsAudioStreamType>,
    ) -> Self {
        self.audio_stream_type = input;
        self
    }
    /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = Some(input);
        self
    }
    /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
    pub fn set_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
    pub fn buffer_model(mut self, input: crate::types::M2tsBufferModel) -> Self {
        self.buffer_model = Some(input);
        self
    }
    /// Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
    pub fn set_buffer_model(
        mut self,
        input: std::option::Option<crate::types::M2tsBufferModel>,
    ) -> Self {
        self.buffer_model = input;
        self
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn cc_descriptor(mut self, input: crate::types::M2tsCcDescriptor) -> Self {
        self.cc_descriptor = Some(input);
        self
    }
    /// When set to enabled, generates captionServiceDescriptor in PMT.
    pub fn set_cc_descriptor(
        mut self,
        input: std::option::Option<crate::types::M2tsCcDescriptor>,
    ) -> Self {
        self.cc_descriptor = input;
        self
    }
    /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
    pub fn dvb_nit_settings(mut self, input: crate::types::DvbNitSettings) -> Self {
        self.dvb_nit_settings = Some(input);
        self
    }
    /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
    pub fn set_dvb_nit_settings(
        mut self,
        input: std::option::Option<crate::types::DvbNitSettings>,
    ) -> Self {
        self.dvb_nit_settings = input;
        self
    }
    /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
    pub fn dvb_sdt_settings(mut self, input: crate::types::DvbSdtSettings) -> Self {
        self.dvb_sdt_settings = Some(input);
        self
    }
    /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
    pub fn set_dvb_sdt_settings(
        mut self,
        input: std::option::Option<crate::types::DvbSdtSettings>,
    ) -> Self {
        self.dvb_sdt_settings = input;
        self
    }
    /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn dvb_sub_pids(mut self, input: impl Into<std::string::String>) -> Self {
        self.dvb_sub_pids = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_dvb_sub_pids(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dvb_sub_pids = input;
        self
    }
    /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
    pub fn dvb_tdt_settings(mut self, input: crate::types::DvbTdtSettings) -> Self {
        self.dvb_tdt_settings = Some(input);
        self
    }
    /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
    pub fn set_dvb_tdt_settings(
        mut self,
        input: std::option::Option<crate::types::DvbTdtSettings>,
    ) -> Self {
        self.dvb_tdt_settings = input;
        self
    }
    /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn dvb_teletext_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.dvb_teletext_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_dvb_teletext_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dvb_teletext_pid = input;
        self
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn ebif(mut self, input: crate::types::M2tsEbifControl) -> Self {
        self.ebif = Some(input);
        self
    }
    /// If set to passthrough, passes any EBIF data from the input source to this output.
    pub fn set_ebif(mut self, input: std::option::Option<crate::types::M2tsEbifControl>) -> Self {
        self.ebif = input;
        self
    }
    /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
    pub fn ebp_audio_interval(mut self, input: crate::types::M2tsAudioInterval) -> Self {
        self.ebp_audio_interval = Some(input);
        self
    }
    /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
    pub fn set_ebp_audio_interval(
        mut self,
        input: std::option::Option<crate::types::M2tsAudioInterval>,
    ) -> Self {
        self.ebp_audio_interval = input;
        self
    }
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    pub fn ebp_lookahead_ms(mut self, input: i32) -> Self {
        self.ebp_lookahead_ms = Some(input);
        self
    }
    /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
    pub fn set_ebp_lookahead_ms(mut self, input: std::option::Option<i32>) -> Self {
        self.ebp_lookahead_ms = input;
        self
    }
    /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
    pub fn ebp_placement(mut self, input: crate::types::M2tsEbpPlacement) -> Self {
        self.ebp_placement = Some(input);
        self
    }
    /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
    pub fn set_ebp_placement(
        mut self,
        input: std::option::Option<crate::types::M2tsEbpPlacement>,
    ) -> Self {
        self.ebp_placement = input;
        self
    }
    /// This field is unused and deprecated.
    pub fn ecm_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.ecm_pid = Some(input.into());
        self
    }
    /// This field is unused and deprecated.
    pub fn set_ecm_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ecm_pid = input;
        self
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn es_rate_in_pes(mut self, input: crate::types::M2tsEsRateInPes) -> Self {
        self.es_rate_in_pes = Some(input);
        self
    }
    /// Include or exclude the ES Rate field in the PES header.
    pub fn set_es_rate_in_pes(
        mut self,
        input: std::option::Option<crate::types::M2tsEsRateInPes>,
    ) -> Self {
        self.es_rate_in_pes = input;
        self
    }
    /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn etv_platform_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.etv_platform_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_etv_platform_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.etv_platform_pid = input;
        self
    }
    /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn etv_signal_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.etv_signal_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_etv_signal_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.etv_signal_pid = input;
        self
    }
    /// The length in seconds of each fragment. Only used with EBP markers.
    pub fn fragment_time(mut self, input: f64) -> Self {
        self.fragment_time = Some(input);
        self
    }
    /// The length in seconds of each fragment. Only used with EBP markers.
    pub fn set_fragment_time(mut self, input: std::option::Option<f64>) -> Self {
        self.fragment_time = input;
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv(mut self, input: crate::types::M2tsKlv) -> Self {
        self.klv = Some(input);
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn set_klv(mut self, input: std::option::Option<crate::types::M2tsKlv>) -> Self {
        self.klv = input;
        self
    }
    /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn klv_data_pids(mut self, input: impl Into<std::string::String>) -> Self {
        self.klv_data_pids = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_klv_data_pids(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.klv_data_pids = input;
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(mut self, input: crate::types::M2tsNielsenId3Behavior) -> Self {
        self.nielsen_id3_behavior = Some(input);
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn set_nielsen_id3_behavior(
        mut self,
        input: std::option::Option<crate::types::M2tsNielsenId3Behavior>,
    ) -> Self {
        self.nielsen_id3_behavior = input;
        self
    }
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    pub fn null_packet_bitrate(mut self, input: f64) -> Self {
        self.null_packet_bitrate = Some(input);
        self
    }
    /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
    pub fn set_null_packet_bitrate(mut self, input: std::option::Option<f64>) -> Self {
        self.null_packet_bitrate = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn pat_interval(mut self, input: i32) -> Self {
        self.pat_interval = Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn set_pat_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.pat_interval = input;
        self
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(mut self, input: crate::types::M2tsPcrControl) -> Self {
        self.pcr_control = Some(input);
        self
    }
    /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn set_pcr_control(
        mut self,
        input: std::option::Option<crate::types::M2tsPcrControl>,
    ) -> Self {
        self.pcr_control = input;
        self
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn pcr_period(mut self, input: i32) -> Self {
        self.pcr_period = Some(input);
        self
    }
    /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
    pub fn set_pcr_period(mut self, input: std::option::Option<i32>) -> Self {
        self.pcr_period = input;
        self
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn pcr_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.pcr_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_pcr_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pcr_pid = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn pmt_interval(mut self, input: i32) -> Self {
        self.pmt_interval = Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
    pub fn set_pmt_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.pmt_interval = input;
        self
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn pmt_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.pmt_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_pmt_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pmt_pid = input;
        self
    }
    /// The value of the program number field in the Program Map Table.
    pub fn program_num(mut self, input: i32) -> Self {
        self.program_num = Some(input);
        self
    }
    /// The value of the program number field in the Program Map Table.
    pub fn set_program_num(mut self, input: std::option::Option<i32>) -> Self {
        self.program_num = input;
        self
    }
    /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
    pub fn rate_mode(mut self, input: crate::types::M2tsRateMode) -> Self {
        self.rate_mode = Some(input);
        self
    }
    /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
    pub fn set_rate_mode(mut self, input: std::option::Option<crate::types::M2tsRateMode>) -> Self {
        self.rate_mode = input;
        self
    }
    /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn scte27_pids(mut self, input: impl Into<std::string::String>) -> Self {
        self.scte27_pids = Some(input.into());
        self
    }
    /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_scte27_pids(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scte27_pids = input;
        self
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn scte35_control(mut self, input: crate::types::M2tsScte35Control) -> Self {
        self.scte35_control = Some(input);
        self
    }
    /// Optionally pass SCTE-35 signals from the input source to this output.
    pub fn set_scte35_control(
        mut self,
        input: std::option::Option<crate::types::M2tsScte35Control>,
    ) -> Self {
        self.scte35_control = input;
        self
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn scte35_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.scte35_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_scte35_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scte35_pid = input;
        self
    }
    /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    pub fn segmentation_markers(mut self, input: crate::types::M2tsSegmentationMarkers) -> Self {
        self.segmentation_markers = Some(input);
        self
    }
    /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
    pub fn set_segmentation_markers(
        mut self,
        input: std::option::Option<crate::types::M2tsSegmentationMarkers>,
    ) -> Self {
        self.segmentation_markers = input;
        self
    }
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
    pub fn segmentation_style(mut self, input: crate::types::M2tsSegmentationStyle) -> Self {
        self.segmentation_style = Some(input);
        self
    }
    /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
    pub fn set_segmentation_style(
        mut self,
        input: std::option::Option<crate::types::M2tsSegmentationStyle>,
    ) -> Self {
        self.segmentation_style = input;
        self
    }
    /// The length in seconds of each segment. Required unless markers is set to _none_.
    pub fn segmentation_time(mut self, input: f64) -> Self {
        self.segmentation_time = Some(input);
        self
    }
    /// The length in seconds of each segment. Required unless markers is set to _none_.
    pub fn set_segmentation_time(mut self, input: std::option::Option<f64>) -> Self {
        self.segmentation_time = input;
        self
    }
    /// When set to passthrough, timed metadata will be passed through from input to output.
    pub fn timed_metadata_behavior(
        mut self,
        input: crate::types::M2tsTimedMetadataBehavior,
    ) -> Self {
        self.timed_metadata_behavior = Some(input);
        self
    }
    /// When set to passthrough, timed metadata will be passed through from input to output.
    pub fn set_timed_metadata_behavior(
        mut self,
        input: std::option::Option<crate::types::M2tsTimedMetadataBehavior>,
    ) -> Self {
        self.timed_metadata_behavior = input;
        self
    }
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn timed_metadata_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.timed_metadata_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_timed_metadata_pid(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.timed_metadata_pid = input;
        self
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn transport_stream_id(mut self, input: i32) -> Self {
        self.transport_stream_id = Some(input);
        self
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn set_transport_stream_id(mut self, input: std::option::Option<i32>) -> Self {
        self.transport_stream_id = input;
        self
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn video_pid(mut self, input: impl Into<std::string::String>) -> Self {
        self.video_pid = Some(input.into());
        self
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
    pub fn set_video_pid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.video_pid = input;
        self
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn scte35_preroll_pullup_milliseconds(mut self, input: f64) -> Self {
        self.scte35_preroll_pullup_milliseconds = Some(input);
        self
    }
    /// Defines the amount SCTE-35 preroll will be increased (in milliseconds) on the output. Preroll is the amount of time between the presence of a SCTE-35 indication in a transport stream and the PTS of the video frame it references. Zero means don't add pullup (it doesn't mean set the preroll to zero). Negative pullup is not supported, which means that you can't make the preroll shorter. Be aware that latency in the output will increase by the pullup amount.
    pub fn set_scte35_preroll_pullup_milliseconds(
        mut self,
        input: std::option::Option<f64>,
    ) -> Self {
        self.scte35_preroll_pullup_milliseconds = input;
        self
    }
    /// Consumes the builder and constructs a [`M2tsSettings`](crate::types::M2tsSettings).
    pub fn build(self) -> crate::types::M2tsSettings {
        crate::types::M2tsSettings {
            absent_input_audio_behavior: self.absent_input_audio_behavior,
            arib: self.arib,
            arib_captions_pid: self.arib_captions_pid,
            arib_captions_pid_control: self.arib_captions_pid_control,
            audio_buffer_model: self.audio_buffer_model,
            audio_frames_per_pes: self.audio_frames_per_pes.unwrap_or_default(),
            audio_pids: self.audio_pids,
            audio_stream_type: self.audio_stream_type,
            bitrate: self.bitrate.unwrap_or_default(),
            buffer_model: self.buffer_model,
            cc_descriptor: self.cc_descriptor,
            dvb_nit_settings: self.dvb_nit_settings,
            dvb_sdt_settings: self.dvb_sdt_settings,
            dvb_sub_pids: self.dvb_sub_pids,
            dvb_tdt_settings: self.dvb_tdt_settings,
            dvb_teletext_pid: self.dvb_teletext_pid,
            ebif: self.ebif,
            ebp_audio_interval: self.ebp_audio_interval,
            ebp_lookahead_ms: self.ebp_lookahead_ms.unwrap_or_default(),
            ebp_placement: self.ebp_placement,
            ecm_pid: self.ecm_pid,
            es_rate_in_pes: self.es_rate_in_pes,
            etv_platform_pid: self.etv_platform_pid,
            etv_signal_pid: self.etv_signal_pid,
            fragment_time: self.fragment_time.unwrap_or_default(),
            klv: self.klv,
            klv_data_pids: self.klv_data_pids,
            nielsen_id3_behavior: self.nielsen_id3_behavior,
            null_packet_bitrate: self.null_packet_bitrate.unwrap_or_default(),
            pat_interval: self.pat_interval.unwrap_or_default(),
            pcr_control: self.pcr_control,
            pcr_period: self.pcr_period.unwrap_or_default(),
            pcr_pid: self.pcr_pid,
            pmt_interval: self.pmt_interval.unwrap_or_default(),
            pmt_pid: self.pmt_pid,
            program_num: self.program_num.unwrap_or_default(),
            rate_mode: self.rate_mode,
            scte27_pids: self.scte27_pids,
            scte35_control: self.scte35_control,
            scte35_pid: self.scte35_pid,
            segmentation_markers: self.segmentation_markers,
            segmentation_style: self.segmentation_style,
            segmentation_time: self.segmentation_time.unwrap_or_default(),
            timed_metadata_behavior: self.timed_metadata_behavior,
            timed_metadata_pid: self.timed_metadata_pid,
            transport_stream_id: self.transport_stream_id.unwrap_or_default(),
            video_pid: self.video_pid,
            scte35_preroll_pullup_milliseconds: self
                .scte35_preroll_pullup_milliseconds
                .unwrap_or_default(),
        }
    }
}
