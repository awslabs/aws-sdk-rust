// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Embedded Source Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EmbeddedSourceSettings {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    #[doc(hidden)]
    pub convert608_to708: std::option::Option<crate::types::EmbeddedConvert608To708>,
    /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    #[doc(hidden)]
    pub scte20_detection: std::option::Option<crate::types::EmbeddedScte20Detection>,
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    #[doc(hidden)]
    pub source608_channel_number: i32,
    /// This field is unused and deprecated.
    #[doc(hidden)]
    pub source608_track_number: i32,
}
impl EmbeddedSourceSettings {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn convert608_to708(&self) -> std::option::Option<&crate::types::EmbeddedConvert608To708> {
        self.convert608_to708.as_ref()
    }
    /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    pub fn scte20_detection(&self) -> std::option::Option<&crate::types::EmbeddedScte20Detection> {
        self.scte20_detection.as_ref()
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn source608_channel_number(&self) -> i32 {
        self.source608_channel_number
    }
    /// This field is unused and deprecated.
    pub fn source608_track_number(&self) -> i32 {
        self.source608_track_number
    }
}
impl EmbeddedSourceSettings {
    /// Creates a new builder-style object to manufacture [`EmbeddedSourceSettings`](crate::types::EmbeddedSourceSettings).
    pub fn builder() -> crate::types::builders::EmbeddedSourceSettingsBuilder {
        crate::types::builders::EmbeddedSourceSettingsBuilder::default()
    }
}

/// A builder for [`EmbeddedSourceSettings`](crate::types::EmbeddedSourceSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EmbeddedSourceSettingsBuilder {
    pub(crate) convert608_to708: std::option::Option<crate::types::EmbeddedConvert608To708>,
    pub(crate) scte20_detection: std::option::Option<crate::types::EmbeddedScte20Detection>,
    pub(crate) source608_channel_number: std::option::Option<i32>,
    pub(crate) source608_track_number: std::option::Option<i32>,
}
impl EmbeddedSourceSettingsBuilder {
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn convert608_to708(mut self, input: crate::types::EmbeddedConvert608To708) -> Self {
        self.convert608_to708 = Some(input);
        self
    }
    /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
    pub fn set_convert608_to708(
        mut self,
        input: std::option::Option<crate::types::EmbeddedConvert608To708>,
    ) -> Self {
        self.convert608_to708 = input;
        self
    }
    /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    pub fn scte20_detection(mut self, input: crate::types::EmbeddedScte20Detection) -> Self {
        self.scte20_detection = Some(input);
        self
    }
    /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
    pub fn set_scte20_detection(
        mut self,
        input: std::option::Option<crate::types::EmbeddedScte20Detection>,
    ) -> Self {
        self.scte20_detection = input;
        self
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn source608_channel_number(mut self, input: i32) -> Self {
        self.source608_channel_number = Some(input);
        self
    }
    /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
    pub fn set_source608_channel_number(mut self, input: std::option::Option<i32>) -> Self {
        self.source608_channel_number = input;
        self
    }
    /// This field is unused and deprecated.
    pub fn source608_track_number(mut self, input: i32) -> Self {
        self.source608_track_number = Some(input);
        self
    }
    /// This field is unused and deprecated.
    pub fn set_source608_track_number(mut self, input: std::option::Option<i32>) -> Self {
        self.source608_track_number = input;
        self
    }
    /// Consumes the builder and constructs a [`EmbeddedSourceSettings`](crate::types::EmbeddedSourceSettings).
    pub fn build(self) -> crate::types::EmbeddedSourceSettings {
        crate::types::EmbeddedSourceSettings {
            convert608_to708: self.convert608_to708,
            scte20_detection: self.scte20_detection,
            source608_channel_number: self.source608_channel_number.unwrap_or_default(),
            source608_track_number: self.source608_track_number.unwrap_or_default(),
        }
    }
}
