// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An IPv4 CIDR to whitelist.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputWhitelistRuleCidr {
    /// The IPv4 CIDR to whitelist.
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
}
impl InputWhitelistRuleCidr {
    /// The IPv4 CIDR to whitelist.
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
}
impl InputWhitelistRuleCidr {
    /// Creates a new builder-style object to manufacture [`InputWhitelistRuleCidr`](crate::types::InputWhitelistRuleCidr).
    pub fn builder() -> crate::types::builders::InputWhitelistRuleCidrBuilder {
        crate::types::builders::InputWhitelistRuleCidrBuilder::default()
    }
}

/// A builder for [`InputWhitelistRuleCidr`](crate::types::InputWhitelistRuleCidr).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputWhitelistRuleCidrBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
}
impl InputWhitelistRuleCidrBuilder {
    /// The IPv4 CIDR to whitelist.
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// The IPv4 CIDR to whitelist.
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// Consumes the builder and constructs a [`InputWhitelistRuleCidr`](crate::types::InputWhitelistRuleCidr).
    pub fn build(self) -> crate::types::InputWhitelistRuleCidr {
        crate::types::InputWhitelistRuleCidr { cidr: self.cidr }
    }
}
