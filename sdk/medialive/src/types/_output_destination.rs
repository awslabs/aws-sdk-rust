// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for OutputDestination
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputDestination {
    /// User-specified id. This is used in an output group or an output.
    pub id: ::std::option::Option<::std::string::String>,
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    pub media_package_settings: ::std::option::Option<::std::vec::Vec<crate::types::MediaPackageOutputDestinationSettings>>,
    /// Destination settings for a Multiplex output; one destination for both encoders.
    pub multiplex_settings: ::std::option::Option<crate::types::MultiplexProgramChannelDestinationSettings>,
    /// Destination settings for a standard output; one destination for each redundant encoder.
    pub settings: ::std::option::Option<::std::vec::Vec<crate::types::OutputDestinationSettings>>,
}
impl OutputDestination {
    /// User-specified id. This is used in an output group or an output.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.media_package_settings.is_none()`.
    pub fn media_package_settings(&self) -> &[crate::types::MediaPackageOutputDestinationSettings] {
        self.media_package_settings.as_deref().unwrap_or_default()
    }
    /// Destination settings for a Multiplex output; one destination for both encoders.
    pub fn multiplex_settings(&self) -> ::std::option::Option<&crate::types::MultiplexProgramChannelDestinationSettings> {
        self.multiplex_settings.as_ref()
    }
    /// Destination settings for a standard output; one destination for each redundant encoder.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.settings.is_none()`.
    pub fn settings(&self) -> &[crate::types::OutputDestinationSettings] {
        self.settings.as_deref().unwrap_or_default()
    }
}
impl OutputDestination {
    /// Creates a new builder-style object to manufacture [`OutputDestination`](crate::types::OutputDestination).
    pub fn builder() -> crate::types::builders::OutputDestinationBuilder {
        crate::types::builders::OutputDestinationBuilder::default()
    }
}

/// A builder for [`OutputDestination`](crate::types::OutputDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputDestinationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) media_package_settings: ::std::option::Option<::std::vec::Vec<crate::types::MediaPackageOutputDestinationSettings>>,
    pub(crate) multiplex_settings: ::std::option::Option<crate::types::MultiplexProgramChannelDestinationSettings>,
    pub(crate) settings: ::std::option::Option<::std::vec::Vec<crate::types::OutputDestinationSettings>>,
}
impl OutputDestinationBuilder {
    /// User-specified id. This is used in an output group or an output.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// User-specified id. This is used in an output group or an output.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// User-specified id. This is used in an output group or an output.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `media_package_settings`.
    ///
    /// To override the contents of this collection use [`set_media_package_settings`](Self::set_media_package_settings).
    ///
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    pub fn media_package_settings(mut self, input: crate::types::MediaPackageOutputDestinationSettings) -> Self {
        let mut v = self.media_package_settings.unwrap_or_default();
        v.push(input);
        self.media_package_settings = ::std::option::Option::Some(v);
        self
    }
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    pub fn set_media_package_settings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MediaPackageOutputDestinationSettings>>,
    ) -> Self {
        self.media_package_settings = input;
        self
    }
    /// Destination settings for a MediaPackage output; one destination for both encoders.
    pub fn get_media_package_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaPackageOutputDestinationSettings>> {
        &self.media_package_settings
    }
    /// Destination settings for a Multiplex output; one destination for both encoders.
    pub fn multiplex_settings(mut self, input: crate::types::MultiplexProgramChannelDestinationSettings) -> Self {
        self.multiplex_settings = ::std::option::Option::Some(input);
        self
    }
    /// Destination settings for a Multiplex output; one destination for both encoders.
    pub fn set_multiplex_settings(mut self, input: ::std::option::Option<crate::types::MultiplexProgramChannelDestinationSettings>) -> Self {
        self.multiplex_settings = input;
        self
    }
    /// Destination settings for a Multiplex output; one destination for both encoders.
    pub fn get_multiplex_settings(&self) -> &::std::option::Option<crate::types::MultiplexProgramChannelDestinationSettings> {
        &self.multiplex_settings
    }
    /// Appends an item to `settings`.
    ///
    /// To override the contents of this collection use [`set_settings`](Self::set_settings).
    ///
    /// Destination settings for a standard output; one destination for each redundant encoder.
    pub fn settings(mut self, input: crate::types::OutputDestinationSettings) -> Self {
        let mut v = self.settings.unwrap_or_default();
        v.push(input);
        self.settings = ::std::option::Option::Some(v);
        self
    }
    /// Destination settings for a standard output; one destination for each redundant encoder.
    pub fn set_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputDestinationSettings>>) -> Self {
        self.settings = input;
        self
    }
    /// Destination settings for a standard output; one destination for each redundant encoder.
    pub fn get_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputDestinationSettings>> {
        &self.settings
    }
    /// Consumes the builder and constructs a [`OutputDestination`](crate::types::OutputDestination).
    pub fn build(self) -> crate::types::OutputDestination {
        crate::types::OutputDestination {
            id: self.id,
            media_package_settings: self.media_package_settings,
            multiplex_settings: self.multiplex_settings,
            settings: self.settings,
        }
    }
}
