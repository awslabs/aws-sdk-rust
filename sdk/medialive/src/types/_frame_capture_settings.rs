// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Frame Capture Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FrameCaptureSettings {
    /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
    #[doc(hidden)]
    pub capture_interval: i32,
    /// Unit for the frame capture interval.
    #[doc(hidden)]
    pub capture_interval_units: std::option::Option<crate::types::FrameCaptureIntervalUnit>,
    /// Timecode burn-in settings
    #[doc(hidden)]
    pub timecode_burnin_settings: std::option::Option<crate::types::TimecodeBurninSettings>,
}
impl FrameCaptureSettings {
    /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
    pub fn capture_interval(&self) -> i32 {
        self.capture_interval
    }
    /// Unit for the frame capture interval.
    pub fn capture_interval_units(
        &self,
    ) -> std::option::Option<&crate::types::FrameCaptureIntervalUnit> {
        self.capture_interval_units.as_ref()
    }
    /// Timecode burn-in settings
    pub fn timecode_burnin_settings(
        &self,
    ) -> std::option::Option<&crate::types::TimecodeBurninSettings> {
        self.timecode_burnin_settings.as_ref()
    }
}
impl FrameCaptureSettings {
    /// Creates a new builder-style object to manufacture [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
    pub fn builder() -> crate::types::builders::FrameCaptureSettingsBuilder {
        crate::types::builders::FrameCaptureSettingsBuilder::default()
    }
}

/// A builder for [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FrameCaptureSettingsBuilder {
    pub(crate) capture_interval: std::option::Option<i32>,
    pub(crate) capture_interval_units: std::option::Option<crate::types::FrameCaptureIntervalUnit>,
    pub(crate) timecode_burnin_settings: std::option::Option<crate::types::TimecodeBurninSettings>,
}
impl FrameCaptureSettingsBuilder {
    /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
    pub fn capture_interval(mut self, input: i32) -> Self {
        self.capture_interval = Some(input);
        self
    }
    /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
    pub fn set_capture_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.capture_interval = input;
        self
    }
    /// Unit for the frame capture interval.
    pub fn capture_interval_units(mut self, input: crate::types::FrameCaptureIntervalUnit) -> Self {
        self.capture_interval_units = Some(input);
        self
    }
    /// Unit for the frame capture interval.
    pub fn set_capture_interval_units(
        mut self,
        input: std::option::Option<crate::types::FrameCaptureIntervalUnit>,
    ) -> Self {
        self.capture_interval_units = input;
        self
    }
    /// Timecode burn-in settings
    pub fn timecode_burnin_settings(mut self, input: crate::types::TimecodeBurninSettings) -> Self {
        self.timecode_burnin_settings = Some(input);
        self
    }
    /// Timecode burn-in settings
    pub fn set_timecode_burnin_settings(
        mut self,
        input: std::option::Option<crate::types::TimecodeBurninSettings>,
    ) -> Self {
        self.timecode_burnin_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
    pub fn build(self) -> crate::types::FrameCaptureSettings {
        crate::types::FrameCaptureSettings {
            capture_interval: self.capture_interval.unwrap_or_default(),
            capture_interval_units: self.capture_interval_units,
            timecode_burnin_settings: self.timecode_burnin_settings,
        }
    }
}
