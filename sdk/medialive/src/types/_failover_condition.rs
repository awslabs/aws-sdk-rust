// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailoverCondition {
    /// Failover condition type-specific settings.
    #[doc(hidden)]
    pub failover_condition_settings: std::option::Option<crate::types::FailoverConditionSettings>,
}
impl FailoverCondition {
    /// Failover condition type-specific settings.
    pub fn failover_condition_settings(
        &self,
    ) -> std::option::Option<&crate::types::FailoverConditionSettings> {
        self.failover_condition_settings.as_ref()
    }
}
impl FailoverCondition {
    /// Creates a new builder-style object to manufacture [`FailoverCondition`](crate::types::FailoverCondition).
    pub fn builder() -> crate::types::builders::FailoverConditionBuilder {
        crate::types::builders::FailoverConditionBuilder::default()
    }
}

/// A builder for [`FailoverCondition`](crate::types::FailoverCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailoverConditionBuilder {
    pub(crate) failover_condition_settings:
        std::option::Option<crate::types::FailoverConditionSettings>,
}
impl FailoverConditionBuilder {
    /// Failover condition type-specific settings.
    pub fn failover_condition_settings(
        mut self,
        input: crate::types::FailoverConditionSettings,
    ) -> Self {
        self.failover_condition_settings = Some(input);
        self
    }
    /// Failover condition type-specific settings.
    pub fn set_failover_condition_settings(
        mut self,
        input: std::option::Option<crate::types::FailoverConditionSettings>,
    ) -> Self {
        self.failover_condition_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`FailoverCondition`](crate::types::FailoverCondition).
    pub fn build(self) -> crate::types::FailoverCondition {
        crate::types::FailoverCondition {
            failover_condition_settings: self.failover_condition_settings,
        }
    }
}
