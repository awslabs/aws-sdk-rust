// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// H265 Color Space Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct H265ColorSpaceSettings {
    /// Passthrough applies no color space conversion to the output
    #[doc(hidden)]
    pub color_space_passthrough_settings:
        std::option::Option<crate::types::ColorSpacePassthroughSettings>,
    /// Dolby Vision81 Settings
    #[doc(hidden)]
    pub dolby_vision81_settings: std::option::Option<crate::types::DolbyVision81Settings>,
    /// Hdr10 Settings
    #[doc(hidden)]
    pub hdr10_settings: std::option::Option<crate::types::Hdr10Settings>,
    /// Rec601 Settings
    #[doc(hidden)]
    pub rec601_settings: std::option::Option<crate::types::Rec601Settings>,
    /// Rec709 Settings
    #[doc(hidden)]
    pub rec709_settings: std::option::Option<crate::types::Rec709Settings>,
}
impl H265ColorSpaceSettings {
    /// Passthrough applies no color space conversion to the output
    pub fn color_space_passthrough_settings(
        &self,
    ) -> std::option::Option<&crate::types::ColorSpacePassthroughSettings> {
        self.color_space_passthrough_settings.as_ref()
    }
    /// Dolby Vision81 Settings
    pub fn dolby_vision81_settings(
        &self,
    ) -> std::option::Option<&crate::types::DolbyVision81Settings> {
        self.dolby_vision81_settings.as_ref()
    }
    /// Hdr10 Settings
    pub fn hdr10_settings(&self) -> std::option::Option<&crate::types::Hdr10Settings> {
        self.hdr10_settings.as_ref()
    }
    /// Rec601 Settings
    pub fn rec601_settings(&self) -> std::option::Option<&crate::types::Rec601Settings> {
        self.rec601_settings.as_ref()
    }
    /// Rec709 Settings
    pub fn rec709_settings(&self) -> std::option::Option<&crate::types::Rec709Settings> {
        self.rec709_settings.as_ref()
    }
}
impl H265ColorSpaceSettings {
    /// Creates a new builder-style object to manufacture [`H265ColorSpaceSettings`](crate::types::H265ColorSpaceSettings).
    pub fn builder() -> crate::types::builders::H265ColorSpaceSettingsBuilder {
        crate::types::builders::H265ColorSpaceSettingsBuilder::default()
    }
}

/// A builder for [`H265ColorSpaceSettings`](crate::types::H265ColorSpaceSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct H265ColorSpaceSettingsBuilder {
    pub(crate) color_space_passthrough_settings:
        std::option::Option<crate::types::ColorSpacePassthroughSettings>,
    pub(crate) dolby_vision81_settings: std::option::Option<crate::types::DolbyVision81Settings>,
    pub(crate) hdr10_settings: std::option::Option<crate::types::Hdr10Settings>,
    pub(crate) rec601_settings: std::option::Option<crate::types::Rec601Settings>,
    pub(crate) rec709_settings: std::option::Option<crate::types::Rec709Settings>,
}
impl H265ColorSpaceSettingsBuilder {
    /// Passthrough applies no color space conversion to the output
    pub fn color_space_passthrough_settings(
        mut self,
        input: crate::types::ColorSpacePassthroughSettings,
    ) -> Self {
        self.color_space_passthrough_settings = Some(input);
        self
    }
    /// Passthrough applies no color space conversion to the output
    pub fn set_color_space_passthrough_settings(
        mut self,
        input: std::option::Option<crate::types::ColorSpacePassthroughSettings>,
    ) -> Self {
        self.color_space_passthrough_settings = input;
        self
    }
    /// Dolby Vision81 Settings
    pub fn dolby_vision81_settings(mut self, input: crate::types::DolbyVision81Settings) -> Self {
        self.dolby_vision81_settings = Some(input);
        self
    }
    /// Dolby Vision81 Settings
    pub fn set_dolby_vision81_settings(
        mut self,
        input: std::option::Option<crate::types::DolbyVision81Settings>,
    ) -> Self {
        self.dolby_vision81_settings = input;
        self
    }
    /// Hdr10 Settings
    pub fn hdr10_settings(mut self, input: crate::types::Hdr10Settings) -> Self {
        self.hdr10_settings = Some(input);
        self
    }
    /// Hdr10 Settings
    pub fn set_hdr10_settings(
        mut self,
        input: std::option::Option<crate::types::Hdr10Settings>,
    ) -> Self {
        self.hdr10_settings = input;
        self
    }
    /// Rec601 Settings
    pub fn rec601_settings(mut self, input: crate::types::Rec601Settings) -> Self {
        self.rec601_settings = Some(input);
        self
    }
    /// Rec601 Settings
    pub fn set_rec601_settings(
        mut self,
        input: std::option::Option<crate::types::Rec601Settings>,
    ) -> Self {
        self.rec601_settings = input;
        self
    }
    /// Rec709 Settings
    pub fn rec709_settings(mut self, input: crate::types::Rec709Settings) -> Self {
        self.rec709_settings = Some(input);
        self
    }
    /// Rec709 Settings
    pub fn set_rec709_settings(
        mut self,
        input: std::option::Option<crate::types::Rec709Settings>,
    ) -> Self {
        self.rec709_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`H265ColorSpaceSettings`](crate::types::H265ColorSpaceSettings).
    pub fn build(self) -> crate::types::H265ColorSpaceSettings {
        crate::types::H265ColorSpaceSettings {
            color_space_passthrough_settings: self.color_space_passthrough_settings,
            dolby_vision81_settings: self.dolby_vision81_settings,
            hdr10_settings: self.hdr10_settings,
            rec601_settings: self.rec601_settings,
            rec709_settings: self.rec709_settings,
        }
    }
}
