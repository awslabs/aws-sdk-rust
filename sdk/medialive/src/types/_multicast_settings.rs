// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for a Multicast input. Contains a list of multicast Urls and optional source ip addresses.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MulticastSettings {
    /// Placeholder documentation for __listOfMulticastSource
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::MulticastSource>>,
}
impl MulticastSettings {
    /// Placeholder documentation for __listOfMulticastSource
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::MulticastSource] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl MulticastSettings {
    /// Creates a new builder-style object to manufacture [`MulticastSettings`](crate::types::MulticastSettings).
    pub fn builder() -> crate::types::builders::MulticastSettingsBuilder {
        crate::types::builders::MulticastSettingsBuilder::default()
    }
}

/// A builder for [`MulticastSettings`](crate::types::MulticastSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MulticastSettingsBuilder {
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::MulticastSource>>,
}
impl MulticastSettingsBuilder {
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// Placeholder documentation for __listOfMulticastSource
    pub fn sources(mut self, input: crate::types::MulticastSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOfMulticastSource
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MulticastSource>>) -> Self {
        self.sources = input;
        self
    }
    /// Placeholder documentation for __listOfMulticastSource
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MulticastSource>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`MulticastSettings`](crate::types::MulticastSettings).
    pub fn build(self) -> crate::types::MulticastSettings {
        crate::types::MulticastSettings { sources: self.sources }
    }
}
