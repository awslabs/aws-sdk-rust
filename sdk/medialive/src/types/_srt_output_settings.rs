// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Srt Output Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SrtOutputSettings {
    /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
    pub buffer_msec: ::std::option::Option<i32>,
    /// Udp Container Settings
    pub container_settings: ::std::option::Option<crate::types::UdpContainerSettings>,
    /// Reference to an OutputDestination ID defined in the channel
    pub destination: ::std::option::Option<crate::types::OutputLocationRef>,
    /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
    pub encryption_type: ::std::option::Option<crate::types::SrtEncryptionType>,
    /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
    pub latency: ::std::option::Option<i32>,
}
impl SrtOutputSettings {
    /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
    pub fn buffer_msec(&self) -> ::std::option::Option<i32> {
        self.buffer_msec
    }
    /// Udp Container Settings
    pub fn container_settings(&self) -> ::std::option::Option<&crate::types::UdpContainerSettings> {
        self.container_settings.as_ref()
    }
    /// Reference to an OutputDestination ID defined in the channel
    pub fn destination(&self) -> ::std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
    pub fn encryption_type(&self) -> ::std::option::Option<&crate::types::SrtEncryptionType> {
        self.encryption_type.as_ref()
    }
    /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
    pub fn latency(&self) -> ::std::option::Option<i32> {
        self.latency
    }
}
impl SrtOutputSettings {
    /// Creates a new builder-style object to manufacture [`SrtOutputSettings`](crate::types::SrtOutputSettings).
    pub fn builder() -> crate::types::builders::SrtOutputSettingsBuilder {
        crate::types::builders::SrtOutputSettingsBuilder::default()
    }
}

/// A builder for [`SrtOutputSettings`](crate::types::SrtOutputSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SrtOutputSettingsBuilder {
    pub(crate) buffer_msec: ::std::option::Option<i32>,
    pub(crate) container_settings: ::std::option::Option<crate::types::UdpContainerSettings>,
    pub(crate) destination: ::std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) encryption_type: ::std::option::Option<crate::types::SrtEncryptionType>,
    pub(crate) latency: ::std::option::Option<i32>,
}
impl SrtOutputSettingsBuilder {
    /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
    pub fn buffer_msec(mut self, input: i32) -> Self {
        self.buffer_msec = ::std::option::Option::Some(input);
        self
    }
    /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
    pub fn set_buffer_msec(mut self, input: ::std::option::Option<i32>) -> Self {
        self.buffer_msec = input;
        self
    }
    /// SRT output buffering in milliseconds. A higher value increases latency through the encoder. But the benefits are that it helps to maintain a constant, low-jitter SRT output, and it accommodates clock recovery, input switching, input disruptions, picture reordering, and so on. Range: 0-10000 milliseconds.
    pub fn get_buffer_msec(&self) -> &::std::option::Option<i32> {
        &self.buffer_msec
    }
    /// Udp Container Settings
    /// This field is required.
    pub fn container_settings(mut self, input: crate::types::UdpContainerSettings) -> Self {
        self.container_settings = ::std::option::Option::Some(input);
        self
    }
    /// Udp Container Settings
    pub fn set_container_settings(mut self, input: ::std::option::Option<crate::types::UdpContainerSettings>) -> Self {
        self.container_settings = input;
        self
    }
    /// Udp Container Settings
    pub fn get_container_settings(&self) -> &::std::option::Option<crate::types::UdpContainerSettings> {
        &self.container_settings
    }
    /// Reference to an OutputDestination ID defined in the channel
    /// This field is required.
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// Reference to an OutputDestination ID defined in the channel
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::OutputLocationRef>) -> Self {
        self.destination = input;
        self
    }
    /// Reference to an OutputDestination ID defined in the channel
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::OutputLocationRef> {
        &self.destination
    }
    /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
    pub fn encryption_type(mut self, input: crate::types::SrtEncryptionType) -> Self {
        self.encryption_type = ::std::option::Option::Some(input);
        self
    }
    /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
    pub fn set_encryption_type(mut self, input: ::std::option::Option<crate::types::SrtEncryptionType>) -> Self {
        self.encryption_type = input;
        self
    }
    /// The encryption level for the content. Valid values are AES128, AES192, AES256. You and the downstream system should plan how to set this field because the values must not conflict with each other.
    pub fn get_encryption_type(&self) -> &::std::option::Option<crate::types::SrtEncryptionType> {
        &self.encryption_type
    }
    /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
    pub fn latency(mut self, input: i32) -> Self {
        self.latency = ::std::option::Option::Some(input);
        self
    }
    /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
    pub fn set_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latency = input;
        self
    }
    /// The latency value, in milliseconds, that is proposed during the SRT connection handshake. SRT will choose the maximum of the values proposed by the sender and receiver. On the sender side, latency is the amount of time a packet is held to give it a chance to be delivered successfully. On the receiver side, latency is the amount of time the packet is held before delivering to the application, aiding in packet recovery and matching as closely as possible the packet timing of the sender. Range: 40-16000 milliseconds.
    pub fn get_latency(&self) -> &::std::option::Option<i32> {
        &self.latency
    }
    /// Consumes the builder and constructs a [`SrtOutputSettings`](crate::types::SrtOutputSettings).
    pub fn build(self) -> crate::types::SrtOutputSettings {
        crate::types::SrtOutputSettings {
            buffer_msec: self.buffer_msec,
            container_settings: self.container_settings,
            destination: self.destination,
            encryption_type: self.encryption_type,
            latency: self.latency,
        }
    }
}
