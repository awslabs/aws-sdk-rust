// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for one failover condition.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailoverConditionSettings {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
    #[doc(hidden)]
    pub audio_silence_settings: std::option::Option<crate::types::AudioSilenceFailoverSettings>,
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    #[doc(hidden)]
    pub input_loss_settings: std::option::Option<crate::types::InputLossFailoverSettings>,
    /// MediaLive will perform a failover if content is considered black for the specified period.
    #[doc(hidden)]
    pub video_black_settings: std::option::Option<crate::types::VideoBlackFailoverSettings>,
}
impl FailoverConditionSettings {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
    pub fn audio_silence_settings(
        &self,
    ) -> std::option::Option<&crate::types::AudioSilenceFailoverSettings> {
        self.audio_silence_settings.as_ref()
    }
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    pub fn input_loss_settings(
        &self,
    ) -> std::option::Option<&crate::types::InputLossFailoverSettings> {
        self.input_loss_settings.as_ref()
    }
    /// MediaLive will perform a failover if content is considered black for the specified period.
    pub fn video_black_settings(
        &self,
    ) -> std::option::Option<&crate::types::VideoBlackFailoverSettings> {
        self.video_black_settings.as_ref()
    }
}
impl FailoverConditionSettings {
    /// Creates a new builder-style object to manufacture [`FailoverConditionSettings`](crate::types::FailoverConditionSettings).
    pub fn builder() -> crate::types::builders::FailoverConditionSettingsBuilder {
        crate::types::builders::FailoverConditionSettingsBuilder::default()
    }
}

/// A builder for [`FailoverConditionSettings`](crate::types::FailoverConditionSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailoverConditionSettingsBuilder {
    pub(crate) audio_silence_settings:
        std::option::Option<crate::types::AudioSilenceFailoverSettings>,
    pub(crate) input_loss_settings: std::option::Option<crate::types::InputLossFailoverSettings>,
    pub(crate) video_black_settings: std::option::Option<crate::types::VideoBlackFailoverSettings>,
}
impl FailoverConditionSettingsBuilder {
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
    pub fn audio_silence_settings(
        mut self,
        input: crate::types::AudioSilenceFailoverSettings,
    ) -> Self {
        self.audio_silence_settings = Some(input);
        self
    }
    /// MediaLive will perform a failover if the specified audio selector is silent for the specified period.
    pub fn set_audio_silence_settings(
        mut self,
        input: std::option::Option<crate::types::AudioSilenceFailoverSettings>,
    ) -> Self {
        self.audio_silence_settings = input;
        self
    }
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    pub fn input_loss_settings(mut self, input: crate::types::InputLossFailoverSettings) -> Self {
        self.input_loss_settings = Some(input);
        self
    }
    /// MediaLive will perform a failover if content is not detected in this input for the specified period.
    pub fn set_input_loss_settings(
        mut self,
        input: std::option::Option<crate::types::InputLossFailoverSettings>,
    ) -> Self {
        self.input_loss_settings = input;
        self
    }
    /// MediaLive will perform a failover if content is considered black for the specified period.
    pub fn video_black_settings(mut self, input: crate::types::VideoBlackFailoverSettings) -> Self {
        self.video_black_settings = Some(input);
        self
    }
    /// MediaLive will perform a failover if content is considered black for the specified period.
    pub fn set_video_black_settings(
        mut self,
        input: std::option::Option<crate::types::VideoBlackFailoverSettings>,
    ) -> Self {
        self.video_black_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`FailoverConditionSettings`](crate::types::FailoverConditionSettings).
    pub fn build(self) -> crate::types::FailoverConditionSettings {
        crate::types::FailoverConditionSettings {
            audio_silence_settings: self.audio_silence_settings,
            input_loss_settings: self.input_loss_settings,
            video_black_settings: self.video_black_settings,
        }
    }
}
