// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SignalMapMonitorDeploymentStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let signalmapmonitordeploymentstatus = unimplemented!();
/// match signalmapmonitordeploymentstatus {
///     SignalMapMonitorDeploymentStatus::DeleteComplete => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DeleteFailed => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DeleteInProgress => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DeploymentComplete => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DeploymentFailed => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DeploymentInProgress => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DryRunDeploymentComplete => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DryRunDeploymentFailed => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::DryRunDeploymentInProgress => { /* ... */ },
///     SignalMapMonitorDeploymentStatus::NotDeployed => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `signalmapmonitordeploymentstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SignalMapMonitorDeploymentStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SignalMapMonitorDeploymentStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SignalMapMonitorDeploymentStatus::NewFeature` is defined.
/// Specifically, when `signalmapmonitordeploymentstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SignalMapMonitorDeploymentStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// A signal map's monitor deployment status.
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum SignalMapMonitorDeploymentStatus {
    #[allow(missing_docs)] // documentation missing in model
    DeleteComplete,
    #[allow(missing_docs)] // documentation missing in model
    DeleteFailed,
    #[allow(missing_docs)] // documentation missing in model
    DeleteInProgress,
    #[allow(missing_docs)] // documentation missing in model
    DeploymentComplete,
    #[allow(missing_docs)] // documentation missing in model
    DeploymentFailed,
    #[allow(missing_docs)] // documentation missing in model
    DeploymentInProgress,
    #[allow(missing_docs)] // documentation missing in model
    DryRunDeploymentComplete,
    #[allow(missing_docs)] // documentation missing in model
    DryRunDeploymentFailed,
    #[allow(missing_docs)] // documentation missing in model
    DryRunDeploymentInProgress,
    #[allow(missing_docs)] // documentation missing in model
    NotDeployed,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for SignalMapMonitorDeploymentStatus {
    fn from(s: &str) -> Self {
        match s {
            "DELETE_COMPLETE" => SignalMapMonitorDeploymentStatus::DeleteComplete,
            "DELETE_FAILED" => SignalMapMonitorDeploymentStatus::DeleteFailed,
            "DELETE_IN_PROGRESS" => SignalMapMonitorDeploymentStatus::DeleteInProgress,
            "DEPLOYMENT_COMPLETE" => SignalMapMonitorDeploymentStatus::DeploymentComplete,
            "DEPLOYMENT_FAILED" => SignalMapMonitorDeploymentStatus::DeploymentFailed,
            "DEPLOYMENT_IN_PROGRESS" => SignalMapMonitorDeploymentStatus::DeploymentInProgress,
            "DRY_RUN_DEPLOYMENT_COMPLETE" => SignalMapMonitorDeploymentStatus::DryRunDeploymentComplete,
            "DRY_RUN_DEPLOYMENT_FAILED" => SignalMapMonitorDeploymentStatus::DryRunDeploymentFailed,
            "DRY_RUN_DEPLOYMENT_IN_PROGRESS" => SignalMapMonitorDeploymentStatus::DryRunDeploymentInProgress,
            "NOT_DEPLOYED" => SignalMapMonitorDeploymentStatus::NotDeployed,
            other => SignalMapMonitorDeploymentStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for SignalMapMonitorDeploymentStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(SignalMapMonitorDeploymentStatus::from(s))
    }
}
impl SignalMapMonitorDeploymentStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SignalMapMonitorDeploymentStatus::DeleteComplete => "DELETE_COMPLETE",
            SignalMapMonitorDeploymentStatus::DeleteFailed => "DELETE_FAILED",
            SignalMapMonitorDeploymentStatus::DeleteInProgress => "DELETE_IN_PROGRESS",
            SignalMapMonitorDeploymentStatus::DeploymentComplete => "DEPLOYMENT_COMPLETE",
            SignalMapMonitorDeploymentStatus::DeploymentFailed => "DEPLOYMENT_FAILED",
            SignalMapMonitorDeploymentStatus::DeploymentInProgress => "DEPLOYMENT_IN_PROGRESS",
            SignalMapMonitorDeploymentStatus::DryRunDeploymentComplete => "DRY_RUN_DEPLOYMENT_COMPLETE",
            SignalMapMonitorDeploymentStatus::DryRunDeploymentFailed => "DRY_RUN_DEPLOYMENT_FAILED",
            SignalMapMonitorDeploymentStatus::DryRunDeploymentInProgress => "DRY_RUN_DEPLOYMENT_IN_PROGRESS",
            SignalMapMonitorDeploymentStatus::NotDeployed => "NOT_DEPLOYED",
            SignalMapMonitorDeploymentStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DELETE_COMPLETE",
            "DELETE_FAILED",
            "DELETE_IN_PROGRESS",
            "DEPLOYMENT_COMPLETE",
            "DEPLOYMENT_FAILED",
            "DEPLOYMENT_IN_PROGRESS",
            "DRY_RUN_DEPLOYMENT_COMPLETE",
            "DRY_RUN_DEPLOYMENT_FAILED",
            "DRY_RUN_DEPLOYMENT_IN_PROGRESS",
            "NOT_DEPLOYED",
        ]
    }
}
impl ::std::convert::AsRef<str> for SignalMapMonitorDeploymentStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl SignalMapMonitorDeploymentStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for SignalMapMonitorDeploymentStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            SignalMapMonitorDeploymentStatus::DeleteComplete => write!(f, "DELETE_COMPLETE"),
            SignalMapMonitorDeploymentStatus::DeleteFailed => write!(f, "DELETE_FAILED"),
            SignalMapMonitorDeploymentStatus::DeleteInProgress => write!(f, "DELETE_IN_PROGRESS"),
            SignalMapMonitorDeploymentStatus::DeploymentComplete => write!(f, "DEPLOYMENT_COMPLETE"),
            SignalMapMonitorDeploymentStatus::DeploymentFailed => write!(f, "DEPLOYMENT_FAILED"),
            SignalMapMonitorDeploymentStatus::DeploymentInProgress => write!(f, "DEPLOYMENT_IN_PROGRESS"),
            SignalMapMonitorDeploymentStatus::DryRunDeploymentComplete => write!(f, "DRY_RUN_DEPLOYMENT_COMPLETE"),
            SignalMapMonitorDeploymentStatus::DryRunDeploymentFailed => write!(f, "DRY_RUN_DEPLOYMENT_FAILED"),
            SignalMapMonitorDeploymentStatus::DryRunDeploymentInProgress => write!(f, "DRY_RUN_DEPLOYMENT_IN_PROGRESS"),
            SignalMapMonitorDeploymentStatus::NotDeployed => write!(f, "NOT_DEPLOYED"),
            SignalMapMonitorDeploymentStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
