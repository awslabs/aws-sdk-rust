// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for a PUSH type input.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputDestination {
    /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
    pub ip: ::std::option::Option<::std::string::String>,
    /// The port number for the input.
    pub port: ::std::option::Option<::std::string::String>,
    /// This represents the endpoint that the customer stream will be pushed to.
    pub url: ::std::option::Option<::std::string::String>,
    /// The properties for a VPC type input destination.
    pub vpc: ::std::option::Option<crate::types::InputDestinationVpc>,
    /// The ID of the attached network.
    pub network: ::std::option::Option<::std::string::String>,
    /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
    pub network_routes: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRoute>>,
}
impl InputDestination {
    /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
    pub fn ip(&self) -> ::std::option::Option<&str> {
        self.ip.as_deref()
    }
    /// The port number for the input.
    pub fn port(&self) -> ::std::option::Option<&str> {
        self.port.as_deref()
    }
    /// This represents the endpoint that the customer stream will be pushed to.
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// The properties for a VPC type input destination.
    pub fn vpc(&self) -> ::std::option::Option<&crate::types::InputDestinationVpc> {
        self.vpc.as_ref()
    }
    /// The ID of the attached network.
    pub fn network(&self) -> ::std::option::Option<&str> {
        self.network.as_deref()
    }
    /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_routes.is_none()`.
    pub fn network_routes(&self) -> &[crate::types::InputDestinationRoute] {
        self.network_routes.as_deref().unwrap_or_default()
    }
}
impl InputDestination {
    /// Creates a new builder-style object to manufacture [`InputDestination`](crate::types::InputDestination).
    pub fn builder() -> crate::types::builders::InputDestinationBuilder {
        crate::types::builders::InputDestinationBuilder::default()
    }
}

/// A builder for [`InputDestination`](crate::types::InputDestination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputDestinationBuilder {
    pub(crate) ip: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) vpc: ::std::option::Option<crate::types::InputDestinationVpc>,
    pub(crate) network: ::std::option::Option<::std::string::String>,
    pub(crate) network_routes: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRoute>>,
}
impl InputDestinationBuilder {
    /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
    pub fn ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip = ::std::option::Option::Some(input.into());
        self
    }
    /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
    pub fn set_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input.
    pub fn get_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip
    }
    /// The port number for the input.
    pub fn port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.port = ::std::option::Option::Some(input.into());
        self
    }
    /// The port number for the input.
    pub fn set_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.port = input;
        self
    }
    /// The port number for the input.
    pub fn get_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.port
    }
    /// This represents the endpoint that the customer stream will be pushed to.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// This represents the endpoint that the customer stream will be pushed to.
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// This represents the endpoint that the customer stream will be pushed to.
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// The properties for a VPC type input destination.
    pub fn vpc(mut self, input: crate::types::InputDestinationVpc) -> Self {
        self.vpc = ::std::option::Option::Some(input);
        self
    }
    /// The properties for a VPC type input destination.
    pub fn set_vpc(mut self, input: ::std::option::Option<crate::types::InputDestinationVpc>) -> Self {
        self.vpc = input;
        self
    }
    /// The properties for a VPC type input destination.
    pub fn get_vpc(&self) -> &::std::option::Option<crate::types::InputDestinationVpc> {
        &self.vpc
    }
    /// The ID of the attached network.
    pub fn network(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the attached network.
    pub fn set_network(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network = input;
        self
    }
    /// The ID of the attached network.
    pub fn get_network(&self) -> &::std::option::Option<::std::string::String> {
        &self.network
    }
    /// Appends an item to `network_routes`.
    ///
    /// To override the contents of this collection use [`set_network_routes`](Self::set_network_routes).
    ///
    /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
    pub fn network_routes(mut self, input: crate::types::InputDestinationRoute) -> Self {
        let mut v = self.network_routes.unwrap_or_default();
        v.push(input);
        self.network_routes = ::std::option::Option::Some(v);
        self
    }
    /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
    pub fn set_network_routes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRoute>>) -> Self {
        self.network_routes = input;
        self
    }
    /// If the push input has an input location of ON-PREM it's a requirement to specify what the route of the input is going to be on the customer local network.
    pub fn get_network_routes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRoute>> {
        &self.network_routes
    }
    /// Consumes the builder and constructs a [`InputDestination`](crate::types::InputDestination).
    pub fn build(self) -> crate::types::InputDestination {
        crate::types::InputDestination {
            ip: self.ip,
            port: self.port,
            url: self.url,
            vpc: self.vpc,
            network: self.network,
            network_routes: self.network_routes,
        }
    }
}
