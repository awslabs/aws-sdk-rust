// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Avail Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AvailSettings {
    /// Esam
    #[doc(hidden)]
    pub esam: std::option::Option<crate::types::Esam>,
    /// Scte35 Splice Insert
    #[doc(hidden)]
    pub scte35_splice_insert: std::option::Option<crate::types::Scte35SpliceInsert>,
    /// Scte35 Time Signal Apos
    #[doc(hidden)]
    pub scte35_time_signal_apos: std::option::Option<crate::types::Scte35TimeSignalApos>,
}
impl AvailSettings {
    /// Esam
    pub fn esam(&self) -> std::option::Option<&crate::types::Esam> {
        self.esam.as_ref()
    }
    /// Scte35 Splice Insert
    pub fn scte35_splice_insert(&self) -> std::option::Option<&crate::types::Scte35SpliceInsert> {
        self.scte35_splice_insert.as_ref()
    }
    /// Scte35 Time Signal Apos
    pub fn scte35_time_signal_apos(
        &self,
    ) -> std::option::Option<&crate::types::Scte35TimeSignalApos> {
        self.scte35_time_signal_apos.as_ref()
    }
}
impl AvailSettings {
    /// Creates a new builder-style object to manufacture [`AvailSettings`](crate::types::AvailSettings).
    pub fn builder() -> crate::types::builders::AvailSettingsBuilder {
        crate::types::builders::AvailSettingsBuilder::default()
    }
}

/// A builder for [`AvailSettings`](crate::types::AvailSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AvailSettingsBuilder {
    pub(crate) esam: std::option::Option<crate::types::Esam>,
    pub(crate) scte35_splice_insert: std::option::Option<crate::types::Scte35SpliceInsert>,
    pub(crate) scte35_time_signal_apos: std::option::Option<crate::types::Scte35TimeSignalApos>,
}
impl AvailSettingsBuilder {
    /// Esam
    pub fn esam(mut self, input: crate::types::Esam) -> Self {
        self.esam = Some(input);
        self
    }
    /// Esam
    pub fn set_esam(mut self, input: std::option::Option<crate::types::Esam>) -> Self {
        self.esam = input;
        self
    }
    /// Scte35 Splice Insert
    pub fn scte35_splice_insert(mut self, input: crate::types::Scte35SpliceInsert) -> Self {
        self.scte35_splice_insert = Some(input);
        self
    }
    /// Scte35 Splice Insert
    pub fn set_scte35_splice_insert(
        mut self,
        input: std::option::Option<crate::types::Scte35SpliceInsert>,
    ) -> Self {
        self.scte35_splice_insert = input;
        self
    }
    /// Scte35 Time Signal Apos
    pub fn scte35_time_signal_apos(mut self, input: crate::types::Scte35TimeSignalApos) -> Self {
        self.scte35_time_signal_apos = Some(input);
        self
    }
    /// Scte35 Time Signal Apos
    pub fn set_scte35_time_signal_apos(
        mut self,
        input: std::option::Option<crate::types::Scte35TimeSignalApos>,
    ) -> Self {
        self.scte35_time_signal_apos = input;
        self
    }
    /// Consumes the builder and constructs a [`AvailSettings`](crate::types::AvailSettings).
    pub fn build(self) -> crate::types::AvailSettings {
        crate::types::AvailSettings {
            esam: self.esam,
            scte35_splice_insert: self.scte35_splice_insert,
            scte35_time_signal_apos: self.scte35_time_signal_apos,
        }
    }
}
