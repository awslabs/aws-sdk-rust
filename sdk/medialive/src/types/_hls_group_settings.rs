// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Hls Group Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsGroupSettings {
    /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
    #[doc(hidden)]
    pub ad_markers: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    #[doc(hidden)]
    pub base_url_content: std::option::Option<std::string::String>,
    /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
    #[doc(hidden)]
    pub base_url_content1: std::option::Option<std::string::String>,
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    #[doc(hidden)]
    pub base_url_manifest: std::option::Option<std::string::String>,
    /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
    #[doc(hidden)]
    pub base_url_manifest1: std::option::Option<std::string::String>,
    /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
    #[doc(hidden)]
    pub caption_language_mappings:
        std::option::Option<std::vec::Vec<crate::types::CaptionLanguageMapping>>,
    /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
    #[doc(hidden)]
    pub caption_language_setting: std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
    #[doc(hidden)]
    pub client_cache: std::option::Option<crate::types::HlsClientCache>,
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    #[doc(hidden)]
    pub codec_specification: std::option::Option<crate::types::HlsCodecSpecification>,
    /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
    #[doc(hidden)]
    pub constant_iv: std::option::Option<std::string::String>,
    /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::OutputLocationRef>,
    /// Place segments in subdirectories.
    #[doc(hidden)]
    pub directory_structure: std::option::Option<crate::types::HlsDirectoryStructure>,
    /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
    #[doc(hidden)]
    pub discontinuity_tags: std::option::Option<crate::types::HlsDiscontinuityTags>,
    /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
    #[doc(hidden)]
    pub encryption_type: std::option::Option<crate::types::HlsEncryptionType>,
    /// Parameters that control interactions with the CDN.
    #[doc(hidden)]
    pub hls_cdn_settings: std::option::Option<crate::types::HlsCdnSettings>,
    /// State of HLS ID3 Segment Tagging
    #[doc(hidden)]
    pub hls_id3_segment_tagging: std::option::Option<crate::types::HlsId3SegmentTaggingState>,
    /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
    #[doc(hidden)]
    pub i_frame_only_playlists: std::option::Option<crate::types::IFrameOnlyPlaylistType>,
    /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
    #[doc(hidden)]
    pub incomplete_segment_behavior:
        std::option::Option<crate::types::HlsIncompleteSegmentBehavior>,
    /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
    #[doc(hidden)]
    pub index_n_segments: i32,
    /// Parameter that control output group behavior on input loss.
    #[doc(hidden)]
    pub input_loss_action: std::option::Option<crate::types::InputLossActionForHlsOut>,
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
    #[doc(hidden)]
    pub iv_in_manifest: std::option::Option<crate::types::HlsIvInManifest>,
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
    #[doc(hidden)]
    pub iv_source: std::option::Option<crate::types::HlsIvSource>,
    /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
    #[doc(hidden)]
    pub keep_segments: i32,
    /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
    #[doc(hidden)]
    pub key_format: std::option::Option<std::string::String>,
    /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    #[doc(hidden)]
    pub key_format_versions: std::option::Option<std::string::String>,
    /// The key provider settings.
    #[doc(hidden)]
    pub key_provider_settings: std::option::Option<crate::types::KeyProviderSettings>,
    /// When set to gzip, compresses HLS playlist.
    #[doc(hidden)]
    pub manifest_compression: std::option::Option<crate::types::HlsManifestCompression>,
    /// Indicates whether the output manifest should use floating point or integer values for segment duration.
    #[doc(hidden)]
    pub manifest_duration_format: std::option::Option<crate::types::HlsManifestDurationFormat>,
    /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    #[doc(hidden)]
    pub min_segment_length: i32,
    /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::HlsMode>,
    /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
    #[doc(hidden)]
    pub output_selection: std::option::Option<crate::types::HlsOutputSelection>,
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
    #[doc(hidden)]
    pub program_date_time: std::option::Option<crate::types::HlsProgramDateTime>,
    /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
    #[doc(hidden)]
    pub program_date_time_clock: std::option::Option<crate::types::HlsProgramDateTimeClock>,
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    #[doc(hidden)]
    pub program_date_time_period: i32,
    /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
    #[doc(hidden)]
    pub redundant_manifest: std::option::Option<crate::types::HlsRedundantManifest>,
    /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
    #[doc(hidden)]
    pub segment_length: i32,
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    #[doc(hidden)]
    pub segmentation_mode: std::option::Option<crate::types::HlsSegmentationMode>,
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
    #[doc(hidden)]
    pub segments_per_subdirectory: i32,
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    #[doc(hidden)]
    pub stream_inf_resolution: std::option::Option<crate::types::HlsStreamInfResolution>,
    /// Indicates ID3 frame that has the timecode.
    #[doc(hidden)]
    pub timed_metadata_id3_frame: std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    /// Timed Metadata interval in seconds.
    #[doc(hidden)]
    pub timed_metadata_id3_period: i32,
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    #[doc(hidden)]
    pub timestamp_delta_milliseconds: i32,
    /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
    #[doc(hidden)]
    pub ts_file_mode: std::option::Option<crate::types::HlsTsFileMode>,
}
impl HlsGroupSettings {
    /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
    pub fn ad_markers(&self) -> std::option::Option<&[crate::types::HlsAdMarkers]> {
        self.ad_markers.as_deref()
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url_content(&self) -> std::option::Option<&str> {
        self.base_url_content.as_deref()
    }
    /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
    pub fn base_url_content1(&self) -> std::option::Option<&str> {
        self.base_url_content1.as_deref()
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url_manifest(&self) -> std::option::Option<&str> {
        self.base_url_manifest.as_deref()
    }
    /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
    pub fn base_url_manifest1(&self) -> std::option::Option<&str> {
        self.base_url_manifest1.as_deref()
    }
    /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
    pub fn caption_language_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::CaptionLanguageMapping]> {
        self.caption_language_mappings.as_deref()
    }
    /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn caption_language_setting(
        &self,
    ) -> std::option::Option<&crate::types::HlsCaptionLanguageSetting> {
        self.caption_language_setting.as_ref()
    }
    /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
    pub fn client_cache(&self) -> std::option::Option<&crate::types::HlsClientCache> {
        self.client_cache.as_ref()
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn codec_specification(&self) -> std::option::Option<&crate::types::HlsCodecSpecification> {
        self.codec_specification.as_ref()
    }
    /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
    pub fn constant_iv(&self) -> std::option::Option<&str> {
        self.constant_iv.as_deref()
    }
    /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
    pub fn destination(&self) -> std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// Place segments in subdirectories.
    pub fn directory_structure(&self) -> std::option::Option<&crate::types::HlsDirectoryStructure> {
        self.directory_structure.as_ref()
    }
    /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
    pub fn discontinuity_tags(&self) -> std::option::Option<&crate::types::HlsDiscontinuityTags> {
        self.discontinuity_tags.as_ref()
    }
    /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
    pub fn encryption_type(&self) -> std::option::Option<&crate::types::HlsEncryptionType> {
        self.encryption_type.as_ref()
    }
    /// Parameters that control interactions with the CDN.
    pub fn hls_cdn_settings(&self) -> std::option::Option<&crate::types::HlsCdnSettings> {
        self.hls_cdn_settings.as_ref()
    }
    /// State of HLS ID3 Segment Tagging
    pub fn hls_id3_segment_tagging(
        &self,
    ) -> std::option::Option<&crate::types::HlsId3SegmentTaggingState> {
        self.hls_id3_segment_tagging.as_ref()
    }
    /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
    pub fn i_frame_only_playlists(
        &self,
    ) -> std::option::Option<&crate::types::IFrameOnlyPlaylistType> {
        self.i_frame_only_playlists.as_ref()
    }
    /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
    pub fn incomplete_segment_behavior(
        &self,
    ) -> std::option::Option<&crate::types::HlsIncompleteSegmentBehavior> {
        self.incomplete_segment_behavior.as_ref()
    }
    /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
    pub fn index_n_segments(&self) -> i32 {
        self.index_n_segments
    }
    /// Parameter that control output group behavior on input loss.
    pub fn input_loss_action(
        &self,
    ) -> std::option::Option<&crate::types::InputLossActionForHlsOut> {
        self.input_loss_action.as_ref()
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
    pub fn iv_in_manifest(&self) -> std::option::Option<&crate::types::HlsIvInManifest> {
        self.iv_in_manifest.as_ref()
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
    pub fn iv_source(&self) -> std::option::Option<&crate::types::HlsIvSource> {
        self.iv_source.as_ref()
    }
    /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
    pub fn keep_segments(&self) -> i32 {
        self.keep_segments
    }
    /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
    pub fn key_format(&self) -> std::option::Option<&str> {
        self.key_format.as_deref()
    }
    /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    pub fn key_format_versions(&self) -> std::option::Option<&str> {
        self.key_format_versions.as_deref()
    }
    /// The key provider settings.
    pub fn key_provider_settings(&self) -> std::option::Option<&crate::types::KeyProviderSettings> {
        self.key_provider_settings.as_ref()
    }
    /// When set to gzip, compresses HLS playlist.
    pub fn manifest_compression(
        &self,
    ) -> std::option::Option<&crate::types::HlsManifestCompression> {
        self.manifest_compression.as_ref()
    }
    /// Indicates whether the output manifest should use floating point or integer values for segment duration.
    pub fn manifest_duration_format(
        &self,
    ) -> std::option::Option<&crate::types::HlsManifestDurationFormat> {
        self.manifest_duration_format.as_ref()
    }
    /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn min_segment_length(&self) -> i32 {
        self.min_segment_length
    }
    /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
    pub fn mode(&self) -> std::option::Option<&crate::types::HlsMode> {
        self.mode.as_ref()
    }
    /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
    pub fn output_selection(&self) -> std::option::Option<&crate::types::HlsOutputSelection> {
        self.output_selection.as_ref()
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
    pub fn program_date_time(&self) -> std::option::Option<&crate::types::HlsProgramDateTime> {
        self.program_date_time.as_ref()
    }
    /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
    pub fn program_date_time_clock(
        &self,
    ) -> std::option::Option<&crate::types::HlsProgramDateTimeClock> {
        self.program_date_time_clock.as_ref()
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn program_date_time_period(&self) -> i32 {
        self.program_date_time_period
    }
    /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
    pub fn redundant_manifest(&self) -> std::option::Option<&crate::types::HlsRedundantManifest> {
        self.redundant_manifest.as_ref()
    }
    /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
    pub fn segment_length(&self) -> i32 {
        self.segment_length
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn segmentation_mode(&self) -> std::option::Option<&crate::types::HlsSegmentationMode> {
        self.segmentation_mode.as_ref()
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
    pub fn segments_per_subdirectory(&self) -> i32 {
        self.segments_per_subdirectory
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn stream_inf_resolution(
        &self,
    ) -> std::option::Option<&crate::types::HlsStreamInfResolution> {
        self.stream_inf_resolution.as_ref()
    }
    /// Indicates ID3 frame that has the timecode.
    pub fn timed_metadata_id3_frame(
        &self,
    ) -> std::option::Option<&crate::types::HlsTimedMetadataId3Frame> {
        self.timed_metadata_id3_frame.as_ref()
    }
    /// Timed Metadata interval in seconds.
    pub fn timed_metadata_id3_period(&self) -> i32 {
        self.timed_metadata_id3_period
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn timestamp_delta_milliseconds(&self) -> i32 {
        self.timestamp_delta_milliseconds
    }
    /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
    pub fn ts_file_mode(&self) -> std::option::Option<&crate::types::HlsTsFileMode> {
        self.ts_file_mode.as_ref()
    }
}
impl HlsGroupSettings {
    /// Creates a new builder-style object to manufacture [`HlsGroupSettings`](crate::types::HlsGroupSettings).
    pub fn builder() -> crate::types::builders::HlsGroupSettingsBuilder {
        crate::types::builders::HlsGroupSettingsBuilder::default()
    }
}

/// A builder for [`HlsGroupSettings`](crate::types::HlsGroupSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsGroupSettingsBuilder {
    pub(crate) ad_markers: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    pub(crate) base_url_content: std::option::Option<std::string::String>,
    pub(crate) base_url_content1: std::option::Option<std::string::String>,
    pub(crate) base_url_manifest: std::option::Option<std::string::String>,
    pub(crate) base_url_manifest1: std::option::Option<std::string::String>,
    pub(crate) caption_language_mappings:
        std::option::Option<std::vec::Vec<crate::types::CaptionLanguageMapping>>,
    pub(crate) caption_language_setting:
        std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    pub(crate) client_cache: std::option::Option<crate::types::HlsClientCache>,
    pub(crate) codec_specification: std::option::Option<crate::types::HlsCodecSpecification>,
    pub(crate) constant_iv: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) directory_structure: std::option::Option<crate::types::HlsDirectoryStructure>,
    pub(crate) discontinuity_tags: std::option::Option<crate::types::HlsDiscontinuityTags>,
    pub(crate) encryption_type: std::option::Option<crate::types::HlsEncryptionType>,
    pub(crate) hls_cdn_settings: std::option::Option<crate::types::HlsCdnSettings>,
    pub(crate) hls_id3_segment_tagging:
        std::option::Option<crate::types::HlsId3SegmentTaggingState>,
    pub(crate) i_frame_only_playlists: std::option::Option<crate::types::IFrameOnlyPlaylistType>,
    pub(crate) incomplete_segment_behavior:
        std::option::Option<crate::types::HlsIncompleteSegmentBehavior>,
    pub(crate) index_n_segments: std::option::Option<i32>,
    pub(crate) input_loss_action: std::option::Option<crate::types::InputLossActionForHlsOut>,
    pub(crate) iv_in_manifest: std::option::Option<crate::types::HlsIvInManifest>,
    pub(crate) iv_source: std::option::Option<crate::types::HlsIvSource>,
    pub(crate) keep_segments: std::option::Option<i32>,
    pub(crate) key_format: std::option::Option<std::string::String>,
    pub(crate) key_format_versions: std::option::Option<std::string::String>,
    pub(crate) key_provider_settings: std::option::Option<crate::types::KeyProviderSettings>,
    pub(crate) manifest_compression: std::option::Option<crate::types::HlsManifestCompression>,
    pub(crate) manifest_duration_format:
        std::option::Option<crate::types::HlsManifestDurationFormat>,
    pub(crate) min_segment_length: std::option::Option<i32>,
    pub(crate) mode: std::option::Option<crate::types::HlsMode>,
    pub(crate) output_selection: std::option::Option<crate::types::HlsOutputSelection>,
    pub(crate) program_date_time: std::option::Option<crate::types::HlsProgramDateTime>,
    pub(crate) program_date_time_clock: std::option::Option<crate::types::HlsProgramDateTimeClock>,
    pub(crate) program_date_time_period: std::option::Option<i32>,
    pub(crate) redundant_manifest: std::option::Option<crate::types::HlsRedundantManifest>,
    pub(crate) segment_length: std::option::Option<i32>,
    pub(crate) segmentation_mode: std::option::Option<crate::types::HlsSegmentationMode>,
    pub(crate) segments_per_subdirectory: std::option::Option<i32>,
    pub(crate) stream_inf_resolution: std::option::Option<crate::types::HlsStreamInfResolution>,
    pub(crate) timed_metadata_id3_frame:
        std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    pub(crate) timed_metadata_id3_period: std::option::Option<i32>,
    pub(crate) timestamp_delta_milliseconds: std::option::Option<i32>,
    pub(crate) ts_file_mode: std::option::Option<crate::types::HlsTsFileMode>,
}
impl HlsGroupSettingsBuilder {
    /// Appends an item to `ad_markers`.
    ///
    /// To override the contents of this collection use [`set_ad_markers`](Self::set_ad_markers).
    ///
    /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
    pub fn ad_markers(mut self, input: crate::types::HlsAdMarkers) -> Self {
        let mut v = self.ad_markers.unwrap_or_default();
        v.push(input);
        self.ad_markers = Some(v);
        self
    }
    /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
    pub fn set_ad_markers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    ) -> Self {
        self.ad_markers = input;
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url_content = Some(input.into());
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn set_base_url_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_url_content = input;
        self
    }
    /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
    pub fn base_url_content1(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url_content1 = Some(input.into());
        self
    }
    /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
    pub fn set_base_url_content1(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.base_url_content1 = input;
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url_manifest(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url_manifest = Some(input.into());
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn set_base_url_manifest(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.base_url_manifest = input;
        self
    }
    /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
    pub fn base_url_manifest1(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url_manifest1 = Some(input.into());
        self
    }
    /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
    pub fn set_base_url_manifest1(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.base_url_manifest1 = input;
        self
    }
    /// Appends an item to `caption_language_mappings`.
    ///
    /// To override the contents of this collection use [`set_caption_language_mappings`](Self::set_caption_language_mappings).
    ///
    /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
    pub fn caption_language_mappings(
        mut self,
        input: crate::types::CaptionLanguageMapping,
    ) -> Self {
        let mut v = self.caption_language_mappings.unwrap_or_default();
        v.push(input);
        self.caption_language_mappings = Some(v);
        self
    }
    /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
    pub fn set_caption_language_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CaptionLanguageMapping>>,
    ) -> Self {
        self.caption_language_mappings = input;
        self
    }
    /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn caption_language_setting(
        mut self,
        input: crate::types::HlsCaptionLanguageSetting,
    ) -> Self {
        self.caption_language_setting = Some(input);
        self
    }
    /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn set_caption_language_setting(
        mut self,
        input: std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    ) -> Self {
        self.caption_language_setting = input;
        self
    }
    /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
    pub fn client_cache(mut self, input: crate::types::HlsClientCache) -> Self {
        self.client_cache = Some(input);
        self
    }
    /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
    pub fn set_client_cache(
        mut self,
        input: std::option::Option<crate::types::HlsClientCache>,
    ) -> Self {
        self.client_cache = input;
        self
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn codec_specification(mut self, input: crate::types::HlsCodecSpecification) -> Self {
        self.codec_specification = Some(input);
        self
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn set_codec_specification(
        mut self,
        input: std::option::Option<crate::types::HlsCodecSpecification>,
    ) -> Self {
        self.codec_specification = input;
        self
    }
    /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
    pub fn constant_iv(mut self, input: impl Into<std::string::String>) -> Self {
        self.constant_iv = Some(input.into());
        self
    }
    /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
    pub fn set_constant_iv(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.constant_iv = input;
        self
    }
    /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = Some(input);
        self
    }
    /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::OutputLocationRef>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// Place segments in subdirectories.
    pub fn directory_structure(mut self, input: crate::types::HlsDirectoryStructure) -> Self {
        self.directory_structure = Some(input);
        self
    }
    /// Place segments in subdirectories.
    pub fn set_directory_structure(
        mut self,
        input: std::option::Option<crate::types::HlsDirectoryStructure>,
    ) -> Self {
        self.directory_structure = input;
        self
    }
    /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
    pub fn discontinuity_tags(mut self, input: crate::types::HlsDiscontinuityTags) -> Self {
        self.discontinuity_tags = Some(input);
        self
    }
    /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
    pub fn set_discontinuity_tags(
        mut self,
        input: std::option::Option<crate::types::HlsDiscontinuityTags>,
    ) -> Self {
        self.discontinuity_tags = input;
        self
    }
    /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
    pub fn encryption_type(mut self, input: crate::types::HlsEncryptionType) -> Self {
        self.encryption_type = Some(input);
        self
    }
    /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
    pub fn set_encryption_type(
        mut self,
        input: std::option::Option<crate::types::HlsEncryptionType>,
    ) -> Self {
        self.encryption_type = input;
        self
    }
    /// Parameters that control interactions with the CDN.
    pub fn hls_cdn_settings(mut self, input: crate::types::HlsCdnSettings) -> Self {
        self.hls_cdn_settings = Some(input);
        self
    }
    /// Parameters that control interactions with the CDN.
    pub fn set_hls_cdn_settings(
        mut self,
        input: std::option::Option<crate::types::HlsCdnSettings>,
    ) -> Self {
        self.hls_cdn_settings = input;
        self
    }
    /// State of HLS ID3 Segment Tagging
    pub fn hls_id3_segment_tagging(
        mut self,
        input: crate::types::HlsId3SegmentTaggingState,
    ) -> Self {
        self.hls_id3_segment_tagging = Some(input);
        self
    }
    /// State of HLS ID3 Segment Tagging
    pub fn set_hls_id3_segment_tagging(
        mut self,
        input: std::option::Option<crate::types::HlsId3SegmentTaggingState>,
    ) -> Self {
        self.hls_id3_segment_tagging = input;
        self
    }
    /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
    pub fn i_frame_only_playlists(mut self, input: crate::types::IFrameOnlyPlaylistType) -> Self {
        self.i_frame_only_playlists = Some(input);
        self
    }
    /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
    pub fn set_i_frame_only_playlists(
        mut self,
        input: std::option::Option<crate::types::IFrameOnlyPlaylistType>,
    ) -> Self {
        self.i_frame_only_playlists = input;
        self
    }
    /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
    pub fn incomplete_segment_behavior(
        mut self,
        input: crate::types::HlsIncompleteSegmentBehavior,
    ) -> Self {
        self.incomplete_segment_behavior = Some(input);
        self
    }
    /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
    pub fn set_incomplete_segment_behavior(
        mut self,
        input: std::option::Option<crate::types::HlsIncompleteSegmentBehavior>,
    ) -> Self {
        self.incomplete_segment_behavior = input;
        self
    }
    /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
    pub fn index_n_segments(mut self, input: i32) -> Self {
        self.index_n_segments = Some(input);
        self
    }
    /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
    pub fn set_index_n_segments(mut self, input: std::option::Option<i32>) -> Self {
        self.index_n_segments = input;
        self
    }
    /// Parameter that control output group behavior on input loss.
    pub fn input_loss_action(mut self, input: crate::types::InputLossActionForHlsOut) -> Self {
        self.input_loss_action = Some(input);
        self
    }
    /// Parameter that control output group behavior on input loss.
    pub fn set_input_loss_action(
        mut self,
        input: std::option::Option<crate::types::InputLossActionForHlsOut>,
    ) -> Self {
        self.input_loss_action = input;
        self
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
    pub fn iv_in_manifest(mut self, input: crate::types::HlsIvInManifest) -> Self {
        self.iv_in_manifest = Some(input);
        self
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
    pub fn set_iv_in_manifest(
        mut self,
        input: std::option::Option<crate::types::HlsIvInManifest>,
    ) -> Self {
        self.iv_in_manifest = input;
        self
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
    pub fn iv_source(mut self, input: crate::types::HlsIvSource) -> Self {
        self.iv_source = Some(input);
        self
    }
    /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
    pub fn set_iv_source(mut self, input: std::option::Option<crate::types::HlsIvSource>) -> Self {
        self.iv_source = input;
        self
    }
    /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
    pub fn keep_segments(mut self, input: i32) -> Self {
        self.keep_segments = Some(input);
        self
    }
    /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
    pub fn set_keep_segments(mut self, input: std::option::Option<i32>) -> Self {
        self.keep_segments = input;
        self
    }
    /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
    pub fn key_format(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_format = Some(input.into());
        self
    }
    /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
    pub fn set_key_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_format = input;
        self
    }
    /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    pub fn key_format_versions(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_format_versions = Some(input.into());
        self
    }
    /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
    pub fn set_key_format_versions(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.key_format_versions = input;
        self
    }
    /// The key provider settings.
    pub fn key_provider_settings(mut self, input: crate::types::KeyProviderSettings) -> Self {
        self.key_provider_settings = Some(input);
        self
    }
    /// The key provider settings.
    pub fn set_key_provider_settings(
        mut self,
        input: std::option::Option<crate::types::KeyProviderSettings>,
    ) -> Self {
        self.key_provider_settings = input;
        self
    }
    /// When set to gzip, compresses HLS playlist.
    pub fn manifest_compression(mut self, input: crate::types::HlsManifestCompression) -> Self {
        self.manifest_compression = Some(input);
        self
    }
    /// When set to gzip, compresses HLS playlist.
    pub fn set_manifest_compression(
        mut self,
        input: std::option::Option<crate::types::HlsManifestCompression>,
    ) -> Self {
        self.manifest_compression = input;
        self
    }
    /// Indicates whether the output manifest should use floating point or integer values for segment duration.
    pub fn manifest_duration_format(
        mut self,
        input: crate::types::HlsManifestDurationFormat,
    ) -> Self {
        self.manifest_duration_format = Some(input);
        self
    }
    /// Indicates whether the output manifest should use floating point or integer values for segment duration.
    pub fn set_manifest_duration_format(
        mut self,
        input: std::option::Option<crate::types::HlsManifestDurationFormat>,
    ) -> Self {
        self.manifest_duration_format = input;
        self
    }
    /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn min_segment_length(mut self, input: i32) -> Self {
        self.min_segment_length = Some(input);
        self
    }
    /// Minimum length of MPEG-2 Transport Stream segments in seconds. When set, minimum segment length is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn set_min_segment_length(mut self, input: std::option::Option<i32>) -> Self {
        self.min_segment_length = input;
        self
    }
    /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
    pub fn mode(mut self, input: crate::types::HlsMode) -> Self {
        self.mode = Some(input);
        self
    }
    /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
    pub fn set_mode(mut self, input: std::option::Option<crate::types::HlsMode>) -> Self {
        self.mode = input;
        self
    }
    /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
    pub fn output_selection(mut self, input: crate::types::HlsOutputSelection) -> Self {
        self.output_selection = Some(input);
        self
    }
    /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
    pub fn set_output_selection(
        mut self,
        input: std::option::Option<crate::types::HlsOutputSelection>,
    ) -> Self {
        self.output_selection = input;
        self
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
    pub fn program_date_time(mut self, input: crate::types::HlsProgramDateTime) -> Self {
        self.program_date_time = Some(input);
        self
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
    pub fn set_program_date_time(
        mut self,
        input: std::option::Option<crate::types::HlsProgramDateTime>,
    ) -> Self {
        self.program_date_time = input;
        self
    }
    /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
    pub fn program_date_time_clock(mut self, input: crate::types::HlsProgramDateTimeClock) -> Self {
        self.program_date_time_clock = Some(input);
        self
    }
    /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
    pub fn set_program_date_time_clock(
        mut self,
        input: std::option::Option<crate::types::HlsProgramDateTimeClock>,
    ) -> Self {
        self.program_date_time_clock = input;
        self
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn program_date_time_period(mut self, input: i32) -> Self {
        self.program_date_time_period = Some(input);
        self
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn set_program_date_time_period(mut self, input: std::option::Option<i32>) -> Self {
        self.program_date_time_period = input;
        self
    }
    /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
    pub fn redundant_manifest(mut self, input: crate::types::HlsRedundantManifest) -> Self {
        self.redundant_manifest = Some(input);
        self
    }
    /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
    pub fn set_redundant_manifest(
        mut self,
        input: std::option::Option<crate::types::HlsRedundantManifest>,
    ) -> Self {
        self.redundant_manifest = input;
        self
    }
    /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
    pub fn segment_length(mut self, input: i32) -> Self {
        self.segment_length = Some(input);
        self
    }
    /// Length of MPEG-2 Transport Stream segments to create in seconds. Note that segments will end on the next keyframe after this duration, so actual segment length may be longer.
    pub fn set_segment_length(mut self, input: std::option::Option<i32>) -> Self {
        self.segment_length = input;
        self
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn segmentation_mode(mut self, input: crate::types::HlsSegmentationMode) -> Self {
        self.segmentation_mode = Some(input);
        self
    }
    /// useInputSegmentation has been deprecated. The configured segment size is always used.
    pub fn set_segmentation_mode(
        mut self,
        input: std::option::Option<crate::types::HlsSegmentationMode>,
    ) -> Self {
        self.segmentation_mode = input;
        self
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
    pub fn segments_per_subdirectory(mut self, input: i32) -> Self {
        self.segments_per_subdirectory = Some(input);
        self
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
    pub fn set_segments_per_subdirectory(mut self, input: std::option::Option<i32>) -> Self {
        self.segments_per_subdirectory = input;
        self
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn stream_inf_resolution(mut self, input: crate::types::HlsStreamInfResolution) -> Self {
        self.stream_inf_resolution = Some(input);
        self
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn set_stream_inf_resolution(
        mut self,
        input: std::option::Option<crate::types::HlsStreamInfResolution>,
    ) -> Self {
        self.stream_inf_resolution = input;
        self
    }
    /// Indicates ID3 frame that has the timecode.
    pub fn timed_metadata_id3_frame(
        mut self,
        input: crate::types::HlsTimedMetadataId3Frame,
    ) -> Self {
        self.timed_metadata_id3_frame = Some(input);
        self
    }
    /// Indicates ID3 frame that has the timecode.
    pub fn set_timed_metadata_id3_frame(
        mut self,
        input: std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    ) -> Self {
        self.timed_metadata_id3_frame = input;
        self
    }
    /// Timed Metadata interval in seconds.
    pub fn timed_metadata_id3_period(mut self, input: i32) -> Self {
        self.timed_metadata_id3_period = Some(input);
        self
    }
    /// Timed Metadata interval in seconds.
    pub fn set_timed_metadata_id3_period(mut self, input: std::option::Option<i32>) -> Self {
        self.timed_metadata_id3_period = input;
        self
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn timestamp_delta_milliseconds(mut self, input: i32) -> Self {
        self.timestamp_delta_milliseconds = Some(input);
        self
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn set_timestamp_delta_milliseconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timestamp_delta_milliseconds = input;
        self
    }
    /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
    pub fn ts_file_mode(mut self, input: crate::types::HlsTsFileMode) -> Self {
        self.ts_file_mode = Some(input);
        self
    }
    /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
    pub fn set_ts_file_mode(
        mut self,
        input: std::option::Option<crate::types::HlsTsFileMode>,
    ) -> Self {
        self.ts_file_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsGroupSettings`](crate::types::HlsGroupSettings).
    pub fn build(self) -> crate::types::HlsGroupSettings {
        crate::types::HlsGroupSettings {
            ad_markers: self.ad_markers,
            base_url_content: self.base_url_content,
            base_url_content1: self.base_url_content1,
            base_url_manifest: self.base_url_manifest,
            base_url_manifest1: self.base_url_manifest1,
            caption_language_mappings: self.caption_language_mappings,
            caption_language_setting: self.caption_language_setting,
            client_cache: self.client_cache,
            codec_specification: self.codec_specification,
            constant_iv: self.constant_iv,
            destination: self.destination,
            directory_structure: self.directory_structure,
            discontinuity_tags: self.discontinuity_tags,
            encryption_type: self.encryption_type,
            hls_cdn_settings: self.hls_cdn_settings,
            hls_id3_segment_tagging: self.hls_id3_segment_tagging,
            i_frame_only_playlists: self.i_frame_only_playlists,
            incomplete_segment_behavior: self.incomplete_segment_behavior,
            index_n_segments: self.index_n_segments.unwrap_or_default(),
            input_loss_action: self.input_loss_action,
            iv_in_manifest: self.iv_in_manifest,
            iv_source: self.iv_source,
            keep_segments: self.keep_segments.unwrap_or_default(),
            key_format: self.key_format,
            key_format_versions: self.key_format_versions,
            key_provider_settings: self.key_provider_settings,
            manifest_compression: self.manifest_compression,
            manifest_duration_format: self.manifest_duration_format,
            min_segment_length: self.min_segment_length.unwrap_or_default(),
            mode: self.mode,
            output_selection: self.output_selection,
            program_date_time: self.program_date_time,
            program_date_time_clock: self.program_date_time_clock,
            program_date_time_period: self.program_date_time_period.unwrap_or_default(),
            redundant_manifest: self.redundant_manifest,
            segment_length: self.segment_length.unwrap_or_default(),
            segmentation_mode: self.segmentation_mode,
            segments_per_subdirectory: self.segments_per_subdirectory.unwrap_or_default(),
            stream_inf_resolution: self.stream_inf_resolution,
            timed_metadata_id3_frame: self.timed_metadata_id3_frame,
            timed_metadata_id3_period: self.timed_metadata_id3_period.unwrap_or_default(),
            timestamp_delta_milliseconds: self.timestamp_delta_milliseconds.unwrap_or_default(),
            ts_file_mode: self.ts_file_mode,
        }
    }
}
