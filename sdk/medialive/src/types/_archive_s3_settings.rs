// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Archive S3 Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArchiveS3Settings {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    #[doc(hidden)]
    pub canned_acl: std::option::Option<crate::types::S3CannedAcl>,
}
impl ArchiveS3Settings {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    pub fn canned_acl(&self) -> std::option::Option<&crate::types::S3CannedAcl> {
        self.canned_acl.as_ref()
    }
}
impl ArchiveS3Settings {
    /// Creates a new builder-style object to manufacture [`ArchiveS3Settings`](crate::types::ArchiveS3Settings).
    pub fn builder() -> crate::types::builders::ArchiveS3SettingsBuilder {
        crate::types::builders::ArchiveS3SettingsBuilder::default()
    }
}

/// A builder for [`ArchiveS3Settings`](crate::types::ArchiveS3Settings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArchiveS3SettingsBuilder {
    pub(crate) canned_acl: std::option::Option<crate::types::S3CannedAcl>,
}
impl ArchiveS3SettingsBuilder {
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    pub fn canned_acl(mut self, input: crate::types::S3CannedAcl) -> Self {
        self.canned_acl = Some(input);
        self
    }
    /// Specify the canned ACL to apply to each S3 request. Defaults to none.
    pub fn set_canned_acl(mut self, input: std::option::Option<crate::types::S3CannedAcl>) -> Self {
        self.canned_acl = input;
        self
    }
    /// Consumes the builder and constructs a [`ArchiveS3Settings`](crate::types::ArchiveS3Settings).
    pub fn build(self) -> crate::types::ArchiveS3Settings {
        crate::types::ArchiveS3Settings {
            canned_acl: self.canned_acl,
        }
    }
}
