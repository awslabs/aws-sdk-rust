// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Remix Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemixSettings {
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub channel_mappings: ::std::option::Option<::std::vec::Vec<crate::types::AudioChannelMapping>>,
    /// Number of input channels to be used.
    pub channels_in: ::std::option::Option<i32>,
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub channels_out: ::std::option::Option<i32>,
}
impl RemixSettings {
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channel_mappings.is_none()`.
    pub fn channel_mappings(&self) -> &[crate::types::AudioChannelMapping] {
        self.channel_mappings.as_deref().unwrap_or_default()
    }
    /// Number of input channels to be used.
    pub fn channels_in(&self) -> ::std::option::Option<i32> {
        self.channels_in
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn channels_out(&self) -> ::std::option::Option<i32> {
        self.channels_out
    }
}
impl RemixSettings {
    /// Creates a new builder-style object to manufacture [`RemixSettings`](crate::types::RemixSettings).
    pub fn builder() -> crate::types::builders::RemixSettingsBuilder {
        crate::types::builders::RemixSettingsBuilder::default()
    }
}

/// A builder for [`RemixSettings`](crate::types::RemixSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RemixSettingsBuilder {
    pub(crate) channel_mappings: ::std::option::Option<::std::vec::Vec<crate::types::AudioChannelMapping>>,
    pub(crate) channels_in: ::std::option::Option<i32>,
    pub(crate) channels_out: ::std::option::Option<i32>,
}
impl RemixSettingsBuilder {
    /// Appends an item to `channel_mappings`.
    ///
    /// To override the contents of this collection use [`set_channel_mappings`](Self::set_channel_mappings).
    ///
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn channel_mappings(mut self, input: crate::types::AudioChannelMapping) -> Self {
        let mut v = self.channel_mappings.unwrap_or_default();
        v.push(input);
        self.channel_mappings = ::std::option::Option::Some(v);
        self
    }
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn set_channel_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AudioChannelMapping>>) -> Self {
        self.channel_mappings = input;
        self
    }
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn get_channel_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AudioChannelMapping>> {
        &self.channel_mappings
    }
    /// Number of input channels to be used.
    pub fn channels_in(mut self, input: i32) -> Self {
        self.channels_in = ::std::option::Option::Some(input);
        self
    }
    /// Number of input channels to be used.
    pub fn set_channels_in(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels_in = input;
        self
    }
    /// Number of input channels to be used.
    pub fn get_channels_in(&self) -> &::std::option::Option<i32> {
        &self.channels_in
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn channels_out(mut self, input: i32) -> Self {
        self.channels_out = ::std::option::Option::Some(input);
        self
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn set_channels_out(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels_out = input;
        self
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn get_channels_out(&self) -> &::std::option::Option<i32> {
        &self.channels_out
    }
    /// Consumes the builder and constructs a [`RemixSettings`](crate::types::RemixSettings).
    pub fn build(self) -> crate::types::RemixSettings {
        crate::types::RemixSettings {
            channel_mappings: self.channel_mappings,
            channels_in: self.channels_in,
            channels_out: self.channels_out,
        }
    }
}
