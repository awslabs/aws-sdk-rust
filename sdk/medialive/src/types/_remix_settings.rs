// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Remix Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RemixSettings {
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    #[doc(hidden)]
    pub channel_mappings: std::option::Option<std::vec::Vec<crate::types::AudioChannelMapping>>,
    /// Number of input channels to be used.
    #[doc(hidden)]
    pub channels_in: i32,
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    #[doc(hidden)]
    pub channels_out: i32,
}
impl RemixSettings {
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn channel_mappings(&self) -> std::option::Option<&[crate::types::AudioChannelMapping]> {
        self.channel_mappings.as_deref()
    }
    /// Number of input channels to be used.
    pub fn channels_in(&self) -> i32 {
        self.channels_in
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn channels_out(&self) -> i32 {
        self.channels_out
    }
}
impl RemixSettings {
    /// Creates a new builder-style object to manufacture [`RemixSettings`](crate::types::RemixSettings).
    pub fn builder() -> crate::types::builders::RemixSettingsBuilder {
        crate::types::builders::RemixSettingsBuilder::default()
    }
}

/// A builder for [`RemixSettings`](crate::types::RemixSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RemixSettingsBuilder {
    pub(crate) channel_mappings:
        std::option::Option<std::vec::Vec<crate::types::AudioChannelMapping>>,
    pub(crate) channels_in: std::option::Option<i32>,
    pub(crate) channels_out: std::option::Option<i32>,
}
impl RemixSettingsBuilder {
    /// Appends an item to `channel_mappings`.
    ///
    /// To override the contents of this collection use [`set_channel_mappings`](Self::set_channel_mappings).
    ///
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn channel_mappings(mut self, input: crate::types::AudioChannelMapping) -> Self {
        let mut v = self.channel_mappings.unwrap_or_default();
        v.push(input);
        self.channel_mappings = Some(v);
        self
    }
    /// Mapping of input channels to output channels, with appropriate gain adjustments.
    pub fn set_channel_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AudioChannelMapping>>,
    ) -> Self {
        self.channel_mappings = input;
        self
    }
    /// Number of input channels to be used.
    pub fn channels_in(mut self, input: i32) -> Self {
        self.channels_in = Some(input);
        self
    }
    /// Number of input channels to be used.
    pub fn set_channels_in(mut self, input: std::option::Option<i32>) -> Self {
        self.channels_in = input;
        self
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn channels_out(mut self, input: i32) -> Self {
        self.channels_out = Some(input);
        self
    }
    /// Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
    pub fn set_channels_out(mut self, input: std::option::Option<i32>) -> Self {
        self.channels_out = input;
        self
    }
    /// Consumes the builder and constructs a [`RemixSettings`](crate::types::RemixSettings).
    pub fn build(self) -> crate::types::RemixSettings {
        crate::types::RemixSettings {
            channel_mappings: self.channel_mappings,
            channels_in: self.channels_in.unwrap_or_default(),
            channels_out: self.channels_out.unwrap_or_default(),
        }
    }
}
