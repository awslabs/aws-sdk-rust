// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in ClusterNetworkSettings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InterfaceMapping {
    /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
    pub logical_interface_name: ::std::option::Option<::std::string::String>,
    /// The ID of the network that you want to connect to the specified logicalInterfaceName.
    pub network_id: ::std::option::Option<::std::string::String>,
}
impl InterfaceMapping {
    /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
    pub fn logical_interface_name(&self) -> ::std::option::Option<&str> {
        self.logical_interface_name.as_deref()
    }
    /// The ID of the network that you want to connect to the specified logicalInterfaceName.
    pub fn network_id(&self) -> ::std::option::Option<&str> {
        self.network_id.as_deref()
    }
}
impl InterfaceMapping {
    /// Creates a new builder-style object to manufacture [`InterfaceMapping`](crate::types::InterfaceMapping).
    pub fn builder() -> crate::types::builders::InterfaceMappingBuilder {
        crate::types::builders::InterfaceMappingBuilder::default()
    }
}

/// A builder for [`InterfaceMapping`](crate::types::InterfaceMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InterfaceMappingBuilder {
    pub(crate) logical_interface_name: ::std::option::Option<::std::string::String>,
    pub(crate) network_id: ::std::option::Option<::std::string::String>,
}
impl InterfaceMappingBuilder {
    /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
    pub fn logical_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logical_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
    pub fn set_logical_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logical_interface_name = input;
        self
    }
    /// The logical name for one interface (on every Node) that handles a specific type of traffic. We recommend that the name hints at the physical interface it applies to. For example, it could refer to the traffic that the physical interface handles. For example, my-Inputs-Interface.
    pub fn get_logical_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.logical_interface_name
    }
    /// The ID of the network that you want to connect to the specified logicalInterfaceName.
    pub fn network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the network that you want to connect to the specified logicalInterfaceName.
    pub fn set_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// The ID of the network that you want to connect to the specified logicalInterfaceName.
    pub fn get_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_id
    }
    /// Consumes the builder and constructs a [`InterfaceMapping`](crate::types::InterfaceMapping).
    pub fn build(self) -> crate::types::InterfaceMapping {
        crate::types::InterfaceMapping {
            logical_interface_name: self.logical_interface_name,
            network_id: self.network_id,
        }
    }
}
