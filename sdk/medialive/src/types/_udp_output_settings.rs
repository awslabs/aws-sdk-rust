// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Udp Output Settings
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UdpOutputSettings {
    /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
    #[doc(hidden)]
    pub buffer_msec: i32,
    /// Udp Container Settings
    #[doc(hidden)]
    pub container_settings: std::option::Option<crate::types::UdpContainerSettings>,
    /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::OutputLocationRef>,
    /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
    #[doc(hidden)]
    pub fec_output_settings: std::option::Option<crate::types::FecOutputSettings>,
}
impl UdpOutputSettings {
    /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
    pub fn buffer_msec(&self) -> i32 {
        self.buffer_msec
    }
    /// Udp Container Settings
    pub fn container_settings(&self) -> std::option::Option<&crate::types::UdpContainerSettings> {
        self.container_settings.as_ref()
    }
    /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
    pub fn destination(&self) -> std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
    pub fn fec_output_settings(&self) -> std::option::Option<&crate::types::FecOutputSettings> {
        self.fec_output_settings.as_ref()
    }
}
impl UdpOutputSettings {
    /// Creates a new builder-style object to manufacture [`UdpOutputSettings`](crate::types::UdpOutputSettings).
    pub fn builder() -> crate::types::builders::UdpOutputSettingsBuilder {
        crate::types::builders::UdpOutputSettingsBuilder::default()
    }
}

/// A builder for [`UdpOutputSettings`](crate::types::UdpOutputSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UdpOutputSettingsBuilder {
    pub(crate) buffer_msec: std::option::Option<i32>,
    pub(crate) container_settings: std::option::Option<crate::types::UdpContainerSettings>,
    pub(crate) destination: std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) fec_output_settings: std::option::Option<crate::types::FecOutputSettings>,
}
impl UdpOutputSettingsBuilder {
    /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
    pub fn buffer_msec(mut self, input: i32) -> Self {
        self.buffer_msec = Some(input);
        self
    }
    /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
    pub fn set_buffer_msec(mut self, input: std::option::Option<i32>) -> Self {
        self.buffer_msec = input;
        self
    }
    /// Udp Container Settings
    pub fn container_settings(mut self, input: crate::types::UdpContainerSettings) -> Self {
        self.container_settings = Some(input);
        self
    }
    /// Udp Container Settings
    pub fn set_container_settings(
        mut self,
        input: std::option::Option<crate::types::UdpContainerSettings>,
    ) -> Self {
        self.container_settings = input;
        self
    }
    /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = Some(input);
        self
    }
    /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::OutputLocationRef>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
    pub fn fec_output_settings(mut self, input: crate::types::FecOutputSettings) -> Self {
        self.fec_output_settings = Some(input);
        self
    }
    /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
    pub fn set_fec_output_settings(
        mut self,
        input: std::option::Option<crate::types::FecOutputSettings>,
    ) -> Self {
        self.fec_output_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`UdpOutputSettings`](crate::types::UdpOutputSettings).
    pub fn build(self) -> crate::types::UdpOutputSettings {
        crate::types::UdpOutputSettings {
            buffer_msec: self.buffer_msec.unwrap_or_default(),
            container_settings: self.container_settings,
            destination: self.destination,
            fec_output_settings: self.fec_output_settings,
        }
    }
}
