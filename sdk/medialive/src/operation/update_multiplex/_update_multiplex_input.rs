// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to update a multiplex.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMultiplexInput {
    /// ID of the multiplex to update.
    pub multiplex_id: ::std::option::Option<::std::string::String>,
    /// The new settings for a multiplex.
    pub multiplex_settings: ::std::option::Option<crate::types::MultiplexSettings>,
    /// Name of the multiplex.
    pub name: ::std::option::Option<::std::string::String>,
}
impl UpdateMultiplexInput {
    /// ID of the multiplex to update.
    pub fn multiplex_id(&self) -> ::std::option::Option<&str> {
        self.multiplex_id.as_deref()
    }
    /// The new settings for a multiplex.
    pub fn multiplex_settings(&self) -> ::std::option::Option<&crate::types::MultiplexSettings> {
        self.multiplex_settings.as_ref()
    }
    /// Name of the multiplex.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl UpdateMultiplexInput {
    /// Creates a new builder-style object to manufacture [`UpdateMultiplexInput`](crate::operation::update_multiplex::UpdateMultiplexInput).
    pub fn builder() -> crate::operation::update_multiplex::builders::UpdateMultiplexInputBuilder {
        crate::operation::update_multiplex::builders::UpdateMultiplexInputBuilder::default()
    }
}

/// A builder for [`UpdateMultiplexInput`](crate::operation::update_multiplex::UpdateMultiplexInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMultiplexInputBuilder {
    pub(crate) multiplex_id: ::std::option::Option<::std::string::String>,
    pub(crate) multiplex_settings: ::std::option::Option<crate::types::MultiplexSettings>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl UpdateMultiplexInputBuilder {
    /// ID of the multiplex to update.
    /// This field is required.
    pub fn multiplex_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multiplex_id = ::std::option::Option::Some(input.into());
        self
    }
    /// ID of the multiplex to update.
    pub fn set_multiplex_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multiplex_id = input;
        self
    }
    /// ID of the multiplex to update.
    pub fn get_multiplex_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.multiplex_id
    }
    /// The new settings for a multiplex.
    pub fn multiplex_settings(mut self, input: crate::types::MultiplexSettings) -> Self {
        self.multiplex_settings = ::std::option::Option::Some(input);
        self
    }
    /// The new settings for a multiplex.
    pub fn set_multiplex_settings(mut self, input: ::std::option::Option<crate::types::MultiplexSettings>) -> Self {
        self.multiplex_settings = input;
        self
    }
    /// The new settings for a multiplex.
    pub fn get_multiplex_settings(&self) -> &::std::option::Option<crate::types::MultiplexSettings> {
        &self.multiplex_settings
    }
    /// Name of the multiplex.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the multiplex.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Name of the multiplex.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`UpdateMultiplexInput`](crate::operation::update_multiplex::UpdateMultiplexInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_multiplex::UpdateMultiplexInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_multiplex::UpdateMultiplexInput {
            multiplex_id: self.multiplex_id,
            multiplex_settings: self.multiplex_settings,
            name: self.name,
        })
    }
}
