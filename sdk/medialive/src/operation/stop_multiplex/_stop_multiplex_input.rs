// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for StopMultiplexRequest
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopMultiplexInput {
    /// The ID of the multiplex.
    pub multiplex_id: ::std::option::Option<::std::string::String>,
}
impl StopMultiplexInput {
    /// The ID of the multiplex.
    pub fn multiplex_id(&self) -> ::std::option::Option<&str> {
        self.multiplex_id.as_deref()
    }
}
impl StopMultiplexInput {
    /// Creates a new builder-style object to manufacture [`StopMultiplexInput`](crate::operation::stop_multiplex::StopMultiplexInput).
    pub fn builder() -> crate::operation::stop_multiplex::builders::StopMultiplexInputBuilder {
        crate::operation::stop_multiplex::builders::StopMultiplexInputBuilder::default()
    }
}

/// A builder for [`StopMultiplexInput`](crate::operation::stop_multiplex::StopMultiplexInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopMultiplexInputBuilder {
    pub(crate) multiplex_id: ::std::option::Option<::std::string::String>,
}
impl StopMultiplexInputBuilder {
    /// The ID of the multiplex.
    /// This field is required.
    pub fn multiplex_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multiplex_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the multiplex.
    pub fn set_multiplex_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multiplex_id = input;
        self
    }
    /// The ID of the multiplex.
    pub fn get_multiplex_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.multiplex_id
    }
    /// Consumes the builder and constructs a [`StopMultiplexInput`](crate::operation::stop_multiplex::StopMultiplexInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::stop_multiplex::StopMultiplexInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::stop_multiplex::StopMultiplexInput {
            multiplex_id: self.multiplex_id,
        })
    }
}
