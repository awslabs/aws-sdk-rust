// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for ListMultiplexProgramsResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMultiplexProgramsOutput {
    /// List of multiplex programs.
    #[doc(hidden)]
    pub multiplex_programs:
        std::option::Option<std::vec::Vec<crate::types::MultiplexProgramSummary>>,
    /// Token for the next ListMultiplexProgram request.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMultiplexProgramsOutput {
    /// List of multiplex programs.
    pub fn multiplex_programs(
        &self,
    ) -> std::option::Option<&[crate::types::MultiplexProgramSummary]> {
        self.multiplex_programs.as_deref()
    }
    /// Token for the next ListMultiplexProgram request.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMultiplexProgramsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMultiplexProgramsOutput {
    /// Creates a new builder-style object to manufacture [`ListMultiplexProgramsOutput`](crate::operation::list_multiplex_programs::ListMultiplexProgramsOutput).
    pub fn builder(
    ) -> crate::operation::list_multiplex_programs::builders::ListMultiplexProgramsOutputBuilder
    {
        crate::operation::list_multiplex_programs::builders::ListMultiplexProgramsOutputBuilder::default()
    }
}

/// A builder for [`ListMultiplexProgramsOutput`](crate::operation::list_multiplex_programs::ListMultiplexProgramsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMultiplexProgramsOutputBuilder {
    pub(crate) multiplex_programs:
        std::option::Option<std::vec::Vec<crate::types::MultiplexProgramSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMultiplexProgramsOutputBuilder {
    /// Appends an item to `multiplex_programs`.
    ///
    /// To override the contents of this collection use [`set_multiplex_programs`](Self::set_multiplex_programs).
    ///
    /// List of multiplex programs.
    pub fn multiplex_programs(mut self, input: crate::types::MultiplexProgramSummary) -> Self {
        let mut v = self.multiplex_programs.unwrap_or_default();
        v.push(input);
        self.multiplex_programs = Some(v);
        self
    }
    /// List of multiplex programs.
    pub fn set_multiplex_programs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MultiplexProgramSummary>>,
    ) -> Self {
        self.multiplex_programs = input;
        self
    }
    /// Token for the next ListMultiplexProgram request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// Token for the next ListMultiplexProgram request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMultiplexProgramsOutput`](crate::operation::list_multiplex_programs::ListMultiplexProgramsOutput).
    pub fn build(self) -> crate::operation::list_multiplex_programs::ListMultiplexProgramsOutput {
        crate::operation::list_multiplex_programs::ListMultiplexProgramsOutput {
            multiplex_programs: self.multiplex_programs,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
