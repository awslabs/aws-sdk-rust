// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to update an input device.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInputDeviceInput {
    /// The settings that you want to apply to the HD input device.
    #[doc(hidden)]
    pub hd_device_settings: std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    #[doc(hidden)]
    pub input_device_id: std::option::Option<std::string::String>,
    /// The name that you assigned to this input device (not the unique ID).
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// The settings that you want to apply to the UHD input device.
    #[doc(hidden)]
    pub uhd_device_settings: std::option::Option<crate::types::InputDeviceConfigurableSettings>,
}
impl UpdateInputDeviceInput {
    /// The settings that you want to apply to the HD input device.
    pub fn hd_device_settings(
        &self,
    ) -> std::option::Option<&crate::types::InputDeviceConfigurableSettings> {
        self.hd_device_settings.as_ref()
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn input_device_id(&self) -> std::option::Option<&str> {
        self.input_device_id.as_deref()
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn uhd_device_settings(
        &self,
    ) -> std::option::Option<&crate::types::InputDeviceConfigurableSettings> {
        self.uhd_device_settings.as_ref()
    }
}
impl UpdateInputDeviceInput {
    /// Creates a new builder-style object to manufacture [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
    pub fn builder(
    ) -> crate::operation::update_input_device::builders::UpdateInputDeviceInputBuilder {
        crate::operation::update_input_device::builders::UpdateInputDeviceInputBuilder::default()
    }
}

/// A builder for [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInputDeviceInputBuilder {
    pub(crate) hd_device_settings:
        std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    pub(crate) input_device_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) uhd_device_settings:
        std::option::Option<crate::types::InputDeviceConfigurableSettings>,
}
impl UpdateInputDeviceInputBuilder {
    /// The settings that you want to apply to the HD input device.
    pub fn hd_device_settings(
        mut self,
        input: crate::types::InputDeviceConfigurableSettings,
    ) -> Self {
        self.hd_device_settings = Some(input);
        self
    }
    /// The settings that you want to apply to the HD input device.
    pub fn set_hd_device_settings(
        mut self,
        input: std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    ) -> Self {
        self.hd_device_settings = input;
        self
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn input_device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_device_id = Some(input.into());
        self
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn set_input_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_device_id = input;
        self
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn uhd_device_settings(
        mut self,
        input: crate::types::InputDeviceConfigurableSettings,
    ) -> Self {
        self.uhd_device_settings = Some(input);
        self
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn set_uhd_device_settings(
        mut self,
        input: std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    ) -> Self {
        self.uhd_device_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_input_device::UpdateInputDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_input_device::UpdateInputDeviceInput {
                hd_device_settings: self.hd_device_settings,
                input_device_id: self.input_device_id,
                name: self.name,
                uhd_device_settings: self.uhd_device_settings,
            },
        )
    }
}
