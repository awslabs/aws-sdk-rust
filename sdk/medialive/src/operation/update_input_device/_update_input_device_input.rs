// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to update an input device.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateInputDeviceInput {
    /// The settings that you want to apply to the HD input device.
    pub hd_device_settings: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub input_device_id: ::std::option::Option<::std::string::String>,
    /// The name that you assigned to this input device (not the unique ID).
    pub name: ::std::option::Option<::std::string::String>,
    /// The settings that you want to apply to the UHD input device.
    pub uhd_device_settings: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    /// The Availability Zone you want associated with this input device.
    pub availability_zone: ::std::option::Option<::std::string::String>,
}
impl UpdateInputDeviceInput {
    /// The settings that you want to apply to the HD input device.
    pub fn hd_device_settings(&self) -> ::std::option::Option<&crate::types::InputDeviceConfigurableSettings> {
        self.hd_device_settings.as_ref()
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn input_device_id(&self) -> ::std::option::Option<&str> {
        self.input_device_id.as_deref()
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn uhd_device_settings(&self) -> ::std::option::Option<&crate::types::InputDeviceConfigurableSettings> {
        self.uhd_device_settings.as_ref()
    }
    /// The Availability Zone you want associated with this input device.
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
}
impl UpdateInputDeviceInput {
    /// Creates a new builder-style object to manufacture [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
    pub fn builder() -> crate::operation::update_input_device::builders::UpdateInputDeviceInputBuilder {
        crate::operation::update_input_device::builders::UpdateInputDeviceInputBuilder::default()
    }
}

/// A builder for [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateInputDeviceInputBuilder {
    pub(crate) hd_device_settings: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    pub(crate) input_device_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) uhd_device_settings: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
}
impl UpdateInputDeviceInputBuilder {
    /// The settings that you want to apply to the HD input device.
    pub fn hd_device_settings(mut self, input: crate::types::InputDeviceConfigurableSettings) -> Self {
        self.hd_device_settings = ::std::option::Option::Some(input);
        self
    }
    /// The settings that you want to apply to the HD input device.
    pub fn set_hd_device_settings(mut self, input: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>) -> Self {
        self.hd_device_settings = input;
        self
    }
    /// The settings that you want to apply to the HD input device.
    pub fn get_hd_device_settings(&self) -> &::std::option::Option<crate::types::InputDeviceConfigurableSettings> {
        &self.hd_device_settings
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    /// This field is required.
    pub fn input_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn set_input_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_device_id = input;
        self
    }
    /// The unique ID of the input device. For example, hd-123456789abcdef.
    pub fn get_input_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_device_id
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name that you assigned to this input device (not the unique ID).
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn uhd_device_settings(mut self, input: crate::types::InputDeviceConfigurableSettings) -> Self {
        self.uhd_device_settings = ::std::option::Option::Some(input);
        self
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn set_uhd_device_settings(mut self, input: ::std::option::Option<crate::types::InputDeviceConfigurableSettings>) -> Self {
        self.uhd_device_settings = input;
        self
    }
    /// The settings that you want to apply to the UHD input device.
    pub fn get_uhd_device_settings(&self) -> &::std::option::Option<crate::types::InputDeviceConfigurableSettings> {
        &self.uhd_device_settings
    }
    /// The Availability Zone you want associated with this input device.
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// The Availability Zone you want associated with this input device.
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// The Availability Zone you want associated with this input device.
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// Consumes the builder and constructs a [`UpdateInputDeviceInput`](crate::operation::update_input_device::UpdateInputDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_input_device::UpdateInputDeviceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_input_device::UpdateInputDeviceInput {
            hd_device_settings: self.hd_device_settings,
            input_device_id: self.input_device_id,
            name: self.name,
            uhd_device_settings: self.uhd_device_settings,
            availability_zone: self.availability_zone,
        })
    }
}
