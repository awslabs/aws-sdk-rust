// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DeleteMultiplexRequest
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMultiplexInput {
    /// The ID of the multiplex.
    #[doc(hidden)]
    pub multiplex_id: std::option::Option<std::string::String>,
}
impl DeleteMultiplexInput {
    /// The ID of the multiplex.
    pub fn multiplex_id(&self) -> std::option::Option<&str> {
        self.multiplex_id.as_deref()
    }
}
impl DeleteMultiplexInput {
    /// Creates a new builder-style object to manufacture [`DeleteMultiplexInput`](crate::operation::delete_multiplex::DeleteMultiplexInput).
    pub fn builder() -> crate::operation::delete_multiplex::builders::DeleteMultiplexInputBuilder {
        crate::operation::delete_multiplex::builders::DeleteMultiplexInputBuilder::default()
    }
}

/// A builder for [`DeleteMultiplexInput`](crate::operation::delete_multiplex::DeleteMultiplexInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteMultiplexInputBuilder {
    pub(crate) multiplex_id: std::option::Option<std::string::String>,
}
impl DeleteMultiplexInputBuilder {
    /// The ID of the multiplex.
    pub fn multiplex_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.multiplex_id = Some(input.into());
        self
    }
    /// The ID of the multiplex.
    pub fn set_multiplex_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.multiplex_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteMultiplexInput`](crate::operation::delete_multiplex::DeleteMultiplexInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_multiplex::DeleteMultiplexInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_multiplex::DeleteMultiplexInput {
            multiplex_id: self.multiplex_id,
        })
    }
}
