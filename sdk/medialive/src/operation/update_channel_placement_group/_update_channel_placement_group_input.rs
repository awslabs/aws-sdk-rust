// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to update the channel placement group
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateChannelPlacementGroupInput {
    /// The ID of the channel placement group.
    pub channel_placement_group_id: ::std::option::Option<::std::string::String>,
    /// The ID of the cluster.
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    pub name: ::std::option::Option<::std::string::String>,
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    pub nodes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateChannelPlacementGroupInput {
    /// The ID of the channel placement group.
    pub fn channel_placement_group_id(&self) -> ::std::option::Option<&str> {
        self.channel_placement_group_id.as_deref()
    }
    /// The ID of the cluster.
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nodes.is_none()`.
    pub fn nodes(&self) -> &[::std::string::String] {
        self.nodes.as_deref().unwrap_or_default()
    }
}
impl UpdateChannelPlacementGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelPlacementGroupInput`](crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupInput).
    pub fn builder() -> crate::operation::update_channel_placement_group::builders::UpdateChannelPlacementGroupInputBuilder {
        crate::operation::update_channel_placement_group::builders::UpdateChannelPlacementGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateChannelPlacementGroupInput`](crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateChannelPlacementGroupInputBuilder {
    pub(crate) channel_placement_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) nodes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateChannelPlacementGroupInputBuilder {
    /// The ID of the channel placement group.
    /// This field is required.
    pub fn channel_placement_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_placement_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the channel placement group.
    pub fn set_channel_placement_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_placement_group_id = input;
        self
    }
    /// The ID of the channel placement group.
    pub fn get_channel_placement_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_placement_group_id
    }
    /// The ID of the cluster.
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the cluster.
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// The ID of the cluster.
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Include this parameter only if you want to change the current name of the ChannelPlacementGroup. Specify a name that is unique in the Cluster. You can't change the name. Names are case-sensitive.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `nodes`.
    ///
    /// To override the contents of this collection use [`set_nodes`](Self::set_nodes).
    ///
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    pub fn nodes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.nodes.unwrap_or_default();
        v.push(input.into());
        self.nodes = ::std::option::Option::Some(v);
        self
    }
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    pub fn set_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.nodes = input;
        self
    }
    /// Include this parameter only if you want to change the list of Nodes that are associated with the ChannelPlacementGroup.
    pub fn get_nodes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.nodes
    }
    /// Consumes the builder and constructs a [`UpdateChannelPlacementGroupInput`](crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupInput {
            channel_placement_group_id: self.channel_placement_group_id,
            cluster_id: self.cluster_id,
            name: self.name,
            nodes: self.nodes,
        })
    }
}
