// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_update_signal_map::_start_update_signal_map_output::StartUpdateSignalMapOutputBuilder;

pub use crate::operation::start_update_signal_map::_start_update_signal_map_input::StartUpdateSignalMapInputBuilder;

impl crate::operation::start_update_signal_map::builders::StartUpdateSignalMapInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_update_signal_map::StartUpdateSignalMapOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_update_signal_map::StartUpdateSignalMapError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_update_signal_map();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartUpdateSignalMap`.
///
/// Initiates an update for the specified signal map. Will discover a new signal map if a changed discoveryEntryPointArn is provided.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartUpdateSignalMapFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_update_signal_map::builders::StartUpdateSignalMapInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_update_signal_map::StartUpdateSignalMapOutput,
        crate::operation::start_update_signal_map::StartUpdateSignalMapError,
    > for StartUpdateSignalMapFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_update_signal_map::StartUpdateSignalMapOutput,
            crate::operation::start_update_signal_map::StartUpdateSignalMapError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartUpdateSignalMapFluentBuilder {
    /// Creates a new `StartUpdateSignalMap`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartUpdateSignalMap as a reference.
    pub fn as_input(&self) -> &crate::operation::start_update_signal_map::builders::StartUpdateSignalMapInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_update_signal_map::StartUpdateSignalMapOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_update_signal_map::StartUpdateSignalMapError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_update_signal_map::StartUpdateSignalMap::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_update_signal_map::StartUpdateSignalMap::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_update_signal_map::StartUpdateSignalMapOutput,
        crate::operation::start_update_signal_map::StartUpdateSignalMapError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `CloudWatchAlarmTemplateGroupIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_alarm_template_group_identifiers`](Self::set_cloud_watch_alarm_template_group_identifiers).
    ///
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn cloud_watch_alarm_template_group_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cloud_watch_alarm_template_group_identifiers(input.into());
        self
    }
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn set_cloud_watch_alarm_template_group_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_cloud_watch_alarm_template_group_identifiers(input);
        self
    }
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn get_cloud_watch_alarm_template_group_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_cloud_watch_alarm_template_group_identifiers()
    }
    /// A resource's optional description.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A resource's optional description.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// A resource's optional description.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn discovery_entry_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.discovery_entry_point_arn(input.into());
        self
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn set_discovery_entry_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_discovery_entry_point_arn(input);
        self
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn get_discovery_entry_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_discovery_entry_point_arn()
    }
    ///
    /// Appends an item to `EventBridgeRuleTemplateGroupIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_event_bridge_rule_template_group_identifiers`](Self::set_event_bridge_rule_template_group_identifiers).
    ///
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn event_bridge_rule_template_group_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.event_bridge_rule_template_group_identifiers(input.into());
        self
    }
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn set_event_bridge_rule_template_group_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_event_bridge_rule_template_group_identifiers(input);
        self
    }
    /// Placeholder documentation for __listOf__stringPatternS
    pub fn get_event_bridge_rule_template_group_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_event_bridge_rule_template_group_identifiers()
    }
    /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
    pub fn force_rediscovery(mut self, input: bool) -> Self {
        self.inner = self.inner.force_rediscovery(input);
        self
    }
    /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
    pub fn set_force_rediscovery(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_rediscovery(input);
        self
    }
    /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
    pub fn get_force_rediscovery(&self) -> &::std::option::Option<bool> {
        self.inner.get_force_rediscovery()
    }
    /// A signal map's identifier. Can be either be its id or current name.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// A signal map's identifier. Can be either be its id or current name.
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// A signal map's identifier. Can be either be its id or current name.
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_identifier()
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
}
