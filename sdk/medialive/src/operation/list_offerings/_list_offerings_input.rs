// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for ListOfferingsRequest
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOfferingsInput {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    #[doc(hidden)]
    pub channel_class: std::option::Option<std::string::String>,
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    #[doc(hidden)]
    pub channel_configuration: std::option::Option<std::string::String>,
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    #[doc(hidden)]
    pub codec: std::option::Option<std::string::String>,
    /// Filter by offering duration, e.g. '12'
    #[doc(hidden)]
    pub duration: std::option::Option<std::string::String>,
    /// Placeholder documentation for MaxResults
    #[doc(hidden)]
    pub max_results: i32,
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    #[doc(hidden)]
    pub maximum_bitrate: std::option::Option<std::string::String>,
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    #[doc(hidden)]
    pub maximum_framerate: std::option::Option<std::string::String>,
    /// Placeholder documentation for __string
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    #[doc(hidden)]
    pub resolution: std::option::Option<std::string::String>,
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    #[doc(hidden)]
    pub special_feature: std::option::Option<std::string::String>,
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    #[doc(hidden)]
    pub video_quality: std::option::Option<std::string::String>,
}
impl ListOfferingsInput {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    pub fn channel_class(&self) -> std::option::Option<&str> {
        self.channel_class.as_deref()
    }
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    pub fn channel_configuration(&self) -> std::option::Option<&str> {
        self.channel_configuration.as_deref()
    }
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    pub fn codec(&self) -> std::option::Option<&str> {
        self.codec.as_deref()
    }
    /// Filter by offering duration, e.g. '12'
    pub fn duration(&self) -> std::option::Option<&str> {
        self.duration.as_deref()
    }
    /// Placeholder documentation for MaxResults
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    pub fn maximum_bitrate(&self) -> std::option::Option<&str> {
        self.maximum_bitrate.as_deref()
    }
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    pub fn maximum_framerate(&self) -> std::option::Option<&str> {
        self.maximum_framerate.as_deref()
    }
    /// Placeholder documentation for __string
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    pub fn resolution(&self) -> std::option::Option<&str> {
        self.resolution.as_deref()
    }
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    pub fn special_feature(&self) -> std::option::Option<&str> {
        self.special_feature.as_deref()
    }
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    pub fn video_quality(&self) -> std::option::Option<&str> {
        self.video_quality.as_deref()
    }
}
impl ListOfferingsInput {
    /// Creates a new builder-style object to manufacture [`ListOfferingsInput`](crate::operation::list_offerings::ListOfferingsInput).
    pub fn builder() -> crate::operation::list_offerings::builders::ListOfferingsInputBuilder {
        crate::operation::list_offerings::builders::ListOfferingsInputBuilder::default()
    }
}

/// A builder for [`ListOfferingsInput`](crate::operation::list_offerings::ListOfferingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListOfferingsInputBuilder {
    pub(crate) channel_class: std::option::Option<std::string::String>,
    pub(crate) channel_configuration: std::option::Option<std::string::String>,
    pub(crate) codec: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) maximum_bitrate: std::option::Option<std::string::String>,
    pub(crate) maximum_framerate: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) resolution: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) special_feature: std::option::Option<std::string::String>,
    pub(crate) video_quality: std::option::Option<std::string::String>,
}
impl ListOfferingsInputBuilder {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    pub fn channel_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_class = Some(input.into());
        self
    }
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    pub fn set_channel_class(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_class = input;
        self
    }
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    pub fn channel_configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_configuration = Some(input.into());
        self
    }
    /// Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
    pub fn set_channel_configuration(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.channel_configuration = input;
        self
    }
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    pub fn codec(mut self, input: impl Into<std::string::String>) -> Self {
        self.codec = Some(input.into());
        self
    }
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    pub fn set_codec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.codec = input;
        self
    }
    /// Filter by offering duration, e.g. '12'
    pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.duration = Some(input.into());
        self
    }
    /// Filter by offering duration, e.g. '12'
    pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.duration = input;
        self
    }
    /// Placeholder documentation for MaxResults
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// Placeholder documentation for MaxResults
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    pub fn maximum_bitrate(mut self, input: impl Into<std::string::String>) -> Self {
        self.maximum_bitrate = Some(input.into());
        self
    }
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    pub fn set_maximum_bitrate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.maximum_bitrate = input;
        self
    }
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    pub fn maximum_framerate(mut self, input: impl Into<std::string::String>) -> Self {
        self.maximum_framerate = Some(input.into());
        self
    }
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    pub fn set_maximum_framerate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maximum_framerate = input;
        self
    }
    /// Placeholder documentation for __string
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// Placeholder documentation for __string
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    pub fn resolution(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolution = Some(input.into());
        self
    }
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    pub fn set_resolution(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resolution = input;
        self
    }
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    pub fn special_feature(mut self, input: impl Into<std::string::String>) -> Self {
        self.special_feature = Some(input.into());
        self
    }
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    pub fn set_special_feature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.special_feature = input;
        self
    }
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    pub fn video_quality(mut self, input: impl Into<std::string::String>) -> Self {
        self.video_quality = Some(input.into());
        self
    }
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    pub fn set_video_quality(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.video_quality = input;
        self
    }
    /// Consumes the builder and constructs a [`ListOfferingsInput`](crate::operation::list_offerings::ListOfferingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_offerings::ListOfferingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_offerings::ListOfferingsInput {
            channel_class: self.channel_class,
            channel_configuration: self.channel_configuration,
            codec: self.codec,
            duration: self.duration,
            max_results: self.max_results.unwrap_or_default(),
            maximum_bitrate: self.maximum_bitrate,
            maximum_framerate: self.maximum_framerate,
            next_token: self.next_token,
            resolution: self.resolution,
            resource_type: self.resource_type,
            special_feature: self.special_feature,
            video_quality: self.video_quality,
        })
    }
}
