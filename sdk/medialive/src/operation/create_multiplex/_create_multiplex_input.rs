// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to create a multiplex.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMultiplexInput {
    /// A list of availability zones for the multiplex. You must specify exactly two.
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// Configuration for a multiplex event.
    #[doc(hidden)]
    pub multiplex_settings: std::option::Option<crate::types::MultiplexSettings>,
    /// Name of multiplex.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Unique request ID. This prevents retries from creating multiple resources.
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// A collection of key-value pairs.
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateMultiplexInput {
    /// A list of availability zones for the multiplex. You must specify exactly two.
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
    /// Configuration for a multiplex event.
    pub fn multiplex_settings(&self) -> std::option::Option<&crate::types::MultiplexSettings> {
        self.multiplex_settings.as_ref()
    }
    /// Name of multiplex.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Unique request ID. This prevents retries from creating multiple resources.
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// A collection of key-value pairs.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateMultiplexInput {
    /// Creates a new builder-style object to manufacture [`CreateMultiplexInput`](crate::operation::create_multiplex::CreateMultiplexInput).
    pub fn builder() -> crate::operation::create_multiplex::builders::CreateMultiplexInputBuilder {
        crate::operation::create_multiplex::builders::CreateMultiplexInputBuilder::default()
    }
}

/// A builder for [`CreateMultiplexInput`](crate::operation::create_multiplex::CreateMultiplexInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateMultiplexInputBuilder {
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) multiplex_settings: std::option::Option<crate::types::MultiplexSettings>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateMultiplexInputBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// A list of availability zones for the multiplex. You must specify exactly two.
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// A list of availability zones for the multiplex. You must specify exactly two.
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// Configuration for a multiplex event.
    pub fn multiplex_settings(mut self, input: crate::types::MultiplexSettings) -> Self {
        self.multiplex_settings = Some(input);
        self
    }
    /// Configuration for a multiplex event.
    pub fn set_multiplex_settings(
        mut self,
        input: std::option::Option<crate::types::MultiplexSettings>,
    ) -> Self {
        self.multiplex_settings = input;
        self
    }
    /// Name of multiplex.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// Name of multiplex.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Unique request ID. This prevents retries from creating multiple resources.
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// Unique request ID. This prevents retries from creating multiple resources.
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of key-value pairs.
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// A collection of key-value pairs.
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateMultiplexInput`](crate::operation::create_multiplex::CreateMultiplexInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_multiplex::CreateMultiplexInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_multiplex::CreateMultiplexInput {
            availability_zones: self.availability_zones,
            multiplex_settings: self.multiplex_settings,
            name: self.name,
            request_id: self.request_id,
            tags: self.tags,
        })
    }
}
