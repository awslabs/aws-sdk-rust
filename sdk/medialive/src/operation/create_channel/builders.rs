// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_channel::_create_channel_output::CreateChannelOutputBuilder;

pub use crate::operation::create_channel::_create_channel_input::CreateChannelInputBuilder;

impl CreateChannelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_channel::CreateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_channel::CreateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_channel();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateChannel`.
///
/// Creates a new channel
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateChannelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_channel::builders::CreateChannelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_channel::CreateChannelOutput,
        crate::operation::create_channel::CreateChannelError,
    > for CreateChannelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_channel::CreateChannelOutput,
            crate::operation::create_channel::CreateChannelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateChannelFluentBuilder {
    /// Creates a new `CreateChannel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateChannel as a reference.
    pub fn as_input(&self) -> &crate::operation::create_channel::builders::CreateChannelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_channel::CreateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_channel::CreateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_channel::CreateChannel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_channel::CreateChannel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_channel::CreateChannelOutput,
        crate::operation::create_channel::CreateChannelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn cdi_input_specification(mut self, input: crate::types::CdiInputSpecification) -> Self {
        self.inner = self.inner.cdi_input_specification(input);
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn set_cdi_input_specification(mut self, input: ::std::option::Option<crate::types::CdiInputSpecification>) -> Self {
        self.inner = self.inner.set_cdi_input_specification(input);
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn get_cdi_input_specification(&self) -> &::std::option::Option<crate::types::CdiInputSpecification> {
        self.inner.get_cdi_input_specification()
    }
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    pub fn channel_class(mut self, input: crate::types::ChannelClass) -> Self {
        self.inner = self.inner.channel_class(input);
        self
    }
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    pub fn set_channel_class(mut self, input: ::std::option::Option<crate::types::ChannelClass>) -> Self {
        self.inner = self.inner.set_channel_class(input);
        self
    }
    /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    pub fn get_channel_class(&self) -> &::std::option::Option<crate::types::ChannelClass> {
        self.inner.get_channel_class()
    }
    /// Appends an item to `Destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// Placeholder documentation for __listOfOutputDestination
    pub fn destinations(mut self, input: crate::types::OutputDestination) -> Self {
        self.inner = self.inner.destinations(input);
        self
    }
    /// Placeholder documentation for __listOfOutputDestination
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputDestination>>) -> Self {
        self.inner = self.inner.set_destinations(input);
        self
    }
    /// Placeholder documentation for __listOfOutputDestination
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputDestination>> {
        self.inner.get_destinations()
    }
    /// Encoder Settings
    pub fn encoder_settings(mut self, input: crate::types::EncoderSettings) -> Self {
        self.inner = self.inner.encoder_settings(input);
        self
    }
    /// Encoder Settings
    pub fn set_encoder_settings(mut self, input: ::std::option::Option<crate::types::EncoderSettings>) -> Self {
        self.inner = self.inner.set_encoder_settings(input);
        self
    }
    /// Encoder Settings
    pub fn get_encoder_settings(&self) -> &::std::option::Option<crate::types::EncoderSettings> {
        self.inner.get_encoder_settings()
    }
    /// Appends an item to `InputAttachments`.
    ///
    /// To override the contents of this collection use [`set_input_attachments`](Self::set_input_attachments).
    ///
    /// List of input attachments for channel.
    pub fn input_attachments(mut self, input: crate::types::InputAttachment) -> Self {
        self.inner = self.inner.input_attachments(input);
        self
    }
    /// List of input attachments for channel.
    pub fn set_input_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputAttachment>>) -> Self {
        self.inner = self.inner.set_input_attachments(input);
        self
    }
    /// List of input attachments for channel.
    pub fn get_input_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputAttachment>> {
        self.inner.get_input_attachments()
    }
    /// Specification of network and file inputs for this channel
    pub fn input_specification(mut self, input: crate::types::InputSpecification) -> Self {
        self.inner = self.inner.input_specification(input);
        self
    }
    /// Specification of network and file inputs for this channel
    pub fn set_input_specification(mut self, input: ::std::option::Option<crate::types::InputSpecification>) -> Self {
        self.inner = self.inner.set_input_specification(input);
        self
    }
    /// Specification of network and file inputs for this channel
    pub fn get_input_specification(&self) -> &::std::option::Option<crate::types::InputSpecification> {
        self.inner.get_input_specification()
    }
    /// The log level to write to CloudWatch Logs.
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.inner = self.inner.log_level(input);
        self
    }
    /// The log level to write to CloudWatch Logs.
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.inner = self.inner.set_log_level(input);
        self
    }
    /// The log level to write to CloudWatch Logs.
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        self.inner.get_log_level()
    }
    /// Maintenance settings for this channel.
    pub fn maintenance(mut self, input: crate::types::MaintenanceCreateSettings) -> Self {
        self.inner = self.inner.maintenance(input);
        self
    }
    /// Maintenance settings for this channel.
    pub fn set_maintenance(mut self, input: ::std::option::Option<crate::types::MaintenanceCreateSettings>) -> Self {
        self.inner = self.inner.set_maintenance(input);
        self
    }
    /// Maintenance settings for this channel.
    pub fn get_maintenance(&self) -> &::std::option::Option<crate::types::MaintenanceCreateSettings> {
        self.inner.get_maintenance()
    }
    /// Name of channel.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// Name of channel.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Name of channel.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.request_id(input.into());
        self
    }
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_request_id(input);
        self
    }
    /// Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_request_id()
    }
    /// Deprecated field that's only usable by whitelisted customers.
    #[deprecated]
    pub fn reserved(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.reserved(input.into());
        self
    }
    /// Deprecated field that's only usable by whitelisted customers.
    #[deprecated]
    pub fn set_reserved(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_reserved(input);
        self
    }
    /// Deprecated field that's only usable by whitelisted customers.
    #[deprecated]
    pub fn get_reserved(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_reserved()
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of key-value pairs.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// A collection of key-value pairs.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// A collection of key-value pairs.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// Settings for the VPC outputs
    pub fn vpc(mut self, input: crate::types::VpcOutputSettings) -> Self {
        self.inner = self.inner.vpc(input);
        self
    }
    /// Settings for the VPC outputs
    pub fn set_vpc(mut self, input: ::std::option::Option<crate::types::VpcOutputSettings>) -> Self {
        self.inner = self.inner.set_vpc(input);
        self
    }
    /// Settings for the VPC outputs
    pub fn get_vpc(&self) -> &::std::option::Option<crate::types::VpcOutputSettings> {
        self.inner.get_vpc()
    }
}
