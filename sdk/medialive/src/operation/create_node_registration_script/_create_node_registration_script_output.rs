// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for CreateNodeRegistrationScriptResponse
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateNodeRegistrationScriptOutput {
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    pub node_registration_script: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateNodeRegistrationScriptOutput {
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    pub fn node_registration_script(&self) -> ::std::option::Option<&str> {
        self.node_registration_script.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateNodeRegistrationScriptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateNodeRegistrationScriptOutput {
    /// Creates a new builder-style object to manufacture [`CreateNodeRegistrationScriptOutput`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput).
    pub fn builder() -> crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptOutputBuilder {
        crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptOutputBuilder::default()
    }
}

/// A builder for [`CreateNodeRegistrationScriptOutput`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateNodeRegistrationScriptOutputBuilder {
    pub(crate) node_registration_script: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateNodeRegistrationScriptOutputBuilder {
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    pub fn node_registration_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_registration_script = ::std::option::Option::Some(input.into());
        self
    }
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    pub fn set_node_registration_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_registration_script = input;
        self
    }
    /// A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    pub fn get_node_registration_script(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_registration_script
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateNodeRegistrationScriptOutput`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput).
    pub fn build(self) -> crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput {
        crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput {
            node_registration_script: self.node_registration_script,
            _request_id: self._request_id,
        }
    }
}
