// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for UpdateClusterResponse
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateClusterOutput {
    /// The ARN of the Cluster.
    pub arn: ::std::option::Option<::std::string::String>,
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    pub channel_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// The hardware type for the Cluster
    pub cluster_type: ::std::option::Option<crate::types::ClusterType>,
    /// The unique ID of the Cluster.
    pub id: ::std::option::Option<::std::string::String>,
    /// The user-specified name of the Cluster.
    pub name: ::std::option::Option<::std::string::String>,
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    pub network_settings: ::std::option::Option<crate::types::ClusterNetworkSettings>,
    /// The current state of the Cluster.
    pub state: ::std::option::Option<crate::types::ClusterState>,
    _request_id: Option<String>,
}
impl UpdateClusterOutput {
    /// The ARN of the Cluster.
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channel_ids.is_none()`.
    pub fn channel_ids(&self) -> &[::std::string::String] {
        self.channel_ids.as_deref().unwrap_or_default()
    }
    /// The hardware type for the Cluster
    pub fn cluster_type(&self) -> ::std::option::Option<&crate::types::ClusterType> {
        self.cluster_type.as_ref()
    }
    /// The unique ID of the Cluster.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The user-specified name of the Cluster.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    pub fn network_settings(&self) -> ::std::option::Option<&crate::types::ClusterNetworkSettings> {
        self.network_settings.as_ref()
    }
    /// The current state of the Cluster.
    pub fn state(&self) -> ::std::option::Option<&crate::types::ClusterState> {
        self.state.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateClusterOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
    pub fn builder() -> crate::operation::update_cluster::builders::UpdateClusterOutputBuilder {
        crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::default()
    }
}

/// A builder for [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateClusterOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) channel_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cluster_type: ::std::option::Option<crate::types::ClusterType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) network_settings: ::std::option::Option<crate::types::ClusterNetworkSettings>,
    pub(crate) state: ::std::option::Option<crate::types::ClusterState>,
    _request_id: Option<String>,
}
impl UpdateClusterOutputBuilder {
    /// The ARN of the Cluster.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the Cluster.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The ARN of the Cluster.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `channel_ids`.
    ///
    /// To override the contents of this collection use [`set_channel_ids`](Self::set_channel_ids).
    ///
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    pub fn channel_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.channel_ids.unwrap_or_default();
        v.push(input.into());
        self.channel_ids = ::std::option::Option::Some(v);
        self
    }
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    pub fn set_channel_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.channel_ids = input;
        self
    }
    /// An array of the IDs of the Channels that are associated with this Cluster. One Channel is associated with the Cluster as follows: A Channel belongs to a ChannelPlacementGroup. A ChannelPlacementGroup is attached to a Node. A Node belongs to a Cluster.
    pub fn get_channel_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.channel_ids
    }
    /// The hardware type for the Cluster
    pub fn cluster_type(mut self, input: crate::types::ClusterType) -> Self {
        self.cluster_type = ::std::option::Option::Some(input);
        self
    }
    /// The hardware type for the Cluster
    pub fn set_cluster_type(mut self, input: ::std::option::Option<crate::types::ClusterType>) -> Self {
        self.cluster_type = input;
        self
    }
    /// The hardware type for the Cluster
    pub fn get_cluster_type(&self) -> &::std::option::Option<crate::types::ClusterType> {
        &self.cluster_type
    }
    /// The unique ID of the Cluster.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The unique ID of the Cluster.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The unique ID of the Cluster.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// The user-specified name of the Cluster.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The user-specified name of the Cluster.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The user-specified name of the Cluster.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    pub fn network_settings(mut self, input: crate::types::ClusterNetworkSettings) -> Self {
        self.network_settings = ::std::option::Option::Some(input);
        self
    }
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    pub fn set_network_settings(mut self, input: ::std::option::Option<crate::types::ClusterNetworkSettings>) -> Self {
        self.network_settings = input;
        self
    }
    /// Network settings that connect the Nodes in the Cluster to one or more of the Networks that the Cluster is associated with.
    pub fn get_network_settings(&self) -> &::std::option::Option<crate::types::ClusterNetworkSettings> {
        &self.network_settings
    }
    /// The current state of the Cluster.
    pub fn state(mut self, input: crate::types::ClusterState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// The current state of the Cluster.
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ClusterState>) -> Self {
        self.state = input;
        self
    }
    /// The current state of the Cluster.
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ClusterState> {
        &self.state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
    pub fn build(self) -> crate::operation::update_cluster::UpdateClusterOutput {
        crate::operation::update_cluster::UpdateClusterOutput {
            arn: self.arn,
            channel_ids: self.channel_ids,
            cluster_type: self.cluster_type,
            id: self.id,
            name: self.name,
            network_settings: self.network_settings,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
