// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for ListMultiplexAlertsRequest
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMultiplexAlertsInput {
    /// The maximum number of items to return
    pub max_results: ::std::option::Option<i32>,
    /// The unique ID of the multiplex
    pub multiplex_id: ::std::option::Option<::std::string::String>,
    /// The next pagination token
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Specifies the set of alerts to return based on their state. SET - Return only alerts with SET state. CLEARED - Return only alerts with CLEARED state. ALL - Return all alerts.
    pub state_filter: ::std::option::Option<::std::string::String>,
}
impl ListMultiplexAlertsInput {
    /// The maximum number of items to return
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// The unique ID of the multiplex
    pub fn multiplex_id(&self) -> ::std::option::Option<&str> {
        self.multiplex_id.as_deref()
    }
    /// The next pagination token
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Specifies the set of alerts to return based on their state. SET - Return only alerts with SET state. CLEARED - Return only alerts with CLEARED state. ALL - Return all alerts.
    pub fn state_filter(&self) -> ::std::option::Option<&str> {
        self.state_filter.as_deref()
    }
}
impl ListMultiplexAlertsInput {
    /// Creates a new builder-style object to manufacture [`ListMultiplexAlertsInput`](crate::operation::list_multiplex_alerts::ListMultiplexAlertsInput).
    pub fn builder() -> crate::operation::list_multiplex_alerts::builders::ListMultiplexAlertsInputBuilder {
        crate::operation::list_multiplex_alerts::builders::ListMultiplexAlertsInputBuilder::default()
    }
}

/// A builder for [`ListMultiplexAlertsInput`](crate::operation::list_multiplex_alerts::ListMultiplexAlertsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMultiplexAlertsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) multiplex_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) state_filter: ::std::option::Option<::std::string::String>,
}
impl ListMultiplexAlertsInputBuilder {
    /// The maximum number of items to return
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// The maximum number of items to return
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// The maximum number of items to return
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// The unique ID of the multiplex
    /// This field is required.
    pub fn multiplex_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multiplex_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The unique ID of the multiplex
    pub fn set_multiplex_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multiplex_id = input;
        self
    }
    /// The unique ID of the multiplex
    pub fn get_multiplex_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.multiplex_id
    }
    /// The next pagination token
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// The next pagination token
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// The next pagination token
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Specifies the set of alerts to return based on their state. SET - Return only alerts with SET state. CLEARED - Return only alerts with CLEARED state. ALL - Return all alerts.
    pub fn state_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// Specifies the set of alerts to return based on their state. SET - Return only alerts with SET state. CLEARED - Return only alerts with CLEARED state. ALL - Return all alerts.
    pub fn set_state_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_filter = input;
        self
    }
    /// Specifies the set of alerts to return based on their state. SET - Return only alerts with SET state. CLEARED - Return only alerts with CLEARED state. ALL - Return all alerts.
    pub fn get_state_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_filter
    }
    /// Consumes the builder and constructs a [`ListMultiplexAlertsInput`](crate::operation::list_multiplex_alerts::ListMultiplexAlertsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_multiplex_alerts::ListMultiplexAlertsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_multiplex_alerts::ListMultiplexAlertsInput {
            max_results: self.max_results,
            multiplex_id: self.multiplex_id,
            next_token: self.next_token,
            state_filter: self.state_filter,
        })
    }
}
