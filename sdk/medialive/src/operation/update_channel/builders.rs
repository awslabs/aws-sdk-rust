// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_channel::_update_channel_output::UpdateChannelOutputBuilder;

pub use crate::operation::update_channel::_update_channel_input::UpdateChannelInputBuilder;

impl crate::operation::update_channel::builders::UpdateChannelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_channel::UpdateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_channel::UpdateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_channel();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateChannel`.
///
/// Updates a channel.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateChannelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_channel::builders::UpdateChannelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_channel::UpdateChannelOutput,
        crate::operation::update_channel::UpdateChannelError,
    > for UpdateChannelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_channel::UpdateChannelOutput,
            crate::operation::update_channel::UpdateChannelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateChannelFluentBuilder {
    /// Creates a new `UpdateChannel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateChannel as a reference.
    pub fn as_input(&self) -> &crate::operation::update_channel::builders::UpdateChannelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_channel::UpdateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_channel::UpdateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_channel::UpdateChannel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_channel::UpdateChannel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_channel::UpdateChannelOutput,
        crate::operation::update_channel::UpdateChannelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn cdi_input_specification(mut self, input: crate::types::CdiInputSpecification) -> Self {
        self.inner = self.inner.cdi_input_specification(input);
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn set_cdi_input_specification(mut self, input: ::std::option::Option<crate::types::CdiInputSpecification>) -> Self {
        self.inner = self.inner.set_cdi_input_specification(input);
        self
    }
    /// Specification of CDI inputs for this channel
    pub fn get_cdi_input_specification(&self) -> &::std::option::Option<crate::types::CdiInputSpecification> {
        self.inner.get_cdi_input_specification()
    }
    /// channel ID
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_id(input.into());
        self
    }
    /// channel ID
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_id(input);
        self
    }
    /// channel ID
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_id()
    }
    ///
    /// Appends an item to `Destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// A list of output destinations for this channel.
    pub fn destinations(mut self, input: crate::types::OutputDestination) -> Self {
        self.inner = self.inner.destinations(input);
        self
    }
    /// A list of output destinations for this channel.
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputDestination>>) -> Self {
        self.inner = self.inner.set_destinations(input);
        self
    }
    /// A list of output destinations for this channel.
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputDestination>> {
        self.inner.get_destinations()
    }
    /// The encoder settings for this channel.
    pub fn encoder_settings(mut self, input: crate::types::EncoderSettings) -> Self {
        self.inner = self.inner.encoder_settings(input);
        self
    }
    /// The encoder settings for this channel.
    pub fn set_encoder_settings(mut self, input: ::std::option::Option<crate::types::EncoderSettings>) -> Self {
        self.inner = self.inner.set_encoder_settings(input);
        self
    }
    /// The encoder settings for this channel.
    pub fn get_encoder_settings(&self) -> &::std::option::Option<crate::types::EncoderSettings> {
        self.inner.get_encoder_settings()
    }
    ///
    /// Appends an item to `InputAttachments`.
    ///
    /// To override the contents of this collection use [`set_input_attachments`](Self::set_input_attachments).
    ///
    /// Placeholder documentation for __listOfInputAttachment
    pub fn input_attachments(mut self, input: crate::types::InputAttachment) -> Self {
        self.inner = self.inner.input_attachments(input);
        self
    }
    /// Placeholder documentation for __listOfInputAttachment
    pub fn set_input_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputAttachment>>) -> Self {
        self.inner = self.inner.set_input_attachments(input);
        self
    }
    /// Placeholder documentation for __listOfInputAttachment
    pub fn get_input_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputAttachment>> {
        self.inner.get_input_attachments()
    }
    /// Specification of network and file inputs for this channel
    pub fn input_specification(mut self, input: crate::types::InputSpecification) -> Self {
        self.inner = self.inner.input_specification(input);
        self
    }
    /// Specification of network and file inputs for this channel
    pub fn set_input_specification(mut self, input: ::std::option::Option<crate::types::InputSpecification>) -> Self {
        self.inner = self.inner.set_input_specification(input);
        self
    }
    /// Specification of network and file inputs for this channel
    pub fn get_input_specification(&self) -> &::std::option::Option<crate::types::InputSpecification> {
        self.inner.get_input_specification()
    }
    /// The log level to write to CloudWatch Logs.
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.inner = self.inner.log_level(input);
        self
    }
    /// The log level to write to CloudWatch Logs.
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.inner = self.inner.set_log_level(input);
        self
    }
    /// The log level to write to CloudWatch Logs.
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        self.inner.get_log_level()
    }
    /// Maintenance settings for this channel.
    pub fn maintenance(mut self, input: crate::types::MaintenanceUpdateSettings) -> Self {
        self.inner = self.inner.maintenance(input);
        self
    }
    /// Maintenance settings for this channel.
    pub fn set_maintenance(mut self, input: ::std::option::Option<crate::types::MaintenanceUpdateSettings>) -> Self {
        self.inner = self.inner.set_maintenance(input);
        self
    }
    /// Maintenance settings for this channel.
    pub fn get_maintenance(&self) -> &::std::option::Option<crate::types::MaintenanceUpdateSettings> {
        self.inner.get_maintenance()
    }
    /// The name of the channel.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// The name of the channel.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// The name of the channel.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
}
