// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to create a node
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateNodeInput {
    /// The ID of the cluster.
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// The user-specified name of the Node to be created.
    pub name: ::std::option::Option<::std::string::String>,
    /// Documentation update needed
    pub node_interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::NodeInterfaceMappingCreateRequest>>,
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub request_id: ::std::option::Option<::std::string::String>,
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    pub role: ::std::option::Option<crate::types::NodeRole>,
    /// A collection of key-value pairs.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateNodeInput {
    /// The ID of the cluster.
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// The user-specified name of the Node to be created.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Documentation update needed
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_interface_mappings.is_none()`.
    pub fn node_interface_mappings(&self) -> &[crate::types::NodeInterfaceMappingCreateRequest] {
        self.node_interface_mappings.as_deref().unwrap_or_default()
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    pub fn role(&self) -> ::std::option::Option<&crate::types::NodeRole> {
        self.role.as_ref()
    }
    /// A collection of key-value pairs.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateNodeInput {
    /// Creates a new builder-style object to manufacture [`CreateNodeInput`](crate::operation::create_node::CreateNodeInput).
    pub fn builder() -> crate::operation::create_node::builders::CreateNodeInputBuilder {
        crate::operation::create_node::builders::CreateNodeInputBuilder::default()
    }
}

/// A builder for [`CreateNodeInput`](crate::operation::create_node::CreateNodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateNodeInputBuilder {
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) node_interface_mappings: ::std::option::Option<::std::vec::Vec<crate::types::NodeInterfaceMappingCreateRequest>>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<crate::types::NodeRole>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateNodeInputBuilder {
    /// The ID of the cluster.
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the cluster.
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// The ID of the cluster.
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// The user-specified name of the Node to be created.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The user-specified name of the Node to be created.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The user-specified name of the Node to be created.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `node_interface_mappings`.
    ///
    /// To override the contents of this collection use [`set_node_interface_mappings`](Self::set_node_interface_mappings).
    ///
    /// Documentation update needed
    pub fn node_interface_mappings(mut self, input: crate::types::NodeInterfaceMappingCreateRequest) -> Self {
        let mut v = self.node_interface_mappings.unwrap_or_default();
        v.push(input);
        self.node_interface_mappings = ::std::option::Option::Some(v);
        self
    }
    /// Documentation update needed
    pub fn set_node_interface_mappings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::NodeInterfaceMappingCreateRequest>>,
    ) -> Self {
        self.node_interface_mappings = input;
        self
    }
    /// Documentation update needed
    pub fn get_node_interface_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NodeInterfaceMappingCreateRequest>> {
        &self.node_interface_mappings
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    pub fn role(mut self, input: crate::types::NodeRole) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::NodeRole>) -> Self {
        self.role = input;
        self
    }
    /// The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.
    pub fn get_role(&self) -> &::std::option::Option<crate::types::NodeRole> {
        &self.role
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of key-value pairs.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// A collection of key-value pairs.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// A collection of key-value pairs.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateNodeInput`](crate::operation::create_node::CreateNodeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_node::CreateNodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_node::CreateNodeInput {
            cluster_id: self.cluster_id,
            name: self.name,
            node_interface_mappings: self.node_interface_mappings,
            request_id: self.request_id,
            role: self.role,
            tags: self.tags,
        })
    }
}
