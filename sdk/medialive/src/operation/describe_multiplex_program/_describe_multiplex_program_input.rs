// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DescribeMultiplexProgramRequest
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMultiplexProgramInput {
    /// The ID of the multiplex that the program belongs to.
    #[doc(hidden)]
    pub multiplex_id: std::option::Option<std::string::String>,
    /// The name of the program.
    #[doc(hidden)]
    pub program_name: std::option::Option<std::string::String>,
}
impl DescribeMultiplexProgramInput {
    /// The ID of the multiplex that the program belongs to.
    pub fn multiplex_id(&self) -> std::option::Option<&str> {
        self.multiplex_id.as_deref()
    }
    /// The name of the program.
    pub fn program_name(&self) -> std::option::Option<&str> {
        self.program_name.as_deref()
    }
}
impl DescribeMultiplexProgramInput {
    /// Creates a new builder-style object to manufacture [`DescribeMultiplexProgramInput`](crate::operation::describe_multiplex_program::DescribeMultiplexProgramInput).
    pub fn builder(
    ) -> crate::operation::describe_multiplex_program::builders::DescribeMultiplexProgramInputBuilder
    {
        crate::operation::describe_multiplex_program::builders::DescribeMultiplexProgramInputBuilder::default()
    }
}

/// A builder for [`DescribeMultiplexProgramInput`](crate::operation::describe_multiplex_program::DescribeMultiplexProgramInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeMultiplexProgramInputBuilder {
    pub(crate) multiplex_id: std::option::Option<std::string::String>,
    pub(crate) program_name: std::option::Option<std::string::String>,
}
impl DescribeMultiplexProgramInputBuilder {
    /// The ID of the multiplex that the program belongs to.
    pub fn multiplex_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.multiplex_id = Some(input.into());
        self
    }
    /// The ID of the multiplex that the program belongs to.
    pub fn set_multiplex_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.multiplex_id = input;
        self
    }
    /// The name of the program.
    pub fn program_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.program_name = Some(input.into());
        self
    }
    /// The name of the program.
    pub fn set_program_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMultiplexProgramInput`](crate::operation::describe_multiplex_program::DescribeMultiplexProgramInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_multiplex_program::DescribeMultiplexProgramInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramInput {
                multiplex_id: self.multiplex_id,
                program_name: self.program_name,
            },
        )
    }
}
