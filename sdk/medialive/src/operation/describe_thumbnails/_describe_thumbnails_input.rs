// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DescribeThumbnailsRequest
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeThumbnailsInput {
    /// Unique ID of the channel
    pub channel_id: ::std::option::Option<::std::string::String>,
    /// Pipeline ID ("0" or "1")
    pub pipeline_id: ::std::option::Option<::std::string::String>,
    /// thumbnail type
    pub thumbnail_type: ::std::option::Option<::std::string::String>,
}
impl DescribeThumbnailsInput {
    /// Unique ID of the channel
    pub fn channel_id(&self) -> ::std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// Pipeline ID ("0" or "1")
    pub fn pipeline_id(&self) -> ::std::option::Option<&str> {
        self.pipeline_id.as_deref()
    }
    /// thumbnail type
    pub fn thumbnail_type(&self) -> ::std::option::Option<&str> {
        self.thumbnail_type.as_deref()
    }
}
impl DescribeThumbnailsInput {
    /// Creates a new builder-style object to manufacture [`DescribeThumbnailsInput`](crate::operation::describe_thumbnails::DescribeThumbnailsInput).
    pub fn builder() -> crate::operation::describe_thumbnails::builders::DescribeThumbnailsInputBuilder {
        crate::operation::describe_thumbnails::builders::DescribeThumbnailsInputBuilder::default()
    }
}

/// A builder for [`DescribeThumbnailsInput`](crate::operation::describe_thumbnails::DescribeThumbnailsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeThumbnailsInputBuilder {
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) pipeline_id: ::std::option::Option<::std::string::String>,
    pub(crate) thumbnail_type: ::std::option::Option<::std::string::String>,
}
impl DescribeThumbnailsInputBuilder {
    /// Unique ID of the channel
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Unique ID of the channel
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// Unique ID of the channel
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// Pipeline ID ("0" or "1")
    /// This field is required.
    pub fn pipeline_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pipeline_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Pipeline ID ("0" or "1")
    pub fn set_pipeline_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pipeline_id = input;
        self
    }
    /// Pipeline ID ("0" or "1")
    pub fn get_pipeline_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pipeline_id
    }
    /// thumbnail type
    /// This field is required.
    pub fn thumbnail_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thumbnail_type = ::std::option::Option::Some(input.into());
        self
    }
    /// thumbnail type
    pub fn set_thumbnail_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thumbnail_type = input;
        self
    }
    /// thumbnail type
    pub fn get_thumbnail_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.thumbnail_type
    }
    /// Consumes the builder and constructs a [`DescribeThumbnailsInput`](crate::operation::describe_thumbnails::DescribeThumbnailsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_thumbnails::DescribeThumbnailsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_thumbnails::DescribeThumbnailsInput {
            channel_id: self.channel_id,
            pipeline_id: self.pipeline_id,
            thumbnail_type: self.thumbnail_type,
        })
    }
}
