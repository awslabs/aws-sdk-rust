// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DeleteReservationRequest
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteReservationInput {
    /// Unique reservation ID, e.g. '1234567'
    #[doc(hidden)]
    pub reservation_id: std::option::Option<std::string::String>,
}
impl DeleteReservationInput {
    /// Unique reservation ID, e.g. '1234567'
    pub fn reservation_id(&self) -> std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
}
impl DeleteReservationInput {
    /// Creates a new builder-style object to manufacture [`DeleteReservationInput`](crate::operation::delete_reservation::DeleteReservationInput).
    pub fn builder() -> crate::operation::delete_reservation::builders::DeleteReservationInputBuilder
    {
        crate::operation::delete_reservation::builders::DeleteReservationInputBuilder::default()
    }
}

/// A builder for [`DeleteReservationInput`](crate::operation::delete_reservation::DeleteReservationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteReservationInputBuilder {
    pub(crate) reservation_id: std::option::Option<std::string::String>,
}
impl DeleteReservationInputBuilder {
    /// Unique reservation ID, e.g. '1234567'
    pub fn reservation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reservation_id = Some(input.into());
        self
    }
    /// Unique reservation ID, e.g. '1234567'
    pub fn set_reservation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reservation_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteReservationInput`](crate::operation::delete_reservation::DeleteReservationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_reservation::DeleteReservationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_reservation::DeleteReservationInput {
                reservation_id: self.reservation_id,
            },
        )
    }
}
