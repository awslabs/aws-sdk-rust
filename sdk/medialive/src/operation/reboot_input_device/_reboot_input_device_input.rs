// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to reboot an AWS Elemental device.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RebootInputDeviceInput {
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    #[doc(hidden)]
    pub force: std::option::Option<crate::types::RebootInputDeviceForce>,
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    #[doc(hidden)]
    pub input_device_id: std::option::Option<std::string::String>,
}
impl RebootInputDeviceInput {
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn force(&self) -> std::option::Option<&crate::types::RebootInputDeviceForce> {
        self.force.as_ref()
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn input_device_id(&self) -> std::option::Option<&str> {
        self.input_device_id.as_deref()
    }
}
impl RebootInputDeviceInput {
    /// Creates a new builder-style object to manufacture [`RebootInputDeviceInput`](crate::operation::reboot_input_device::RebootInputDeviceInput).
    pub fn builder(
    ) -> crate::operation::reboot_input_device::builders::RebootInputDeviceInputBuilder {
        crate::operation::reboot_input_device::builders::RebootInputDeviceInputBuilder::default()
    }
}

/// A builder for [`RebootInputDeviceInput`](crate::operation::reboot_input_device::RebootInputDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RebootInputDeviceInputBuilder {
    pub(crate) force: std::option::Option<crate::types::RebootInputDeviceForce>,
    pub(crate) input_device_id: std::option::Option<std::string::String>,
}
impl RebootInputDeviceInputBuilder {
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn force(mut self, input: crate::types::RebootInputDeviceForce) -> Self {
        self.force = Some(input);
        self
    }
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn set_force(
        mut self,
        input: std::option::Option<crate::types::RebootInputDeviceForce>,
    ) -> Self {
        self.force = input;
        self
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn input_device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_device_id = Some(input.into());
        self
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn set_input_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_device_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RebootInputDeviceInput`](crate::operation::reboot_input_device::RebootInputDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::reboot_input_device::RebootInputDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::reboot_input_device::RebootInputDeviceInput {
                force: self.force,
                input_device_id: self.input_device_id,
            },
        )
    }
}
