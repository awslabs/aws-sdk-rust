// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DeleteMultiplexProgramResponse
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteMultiplexProgramOutput {
    /// The MediaLive channel associated with the program.
    pub channel_id: ::std::option::Option<::std::string::String>,
    /// The settings for this multiplex program.
    pub multiplex_program_settings: ::std::option::Option<crate::types::MultiplexProgramSettings>,
    /// The packet identifier map for this multiplex program.
    pub packet_identifiers_map: ::std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>,
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub pipeline_details: ::std::option::Option<::std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>,
    /// The name of the multiplex program.
    pub program_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DeleteMultiplexProgramOutput {
    /// The MediaLive channel associated with the program.
    pub fn channel_id(&self) -> ::std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// The settings for this multiplex program.
    pub fn multiplex_program_settings(&self) -> ::std::option::Option<&crate::types::MultiplexProgramSettings> {
        self.multiplex_program_settings.as_ref()
    }
    /// The packet identifier map for this multiplex program.
    pub fn packet_identifiers_map(&self) -> ::std::option::Option<&crate::types::MultiplexProgramPacketIdentifiersMap> {
        self.packet_identifiers_map.as_ref()
    }
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pipeline_details.is_none()`.
    pub fn pipeline_details(&self) -> &[crate::types::MultiplexProgramPipelineDetail] {
        self.pipeline_details.as_deref().unwrap_or_default()
    }
    /// The name of the multiplex program.
    pub fn program_name(&self) -> ::std::option::Option<&str> {
        self.program_name.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DeleteMultiplexProgramOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMultiplexProgramOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMultiplexProgramOutput`](crate::operation::delete_multiplex_program::DeleteMultiplexProgramOutput).
    pub fn builder() -> crate::operation::delete_multiplex_program::builders::DeleteMultiplexProgramOutputBuilder {
        crate::operation::delete_multiplex_program::builders::DeleteMultiplexProgramOutputBuilder::default()
    }
}

/// A builder for [`DeleteMultiplexProgramOutput`](crate::operation::delete_multiplex_program::DeleteMultiplexProgramOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteMultiplexProgramOutputBuilder {
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) multiplex_program_settings: ::std::option::Option<crate::types::MultiplexProgramSettings>,
    pub(crate) packet_identifiers_map: ::std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>,
    pub(crate) pipeline_details: ::std::option::Option<::std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>,
    pub(crate) program_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DeleteMultiplexProgramOutputBuilder {
    /// The MediaLive channel associated with the program.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The MediaLive channel associated with the program.
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// The MediaLive channel associated with the program.
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// The settings for this multiplex program.
    pub fn multiplex_program_settings(mut self, input: crate::types::MultiplexProgramSettings) -> Self {
        self.multiplex_program_settings = ::std::option::Option::Some(input);
        self
    }
    /// The settings for this multiplex program.
    pub fn set_multiplex_program_settings(mut self, input: ::std::option::Option<crate::types::MultiplexProgramSettings>) -> Self {
        self.multiplex_program_settings = input;
        self
    }
    /// The settings for this multiplex program.
    pub fn get_multiplex_program_settings(&self) -> &::std::option::Option<crate::types::MultiplexProgramSettings> {
        &self.multiplex_program_settings
    }
    /// The packet identifier map for this multiplex program.
    pub fn packet_identifiers_map(mut self, input: crate::types::MultiplexProgramPacketIdentifiersMap) -> Self {
        self.packet_identifiers_map = ::std::option::Option::Some(input);
        self
    }
    /// The packet identifier map for this multiplex program.
    pub fn set_packet_identifiers_map(mut self, input: ::std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap>) -> Self {
        self.packet_identifiers_map = input;
        self
    }
    /// The packet identifier map for this multiplex program.
    pub fn get_packet_identifiers_map(&self) -> &::std::option::Option<crate::types::MultiplexProgramPacketIdentifiersMap> {
        &self.packet_identifiers_map
    }
    /// Appends an item to `pipeline_details`.
    ///
    /// To override the contents of this collection use [`set_pipeline_details`](Self::set_pipeline_details).
    ///
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn pipeline_details(mut self, input: crate::types::MultiplexProgramPipelineDetail) -> Self {
        let mut v = self.pipeline_details.unwrap_or_default();
        v.push(input);
        self.pipeline_details = ::std::option::Option::Some(v);
        self
    }
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn set_pipeline_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>>) -> Self {
        self.pipeline_details = input;
        self
    }
    /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
    pub fn get_pipeline_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MultiplexProgramPipelineDetail>> {
        &self.pipeline_details
    }
    /// The name of the multiplex program.
    pub fn program_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.program_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the multiplex program.
    pub fn set_program_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// The name of the multiplex program.
    pub fn get_program_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.program_name
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteMultiplexProgramOutput`](crate::operation::delete_multiplex_program::DeleteMultiplexProgramOutput).
    pub fn build(self) -> crate::operation::delete_multiplex_program::DeleteMultiplexProgramOutput {
        crate::operation::delete_multiplex_program::DeleteMultiplexProgramOutput {
            channel_id: self.channel_id,
            multiplex_program_settings: self.multiplex_program_settings,
            packet_identifiers_map: self.packet_identifiers_map,
            pipeline_details: self.pipeline_details,
            program_name: self.program_name,
            _request_id: self._request_id,
        }
    }
}
