// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for DescribeChannelPlacementGroupResponse
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    pub arn: ::std::option::Option<::std::string::String>,
    /// Used in ListChannelPlacementGroupsResult
    pub channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// The ID of the Cluster that the Node belongs to.
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    pub id: ::std::option::Option<::std::string::String>,
    /// The name that you specified for the ChannelPlacementGroup.
    pub name: ::std::option::Option<::std::string::String>,
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    pub nodes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// The current state of the ChannelPlacementGroup.
    pub state: ::std::option::Option<crate::types::ChannelPlacementGroupState>,
    _request_id: Option<String>,
}
impl DescribeChannelPlacementGroupOutput {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Used in ListChannelPlacementGroupsResult
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[::std::string::String] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// The ID of the Cluster that the Node belongs to.
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The name that you specified for the ChannelPlacementGroup.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nodes.is_none()`.
    pub fn nodes(&self) -> &[::std::string::String] {
        self.nodes.as_deref().unwrap_or_default()
    }
    /// The current state of the ChannelPlacementGroup.
    pub fn state(&self) -> ::std::option::Option<&crate::types::ChannelPlacementGroupState> {
        self.state.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeChannelPlacementGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChannelPlacementGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelPlacementGroupOutput`](crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupOutput).
    pub fn builder() -> crate::operation::describe_channel_placement_group::builders::DescribeChannelPlacementGroupOutputBuilder {
        crate::operation::describe_channel_placement_group::builders::DescribeChannelPlacementGroupOutputBuilder::default()
    }
}

/// A builder for [`DescribeChannelPlacementGroupOutput`](crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeChannelPlacementGroupOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) nodes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) state: ::std::option::Option<crate::types::ChannelPlacementGroupState>,
    _request_id: Option<String>,
}
impl DescribeChannelPlacementGroupOutputBuilder {
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The ARN of this ChannelPlacementGroup. It is automatically assigned when the ChannelPlacementGroup is created.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// Used in ListChannelPlacementGroupsResult
    pub fn channels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input.into());
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// Used in ListChannelPlacementGroupsResult
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.channels = input;
        self
    }
    /// Used in ListChannelPlacementGroupsResult
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.channels
    }
    /// The ID of the Cluster that the Node belongs to.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the Cluster that the Node belongs to.
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// The ID of the Cluster that the Node belongs to.
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of the ChannelPlacementGroup. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// The name that you specified for the ChannelPlacementGroup.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name that you specified for the ChannelPlacementGroup.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name that you specified for the ChannelPlacementGroup.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `nodes`.
    ///
    /// To override the contents of this collection use [`set_nodes`](Self::set_nodes).
    ///
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    pub fn nodes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.nodes.unwrap_or_default();
        v.push(input.into());
        self.nodes = ::std::option::Option::Some(v);
        self
    }
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    pub fn set_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.nodes = input;
        self
    }
    /// An array with one item, which is the signle Node that is associated with the ChannelPlacementGroup.
    pub fn get_nodes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.nodes
    }
    /// The current state of the ChannelPlacementGroup.
    pub fn state(mut self, input: crate::types::ChannelPlacementGroupState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// The current state of the ChannelPlacementGroup.
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ChannelPlacementGroupState>) -> Self {
        self.state = input;
        self
    }
    /// The current state of the ChannelPlacementGroup.
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ChannelPlacementGroupState> {
        &self.state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeChannelPlacementGroupOutput`](crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupOutput).
    pub fn build(self) -> crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupOutput {
        crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupOutput {
            arn: self.arn,
            channels: self.channels,
            cluster_id: self.cluster_id,
            id: self.id,
            name: self.name,
            nodes: self.nodes,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
