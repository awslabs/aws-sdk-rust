// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to update an input.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateInputInput {
    /// Destination settings for PUSH type inputs.
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>>,
    /// Settings for the devices.
    pub input_devices: ::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>>,
    /// Unique ID of the input.
    pub input_id: ::std::option::Option<::std::string::String>,
    /// A list of security groups referenced by IDs to attach to the input.
    pub input_security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub media_connect_flows: ::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>>,
    /// Name of the input.
    pub name: ::std::option::Option<::std::string::String>,
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>>,
}
impl UpdateInputInput {
    /// Destination settings for PUSH type inputs.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::InputDestinationRequest] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// Settings for the devices.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_devices.is_none()`.
    pub fn input_devices(&self) -> &[crate::types::InputDeviceRequest] {
        self.input_devices.as_deref().unwrap_or_default()
    }
    /// Unique ID of the input.
    pub fn input_id(&self) -> ::std::option::Option<&str> {
        self.input_id.as_deref()
    }
    /// A list of security groups referenced by IDs to attach to the input.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_security_groups.is_none()`.
    pub fn input_security_groups(&self) -> &[::std::string::String] {
        self.input_security_groups.as_deref().unwrap_or_default()
    }
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.media_connect_flows.is_none()`.
    pub fn media_connect_flows(&self) -> &[crate::types::MediaConnectFlowRequest] {
        self.media_connect_flows.as_deref().unwrap_or_default()
    }
    /// Name of the input.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::InputSourceRequest] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl UpdateInputInput {
    /// Creates a new builder-style object to manufacture [`UpdateInputInput`](crate::operation::update_input::UpdateInputInput).
    pub fn builder() -> crate::operation::update_input::builders::UpdateInputInputBuilder {
        crate::operation::update_input::builders::UpdateInputInputBuilder::default()
    }
}

/// A builder for [`UpdateInputInput`](crate::operation::update_input::UpdateInputInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateInputInputBuilder {
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>>,
    pub(crate) input_devices: ::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>>,
    pub(crate) input_id: ::std::option::Option<::std::string::String>,
    pub(crate) input_security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) media_connect_flows: ::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>>,
}
impl UpdateInputInputBuilder {
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// Destination settings for PUSH type inputs.
    pub fn destinations(mut self, input: crate::types::InputDestinationRequest) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// Destination settings for PUSH type inputs.
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>>) -> Self {
        self.destinations = input;
        self
    }
    /// Destination settings for PUSH type inputs.
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>> {
        &self.destinations
    }
    /// Appends an item to `input_devices`.
    ///
    /// To override the contents of this collection use [`set_input_devices`](Self::set_input_devices).
    ///
    /// Settings for the devices.
    pub fn input_devices(mut self, input: crate::types::InputDeviceRequest) -> Self {
        let mut v = self.input_devices.unwrap_or_default();
        v.push(input);
        self.input_devices = ::std::option::Option::Some(v);
        self
    }
    /// Settings for the devices.
    pub fn set_input_devices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>>) -> Self {
        self.input_devices = input;
        self
    }
    /// Settings for the devices.
    pub fn get_input_devices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>> {
        &self.input_devices
    }
    /// Unique ID of the input.
    /// This field is required.
    pub fn input_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Unique ID of the input.
    pub fn set_input_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_id = input;
        self
    }
    /// Unique ID of the input.
    pub fn get_input_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_id
    }
    /// Appends an item to `input_security_groups`.
    ///
    /// To override the contents of this collection use [`set_input_security_groups`](Self::set_input_security_groups).
    ///
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn input_security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.input_security_groups.unwrap_or_default();
        v.push(input.into());
        self.input_security_groups = ::std::option::Option::Some(v);
        self
    }
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn set_input_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.input_security_groups = input;
        self
    }
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn get_input_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.input_security_groups
    }
    /// Appends an item to `media_connect_flows`.
    ///
    /// To override the contents of this collection use [`set_media_connect_flows`](Self::set_media_connect_flows).
    ///
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn media_connect_flows(mut self, input: crate::types::MediaConnectFlowRequest) -> Self {
        let mut v = self.media_connect_flows.unwrap_or_default();
        v.push(input);
        self.media_connect_flows = ::std::option::Option::Some(v);
        self
    }
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn set_media_connect_flows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>>) -> Self {
        self.media_connect_flows = input;
        self
    }
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn get_media_connect_flows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>> {
        &self.media_connect_flows
    }
    /// Name of the input.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the input.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Name of the input.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn sources(mut self, input: crate::types::InputSourceRequest) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>>) -> Self {
        self.sources = input;
        self
    }
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`UpdateInputInput`](crate::operation::update_input::UpdateInputInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_input::UpdateInputInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_input::UpdateInputInput {
            destinations: self.destinations,
            input_devices: self.input_devices,
            input_id: self.input_id,
            input_security_groups: self.input_security_groups,
            media_connect_flows: self.media_connect_flows,
            name: self.name,
            role_arn: self.role_arn,
            sources: self.sources,
        })
    }
}
