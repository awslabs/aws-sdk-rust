// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_input::_update_input_output::UpdateInputOutputBuilder;

pub use crate::operation::update_input::_update_input_input::UpdateInputInputBuilder;

impl UpdateInputInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_input::UpdateInputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_input::UpdateInputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_input();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateInput`.
///
/// Updates an input.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateInputFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_input::builders::UpdateInputInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_input::UpdateInputOutput,
        crate::operation::update_input::UpdateInputError,
    > for UpdateInputFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_input::UpdateInputOutput,
            crate::operation::update_input::UpdateInputError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateInputFluentBuilder {
    /// Creates a new `UpdateInput`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateInput as a reference.
    pub fn as_input(&self) -> &crate::operation::update_input::builders::UpdateInputInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_input::UpdateInputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_input::UpdateInputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_input::UpdateInput::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_input::UpdateInput::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_input::UpdateInputOutput,
        crate::operation::update_input::UpdateInputError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `Destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// Destination settings for PUSH type inputs.
    pub fn destinations(mut self, input: crate::types::InputDestinationRequest) -> Self {
        self.inner = self.inner.destinations(input);
        self
    }
    /// Destination settings for PUSH type inputs.
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>>) -> Self {
        self.inner = self.inner.set_destinations(input);
        self
    }
    /// Destination settings for PUSH type inputs.
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputDestinationRequest>> {
        self.inner.get_destinations()
    }
    /// Appends an item to `InputDevices`.
    ///
    /// To override the contents of this collection use [`set_input_devices`](Self::set_input_devices).
    ///
    /// Settings for the devices.
    pub fn input_devices(mut self, input: crate::types::InputDeviceRequest) -> Self {
        self.inner = self.inner.input_devices(input);
        self
    }
    /// Settings for the devices.
    pub fn set_input_devices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>>) -> Self {
        self.inner = self.inner.set_input_devices(input);
        self
    }
    /// Settings for the devices.
    pub fn get_input_devices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputDeviceRequest>> {
        self.inner.get_input_devices()
    }
    /// Unique ID of the input.
    pub fn input_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input_id(input.into());
        self
    }
    /// Unique ID of the input.
    pub fn set_input_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_input_id(input);
        self
    }
    /// Unique ID of the input.
    pub fn get_input_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_input_id()
    }
    /// Appends an item to `InputSecurityGroups`.
    ///
    /// To override the contents of this collection use [`set_input_security_groups`](Self::set_input_security_groups).
    ///
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn input_security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input_security_groups(input.into());
        self
    }
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn set_input_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_input_security_groups(input);
        self
    }
    /// A list of security groups referenced by IDs to attach to the input.
    pub fn get_input_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_input_security_groups()
    }
    /// Appends an item to `MediaConnectFlows`.
    ///
    /// To override the contents of this collection use [`set_media_connect_flows`](Self::set_media_connect_flows).
    ///
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn media_connect_flows(mut self, input: crate::types::MediaConnectFlowRequest) -> Self {
        self.inner = self.inner.media_connect_flows(input);
        self
    }
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn set_media_connect_flows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>>) -> Self {
        self.inner = self.inner.set_media_connect_flows(input);
        self
    }
    /// A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues.
    pub fn get_media_connect_flows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaConnectFlowRequest>> {
        self.inner.get_media_connect_flows()
    }
    /// Name of the input.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// Name of the input.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Name of the input.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// Appends an item to `Sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn sources(mut self, input: crate::types::InputSourceRequest) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>>) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    /// The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty.
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputSourceRequest>> {
        self.inner.get_sources()
    }
}
