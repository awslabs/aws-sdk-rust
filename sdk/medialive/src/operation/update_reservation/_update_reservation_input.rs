// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Request to update a reservation
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateReservationInput {
    /// Name of the reservation
    pub name: ::std::option::Option<::std::string::String>,
    /// Renewal settings for the reservation
    pub renewal_settings: ::std::option::Option<crate::types::RenewalSettings>,
    /// Unique reservation ID, e.g. '1234567'
    pub reservation_id: ::std::option::Option<::std::string::String>,
}
impl UpdateReservationInput {
    /// Name of the reservation
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Renewal settings for the reservation
    pub fn renewal_settings(&self) -> ::std::option::Option<&crate::types::RenewalSettings> {
        self.renewal_settings.as_ref()
    }
    /// Unique reservation ID, e.g. '1234567'
    pub fn reservation_id(&self) -> ::std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
}
impl UpdateReservationInput {
    /// Creates a new builder-style object to manufacture [`UpdateReservationInput`](crate::operation::update_reservation::UpdateReservationInput).
    pub fn builder() -> crate::operation::update_reservation::builders::UpdateReservationInputBuilder {
        crate::operation::update_reservation::builders::UpdateReservationInputBuilder::default()
    }
}

/// A builder for [`UpdateReservationInput`](crate::operation::update_reservation::UpdateReservationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateReservationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) renewal_settings: ::std::option::Option<crate::types::RenewalSettings>,
    pub(crate) reservation_id: ::std::option::Option<::std::string::String>,
}
impl UpdateReservationInputBuilder {
    /// Name of the reservation
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the reservation
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Name of the reservation
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Renewal settings for the reservation
    pub fn renewal_settings(mut self, input: crate::types::RenewalSettings) -> Self {
        self.renewal_settings = ::std::option::Option::Some(input);
        self
    }
    /// Renewal settings for the reservation
    pub fn set_renewal_settings(mut self, input: ::std::option::Option<crate::types::RenewalSettings>) -> Self {
        self.renewal_settings = input;
        self
    }
    /// Renewal settings for the reservation
    pub fn get_renewal_settings(&self) -> &::std::option::Option<crate::types::RenewalSettings> {
        &self.renewal_settings
    }
    /// Unique reservation ID, e.g. '1234567'
    /// This field is required.
    pub fn reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Unique reservation ID, e.g. '1234567'
    pub fn set_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_id = input;
        self
    }
    /// Unique reservation ID, e.g. '1234567'
    pub fn get_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_id
    }
    /// Consumes the builder and constructs a [`UpdateReservationInput`](crate::operation::update_reservation::UpdateReservationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_reservation::UpdateReservationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_reservation::UpdateReservationInput {
            name: self.name,
            renewal_settings: self.renewal_settings,
            reservation_id: self.reservation_id,
        })
    }
}
