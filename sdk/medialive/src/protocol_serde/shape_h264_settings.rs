// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_h264_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::H264Settings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_1.as_str());
    }
    if let Some(var_2) = &input.afd_signaling {
        object.key("afdSignaling").string(var_2.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if input.buf_fill_pct != 0 {
        object.key("bufFillPct").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.buf_fill_pct).into()),
        );
    }
    if input.buf_size != 0 {
        object.key("bufSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.buf_size).into()),
        );
    }
    if let Some(var_3) = &input.color_metadata {
        object.key("colorMetadata").string(var_3.as_str());
    }
    if let Some(var_4) = &input.color_space_settings {
        #[allow(unused_mut)]
        let mut object_5 = object.key("colorSpaceSettings").start_object();
        crate::protocol_serde::shape_h264_color_space_settings::ser_h264_color_space_settings(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.entropy_encoding {
        object.key("entropyEncoding").string(var_6.as_str());
    }
    if let Some(var_7) = &input.filter_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("filterSettings").start_object();
        crate::protocol_serde::shape_h264_filter_settings::ser_h264_filter_settings(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.fixed_afd {
        object.key("fixedAfd").string(var_9.as_str());
    }
    if let Some(var_10) = &input.flicker_aq {
        object.key("flickerAq").string(var_10.as_str());
    }
    if let Some(var_11) = &input.force_field_pictures {
        object.key("forceFieldPictures").string(var_11.as_str());
    }
    if let Some(var_12) = &input.framerate_control {
        object.key("framerateControl").string(var_12.as_str());
    }
    if input.framerate_denominator != 0 {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    if input.framerate_numerator != 0 {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if let Some(var_13) = &input.gop_b_reference {
        object.key("gopBReference").string(var_13.as_str());
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_num_b_frames != 0 {
        object.key("gopNumBFrames").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gop_num_b_frames).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_14) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_14.as_str());
    }
    if let Some(var_15) = &input.level {
        object.key("level").string(var_15.as_str());
    }
    if let Some(var_16) = &input.look_ahead_rate_control {
        object.key("lookAheadRateControl").string(var_16.as_str());
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.min_i_interval != 0 {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_i_interval).into()),
        );
    }
    if input.num_ref_frames != 0 {
        object.key("numRefFrames").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.num_ref_frames).into()),
        );
    }
    if let Some(var_17) = &input.par_control {
        object.key("parControl").string(var_17.as_str());
    }
    if input.par_denominator != 0 {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.par_denominator).into()),
        );
    }
    if input.par_numerator != 0 {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.par_numerator).into()),
        );
    }
    if let Some(var_18) = &input.profile {
        object.key("profile").string(var_18.as_str());
    }
    if let Some(var_19) = &input.quality_level {
        object.key("qualityLevel").string(var_19.as_str());
    }
    if input.qvbr_quality_level != 0 {
        object.key("qvbrQualityLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.qvbr_quality_level).into()),
        );
    }
    if let Some(var_20) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_20.as_str());
    }
    if let Some(var_21) = &input.scan_type {
        object.key("scanType").string(var_21.as_str());
    }
    if let Some(var_22) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_22.as_str());
    }
    if input.slices != 0 {
        object.key("slices").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.slices).into()),
        );
    }
    if input.softness != 0 {
        object.key("softness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.softness).into()),
        );
    }
    if let Some(var_23) = &input.spatial_aq {
        object.key("spatialAq").string(var_23.as_str());
    }
    if let Some(var_24) = &input.subgop_length {
        object.key("subgopLength").string(var_24.as_str());
    }
    if let Some(var_25) = &input.syntax {
        object.key("syntax").string(var_25.as_str());
    }
    if let Some(var_26) = &input.temporal_aq {
        object.key("temporalAq").string(var_26.as_str());
    }
    if let Some(var_27) = &input.timecode_insertion {
        object.key("timecodeInsertion").string(var_27.as_str());
    }
    if let Some(var_28) = &input.timecode_burnin_settings {
        #[allow(unused_mut)]
        let mut object_29 = object.key("timecodeBurninSettings").start_object();
        crate::protocol_serde::shape_timecode_burnin_settings::ser_timecode_burnin_settings(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    Ok(())
}

pub(crate) fn de_h264_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::H264Settings>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::H264SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adaptiveQuantization" => {
                                builder = builder.set_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264AdaptiveQuantization::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "afdSignaling" => {
                                builder = builder.set_afd_signaling(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::AfdSignaling::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "bitrate" => {
                                builder = builder.set_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bufFillPct" => {
                                builder = builder.set_buf_fill_pct(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bufSize" => {
                                builder = builder.set_buf_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "colorMetadata" => {
                                builder = builder.set_color_metadata(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264ColorMetadata::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "colorSpaceSettings" => {
                                builder = builder.set_color_space_settings(
                                    crate::protocol_serde::shape_h264_color_space_settings::de_h264_color_space_settings(tokens)?
                                );
                            }
                            "entropyEncoding" => {
                                builder = builder.set_entropy_encoding(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264EntropyEncoding::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "filterSettings" => {
                                builder = builder.set_filter_settings(
                                    crate::protocol_serde::shape_h264_filter_settings::de_h264_filter_settings(tokens)?
                                );
                            }
                            "fixedAfd" => {
                                builder = builder.set_fixed_afd(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::FixedAfd::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "flickerAq" => {
                                builder = builder.set_flicker_aq(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264FlickerAq::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "forceFieldPictures" => {
                                builder = builder.set_force_field_pictures(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264ForceFieldPictures::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateControl" => {
                                builder = builder.set_framerate_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264FramerateControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateDenominator" => {
                                builder = builder.set_framerate_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "framerateNumerator" => {
                                builder = builder.set_framerate_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopBReference" => {
                                builder = builder.set_gop_b_reference(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264GopBReference::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "gopClosedCadence" => {
                                builder = builder.set_gop_closed_cadence(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopNumBFrames" => {
                                builder = builder.set_gop_num_b_frames(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopSize" => {
                                builder = builder.set_gop_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "gopSizeUnits" => {
                                builder = builder.set_gop_size_units(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264GopSizeUnits::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "level" => {
                                builder = builder.set_level(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264Level::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "lookAheadRateControl" => {
                                builder = builder.set_look_ahead_rate_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264LookAheadRateControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "maxBitrate" => {
                                builder = builder.set_max_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "minIInterval" => {
                                builder = builder.set_min_i_interval(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "numRefFrames" => {
                                builder = builder.set_num_ref_frames(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "parControl" => {
                                builder = builder.set_par_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264ParControl::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "parDenominator" => {
                                builder = builder.set_par_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "parNumerator" => {
                                builder = builder.set_par_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "profile" => {
                                builder = builder.set_profile(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264Profile::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "qualityLevel" => {
                                builder = builder.set_quality_level(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264QualityLevel::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "qvbrQualityLevel" => {
                                builder = builder.set_qvbr_quality_level(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "rateControlMode" => {
                                builder = builder.set_rate_control_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264RateControlMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "scanType" => {
                                builder = builder.set_scan_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264ScanType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "sceneChangeDetect" => {
                                builder = builder.set_scene_change_detect(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264SceneChangeDetect::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "slices" => {
                                builder = builder.set_slices(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "softness" => {
                                builder = builder.set_softness(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "spatialAq" => {
                                builder = builder.set_spatial_aq(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264SpatialAq::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "subgopLength" => {
                                builder = builder.set_subgop_length(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264SubGopLength::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "syntax" => {
                                builder = builder.set_syntax(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264Syntax::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "temporalAq" => {
                                builder = builder.set_temporal_aq(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264TemporalAq::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeInsertion" => {
                                builder = builder.set_timecode_insertion(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264TimecodeInsertionBehavior::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeBurninSettings" => {
                                builder = builder.set_timecode_burnin_settings(
                                    crate::protocol_serde::shape_timecode_burnin_settings::de_timecode_burnin_settings(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
