// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_output(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Output,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.audio_description_names {
        let mut array_2 = object.key("audioDescriptionNames").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.caption_description_names {
        let mut array_5 = object.key("captionDescriptionNames").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.output_name {
        object.key("outputName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("outputSettings").start_object();
        crate::protocol_serde::shape_output_settings::ser_output_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.video_description_name {
        object.key("videoDescriptionName").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_output<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Output>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OutputBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "audioDescriptionNames" => {
                            builder = builder.set_audio_description_names(crate::protocol_serde::shape_list_of_string::de_list_of_string(tokens)?);
                        }
                        "captionDescriptionNames" => {
                            builder = builder.set_caption_description_names(crate::protocol_serde::shape_list_of_string::de_list_of_string(tokens)?);
                        }
                        "outputName" => {
                            builder = builder.set_output_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "outputSettings" => {
                            builder = builder.set_output_settings(crate::protocol_serde::shape_output_settings::de_output_settings(tokens)?);
                        }
                        "videoDescriptionName" => {
                            builder = builder.set_video_description_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::output_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
