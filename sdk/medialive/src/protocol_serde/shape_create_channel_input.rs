// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_channel_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_channel::CreateChannelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cdi_input_specification {
        #[allow(unused_mut)]
        let mut object_2 = object.key("cdiInputSpecification").start_object();
        crate::protocol_serde::shape_cdi_input_specification::ser_cdi_input_specification(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.channel_class {
        object.key("channelClass").string(var_3.as_str());
    }
    if let Some(var_4) = &input.destinations {
        let mut array_5 = object.key("destinations").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_output_destination::ser_output_destination(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.encoder_settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("encoderSettings").start_object();
        crate::protocol_serde::shape_encoder_settings::ser_encoder_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.input_attachments {
        let mut array_11 = object.key("inputAttachments").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_input_attachment::ser_input_attachment(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.input_specification {
        #[allow(unused_mut)]
        let mut object_15 = object.key("inputSpecification").start_object();
        crate::protocol_serde::shape_input_specification::ser_input_specification(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.log_level {
        object.key("logLevel").string(var_16.as_str());
    }
    if let Some(var_17) = &input.maintenance {
        #[allow(unused_mut)]
        let mut object_18 = object.key("maintenance").start_object();
        crate::protocol_serde::shape_maintenance_create_settings::ser_maintenance_create_settings(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.name {
        object.key("name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.request_id {
        object.key("requestId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.reserved {
        object.key("reserved").string(var_21.as_str());
    }
    if let Some(var_22) = &input.role_arn {
        object.key("roleArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.tags {
        #[allow(unused_mut)]
        let mut object_24 = object.key("tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.vpc {
        #[allow(unused_mut)]
        let mut object_28 = object.key("vpc").start_object();
        crate::protocol_serde::shape_vpc_output_settings::ser_vpc_output_settings(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}
