// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_av1_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Av1Settings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.afd_signaling {
        object.key("afdSignaling").string(var_1.as_str());
    }
    if let Some(var_2) = &input.buf_size {
        object.key("bufSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.color_space_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("colorSpaceSettings").start_object();
        crate::protocol_serde::shape_av1_color_space_settings::ser_av1_color_space_settings(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.fixed_afd {
        object.key("fixedAfd").string(var_5.as_str());
    }
    if let Some(var_6) = &input.framerate_denominator {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.framerate_numerator {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.gop_size {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_9.as_str());
    }
    if let Some(var_10) = &input.level {
        object.key("level").string(var_10.as_str());
    }
    if let Some(var_11) = &input.look_ahead_rate_control {
        object.key("lookAheadRateControl").string(var_11.as_str());
    }
    if let Some(var_12) = &input.max_bitrate {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.min_i_interval {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.par_denominator {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.par_numerator {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.qvbr_quality_level {
        object.key("qvbrQualityLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_17.as_str());
    }
    if let Some(var_18) = &input.timecode_burnin_settings {
        #[allow(unused_mut)]
        let mut object_19 = object.key("timecodeBurninSettings").start_object();
        crate::protocol_serde::shape_timecode_burnin_settings::ser_timecode_burnin_settings(&mut object_19, var_18)?;
        object_19.finish();
    }
    Ok(())
}

pub(crate) fn de_av1_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Av1Settings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Av1SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "afdSignaling" => {
                            builder = builder.set_afd_signaling(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AfdSignaling::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "bufSize" => {
                            builder = builder.set_buf_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "colorSpaceSettings" => {
                            builder = builder.set_color_space_settings(
                                crate::protocol_serde::shape_av1_color_space_settings::de_av1_color_space_settings(tokens)?,
                            );
                        }
                        "fixedAfd" => {
                            builder = builder.set_fixed_afd(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FixedAfd::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateDenominator" => {
                            builder = builder.set_framerate_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "framerateNumerator" => {
                            builder = builder.set_framerate_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "gopSize" => {
                            builder = builder
                                .set_gop_size(::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()));
                        }
                        "gopSizeUnits" => {
                            builder = builder.set_gop_size_units(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Av1GopSizeUnits::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "level" => {
                            builder = builder.set_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Av1Level::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "lookAheadRateControl" => {
                            builder = builder.set_look_ahead_rate_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Av1LookAheadRateControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "maxBitrate" => {
                            builder = builder.set_max_bitrate(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "minIInterval" => {
                            builder = builder.set_min_i_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "parDenominator" => {
                            builder = builder.set_par_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "parNumerator" => {
                            builder = builder.set_par_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "qvbrQualityLevel" => {
                            builder = builder.set_qvbr_quality_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "sceneChangeDetect" => {
                            builder = builder.set_scene_change_detect(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Av1SceneChangeDetect::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "timecodeBurninSettings" => {
                            builder = builder.set_timecode_burnin_settings(
                                crate::protocol_serde::shape_timecode_burnin_settings::de_timecode_burnin_settings(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::av1_settings_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
