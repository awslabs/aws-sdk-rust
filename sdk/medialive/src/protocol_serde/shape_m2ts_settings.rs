// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_m2ts_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::M2tsSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.absent_input_audio_behavior {
        object
            .key("absentInputAudioBehavior")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.arib {
        object.key("arib").string(var_2.as_str());
    }
    if let Some(var_3) = &input.arib_captions_pid {
        object.key("aribCaptionsPid").string(var_3.as_str());
    }
    if let Some(var_4) = &input.arib_captions_pid_control {
        object.key("aribCaptionsPidControl").string(var_4.as_str());
    }
    if let Some(var_5) = &input.audio_buffer_model {
        object.key("audioBufferModel").string(var_5.as_str());
    }
    if input.audio_frames_per_pes != 0 {
        object.key("audioFramesPerPes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.audio_frames_per_pes).into()),
        );
    }
    if let Some(var_6) = &input.audio_pids {
        object.key("audioPids").string(var_6.as_str());
    }
    if let Some(var_7) = &input.audio_stream_type {
        object.key("audioStreamType").string(var_7.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if let Some(var_8) = &input.buffer_model {
        object.key("bufferModel").string(var_8.as_str());
    }
    if let Some(var_9) = &input.cc_descriptor {
        object.key("ccDescriptor").string(var_9.as_str());
    }
    if let Some(var_10) = &input.dvb_nit_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("dvbNitSettings").start_object();
        crate::protocol_serde::shape_dvb_nit_settings::ser_dvb_nit_settings(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.dvb_sdt_settings {
        #[allow(unused_mut)]
        let mut object_13 = object.key("dvbSdtSettings").start_object();
        crate::protocol_serde::shape_dvb_sdt_settings::ser_dvb_sdt_settings(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.dvb_sub_pids {
        object.key("dvbSubPids").string(var_14.as_str());
    }
    if let Some(var_15) = &input.dvb_tdt_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("dvbTdtSettings").start_object();
        crate::protocol_serde::shape_dvb_tdt_settings::ser_dvb_tdt_settings(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.dvb_teletext_pid {
        object.key("dvbTeletextPid").string(var_17.as_str());
    }
    if let Some(var_18) = &input.ebif {
        object.key("ebif").string(var_18.as_str());
    }
    if let Some(var_19) = &input.ebp_audio_interval {
        object.key("ebpAudioInterval").string(var_19.as_str());
    }
    if input.ebp_lookahead_ms != 0 {
        object.key("ebpLookaheadMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ebp_lookahead_ms).into()),
        );
    }
    if let Some(var_20) = &input.ebp_placement {
        object.key("ebpPlacement").string(var_20.as_str());
    }
    if let Some(var_21) = &input.ecm_pid {
        object.key("ecmPid").string(var_21.as_str());
    }
    if let Some(var_22) = &input.es_rate_in_pes {
        object.key("esRateInPes").string(var_22.as_str());
    }
    if let Some(var_23) = &input.etv_platform_pid {
        object.key("etvPlatformPid").string(var_23.as_str());
    }
    if let Some(var_24) = &input.etv_signal_pid {
        object.key("etvSignalPid").string(var_24.as_str());
    }
    if input.fragment_time != 0.0 {
        object.key("fragmentTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.fragment_time).into()),
        );
    }
    if let Some(var_25) = &input.klv {
        object.key("klv").string(var_25.as_str());
    }
    if let Some(var_26) = &input.klv_data_pids {
        object.key("klvDataPids").string(var_26.as_str());
    }
    if let Some(var_27) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_27.as_str());
    }
    if input.null_packet_bitrate != 0.0 {
        object.key("nullPacketBitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.null_packet_bitrate).into()),
        );
    }
    if input.pat_interval != 0 {
        object.key("patInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pat_interval).into()),
        );
    }
    if let Some(var_28) = &input.pcr_control {
        object.key("pcrControl").string(var_28.as_str());
    }
    if input.pcr_period != 0 {
        object.key("pcrPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pcr_period).into()),
        );
    }
    if let Some(var_29) = &input.pcr_pid {
        object.key("pcrPid").string(var_29.as_str());
    }
    if input.pmt_interval != 0 {
        object.key("pmtInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pmt_interval).into()),
        );
    }
    if let Some(var_30) = &input.pmt_pid {
        object.key("pmtPid").string(var_30.as_str());
    }
    if input.program_num != 0 {
        object.key("programNum").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_num).into()),
        );
    }
    if let Some(var_31) = &input.rate_mode {
        object.key("rateMode").string(var_31.as_str());
    }
    if let Some(var_32) = &input.scte27_pids {
        object.key("scte27Pids").string(var_32.as_str());
    }
    if let Some(var_33) = &input.scte35_control {
        object.key("scte35Control").string(var_33.as_str());
    }
    if let Some(var_34) = &input.scte35_pid {
        object.key("scte35Pid").string(var_34.as_str());
    }
    if let Some(var_35) = &input.segmentation_markers {
        object.key("segmentationMarkers").string(var_35.as_str());
    }
    if let Some(var_36) = &input.segmentation_style {
        object.key("segmentationStyle").string(var_36.as_str());
    }
    if input.segmentation_time != 0.0 {
        object.key("segmentationTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.segmentation_time).into()),
        );
    }
    if let Some(var_37) = &input.timed_metadata_behavior {
        object.key("timedMetadataBehavior").string(var_37.as_str());
    }
    if let Some(var_38) = &input.timed_metadata_pid {
        object.key("timedMetadataPid").string(var_38.as_str());
    }
    if input.transport_stream_id != 0 {
        object.key("transportStreamId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.transport_stream_id).into()),
        );
    }
    if let Some(var_39) = &input.video_pid {
        object.key("videoPid").string(var_39.as_str());
    }
    if input.scte35_preroll_pullup_milliseconds != 0.0 {
        object.key("scte35PrerollPullupMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.scte35_preroll_pullup_milliseconds).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_m2ts_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::M2tsSettings>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::M2tsSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "absentInputAudioBehavior" => {
                                builder = builder.set_absent_input_audio_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsAbsentInputAudioBehavior::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "arib" => {
                                builder = builder.set_arib(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::M2tsArib::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "aribCaptionsPid" => {
                                builder = builder.set_arib_captions_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "aribCaptionsPidControl" => {
                                builder = builder.set_arib_captions_pid_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsAribCaptionsPidControl::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "audioBufferModel" => {
                                builder = builder.set_audio_buffer_model(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsAudioBufferModel::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "audioFramesPerPes" => {
                                builder = builder.set_audio_frames_per_pes(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "audioPids" => {
                                builder = builder.set_audio_pids(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "audioStreamType" => {
                                builder = builder.set_audio_stream_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsAudioStreamType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "bitrate" => {
                                builder = builder.set_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bufferModel" => {
                                builder = builder.set_buffer_model(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsBufferModel::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ccDescriptor" => {
                                builder = builder.set_cc_descriptor(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsCcDescriptor::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "dvbNitSettings" => {
                                builder = builder.set_dvb_nit_settings(
                                    crate::protocol_serde::shape_dvb_nit_settings::de_dvb_nit_settings(tokens)?
                                );
                            }
                            "dvbSdtSettings" => {
                                builder = builder.set_dvb_sdt_settings(
                                    crate::protocol_serde::shape_dvb_sdt_settings::de_dvb_sdt_settings(tokens)?
                                );
                            }
                            "dvbSubPids" => {
                                builder = builder.set_dvb_sub_pids(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "dvbTdtSettings" => {
                                builder = builder.set_dvb_tdt_settings(
                                    crate::protocol_serde::shape_dvb_tdt_settings::de_dvb_tdt_settings(tokens)?
                                );
                            }
                            "dvbTeletextPid" => {
                                builder = builder.set_dvb_teletext_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ebif" => {
                                builder = builder.set_ebif(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsEbifControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ebpAudioInterval" => {
                                builder = builder.set_ebp_audio_interval(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsAudioInterval::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ebpLookaheadMs" => {
                                builder = builder.set_ebp_lookahead_ms(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ebpPlacement" => {
                                builder = builder.set_ebp_placement(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsEbpPlacement::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ecmPid" => {
                                builder = builder.set_ecm_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "esRateInPes" => {
                                builder = builder.set_es_rate_in_pes(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsEsRateInPes::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "etvPlatformPid" => {
                                builder = builder.set_etv_platform_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "etvSignalPid" => {
                                builder = builder.set_etv_signal_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "fragmentTime" => {
                                builder = builder.set_fragment_time(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "klv" => {
                                builder = builder.set_klv(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::M2tsKlv::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "klvDataPids" => {
                                builder = builder.set_klv_data_pids(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "nielsenId3Behavior" => {
                                builder = builder.set_nielsen_id3_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsNielsenId3Behavior::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "nullPacketBitrate" => {
                                builder = builder.set_null_packet_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "patInterval" => {
                                builder = builder.set_pat_interval(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pcrControl" => {
                                builder = builder.set_pcr_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::M2tsPcrControl::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "pcrPeriod" => {
                                builder = builder.set_pcr_period(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pcrPid" => {
                                builder = builder.set_pcr_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "pmtInterval" => {
                                builder = builder.set_pmt_interval(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pmtPid" => {
                                builder = builder.set_pmt_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "programNum" => {
                                builder = builder.set_program_num(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "rateMode" => {
                                builder = builder.set_rate_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::M2tsRateMode::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "scte27Pids" => {
                                builder = builder.set_scte27_pids(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "scte35Control" => {
                                builder = builder.set_scte35_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsScte35Control::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "scte35Pid" => {
                                builder = builder.set_scte35_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "segmentationMarkers" => {
                                builder = builder.set_segmentation_markers(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsSegmentationMarkers::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "segmentationStyle" => {
                                builder = builder.set_segmentation_style(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsSegmentationStyle::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "segmentationTime" => {
                                builder = builder.set_segmentation_time(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "timedMetadataBehavior" => {
                                builder = builder.set_timed_metadata_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::M2tsTimedMetadataBehavior::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timedMetadataPid" => {
                                builder = builder.set_timed_metadata_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "transportStreamId" => {
                                builder = builder.set_transport_stream_id(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "videoPid" => {
                                builder = builder.set_video_pid(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "scte35PrerollPullupMilliseconds" => {
                                builder = builder.set_scte35_preroll_pullup_milliseconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
