// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_channel::UpdateChannelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cdi_input_specification {
        #[allow(unused_mut)]
        let mut object_2 = object.key("cdiInputSpecification").start_object();
        crate::protocol_serde::shape_cdi_input_specification::ser_cdi_input_specification(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.destinations {
        let mut array_4 = object.key("destinations").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_output_destination::ser_output_destination(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.encoder_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("encoderSettings").start_object();
        crate::protocol_serde::shape_encoder_settings::ser_encoder_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.input_attachments {
        let mut array_10 = object.key("inputAttachments").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_input_attachment::ser_input_attachment(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.input_specification {
        #[allow(unused_mut)]
        let mut object_14 = object.key("inputSpecification").start_object();
        crate::protocol_serde::shape_input_specification::ser_input_specification(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.log_level {
        object.key("logLevel").string(var_15.as_str());
    }
    if let Some(var_16) = &input.maintenance {
        #[allow(unused_mut)]
        let mut object_17 = object.key("maintenance").start_object();
        crate::protocol_serde::shape_maintenance_update_settings::ser_maintenance_update_settings(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.name {
        object.key("name").string(var_18.as_str());
    }
    if let Some(var_19) = &input.role_arn {
        object.key("roleArn").string(var_19.as_str());
    }
    Ok(())
}
