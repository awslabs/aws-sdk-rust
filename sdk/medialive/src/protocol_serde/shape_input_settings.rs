// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InputSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.audio_selectors {
        let mut array_2 = object.key("audioSelectors").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_audio_selector::ser_audio_selector(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.caption_selectors {
        let mut array_6 = object.key("captionSelectors").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_caption_selector::ser_caption_selector(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.deblock_filter {
        object.key("deblockFilter").string(var_9.as_str());
    }
    if let Some(var_10) = &input.denoise_filter {
        object.key("denoiseFilter").string(var_10.as_str());
    }
    if input.filter_strength != 0 {
        object.key("filterStrength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.filter_strength).into()),
        );
    }
    if let Some(var_11) = &input.input_filter {
        object.key("inputFilter").string(var_11.as_str());
    }
    if let Some(var_12) = &input.network_input_settings {
        #[allow(unused_mut)]
        let mut object_13 = object.key("networkInputSettings").start_object();
        crate::protocol_serde::shape_network_input_settings::ser_network_input_settings(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if input.scte35_pid != 0 {
        object.key("scte35Pid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scte35_pid).into()),
        );
    }
    if let Some(var_14) = &input.smpte2038_data_preference {
        object
            .key("smpte2038DataPreference")
            .string(var_14.as_str());
    }
    if let Some(var_15) = &input.source_end_behavior {
        object.key("sourceEndBehavior").string(var_15.as_str());
    }
    if let Some(var_16) = &input.video_selector {
        #[allow(unused_mut)]
        let mut object_17 = object.key("videoSelector").start_object();
        crate::protocol_serde::shape_video_selector::ser_video_selector(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}

pub(crate) fn de_input_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::InputSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InputSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "audioSelectors" => {
                                builder = builder.set_audio_selectors(
                                    crate::protocol_serde::shape___list_of_audio_selector::de___list_of_audio_selector(tokens)?
                                );
                            }
                            "captionSelectors" => {
                                builder = builder.set_caption_selectors(
                                    crate::protocol_serde::shape___list_of_caption_selector::de___list_of_caption_selector(tokens)?
                                );
                            }
                            "deblockFilter" => {
                                builder = builder.set_deblock_filter(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputDeblockFilter::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "denoiseFilter" => {
                                builder = builder.set_denoise_filter(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputDenoiseFilter::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "filterStrength" => {
                                builder = builder.set_filter_strength(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "inputFilter" => {
                                builder = builder.set_input_filter(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::InputFilter::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "networkInputSettings" => {
                                builder = builder.set_network_input_settings(
                                    crate::protocol_serde::shape_network_input_settings::de_network_input_settings(tokens)?
                                );
                            }
                            "scte35Pid" => {
                                builder = builder.set_scte35_pid(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "smpte2038DataPreference" => {
                                builder = builder.set_smpte2038_data_preference(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Smpte2038DataPreference::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "sourceEndBehavior" => {
                                builder = builder.set_source_end_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputSourceEndBehavior::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "videoSelector" => {
                                builder = builder.set_video_selector(
                                    crate::protocol_serde::shape_video_selector::de_video_selector(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
