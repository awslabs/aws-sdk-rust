// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_multiplex_m2ts_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MultiplexM2tsSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.absent_input_audio_behavior {
        object.key("absentInputAudioBehavior").string(var_1.as_str());
    }
    if let Some(var_2) = &input.arib {
        object.key("arib").string(var_2.as_str());
    }
    if let Some(var_3) = &input.audio_buffer_model {
        object.key("audioBufferModel").string(var_3.as_str());
    }
    if let Some(var_4) = &input.audio_frames_per_pes {
        object.key("audioFramesPerPes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.audio_stream_type {
        object.key("audioStreamType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cc_descriptor {
        object.key("ccDescriptor").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ebif {
        object.key("ebif").string(var_7.as_str());
    }
    if let Some(var_8) = &input.es_rate_in_pes {
        object.key("esRateInPes").string(var_8.as_str());
    }
    if let Some(var_9) = &input.klv {
        object.key("klv").string(var_9.as_str());
    }
    if let Some(var_10) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_10.as_str());
    }
    if let Some(var_11) = &input.pcr_control {
        object.key("pcrControl").string(var_11.as_str());
    }
    if let Some(var_12) = &input.pcr_period {
        object.key("pcrPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.scte35_control {
        object.key("scte35Control").string(var_13.as_str());
    }
    if let Some(var_14) = &input.scte35_preroll_pullup_milliseconds {
        object.key("scte35PrerollPullupMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_14).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_multiplex_m2ts_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MultiplexM2tsSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MultiplexM2tsSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "absentInputAudioBehavior" => {
                            builder = builder.set_absent_input_audio_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsAbsentInputAudioBehavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "arib" => {
                            builder = builder.set_arib(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsArib::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "audioBufferModel" => {
                            builder = builder.set_audio_buffer_model(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsAudioBufferModel::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "audioFramesPerPes" => {
                            builder = builder.set_audio_frames_per_pes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "audioStreamType" => {
                            builder = builder.set_audio_stream_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsAudioStreamType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ccDescriptor" => {
                            builder = builder.set_cc_descriptor(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsCcDescriptor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ebif" => {
                            builder = builder.set_ebif(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsEbifControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "esRateInPes" => {
                            builder = builder.set_es_rate_in_pes(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsEsRateInPes::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "klv" => {
                            builder = builder.set_klv(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsKlv::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "nielsenId3Behavior" => {
                            builder = builder.set_nielsen_id3_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsNielsenId3Behavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "pcrControl" => {
                            builder = builder.set_pcr_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsPcrControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "pcrPeriod" => {
                            builder = builder.set_pcr_period(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "scte35Control" => {
                            builder = builder.set_scte35_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::M2tsScte35Control::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "scte35PrerollPullupMilliseconds" => {
                            builder = builder.set_scte35_preroll_pullup_milliseconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
