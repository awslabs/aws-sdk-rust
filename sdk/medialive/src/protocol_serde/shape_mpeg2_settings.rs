// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_mpeg2_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Mpeg2Settings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_1.as_str());
    }
    if let Some(var_2) = &input.afd_signaling {
        object.key("afdSignaling").string(var_2.as_str());
    }
    if let Some(var_3) = &input.color_metadata {
        object.key("colorMetadata").string(var_3.as_str());
    }
    if let Some(var_4) = &input.color_space {
        object.key("colorSpace").string(var_4.as_str());
    }
    if let Some(var_5) = &input.display_aspect_ratio {
        object.key("displayAspectRatio").string(var_5.as_str());
    }
    if let Some(var_6) = &input.filter_settings {
        #[allow(unused_mut)]
        let mut object_7 = object.key("filterSettings").start_object();
        crate::protocol_serde::shape_mpeg2_filter_settings::ser_mpeg2_filter_settings(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.fixed_afd {
        object.key("fixedAfd").string(var_8.as_str());
    }
    {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_num_b_frames != 0 {
        object.key("gopNumBFrames").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gop_num_b_frames).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_9) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_9.as_str());
    }
    if let Some(var_10) = &input.scan_type {
        object.key("scanType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.subgop_length {
        object.key("subgopLength").string(var_11.as_str());
    }
    if let Some(var_12) = &input.timecode_insertion {
        object.key("timecodeInsertion").string(var_12.as_str());
    }
    if let Some(var_13) = &input.timecode_burnin_settings {
        #[allow(unused_mut)]
        let mut object_14 = object.key("timecodeBurninSettings").start_object();
        crate::protocol_serde::shape_timecode_burnin_settings::ser_timecode_burnin_settings(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_mpeg2_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::Mpeg2Settings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Mpeg2SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adaptiveQuantization" => {
                                builder = builder.set_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2AdaptiveQuantization::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "afdSignaling" => {
                                builder = builder.set_afd_signaling(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::AfdSignaling::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "colorMetadata" => {
                                builder = builder.set_color_metadata(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2ColorMetadata::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "colorSpace" => {
                                builder = builder.set_color_space(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2ColorSpace::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "displayAspectRatio" => {
                                builder = builder.set_display_aspect_ratio(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2DisplayRatio::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "filterSettings" => {
                                builder = builder.set_filter_settings(
                                    crate::protocol_serde::shape_mpeg2_filter_settings::de_mpeg2_filter_settings(tokens)?
                                );
                            }
                            "fixedAfd" => {
                                builder = builder.set_fixed_afd(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::FixedAfd::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateDenominator" => {
                                builder = builder.set_framerate_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "framerateNumerator" => {
                                builder = builder.set_framerate_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopClosedCadence" => {
                                builder = builder.set_gop_closed_cadence(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopNumBFrames" => {
                                builder = builder.set_gop_num_b_frames(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopSize" => {
                                builder = builder.set_gop_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "gopSizeUnits" => {
                                builder = builder.set_gop_size_units(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2GopSizeUnits::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "scanType" => {
                                builder = builder.set_scan_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Mpeg2ScanType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "subgopLength" => {
                                builder = builder.set_subgop_length(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2SubGopLength::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeInsertion" => {
                                builder = builder.set_timecode_insertion(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::Mpeg2TimecodeInsertionBehavior::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeBurninSettings" => {
                                builder = builder.set_timecode_burnin_settings(
                                    crate::protocol_serde::shape_timecode_burnin_settings::de_timecode_burnin_settings(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
