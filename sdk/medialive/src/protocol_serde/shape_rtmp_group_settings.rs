// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rtmp_group_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RtmpGroupSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ad_markers {
        let mut array_2 = object.key("adMarkers").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.authentication_scheme {
        object.key("authenticationScheme").string(var_4.as_str());
    }
    if let Some(var_5) = &input.cache_full_behavior {
        object.key("cacheFullBehavior").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cache_length {
        object.key("cacheLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.caption_data {
        object.key("captionData").string(var_7.as_str());
    }
    if let Some(var_8) = &input.input_loss_action {
        object.key("inputLossAction").string(var_8.as_str());
    }
    if let Some(var_9) = &input.restart_delay {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.include_filler_nal_units {
        object.key("includeFillerNalUnits").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_rtmp_group_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RtmpGroupSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RtmpGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "adMarkers" => {
                            builder =
                                builder.set_ad_markers(crate::protocol_serde::shape_list_of_rtmp_ad_markers::de_list_of_rtmp_ad_markers(tokens)?);
                        }
                        "authenticationScheme" => {
                            builder = builder.set_authentication_scheme(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AuthenticationScheme::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "cacheFullBehavior" => {
                            builder = builder.set_cache_full_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::RtmpCacheFullBehavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "cacheLength" => {
                            builder = builder.set_cache_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "captionData" => {
                            builder = builder.set_caption_data(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::RtmpCaptionData::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "inputLossAction" => {
                            builder = builder.set_input_loss_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputLossActionForRtmpOut::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "restartDelay" => {
                            builder = builder.set_restart_delay(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "includeFillerNalUnits" => {
                            builder = builder.set_include_filler_nal_units(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::IncludeFillerNalUnits::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
