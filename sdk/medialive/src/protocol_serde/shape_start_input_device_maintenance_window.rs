// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_start_input_device_maintenance_window_http_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowOutput, crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError>{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadGatewayException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::BadGatewayException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BadGatewayExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_bad_gateway_exception::de_bad_gateway_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "BadRequestException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ForbiddenException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::ForbiddenException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ForbiddenExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_forbidden_exception::de_forbidden_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "GatewayTimeoutException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::GatewayTimeoutException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::GatewayTimeoutExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_gateway_timeout_exception::de_gateway_timeout_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InternalServerErrorException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::InternalServerErrorException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerErrorExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_server_error_exception::de_internal_server_error_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NotFoundException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::NotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_not_found_exception::de_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyRequestsException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "UnprocessableEntityException" => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::UnprocessableEntityException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnprocessableEntityExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_unprocessable_entity_exception::de_unprocessable_entity_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_start_input_device_maintenance_window_http_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowOutput, crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError>{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::start_input_device_maintenance_window::builders::StartInputDeviceMaintenanceWindowOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
