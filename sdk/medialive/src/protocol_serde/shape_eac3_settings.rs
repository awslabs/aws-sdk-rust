// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_eac3_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Eac3Settings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attenuation_control {
        object.key("attenuationControl").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bitrate {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.bitstream_mode {
        object.key("bitstreamMode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.coding_mode {
        object.key("codingMode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.dc_filter {
        object.key("dcFilter").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dialnorm {
        object.key("dialnorm").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.drc_line {
        object.key("drcLine").string(var_7.as_str());
    }
    if let Some(var_8) = &input.drc_rf {
        object.key("drcRf").string(var_8.as_str());
    }
    if let Some(var_9) = &input.lfe_control {
        object.key("lfeControl").string(var_9.as_str());
    }
    if let Some(var_10) = &input.lfe_filter {
        object.key("lfeFilter").string(var_10.as_str());
    }
    if let Some(var_11) = &input.lo_ro_center_mix_level {
        object.key("loRoCenterMixLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.lo_ro_surround_mix_level {
        object.key("loRoSurroundMixLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.lt_rt_center_mix_level {
        object.key("ltRtCenterMixLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.lt_rt_surround_mix_level {
        object.key("ltRtSurroundMixLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.metadata_control {
        object.key("metadataControl").string(var_15.as_str());
    }
    if let Some(var_16) = &input.passthrough_control {
        object.key("passthroughControl").string(var_16.as_str());
    }
    if let Some(var_17) = &input.phase_control {
        object.key("phaseControl").string(var_17.as_str());
    }
    if let Some(var_18) = &input.stereo_downmix {
        object.key("stereoDownmix").string(var_18.as_str());
    }
    if let Some(var_19) = &input.surround_ex_mode {
        object.key("surroundExMode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.surround_mode {
        object.key("surroundMode").string(var_20.as_str());
    }
    Ok(())
}

pub(crate) fn de_eac3_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Eac3Settings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Eac3SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "attenuationControl" => {
                            builder = builder.set_attenuation_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3AttenuationControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "bitrate" => {
                            builder = builder
                                .set_bitrate(::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()));
                        }
                        "bitstreamMode" => {
                            builder = builder.set_bitstream_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3BitstreamMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "codingMode" => {
                            builder = builder.set_coding_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3CodingMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dcFilter" => {
                            builder = builder.set_dc_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3DcFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dialnorm" => {
                            builder = builder.set_dialnorm(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "drcLine" => {
                            builder = builder.set_drc_line(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3DrcLine::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "drcRf" => {
                            builder = builder.set_drc_rf(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3DrcRf::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "lfeControl" => {
                            builder = builder.set_lfe_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3LfeControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "lfeFilter" => {
                            builder = builder.set_lfe_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3LfeFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "loRoCenterMixLevel" => {
                            builder = builder.set_lo_ro_center_mix_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "loRoSurroundMixLevel" => {
                            builder = builder.set_lo_ro_surround_mix_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "ltRtCenterMixLevel" => {
                            builder = builder.set_lt_rt_center_mix_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "ltRtSurroundMixLevel" => {
                            builder = builder.set_lt_rt_surround_mix_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "metadataControl" => {
                            builder = builder.set_metadata_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3MetadataControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "passthroughControl" => {
                            builder = builder.set_passthrough_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3PassthroughControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "phaseControl" => {
                            builder = builder.set_phase_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3PhaseControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "stereoDownmix" => {
                            builder = builder.set_stereo_downmix(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3StereoDownmix::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "surroundExMode" => {
                            builder = builder.set_surround_ex_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3SurroundExMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "surroundMode" => {
                            builder = builder.set_surround_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Eac3SurroundMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
