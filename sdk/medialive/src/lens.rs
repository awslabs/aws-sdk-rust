// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_schedule_output_next_token(
    input: &crate::output::DescribeScheduleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_channels_output_next_token(
    input: &crate::output::ListChannelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_input_devices_output_next_token(
    input: &crate::output::ListInputDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_input_device_transfers_output_next_token(
    input: &crate::output::ListInputDeviceTransfersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_inputs_output_next_token(
    input: &crate::output::ListInputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_input_security_groups_output_next_token(
    input: &crate::output::ListInputSecurityGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_multiplexes_output_next_token(
    input: &crate::output::ListMultiplexesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_multiplex_programs_output_next_token(
    input: &crate::output::ListMultiplexProgramsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_offerings_output_next_token(
    input: &crate::output::ListOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_reservations_output_next_token(
    input: &crate::output::ListReservationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_schedule_output_schedule_actions(
    input: crate::output::DescribeScheduleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduleAction>> {
    let input = match input.schedule_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_channels_output_channels(
    input: crate::output::ListChannelsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ChannelSummary>> {
    let input = match input.channels {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_input_devices_output_input_devices(
    input: crate::output::ListInputDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InputDeviceSummary>> {
    let input = match input.input_devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_input_device_transfers_output_input_device_transfers(
    input: crate::output::ListInputDeviceTransfersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TransferringInputDeviceSummary>> {
    let input = match input.input_device_transfers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_inputs_output_inputs(
    input: crate::output::ListInputsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Input>> {
    let input = match input.inputs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_input_security_groups_output_input_security_groups(
    input: crate::output::ListInputSecurityGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InputSecurityGroup>> {
    let input = match input.input_security_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_multiplexes_output_multiplexes(
    input: crate::output::ListMultiplexesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MultiplexSummary>> {
    let input = match input.multiplexes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_multiplex_programs_output_multiplex_programs(
    input: crate::output::ListMultiplexProgramsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MultiplexProgramSummary>> {
    let input = match input.multiplex_programs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_offerings_output_offerings(
    input: crate::output::ListOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Offering>> {
    let input = match input.offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_reservations_output_reservations(
    input: crate::output::ListReservationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Reservation>> {
    let input = match input.reservations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
