// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_input_device_transfer_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptInputDeviceTransferOutput,
    crate::error::AcceptInputDeviceTransferError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AcceptInputDeviceTransferError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::AcceptInputDeviceTransferError {
            meta: generic,
            kind: crate::error::AcceptInputDeviceTransferErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AcceptInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::AcceptInputDeviceTransferError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_accept_input_device_transfer_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AcceptInputDeviceTransferOutput,
    crate::error::AcceptInputDeviceTransferError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::accept_input_device_transfer_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_delete_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchDeleteOutput, crate::error::BatchDeleteError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchDeleteError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchDeleteError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::BatchDeleteError {
            meta: generic,
            kind: crate::error::BatchDeleteErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchDeleteError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchDeleteError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_delete_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchDeleteOutput, crate::error::BatchDeleteError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_delete_output::Builder::default();
        let _ = response;
        output = crate::json_deser::batch_delete_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::BatchDeleteError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_start_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchStartOutput, crate::error::BatchStartError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchStartError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchStartError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::BatchStartError {
            meta: generic,
            kind: crate::error::BatchStartErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchStartError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchStartError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_start_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchStartOutput, crate::error::BatchStartError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_start_output::Builder::default();
        let _ = response;
        output = crate::json_deser::batch_start_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::BatchStartError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_stop_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchStopOutput, crate::error::BatchStopError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchStopError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchStopError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::BatchStopError {
            meta: generic,
            kind: crate::error::BatchStopErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchStopError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchStopError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_stop_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchStopOutput, crate::error::BatchStopError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_stop_output::Builder::default();
        let _ = response;
        output = crate::json_deser::batch_stop_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::BatchStopError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_update_schedule_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::BatchUpdateScheduleOutput,
    crate::error::BatchUpdateScheduleError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchUpdateScheduleError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::BatchUpdateScheduleError {
            meta: generic,
            kind: crate::error::BatchUpdateScheduleErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchUpdateScheduleError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_update_schedule_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::BatchUpdateScheduleOutput,
    crate::error::BatchUpdateScheduleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_update_schedule_output::Builder::default();
        let _ = response;
        output = crate::json_deser::batch_update_schedule_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::BatchUpdateScheduleError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_input_device_transfer_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelInputDeviceTransferOutput,
    crate::error::CancelInputDeviceTransferError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CancelInputDeviceTransferError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CancelInputDeviceTransferError {
            meta: generic,
            kind: crate::error::CancelInputDeviceTransferErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CancelInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CancelInputDeviceTransferError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_input_device_transfer_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CancelInputDeviceTransferOutput,
    crate::error::CancelInputDeviceTransferError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::cancel_input_device_transfer_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::create_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::CreateChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_input_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateInputOutput, crate::error::CreateInputError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateInputError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateInputError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateInputError {
            meta: generic,
            kind: crate::error::CreateInputErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateInputError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateInputError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_input_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateInputOutput, crate::error::CreateInputError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_input_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_input_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::CreateInputError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_input_security_group_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateInputSecurityGroupOutput,
    crate::error::CreateInputSecurityGroupError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateInputSecurityGroupError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::CreateInputSecurityGroupErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateInputSecurityGroupError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_input_security_group_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateInputSecurityGroupOutput,
    crate::error::CreateInputSecurityGroupError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_input_security_group_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_input_security_group_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateInputSecurityGroupError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateMultiplexOutput, crate::error::CreateMultiplexError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateMultiplexError {
            meta: generic,
            kind: crate::error::CreateMultiplexErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateMultiplexOutput, crate::error::CreateMultiplexError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::create_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::CreateMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_multiplex_program_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateMultiplexProgramOutput,
    crate::error::CreateMultiplexProgramError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateMultiplexProgramError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateMultiplexProgramError {
            meta: generic,
            kind: crate::error::CreateMultiplexProgramErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateMultiplexProgramError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_multiplex_program_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateMultiplexProgramOutput,
    crate::error::CreateMultiplexProgramError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_multiplex_program_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_multiplex_program_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateMultiplexProgramError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_partner_input_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreatePartnerInputOutput,
    crate::error::CreatePartnerInputError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreatePartnerInputError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreatePartnerInputError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreatePartnerInputError {
            meta: generic,
            kind: crate::error::CreatePartnerInputErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreatePartnerInputError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreatePartnerInputError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_partner_input_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreatePartnerInputOutput,
    crate::error::CreatePartnerInputError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_partner_input_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_partner_input_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreatePartnerInputError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_tags_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateTagsOutput, crate::error::CreateTagsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateTagsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateTagsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::CreateTagsError {
            meta: generic,
            kind: crate::error::CreateTagsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateTagsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CreateTagsError {
            meta: generic,
            kind: crate::error::CreateTagsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateTagsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateTagsError {
            meta: generic,
            kind: crate::error::CreateTagsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateTagsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CreateTagsError {
            meta: generic,
            kind: crate::error::CreateTagsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateTagsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateTagsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_tags_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateTagsOutput, crate::error::CreateTagsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_tags_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::delete_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DeleteChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_input_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteInputOutput, crate::error::DeleteInputError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteInputError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteInputError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteInputError {
            meta: generic,
            kind: crate::error::DeleteInputErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteInputError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteInputError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_input_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteInputOutput, crate::error::DeleteInputError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_input_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_input_security_group_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInputSecurityGroupOutput,
    crate::error::DeleteInputSecurityGroupError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteInputSecurityGroupError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DeleteInputSecurityGroupErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteInputSecurityGroupError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_input_security_group_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInputSecurityGroupOutput,
    crate::error::DeleteInputSecurityGroupError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_input_security_group_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteMultiplexOutput, crate::error::DeleteMultiplexError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteMultiplexError {
            meta: generic,
            kind: crate::error::DeleteMultiplexErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteMultiplexOutput, crate::error::DeleteMultiplexError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::delete_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DeleteMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_multiplex_program_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteMultiplexProgramOutput,
    crate::error::DeleteMultiplexProgramError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteMultiplexProgramError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteMultiplexProgramError {
            meta: generic,
            kind: crate::error::DeleteMultiplexProgramErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteMultiplexProgramError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_multiplex_program_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteMultiplexProgramOutput,
    crate::error::DeleteMultiplexProgramError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_multiplex_program_output::Builder::default();
        let _ = response;
        output = crate::json_deser::delete_multiplex_program_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DeleteMultiplexProgramError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_reservation_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteReservationOutput, crate::error::DeleteReservationError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteReservationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteReservationError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteReservationError {
            meta: generic,
            kind: crate::error::DeleteReservationErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteReservationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteReservationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_reservation_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteReservationOutput, crate::error::DeleteReservationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_reservation_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::delete_reservation_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DeleteReservationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_schedule_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteScheduleOutput, crate::error::DeleteScheduleError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteScheduleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteScheduleError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteScheduleError {
            meta: generic,
            kind: crate::error::DeleteScheduleErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteScheduleError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteScheduleError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_schedule_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteScheduleOutput, crate::error::DeleteScheduleError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_schedule_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteTagsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteTagsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::DeleteTagsError {
            meta: generic,
            kind: crate::error::DeleteTagsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTagsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DeleteTagsError {
            meta: generic,
            kind: crate::error::DeleteTagsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTagsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteTagsError {
            meta: generic,
            kind: crate::error::DeleteTagsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteTagsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteTagsError {
            meta: generic,
            kind: crate::error::DeleteTagsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTagsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteTagsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_tags_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_tags_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeChannelOutput, crate::error::DescribeChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeChannelOutput, crate::error::DescribeChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeInputOutput, crate::error::DescribeInputError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeInputError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeInputError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeInputError {
            meta: generic,
            kind: crate::error::DescribeInputErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeInputError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeInputOutput, crate::error::DescribeInputError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_input_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_input_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeInputError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_device_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInputDeviceOutput,
    crate::error::DescribeInputDeviceError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeInputDeviceError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeInputDeviceError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeInputDeviceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_device_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInputDeviceOutput,
    crate::error::DescribeInputDeviceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_input_device_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_input_device_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeInputDeviceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_device_thumbnail(
    response: &mut http::Response<smithy_http::body::SdkBody>,
) -> std::result::Result<
    crate::output::DescribeInputDeviceThumbnailOutput,
    crate::error::DescribeInputDeviceThumbnailError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_input_device_thumbnail_output::Builder::default();
        let _ = response;
        output = output.set_body(Some(
            crate::http_serde::deser_payload_describe_input_device_thumbnail_body(
                response.body_mut(),
            )?,
        ));
        output = output.set_content_length(
            crate::http_serde::deser_header_describe_input_device_thumbnail_content_length(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::DescribeInputDeviceThumbnailError::unhandled(
                    "Failed to parse ContentLength from header `Content-Length",
                )
            })?,
        );
        output = output.set_content_type(
            crate::http_serde::deser_header_describe_input_device_thumbnail_content_type(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::DescribeInputDeviceThumbnailError::unhandled(
                    "Failed to parse ContentType from header `Content-Type",
                )
            })?,
        );
        output = output.set_e_tag(
            crate::http_serde::deser_header_describe_input_device_thumbnail_e_tag(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::DescribeInputDeviceThumbnailError::unhandled(
                    "Failed to parse ETag from header `ETag",
                )
            })?,
        );
        output = output.set_last_modified(
            crate::http_serde::deser_header_describe_input_device_thumbnail_last_modified(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::DescribeInputDeviceThumbnailError::unhandled(
                    "Failed to parse LastModified from header `Last-Modified",
                )
            })?,
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_device_thumbnail_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInputDeviceThumbnailOutput,
    crate::error::DescribeInputDeviceThumbnailError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeInputDeviceThumbnailError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeInputDeviceThumbnailError {
            meta: generic,
            kind: crate::error::DescribeInputDeviceThumbnailErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputDeviceThumbnailError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeInputDeviceThumbnailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_security_group_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInputSecurityGroupOutput,
    crate::error::DescribeInputSecurityGroupError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeInputSecurityGroupError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeInputSecurityGroupError {
            meta: generic,
            kind: crate::error::DescribeInputSecurityGroupErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeInputSecurityGroupError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_input_security_group_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInputSecurityGroupOutput,
    crate::error::DescribeInputSecurityGroupError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_input_security_group_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_input_security_group_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeInputSecurityGroupError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeMultiplexOutput, crate::error::DescribeMultiplexError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeMultiplexError {
            meta: generic,
            kind: crate::error::DescribeMultiplexErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeMultiplexOutput, crate::error::DescribeMultiplexError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_multiplex_program_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeMultiplexProgramOutput,
    crate::error::DescribeMultiplexProgramError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeMultiplexProgramError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeMultiplexProgramError {
            meta: generic,
            kind: crate::error::DescribeMultiplexProgramErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeMultiplexProgramError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_multiplex_program_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeMultiplexProgramOutput,
    crate::error::DescribeMultiplexProgramError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_multiplex_program_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_multiplex_program_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeMultiplexProgramError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_offering_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeOfferingOutput, crate::error::DescribeOfferingError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeOfferingError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeOfferingError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeOfferingError {
            meta: generic,
            kind: crate::error::DescribeOfferingErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOfferingError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeOfferingError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_offering_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeOfferingOutput, crate::error::DescribeOfferingError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_offering_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_offering_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeOfferingError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_reservation_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeReservationOutput,
    crate::error::DescribeReservationError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeReservationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeReservationError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeReservationError {
            meta: generic,
            kind: crate::error::DescribeReservationErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeReservationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeReservationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_reservation_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeReservationOutput,
    crate::error::DescribeReservationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_reservation_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_reservation_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeReservationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_schedule_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeScheduleOutput, crate::error::DescribeScheduleError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeScheduleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeScheduleError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeScheduleError {
            meta: generic,
            kind: crate::error::DescribeScheduleErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeScheduleError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeScheduleError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_schedule_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeScheduleOutput, crate::error::DescribeScheduleError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_schedule_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_schedule_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeScheduleError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_channels_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListChannelsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListChannelsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListChannelsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_channels_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_channels_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_channels_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ListChannelsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_devices_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListInputDevicesOutput, crate::error::ListInputDevicesError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListInputDevicesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListInputDevicesError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListInputDevicesError {
            meta: generic,
            kind: crate::error::ListInputDevicesErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputDevicesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListInputDevicesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_devices_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListInputDevicesOutput, crate::error::ListInputDevicesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_input_devices_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_input_devices_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListInputDevicesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_device_transfers_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListInputDeviceTransfersOutput,
    crate::error::ListInputDeviceTransfersError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListInputDeviceTransfersError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::ListInputDeviceTransfersError {
            meta: generic,
            kind: crate::error::ListInputDeviceTransfersErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListInputDeviceTransfersError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_device_transfers_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListInputDeviceTransfersOutput,
    crate::error::ListInputDeviceTransfersError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_input_device_transfers_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_input_device_transfers_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListInputDeviceTransfersError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_inputs_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListInputsOutput, crate::error::ListInputsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListInputsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListInputsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListInputsError {
            meta: generic,
            kind: crate::error::ListInputsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListInputsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_inputs_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListInputsOutput, crate::error::ListInputsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_inputs_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_inputs_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ListInputsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_security_groups_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListInputSecurityGroupsOutput,
    crate::error::ListInputSecurityGroupsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListInputSecurityGroupsError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListInputSecurityGroupsError {
            meta: generic,
            kind: crate::error::ListInputSecurityGroupsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListInputSecurityGroupsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_input_security_groups_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListInputSecurityGroupsOutput,
    crate::error::ListInputSecurityGroupsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_input_security_groups_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_input_security_groups_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListInputSecurityGroupsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_multiplexes_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListMultiplexesOutput, crate::error::ListMultiplexesError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListMultiplexesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListMultiplexesError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListMultiplexesError {
            meta: generic,
            kind: crate::error::ListMultiplexesErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListMultiplexesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListMultiplexesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_multiplexes_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListMultiplexesOutput, crate::error::ListMultiplexesError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_multiplexes_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_multiplexes_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListMultiplexesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_multiplex_programs_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListMultiplexProgramsOutput,
    crate::error::ListMultiplexProgramsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListMultiplexProgramsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListMultiplexProgramsError {
            meta: generic,
            kind: crate::error::ListMultiplexProgramsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListMultiplexProgramsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_multiplex_programs_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListMultiplexProgramsOutput,
    crate::error::ListMultiplexProgramsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_multiplex_programs_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_multiplex_programs_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListMultiplexProgramsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_offerings_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOfferingsOutput, crate::error::ListOfferingsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListOfferingsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListOfferingsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListOfferingsError {
            meta: generic,
            kind: crate::error::ListOfferingsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOfferingsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListOfferingsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_offerings_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListOfferingsOutput, crate::error::ListOfferingsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_offerings_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_offerings_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListOfferingsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_reservations_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListReservationsOutput, crate::error::ListReservationsError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListReservationsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListReservationsError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListReservationsError {
            meta: generic,
            kind: crate::error::ListReservationsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListReservationsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListReservationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_reservations_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListReservationsOutput, crate::error::ListReservationsError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_reservations_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_reservations_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListReservationsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_tags_for_resource_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_purchase_offering_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PurchaseOfferingOutput, crate::error::PurchaseOfferingError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::PurchaseOfferingError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PurchaseOfferingError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::PurchaseOfferingError {
            meta: generic,
            kind: crate::error::PurchaseOfferingErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PurchaseOfferingError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::PurchaseOfferingError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_purchase_offering_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PurchaseOfferingOutput, crate::error::PurchaseOfferingError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::purchase_offering_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::purchase_offering_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::PurchaseOfferingError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_input_device_transfer_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectInputDeviceTransferOutput,
    crate::error::RejectInputDeviceTransferError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RejectInputDeviceTransferError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::RejectInputDeviceTransferError {
            meta: generic,
            kind: crate::error::RejectInputDeviceTransferErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RejectInputDeviceTransferError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::RejectInputDeviceTransferError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_reject_input_device_transfer_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RejectInputDeviceTransferOutput,
    crate::error::RejectInputDeviceTransferError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::reject_input_device_transfer_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartChannelOutput, crate::error::StartChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StartChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::StartChannelError {
            meta: generic,
            kind: crate::error::StartChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StartChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StartChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartChannelOutput, crate::error::StartChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_channel_output::Builder::default();
        let _ = response;
        output = crate::json_deser::start_channel_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::StartChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartMultiplexOutput, crate::error::StartMultiplexError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StartMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::StartMultiplexError {
            meta: generic,
            kind: crate::error::StartMultiplexErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StartMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StartMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartMultiplexOutput, crate::error::StartMultiplexError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::start_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::StartMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopChannelOutput, crate::error::StopChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StopChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StopChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::StopChannelError {
            meta: generic,
            kind: crate::error::StopChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StopChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StopChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopChannelOutput, crate::error::StopChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stop_channel_output::Builder::default();
        let _ = response;
        output = crate::json_deser::stop_channel_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::StopChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopMultiplexOutput, crate::error::StopMultiplexError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StopMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StopMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::StopMultiplexError {
            meta: generic,
            kind: crate::error::StopMultiplexErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StopMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StopMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopMultiplexOutput, crate::error::StopMultiplexError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stop_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::stop_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::StopMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_input_device_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferInputDeviceOutput,
    crate::error::TransferInputDeviceError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TransferInputDeviceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TransferInputDeviceError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::TransferInputDeviceError {
            meta: generic,
            kind: crate::error::TransferInputDeviceErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TransferInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::TransferInputDeviceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_transfer_input_device_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TransferInputDeviceOutput,
    crate::error::TransferInputDeviceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::transfer_input_device_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::update_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::UpdateChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_class_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateChannelClassOutput,
    crate::error::UpdateChannelClassError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateChannelClassError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateChannelClassError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateChannelClassError {
            meta: generic,
            kind: crate::error::UpdateChannelClassErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelClassError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateChannelClassError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_class_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateChannelClassOutput,
    crate::error::UpdateChannelClassError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_channel_class_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_channel_class_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateChannelClassError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateInputOutput, crate::error::UpdateInputError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateInputError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateInputError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateInputError {
            meta: generic,
            kind: crate::error::UpdateInputErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateInputError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateInputOutput, crate::error::UpdateInputError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_input_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_input_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::UpdateInputError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_device_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateInputDeviceOutput, crate::error::UpdateInputDeviceError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateInputDeviceError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateInputDeviceError {
            meta: generic,
            kind: crate::error::UpdateInputDeviceErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateInputDeviceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_device_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateInputDeviceOutput, crate::error::UpdateInputDeviceError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_input_device_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_input_device_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateInputDeviceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_security_group_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateInputSecurityGroupOutput,
    crate::error::UpdateInputSecurityGroupError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateInputSecurityGroupError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateInputSecurityGroupError {
            meta: generic,
            kind: crate::error::UpdateInputSecurityGroupErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateInputSecurityGroupError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_input_security_group_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateInputSecurityGroupOutput,
    crate::error::UpdateInputSecurityGroupError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_input_security_group_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_input_security_group_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateInputSecurityGroupError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_multiplex_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateMultiplexOutput, crate::error::UpdateMultiplexError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateMultiplexError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateMultiplexError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateMultiplexError {
            meta: generic,
            kind: crate::error::UpdateMultiplexErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateMultiplexError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateMultiplexError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_multiplex_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateMultiplexOutput, crate::error::UpdateMultiplexError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_multiplex_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::update_multiplex_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::UpdateMultiplexError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_multiplex_program_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateMultiplexProgramOutput,
    crate::error::UpdateMultiplexProgramError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateMultiplexProgramError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateMultiplexProgramError {
            meta: generic,
            kind: crate::error::UpdateMultiplexProgramErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateMultiplexProgramError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_multiplex_program_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateMultiplexProgramOutput,
    crate::error::UpdateMultiplexProgramError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_multiplex_program_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_multiplex_program_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateMultiplexProgramError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_reservation_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateReservationOutput, crate::error::UpdateReservationError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateReservationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateReservationError::unhandled(generic)),
    };
    Err(match error_code {
        "BadGatewayException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::BadGatewayError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_gateway_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_gateway_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "BadRequestException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "ConflictException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::ConflictError({
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_error::Builder::default();
                let _ = response;
                output = crate::json_deser::conflict_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "GatewayTimeoutException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::GatewayTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::gateway_timeout_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::gateway_timeout_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::UpdateReservationError {
            meta: generic,
            kind: crate::error::UpdateReservationErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateReservationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateReservationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_reservation_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateReservationOutput, crate::error::UpdateReservationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_reservation_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::update_reservation_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::UpdateReservationError::unhandled)?;
        output.build()
    })
}
