// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// Placeholder documentation for BadGatewayException
    BadGatewayException(crate::types::error::BadGatewayException),
    /// Placeholder documentation for BadRequestException
    BadRequestException(crate::types::error::BadRequestException),
    /// Placeholder documentation for ConflictException
    ConflictException(crate::types::error::ConflictException),
    /// Placeholder documentation for ForbiddenException
    ForbiddenException(crate::types::error::ForbiddenException),
    /// Placeholder documentation for GatewayTimeoutException
    GatewayTimeoutException(crate::types::error::GatewayTimeoutException),
    /// Placeholder documentation for InternalServerErrorException
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// Placeholder documentation for NotFoundException
    NotFoundException(crate::types::error::NotFoundException),
    /// Placeholder documentation for TooManyRequestsException
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// Placeholder documentation for UnprocessableEntityException
    UnprocessableEntityException(crate::types::error::UnprocessableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadGatewayException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::GatewayTimeoutException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::BadGatewayException(inner) => inner.meta(),
            Self::BadRequestException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ForbiddenException(inner) => inner.meta(),
            Self::GatewayTimeoutException(inner) => inner.meta(),
            Self::InternalServerErrorException(inner) => inner.meta(),
            Self::NotFoundException(inner) => inner.meta(),
            Self::TooManyRequestsException(inner) => inner.meta(),
            Self::UnprocessableEntityException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError> for Error {
    fn from(err: crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError) -> Self {
        match err {
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::accept_input_device_transfer::AcceptInputDeviceTransferError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete::BatchDeleteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete::BatchDeleteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete::BatchDeleteError> for Error {
    fn from(err: crate::operation::batch_delete::BatchDeleteError) -> Self {
        match err {
            crate::operation::batch_delete::BatchDeleteError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::batch_delete::BatchDeleteError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_delete::BatchDeleteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_delete::BatchDeleteError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_delete::BatchDeleteError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::batch_delete::BatchDeleteError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::batch_delete::BatchDeleteError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_delete::BatchDeleteError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::batch_delete::BatchDeleteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_start::BatchStartError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_start::BatchStartError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_start::BatchStartError> for Error {
    fn from(err: crate::operation::batch_start::BatchStartError) -> Self {
        match err {
            crate::operation::batch_start::BatchStartError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::batch_start::BatchStartError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_start::BatchStartError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_start::BatchStartError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_start::BatchStartError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::batch_start::BatchStartError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::batch_start::BatchStartError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_start::BatchStartError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::batch_start::BatchStartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_stop::BatchStopError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_stop::BatchStopError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_stop::BatchStopError> for Error {
    fn from(err: crate::operation::batch_stop::BatchStopError) -> Self {
        match err {
            crate::operation::batch_stop::BatchStopError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::batch_stop::BatchStopError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_stop::BatchStopError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_stop::BatchStopError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_stop::BatchStopError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::batch_stop::BatchStopError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::batch_stop::BatchStopError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_stop::BatchStopError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::batch_stop::BatchStopError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_schedule::BatchUpdateScheduleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_schedule::BatchUpdateScheduleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_schedule::BatchUpdateScheduleError> for Error {
    fn from(err: crate::operation::batch_update_schedule::BatchUpdateScheduleError) -> Self {
        match err {
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::batch_update_schedule::BatchUpdateScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError> for Error {
    fn from(err: crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError) -> Self {
        match err {
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::cancel_input_device_transfer::CancelInputDeviceTransferError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::claim_device::ClaimDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::claim_device::ClaimDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::claim_device::ClaimDeviceError> for Error {
    fn from(err: crate::operation::claim_device::ClaimDeviceError) -> Self {
        match err {
            crate::operation::claim_device::ClaimDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::claim_device::ClaimDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::claim_device::ClaimDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::claim_device::ClaimDeviceError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::claim_device::ClaimDeviceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::claim_device::ClaimDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::claim_device::ClaimDeviceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::claim_device::ClaimDeviceError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::claim_device::ClaimDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel::CreateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel::CreateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_channel::CreateChannelError> for Error {
    fn from(err: crate::operation::create_channel::CreateChannelError) -> Self {
        match err {
            crate::operation::create_channel::CreateChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_channel::CreateChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_channel::CreateChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_channel::CreateChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_channel::CreateChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_channel::CreateChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_channel::CreateChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_channel::CreateChannelError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::create_channel::CreateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError> for Error {
    fn from(err: crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError) -> Self {
        match err {
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::create_channel_placement_group::CreateChannelPlacementGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError> for Error {
    fn from(err: crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError) -> Self {
        match err {
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError> for Error {
    fn from(err: crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError) -> Self {
        match err {
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_cloud_watch_alarm_template_group::CreateCloudWatchAlarmTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_cluster::CreateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_cluster::CreateClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cluster::CreateClusterError> for Error {
    fn from(err: crate::operation::create_cluster::CreateClusterError) -> Self {
        match err {
            crate::operation::create_cluster::CreateClusterError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_cluster::CreateClusterError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_cluster::CreateClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_cluster::CreateClusterError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_cluster::CreateClusterError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_cluster::CreateClusterError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_cluster::CreateClusterError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_cluster::CreateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError> for Error {
    fn from(err: crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError) -> Self {
        match err {
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError> for Error {
    fn from(err: crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError) -> Self {
        match err {
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_event_bridge_rule_template_group::CreateEventBridgeRuleTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input::CreateInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input::CreateInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_input::CreateInputError> for Error {
    fn from(err: crate::operation::create_input::CreateInputError) -> Self {
        match err {
            crate::operation::create_input::CreateInputError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_input::CreateInputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_input::CreateInputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_input::CreateInputError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_input::CreateInputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_input::CreateInputError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_input::CreateInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input_security_group::CreateInputSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input_security_group::CreateInputSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_input_security_group::CreateInputSecurityGroupError> for Error {
    fn from(err: crate::operation::create_input_security_group::CreateInputSecurityGroupError) -> Self {
        match err {
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_input_security_group::CreateInputSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multiplex::CreateMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multiplex::CreateMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_multiplex::CreateMultiplexError> for Error {
    fn from(err: crate::operation::create_multiplex::CreateMultiplexError) -> Self {
        match err {
            crate::operation::create_multiplex::CreateMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_multiplex::CreateMultiplexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_multiplex::CreateMultiplexError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::create_multiplex::CreateMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multiplex_program::CreateMultiplexProgramError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multiplex_program::CreateMultiplexProgramError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_multiplex_program::CreateMultiplexProgramError> for Error {
    fn from(err: crate::operation::create_multiplex_program::CreateMultiplexProgramError) -> Self {
        match err {
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::create_multiplex_program::CreateMultiplexProgramError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_network::CreateNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_network::CreateNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_network::CreateNetworkError> for Error {
    fn from(err: crate::operation::create_network::CreateNetworkError) -> Self {
        match err {
            crate::operation::create_network::CreateNetworkError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_network::CreateNetworkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_network::CreateNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_network::CreateNetworkError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_network::CreateNetworkError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_network::CreateNetworkError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_network::CreateNetworkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_network::CreateNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_node::CreateNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_node::CreateNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_node::CreateNodeError> for Error {
    fn from(err: crate::operation::create_node::CreateNodeError) -> Self {
        match err {
            crate::operation::create_node::CreateNodeError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_node::CreateNodeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_node::CreateNodeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_node::CreateNodeError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_node::CreateNodeError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_node::CreateNodeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_node::CreateNodeError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::create_node::CreateNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError> for Error {
    fn from(err: crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError) -> Self {
        match err {
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_partner_input::CreatePartnerInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_partner_input::CreatePartnerInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_partner_input::CreatePartnerInputError> for Error {
    fn from(err: crate::operation::create_partner_input::CreatePartnerInputError) -> Self {
        match err {
            crate::operation::create_partner_input::CreatePartnerInputError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::create_partner_input::CreatePartnerInputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_partner_input::CreatePartnerInputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_partner_input::CreatePartnerInputError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::create_partner_input::CreatePartnerInputError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_partner_input::CreatePartnerInputError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_partner_input::CreatePartnerInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_signal_map::CreateSignalMapError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_signal_map::CreateSignalMapError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_signal_map::CreateSignalMapError> for Error {
    fn from(err: crate::operation::create_signal_map::CreateSignalMapError) -> Self {
        match err {
            crate::operation::create_signal_map::CreateSignalMapError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_signal_map::CreateSignalMapError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_signal_map::CreateSignalMapError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_signal_map::CreateSignalMapError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_signal_map::CreateSignalMapError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_signal_map::CreateSignalMapError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_signal_map::CreateSignalMapError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_tags::CreateTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_tags::CreateTagsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_tags::CreateTagsError> for Error {
    fn from(err: crate::operation::create_tags::CreateTagsError) -> Self {
        match err {
            crate::operation::create_tags::CreateTagsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_tags::CreateTagsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_tags::CreateTagsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_tags::CreateTagsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_tags::CreateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel::DeleteChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel::DeleteChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_channel::DeleteChannelError> for Error {
    fn from(err: crate::operation::delete_channel::DeleteChannelError) -> Self {
        match err {
            crate::operation::delete_channel::DeleteChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_channel::DeleteChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_channel::DeleteChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_channel::DeleteChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_channel::DeleteChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_channel::DeleteChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_channel::DeleteChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_channel::DeleteChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_channel::DeleteChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError> for Error {
    fn from(err: crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError) -> Self {
        match err {
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_channel_placement_group::DeleteChannelPlacementGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError> for Error {
    fn from(err: crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError) -> Self {
        match err {
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template::DeleteCloudWatchAlarmTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError> for Error {
    fn from(err: crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError) -> Self {
        match err {
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_cloud_watch_alarm_template_group::DeleteCloudWatchAlarmTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_cluster::DeleteClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_cluster::DeleteClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cluster::DeleteClusterError> for Error {
    fn from(err: crate::operation::delete_cluster::DeleteClusterError) -> Self {
        match err {
            crate::operation::delete_cluster::DeleteClusterError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_cluster::DeleteClusterError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_cluster::DeleteClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_cluster::DeleteClusterError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_cluster::DeleteClusterError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_cluster::DeleteClusterError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_cluster::DeleteClusterError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_cluster::DeleteClusterError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_cluster::DeleteClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError> for Error {
    fn from(err: crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError) -> Self {
        match err {
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_event_bridge_rule_template::DeleteEventBridgeRuleTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError> for Error {
    fn from(err: crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError) -> Self {
        match err {
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_event_bridge_rule_template_group::DeleteEventBridgeRuleTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input::DeleteInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input::DeleteInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_input::DeleteInputError> for Error {
    fn from(err: crate::operation::delete_input::DeleteInputError) -> Self {
        match err {
            crate::operation::delete_input::DeleteInputError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_input::DeleteInputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_input::DeleteInputError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_input::DeleteInputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_input::DeleteInputError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_input::DeleteInputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_input::DeleteInputError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_input::DeleteInputError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_input::DeleteInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input_security_group::DeleteInputSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input_security_group::DeleteInputSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_input_security_group::DeleteInputSecurityGroupError> for Error {
    fn from(err: crate::operation::delete_input_security_group::DeleteInputSecurityGroupError) -> Self {
        match err {
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_input_security_group::DeleteInputSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multiplex::DeleteMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multiplex::DeleteMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_multiplex::DeleteMultiplexError> for Error {
    fn from(err: crate::operation::delete_multiplex::DeleteMultiplexError) -> Self {
        match err {
            crate::operation::delete_multiplex::DeleteMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_multiplex::DeleteMultiplexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_multiplex::DeleteMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multiplex_program::DeleteMultiplexProgramError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multiplex_program::DeleteMultiplexProgramError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_multiplex_program::DeleteMultiplexProgramError> for Error {
    fn from(err: crate::operation::delete_multiplex_program::DeleteMultiplexProgramError) -> Self {
        match err {
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_multiplex_program::DeleteMultiplexProgramError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_network::DeleteNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_network::DeleteNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_network::DeleteNetworkError> for Error {
    fn from(err: crate::operation::delete_network::DeleteNetworkError) -> Self {
        match err {
            crate::operation::delete_network::DeleteNetworkError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_network::DeleteNetworkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_network::DeleteNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_network::DeleteNetworkError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_network::DeleteNetworkError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_network::DeleteNetworkError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_network::DeleteNetworkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_network::DeleteNetworkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_network::DeleteNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_node::DeleteNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_node::DeleteNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_node::DeleteNodeError> for Error {
    fn from(err: crate::operation::delete_node::DeleteNodeError) -> Self {
        match err {
            crate::operation::delete_node::DeleteNodeError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_node::DeleteNodeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_node::DeleteNodeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_node::DeleteNodeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_node::DeleteNodeError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_node::DeleteNodeError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_node::DeleteNodeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_node::DeleteNodeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_node::DeleteNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_reservation::DeleteReservationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_reservation::DeleteReservationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_reservation::DeleteReservationError> for Error {
    fn from(err: crate::operation::delete_reservation::DeleteReservationError) -> Self {
        match err {
            crate::operation::delete_reservation::DeleteReservationError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_reservation::DeleteReservationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_reservation::DeleteReservationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_reservation::DeleteReservationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_reservation::DeleteReservationError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_reservation::DeleteReservationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_reservation::DeleteReservationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_reservation::DeleteReservationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_reservation::DeleteReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schedule::DeleteScheduleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schedule::DeleteScheduleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_schedule::DeleteScheduleError> for Error {
    fn from(err: crate::operation::delete_schedule::DeleteScheduleError) -> Self {
        match err {
            crate::operation::delete_schedule::DeleteScheduleError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_schedule::DeleteScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_signal_map::DeleteSignalMapError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_signal_map::DeleteSignalMapError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_signal_map::DeleteSignalMapError> for Error {
    fn from(err: crate::operation::delete_signal_map::DeleteSignalMapError) -> Self {
        match err {
            crate::operation::delete_signal_map::DeleteSignalMapError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_signal_map::DeleteSignalMapError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_signal_map::DeleteSignalMapError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_signal_map::DeleteSignalMapError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_signal_map::DeleteSignalMapError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_signal_map::DeleteSignalMapError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_signal_map::DeleteSignalMapError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_tags::DeleteTagsError> for Error {
    fn from(err: crate::operation::delete_tags::DeleteTagsError) -> Self {
        match err {
            crate::operation::delete_tags::DeleteTagsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_tags::DeleteTagsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_tags::DeleteTagsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_tags::DeleteTagsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_tags::DeleteTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_configuration::DescribeAccountConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_account_configuration::DescribeAccountConfigurationError> for Error {
    fn from(err: crate::operation::describe_account_configuration::DescribeAccountConfigurationError) -> Self {
        match err {
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_account_configuration::DescribeAccountConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_channel::DescribeChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_channel::DescribeChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_channel::DescribeChannelError> for Error {
    fn from(err: crate::operation::describe_channel::DescribeChannelError) -> Self {
        match err {
            crate::operation::describe_channel::DescribeChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_channel::DescribeChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_channel::DescribeChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_channel::DescribeChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_channel::DescribeChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_channel::DescribeChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_channel::DescribeChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_channel::DescribeChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError> for Error {
    fn from(err: crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError) -> Self {
        match err {
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_channel_placement_group::DescribeChannelPlacementGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_cluster::DescribeClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_cluster::DescribeClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_cluster::DescribeClusterError> for Error {
    fn from(err: crate::operation::describe_cluster::DescribeClusterError) -> Self {
        match err {
            crate::operation::describe_cluster::DescribeClusterError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_cluster::DescribeClusterError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_cluster::DescribeClusterError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_cluster::DescribeClusterError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_cluster::DescribeClusterError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_cluster::DescribeClusterError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_cluster::DescribeClusterError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_cluster::DescribeClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input::DescribeInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input::DescribeInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_input::DescribeInputError> for Error {
    fn from(err: crate::operation::describe_input::DescribeInputError) -> Self {
        match err {
            crate::operation::describe_input::DescribeInputError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_input::DescribeInputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_input::DescribeInputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_input::DescribeInputError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_input::DescribeInputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_input::DescribeInputError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_input::DescribeInputError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_input::DescribeInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input_device::DescribeInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input_device::DescribeInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_input_device::DescribeInputDeviceError> for Error {
    fn from(err: crate::operation::describe_input_device::DescribeInputDeviceError) -> Self {
        match err {
            crate::operation::describe_input_device::DescribeInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_input_device::DescribeInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_input_device::DescribeInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_input_device::DescribeInputDeviceError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_input_device::DescribeInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_input_device::DescribeInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_input_device::DescribeInputDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_input_device::DescribeInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError> for Error {
    fn from(err: crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError) -> Self {
        match err {
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_input_device_thumbnail::DescribeInputDeviceThumbnailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input_security_group::DescribeInputSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input_security_group::DescribeInputSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_input_security_group::DescribeInputSecurityGroupError> for Error {
    fn from(err: crate::operation::describe_input_security_group::DescribeInputSecurityGroupError) -> Self {
        match err {
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_input_security_group::DescribeInputSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_multiplex::DescribeMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_multiplex::DescribeMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_multiplex::DescribeMultiplexError> for Error {
    fn from(err: crate::operation::describe_multiplex::DescribeMultiplexError) -> Self {
        match err {
            crate::operation::describe_multiplex::DescribeMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_multiplex::DescribeMultiplexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_multiplex::DescribeMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_multiplex_program::DescribeMultiplexProgramError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_multiplex_program::DescribeMultiplexProgramError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_multiplex_program::DescribeMultiplexProgramError> for Error {
    fn from(err: crate::operation::describe_multiplex_program::DescribeMultiplexProgramError) -> Self {
        match err {
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_multiplex_program::DescribeMultiplexProgramError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_network::DescribeNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_network::DescribeNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_network::DescribeNetworkError> for Error {
    fn from(err: crate::operation::describe_network::DescribeNetworkError) -> Self {
        match err {
            crate::operation::describe_network::DescribeNetworkError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_network::DescribeNetworkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_network::DescribeNetworkError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_network::DescribeNetworkError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_network::DescribeNetworkError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_network::DescribeNetworkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_network::DescribeNetworkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_network::DescribeNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_node::DescribeNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_node::DescribeNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_node::DescribeNodeError> for Error {
    fn from(err: crate::operation::describe_node::DescribeNodeError) -> Self {
        match err {
            crate::operation::describe_node::DescribeNodeError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_node::DescribeNodeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_node::DescribeNodeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_node::DescribeNodeError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_node::DescribeNodeError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_node::DescribeNodeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_node::DescribeNodeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_node::DescribeNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_offering::DescribeOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_offering::DescribeOfferingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_offering::DescribeOfferingError> for Error {
    fn from(err: crate::operation::describe_offering::DescribeOfferingError) -> Self {
        match err {
            crate::operation::describe_offering::DescribeOfferingError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_offering::DescribeOfferingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_offering::DescribeOfferingError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_offering::DescribeOfferingError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_offering::DescribeOfferingError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_offering::DescribeOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_offering::DescribeOfferingError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_offering::DescribeOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_reservation::DescribeReservationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_reservation::DescribeReservationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_reservation::DescribeReservationError> for Error {
    fn from(err: crate::operation::describe_reservation::DescribeReservationError) -> Self {
        match err {
            crate::operation::describe_reservation::DescribeReservationError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_reservation::DescribeReservationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_reservation::DescribeReservationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_reservation::DescribeReservationError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_reservation::DescribeReservationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_reservation::DescribeReservationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_reservation::DescribeReservationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_reservation::DescribeReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schedule::DescribeScheduleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schedule::DescribeScheduleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_schedule::DescribeScheduleError> for Error {
    fn from(err: crate::operation::describe_schedule::DescribeScheduleError) -> Self {
        match err {
            crate::operation::describe_schedule::DescribeScheduleError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_schedule::DescribeScheduleError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_schedule::DescribeScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_thumbnails::DescribeThumbnailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_thumbnails::DescribeThumbnailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_thumbnails::DescribeThumbnailsError> for Error {
    fn from(err: crate::operation::describe_thumbnails::DescribeThumbnailsError) -> Self {
        match err {
            crate::operation::describe_thumbnails::DescribeThumbnailsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_thumbnails::DescribeThumbnailsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_thumbnails::DescribeThumbnailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError> for Error {
    fn from(err: crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError) -> Self {
        match err {
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template::GetCloudWatchAlarmTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError> for Error {
    fn from(err: crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError) -> Self {
        match err {
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_cloud_watch_alarm_template_group::GetCloudWatchAlarmTemplateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError> for Error {
    fn from(err: crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError) -> Self {
        match err {
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_event_bridge_rule_template::GetEventBridgeRuleTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError> for Error {
    fn from(err: crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError) -> Self {
        match err {
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_event_bridge_rule_template_group::GetEventBridgeRuleTemplateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_signal_map::GetSignalMapError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_signal_map::GetSignalMapError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_signal_map::GetSignalMapError> for Error {
    fn from(err: crate::operation::get_signal_map::GetSignalMapError) -> Self {
        match err {
            crate::operation::get_signal_map::GetSignalMapError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_signal_map::GetSignalMapError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_signal_map::GetSignalMapError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_signal_map::GetSignalMapError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_signal_map::GetSignalMapError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_signal_map::GetSignalMapError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError> for Error {
    fn from(err: crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError) -> Self {
        match err {
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_channel_placement_groups::ListChannelPlacementGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_channels::ListChannelsError> for Error {
    fn from(err: crate::operation::list_channels::ListChannelsError) -> Self {
        match err {
            crate::operation::list_channels::ListChannelsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_channels::ListChannelsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_channels::ListChannelsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_channels::ListChannelsError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_channels::ListChannelsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_channels::ListChannelsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_channels::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError> for Error {
    fn from(err: crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError) -> Self {
        match err {
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_cloud_watch_alarm_template_groups::ListCloudWatchAlarmTemplateGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError> for Error {
    fn from(err: crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError) -> Self {
        match err {
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_cloud_watch_alarm_templates::ListCloudWatchAlarmTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_clusters::ListClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_clusters::ListClustersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_clusters::ListClustersError> for Error {
    fn from(err: crate::operation::list_clusters::ListClustersError) -> Self {
        match err {
            crate::operation::list_clusters::ListClustersError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_clusters::ListClustersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_clusters::ListClustersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_clusters::ListClustersError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_clusters::ListClustersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_clusters::ListClustersError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_clusters::ListClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError> for Error {
    fn from(err: crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError) -> Self {
        match err {
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_event_bridge_rule_template_groups::ListEventBridgeRuleTemplateGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError> for Error {
    fn from(err: crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError) -> Self {
        match err {
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_event_bridge_rule_templates::ListEventBridgeRuleTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_devices::ListInputDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_devices::ListInputDevicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_input_devices::ListInputDevicesError> for Error {
    fn from(err: crate::operation::list_input_devices::ListInputDevicesError) -> Self {
        match err {
            crate::operation::list_input_devices::ListInputDevicesError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_input_devices::ListInputDevicesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_input_devices::ListInputDevicesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_input_devices::ListInputDevicesError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_input_devices::ListInputDevicesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_input_devices::ListInputDevicesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_input_devices::ListInputDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_device_transfers::ListInputDeviceTransfersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_device_transfers::ListInputDeviceTransfersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_input_device_transfers::ListInputDeviceTransfersError> for Error {
    fn from(err: crate::operation::list_input_device_transfers::ListInputDeviceTransfersError) -> Self {
        match err {
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::list_input_device_transfers::ListInputDeviceTransfersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inputs::ListInputsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inputs::ListInputsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_inputs::ListInputsError> for Error {
    fn from(err: crate::operation::list_inputs::ListInputsError) -> Self {
        match err {
            crate::operation::list_inputs::ListInputsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_inputs::ListInputsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_inputs::ListInputsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_inputs::ListInputsError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_inputs::ListInputsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_inputs::ListInputsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_inputs::ListInputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_security_groups::ListInputSecurityGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_security_groups::ListInputSecurityGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_input_security_groups::ListInputSecurityGroupsError> for Error {
    fn from(err: crate::operation::list_input_security_groups::ListInputSecurityGroupsError) -> Self {
        match err {
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_input_security_groups::ListInputSecurityGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multiplexes::ListMultiplexesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multiplexes::ListMultiplexesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_multiplexes::ListMultiplexesError> for Error {
    fn from(err: crate::operation::list_multiplexes::ListMultiplexesError) -> Self {
        match err {
            crate::operation::list_multiplexes::ListMultiplexesError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_multiplexes::ListMultiplexesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_multiplexes::ListMultiplexesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_multiplexes::ListMultiplexesError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_multiplexes::ListMultiplexesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_multiplexes::ListMultiplexesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_multiplexes::ListMultiplexesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multiplex_programs::ListMultiplexProgramsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multiplex_programs::ListMultiplexProgramsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_multiplex_programs::ListMultiplexProgramsError> for Error {
    fn from(err: crate::operation::list_multiplex_programs::ListMultiplexProgramsError) -> Self {
        match err {
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_multiplex_programs::ListMultiplexProgramsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_networks::ListNetworksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_networks::ListNetworksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_networks::ListNetworksError> for Error {
    fn from(err: crate::operation::list_networks::ListNetworksError) -> Self {
        match err {
            crate::operation::list_networks::ListNetworksError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_networks::ListNetworksError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_networks::ListNetworksError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_networks::ListNetworksError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_networks::ListNetworksError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_networks::ListNetworksError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_networks::ListNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_nodes::ListNodesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_nodes::ListNodesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_nodes::ListNodesError> for Error {
    fn from(err: crate::operation::list_nodes::ListNodesError) -> Self {
        match err {
            crate::operation::list_nodes::ListNodesError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_nodes::ListNodesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_nodes::ListNodesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_nodes::ListNodesError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_nodes::ListNodesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_nodes::ListNodesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_nodes::ListNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offerings::ListOfferingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_offerings::ListOfferingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_offerings::ListOfferingsError> for Error {
    fn from(err: crate::operation::list_offerings::ListOfferingsError) -> Self {
        match err {
            crate::operation::list_offerings::ListOfferingsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_offerings::ListOfferingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_offerings::ListOfferingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_offerings::ListOfferingsError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_offerings::ListOfferingsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_offerings::ListOfferingsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_offerings::ListOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_reservations::ListReservationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_reservations::ListReservationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_reservations::ListReservationsError> for Error {
    fn from(err: crate::operation::list_reservations::ListReservationsError) -> Self {
        match err {
            crate::operation::list_reservations::ListReservationsError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::list_reservations::ListReservationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_reservations::ListReservationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_reservations::ListReservationsError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::list_reservations::ListReservationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_reservations::ListReservationsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_reservations::ListReservationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_signal_maps::ListSignalMapsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_signal_maps::ListSignalMapsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_signal_maps::ListSignalMapsError> for Error {
    fn from(err: crate::operation::list_signal_maps::ListSignalMapsError) -> Self {
        match err {
            crate::operation::list_signal_maps::ListSignalMapsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_signal_maps::ListSignalMapsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_signal_maps::ListSignalMapsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_signal_maps::ListSignalMapsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_signal_maps::ListSignalMapsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_signal_maps::ListSignalMapsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::purchase_offering::PurchaseOfferingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::purchase_offering::PurchaseOfferingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::purchase_offering::PurchaseOfferingError> for Error {
    fn from(err: crate::operation::purchase_offering::PurchaseOfferingError) -> Self {
        match err {
            crate::operation::purchase_offering::PurchaseOfferingError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::purchase_offering::PurchaseOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_input_device::RebootInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_input_device::RebootInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reboot_input_device::RebootInputDeviceError> for Error {
    fn from(err: crate::operation::reboot_input_device::RebootInputDeviceError) -> Self {
        match err {
            crate::operation::reboot_input_device::RebootInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::reboot_input_device::RebootInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::reboot_input_device::RebootInputDeviceError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::reboot_input_device::RebootInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError> for Error {
    fn from(err: crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError) -> Self {
        match err {
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::reject_input_device_transfer::RejectInputDeviceTransferError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restart_channel_pipelines::RestartChannelPipelinesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restart_channel_pipelines::RestartChannelPipelinesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restart_channel_pipelines::RestartChannelPipelinesError> for Error {
    fn from(err: crate::operation::restart_channel_pipelines::RestartChannelPipelinesError) -> Self {
        match err {
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::restart_channel_pipelines::RestartChannelPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_channel::StartChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_channel::StartChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_channel::StartChannelError> for Error {
    fn from(err: crate::operation::start_channel::StartChannelError) -> Self {
        match err {
            crate::operation::start_channel::StartChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::start_channel::StartChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_channel::StartChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_channel::StartChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_channel::StartChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::start_channel::StartChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::start_channel::StartChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_channel::StartChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::start_channel::StartChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError> for Error {
    fn from(err: crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError) -> Self {
        match err {
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_delete_monitor_deployment::StartDeleteMonitorDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_input_device::StartInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_input_device::StartInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_input_device::StartInputDeviceError> for Error {
    fn from(err: crate::operation::start_input_device::StartInputDeviceError) -> Self {
        match err {
            crate::operation::start_input_device::StartInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::start_input_device::StartInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_input_device::StartInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_input_device::StartInputDeviceError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::start_input_device::StartInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_input_device::StartInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_input_device::StartInputDeviceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::start_input_device::StartInputDeviceError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::start_input_device::StartInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError> for Error {
    fn from(err: crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError) -> Self {
        match err {
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::start_input_device_maintenance_window::StartInputDeviceMaintenanceWindowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_monitor_deployment::StartMonitorDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_monitor_deployment::StartMonitorDeploymentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_monitor_deployment::StartMonitorDeploymentError> for Error {
    fn from(err: crate::operation::start_monitor_deployment::StartMonitorDeploymentError) -> Self {
        match err {
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_monitor_deployment::StartMonitorDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_multiplex::StartMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_multiplex::StartMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_multiplex::StartMultiplexError> for Error {
    fn from(err: crate::operation::start_multiplex::StartMultiplexError) -> Self {
        match err {
            crate::operation::start_multiplex::StartMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::start_multiplex::StartMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_multiplex::StartMultiplexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_multiplex::StartMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_multiplex::StartMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::start_multiplex::StartMultiplexError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::start_multiplex::StartMultiplexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_multiplex::StartMultiplexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::start_multiplex::StartMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_update_signal_map::StartUpdateSignalMapError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_update_signal_map::StartUpdateSignalMapError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_update_signal_map::StartUpdateSignalMapError> for Error {
    fn from(err: crate::operation::start_update_signal_map::StartUpdateSignalMapError) -> Self {
        match err {
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_update_signal_map::StartUpdateSignalMapError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_channel::StopChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_channel::StopChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_channel::StopChannelError> for Error {
    fn from(err: crate::operation::stop_channel::StopChannelError) -> Self {
        match err {
            crate::operation::stop_channel::StopChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::stop_channel::StopChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_channel::StopChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_channel::StopChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::stop_channel::StopChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::stop_channel::StopChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::stop_channel::StopChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_channel::StopChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::stop_channel::StopChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_input_device::StopInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_input_device::StopInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_input_device::StopInputDeviceError> for Error {
    fn from(err: crate::operation::stop_input_device::StopInputDeviceError) -> Self {
        match err {
            crate::operation::stop_input_device::StopInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::stop_input_device::StopInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::stop_input_device::StopInputDeviceError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::stop_input_device::StopInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_multiplex::StopMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_multiplex::StopMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_multiplex::StopMultiplexError> for Error {
    fn from(err: crate::operation::stop_multiplex::StopMultiplexError) -> Self {
        match err {
            crate::operation::stop_multiplex::StopMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::stop_multiplex::StopMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::transfer_input_device::TransferInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::transfer_input_device::TransferInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::transfer_input_device::TransferInputDeviceError> for Error {
    fn from(err: crate::operation::transfer_input_device::TransferInputDeviceError) -> Self {
        match err {
            crate::operation::transfer_input_device::TransferInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::transfer_input_device::TransferInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::transfer_input_device::TransferInputDeviceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::transfer_input_device::TransferInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::transfer_input_device::TransferInputDeviceError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::transfer_input_device::TransferInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::transfer_input_device::TransferInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::transfer_input_device::TransferInputDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::transfer_input_device::TransferInputDeviceError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::transfer_input_device::TransferInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_configuration::UpdateAccountConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_configuration::UpdateAccountConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_account_configuration::UpdateAccountConfigurationError> for Error {
    fn from(err: crate::operation::update_account_configuration::UpdateAccountConfigurationError) -> Self {
        match err {
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_account_configuration::UpdateAccountConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel::UpdateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel::UpdateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_channel::UpdateChannelError> for Error {
    fn from(err: crate::operation::update_channel::UpdateChannelError) -> Self {
        match err {
            crate::operation::update_channel::UpdateChannelError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_channel::UpdateChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_channel::UpdateChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_channel::UpdateChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_channel::UpdateChannelError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_channel::UpdateChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_channel::UpdateChannelError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::update_channel::UpdateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel_class::UpdateChannelClassError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel_class::UpdateChannelClassError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_channel_class::UpdateChannelClassError> for Error {
    fn from(err: crate::operation::update_channel_class::UpdateChannelClassError) -> Self {
        match err {
            crate::operation::update_channel_class::UpdateChannelClassError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_channel_class::UpdateChannelClassError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_channel_class::UpdateChannelClassError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_channel_class::UpdateChannelClassError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_channel_class::UpdateChannelClassError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError> for Error {
    fn from(err: crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError) -> Self {
        match err {
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_channel_placement_group::UpdateChannelPlacementGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError> for Error {
    fn from(err: crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError) -> Self {
        match err {
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError> for Error {
    fn from(err: crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError) -> Self {
        match err {
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_cloud_watch_alarm_template_group::UpdateCloudWatchAlarmTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_cluster::UpdateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_cluster::UpdateClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_cluster::UpdateClusterError> for Error {
    fn from(err: crate::operation::update_cluster::UpdateClusterError) -> Self {
        match err {
            crate::operation::update_cluster::UpdateClusterError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_cluster::UpdateClusterError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_cluster::UpdateClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_cluster::UpdateClusterError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_cluster::UpdateClusterError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_cluster::UpdateClusterError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_cluster::UpdateClusterError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_cluster::UpdateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError> for Error {
    fn from(err: crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError) -> Self {
        match err {
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_event_bridge_rule_template::UpdateEventBridgeRuleTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError> for Error {
    fn from(err: crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError) -> Self {
        match err {
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_event_bridge_rule_template_group::UpdateEventBridgeRuleTemplateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input::UpdateInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input::UpdateInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_input::UpdateInputError> for Error {
    fn from(err: crate::operation::update_input::UpdateInputError) -> Self {
        match err {
            crate::operation::update_input::UpdateInputError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_input::UpdateInputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_input::UpdateInputError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_input::UpdateInputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_input::UpdateInputError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_input::UpdateInputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_input::UpdateInputError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_input::UpdateInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input_device::UpdateInputDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input_device::UpdateInputDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_input_device::UpdateInputDeviceError> for Error {
    fn from(err: crate::operation::update_input_device::UpdateInputDeviceError) -> Self {
        match err {
            crate::operation::update_input_device::UpdateInputDeviceError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_input_device::UpdateInputDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_input_device::UpdateInputDeviceError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_input_device::UpdateInputDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input_security_group::UpdateInputSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input_security_group::UpdateInputSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_input_security_group::UpdateInputSecurityGroupError> for Error {
    fn from(err: crate::operation::update_input_security_group::UpdateInputSecurityGroupError) -> Self {
        match err {
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_input_security_group::UpdateInputSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multiplex::UpdateMultiplexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multiplex::UpdateMultiplexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_multiplex::UpdateMultiplexError> for Error {
    fn from(err: crate::operation::update_multiplex::UpdateMultiplexError) -> Self {
        match err {
            crate::operation::update_multiplex::UpdateMultiplexError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_multiplex::UpdateMultiplexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_multiplex::UpdateMultiplexError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_multiplex::UpdateMultiplexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multiplex_program::UpdateMultiplexProgramError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multiplex_program::UpdateMultiplexProgramError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_multiplex_program::UpdateMultiplexProgramError> for Error {
    fn from(err: crate::operation::update_multiplex_program::UpdateMultiplexProgramError) -> Self {
        match err {
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::GatewayTimeoutException(inner) => {
                Error::GatewayTimeoutException(inner)
            }
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_multiplex_program::UpdateMultiplexProgramError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_network::UpdateNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_network::UpdateNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_network::UpdateNetworkError> for Error {
    fn from(err: crate::operation::update_network::UpdateNetworkError) -> Self {
        match err {
            crate::operation::update_network::UpdateNetworkError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_network::UpdateNetworkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_network::UpdateNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_network::UpdateNetworkError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_network::UpdateNetworkError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_network::UpdateNetworkError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_network::UpdateNetworkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_network::UpdateNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_node::UpdateNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_node::UpdateNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_node::UpdateNodeError> for Error {
    fn from(err: crate::operation::update_node::UpdateNodeError) -> Self {
        match err {
            crate::operation::update_node::UpdateNodeError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_node::UpdateNodeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_node::UpdateNodeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_node::UpdateNodeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_node::UpdateNodeError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_node::UpdateNodeError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_node::UpdateNodeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_node::UpdateNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_node_state::UpdateNodeStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_node_state::UpdateNodeStateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_node_state::UpdateNodeStateError> for Error {
    fn from(err: crate::operation::update_node_state::UpdateNodeStateError) -> Self {
        match err {
            crate::operation::update_node_state::UpdateNodeStateError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_node_state::UpdateNodeStateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_node_state::UpdateNodeStateError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::operation::update_node_state::UpdateNodeStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_reservation::UpdateReservationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_reservation::UpdateReservationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_reservation::UpdateReservationError> for Error {
    fn from(err: crate::operation::update_reservation::UpdateReservationError) -> Self {
        match err {
            crate::operation::update_reservation::UpdateReservationError::BadGatewayException(inner) => Error::BadGatewayException(inner),
            crate::operation::update_reservation::UpdateReservationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_reservation::UpdateReservationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_reservation::UpdateReservationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_reservation::UpdateReservationError::GatewayTimeoutException(inner) => Error::GatewayTimeoutException(inner),
            crate::operation::update_reservation::UpdateReservationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_reservation::UpdateReservationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_reservation::UpdateReservationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_reservation::UpdateReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::BadGatewayException(inner) => inner.source(),
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::GatewayTimeoutException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::UnprocessableEntityException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadGatewayException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::GatewayTimeoutException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
