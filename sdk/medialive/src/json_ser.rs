// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_delete_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteInput,
) {
    if let Some(var_1) = &input.channel_ids {
        let mut array_2 = object.key("channelIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.input_ids {
        let mut array_5 = object.key("inputIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.input_security_group_ids {
        let mut array_8 = object.key("inputSecurityGroupIds").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9);
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.multiplex_ids {
        let mut array_11 = object.key("multiplexIds").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12);
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_crate_input_batch_start_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStartInput,
) {
    if let Some(var_13) = &input.channel_ids {
        let mut array_14 = object.key("channelIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15);
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.multiplex_ids {
        let mut array_17 = object.key("multiplexIds").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18);
            }
        }
        array_17.finish();
    }
}

pub fn serialize_structure_crate_input_batch_stop_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopInput,
) {
    if let Some(var_19) = &input.channel_ids {
        let mut array_20 = object.key("channelIds").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21);
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.multiplex_ids {
        let mut array_23 = object.key("multiplexIds").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
}

pub fn serialize_structure_crate_input_batch_update_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateScheduleInput,
) {
    if let Some(var_25) = &input.creates {
        let mut object_26 = object.key("creates").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_schedule_action_create_request(
            &mut object_26,
            var_25,
        );
        object_26.finish();
    }
    if let Some(var_27) = &input.deletes {
        let mut object_28 = object.key("deletes").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_schedule_action_delete_request(
            &mut object_28,
            var_27,
        );
        object_28.finish();
    }
}

pub fn serialize_structure_crate_input_create_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelInput,
) {
    if let Some(var_29) = &input.cdi_input_specification {
        let mut object_30 = object.key("cdiInputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_cdi_input_specification(
            &mut object_30,
            var_29,
        );
        object_30.finish();
    }
    if let Some(var_31) = &input.channel_class {
        object.key("channelClass").string(var_31.as_str());
    }
    if let Some(var_32) = &input.destinations {
        let mut array_33 = object.key("destinations").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_destination(
                    &mut object_35,
                    item_34,
                );
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.encoder_settings {
        let mut object_37 = object.key("encoderSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_encoder_settings(&mut object_37, var_36);
        object_37.finish();
    }
    if let Some(var_38) = &input.input_attachments {
        let mut array_39 = object.key("inputAttachments").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_attachment(
                    &mut object_41,
                    item_40,
                );
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.input_specification {
        let mut object_43 = object.key("inputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_input_specification(
            &mut object_43,
            var_42,
        );
        object_43.finish();
    }
    if let Some(var_44) = &input.log_level {
        object.key("logLevel").string(var_44.as_str());
    }
    if let Some(var_45) = &input.name {
        object.key("name").string(var_45);
    }
    if let Some(var_46) = &input.request_id {
        object.key("requestId").string(var_46);
    }
    if let Some(var_47) = &input.reserved {
        object.key("reserved").string(var_47);
    }
    if let Some(var_48) = &input.role_arn {
        object.key("roleArn").string(var_48);
    }
    if let Some(var_49) = &input.tags {
        let mut object_50 = object.key("tags").start_object();
        for (key_51, value_52) in var_49 {
            {
                object_50.key(key_51).string(value_52);
            }
        }
        object_50.finish();
    }
    if let Some(var_53) = &input.vpc {
        let mut object_54 = object.key("vpc").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_output_settings(
            &mut object_54,
            var_53,
        );
        object_54.finish();
    }
}

pub fn serialize_structure_crate_input_create_input_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInputInput,
) {
    if let Some(var_55) = &input.destinations {
        let mut array_56 = object.key("destinations").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_destination_request(
                    &mut object_58,
                    item_57,
                );
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.input_devices {
        let mut array_60 = object.key("inputDevices").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_device_settings(
                    &mut object_62,
                    item_61,
                );
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.input_security_groups {
        let mut array_64 = object.key("inputSecurityGroups").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65);
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.media_connect_flows {
        let mut array_67 = object.key("mediaConnectFlows").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_connect_flow_request(
                    &mut object_69,
                    item_68,
                );
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.name {
        object.key("name").string(var_70);
    }
    if let Some(var_71) = &input.request_id {
        object.key("requestId").string(var_71);
    }
    if let Some(var_72) = &input.role_arn {
        object.key("roleArn").string(var_72);
    }
    if let Some(var_73) = &input.sources {
        let mut array_74 = object.key("sources").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_source_request(
                    &mut object_76,
                    item_75,
                );
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
    if let Some(var_81) = &input.r#type {
        object.key("type").string(var_81.as_str());
    }
    if let Some(var_82) = &input.vpc {
        let mut object_83 = object.key("vpc").start_object();
        crate::json_ser::serialize_structure_crate_model_input_vpc_request(&mut object_83, var_82);
        object_83.finish();
    }
}

pub fn serialize_structure_crate_input_create_input_security_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInputSecurityGroupInput,
) {
    if let Some(var_84) = &input.tags {
        let mut object_85 = object.key("tags").start_object();
        for (key_86, value_87) in var_84 {
            {
                object_85.key(key_86).string(value_87);
            }
        }
        object_85.finish();
    }
    if let Some(var_88) = &input.whitelist_rules {
        let mut array_89 = object.key("whitelistRules").start_array();
        for item_90 in var_88 {
            {
                let mut object_91 = array_89.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_whitelist_rule_cidr(
                    &mut object_91,
                    item_90,
                );
                object_91.finish();
            }
        }
        array_89.finish();
    }
}

pub fn serialize_structure_crate_input_create_multiplex_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMultiplexInput,
) {
    if let Some(var_92) = &input.availability_zones {
        let mut array_93 = object.key("availabilityZones").start_array();
        for item_94 in var_92 {
            {
                array_93.value().string(item_94);
            }
        }
        array_93.finish();
    }
    if let Some(var_95) = &input.multiplex_settings {
        let mut object_96 = object.key("multiplexSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_settings(&mut object_96, var_95);
        object_96.finish();
    }
    if let Some(var_97) = &input.name {
        object.key("name").string(var_97);
    }
    if let Some(var_98) = &input.request_id {
        object.key("requestId").string(var_98);
    }
    if let Some(var_99) = &input.tags {
        let mut object_100 = object.key("tags").start_object();
        for (key_101, value_102) in var_99 {
            {
                object_100.key(key_101).string(value_102);
            }
        }
        object_100.finish();
    }
}

pub fn serialize_structure_crate_input_create_multiplex_program_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMultiplexProgramInput,
) {
    if let Some(var_103) = &input.multiplex_program_settings {
        let mut object_104 = object.key("multiplexProgramSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_program_settings(
            &mut object_104,
            var_103,
        );
        object_104.finish();
    }
    if let Some(var_105) = &input.program_name {
        object.key("programName").string(var_105);
    }
    if let Some(var_106) = &input.request_id {
        object.key("requestId").string(var_106);
    }
}

pub fn serialize_structure_crate_input_create_partner_input_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartnerInputInput,
) {
    if let Some(var_107) = &input.request_id {
        object.key("requestId").string(var_107);
    }
    if let Some(var_108) = &input.tags {
        let mut object_109 = object.key("tags").start_object();
        for (key_110, value_111) in var_108 {
            {
                object_109.key(key_110).string(value_111);
            }
        }
        object_109.finish();
    }
}

pub fn serialize_structure_crate_input_create_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTagsInput,
) {
    if let Some(var_112) = &input.tags {
        let mut object_113 = object.key("tags").start_object();
        for (key_114, value_115) in var_112 {
            {
                object_113.key(key_114).string(value_115);
            }
        }
        object_113.finish();
    }
}

pub fn serialize_structure_crate_input_purchase_offering_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PurchaseOfferingInput,
) {
    {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_116) = &input.name {
        object.key("name").string(var_116);
    }
    if let Some(var_117) = &input.request_id {
        object.key("requestId").string(var_117);
    }
    if let Some(var_118) = &input.start {
        object.key("start").string(var_118);
    }
    if let Some(var_119) = &input.tags {
        let mut object_120 = object.key("tags").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122);
            }
        }
        object_120.finish();
    }
}

pub fn serialize_structure_crate_input_transfer_input_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferInputDeviceInput,
) {
    if let Some(var_123) = &input.target_customer_id {
        object.key("targetCustomerId").string(var_123);
    }
    if let Some(var_124) = &input.target_region {
        object.key("targetRegion").string(var_124);
    }
    if let Some(var_125) = &input.transfer_message {
        object.key("transferMessage").string(var_125);
    }
}

pub fn serialize_structure_crate_input_update_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelInput,
) {
    if let Some(var_126) = &input.cdi_input_specification {
        let mut object_127 = object.key("cdiInputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_cdi_input_specification(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.destinations {
        let mut array_129 = object.key("destinations").start_array();
        for item_130 in var_128 {
            {
                let mut object_131 = array_129.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_destination(
                    &mut object_131,
                    item_130,
                );
                object_131.finish();
            }
        }
        array_129.finish();
    }
    if let Some(var_132) = &input.encoder_settings {
        let mut object_133 = object.key("encoderSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_encoder_settings(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.input_attachments {
        let mut array_135 = object.key("inputAttachments").start_array();
        for item_136 in var_134 {
            {
                let mut object_137 = array_135.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_attachment(
                    &mut object_137,
                    item_136,
                );
                object_137.finish();
            }
        }
        array_135.finish();
    }
    if let Some(var_138) = &input.input_specification {
        let mut object_139 = object.key("inputSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_input_specification(
            &mut object_139,
            var_138,
        );
        object_139.finish();
    }
    if let Some(var_140) = &input.log_level {
        object.key("logLevel").string(var_140.as_str());
    }
    if let Some(var_141) = &input.name {
        object.key("name").string(var_141);
    }
    if let Some(var_142) = &input.role_arn {
        object.key("roleArn").string(var_142);
    }
}

pub fn serialize_structure_crate_input_update_channel_class_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelClassInput,
) {
    if let Some(var_143) = &input.channel_class {
        object.key("channelClass").string(var_143.as_str());
    }
    if let Some(var_144) = &input.destinations {
        let mut array_145 = object.key("destinations").start_array();
        for item_146 in var_144 {
            {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_destination(
                    &mut object_147,
                    item_146,
                );
                object_147.finish();
            }
        }
        array_145.finish();
    }
}

pub fn serialize_structure_crate_input_update_input_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInputInput,
) {
    if let Some(var_148) = &input.destinations {
        let mut array_149 = object.key("destinations").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_destination_request(
                    &mut object_151,
                    item_150,
                );
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.input_devices {
        let mut array_153 = object.key("inputDevices").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_device_request(
                    &mut object_155,
                    item_154,
                );
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.input_security_groups {
        let mut array_157 = object.key("inputSecurityGroups").start_array();
        for item_158 in var_156 {
            {
                array_157.value().string(item_158);
            }
        }
        array_157.finish();
    }
    if let Some(var_159) = &input.media_connect_flows {
        let mut array_160 = object.key("mediaConnectFlows").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_connect_flow_request(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.name {
        object.key("name").string(var_163);
    }
    if let Some(var_164) = &input.role_arn {
        object.key("roleArn").string(var_164);
    }
    if let Some(var_165) = &input.sources {
        let mut array_166 = object.key("sources").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_source_request(
                    &mut object_168,
                    item_167,
                );
                object_168.finish();
            }
        }
        array_166.finish();
    }
}

pub fn serialize_structure_crate_input_update_input_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInputDeviceInput,
) {
    if let Some(var_169) = &input.hd_device_settings {
        let mut object_170 = object.key("hdDeviceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_device_configurable_settings(
            &mut object_170,
            var_169,
        );
        object_170.finish();
    }
    if let Some(var_171) = &input.name {
        object.key("name").string(var_171);
    }
    if let Some(var_172) = &input.uhd_device_settings {
        let mut object_173 = object.key("uhdDeviceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_device_configurable_settings(
            &mut object_173,
            var_172,
        );
        object_173.finish();
    }
}

pub fn serialize_structure_crate_input_update_input_security_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInputSecurityGroupInput,
) {
    if let Some(var_174) = &input.tags {
        let mut object_175 = object.key("tags").start_object();
        for (key_176, value_177) in var_174 {
            {
                object_175.key(key_176).string(value_177);
            }
        }
        object_175.finish();
    }
    if let Some(var_178) = &input.whitelist_rules {
        let mut array_179 = object.key("whitelistRules").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_whitelist_rule_cidr(
                    &mut object_181,
                    item_180,
                );
                object_181.finish();
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_crate_input_update_multiplex_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMultiplexInput,
) {
    if let Some(var_182) = &input.multiplex_settings {
        let mut object_183 = object.key("multiplexSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_settings(
            &mut object_183,
            var_182,
        );
        object_183.finish();
    }
    if let Some(var_184) = &input.name {
        object.key("name").string(var_184);
    }
}

pub fn serialize_structure_crate_input_update_multiplex_program_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMultiplexProgramInput,
) {
    if let Some(var_185) = &input.multiplex_program_settings {
        let mut object_186 = object.key("multiplexProgramSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_program_settings(
            &mut object_186,
            var_185,
        );
        object_186.finish();
    }
}

pub fn serialize_structure_crate_input_update_reservation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReservationInput,
) {
    if let Some(var_187) = &input.name {
        object.key("name").string(var_187);
    }
}

pub fn serialize_structure_crate_model_batch_schedule_action_create_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchScheduleActionCreateRequest,
) {
    if let Some(var_188) = &input.schedule_actions {
        let mut array_189 = object.key("scheduleActions").start_array();
        for item_190 in var_188 {
            {
                let mut object_191 = array_189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schedule_action(
                    &mut object_191,
                    item_190,
                );
                object_191.finish();
            }
        }
        array_189.finish();
    }
}

pub fn serialize_structure_crate_model_batch_schedule_action_delete_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchScheduleActionDeleteRequest,
) {
    if let Some(var_192) = &input.action_names {
        let mut array_193 = object.key("actionNames").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194);
            }
        }
        array_193.finish();
    }
}

pub fn serialize_structure_crate_model_cdi_input_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CdiInputSpecification,
) {
    if let Some(var_195) = &input.resolution {
        object.key("resolution").string(var_195.as_str());
    }
}

pub fn serialize_structure_crate_model_output_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDestination,
) {
    if let Some(var_196) = &input.id {
        object.key("id").string(var_196);
    }
    if let Some(var_197) = &input.media_package_settings {
        let mut array_198 = object.key("mediaPackageSettings").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_package_output_destination_settings(&mut object_200, item_199);
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.multiplex_settings {
        let mut object_202 = object.key("multiplexSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_program_channel_destination_settings(&mut object_202, var_201);
        object_202.finish();
    }
    if let Some(var_203) = &input.settings {
        let mut array_204 = object.key("settings").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_destination_settings(
                    &mut object_206,
                    item_205,
                );
                object_206.finish();
            }
        }
        array_204.finish();
    }
}

pub fn serialize_structure_crate_model_encoder_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncoderSettings,
) {
    if let Some(var_207) = &input.audio_descriptions {
        let mut array_208 = object.key("audioDescriptions").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_description(
                    &mut object_210,
                    item_209,
                );
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.avail_blanking {
        let mut object_212 = object.key("availBlanking").start_object();
        crate::json_ser::serialize_structure_crate_model_avail_blanking(&mut object_212, var_211);
        object_212.finish();
    }
    if let Some(var_213) = &input.avail_configuration {
        let mut object_214 = object.key("availConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_avail_configuration(
            &mut object_214,
            var_213,
        );
        object_214.finish();
    }
    if let Some(var_215) = &input.blackout_slate {
        let mut object_216 = object.key("blackoutSlate").start_object();
        crate::json_ser::serialize_structure_crate_model_blackout_slate(&mut object_216, var_215);
        object_216.finish();
    }
    if let Some(var_217) = &input.caption_descriptions {
        let mut array_218 = object.key("captionDescriptions").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_caption_description(
                    &mut object_220,
                    item_219,
                );
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.feature_activations {
        let mut object_222 = object.key("featureActivations").start_object();
        crate::json_ser::serialize_structure_crate_model_feature_activations(
            &mut object_222,
            var_221,
        );
        object_222.finish();
    }
    if let Some(var_223) = &input.global_configuration {
        let mut object_224 = object.key("globalConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_global_configuration(
            &mut object_224,
            var_223,
        );
        object_224.finish();
    }
    if let Some(var_225) = &input.motion_graphics_configuration {
        let mut object_226 = object.key("motionGraphicsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_motion_graphics_configuration(
            &mut object_226,
            var_225,
        );
        object_226.finish();
    }
    if let Some(var_227) = &input.nielsen_configuration {
        let mut object_228 = object.key("nielsenConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_nielsen_configuration(
            &mut object_228,
            var_227,
        );
        object_228.finish();
    }
    if let Some(var_229) = &input.output_groups {
        let mut array_230 = object.key("outputGroups").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_group(
                    &mut object_232,
                    item_231,
                );
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.timecode_config {
        let mut object_234 = object.key("timecodeConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timecode_config(&mut object_234, var_233);
        object_234.finish();
    }
    if let Some(var_235) = &input.video_descriptions {
        let mut array_236 = object.key("videoDescriptions").start_array();
        for item_237 in var_235 {
            {
                let mut object_238 = array_236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_video_description(
                    &mut object_238,
                    item_237,
                );
                object_238.finish();
            }
        }
        array_236.finish();
    }
}

pub fn serialize_structure_crate_model_input_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputAttachment,
) {
    if let Some(var_239) = &input.automatic_input_failover_settings {
        let mut object_240 = object.key("automaticInputFailoverSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_automatic_input_failover_settings(
            &mut object_240,
            var_239,
        );
        object_240.finish();
    }
    if let Some(var_241) = &input.input_attachment_name {
        object.key("inputAttachmentName").string(var_241);
    }
    if let Some(var_242) = &input.input_id {
        object.key("inputId").string(var_242);
    }
    if let Some(var_243) = &input.input_settings {
        let mut object_244 = object.key("inputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_settings(&mut object_244, var_243);
        object_244.finish();
    }
}

pub fn serialize_structure_crate_model_input_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputSpecification,
) {
    if let Some(var_245) = &input.codec {
        object.key("codec").string(var_245.as_str());
    }
    if let Some(var_246) = &input.maximum_bitrate {
        object.key("maximumBitrate").string(var_246.as_str());
    }
    if let Some(var_247) = &input.resolution {
        object.key("resolution").string(var_247.as_str());
    }
}

pub fn serialize_structure_crate_model_vpc_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcOutputSettings,
) {
    if let Some(var_248) = &input.public_address_allocation_ids {
        let mut array_249 = object.key("publicAddressAllocationIds").start_array();
        for item_250 in var_248 {
            {
                array_249.value().string(item_250);
            }
        }
        array_249.finish();
    }
    if let Some(var_251) = &input.security_group_ids {
        let mut array_252 = object.key("securityGroupIds").start_array();
        for item_253 in var_251 {
            {
                array_252.value().string(item_253);
            }
        }
        array_252.finish();
    }
    if let Some(var_254) = &input.subnet_ids {
        let mut array_255 = object.key("subnetIds").start_array();
        for item_256 in var_254 {
            {
                array_255.value().string(item_256);
            }
        }
        array_255.finish();
    }
}

pub fn serialize_structure_crate_model_input_destination_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDestinationRequest,
) {
    if let Some(var_257) = &input.stream_name {
        object.key("streamName").string(var_257);
    }
}

pub fn serialize_structure_crate_model_input_device_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDeviceSettings,
) {
    if let Some(var_258) = &input.id {
        object.key("id").string(var_258);
    }
}

pub fn serialize_structure_crate_model_media_connect_flow_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaConnectFlowRequest,
) {
    if let Some(var_259) = &input.flow_arn {
        object.key("flowArn").string(var_259);
    }
}

pub fn serialize_structure_crate_model_input_source_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputSourceRequest,
) {
    if let Some(var_260) = &input.password_param {
        object.key("passwordParam").string(var_260);
    }
    if let Some(var_261) = &input.url {
        object.key("url").string(var_261);
    }
    if let Some(var_262) = &input.username {
        object.key("username").string(var_262);
    }
}

pub fn serialize_structure_crate_model_input_vpc_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputVpcRequest,
) {
    if let Some(var_263) = &input.security_group_ids {
        let mut array_264 = object.key("securityGroupIds").start_array();
        for item_265 in var_263 {
            {
                array_264.value().string(item_265);
            }
        }
        array_264.finish();
    }
    if let Some(var_266) = &input.subnet_ids {
        let mut array_267 = object.key("subnetIds").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268);
            }
        }
        array_267.finish();
    }
}

pub fn serialize_structure_crate_model_input_whitelist_rule_cidr(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputWhitelistRuleCidr,
) {
    if let Some(var_269) = &input.cidr {
        object.key("cidr").string(var_269);
    }
}

pub fn serialize_structure_crate_model_multiplex_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexSettings,
) {
    if input.maximum_video_buffer_delay_milliseconds != 0 {
        object.key("maximumVideoBufferDelayMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_video_buffer_delay_milliseconds).into()),
        );
    }
    {
        object.key("transportStreamBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transport_stream_bitrate).into()),
        );
    }
    {
        object.key("transportStreamId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transport_stream_id).into()),
        );
    }
    if input.transport_stream_reserved_bitrate != 0 {
        object.key("transportStreamReservedBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transport_stream_reserved_bitrate).into()),
        );
    }
}

pub fn serialize_structure_crate_model_multiplex_program_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexProgramSettings,
) {
    if let Some(var_270) = &input.preferred_channel_pipeline {
        object
            .key("preferredChannelPipeline")
            .string(var_270.as_str());
    }
    {
        object.key("programNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.program_number).into()),
        );
    }
    if let Some(var_271) = &input.service_descriptor {
        let mut object_272 = object.key("serviceDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_program_service_descriptor(
            &mut object_272,
            var_271,
        );
        object_272.finish();
    }
    if let Some(var_273) = &input.video_settings {
        let mut object_274 = object.key("videoSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_video_settings(
            &mut object_274,
            var_273,
        );
        object_274.finish();
    }
}

pub fn serialize_structure_crate_model_input_device_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDeviceRequest,
) {
    if let Some(var_275) = &input.id {
        object.key("id").string(var_275);
    }
}

pub fn serialize_structure_crate_model_input_device_configurable_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDeviceConfigurableSettings,
) {
    if let Some(var_276) = &input.configured_input {
        object.key("configuredInput").string(var_276.as_str());
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
}

pub fn serialize_structure_crate_model_schedule_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleAction,
) {
    if let Some(var_277) = &input.action_name {
        object.key("actionName").string(var_277);
    }
    if let Some(var_278) = &input.schedule_action_settings {
        let mut object_279 = object.key("scheduleActionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_action_settings(
            &mut object_279,
            var_278,
        );
        object_279.finish();
    }
    if let Some(var_280) = &input.schedule_action_start_settings {
        let mut object_281 = object.key("scheduleActionStartSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_action_start_settings(
            &mut object_281,
            var_280,
        );
        object_281.finish();
    }
}

pub fn serialize_structure_crate_model_media_package_output_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaPackageOutputDestinationSettings,
) {
    if let Some(var_282) = &input.channel_id {
        object.key("channelId").string(var_282);
    }
}

pub fn serialize_structure_crate_model_multiplex_program_channel_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexProgramChannelDestinationSettings,
) {
    if let Some(var_283) = &input.multiplex_id {
        object.key("multiplexId").string(var_283);
    }
    if let Some(var_284) = &input.program_name {
        object.key("programName").string(var_284);
    }
}

pub fn serialize_structure_crate_model_output_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDestinationSettings,
) {
    if let Some(var_285) = &input.password_param {
        object.key("passwordParam").string(var_285);
    }
    if let Some(var_286) = &input.stream_name {
        object.key("streamName").string(var_286);
    }
    if let Some(var_287) = &input.url {
        object.key("url").string(var_287);
    }
    if let Some(var_288) = &input.username {
        object.key("username").string(var_288);
    }
}

pub fn serialize_structure_crate_model_audio_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioDescription,
) {
    if let Some(var_289) = &input.audio_normalization_settings {
        let mut object_290 = object.key("audioNormalizationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_normalization_settings(
            &mut object_290,
            var_289,
        );
        object_290.finish();
    }
    if let Some(var_291) = &input.audio_selector_name {
        object.key("audioSelectorName").string(var_291);
    }
    if let Some(var_292) = &input.audio_type {
        object.key("audioType").string(var_292.as_str());
    }
    if let Some(var_293) = &input.audio_type_control {
        object.key("audioTypeControl").string(var_293.as_str());
    }
    if let Some(var_294) = &input.codec_settings {
        let mut object_295 = object.key("codecSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_codec_settings(
            &mut object_295,
            var_294,
        );
        object_295.finish();
    }
    if let Some(var_296) = &input.language_code {
        object.key("languageCode").string(var_296);
    }
    if let Some(var_297) = &input.language_code_control {
        object.key("languageCodeControl").string(var_297.as_str());
    }
    if let Some(var_298) = &input.name {
        object.key("name").string(var_298);
    }
    if let Some(var_299) = &input.remix_settings {
        let mut object_300 = object.key("remixSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_remix_settings(&mut object_300, var_299);
        object_300.finish();
    }
    if let Some(var_301) = &input.stream_name {
        object.key("streamName").string(var_301);
    }
}

pub fn serialize_structure_crate_model_avail_blanking(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailBlanking,
) {
    if let Some(var_302) = &input.avail_blanking_image {
        let mut object_303 = object.key("availBlankingImage").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_303, var_302);
        object_303.finish();
    }
    if let Some(var_304) = &input.state {
        object.key("state").string(var_304.as_str());
    }
}

pub fn serialize_structure_crate_model_avail_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailConfiguration,
) {
    if let Some(var_305) = &input.avail_settings {
        let mut object_306 = object.key("availSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_avail_settings(&mut object_306, var_305);
        object_306.finish();
    }
}

pub fn serialize_structure_crate_model_blackout_slate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlackoutSlate,
) {
    if let Some(var_307) = &input.blackout_slate_image {
        let mut object_308 = object.key("blackoutSlateImage").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_308, var_307);
        object_308.finish();
    }
    if let Some(var_309) = &input.network_end_blackout {
        object.key("networkEndBlackout").string(var_309.as_str());
    }
    if let Some(var_310) = &input.network_end_blackout_image {
        let mut object_311 = object.key("networkEndBlackoutImage").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_311, var_310);
        object_311.finish();
    }
    if let Some(var_312) = &input.network_id {
        object.key("networkId").string(var_312);
    }
    if let Some(var_313) = &input.state {
        object.key("state").string(var_313.as_str());
    }
}

pub fn serialize_structure_crate_model_caption_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionDescription,
) {
    if let Some(var_314) = &input.caption_selector_name {
        object.key("captionSelectorName").string(var_314);
    }
    if let Some(var_315) = &input.destination_settings {
        let mut object_316 = object.key("destinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_caption_destination_settings(
            &mut object_316,
            var_315,
        );
        object_316.finish();
    }
    if let Some(var_317) = &input.language_code {
        object.key("languageCode").string(var_317);
    }
    if let Some(var_318) = &input.language_description {
        object.key("languageDescription").string(var_318);
    }
    if let Some(var_319) = &input.name {
        object.key("name").string(var_319);
    }
}

pub fn serialize_structure_crate_model_feature_activations(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureActivations,
) {
    if let Some(var_320) = &input.input_prepare_schedule_actions {
        object
            .key("inputPrepareScheduleActions")
            .string(var_320.as_str());
    }
}

pub fn serialize_structure_crate_model_global_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlobalConfiguration,
) {
    if input.initial_audio_gain != 0 {
        object.key("initialAudioGain").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.initial_audio_gain).into()),
        );
    }
    if let Some(var_321) = &input.input_end_action {
        object.key("inputEndAction").string(var_321.as_str());
    }
    if let Some(var_322) = &input.input_loss_behavior {
        let mut object_323 = object.key("inputLossBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_input_loss_behavior(
            &mut object_323,
            var_322,
        );
        object_323.finish();
    }
    if let Some(var_324) = &input.output_locking_mode {
        object.key("outputLockingMode").string(var_324.as_str());
    }
    if let Some(var_325) = &input.output_timing_source {
        object.key("outputTimingSource").string(var_325.as_str());
    }
    if let Some(var_326) = &input.support_low_framerate_inputs {
        object
            .key("supportLowFramerateInputs")
            .string(var_326.as_str());
    }
}

pub fn serialize_structure_crate_model_motion_graphics_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MotionGraphicsConfiguration,
) {
    if let Some(var_327) = &input.motion_graphics_insertion {
        object
            .key("motionGraphicsInsertion")
            .string(var_327.as_str());
    }
    if let Some(var_328) = &input.motion_graphics_settings {
        let mut object_329 = object.key("motionGraphicsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_motion_graphics_settings(
            &mut object_329,
            var_328,
        );
        object_329.finish();
    }
}

pub fn serialize_structure_crate_model_nielsen_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NielsenConfiguration,
) {
    if let Some(var_330) = &input.distributor_id {
        object.key("distributorId").string(var_330);
    }
    if let Some(var_331) = &input.nielsen_pcm_to_id3_tagging {
        object
            .key("nielsenPcmToId3Tagging")
            .string(var_331.as_str());
    }
}

pub fn serialize_structure_crate_model_output_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputGroup,
) {
    if let Some(var_332) = &input.name {
        object.key("name").string(var_332);
    }
    if let Some(var_333) = &input.output_group_settings {
        let mut object_334 = object.key("outputGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_output_group_settings(
            &mut object_334,
            var_333,
        );
        object_334.finish();
    }
    if let Some(var_335) = &input.outputs {
        let mut array_336 = object.key("outputs").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output(&mut object_338, item_337);
                object_338.finish();
            }
        }
        array_336.finish();
    }
}

pub fn serialize_structure_crate_model_timecode_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimecodeConfig,
) {
    if let Some(var_339) = &input.source {
        object.key("source").string(var_339.as_str());
    }
    if input.sync_threshold != 0 {
        object.key("syncThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sync_threshold).into()),
        );
    }
}

pub fn serialize_structure_crate_model_video_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoDescription,
) {
    if let Some(var_340) = &input.codec_settings {
        let mut object_341 = object.key("codecSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_video_codec_settings(
            &mut object_341,
            var_340,
        );
        object_341.finish();
    }
    if input.height != 0 {
        object.key("height").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.height).into()),
        );
    }
    if let Some(var_342) = &input.name {
        object.key("name").string(var_342);
    }
    if let Some(var_343) = &input.respond_to_afd {
        object.key("respondToAfd").string(var_343.as_str());
    }
    if let Some(var_344) = &input.scaling_behavior {
        object.key("scalingBehavior").string(var_344.as_str());
    }
    if input.sharpness != 0 {
        object.key("sharpness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sharpness).into()),
        );
    }
    if input.width != 0 {
        object.key("width").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.width).into()),
        );
    }
}

pub fn serialize_structure_crate_model_automatic_input_failover_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomaticInputFailoverSettings,
) {
    if input.error_clear_time_msec != 0 {
        object.key("errorClearTimeMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.error_clear_time_msec).into()),
        );
    }
    if let Some(var_345) = &input.failover_conditions {
        let mut array_346 = object.key("failoverConditions").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_failover_condition(
                    &mut object_348,
                    item_347,
                );
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.input_preference {
        object.key("inputPreference").string(var_349.as_str());
    }
    if let Some(var_350) = &input.secondary_input_id {
        object.key("secondaryInputId").string(var_350);
    }
}

pub fn serialize_structure_crate_model_input_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputSettings,
) {
    if let Some(var_351) = &input.audio_selectors {
        let mut array_352 = object.key("audioSelectors").start_array();
        for item_353 in var_351 {
            {
                let mut object_354 = array_352.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_selector(
                    &mut object_354,
                    item_353,
                );
                object_354.finish();
            }
        }
        array_352.finish();
    }
    if let Some(var_355) = &input.caption_selectors {
        let mut array_356 = object.key("captionSelectors").start_array();
        for item_357 in var_355 {
            {
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_crate_model_caption_selector(
                    &mut object_358,
                    item_357,
                );
                object_358.finish();
            }
        }
        array_356.finish();
    }
    if let Some(var_359) = &input.deblock_filter {
        object.key("deblockFilter").string(var_359.as_str());
    }
    if let Some(var_360) = &input.denoise_filter {
        object.key("denoiseFilter").string(var_360.as_str());
    }
    if input.filter_strength != 0 {
        object.key("filterStrength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filter_strength).into()),
        );
    }
    if let Some(var_361) = &input.input_filter {
        object.key("inputFilter").string(var_361.as_str());
    }
    if let Some(var_362) = &input.network_input_settings {
        let mut object_363 = object.key("networkInputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_network_input_settings(
            &mut object_363,
            var_362,
        );
        object_363.finish();
    }
    if let Some(var_364) = &input.smpte2038_data_preference {
        object
            .key("smpte2038DataPreference")
            .string(var_364.as_str());
    }
    if let Some(var_365) = &input.source_end_behavior {
        object.key("sourceEndBehavior").string(var_365.as_str());
    }
    if let Some(var_366) = &input.video_selector {
        let mut object_367 = object.key("videoSelector").start_object();
        crate::json_ser::serialize_structure_crate_model_video_selector(&mut object_367, var_366);
        object_367.finish();
    }
}

pub fn serialize_structure_crate_model_multiplex_program_service_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexProgramServiceDescriptor,
) {
    if let Some(var_368) = &input.provider_name {
        object.key("providerName").string(var_368);
    }
    if let Some(var_369) = &input.service_name {
        object.key("serviceName").string(var_369);
    }
}

pub fn serialize_structure_crate_model_multiplex_video_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexVideoSettings,
) {
    if input.constant_bitrate != 0 {
        object.key("constantBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.constant_bitrate).into()),
        );
    }
    if let Some(var_370) = &input.statmux_settings {
        let mut object_371 = object.key("statmuxSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_statmux_video_settings(
            &mut object_371,
            var_370,
        );
        object_371.finish();
    }
}

pub fn serialize_structure_crate_model_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleActionSettings,
) {
    if let Some(var_372) = &input.hls_id3_segment_tagging_settings {
        let mut object_373 = object.key("hlsId3SegmentTaggingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_id3_segment_tagging_schedule_action_settings(&mut object_373, var_372);
        object_373.finish();
    }
    if let Some(var_374) = &input.hls_timed_metadata_settings {
        let mut object_375 = object.key("hlsTimedMetadataSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_timed_metadata_schedule_action_settings(&mut object_375, var_374);
        object_375.finish();
    }
    if let Some(var_376) = &input.input_prepare_settings {
        let mut object_377 = object.key("inputPrepareSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_prepare_schedule_action_settings(
            &mut object_377,
            var_376,
        );
        object_377.finish();
    }
    if let Some(var_378) = &input.input_switch_settings {
        let mut object_379 = object.key("inputSwitchSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_switch_schedule_action_settings(
            &mut object_379,
            var_378,
        );
        object_379.finish();
    }
    if let Some(var_380) = &input.motion_graphics_image_activate_settings {
        let mut object_381 = object
            .key("motionGraphicsImageActivateSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_motion_graphics_activate_schedule_action_settings(&mut object_381, var_380);
        object_381.finish();
    }
    if let Some(var_382) = &input.motion_graphics_image_deactivate_settings {
        let mut object_383 = object
            .key("motionGraphicsImageDeactivateSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_motion_graphics_deactivate_schedule_action_settings(&mut object_383, var_382);
        object_383.finish();
    }
    if let Some(var_384) = &input.pause_state_settings {
        let mut object_385 = object.key("pauseStateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_pause_state_schedule_action_settings(
            &mut object_385,
            var_384,
        );
        object_385.finish();
    }
    if let Some(var_386) = &input.scte35_return_to_network_settings {
        let mut object_387 = object.key("scte35ReturnToNetworkSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_return_to_network_schedule_action_settings(&mut object_387, var_386);
        object_387.finish();
    }
    if let Some(var_388) = &input.scte35_splice_insert_settings {
        let mut object_389 = object.key("scte35SpliceInsertSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_splice_insert_schedule_action_settings(&mut object_389, var_388);
        object_389.finish();
    }
    if let Some(var_390) = &input.scte35_time_signal_settings {
        let mut object_391 = object.key("scte35TimeSignalSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_time_signal_schedule_action_settings(&mut object_391, var_390);
        object_391.finish();
    }
    if let Some(var_392) = &input.static_image_activate_settings {
        let mut object_393 = object.key("staticImageActivateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_static_image_activate_schedule_action_settings(&mut object_393, var_392);
        object_393.finish();
    }
    if let Some(var_394) = &input.static_image_deactivate_settings {
        let mut object_395 = object.key("staticImageDeactivateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_static_image_deactivate_schedule_action_settings(&mut object_395, var_394);
        object_395.finish();
    }
}

pub fn serialize_structure_crate_model_schedule_action_start_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleActionStartSettings,
) {
    if let Some(var_396) = &input.fixed_mode_schedule_action_start_settings {
        let mut object_397 = object
            .key("fixedModeScheduleActionStartSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_fixed_mode_schedule_action_start_settings(
            &mut object_397,
            var_396,
        );
        object_397.finish();
    }
    if let Some(var_398) = &input.follow_mode_schedule_action_start_settings {
        let mut object_399 = object
            .key("followModeScheduleActionStartSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_follow_mode_schedule_action_start_settings(
            &mut object_399,
            var_398,
        );
        object_399.finish();
    }
    if let Some(var_400) = &input.immediate_mode_schedule_action_start_settings {
        let mut object_401 = object
            .key("immediateModeScheduleActionStartSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_immediate_mode_schedule_action_start_settings(&mut object_401, var_400);
        object_401.finish();
    }
}

pub fn serialize_structure_crate_model_audio_normalization_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioNormalizationSettings,
) {
    if let Some(var_402) = &input.algorithm {
        object.key("algorithm").string(var_402.as_str());
    }
    if let Some(var_403) = &input.algorithm_control {
        object.key("algorithmControl").string(var_403.as_str());
    }
    if input.target_lkfs != 0.0 {
        object.key("targetLkfs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.target_lkfs).into()),
        );
    }
}

pub fn serialize_structure_crate_model_audio_codec_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioCodecSettings,
) {
    if let Some(var_404) = &input.aac_settings {
        let mut object_405 = object.key("aacSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aac_settings(&mut object_405, var_404);
        object_405.finish();
    }
    if let Some(var_406) = &input.ac3_settings {
        let mut object_407 = object.key("ac3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_ac3_settings(&mut object_407, var_406);
        object_407.finish();
    }
    if let Some(var_408) = &input.eac3_settings {
        let mut object_409 = object.key("eac3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_eac3_settings(&mut object_409, var_408);
        object_409.finish();
    }
    if let Some(var_410) = &input.mp2_settings {
        let mut object_411 = object.key("mp2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_mp2_settings(&mut object_411, var_410);
        object_411.finish();
    }
    if let Some(var_412) = &input.pass_through_settings {
        let mut object_413 = object.key("passThroughSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_pass_through_settings(
            &mut object_413,
            var_412,
        );
        object_413.finish();
    }
    if let Some(var_414) = &input.wav_settings {
        let mut object_415 = object.key("wavSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_wav_settings(&mut object_415, var_414);
        object_415.finish();
    }
}

pub fn serialize_structure_crate_model_remix_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemixSettings,
) {
    if let Some(var_416) = &input.channel_mappings {
        let mut array_417 = object.key("channelMappings").start_array();
        for item_418 in var_416 {
            {
                let mut object_419 = array_417.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_channel_mapping(
                    &mut object_419,
                    item_418,
                );
                object_419.finish();
            }
        }
        array_417.finish();
    }
    if input.channels_in != 0 {
        object.key("channelsIn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.channels_in).into()),
        );
    }
    if input.channels_out != 0 {
        object.key("channelsOut").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.channels_out).into()),
        );
    }
}

pub fn serialize_structure_crate_model_input_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputLocation,
) {
    if let Some(var_420) = &input.password_param {
        object.key("passwordParam").string(var_420);
    }
    if let Some(var_421) = &input.uri {
        object.key("uri").string(var_421);
    }
    if let Some(var_422) = &input.username {
        object.key("username").string(var_422);
    }
}

pub fn serialize_structure_crate_model_avail_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailSettings,
) {
    if let Some(var_423) = &input.scte35_splice_insert {
        let mut object_424 = object.key("scte35SpliceInsert").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_splice_insert(
            &mut object_424,
            var_423,
        );
        object_424.finish();
    }
    if let Some(var_425) = &input.scte35_time_signal_apos {
        let mut object_426 = object.key("scte35TimeSignalApos").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_time_signal_apos(
            &mut object_426,
            var_425,
        );
        object_426.finish();
    }
}

pub fn serialize_structure_crate_model_caption_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionDestinationSettings,
) {
    if let Some(var_427) = &input.arib_destination_settings {
        let mut object_428 = object.key("aribDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_arib_destination_settings(
            &mut object_428,
            var_427,
        );
        object_428.finish();
    }
    if let Some(var_429) = &input.burn_in_destination_settings {
        let mut object_430 = object.key("burnInDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_burn_in_destination_settings(
            &mut object_430,
            var_429,
        );
        object_430.finish();
    }
    if let Some(var_431) = &input.dvb_sub_destination_settings {
        let mut object_432 = object.key("dvbSubDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dvb_sub_destination_settings(
            &mut object_432,
            var_431,
        );
        object_432.finish();
    }
    if let Some(var_433) = &input.ebu_tt_d_destination_settings {
        let mut object_434 = object.key("ebuTtDDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_ebu_tt_d_destination_settings(
            &mut object_434,
            var_433,
        );
        object_434.finish();
    }
    if let Some(var_435) = &input.embedded_destination_settings {
        let mut object_436 = object.key("embeddedDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_embedded_destination_settings(
            &mut object_436,
            var_435,
        );
        object_436.finish();
    }
    if let Some(var_437) = &input.embedded_plus_scte20_destination_settings {
        let mut object_438 = object
            .key("embeddedPlusScte20DestinationSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_embedded_plus_scte20_destination_settings(
            &mut object_438,
            var_437,
        );
        object_438.finish();
    }
    if let Some(var_439) = &input.rtmp_caption_info_destination_settings {
        let mut object_440 = object
            .key("rtmpCaptionInfoDestinationSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_rtmp_caption_info_destination_settings(
            &mut object_440,
            var_439,
        );
        object_440.finish();
    }
    if let Some(var_441) = &input.scte20_plus_embedded_destination_settings {
        let mut object_442 = object
            .key("scte20PlusEmbeddedDestinationSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_scte20_plus_embedded_destination_settings(
            &mut object_442,
            var_441,
        );
        object_442.finish();
    }
    if let Some(var_443) = &input.scte27_destination_settings {
        let mut object_444 = object.key("scte27DestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte27_destination_settings(
            &mut object_444,
            var_443,
        );
        object_444.finish();
    }
    if let Some(var_445) = &input.smpte_tt_destination_settings {
        let mut object_446 = object.key("smpteTtDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_smpte_tt_destination_settings(
            &mut object_446,
            var_445,
        );
        object_446.finish();
    }
    if let Some(var_447) = &input.teletext_destination_settings {
        let mut object_448 = object.key("teletextDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_teletext_destination_settings(
            &mut object_448,
            var_447,
        );
        object_448.finish();
    }
    if let Some(var_449) = &input.ttml_destination_settings {
        let mut object_450 = object.key("ttmlDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_ttml_destination_settings(
            &mut object_450,
            var_449,
        );
        object_450.finish();
    }
    if let Some(var_451) = &input.webvtt_destination_settings {
        let mut object_452 = object.key("webvttDestinationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_webvtt_destination_settings(
            &mut object_452,
            var_451,
        );
        object_452.finish();
    }
}

pub fn serialize_structure_crate_model_input_loss_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputLossBehavior,
) {
    if input.black_frame_msec != 0 {
        object.key("blackFrameMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.black_frame_msec).into()),
        );
    }
    if let Some(var_453) = &input.input_loss_image_color {
        object.key("inputLossImageColor").string(var_453);
    }
    if let Some(var_454) = &input.input_loss_image_slate {
        let mut object_455 = object.key("inputLossImageSlate").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_455, var_454);
        object_455.finish();
    }
    if let Some(var_456) = &input.input_loss_image_type {
        object.key("inputLossImageType").string(var_456.as_str());
    }
    if input.repeat_frame_msec != 0 {
        object.key("repeatFrameMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.repeat_frame_msec).into()),
        );
    }
}

pub fn serialize_structure_crate_model_motion_graphics_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MotionGraphicsSettings,
) {
    if let Some(var_457) = &input.html_motion_graphics_settings {
        let mut object_458 = object.key("htmlMotionGraphicsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_html_motion_graphics_settings(
            &mut object_458,
            var_457,
        );
        object_458.finish();
    }
}

pub fn serialize_structure_crate_model_output_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputGroupSettings,
) {
    if let Some(var_459) = &input.archive_group_settings {
        let mut object_460 = object.key("archiveGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_archive_group_settings(
            &mut object_460,
            var_459,
        );
        object_460.finish();
    }
    if let Some(var_461) = &input.frame_capture_group_settings {
        let mut object_462 = object.key("frameCaptureGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_group_settings(
            &mut object_462,
            var_461,
        );
        object_462.finish();
    }
    if let Some(var_463) = &input.hls_group_settings {
        let mut object_464 = object.key("hlsGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_group_settings(
            &mut object_464,
            var_463,
        );
        object_464.finish();
    }
    if let Some(var_465) = &input.media_package_group_settings {
        let mut object_466 = object.key("mediaPackageGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_media_package_group_settings(
            &mut object_466,
            var_465,
        );
        object_466.finish();
    }
    if let Some(var_467) = &input.ms_smooth_group_settings {
        let mut object_468 = object.key("msSmoothGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_ms_smooth_group_settings(
            &mut object_468,
            var_467,
        );
        object_468.finish();
    }
    if let Some(var_469) = &input.multiplex_group_settings {
        let mut object_470 = object.key("multiplexGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_group_settings(
            &mut object_470,
            var_469,
        );
        object_470.finish();
    }
    if let Some(var_471) = &input.rtmp_group_settings {
        let mut object_472 = object.key("rtmpGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_rtmp_group_settings(
            &mut object_472,
            var_471,
        );
        object_472.finish();
    }
    if let Some(var_473) = &input.udp_group_settings {
        let mut object_474 = object.key("udpGroupSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_udp_group_settings(
            &mut object_474,
            var_473,
        );
        object_474.finish();
    }
}

pub fn serialize_structure_crate_model_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Output,
) {
    if let Some(var_475) = &input.audio_description_names {
        let mut array_476 = object.key("audioDescriptionNames").start_array();
        for item_477 in var_475 {
            {
                array_476.value().string(item_477);
            }
        }
        array_476.finish();
    }
    if let Some(var_478) = &input.caption_description_names {
        let mut array_479 = object.key("captionDescriptionNames").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480);
            }
        }
        array_479.finish();
    }
    if let Some(var_481) = &input.output_name {
        object.key("outputName").string(var_481);
    }
    if let Some(var_482) = &input.output_settings {
        let mut object_483 = object.key("outputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_output_settings(&mut object_483, var_482);
        object_483.finish();
    }
    if let Some(var_484) = &input.video_description_name {
        object.key("videoDescriptionName").string(var_484);
    }
}

pub fn serialize_structure_crate_model_video_codec_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoCodecSettings,
) {
    if let Some(var_485) = &input.frame_capture_settings {
        let mut object_486 = object.key("frameCaptureSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_settings(
            &mut object_486,
            var_485,
        );
        object_486.finish();
    }
    if let Some(var_487) = &input.h264_settings {
        let mut object_488 = object.key("h264Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_h264_settings(&mut object_488, var_487);
        object_488.finish();
    }
    if let Some(var_489) = &input.h265_settings {
        let mut object_490 = object.key("h265Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_h265_settings(&mut object_490, var_489);
        object_490.finish();
    }
    if let Some(var_491) = &input.mpeg2_settings {
        let mut object_492 = object.key("mpeg2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_mpeg2_settings(&mut object_492, var_491);
        object_492.finish();
    }
}

pub fn serialize_structure_crate_model_failover_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FailoverCondition,
) {
    if let Some(var_493) = &input.failover_condition_settings {
        let mut object_494 = object.key("failoverConditionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_failover_condition_settings(
            &mut object_494,
            var_493,
        );
        object_494.finish();
    }
}

pub fn serialize_structure_crate_model_audio_selector(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioSelector,
) {
    if let Some(var_495) = &input.name {
        object.key("name").string(var_495);
    }
    if let Some(var_496) = &input.selector_settings {
        let mut object_497 = object.key("selectorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_selector_settings(
            &mut object_497,
            var_496,
        );
        object_497.finish();
    }
}

pub fn serialize_structure_crate_model_caption_selector(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionSelector,
) {
    if let Some(var_498) = &input.language_code {
        object.key("languageCode").string(var_498);
    }
    if let Some(var_499) = &input.name {
        object.key("name").string(var_499);
    }
    if let Some(var_500) = &input.selector_settings {
        let mut object_501 = object.key("selectorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_caption_selector_settings(
            &mut object_501,
            var_500,
        );
        object_501.finish();
    }
}

pub fn serialize_structure_crate_model_network_input_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkInputSettings,
) {
    if let Some(var_502) = &input.hls_input_settings {
        let mut object_503 = object.key("hlsInputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_input_settings(
            &mut object_503,
            var_502,
        );
        object_503.finish();
    }
    if let Some(var_504) = &input.server_validation {
        object.key("serverValidation").string(var_504.as_str());
    }
}

pub fn serialize_structure_crate_model_video_selector(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoSelector,
) {
    if let Some(var_505) = &input.color_space {
        object.key("colorSpace").string(var_505.as_str());
    }
    if let Some(var_506) = &input.color_space_settings {
        let mut object_507 = object.key("colorSpaceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_video_selector_color_space_settings(
            &mut object_507,
            var_506,
        );
        object_507.finish();
    }
    if let Some(var_508) = &input.color_space_usage {
        object.key("colorSpaceUsage").string(var_508.as_str());
    }
    if let Some(var_509) = &input.selector_settings {
        let mut object_510 = object.key("selectorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_video_selector_settings(
            &mut object_510,
            var_509,
        );
        object_510.finish();
    }
}

pub fn serialize_structure_crate_model_multiplex_statmux_video_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexStatmuxVideoSettings,
) {
    if input.maximum_bitrate != 0 {
        object.key("maximumBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_bitrate).into()),
        );
    }
    if input.minimum_bitrate != 0 {
        object.key("minimumBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minimum_bitrate).into()),
        );
    }
    if input.priority != 0 {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
}

pub fn serialize_structure_crate_model_hls_id3_segment_tagging_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsId3SegmentTaggingScheduleActionSettings,
) {
    if let Some(var_511) = &input.tag {
        object.key("tag").string(var_511);
    }
}

pub fn serialize_structure_crate_model_hls_timed_metadata_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsTimedMetadataScheduleActionSettings,
) {
    if let Some(var_512) = &input.id3 {
        object.key("id3").string(var_512);
    }
}

pub fn serialize_structure_crate_model_input_prepare_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputPrepareScheduleActionSettings,
) {
    if let Some(var_513) = &input.input_attachment_name_reference {
        object.key("inputAttachmentNameReference").string(var_513);
    }
    if let Some(var_514) = &input.input_clipping_settings {
        let mut object_515 = object.key("inputClippingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_clipping_settings(
            &mut object_515,
            var_514,
        );
        object_515.finish();
    }
    if let Some(var_516) = &input.url_path {
        let mut array_517 = object.key("urlPath").start_array();
        for item_518 in var_516 {
            {
                array_517.value().string(item_518);
            }
        }
        array_517.finish();
    }
}

pub fn serialize_structure_crate_model_input_switch_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputSwitchScheduleActionSettings,
) {
    if let Some(var_519) = &input.input_attachment_name_reference {
        object.key("inputAttachmentNameReference").string(var_519);
    }
    if let Some(var_520) = &input.input_clipping_settings {
        let mut object_521 = object.key("inputClippingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_clipping_settings(
            &mut object_521,
            var_520,
        );
        object_521.finish();
    }
    if let Some(var_522) = &input.url_path {
        let mut array_523 = object.key("urlPath").start_array();
        for item_524 in var_522 {
            {
                array_523.value().string(item_524);
            }
        }
        array_523.finish();
    }
}

pub fn serialize_structure_crate_model_motion_graphics_activate_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MotionGraphicsActivateScheduleActionSettings,
) {
    if input.duration != 0 {
        object.key("duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    if let Some(var_525) = &input.password_param {
        object.key("passwordParam").string(var_525);
    }
    if let Some(var_526) = &input.url {
        object.key("url").string(var_526);
    }
    if let Some(var_527) = &input.username {
        object.key("username").string(var_527);
    }
}

pub fn serialize_structure_crate_model_motion_graphics_deactivate_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MotionGraphicsDeactivateScheduleActionSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_pause_state_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PauseStateScheduleActionSettings,
) {
    if let Some(var_528) = &input.pipelines {
        let mut array_529 = object.key("pipelines").start_array();
        for item_530 in var_528 {
            {
                let mut object_531 = array_529.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pipeline_pause_state_settings(
                    &mut object_531,
                    item_530,
                );
                object_531.finish();
            }
        }
        array_529.finish();
    }
}

pub fn serialize_structure_crate_model_scte35_return_to_network_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35ReturnToNetworkScheduleActionSettings,
) {
    {
        object.key("spliceEventId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.splice_event_id).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte35_splice_insert_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35SpliceInsertScheduleActionSettings,
) {
    if input.duration != 0 {
        object.key("duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    {
        object.key("spliceEventId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.splice_event_id).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte35_time_signal_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35TimeSignalScheduleActionSettings,
) {
    if let Some(var_532) = &input.scte35_descriptors {
        let mut array_533 = object.key("scte35Descriptors").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_structure_crate_model_scte35_descriptor(
                    &mut object_535,
                    item_534,
                );
                object_535.finish();
            }
        }
        array_533.finish();
    }
}

pub fn serialize_structure_crate_model_static_image_activate_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StaticImageActivateScheduleActionSettings,
) {
    if input.duration != 0 {
        object.key("duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    if input.fade_in != 0 {
        object.key("fadeIn").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.fade_in).into()),
        );
    }
    if input.fade_out != 0 {
        object.key("fadeOut").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.fade_out).into()),
        );
    }
    if input.height != 0 {
        object.key("height").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.height).into()),
        );
    }
    if let Some(var_536) = &input.image {
        let mut object_537 = object.key("image").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_537, var_536);
        object_537.finish();
    }
    if input.image_x != 0 {
        object.key("imageX").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.image_x).into()),
        );
    }
    if input.image_y != 0 {
        object.key("imageY").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.image_y).into()),
        );
    }
    if input.layer != 0 {
        object.key("layer").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.layer).into()),
        );
    }
    if input.opacity != 0 {
        object.key("opacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.opacity).into()),
        );
    }
    if input.width != 0 {
        object.key("width").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.width).into()),
        );
    }
}

pub fn serialize_structure_crate_model_static_image_deactivate_schedule_action_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StaticImageDeactivateScheduleActionSettings,
) {
    if input.fade_out != 0 {
        object.key("fadeOut").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.fade_out).into()),
        );
    }
    if input.layer != 0 {
        object.key("layer").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.layer).into()),
        );
    }
}

pub fn serialize_structure_crate_model_fixed_mode_schedule_action_start_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FixedModeScheduleActionStartSettings,
) {
    if let Some(var_538) = &input.time {
        object.key("time").string(var_538);
    }
}

pub fn serialize_structure_crate_model_follow_mode_schedule_action_start_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FollowModeScheduleActionStartSettings,
) {
    if let Some(var_539) = &input.follow_point {
        object.key("followPoint").string(var_539.as_str());
    }
    if let Some(var_540) = &input.reference_action_name {
        object.key("referenceActionName").string(var_540);
    }
}

pub fn serialize_structure_crate_model_immediate_mode_schedule_action_start_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImmediateModeScheduleActionStartSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_aac_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AacSettings,
) {
    if input.bitrate != 0.0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.bitrate).into()),
        );
    }
    if let Some(var_541) = &input.coding_mode {
        object.key("codingMode").string(var_541.as_str());
    }
    if let Some(var_542) = &input.input_type {
        object.key("inputType").string(var_542.as_str());
    }
    if let Some(var_543) = &input.profile {
        object.key("profile").string(var_543.as_str());
    }
    if let Some(var_544) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_544.as_str());
    }
    if let Some(var_545) = &input.raw_format {
        object.key("rawFormat").string(var_545.as_str());
    }
    if input.sample_rate != 0.0 {
        object.key("sampleRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.sample_rate).into()),
        );
    }
    if let Some(var_546) = &input.spec {
        object.key("spec").string(var_546.as_str());
    }
    if let Some(var_547) = &input.vbr_quality {
        object.key("vbrQuality").string(var_547.as_str());
    }
}

pub fn serialize_structure_crate_model_ac3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ac3Settings,
) {
    if input.bitrate != 0.0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.bitrate).into()),
        );
    }
    if let Some(var_548) = &input.bitstream_mode {
        object.key("bitstreamMode").string(var_548.as_str());
    }
    if let Some(var_549) = &input.coding_mode {
        object.key("codingMode").string(var_549.as_str());
    }
    if input.dialnorm != 0 {
        object.key("dialnorm").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dialnorm).into()),
        );
    }
    if let Some(var_550) = &input.drc_profile {
        object.key("drcProfile").string(var_550.as_str());
    }
    if let Some(var_551) = &input.lfe_filter {
        object.key("lfeFilter").string(var_551.as_str());
    }
    if let Some(var_552) = &input.metadata_control {
        object.key("metadataControl").string(var_552.as_str());
    }
}

pub fn serialize_structure_crate_model_eac3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Eac3Settings,
) {
    if let Some(var_553) = &input.attenuation_control {
        object.key("attenuationControl").string(var_553.as_str());
    }
    if input.bitrate != 0.0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.bitrate).into()),
        );
    }
    if let Some(var_554) = &input.bitstream_mode {
        object.key("bitstreamMode").string(var_554.as_str());
    }
    if let Some(var_555) = &input.coding_mode {
        object.key("codingMode").string(var_555.as_str());
    }
    if let Some(var_556) = &input.dc_filter {
        object.key("dcFilter").string(var_556.as_str());
    }
    if input.dialnorm != 0 {
        object.key("dialnorm").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dialnorm).into()),
        );
    }
    if let Some(var_557) = &input.drc_line {
        object.key("drcLine").string(var_557.as_str());
    }
    if let Some(var_558) = &input.drc_rf {
        object.key("drcRf").string(var_558.as_str());
    }
    if let Some(var_559) = &input.lfe_control {
        object.key("lfeControl").string(var_559.as_str());
    }
    if let Some(var_560) = &input.lfe_filter {
        object.key("lfeFilter").string(var_560.as_str());
    }
    if input.lo_ro_center_mix_level != 0.0 {
        object.key("loRoCenterMixLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lo_ro_center_mix_level).into()),
        );
    }
    if input.lo_ro_surround_mix_level != 0.0 {
        object.key("loRoSurroundMixLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lo_ro_surround_mix_level).into()),
        );
    }
    if input.lt_rt_center_mix_level != 0.0 {
        object.key("ltRtCenterMixLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lt_rt_center_mix_level).into()),
        );
    }
    if input.lt_rt_surround_mix_level != 0.0 {
        object.key("ltRtSurroundMixLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.lt_rt_surround_mix_level).into()),
        );
    }
    if let Some(var_561) = &input.metadata_control {
        object.key("metadataControl").string(var_561.as_str());
    }
    if let Some(var_562) = &input.passthrough_control {
        object.key("passthroughControl").string(var_562.as_str());
    }
    if let Some(var_563) = &input.phase_control {
        object.key("phaseControl").string(var_563.as_str());
    }
    if let Some(var_564) = &input.stereo_downmix {
        object.key("stereoDownmix").string(var_564.as_str());
    }
    if let Some(var_565) = &input.surround_ex_mode {
        object.key("surroundExMode").string(var_565.as_str());
    }
    if let Some(var_566) = &input.surround_mode {
        object.key("surroundMode").string(var_566.as_str());
    }
}

pub fn serialize_structure_crate_model_mp2_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Mp2Settings,
) {
    if input.bitrate != 0.0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.bitrate).into()),
        );
    }
    if let Some(var_567) = &input.coding_mode {
        object.key("codingMode").string(var_567.as_str());
    }
    if input.sample_rate != 0.0 {
        object.key("sampleRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.sample_rate).into()),
        );
    }
}

pub fn serialize_structure_crate_model_pass_through_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PassThroughSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_wav_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WavSettings,
) {
    if input.bit_depth != 0.0 {
        object.key("bitDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.bit_depth).into()),
        );
    }
    if let Some(var_568) = &input.coding_mode {
        object.key("codingMode").string(var_568.as_str());
    }
    if input.sample_rate != 0.0 {
        object.key("sampleRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.sample_rate).into()),
        );
    }
}

pub fn serialize_structure_crate_model_audio_channel_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioChannelMapping,
) {
    if let Some(var_569) = &input.input_channel_levels {
        let mut array_570 = object.key("inputChannelLevels").start_array();
        for item_571 in var_569 {
            {
                let mut object_572 = array_570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_channel_level(
                    &mut object_572,
                    item_571,
                );
                object_572.finish();
            }
        }
        array_570.finish();
    }
    {
        object.key("outputChannel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.output_channel).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte35_splice_insert(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35SpliceInsert,
) {
    if input.ad_avail_offset != 0 {
        object.key("adAvailOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ad_avail_offset).into()),
        );
    }
    if let Some(var_573) = &input.no_regional_blackout_flag {
        object
            .key("noRegionalBlackoutFlag")
            .string(var_573.as_str());
    }
    if let Some(var_574) = &input.web_delivery_allowed_flag {
        object
            .key("webDeliveryAllowedFlag")
            .string(var_574.as_str());
    }
}

pub fn serialize_structure_crate_model_scte35_time_signal_apos(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35TimeSignalApos,
) {
    if input.ad_avail_offset != 0 {
        object.key("adAvailOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ad_avail_offset).into()),
        );
    }
    if let Some(var_575) = &input.no_regional_blackout_flag {
        object
            .key("noRegionalBlackoutFlag")
            .string(var_575.as_str());
    }
    if let Some(var_576) = &input.web_delivery_allowed_flag {
        object
            .key("webDeliveryAllowedFlag")
            .string(var_576.as_str());
    }
}

pub fn serialize_structure_crate_model_arib_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AribDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_burn_in_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BurnInDestinationSettings,
) {
    if let Some(var_577) = &input.alignment {
        object.key("alignment").string(var_577.as_str());
    }
    if let Some(var_578) = &input.background_color {
        object.key("backgroundColor").string(var_578.as_str());
    }
    if input.background_opacity != 0 {
        object.key("backgroundOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.background_opacity).into()),
        );
    }
    if let Some(var_579) = &input.font {
        let mut object_580 = object.key("font").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_580, var_579);
        object_580.finish();
    }
    if let Some(var_581) = &input.font_color {
        object.key("fontColor").string(var_581.as_str());
    }
    if input.font_opacity != 0 {
        object.key("fontOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.font_opacity).into()),
        );
    }
    if input.font_resolution != 0 {
        object.key("fontResolution").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.font_resolution).into()),
        );
    }
    if let Some(var_582) = &input.font_size {
        object.key("fontSize").string(var_582);
    }
    if let Some(var_583) = &input.outline_color {
        object.key("outlineColor").string(var_583.as_str());
    }
    if input.outline_size != 0 {
        object.key("outlineSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.outline_size).into()),
        );
    }
    if let Some(var_584) = &input.shadow_color {
        object.key("shadowColor").string(var_584.as_str());
    }
    if input.shadow_opacity != 0 {
        object.key("shadowOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_opacity).into()),
        );
    }
    if input.shadow_x_offset != 0 {
        object.key("shadowXOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_x_offset).into()),
        );
    }
    if input.shadow_y_offset != 0 {
        object.key("shadowYOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_y_offset).into()),
        );
    }
    if let Some(var_585) = &input.teletext_grid_control {
        object.key("teletextGridControl").string(var_585.as_str());
    }
    if input.x_position != 0 {
        object.key("xPosition").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.x_position).into()),
        );
    }
    if input.y_position != 0 {
        object.key("yPosition").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.y_position).into()),
        );
    }
}

pub fn serialize_structure_crate_model_dvb_sub_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DvbSubDestinationSettings,
) {
    if let Some(var_586) = &input.alignment {
        object.key("alignment").string(var_586.as_str());
    }
    if let Some(var_587) = &input.background_color {
        object.key("backgroundColor").string(var_587.as_str());
    }
    if input.background_opacity != 0 {
        object.key("backgroundOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.background_opacity).into()),
        );
    }
    if let Some(var_588) = &input.font {
        let mut object_589 = object.key("font").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_589, var_588);
        object_589.finish();
    }
    if let Some(var_590) = &input.font_color {
        object.key("fontColor").string(var_590.as_str());
    }
    if input.font_opacity != 0 {
        object.key("fontOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.font_opacity).into()),
        );
    }
    if input.font_resolution != 0 {
        object.key("fontResolution").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.font_resolution).into()),
        );
    }
    if let Some(var_591) = &input.font_size {
        object.key("fontSize").string(var_591);
    }
    if let Some(var_592) = &input.outline_color {
        object.key("outlineColor").string(var_592.as_str());
    }
    if input.outline_size != 0 {
        object.key("outlineSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.outline_size).into()),
        );
    }
    if let Some(var_593) = &input.shadow_color {
        object.key("shadowColor").string(var_593.as_str());
    }
    if input.shadow_opacity != 0 {
        object.key("shadowOpacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_opacity).into()),
        );
    }
    if input.shadow_x_offset != 0 {
        object.key("shadowXOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_x_offset).into()),
        );
    }
    if input.shadow_y_offset != 0 {
        object.key("shadowYOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shadow_y_offset).into()),
        );
    }
    if let Some(var_594) = &input.teletext_grid_control {
        object.key("teletextGridControl").string(var_594.as_str());
    }
    if input.x_position != 0 {
        object.key("xPosition").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.x_position).into()),
        );
    }
    if input.y_position != 0 {
        object.key("yPosition").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.y_position).into()),
        );
    }
}

pub fn serialize_structure_crate_model_ebu_tt_d_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbuTtDDestinationSettings,
) {
    if let Some(var_595) = &input.copyright_holder {
        object.key("copyrightHolder").string(var_595);
    }
    if let Some(var_596) = &input.fill_line_gap {
        object.key("fillLineGap").string(var_596.as_str());
    }
    if let Some(var_597) = &input.font_family {
        object.key("fontFamily").string(var_597);
    }
    if let Some(var_598) = &input.style_control {
        object.key("styleControl").string(var_598.as_str());
    }
}

pub fn serialize_structure_crate_model_embedded_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmbeddedDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_embedded_plus_scte20_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmbeddedPlusScte20DestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_rtmp_caption_info_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RtmpCaptionInfoDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_scte20_plus_embedded_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte20PlusEmbeddedDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_scte27_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte27DestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_smpte_tt_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmpteTtDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_teletext_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeletextDestinationSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_ttml_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TtmlDestinationSettings,
) {
    if let Some(var_599) = &input.style_control {
        object.key("styleControl").string(var_599.as_str());
    }
}

pub fn serialize_structure_crate_model_webvtt_destination_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebvttDestinationSettings,
) {
    if let Some(var_600) = &input.style_control {
        object.key("styleControl").string(var_600.as_str());
    }
}

pub fn serialize_structure_crate_model_html_motion_graphics_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HtmlMotionGraphicsSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_archive_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArchiveGroupSettings,
) {
    if let Some(var_601) = &input.archive_cdn_settings {
        let mut object_602 = object.key("archiveCdnSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_archive_cdn_settings(
            &mut object_602,
            var_601,
        );
        object_602.finish();
    }
    if let Some(var_603) = &input.destination {
        let mut object_604 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_604,
            var_603,
        );
        object_604.finish();
    }
    if input.rollover_interval != 0 {
        object.key("rolloverInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rollover_interval).into()),
        );
    }
}

pub fn serialize_structure_crate_model_frame_capture_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureGroupSettings,
) {
    if let Some(var_605) = &input.destination {
        let mut object_606 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_606,
            var_605,
        );
        object_606.finish();
    }
    if let Some(var_607) = &input.frame_capture_cdn_settings {
        let mut object_608 = object.key("frameCaptureCdnSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_cdn_settings(
            &mut object_608,
            var_607,
        );
        object_608.finish();
    }
}

pub fn serialize_structure_crate_model_hls_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsGroupSettings,
) {
    if let Some(var_609) = &input.ad_markers {
        let mut array_610 = object.key("adMarkers").start_array();
        for item_611 in var_609 {
            {
                array_610.value().string(item_611.as_str());
            }
        }
        array_610.finish();
    }
    if let Some(var_612) = &input.base_url_content {
        object.key("baseUrlContent").string(var_612);
    }
    if let Some(var_613) = &input.base_url_content1 {
        object.key("baseUrlContent1").string(var_613);
    }
    if let Some(var_614) = &input.base_url_manifest {
        object.key("baseUrlManifest").string(var_614);
    }
    if let Some(var_615) = &input.base_url_manifest1 {
        object.key("baseUrlManifest1").string(var_615);
    }
    if let Some(var_616) = &input.caption_language_mappings {
        let mut array_617 = object.key("captionLanguageMappings").start_array();
        for item_618 in var_616 {
            {
                let mut object_619 = array_617.value().start_object();
                crate::json_ser::serialize_structure_crate_model_caption_language_mapping(
                    &mut object_619,
                    item_618,
                );
                object_619.finish();
            }
        }
        array_617.finish();
    }
    if let Some(var_620) = &input.caption_language_setting {
        object
            .key("captionLanguageSetting")
            .string(var_620.as_str());
    }
    if let Some(var_621) = &input.client_cache {
        object.key("clientCache").string(var_621.as_str());
    }
    if let Some(var_622) = &input.codec_specification {
        object.key("codecSpecification").string(var_622.as_str());
    }
    if let Some(var_623) = &input.constant_iv {
        object.key("constantIv").string(var_623);
    }
    if let Some(var_624) = &input.destination {
        let mut object_625 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_625,
            var_624,
        );
        object_625.finish();
    }
    if let Some(var_626) = &input.directory_structure {
        object.key("directoryStructure").string(var_626.as_str());
    }
    if let Some(var_627) = &input.discontinuity_tags {
        object.key("discontinuityTags").string(var_627.as_str());
    }
    if let Some(var_628) = &input.encryption_type {
        object.key("encryptionType").string(var_628.as_str());
    }
    if let Some(var_629) = &input.hls_cdn_settings {
        let mut object_630 = object.key("hlsCdnSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_cdn_settings(&mut object_630, var_629);
        object_630.finish();
    }
    if let Some(var_631) = &input.hls_id3_segment_tagging {
        object.key("hlsId3SegmentTagging").string(var_631.as_str());
    }
    if let Some(var_632) = &input.i_frame_only_playlists {
        object.key("iFrameOnlyPlaylists").string(var_632.as_str());
    }
    if let Some(var_633) = &input.incomplete_segment_behavior {
        object
            .key("incompleteSegmentBehavior")
            .string(var_633.as_str());
    }
    if input.index_n_segments != 0 {
        object.key("indexNSegments").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.index_n_segments).into()),
        );
    }
    if let Some(var_634) = &input.input_loss_action {
        object.key("inputLossAction").string(var_634.as_str());
    }
    if let Some(var_635) = &input.iv_in_manifest {
        object.key("ivInManifest").string(var_635.as_str());
    }
    if let Some(var_636) = &input.iv_source {
        object.key("ivSource").string(var_636.as_str());
    }
    if input.keep_segments != 0 {
        object.key("keepSegments").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.keep_segments).into()),
        );
    }
    if let Some(var_637) = &input.key_format {
        object.key("keyFormat").string(var_637);
    }
    if let Some(var_638) = &input.key_format_versions {
        object.key("keyFormatVersions").string(var_638);
    }
    if let Some(var_639) = &input.key_provider_settings {
        let mut object_640 = object.key("keyProviderSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_key_provider_settings(
            &mut object_640,
            var_639,
        );
        object_640.finish();
    }
    if let Some(var_641) = &input.manifest_compression {
        object.key("manifestCompression").string(var_641.as_str());
    }
    if let Some(var_642) = &input.manifest_duration_format {
        object
            .key("manifestDurationFormat")
            .string(var_642.as_str());
    }
    if input.min_segment_length != 0 {
        object.key("minSegmentLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_segment_length).into()),
        );
    }
    if let Some(var_643) = &input.mode {
        object.key("mode").string(var_643.as_str());
    }
    if let Some(var_644) = &input.output_selection {
        object.key("outputSelection").string(var_644.as_str());
    }
    if let Some(var_645) = &input.program_date_time {
        object.key("programDateTime").string(var_645.as_str());
    }
    if input.program_date_time_period != 0 {
        object.key("programDateTimePeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.program_date_time_period).into()),
        );
    }
    if let Some(var_646) = &input.redundant_manifest {
        object.key("redundantManifest").string(var_646.as_str());
    }
    if input.segment_length != 0 {
        object.key("segmentLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segment_length).into()),
        );
    }
    if let Some(var_647) = &input.segmentation_mode {
        object.key("segmentationMode").string(var_647.as_str());
    }
    if input.segments_per_subdirectory != 0 {
        object.key("segmentsPerSubdirectory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segments_per_subdirectory).into()),
        );
    }
    if let Some(var_648) = &input.stream_inf_resolution {
        object.key("streamInfResolution").string(var_648.as_str());
    }
    if let Some(var_649) = &input.timed_metadata_id3_frame {
        object.key("timedMetadataId3Frame").string(var_649.as_str());
    }
    if input.timed_metadata_id3_period != 0 {
        object.key("timedMetadataId3Period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timed_metadata_id3_period).into()),
        );
    }
    if input.timestamp_delta_milliseconds != 0 {
        object.key("timestampDeltaMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timestamp_delta_milliseconds).into()),
        );
    }
    if let Some(var_650) = &input.ts_file_mode {
        object.key("tsFileMode").string(var_650.as_str());
    }
}

pub fn serialize_structure_crate_model_media_package_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaPackageGroupSettings,
) {
    if let Some(var_651) = &input.destination {
        let mut object_652 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_652,
            var_651,
        );
        object_652.finish();
    }
}

pub fn serialize_structure_crate_model_ms_smooth_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MsSmoothGroupSettings,
) {
    if let Some(var_653) = &input.acquisition_point_id {
        object.key("acquisitionPointId").string(var_653);
    }
    if let Some(var_654) = &input.audio_only_timecode_control {
        object
            .key("audioOnlyTimecodeControl")
            .string(var_654.as_str());
    }
    if let Some(var_655) = &input.certificate_mode {
        object.key("certificateMode").string(var_655.as_str());
    }
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if let Some(var_656) = &input.destination {
        let mut object_657 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_657,
            var_656,
        );
        object_657.finish();
    }
    if let Some(var_658) = &input.event_id {
        object.key("eventId").string(var_658);
    }
    if let Some(var_659) = &input.event_id_mode {
        object.key("eventIdMode").string(var_659.as_str());
    }
    if let Some(var_660) = &input.event_stop_behavior {
        object.key("eventStopBehavior").string(var_660.as_str());
    }
    if input.filecache_duration != 0 {
        object.key("filecacheDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filecache_duration).into()),
        );
    }
    if input.fragment_length != 0 {
        object.key("fragmentLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.fragment_length).into()),
        );
    }
    if let Some(var_661) = &input.input_loss_action {
        object.key("inputLossAction").string(var_661.as_str());
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
    if let Some(var_662) = &input.segmentation_mode {
        object.key("segmentationMode").string(var_662.as_str());
    }
    if input.send_delay_ms != 0 {
        object.key("sendDelayMs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.send_delay_ms).into()),
        );
    }
    if let Some(var_663) = &input.sparse_track_type {
        object.key("sparseTrackType").string(var_663.as_str());
    }
    if let Some(var_664) = &input.stream_manifest_behavior {
        object
            .key("streamManifestBehavior")
            .string(var_664.as_str());
    }
    if let Some(var_665) = &input.timestamp_offset {
        object.key("timestampOffset").string(var_665);
    }
    if let Some(var_666) = &input.timestamp_offset_mode {
        object.key("timestampOffsetMode").string(var_666.as_str());
    }
}

pub fn serialize_structure_crate_model_multiplex_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexGroupSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_rtmp_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RtmpGroupSettings,
) {
    if let Some(var_667) = &input.ad_markers {
        let mut array_668 = object.key("adMarkers").start_array();
        for item_669 in var_667 {
            {
                array_668.value().string(item_669.as_str());
            }
        }
        array_668.finish();
    }
    if let Some(var_670) = &input.authentication_scheme {
        object.key("authenticationScheme").string(var_670.as_str());
    }
    if let Some(var_671) = &input.cache_full_behavior {
        object.key("cacheFullBehavior").string(var_671.as_str());
    }
    if input.cache_length != 0 {
        object.key("cacheLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cache_length).into()),
        );
    }
    if let Some(var_672) = &input.caption_data {
        object.key("captionData").string(var_672.as_str());
    }
    if let Some(var_673) = &input.input_loss_action {
        object.key("inputLossAction").string(var_673.as_str());
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
}

pub fn serialize_structure_crate_model_udp_group_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UdpGroupSettings,
) {
    if let Some(var_674) = &input.input_loss_action {
        object.key("inputLossAction").string(var_674.as_str());
    }
    if let Some(var_675) = &input.timed_metadata_id3_frame {
        object.key("timedMetadataId3Frame").string(var_675.as_str());
    }
    if input.timed_metadata_id3_period != 0 {
        object.key("timedMetadataId3Period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.timed_metadata_id3_period).into()),
        );
    }
}

pub fn serialize_structure_crate_model_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputSettings,
) {
    if let Some(var_676) = &input.archive_output_settings {
        let mut object_677 = object.key("archiveOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_archive_output_settings(
            &mut object_677,
            var_676,
        );
        object_677.finish();
    }
    if let Some(var_678) = &input.frame_capture_output_settings {
        let mut object_679 = object.key("frameCaptureOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_output_settings(
            &mut object_679,
            var_678,
        );
        object_679.finish();
    }
    if let Some(var_680) = &input.hls_output_settings {
        let mut object_681 = object.key("hlsOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_output_settings(
            &mut object_681,
            var_680,
        );
        object_681.finish();
    }
    if let Some(var_682) = &input.media_package_output_settings {
        let mut object_683 = object.key("mediaPackageOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_media_package_output_settings(
            &mut object_683,
            var_682,
        );
        object_683.finish();
    }
    if let Some(var_684) = &input.ms_smooth_output_settings {
        let mut object_685 = object.key("msSmoothOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_ms_smooth_output_settings(
            &mut object_685,
            var_684,
        );
        object_685.finish();
    }
    if let Some(var_686) = &input.multiplex_output_settings {
        let mut object_687 = object.key("multiplexOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_multiplex_output_settings(
            &mut object_687,
            var_686,
        );
        object_687.finish();
    }
    if let Some(var_688) = &input.rtmp_output_settings {
        let mut object_689 = object.key("rtmpOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_rtmp_output_settings(
            &mut object_689,
            var_688,
        );
        object_689.finish();
    }
    if let Some(var_690) = &input.udp_output_settings {
        let mut object_691 = object.key("udpOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_udp_output_settings(
            &mut object_691,
            var_690,
        );
        object_691.finish();
    }
}

pub fn serialize_structure_crate_model_frame_capture_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureSettings,
) {
    if input.capture_interval != 0 {
        object.key("captureInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.capture_interval).into()),
        );
    }
    if let Some(var_692) = &input.capture_interval_units {
        object.key("captureIntervalUnits").string(var_692.as_str());
    }
}

pub fn serialize_structure_crate_model_h264_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H264Settings,
) {
    if let Some(var_693) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_693.as_str());
    }
    if let Some(var_694) = &input.afd_signaling {
        object.key("afdSignaling").string(var_694.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if input.buf_fill_pct != 0 {
        object.key("bufFillPct").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.buf_fill_pct).into()),
        );
    }
    if input.buf_size != 0 {
        object.key("bufSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.buf_size).into()),
        );
    }
    if let Some(var_695) = &input.color_metadata {
        object.key("colorMetadata").string(var_695.as_str());
    }
    if let Some(var_696) = &input.color_space_settings {
        let mut object_697 = object.key("colorSpaceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_h264_color_space_settings(
            &mut object_697,
            var_696,
        );
        object_697.finish();
    }
    if let Some(var_698) = &input.entropy_encoding {
        object.key("entropyEncoding").string(var_698.as_str());
    }
    if let Some(var_699) = &input.filter_settings {
        let mut object_700 = object.key("filterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_h264_filter_settings(
            &mut object_700,
            var_699,
        );
        object_700.finish();
    }
    if let Some(var_701) = &input.fixed_afd {
        object.key("fixedAfd").string(var_701.as_str());
    }
    if let Some(var_702) = &input.flicker_aq {
        object.key("flickerAq").string(var_702.as_str());
    }
    if let Some(var_703) = &input.force_field_pictures {
        object.key("forceFieldPictures").string(var_703.as_str());
    }
    if let Some(var_704) = &input.framerate_control {
        object.key("framerateControl").string(var_704.as_str());
    }
    if input.framerate_denominator != 0 {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    if input.framerate_numerator != 0 {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if let Some(var_705) = &input.gop_b_reference {
        object.key("gopBReference").string(var_705.as_str());
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_num_b_frames != 0 {
        object.key("gopNumBFrames").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gop_num_b_frames).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_706) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_706.as_str());
    }
    if let Some(var_707) = &input.level {
        object.key("level").string(var_707.as_str());
    }
    if let Some(var_708) = &input.look_ahead_rate_control {
        object.key("lookAheadRateControl").string(var_708.as_str());
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.min_i_interval != 0 {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_i_interval).into()),
        );
    }
    if input.num_ref_frames != 0 {
        object.key("numRefFrames").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_ref_frames).into()),
        );
    }
    if let Some(var_709) = &input.par_control {
        object.key("parControl").string(var_709.as_str());
    }
    if input.par_denominator != 0 {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.par_denominator).into()),
        );
    }
    if input.par_numerator != 0 {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.par_numerator).into()),
        );
    }
    if let Some(var_710) = &input.profile {
        object.key("profile").string(var_710.as_str());
    }
    if let Some(var_711) = &input.quality_level {
        object.key("qualityLevel").string(var_711.as_str());
    }
    if input.qvbr_quality_level != 0 {
        object.key("qvbrQualityLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.qvbr_quality_level).into()),
        );
    }
    if let Some(var_712) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_712.as_str());
    }
    if let Some(var_713) = &input.scan_type {
        object.key("scanType").string(var_713.as_str());
    }
    if let Some(var_714) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_714.as_str());
    }
    if input.slices != 0 {
        object.key("slices").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.slices).into()),
        );
    }
    if input.softness != 0 {
        object.key("softness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.softness).into()),
        );
    }
    if let Some(var_715) = &input.spatial_aq {
        object.key("spatialAq").string(var_715.as_str());
    }
    if let Some(var_716) = &input.subgop_length {
        object.key("subgopLength").string(var_716.as_str());
    }
    if let Some(var_717) = &input.syntax {
        object.key("syntax").string(var_717.as_str());
    }
    if let Some(var_718) = &input.temporal_aq {
        object.key("temporalAq").string(var_718.as_str());
    }
    if let Some(var_719) = &input.timecode_insertion {
        object.key("timecodeInsertion").string(var_719.as_str());
    }
}

pub fn serialize_structure_crate_model_h265_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H265Settings,
) {
    if let Some(var_720) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_720.as_str());
    }
    if let Some(var_721) = &input.afd_signaling {
        object.key("afdSignaling").string(var_721.as_str());
    }
    if let Some(var_722) = &input.alternative_transfer_function {
        object
            .key("alternativeTransferFunction")
            .string(var_722.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if input.buf_size != 0 {
        object.key("bufSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.buf_size).into()),
        );
    }
    if let Some(var_723) = &input.color_metadata {
        object.key("colorMetadata").string(var_723.as_str());
    }
    if let Some(var_724) = &input.color_space_settings {
        let mut object_725 = object.key("colorSpaceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_h265_color_space_settings(
            &mut object_725,
            var_724,
        );
        object_725.finish();
    }
    if let Some(var_726) = &input.filter_settings {
        let mut object_727 = object.key("filterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_h265_filter_settings(
            &mut object_727,
            var_726,
        );
        object_727.finish();
    }
    if let Some(var_728) = &input.fixed_afd {
        object.key("fixedAfd").string(var_728.as_str());
    }
    if let Some(var_729) = &input.flicker_aq {
        object.key("flickerAq").string(var_729.as_str());
    }
    {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_730) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_730.as_str());
    }
    if let Some(var_731) = &input.level {
        object.key("level").string(var_731.as_str());
    }
    if let Some(var_732) = &input.look_ahead_rate_control {
        object.key("lookAheadRateControl").string(var_732.as_str());
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.min_i_interval != 0 {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_i_interval).into()),
        );
    }
    if input.par_denominator != 0 {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.par_denominator).into()),
        );
    }
    if input.par_numerator != 0 {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.par_numerator).into()),
        );
    }
    if let Some(var_733) = &input.profile {
        object.key("profile").string(var_733.as_str());
    }
    if input.qvbr_quality_level != 0 {
        object.key("qvbrQualityLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.qvbr_quality_level).into()),
        );
    }
    if let Some(var_734) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_734.as_str());
    }
    if let Some(var_735) = &input.scan_type {
        object.key("scanType").string(var_735.as_str());
    }
    if let Some(var_736) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_736.as_str());
    }
    if input.slices != 0 {
        object.key("slices").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.slices).into()),
        );
    }
    if let Some(var_737) = &input.tier {
        object.key("tier").string(var_737.as_str());
    }
    if let Some(var_738) = &input.timecode_insertion {
        object.key("timecodeInsertion").string(var_738.as_str());
    }
}

pub fn serialize_structure_crate_model_mpeg2_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Mpeg2Settings,
) {
    if let Some(var_739) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_739.as_str());
    }
    if let Some(var_740) = &input.afd_signaling {
        object.key("afdSignaling").string(var_740.as_str());
    }
    if let Some(var_741) = &input.color_metadata {
        object.key("colorMetadata").string(var_741.as_str());
    }
    if let Some(var_742) = &input.color_space {
        object.key("colorSpace").string(var_742.as_str());
    }
    if let Some(var_743) = &input.display_aspect_ratio {
        object.key("displayAspectRatio").string(var_743.as_str());
    }
    if let Some(var_744) = &input.filter_settings {
        let mut object_745 = object.key("filterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_mpeg2_filter_settings(
            &mut object_745,
            var_744,
        );
        object_745.finish();
    }
    if let Some(var_746) = &input.fixed_afd {
        object.key("fixedAfd").string(var_746.as_str());
    }
    {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_num_b_frames != 0 {
        object.key("gopNumBFrames").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gop_num_b_frames).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_747) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_747.as_str());
    }
    if let Some(var_748) = &input.scan_type {
        object.key("scanType").string(var_748.as_str());
    }
    if let Some(var_749) = &input.subgop_length {
        object.key("subgopLength").string(var_749.as_str());
    }
    if let Some(var_750) = &input.timecode_insertion {
        object.key("timecodeInsertion").string(var_750.as_str());
    }
}

pub fn serialize_structure_crate_model_failover_condition_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FailoverConditionSettings,
) {
    if let Some(var_751) = &input.audio_silence_settings {
        let mut object_752 = object.key("audioSilenceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_silence_failover_settings(
            &mut object_752,
            var_751,
        );
        object_752.finish();
    }
    if let Some(var_753) = &input.input_loss_settings {
        let mut object_754 = object.key("inputLossSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_input_loss_failover_settings(
            &mut object_754,
            var_753,
        );
        object_754.finish();
    }
    if let Some(var_755) = &input.video_black_settings {
        let mut object_756 = object.key("videoBlackSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_video_black_failover_settings(
            &mut object_756,
            var_755,
        );
        object_756.finish();
    }
}

pub fn serialize_structure_crate_model_audio_selector_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioSelectorSettings,
) {
    if let Some(var_757) = &input.audio_hls_rendition_selection {
        let mut object_758 = object.key("audioHlsRenditionSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_hls_rendition_selection(
            &mut object_758,
            var_757,
        );
        object_758.finish();
    }
    if let Some(var_759) = &input.audio_language_selection {
        let mut object_760 = object.key("audioLanguageSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_language_selection(
            &mut object_760,
            var_759,
        );
        object_760.finish();
    }
    if let Some(var_761) = &input.audio_pid_selection {
        let mut object_762 = object.key("audioPidSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_pid_selection(
            &mut object_762,
            var_761,
        );
        object_762.finish();
    }
    if let Some(var_763) = &input.audio_track_selection {
        let mut object_764 = object.key("audioTrackSelection").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_track_selection(
            &mut object_764,
            var_763,
        );
        object_764.finish();
    }
}

pub fn serialize_structure_crate_model_caption_selector_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionSelectorSettings,
) {
    if let Some(var_765) = &input.ancillary_source_settings {
        let mut object_766 = object.key("ancillarySourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_ancillary_source_settings(
            &mut object_766,
            var_765,
        );
        object_766.finish();
    }
    if let Some(var_767) = &input.arib_source_settings {
        let mut object_768 = object.key("aribSourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_arib_source_settings(
            &mut object_768,
            var_767,
        );
        object_768.finish();
    }
    if let Some(var_769) = &input.dvb_sub_source_settings {
        let mut object_770 = object.key("dvbSubSourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dvb_sub_source_settings(
            &mut object_770,
            var_769,
        );
        object_770.finish();
    }
    if let Some(var_771) = &input.embedded_source_settings {
        let mut object_772 = object.key("embeddedSourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_embedded_source_settings(
            &mut object_772,
            var_771,
        );
        object_772.finish();
    }
    if let Some(var_773) = &input.scte20_source_settings {
        let mut object_774 = object.key("scte20SourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte20_source_settings(
            &mut object_774,
            var_773,
        );
        object_774.finish();
    }
    if let Some(var_775) = &input.scte27_source_settings {
        let mut object_776 = object.key("scte27SourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte27_source_settings(
            &mut object_776,
            var_775,
        );
        object_776.finish();
    }
    if let Some(var_777) = &input.teletext_source_settings {
        let mut object_778 = object.key("teletextSourceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_teletext_source_settings(
            &mut object_778,
            var_777,
        );
        object_778.finish();
    }
}

pub fn serialize_structure_crate_model_hls_input_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsInputSettings,
) {
    if input.bandwidth != 0 {
        object.key("bandwidth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bandwidth).into()),
        );
    }
    if input.buffer_segments != 0 {
        object.key("bufferSegments").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.buffer_segments).into()),
        );
    }
    if input.retries != 0 {
        object.key("retries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.retry_interval != 0 {
        object.key("retryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retry_interval).into()),
        );
    }
    if let Some(var_779) = &input.scte35_source {
        object.key("scte35Source").string(var_779.as_str());
    }
}

pub fn serialize_structure_crate_model_video_selector_color_space_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoSelectorColorSpaceSettings,
) {
    if let Some(var_780) = &input.hdr10_settings {
        let mut object_781 = object.key("hdr10Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_hdr10_settings(&mut object_781, var_780);
        object_781.finish();
    }
}

pub fn serialize_structure_crate_model_video_selector_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoSelectorSettings,
) {
    if let Some(var_782) = &input.video_selector_pid {
        let mut object_783 = object.key("videoSelectorPid").start_object();
        crate::json_ser::serialize_structure_crate_model_video_selector_pid(
            &mut object_783,
            var_782,
        );
        object_783.finish();
    }
    if let Some(var_784) = &input.video_selector_program_id {
        let mut object_785 = object.key("videoSelectorProgramId").start_object();
        crate::json_ser::serialize_structure_crate_model_video_selector_program_id(
            &mut object_785,
            var_784,
        );
        object_785.finish();
    }
}

pub fn serialize_structure_crate_model_input_clipping_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputClippingSettings,
) {
    if let Some(var_786) = &input.input_timecode_source {
        object.key("inputTimecodeSource").string(var_786.as_str());
    }
    if let Some(var_787) = &input.start_timecode {
        let mut object_788 = object.key("startTimecode").start_object();
        crate::json_ser::serialize_structure_crate_model_start_timecode(&mut object_788, var_787);
        object_788.finish();
    }
    if let Some(var_789) = &input.stop_timecode {
        let mut object_790 = object.key("stopTimecode").start_object();
        crate::json_ser::serialize_structure_crate_model_stop_timecode(&mut object_790, var_789);
        object_790.finish();
    }
}

pub fn serialize_structure_crate_model_pipeline_pause_state_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelinePauseStateSettings,
) {
    if let Some(var_791) = &input.pipeline_id {
        object.key("pipelineId").string(var_791.as_str());
    }
}

pub fn serialize_structure_crate_model_scte35_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35Descriptor,
) {
    if let Some(var_792) = &input.scte35_descriptor_settings {
        let mut object_793 = object.key("scte35DescriptorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_descriptor_settings(
            &mut object_793,
            var_792,
        );
        object_793.finish();
    }
}

pub fn serialize_structure_crate_model_input_channel_level(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputChannelLevel,
) {
    {
        object.key("gain").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.gain).into()),
        );
    }
    {
        object.key("inputChannel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.input_channel).into()),
        );
    }
}

pub fn serialize_structure_crate_model_archive_cdn_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArchiveCdnSettings,
) {
    if let Some(var_794) = &input.archive_s3_settings {
        let mut object_795 = object.key("archiveS3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_archive_s3_settings(
            &mut object_795,
            var_794,
        );
        object_795.finish();
    }
}

pub fn serialize_structure_crate_model_output_location_ref(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputLocationRef,
) {
    if let Some(var_796) = &input.destination_ref_id {
        object.key("destinationRefId").string(var_796);
    }
}

pub fn serialize_structure_crate_model_frame_capture_cdn_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureCdnSettings,
) {
    if let Some(var_797) = &input.frame_capture_s3_settings {
        let mut object_798 = object.key("frameCaptureS3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_s3_settings(
            &mut object_798,
            var_797,
        );
        object_798.finish();
    }
}

pub fn serialize_structure_crate_model_caption_language_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionLanguageMapping,
) {
    {
        object.key("captionChannel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.caption_channel).into()),
        );
    }
    if let Some(var_799) = &input.language_code {
        object.key("languageCode").string(var_799);
    }
    if let Some(var_800) = &input.language_description {
        object.key("languageDescription").string(var_800);
    }
}

pub fn serialize_structure_crate_model_hls_cdn_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsCdnSettings,
) {
    if let Some(var_801) = &input.hls_akamai_settings {
        let mut object_802 = object.key("hlsAkamaiSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_akamai_settings(
            &mut object_802,
            var_801,
        );
        object_802.finish();
    }
    if let Some(var_803) = &input.hls_basic_put_settings {
        let mut object_804 = object.key("hlsBasicPutSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_basic_put_settings(
            &mut object_804,
            var_803,
        );
        object_804.finish();
    }
    if let Some(var_805) = &input.hls_media_store_settings {
        let mut object_806 = object.key("hlsMediaStoreSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_media_store_settings(
            &mut object_806,
            var_805,
        );
        object_806.finish();
    }
    if let Some(var_807) = &input.hls_s3_settings {
        let mut object_808 = object.key("hlsS3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_s3_settings(&mut object_808, var_807);
        object_808.finish();
    }
    if let Some(var_809) = &input.hls_webdav_settings {
        let mut object_810 = object.key("hlsWebdavSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_webdav_settings(
            &mut object_810,
            var_809,
        );
        object_810.finish();
    }
}

pub fn serialize_structure_crate_model_key_provider_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyProviderSettings,
) {
    if let Some(var_811) = &input.static_key_settings {
        let mut object_812 = object.key("staticKeySettings").start_object();
        crate::json_ser::serialize_structure_crate_model_static_key_settings(
            &mut object_812,
            var_811,
        );
        object_812.finish();
    }
}

pub fn serialize_structure_crate_model_archive_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArchiveOutputSettings,
) {
    if let Some(var_813) = &input.container_settings {
        let mut object_814 = object.key("containerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_archive_container_settings(
            &mut object_814,
            var_813,
        );
        object_814.finish();
    }
    if let Some(var_815) = &input.extension {
        object.key("extension").string(var_815);
    }
    if let Some(var_816) = &input.name_modifier {
        object.key("nameModifier").string(var_816);
    }
}

pub fn serialize_structure_crate_model_frame_capture_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureOutputSettings,
) {
    if let Some(var_817) = &input.name_modifier {
        object.key("nameModifier").string(var_817);
    }
}

pub fn serialize_structure_crate_model_hls_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsOutputSettings,
) {
    if let Some(var_818) = &input.h265_packaging_type {
        object.key("h265PackagingType").string(var_818.as_str());
    }
    if let Some(var_819) = &input.hls_settings {
        let mut object_820 = object.key("hlsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_hls_settings(&mut object_820, var_819);
        object_820.finish();
    }
    if let Some(var_821) = &input.name_modifier {
        object.key("nameModifier").string(var_821);
    }
    if let Some(var_822) = &input.segment_modifier {
        object.key("segmentModifier").string(var_822);
    }
}

pub fn serialize_structure_crate_model_media_package_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaPackageOutputSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_ms_smooth_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MsSmoothOutputSettings,
) {
    if let Some(var_823) = &input.h265_packaging_type {
        object.key("h265PackagingType").string(var_823.as_str());
    }
    if let Some(var_824) = &input.name_modifier {
        object.key("nameModifier").string(var_824);
    }
}

pub fn serialize_structure_crate_model_multiplex_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiplexOutputSettings,
) {
    if let Some(var_825) = &input.destination {
        let mut object_826 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_826,
            var_825,
        );
        object_826.finish();
    }
}

pub fn serialize_structure_crate_model_rtmp_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RtmpOutputSettings,
) {
    if let Some(var_827) = &input.certificate_mode {
        object.key("certificateMode").string(var_827.as_str());
    }
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if let Some(var_828) = &input.destination {
        let mut object_829 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_829,
            var_828,
        );
        object_829.finish();
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
}

pub fn serialize_structure_crate_model_udp_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UdpOutputSettings,
) {
    if input.buffer_msec != 0 {
        object.key("bufferMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.buffer_msec).into()),
        );
    }
    if let Some(var_830) = &input.container_settings {
        let mut object_831 = object.key("containerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_udp_container_settings(
            &mut object_831,
            var_830,
        );
        object_831.finish();
    }
    if let Some(var_832) = &input.destination {
        let mut object_833 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location_ref(
            &mut object_833,
            var_832,
        );
        object_833.finish();
    }
    if let Some(var_834) = &input.fec_output_settings {
        let mut object_835 = object.key("fecOutputSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_fec_output_settings(
            &mut object_835,
            var_834,
        );
        object_835.finish();
    }
}

pub fn serialize_structure_crate_model_h264_color_space_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H264ColorSpaceSettings,
) {
    if let Some(var_836) = &input.color_space_passthrough_settings {
        let mut object_837 = object.key("colorSpacePassthroughSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_color_space_passthrough_settings(
            &mut object_837,
            var_836,
        );
        object_837.finish();
    }
    if let Some(var_838) = &input.rec601_settings {
        let mut object_839 = object.key("rec601Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_rec601_settings(&mut object_839, var_838);
        object_839.finish();
    }
    if let Some(var_840) = &input.rec709_settings {
        let mut object_841 = object.key("rec709Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_rec709_settings(&mut object_841, var_840);
        object_841.finish();
    }
}

pub fn serialize_structure_crate_model_h264_filter_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H264FilterSettings,
) {
    if let Some(var_842) = &input.temporal_filter_settings {
        let mut object_843 = object.key("temporalFilterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_temporal_filter_settings(
            &mut object_843,
            var_842,
        );
        object_843.finish();
    }
}

pub fn serialize_structure_crate_model_h265_color_space_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H265ColorSpaceSettings,
) {
    if let Some(var_844) = &input.color_space_passthrough_settings {
        let mut object_845 = object.key("colorSpacePassthroughSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_color_space_passthrough_settings(
            &mut object_845,
            var_844,
        );
        object_845.finish();
    }
    if let Some(var_846) = &input.hdr10_settings {
        let mut object_847 = object.key("hdr10Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_hdr10_settings(&mut object_847, var_846);
        object_847.finish();
    }
    if let Some(var_848) = &input.rec601_settings {
        let mut object_849 = object.key("rec601Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_rec601_settings(&mut object_849, var_848);
        object_849.finish();
    }
    if let Some(var_850) = &input.rec709_settings {
        let mut object_851 = object.key("rec709Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_rec709_settings(&mut object_851, var_850);
        object_851.finish();
    }
}

pub fn serialize_structure_crate_model_h265_filter_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::H265FilterSettings,
) {
    if let Some(var_852) = &input.temporal_filter_settings {
        let mut object_853 = object.key("temporalFilterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_temporal_filter_settings(
            &mut object_853,
            var_852,
        );
        object_853.finish();
    }
}

pub fn serialize_structure_crate_model_mpeg2_filter_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Mpeg2FilterSettings,
) {
    if let Some(var_854) = &input.temporal_filter_settings {
        let mut object_855 = object.key("temporalFilterSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_temporal_filter_settings(
            &mut object_855,
            var_854,
        );
        object_855.finish();
    }
}

pub fn serialize_structure_crate_model_audio_silence_failover_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioSilenceFailoverSettings,
) {
    if let Some(var_856) = &input.audio_selector_name {
        object.key("audioSelectorName").string(var_856);
    }
    if input.audio_silence_threshold_msec != 0 {
        object.key("audioSilenceThresholdMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.audio_silence_threshold_msec).into()),
        );
    }
}

pub fn serialize_structure_crate_model_input_loss_failover_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputLossFailoverSettings,
) {
    if input.input_loss_threshold_msec != 0 {
        object.key("inputLossThresholdMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.input_loss_threshold_msec).into()),
        );
    }
}

pub fn serialize_structure_crate_model_video_black_failover_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoBlackFailoverSettings,
) {
    if input.black_detect_threshold != 0.0 {
        object.key("blackDetectThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.black_detect_threshold).into()),
        );
    }
    if input.video_black_threshold_msec != 0 {
        object.key("videoBlackThresholdMsec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.video_black_threshold_msec).into()),
        );
    }
}

pub fn serialize_structure_crate_model_audio_hls_rendition_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioHlsRenditionSelection,
) {
    if let Some(var_857) = &input.group_id {
        object.key("groupId").string(var_857);
    }
    if let Some(var_858) = &input.name {
        object.key("name").string(var_858);
    }
}

pub fn serialize_structure_crate_model_audio_language_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLanguageSelection,
) {
    if let Some(var_859) = &input.language_code {
        object.key("languageCode").string(var_859);
    }
    if let Some(var_860) = &input.language_selection_policy {
        object
            .key("languageSelectionPolicy")
            .string(var_860.as_str());
    }
}

pub fn serialize_structure_crate_model_audio_pid_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioPidSelection,
) {
    {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
}

pub fn serialize_structure_crate_model_audio_track_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioTrackSelection,
) {
    if let Some(var_861) = &input.tracks {
        let mut array_862 = object.key("tracks").start_array();
        for item_863 in var_861 {
            {
                let mut object_864 = array_862.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_track(
                    &mut object_864,
                    item_863,
                );
                object_864.finish();
            }
        }
        array_862.finish();
    }
}

pub fn serialize_structure_crate_model_ancillary_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AncillarySourceSettings,
) {
    if input.source_ancillary_channel_number != 0 {
        object.key("sourceAncillaryChannelNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source_ancillary_channel_number).into()),
        );
    }
}

pub fn serialize_structure_crate_model_arib_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AribSourceSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_dvb_sub_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DvbSubSourceSettings,
) {
    if let Some(var_865) = &input.ocr_language {
        object.key("ocrLanguage").string(var_865.as_str());
    }
    if input.pid != 0 {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
}

pub fn serialize_structure_crate_model_embedded_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmbeddedSourceSettings,
) {
    if let Some(var_866) = &input.convert608_to708 {
        object.key("convert608To708").string(var_866.as_str());
    }
    if let Some(var_867) = &input.scte20_detection {
        object.key("scte20Detection").string(var_867.as_str());
    }
    if input.source608_channel_number != 0 {
        object.key("source608ChannelNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source608_channel_number).into()),
        );
    }
    if input.source608_track_number != 0 {
        object.key("source608TrackNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source608_track_number).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte20_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte20SourceSettings,
) {
    if let Some(var_868) = &input.convert608_to708 {
        object.key("convert608To708").string(var_868.as_str());
    }
    if input.source608_channel_number != 0 {
        object.key("source608ChannelNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.source608_channel_number).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte27_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte27SourceSettings,
) {
    if let Some(var_869) = &input.ocr_language {
        object.key("ocrLanguage").string(var_869.as_str());
    }
    if input.pid != 0 {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
}

pub fn serialize_structure_crate_model_teletext_source_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeletextSourceSettings,
) {
    if let Some(var_870) = &input.output_rectangle {
        let mut object_871 = object.key("outputRectangle").start_object();
        crate::json_ser::serialize_structure_crate_model_caption_rectangle(
            &mut object_871,
            var_870,
        );
        object_871.finish();
    }
    if let Some(var_872) = &input.page_number {
        object.key("pageNumber").string(var_872);
    }
}

pub fn serialize_structure_crate_model_hdr10_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Hdr10Settings,
) {
    if input.max_cll != 0 {
        object.key("maxCll").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_cll).into()),
        );
    }
    if input.max_fall != 0 {
        object.key("maxFall").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_fall).into()),
        );
    }
}

pub fn serialize_structure_crate_model_video_selector_pid(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoSelectorPid,
) {
    if input.pid != 0 {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pid).into()),
        );
    }
}

pub fn serialize_structure_crate_model_video_selector_program_id(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VideoSelectorProgramId,
) {
    if input.program_id != 0 {
        object.key("programId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.program_id).into()),
        );
    }
}

pub fn serialize_structure_crate_model_start_timecode(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTimecode,
) {
    if let Some(var_873) = &input.timecode {
        object.key("timecode").string(var_873);
    }
}

pub fn serialize_structure_crate_model_stop_timecode(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StopTimecode,
) {
    if let Some(var_874) = &input.last_frame_clipping_behavior {
        object
            .key("lastFrameClippingBehavior")
            .string(var_874.as_str());
    }
    if let Some(var_875) = &input.timecode {
        object.key("timecode").string(var_875);
    }
}

pub fn serialize_structure_crate_model_scte35_descriptor_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35DescriptorSettings,
) {
    if let Some(var_876) = &input.segmentation_descriptor_scte35_descriptor_settings {
        let mut object_877 = object
            .key("segmentationDescriptorScte35DescriptorSettings")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_segmentation_descriptor(
            &mut object_877,
            var_876,
        );
        object_877.finish();
    }
}

pub fn serialize_structure_crate_model_archive_s3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArchiveS3Settings,
) {
    if let Some(var_878) = &input.canned_acl {
        object.key("cannedAcl").string(var_878.as_str());
    }
}

pub fn serialize_structure_crate_model_frame_capture_s3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureS3Settings,
) {
    if let Some(var_879) = &input.canned_acl {
        object.key("cannedAcl").string(var_879.as_str());
    }
}

pub fn serialize_structure_crate_model_hls_akamai_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsAkamaiSettings,
) {
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if input.filecache_duration != 0 {
        object.key("filecacheDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filecache_duration).into()),
        );
    }
    if let Some(var_880) = &input.http_transfer_mode {
        object.key("httpTransferMode").string(var_880.as_str());
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
    if let Some(var_881) = &input.salt {
        object.key("salt").string(var_881);
    }
    if let Some(var_882) = &input.token {
        object.key("token").string(var_882);
    }
}

pub fn serialize_structure_crate_model_hls_basic_put_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsBasicPutSettings,
) {
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if input.filecache_duration != 0 {
        object.key("filecacheDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filecache_duration).into()),
        );
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
}

pub fn serialize_structure_crate_model_hls_media_store_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsMediaStoreSettings,
) {
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if input.filecache_duration != 0 {
        object.key("filecacheDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filecache_duration).into()),
        );
    }
    if let Some(var_883) = &input.media_store_storage_class {
        object
            .key("mediaStoreStorageClass")
            .string(var_883.as_str());
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
}

pub fn serialize_structure_crate_model_hls_s3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsS3Settings,
) {
    if let Some(var_884) = &input.canned_acl {
        object.key("cannedAcl").string(var_884.as_str());
    }
}

pub fn serialize_structure_crate_model_hls_webdav_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsWebdavSettings,
) {
    if input.connection_retry_interval != 0 {
        object.key("connectionRetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.connection_retry_interval).into()),
        );
    }
    if input.filecache_duration != 0 {
        object.key("filecacheDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.filecache_duration).into()),
        );
    }
    if let Some(var_885) = &input.http_transfer_mode {
        object.key("httpTransferMode").string(var_885.as_str());
    }
    if input.num_retries != 0 {
        object.key("numRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_retries).into()),
        );
    }
    if input.restart_delay != 0 {
        object.key("restartDelay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.restart_delay).into()),
        );
    }
}

pub fn serialize_structure_crate_model_static_key_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StaticKeySettings,
) {
    if let Some(var_886) = &input.key_provider_server {
        let mut object_887 = object.key("keyProviderServer").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_887, var_886);
        object_887.finish();
    }
    if let Some(var_888) = &input.static_key_value {
        object.key("staticKeyValue").string(var_888);
    }
}

pub fn serialize_structure_crate_model_archive_container_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArchiveContainerSettings,
) {
    if let Some(var_889) = &input.m2ts_settings {
        let mut object_890 = object.key("m2tsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_m2ts_settings(&mut object_890, var_889);
        object_890.finish();
    }
    if let Some(var_891) = &input.raw_settings {
        let mut object_892 = object.key("rawSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_raw_settings(&mut object_892, var_891);
        object_892.finish();
    }
}

pub fn serialize_structure_crate_model_hls_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HlsSettings,
) {
    if let Some(var_893) = &input.audio_only_hls_settings {
        let mut object_894 = object.key("audioOnlyHlsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_only_hls_settings(
            &mut object_894,
            var_893,
        );
        object_894.finish();
    }
    if let Some(var_895) = &input.fmp4_hls_settings {
        let mut object_896 = object.key("fmp4HlsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_fmp4_hls_settings(
            &mut object_896,
            var_895,
        );
        object_896.finish();
    }
    if let Some(var_897) = &input.frame_capture_hls_settings {
        let mut object_898 = object.key("frameCaptureHlsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_frame_capture_hls_settings(
            &mut object_898,
            var_897,
        );
        object_898.finish();
    }
    if let Some(var_899) = &input.standard_hls_settings {
        let mut object_900 = object.key("standardHlsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_standard_hls_settings(
            &mut object_900,
            var_899,
        );
        object_900.finish();
    }
}

pub fn serialize_structure_crate_model_udp_container_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UdpContainerSettings,
) {
    if let Some(var_901) = &input.m2ts_settings {
        let mut object_902 = object.key("m2tsSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_m2ts_settings(&mut object_902, var_901);
        object_902.finish();
    }
}

pub fn serialize_structure_crate_model_fec_output_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FecOutputSettings,
) {
    if input.column_depth != 0 {
        object.key("columnDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.column_depth).into()),
        );
    }
    if let Some(var_903) = &input.include_fec {
        object.key("includeFec").string(var_903.as_str());
    }
    if input.row_length != 0 {
        object.key("rowLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.row_length).into()),
        );
    }
}

pub fn serialize_structure_crate_model_color_space_passthrough_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColorSpacePassthroughSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_rec601_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rec601Settings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_rec709_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rec709Settings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_temporal_filter_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemporalFilterSettings,
) {
    if let Some(var_904) = &input.post_filter_sharpening {
        object.key("postFilterSharpening").string(var_904.as_str());
    }
    if let Some(var_905) = &input.strength {
        object.key("strength").string(var_905.as_str());
    }
}

pub fn serialize_structure_crate_model_audio_track(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioTrack,
) {
    {
        object.key("track").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.track).into()),
        );
    }
}

pub fn serialize_structure_crate_model_caption_rectangle(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptionRectangle,
) {
    {
        object.key("height").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.height).into()),
        );
    }
    {
        object.key("leftOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.left_offset).into()),
        );
    }
    {
        object.key("topOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.top_offset).into()),
        );
    }
    {
        object.key("width").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.width).into()),
        );
    }
}

pub fn serialize_structure_crate_model_scte35_segmentation_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35SegmentationDescriptor,
) {
    if let Some(var_906) = &input.delivery_restrictions {
        let mut object_907 = object.key("deliveryRestrictions").start_object();
        crate::json_ser::serialize_structure_crate_model_scte35_delivery_restrictions(
            &mut object_907,
            var_906,
        );
        object_907.finish();
    }
    if input.segment_num != 0 {
        object.key("segmentNum").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segment_num).into()),
        );
    }
    if let Some(var_908) = &input.segmentation_cancel_indicator {
        object
            .key("segmentationCancelIndicator")
            .string(var_908.as_str());
    }
    if input.segmentation_duration != 0 {
        object.key("segmentationDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segmentation_duration).into()),
        );
    }
    {
        object.key("segmentationEventId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segmentation_event_id).into()),
        );
    }
    if input.segmentation_type_id != 0 {
        object.key("segmentationTypeId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segmentation_type_id).into()),
        );
    }
    if let Some(var_909) = &input.segmentation_upid {
        object.key("segmentationUpid").string(var_909);
    }
    if input.segmentation_upid_type != 0 {
        object.key("segmentationUpidType").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segmentation_upid_type).into()),
        );
    }
    if input.segments_expected != 0 {
        object.key("segmentsExpected").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segments_expected).into()),
        );
    }
    if input.sub_segment_num != 0 {
        object.key("subSegmentNum").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sub_segment_num).into()),
        );
    }
    if input.sub_segments_expected != 0 {
        object.key("subSegmentsExpected").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sub_segments_expected).into()),
        );
    }
}

pub fn serialize_structure_crate_model_m2ts_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::M2tsSettings,
) {
    if let Some(var_910) = &input.absent_input_audio_behavior {
        object
            .key("absentInputAudioBehavior")
            .string(var_910.as_str());
    }
    if let Some(var_911) = &input.arib {
        object.key("arib").string(var_911.as_str());
    }
    if let Some(var_912) = &input.arib_captions_pid {
        object.key("aribCaptionsPid").string(var_912);
    }
    if let Some(var_913) = &input.arib_captions_pid_control {
        object
            .key("aribCaptionsPidControl")
            .string(var_913.as_str());
    }
    if let Some(var_914) = &input.audio_buffer_model {
        object.key("audioBufferModel").string(var_914.as_str());
    }
    if input.audio_frames_per_pes != 0 {
        object.key("audioFramesPerPes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.audio_frames_per_pes).into()),
        );
    }
    if let Some(var_915) = &input.audio_pids {
        object.key("audioPids").string(var_915);
    }
    if let Some(var_916) = &input.audio_stream_type {
        object.key("audioStreamType").string(var_916.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if let Some(var_917) = &input.buffer_model {
        object.key("bufferModel").string(var_917.as_str());
    }
    if let Some(var_918) = &input.cc_descriptor {
        object.key("ccDescriptor").string(var_918.as_str());
    }
    if let Some(var_919) = &input.dvb_nit_settings {
        let mut object_920 = object.key("dvbNitSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dvb_nit_settings(&mut object_920, var_919);
        object_920.finish();
    }
    if let Some(var_921) = &input.dvb_sdt_settings {
        let mut object_922 = object.key("dvbSdtSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dvb_sdt_settings(&mut object_922, var_921);
        object_922.finish();
    }
    if let Some(var_923) = &input.dvb_sub_pids {
        object.key("dvbSubPids").string(var_923);
    }
    if let Some(var_924) = &input.dvb_tdt_settings {
        let mut object_925 = object.key("dvbTdtSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dvb_tdt_settings(&mut object_925, var_924);
        object_925.finish();
    }
    if let Some(var_926) = &input.dvb_teletext_pid {
        object.key("dvbTeletextPid").string(var_926);
    }
    if let Some(var_927) = &input.ebif {
        object.key("ebif").string(var_927.as_str());
    }
    if let Some(var_928) = &input.ebp_audio_interval {
        object.key("ebpAudioInterval").string(var_928.as_str());
    }
    if input.ebp_lookahead_ms != 0 {
        object.key("ebpLookaheadMs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ebp_lookahead_ms).into()),
        );
    }
    if let Some(var_929) = &input.ebp_placement {
        object.key("ebpPlacement").string(var_929.as_str());
    }
    if let Some(var_930) = &input.ecm_pid {
        object.key("ecmPid").string(var_930);
    }
    if let Some(var_931) = &input.es_rate_in_pes {
        object.key("esRateInPes").string(var_931.as_str());
    }
    if let Some(var_932) = &input.etv_platform_pid {
        object.key("etvPlatformPid").string(var_932);
    }
    if let Some(var_933) = &input.etv_signal_pid {
        object.key("etvSignalPid").string(var_933);
    }
    if input.fragment_time != 0.0 {
        object.key("fragmentTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.fragment_time).into()),
        );
    }
    if let Some(var_934) = &input.klv {
        object.key("klv").string(var_934.as_str());
    }
    if let Some(var_935) = &input.klv_data_pids {
        object.key("klvDataPids").string(var_935);
    }
    if let Some(var_936) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_936.as_str());
    }
    if input.null_packet_bitrate != 0.0 {
        object.key("nullPacketBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.null_packet_bitrate).into()),
        );
    }
    if input.pat_interval != 0 {
        object.key("patInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pat_interval).into()),
        );
    }
    if let Some(var_937) = &input.pcr_control {
        object.key("pcrControl").string(var_937.as_str());
    }
    if input.pcr_period != 0 {
        object.key("pcrPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pcr_period).into()),
        );
    }
    if let Some(var_938) = &input.pcr_pid {
        object.key("pcrPid").string(var_938);
    }
    if input.pmt_interval != 0 {
        object.key("pmtInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pmt_interval).into()),
        );
    }
    if let Some(var_939) = &input.pmt_pid {
        object.key("pmtPid").string(var_939);
    }
    if input.program_num != 0 {
        object.key("programNum").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.program_num).into()),
        );
    }
    if let Some(var_940) = &input.rate_mode {
        object.key("rateMode").string(var_940.as_str());
    }
    if let Some(var_941) = &input.scte27_pids {
        object.key("scte27Pids").string(var_941);
    }
    if let Some(var_942) = &input.scte35_control {
        object.key("scte35Control").string(var_942.as_str());
    }
    if let Some(var_943) = &input.scte35_pid {
        object.key("scte35Pid").string(var_943);
    }
    if let Some(var_944) = &input.segmentation_markers {
        object.key("segmentationMarkers").string(var_944.as_str());
    }
    if let Some(var_945) = &input.segmentation_style {
        object.key("segmentationStyle").string(var_945.as_str());
    }
    if input.segmentation_time != 0.0 {
        object.key("segmentationTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.segmentation_time).into()),
        );
    }
    if let Some(var_946) = &input.timed_metadata_behavior {
        object.key("timedMetadataBehavior").string(var_946.as_str());
    }
    if let Some(var_947) = &input.timed_metadata_pid {
        object.key("timedMetadataPid").string(var_947);
    }
    if input.transport_stream_id != 0 {
        object.key("transportStreamId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transport_stream_id).into()),
        );
    }
    if let Some(var_948) = &input.video_pid {
        object.key("videoPid").string(var_948);
    }
}

pub fn serialize_structure_crate_model_raw_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RawSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_audio_only_hls_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioOnlyHlsSettings,
) {
    if let Some(var_949) = &input.audio_group_id {
        object.key("audioGroupId").string(var_949);
    }
    if let Some(var_950) = &input.audio_only_image {
        let mut object_951 = object.key("audioOnlyImage").start_object();
        crate::json_ser::serialize_structure_crate_model_input_location(&mut object_951, var_950);
        object_951.finish();
    }
    if let Some(var_952) = &input.audio_track_type {
        object.key("audioTrackType").string(var_952.as_str());
    }
    if let Some(var_953) = &input.segment_type {
        object.key("segmentType").string(var_953.as_str());
    }
}

pub fn serialize_structure_crate_model_fmp4_hls_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Fmp4HlsSettings,
) {
    if let Some(var_954) = &input.audio_rendition_sets {
        object.key("audioRenditionSets").string(var_954);
    }
    if let Some(var_955) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_955.as_str());
    }
    if let Some(var_956) = &input.timed_metadata_behavior {
        object.key("timedMetadataBehavior").string(var_956.as_str());
    }
}

pub fn serialize_structure_crate_model_frame_capture_hls_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameCaptureHlsSettings,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_crate_model_standard_hls_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardHlsSettings,
) {
    if let Some(var_957) = &input.audio_rendition_sets {
        object.key("audioRenditionSets").string(var_957);
    }
    if let Some(var_958) = &input.m3u8_settings {
        let mut object_959 = object.key("m3u8Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_m3u8_settings(&mut object_959, var_958);
        object_959.finish();
    }
}

pub fn serialize_structure_crate_model_scte35_delivery_restrictions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scte35DeliveryRestrictions,
) {
    if let Some(var_960) = &input.archive_allowed_flag {
        object.key("archiveAllowedFlag").string(var_960.as_str());
    }
    if let Some(var_961) = &input.device_restrictions {
        object.key("deviceRestrictions").string(var_961.as_str());
    }
    if let Some(var_962) = &input.no_regional_blackout_flag {
        object
            .key("noRegionalBlackoutFlag")
            .string(var_962.as_str());
    }
    if let Some(var_963) = &input.web_delivery_allowed_flag {
        object
            .key("webDeliveryAllowedFlag")
            .string(var_963.as_str());
    }
}

pub fn serialize_structure_crate_model_dvb_nit_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DvbNitSettings,
) {
    {
        object.key("networkId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.network_id).into()),
        );
    }
    if let Some(var_964) = &input.network_name {
        object.key("networkName").string(var_964);
    }
    if input.rep_interval != 0 {
        object.key("repInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rep_interval).into()),
        );
    }
}

pub fn serialize_structure_crate_model_dvb_sdt_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DvbSdtSettings,
) {
    if let Some(var_965) = &input.output_sdt {
        object.key("outputSdt").string(var_965.as_str());
    }
    if input.rep_interval != 0 {
        object.key("repInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rep_interval).into()),
        );
    }
    if let Some(var_966) = &input.service_name {
        object.key("serviceName").string(var_966);
    }
    if let Some(var_967) = &input.service_provider_name {
        object.key("serviceProviderName").string(var_967);
    }
}

pub fn serialize_structure_crate_model_dvb_tdt_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DvbTdtSettings,
) {
    if input.rep_interval != 0 {
        object.key("repInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.rep_interval).into()),
        );
    }
}

pub fn serialize_structure_crate_model_m3u8_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::M3u8Settings,
) {
    if input.audio_frames_per_pes != 0 {
        object.key("audioFramesPerPes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.audio_frames_per_pes).into()),
        );
    }
    if let Some(var_968) = &input.audio_pids {
        object.key("audioPids").string(var_968);
    }
    if let Some(var_969) = &input.ecm_pid {
        object.key("ecmPid").string(var_969);
    }
    if let Some(var_970) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_970.as_str());
    }
    if input.pat_interval != 0 {
        object.key("patInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pat_interval).into()),
        );
    }
    if let Some(var_971) = &input.pcr_control {
        object.key("pcrControl").string(var_971.as_str());
    }
    if input.pcr_period != 0 {
        object.key("pcrPeriod").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pcr_period).into()),
        );
    }
    if let Some(var_972) = &input.pcr_pid {
        object.key("pcrPid").string(var_972);
    }
    if input.pmt_interval != 0 {
        object.key("pmtInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.pmt_interval).into()),
        );
    }
    if let Some(var_973) = &input.pmt_pid {
        object.key("pmtPid").string(var_973);
    }
    if input.program_num != 0 {
        object.key("programNum").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.program_num).into()),
        );
    }
    if let Some(var_974) = &input.scte35_behavior {
        object.key("scte35Behavior").string(var_974.as_str());
    }
    if let Some(var_975) = &input.scte35_pid {
        object.key("scte35Pid").string(var_975);
    }
    if let Some(var_976) = &input.timed_metadata_behavior {
        object.key("timedMetadataBehavior").string(var_976.as_str());
    }
    if let Some(var_977) = &input.timed_metadata_pid {
        object.key("timedMetadataPid").string(var_977);
    }
    if input.transport_stream_id != 0 {
        object.key("transportStreamId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transport_stream_id).into()),
        );
    }
    if let Some(var_978) = &input.video_pid {
        object.key("videoPid").string(var_978);
    }
}
