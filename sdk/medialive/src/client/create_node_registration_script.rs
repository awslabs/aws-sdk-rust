// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateNodeRegistrationScript`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_id(impl Into<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::cluster_id) / [`set_cluster_id(Option<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_cluster_id):<br>required: **true**<br>The ID of the cluster<br>
    ///   - [`id(impl Into<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_id):<br>required: **false**<br>If you're generating a re-registration script for an already existing node, this is where you provide the id.<br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_name):<br>required: **false**<br>Specify a pattern for MediaLive Anywhere to use to assign a name to each Node in the Cluster. The pattern can include the variables $hn (hostname of the node hardware) and $ts for the date and time that the Node is created, in UTC (for example, 2024-08-20T23:35:12Z).<br>
    ///   - [`node_interface_mappings(NodeInterfaceMapping)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::node_interface_mappings) / [`set_node_interface_mappings(Option<Vec::<NodeInterfaceMapping>>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_node_interface_mappings):<br>required: **false**<br>Documentation update needed<br>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_request_id):<br>required: **false**<br>An ID that you assign to a create request. This ID ensures idempotency when creating resources.<br>
    ///   - [`role(NodeRole)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::role) / [`set_role(Option<NodeRole>)`](crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::set_role):<br>required: **false**<br>The initial role of the Node in the Cluster. ACTIVE means the Node is available for encoding. BACKUP means the Node is a redundant Node and might get used if an ACTIVE Node fails.<br>
    /// - On success, responds with [`CreateNodeRegistrationScriptOutput`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput) with field(s):
    ///   - [`node_registration_script(Option<String>)`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptOutput::node_registration_script): A script that can be run on a Bring Your Own Device Elemental Anywhere system to create a node in a cluster.
    /// - On failure, responds with [`SdkError<CreateNodeRegistrationScriptError>`](crate::operation::create_node_registration_script::CreateNodeRegistrationScriptError)
    pub fn create_node_registration_script(
        &self,
    ) -> crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder {
        crate::operation::create_node_registration_script::builders::CreateNodeRegistrationScriptFluentBuilder::new(self.handle.clone())
    }
}
