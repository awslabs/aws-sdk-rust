// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopChannel`](crate::operation::stop_channel::builders::StopChannelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_id(impl Into<String>)`](crate::operation::stop_channel::builders::StopChannelFluentBuilder::channel_id) / [`set_channel_id(Option<String>)`](crate::operation::stop_channel::builders::StopChannelFluentBuilder::set_channel_id): A request to stop a running channel
    /// - On success, responds with [`StopChannelOutput`](crate::operation::stop_channel::StopChannelOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::stop_channel::StopChannelOutput::arn): The unique arn of the channel.
    ///   - [`cdi_input_specification(Option<CdiInputSpecification>)`](crate::operation::stop_channel::StopChannelOutput::cdi_input_specification): Specification of CDI inputs for this channel
    ///   - [`channel_class(Option<ChannelClass>)`](crate::operation::stop_channel::StopChannelOutput::channel_class): The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
    ///   - [`destinations(Option<Vec<OutputDestination>>)`](crate::operation::stop_channel::StopChannelOutput::destinations): A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
    ///   - [`egress_endpoints(Option<Vec<ChannelEgressEndpoint>>)`](crate::operation::stop_channel::StopChannelOutput::egress_endpoints): The endpoints where outgoing connections initiate from
    ///   - [`encoder_settings(Option<EncoderSettings>)`](crate::operation::stop_channel::StopChannelOutput::encoder_settings): Encoder Settings
    ///   - [`id(Option<String>)`](crate::operation::stop_channel::StopChannelOutput::id): The unique id of the channel.
    ///   - [`input_attachments(Option<Vec<InputAttachment>>)`](crate::operation::stop_channel::StopChannelOutput::input_attachments): List of input attachments for channel.
    ///   - [`input_specification(Option<InputSpecification>)`](crate::operation::stop_channel::StopChannelOutput::input_specification): Specification of network and file inputs for this channel
    ///   - [`log_level(Option<LogLevel>)`](crate::operation::stop_channel::StopChannelOutput::log_level): The log level being written to CloudWatch Logs.
    ///   - [`maintenance(Option<MaintenanceStatus>)`](crate::operation::stop_channel::StopChannelOutput::maintenance): Maintenance settings for this channel.
    ///   - [`name(Option<String>)`](crate::operation::stop_channel::StopChannelOutput::name): The name of the channel. (user-mutable)
    ///   - [`pipeline_details(Option<Vec<PipelineDetail>>)`](crate::operation::stop_channel::StopChannelOutput::pipeline_details): Runtime details for the pipelines of a running channel.
    ///   - [`pipelines_running_count(i32)`](crate::operation::stop_channel::StopChannelOutput::pipelines_running_count): The number of currently healthy pipelines.
    ///   - [`role_arn(Option<String>)`](crate::operation::stop_channel::StopChannelOutput::role_arn): The Amazon Resource Name (ARN) of the role assumed when running the Channel.
    ///   - [`state(Option<ChannelState>)`](crate::operation::stop_channel::StopChannelOutput::state): Placeholder documentation for ChannelState
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::stop_channel::StopChannelOutput::tags): A collection of key-value pairs.
    ///   - [`vpc(Option<VpcOutputSettingsDescription>)`](crate::operation::stop_channel::StopChannelOutput::vpc): Settings for VPC output
    /// - On failure, responds with [`SdkError<StopChannelError>`](crate::operation::stop_channel::StopChannelError)
    pub fn stop_channel(
        &self,
    ) -> crate::operation::stop_channel::builders::StopChannelFluentBuilder {
        crate::operation::stop_channel::builders::StopChannelFluentBuilder::new(self.handle.clone())
    }
}
