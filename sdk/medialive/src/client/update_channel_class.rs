// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateChannelClass`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_class(ChannelClass)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::channel_class) / [`set_channel_class(Option<ChannelClass>)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::set_channel_class): The channel class that you wish to update this channel to use.
    ///   - [`channel_id(impl Into<String>)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::channel_id) / [`set_channel_id(Option<String>)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::set_channel_id): Channel Id of the channel whose class should be updated.
    ///   - [`destinations(Vec<OutputDestination>)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::destinations) / [`set_destinations(Option<Vec<OutputDestination>>)`](crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::set_destinations): A list of output destinations for this channel.
    /// - On success, responds with [`UpdateChannelClassOutput`](crate::operation::update_channel_class::UpdateChannelClassOutput) with field(s):
    ///   - [`channel(Option<Channel>)`](crate::operation::update_channel_class::UpdateChannelClassOutput::channel): Placeholder documentation for Channel
    /// - On failure, responds with [`SdkError<UpdateChannelClassError>`](crate::operation::update_channel_class::UpdateChannelClassError)
    pub fn update_channel_class(
        &self,
    ) -> crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder {
        crate::operation::update_channel_class::builders::UpdateChannelClassFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
