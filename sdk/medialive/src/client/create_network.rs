// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateNetwork`](crate::operation::create_network::builders::CreateNetworkFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ip_pools(IpPoolCreateRequest)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::ip_pools) / [`set_ip_pools(Option<Vec::<IpPoolCreateRequest>>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::set_ip_pools):<br>required: **false**<br>An array of IpPoolCreateRequests that identify a collection of IP addresses in your network that you want to reserve for use in MediaLive Anywhere. MediaLiveAnywhere uses these IP addresses for Push inputs (in both Bridge and NATnetworks) and for output destinations (only in Bridge networks). EachIpPoolUpdateRequest specifies one CIDR block.<br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::set_name):<br>required: **false**<br>Specify a name that is unique in the AWS account. We recommend that you assign a name that hints at the type of traffic on the network. Names are case-sensitive.<br>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::set_request_id):<br>required: **false**<br>An ID that you assign to a create request. This ID ensures idempotency when creating resources.<br>
    ///   - [`routes(RouteCreateRequest)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::routes) / [`set_routes(Option<Vec::<RouteCreateRequest>>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::set_routes):<br>required: **false**<br>An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.<br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_network::builders::CreateNetworkFluentBuilder::set_tags):<br>required: **false**<br>A collection of key-value pairs.<br>
    /// - On success, responds with [`CreateNetworkOutput`](crate::operation::create_network::CreateNetworkOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_network::CreateNetworkOutput::arn): The ARN of this Network. It is automatically assigned when the Network is created.
    ///   - [`associated_cluster_ids(Option<Vec::<String>>)`](crate::operation::create_network::CreateNetworkOutput::associated_cluster_ids): Placeholder documentation for __listOf__string
    ///   - [`id(Option<String>)`](crate::operation::create_network::CreateNetworkOutput::id): The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    ///   - [`ip_pools(Option<Vec::<IpPool>>)`](crate::operation::create_network::CreateNetworkOutput::ip_pools): An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    ///   - [`name(Option<String>)`](crate::operation::create_network::CreateNetworkOutput::name): The name that you specified for the Network.
    ///   - [`routes(Option<Vec::<Route>>)`](crate::operation::create_network::CreateNetworkOutput::routes): An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    ///   - [`state(Option<NetworkState>)`](crate::operation::create_network::CreateNetworkOutput::state): The current state of the Network. Only MediaLive Anywhere can change the state.
    /// - On failure, responds with [`SdkError<CreateNetworkError>`](crate::operation::create_network::CreateNetworkError)
    pub fn create_network(&self) -> crate::operation::create_network::builders::CreateNetworkFluentBuilder {
        crate::operation::create_network::builders::CreateNetworkFluentBuilder::new(self.handle.clone())
    }
}
