// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteNetwork`](crate::operation::delete_network::builders::DeleteNetworkFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_id(impl Into<String>)`](crate::operation::delete_network::builders::DeleteNetworkFluentBuilder::network_id) / [`set_network_id(Option<String>)`](crate::operation::delete_network::builders::DeleteNetworkFluentBuilder::set_network_id):<br>required: **true**<br>The ID of the network.<br>
    /// - On success, responds with [`DeleteNetworkOutput`](crate::operation::delete_network::DeleteNetworkOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::delete_network::DeleteNetworkOutput::arn): The ARN of this Network. It is automatically assigned when the Network is created.
    ///   - [`associated_cluster_ids(Option<Vec::<String>>)`](crate::operation::delete_network::DeleteNetworkOutput::associated_cluster_ids): Placeholder documentation for __listOf__string
    ///   - [`id(Option<String>)`](crate::operation::delete_network::DeleteNetworkOutput::id): The ID of the Network. Unique in the AWS account. The ID is the resource-id portion of the ARN.
    ///   - [`ip_pools(Option<Vec::<IpPool>>)`](crate::operation::delete_network::DeleteNetworkOutput::ip_pools): An array of IpPools in your organization's network that identify a collection of IP addresses in this network that are reserved for use in MediaLive Anywhere. MediaLive Anywhere uses these IP addresses for Push inputs (in both Bridge and NAT networks) and for output destinations (only in Bridge networks). Each IpPool specifies one CIDR block.
    ///   - [`name(Option<String>)`](crate::operation::delete_network::DeleteNetworkOutput::name): The name that you specified for the Network.
    ///   - [`routes(Option<Vec::<Route>>)`](crate::operation::delete_network::DeleteNetworkOutput::routes): An array of routes that MediaLive Anywhere needs to know about in order to route encoding traffic.
    ///   - [`state(Option<NetworkState>)`](crate::operation::delete_network::DeleteNetworkOutput::state): The current state of the Network. Only MediaLive Anywhere can change the state.
    /// - On failure, responds with [`SdkError<DeleteNetworkError>`](crate::operation::delete_network::DeleteNetworkError)
    pub fn delete_network(&self) -> crate::operation::delete_network::builders::DeleteNetworkFluentBuilder {
        crate::operation::delete_network::builders::DeleteNetworkFluentBuilder::new(self.handle.clone())
    }
}
