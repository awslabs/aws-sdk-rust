// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePartnerInput`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_id(impl Into<String>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::input_id) / [`set_input_id(Option<String>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::set_input_id):<br>required: **true**<br>Unique ID of the input.<br>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::set_request_id):<br>required: **false**<br>Unique identifier of the request to ensure the request is handled exactly once in case of retries.<br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::set_tags):<br>required: **false**<br>A collection of key-value pairs.<br>
    /// - On success, responds with [`CreatePartnerInputOutput`](crate::operation::create_partner_input::CreatePartnerInputOutput) with field(s):
    ///   - [`input(Option<Input>)`](crate::operation::create_partner_input::CreatePartnerInputOutput::input): Placeholder documentation for Input
    /// - On failure, responds with [`SdkError<CreatePartnerInputError>`](crate::operation::create_partner_input::CreatePartnerInputError)
    pub fn create_partner_input(&self) -> crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder {
        crate::operation::create_partner_input::builders::CreatePartnerInputFluentBuilder::new(self.handle.clone())
    }
}
