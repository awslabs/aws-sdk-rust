// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates phone numbers with the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnector {
    _private: (),
}
impl AssociatePhoneNumbersWithVoiceConnector {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorInput`](crate::input::AssociatePhoneNumbersWithVoiceConnectorInput)
    pub fn builder() -> crate::input::associate_phone_numbers_with_voice_connector_input::Builder {
        crate::input::associate_phone_numbers_with_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociatePhoneNumbersWithVoiceConnector {
    type Output = std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorOutput,
        crate::error::AssociatePhoneNumbersWithVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_response(
                response,
            )
        }
    }
}

/// <p>Associates phone numbers with the specified Amazon Chime Voice Connector group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePhoneNumbersWithVoiceConnectorGroup {
    _private: (),
}
impl AssociatePhoneNumbersWithVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumbersWithVoiceConnectorGroupInput`](crate::input::AssociatePhoneNumbersWithVoiceConnectorGroupInput)
    pub fn builder(
    ) -> crate::input::associate_phone_numbers_with_voice_connector_group_input::Builder {
        crate::input::associate_phone_numbers_with_voice_connector_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociatePhoneNumbersWithVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::AssociatePhoneNumbersWithVoiceConnectorGroupOutput,
        crate::error::AssociatePhoneNumbersWithVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_group_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_phone_numbers_with_voice_connector_group_response(response)
        }
    }
}

/// <p>Associates a phone number with the specified Amazon Chime user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePhoneNumberWithUser {
    _private: (),
}
impl AssociatePhoneNumberWithUser {
    /// Creates a new builder-style object to manufacture [`AssociatePhoneNumberWithUserInput`](crate::input::AssociatePhoneNumberWithUserInput)
    pub fn builder() -> crate::input::associate_phone_number_with_user_input::Builder {
        crate::input::associate_phone_number_with_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociatePhoneNumberWithUser {
    type Output = std::result::Result<
        crate::output::AssociatePhoneNumberWithUserOutput,
        crate::error::AssociatePhoneNumberWithUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_phone_number_with_user_error(response)
        } else {
            crate::operation_deser::parse_associate_phone_number_with_user_response(response)
        }
    }
}

/// <p>Associates the specified sign-in delegate groups with the specified Amazon Chime account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateSigninDelegateGroupsWithAccount {
    _private: (),
}
impl AssociateSigninDelegateGroupsWithAccount {
    /// Creates a new builder-style object to manufacture [`AssociateSigninDelegateGroupsWithAccountInput`](crate::input::AssociateSigninDelegateGroupsWithAccountInput)
    pub fn builder() -> crate::input::associate_signin_delegate_groups_with_account_input::Builder {
        crate::input::associate_signin_delegate_groups_with_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateSigninDelegateGroupsWithAccount {
    type Output = std::result::Result<
        crate::output::AssociateSigninDelegateGroupsWithAccountOutput,
        crate::error::AssociateSigninDelegateGroupsWithAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_signin_delegate_groups_with_account_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_signin_delegate_groups_with_account_response(
                response,
            )
        }
    }
}

/// <p>
/// Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateAttendee {
    _private: (),
}
impl BatchCreateAttendee {
    /// Creates a new builder-style object to manufacture [`BatchCreateAttendeeInput`](crate::input::BatchCreateAttendeeInput)
    pub fn builder() -> crate::input::batch_create_attendee_input::Builder {
        crate::input::batch_create_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchCreateAttendee {
    type Output = std::result::Result<
        crate::output::BatchCreateAttendeeOutput,
        crate::error::BatchCreateAttendeeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_batch_create_attendee_error(response)
        } else {
            crate::operation_deser::parse_batch_create_attendee_response(response)
        }
    }
}

/// <p>Adds a specified number of users to a channel. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateChannelMembership {
    _private: (),
}
impl BatchCreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`BatchCreateChannelMembershipInput`](crate::input::BatchCreateChannelMembershipInput)
    pub fn builder() -> crate::input::batch_create_channel_membership_input::Builder {
        crate::input::batch_create_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchCreateChannelMembership {
    type Output = std::result::Result<
        crate::output::BatchCreateChannelMembershipOutput,
        crate::error::BatchCreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_create_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_batch_create_channel_membership_response(response)
        }
    }
}

/// <p>Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateRoomMembership {
    _private: (),
}
impl BatchCreateRoomMembership {
    /// Creates a new builder-style object to manufacture [`BatchCreateRoomMembershipInput`](crate::input::BatchCreateRoomMembershipInput)
    pub fn builder() -> crate::input::batch_create_room_membership_input::Builder {
        crate::input::batch_create_room_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchCreateRoomMembership {
    type Output = std::result::Result<
        crate::output::BatchCreateRoomMembershipOutput,
        crate::error::BatchCreateRoomMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_batch_create_room_membership_error(response)
        } else {
            crate::operation_deser::parse_batch_create_room_membership_response(response)
        }
    }
}

/// <p>
/// Moves phone numbers into the
/// <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.
/// </p>
/// <p>
/// Phone numbers remain in the
/// <b>Deletion queue</b> for 7 days before they are deleted permanently.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeletePhoneNumber {
    _private: (),
}
impl BatchDeletePhoneNumber {
    /// Creates a new builder-style object to manufacture [`BatchDeletePhoneNumberInput`](crate::input::BatchDeletePhoneNumberInput)
    pub fn builder() -> crate::input::batch_delete_phone_number_input::Builder {
        crate::input::batch_delete_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDeletePhoneNumber {
    type Output = std::result::Result<
        crate::output::BatchDeletePhoneNumberOutput,
        crate::error::BatchDeletePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_delete_phone_number_error(response)
        } else {
            crate::operation_deser::parse_batch_delete_phone_number_response(response)
        }
    }
}

/// <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime
/// account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration
/// Guide</i>.</p>
/// <p>Users suspended from a <code>Team</code> account are disassociated from the account,but they
/// can continue to use Amazon Chime as free users. To remove the suspension from suspended
/// <code>Team</code> account users, invite them to the <code>Team</code> account again.
/// You can use the <a>InviteUsers</a> action to do so.</p>
/// <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of
/// Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action.</p>
/// <p>
/// To sign out users without suspending them, use the
/// <a>LogoutUser</a>
/// action.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchSuspendUser {
    _private: (),
}
impl BatchSuspendUser {
    /// Creates a new builder-style object to manufacture [`BatchSuspendUserInput`](crate::input::BatchSuspendUserInput)
    pub fn builder() -> crate::input::batch_suspend_user_input::Builder {
        crate::input::batch_suspend_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchSuspendUser {
    type Output = std::result::Result<
        crate::output::BatchSuspendUserOutput,
        crate::error::BatchSuspendUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_suspend_user_error(response)
        } else {
            crate::operation_deser::parse_batch_suspend_user_response(response)
        }
    }
}

/// <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon
/// Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code>
/// accounts can be unsuspended using this action. For more information about different account types, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">
/// Managing Your Amazon Chime Accounts
/// </a> in the account types, in the <i>Amazon Chime Administration Guide</i>.
/// </p>
/// <p>
/// Previously suspended users who are unsuspended using this action are returned to
/// <code>Registered</code>
/// status. Users who are not previously suspended are ignored.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchUnsuspendUser {
    _private: (),
}
impl BatchUnsuspendUser {
    /// Creates a new builder-style object to manufacture [`BatchUnsuspendUserInput`](crate::input::BatchUnsuspendUserInput)
    pub fn builder() -> crate::input::batch_unsuspend_user_input::Builder {
        crate::input::batch_unsuspend_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchUnsuspendUser {
    type Output = std::result::Result<
        crate::output::BatchUnsuspendUserOutput,
        crate::error::BatchUnsuspendUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_unsuspend_user_error(response)
        } else {
            crate::operation_deser::parse_batch_unsuspend_user_response(response)
        }
    }
}

/// <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update the product type or the calling name.</p>
/// <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.</p>
/// <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdatePhoneNumber {
    _private: (),
}
impl BatchUpdatePhoneNumber {
    /// Creates a new builder-style object to manufacture [`BatchUpdatePhoneNumberInput`](crate::input::BatchUpdatePhoneNumberInput)
    pub fn builder() -> crate::input::batch_update_phone_number_input::Builder {
        crate::input::batch_update_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchUpdatePhoneNumber {
    type Output = std::result::Result<
        crate::output::BatchUpdatePhoneNumberOutput,
        crate::error::BatchUpdatePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_update_phone_number_error(response)
        } else {
            crate::operation_deser::parse_batch_update_phone_number_response(response)
        }
    }
}

/// <p>Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdateUser {
    _private: (),
}
impl BatchUpdateUser {
    /// Creates a new builder-style object to manufacture [`BatchUpdateUserInput`](crate::input::BatchUpdateUserInput)
    pub fn builder() -> crate::input::batch_update_user_input::Builder {
        crate::input::batch_update_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchUpdateUser {
    type Output = std::result::Result<
        crate::output::BatchUpdateUserOutput,
        crate::error::BatchUpdateUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_update_user_error(response)
        } else {
            crate::operation_deser::parse_batch_update_user_response(response)
        }
    }
}

/// <p>Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code>
/// account types are currently supported for this action. For more information about different account types, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccount {
    _private: (),
}
impl CreateAccount {
    /// Creates a new builder-style object to manufacture [`CreateAccountInput`](crate::input::CreateAccountInput)
    pub fn builder() -> crate::input::create_account_input::Builder {
        crate::input::create_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAccount {
    type Output =
        std::result::Result<crate::output::CreateAccountOutput, crate::error::CreateAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_account_error(response)
        } else {
            crate::operation_deser::parse_create_account_response(response)
        }
    }
}

/// <p>Creates an Amazon Chime SDK messaging <code>AppInstance</code> under an AWS account. Only SDK messaging customers use this API.
/// <code>CreateAppInstance</code> supports idempotency behavior as described in the AWS API Standard.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppInstance {
    _private: (),
}
impl CreateAppInstance {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceInput`](crate::input::CreateAppInstanceInput)
    pub fn builder() -> crate::input::create_app_instance_input::Builder {
        crate::input::create_app_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAppInstance {
    type Output = std::result::Result<
        crate::output::CreateAppInstanceOutput,
        crate::error::CreateAppInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_app_instance_error(response)
        } else {
            crate::operation_deser::parse_create_app_instance_response(response)
        }
    }
}

/// <p>Promotes an <code>AppInstanceUser</code> to an <code>AppInstanceAdmin</code>. The promoted user can perform the following actions.
/// </p>
/// <ul>
/// <li>
/// <p>
/// <code>ChannelModerator</code> actions across all channels in the <code>AppInstance</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>DeleteChannelMessage</code> actions.</p>
/// </li>
/// </ul>
/// <p>Only an <code>AppInstanceUser</code> can be promoted to an <code>AppInstanceAdmin</code> role.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppInstanceAdmin {
    _private: (),
}
impl CreateAppInstanceAdmin {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceAdminInput`](crate::input::CreateAppInstanceAdminInput)
    pub fn builder() -> crate::input::create_app_instance_admin_input::Builder {
        crate::input::create_app_instance_admin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAppInstanceAdmin {
    type Output = std::result::Result<
        crate::output::CreateAppInstanceAdminOutput,
        crate::error::CreateAppInstanceAdminError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_app_instance_admin_error(response)
        } else {
            crate::operation_deser::parse_create_app_instance_admin_response(response)
        }
    }
}

/// <p>Creates a user under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>appInstanceUserId</code> and
/// <code>Name</code> for that user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAppInstanceUser {
    _private: (),
}
impl CreateAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceUserInput`](crate::input::CreateAppInstanceUserInput)
    pub fn builder() -> crate::input::create_app_instance_user_input::Builder {
        crate::input::create_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAppInstanceUser {
    type Output = std::result::Result<
        crate::output::CreateAppInstanceUserOutput,
        crate::error::CreateAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_app_instance_user_error(response)
        } else {
            crate::operation_deser::parse_create_app_instance_user_response(response)
        }
    }
}

/// <p>
/// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAttendee {
    _private: (),
}
impl CreateAttendee {
    /// Creates a new builder-style object to manufacture [`CreateAttendeeInput`](crate::input::CreateAttendeeInput)
    pub fn builder() -> crate::input::create_attendee_input::Builder {
        crate::input::create_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAttendee {
    type Output =
        std::result::Result<crate::output::CreateAttendeeOutput, crate::error::CreateAttendeeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_attendee_error(response)
        } else {
            crate::operation_deser::parse_create_attendee_response(response)
        }
    }
}

/// <p>Creates a bot for an Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBot {
    _private: (),
}
impl CreateBot {
    /// Creates a new builder-style object to manufacture [`CreateBotInput`](crate::input::CreateBotInput)
    pub fn builder() -> crate::input::create_bot_input::Builder {
        crate::input::create_bot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBot {
    type Output = std::result::Result<crate::output::CreateBotOutput, crate::error::CreateBotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_bot_error(response)
        } else {
            crate::operation_deser::parse_create_bot_response(response)
        }
    }
}

/// <p>Creates a channel to which you can add users and send messages.</p>
/// <p>
/// <b>Restriction</b>: You can't change a channel's privacy.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannel {
    _private: (),
}
impl CreateChannel {
    /// Creates a new builder-style object to manufacture [`CreateChannelInput`](crate::input::CreateChannelInput)
    pub fn builder() -> crate::input::create_channel_input::Builder {
        crate::input::create_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannel {
    type Output =
        std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_error(response)
        } else {
            crate::operation_deser::parse_create_channel_response(response)
        }
    }
}

/// <p>Permanently bans a member from a channel. Moderators can't add banned members to a channel.
/// To undo a ban, you first have to <code>DeleteChannelBan</code>, and then
/// <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or
/// channels.</p>
/// <p>If you ban a user who is already part of a channel, that user is automatically kicked from the channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelBan {
    _private: (),
}
impl CreateChannelBan {
    /// Creates a new builder-style object to manufacture [`CreateChannelBanInput`](crate::input::CreateChannelBanInput)
    pub fn builder() -> crate::input::create_channel_ban_input::Builder {
        crate::input::create_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelBan {
    type Output = std::result::Result<
        crate::output::CreateChannelBanOutput,
        crate::error::CreateChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_create_channel_ban_response(response)
        }
    }
}

/// <p>Adds a user to a channel. The <code>InvitedBy</code> response field is derived from the
/// request header. A channel member can:</p>
/// <ul>
/// <li>
/// <p>List messages</p>
/// </li>
/// <li>
/// <p>Send messages</p>
/// </li>
/// <li>
/// <p>Receive messages</p>
/// </li>
/// <li>
/// <p>Edit their own messages</p>
/// </li>
/// <li>
/// <p>Leave the channel</p>
/// </li>
/// </ul>
/// <p>Privacy settings impact this action as follows:</p>
/// <ul>
/// <li>
/// <p>Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.</p>
/// </li>
/// <li>
/// <p>Private Channels: You must be a member to list or send messages.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelMembership {
    _private: (),
}
impl CreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`CreateChannelMembershipInput`](crate::input::CreateChannelMembershipInput)
    pub fn builder() -> crate::input::create_channel_membership_input::Builder {
        crate::input::create_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelMembership {
    type Output = std::result::Result<
        crate::output::CreateChannelMembershipOutput,
        crate::error::CreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_create_channel_membership_response(response)
        }
    }
}

/// <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p>
/// <ul>
/// <li>
/// <p>Add and remove other members of the channel.</p>
/// </li>
/// <li>
/// <p>Add and remove other moderators of the channel.</p>
/// </li>
/// <li>
/// <p>Add and remove user bans for the channel.</p>
/// </li>
/// <li>
/// <p>Redact messages in the channel.</p>
/// </li>
/// <li>
/// <p>List messages in the channel.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelModerator {
    _private: (),
}
impl CreateChannelModerator {
    /// Creates a new builder-style object to manufacture [`CreateChannelModeratorInput`](crate::input::CreateChannelModeratorInput)
    pub fn builder() -> crate::input::create_channel_moderator_input::Builder {
        crate::input::create_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelModerator {
    type Output = std::result::Result<
        crate::output::CreateChannelModeratorOutput,
        crate::error::CreateChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_create_channel_moderator_response(response)
        }
    }
}

/// <p>
/// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// . For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// .
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMeeting {
    _private: (),
}
impl CreateMeeting {
    /// Creates a new builder-style object to manufacture [`CreateMeetingInput`](crate::input::CreateMeetingInput)
    pub fn builder() -> crate::input::create_meeting_input::Builder {
        crate::input::create_meeting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMeeting {
    type Output =
        std::result::Result<crate::output::CreateMeetingOutput, crate::error::CreateMeetingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_meeting_error(response)
        } else {
            crate::operation_deser::parse_create_meeting_response(response)
        }
    }
}

/// <p>Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public
/// switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.</p>
/// <p>To play welcome audio or implement an interactive voice response (IVR), use the
/// <code>CreateSipMediaApplicationCall</code> action with the corresponding SIP media application ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMeetingDialOut {
    _private: (),
}
impl CreateMeetingDialOut {
    /// Creates a new builder-style object to manufacture [`CreateMeetingDialOutInput`](crate::input::CreateMeetingDialOutInput)
    pub fn builder() -> crate::input::create_meeting_dial_out_input::Builder {
        crate::input::create_meeting_dial_out_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMeetingDialOut {
    type Output = std::result::Result<
        crate::output::CreateMeetingDialOutOutput,
        crate::error::CreateMeetingDialOutError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_meeting_dial_out_error(response)
        } else {
            crate::operation_deser::parse_create_meeting_dial_out_response(response)
        }
    }
}

/// <p>
/// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// . For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// .
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMeetingWithAttendees {
    _private: (),
}
impl CreateMeetingWithAttendees {
    /// Creates a new builder-style object to manufacture [`CreateMeetingWithAttendeesInput`](crate::input::CreateMeetingWithAttendeesInput)
    pub fn builder() -> crate::input::create_meeting_with_attendees_input::Builder {
        crate::input::create_meeting_with_attendees_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMeetingWithAttendees {
    type Output = std::result::Result<
        crate::output::CreateMeetingWithAttendeesOutput,
        crate::error::CreateMeetingWithAttendeesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_meeting_with_attendees_error(response)
        } else {
            crate::operation_deser::parse_create_meeting_with_attendees_response(response)
        }
    }
}

/// <p>Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type.
/// For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePhoneNumberOrder {
    _private: (),
}
impl CreatePhoneNumberOrder {
    /// Creates a new builder-style object to manufacture [`CreatePhoneNumberOrderInput`](crate::input::CreatePhoneNumberOrderInput)
    pub fn builder() -> crate::input::create_phone_number_order_input::Builder {
        crate::input::create_phone_number_order_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePhoneNumberOrder {
    type Output = std::result::Result<
        crate::output::CreatePhoneNumberOrderOutput,
        crate::error::CreatePhoneNumberOrderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_phone_number_order_error(response)
        } else {
            crate::operation_deser::parse_create_phone_number_order_response(response)
        }
    }
}

/// <p>Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProxySession {
    _private: (),
}
impl CreateProxySession {
    /// Creates a new builder-style object to manufacture [`CreateProxySessionInput`](crate::input::CreateProxySessionInput)
    pub fn builder() -> crate::input::create_proxy_session_input::Builder {
        crate::input::create_proxy_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProxySession {
    type Output = std::result::Result<
        crate::output::CreateProxySessionOutput,
        crate::error::CreateProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_create_proxy_session_response(response)
        }
    }
}

/// <p>Creates a chat room for the specified Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRoom {
    _private: (),
}
impl CreateRoom {
    /// Creates a new builder-style object to manufacture [`CreateRoomInput`](crate::input::CreateRoomInput)
    pub fn builder() -> crate::input::create_room_input::Builder {
        crate::input::create_room_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRoom {
    type Output =
        std::result::Result<crate::output::CreateRoomOutput, crate::error::CreateRoomError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_room_error(response)
        } else {
            crate::operation_deser::parse_create_room_response(response)
        }
    }
}

/// <p>Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRoomMembership {
    _private: (),
}
impl CreateRoomMembership {
    /// Creates a new builder-style object to manufacture [`CreateRoomMembershipInput`](crate::input::CreateRoomMembershipInput)
    pub fn builder() -> crate::input::create_room_membership_input::Builder {
        crate::input::create_room_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRoomMembership {
    type Output = std::result::Result<
        crate::output::CreateRoomMembershipOutput,
        crate::error::CreateRoomMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_room_membership_error(response)
        } else {
            crate::operation_deser::parse_create_room_membership_response(response)
        }
    }
}

/// <p>Creates a SIP media application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipMediaApplication {
    _private: (),
}
impl CreateSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationInput`](crate::input::CreateSipMediaApplicationInput)
    pub fn builder() -> crate::input::create_sip_media_application_input::Builder {
        crate::input::create_sip_media_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSipMediaApplication {
    type Output = std::result::Result<
        crate::output::CreateSipMediaApplicationOutput,
        crate::error::CreateSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_create_sip_media_application_response(response)
        }
    }
}

/// <p>Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified
/// <code>sipMediaApplicationId</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipMediaApplicationCall {
    _private: (),
}
impl CreateSipMediaApplicationCall {
    /// Creates a new builder-style object to manufacture [`CreateSipMediaApplicationCallInput`](crate::input::CreateSipMediaApplicationCallInput)
    pub fn builder() -> crate::input::create_sip_media_application_call_input::Builder {
        crate::input::create_sip_media_application_call_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSipMediaApplicationCall {
    type Output = std::result::Result<
        crate::output::CreateSipMediaApplicationCallOutput,
        crate::error::CreateSipMediaApplicationCallError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_media_application_call_error(response)
        } else {
            crate::operation_deser::parse_create_sip_media_application_call_response(response)
        }
    }
}

/// <p>Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSipRule {
    _private: (),
}
impl CreateSipRule {
    /// Creates a new builder-style object to manufacture [`CreateSipRuleInput`](crate::input::CreateSipRuleInput)
    pub fn builder() -> crate::input::create_sip_rule_input::Builder {
        crate::input::create_sip_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSipRule {
    type Output =
        std::result::Result<crate::output::CreateSipRuleOutput, crate::error::CreateSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_create_sip_rule_response(response)
        }
    }
}

/// <p>Creates a user under the specified Amazon Chime account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateUser {
    _private: (),
}
impl CreateUser {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::input::CreateUserInput)
    pub fn builder() -> crate::input::create_user_input::Builder {
        crate::input::create_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateUser {
    type Output =
        std::result::Result<crate::output::CreateUserOutput, crate::error::CreateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_user_error(response)
        } else {
            crate::operation_deser::parse_create_user_response(response)
        }
    }
}

/// <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p>
/// <p>
/// Enabling
/// <a>CreateVoiceConnectorRequest$RequireEncryption</a>
/// configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVoiceConnector {
    _private: (),
}
impl CreateVoiceConnector {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorInput`](crate::input::CreateVoiceConnectorInput)
    pub fn builder() -> crate::input::create_voice_connector_input::Builder {
        crate::input::create_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVoiceConnector {
    type Output = std::result::Result<
        crate::output::CreateVoiceConnectorOutput,
        crate::error::CreateVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_create_voice_connector_response(response)
        }
    }
}

/// <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can
/// associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by
/// including <code>VoiceConnectorItems</code> in the request.</p>
/// <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This
/// creates a fault tolerant mechanism for fallback in case of availability events.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVoiceConnectorGroup {
    _private: (),
}
impl CreateVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`CreateVoiceConnectorGroupInput`](crate::input::CreateVoiceConnectorGroupInput)
    pub fn builder() -> crate::input::create_voice_connector_group_input::Builder {
        crate::input::create_voice_connector_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::CreateVoiceConnectorGroupOutput,
        crate::error::CreateVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_create_voice_connector_group_response(response)
        }
    }
}

/// <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting
/// <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action
/// to dodo.</p>
/// <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the
/// claimed domains for your Amazon Chime account before deletion. As soon as you release
/// the domain, all users under that account are suspended.</p>
/// <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore
/// deleted account from your <code>Disabled</code> accounts list, you must contact AWS
/// Support.</p>
/// <p>After 90 days, deleted accounts are permanently removed from your
/// <code>Disabled</code> accounts list.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAccount {
    _private: (),
}
impl DeleteAccount {
    /// Creates a new builder-style object to manufacture [`DeleteAccountInput`](crate::input::DeleteAccountInput)
    pub fn builder() -> crate::input::delete_account_input::Builder {
        crate::input::delete_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAccount {
    type Output =
        std::result::Result<crate::output::DeleteAccountOutput, crate::error::DeleteAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_account_error(response)
        } else {
            crate::operation_deser::parse_delete_account_response(response)
        }
    }
}

/// <p>Deletes an <code>AppInstance</code> and all associated data asynchronously.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppInstance {
    _private: (),
}
impl DeleteAppInstance {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceInput`](crate::input::DeleteAppInstanceInput)
    pub fn builder() -> crate::input::delete_app_instance_input::Builder {
        crate::input::delete_app_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppInstance {
    type Output = std::result::Result<
        crate::output::DeleteAppInstanceOutput,
        crate::error::DeleteAppInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_app_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_app_instance_response(response)
        }
    }
}

/// <p>Demotes an <code>AppInstanceAdmin</code> to an <code>AppInstanceUser</code>. This action does not delete the user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppInstanceAdmin {
    _private: (),
}
impl DeleteAppInstanceAdmin {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceAdminInput`](crate::input::DeleteAppInstanceAdminInput)
    pub fn builder() -> crate::input::delete_app_instance_admin_input::Builder {
        crate::input::delete_app_instance_admin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppInstanceAdmin {
    type Output = std::result::Result<
        crate::output::DeleteAppInstanceAdminOutput,
        crate::error::DeleteAppInstanceAdminError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_app_instance_admin_error(response)
        } else {
            crate::operation_deser::parse_delete_app_instance_admin_response(response)
        }
    }
}

/// <p>Deletes the streaming configurations of an <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppInstanceStreamingConfigurations {
    _private: (),
}
impl DeleteAppInstanceStreamingConfigurations {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceStreamingConfigurationsInput`](crate::input::DeleteAppInstanceStreamingConfigurationsInput)
    pub fn builder() -> crate::input::delete_app_instance_streaming_configurations_input::Builder {
        crate::input::delete_app_instance_streaming_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppInstanceStreamingConfigurations {
    type Output = std::result::Result<
        crate::output::DeleteAppInstanceStreamingConfigurationsOutput,
        crate::error::DeleteAppInstanceStreamingConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_app_instance_streaming_configurations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_app_instance_streaming_configurations_response(
                response,
            )
        }
    }
}

/// <p>Deletes an <code>AppInstanceUser</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppInstanceUser {
    _private: (),
}
impl DeleteAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DeleteAppInstanceUserInput`](crate::input::DeleteAppInstanceUserInput)
    pub fn builder() -> crate::input::delete_app_instance_user_input::Builder {
        crate::input::delete_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DeleteAppInstanceUserOutput,
        crate::error::DeleteAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_app_instance_user_error(response)
        } else {
            crate::operation_deser::parse_delete_app_instance_user_response(response)
        }
    }
}

/// <p>Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
/// <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the <i>Amazon Chime Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAttendee {
    _private: (),
}
impl DeleteAttendee {
    /// Creates a new builder-style object to manufacture [`DeleteAttendeeInput`](crate::input::DeleteAttendeeInput)
    pub fn builder() -> crate::input::delete_attendee_input::Builder {
        crate::input::delete_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAttendee {
    type Output =
        std::result::Result<crate::output::DeleteAttendeeOutput, crate::error::DeleteAttendeeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_attendee_error(response)
        } else {
            crate::operation_deser::parse_delete_attendee_response(response)
        }
    }
}

/// <p>Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannel {
    _private: (),
}
impl DeleteChannel {
    /// Creates a new builder-style object to manufacture [`DeleteChannelInput`](crate::input::DeleteChannelInput)
    pub fn builder() -> crate::input::delete_channel_input::Builder {
        crate::input::delete_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannel {
    type Output =
        std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_response(response)
        }
    }
}

/// <p>Removes a user from a channel's ban list.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelBan {
    _private: (),
}
impl DeleteChannelBan {
    /// Creates a new builder-style object to manufacture [`DeleteChannelBanInput`](crate::input::DeleteChannelBanInput)
    pub fn builder() -> crate::input::delete_channel_ban_input::Builder {
        crate::input::delete_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelBan {
    type Output = std::result::Result<
        crate::output::DeleteChannelBanOutput,
        crate::error::DeleteChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_ban_response(response)
        }
    }
}

/// <p>Removes a member from a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelMembership {
    _private: (),
}
impl DeleteChannelMembership {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMembershipInput`](crate::input::DeleteChannelMembershipInput)
    pub fn builder() -> crate::input::delete_channel_membership_input::Builder {
        crate::input::delete_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelMembership {
    type Output = std::result::Result<
        crate::output::DeleteChannelMembershipOutput,
        crate::error::DeleteChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_membership_response(response)
        }
    }
}

/// <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages
/// inaccessible immediately. A background process deletes any revisions created by
/// <code>UpdateChannelMessage</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelMessage {
    _private: (),
}
impl DeleteChannelMessage {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMessageInput`](crate::input::DeleteChannelMessageInput)
    pub fn builder() -> crate::input::delete_channel_message_input::Builder {
        crate::input::delete_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelMessage {
    type Output = std::result::Result<
        crate::output::DeleteChannelMessageOutput,
        crate::error::DeleteChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_message_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_message_response(response)
        }
    }
}

/// <p>Deletes a channel moderator.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelModerator {
    _private: (),
}
impl DeleteChannelModerator {
    /// Creates a new builder-style object to manufacture [`DeleteChannelModeratorInput`](crate::input::DeleteChannelModeratorInput)
    pub fn builder() -> crate::input::delete_channel_moderator_input::Builder {
        crate::input::delete_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelModerator {
    type Output = std::result::Result<
        crate::output::DeleteChannelModeratorOutput,
        crate::error::DeleteChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_moderator_response(response)
        }
    }
}

/// <p>Deletes the events configuration that allows a bot to receive outgoing events.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEventsConfiguration {
    _private: (),
}
impl DeleteEventsConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteEventsConfigurationInput`](crate::input::DeleteEventsConfigurationInput)
    pub fn builder() -> crate::input::delete_events_configuration_input::Builder {
        crate::input::delete_events_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEventsConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteEventsConfigurationOutput,
        crate::error::DeleteEventsConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_events_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_events_configuration_response(response)
        }
    }
}

/// <p>Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from
/// joining the meeting. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the
/// <i>Amazon Chime Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMeeting {
    _private: (),
}
impl DeleteMeeting {
    /// Creates a new builder-style object to manufacture [`DeleteMeetingInput`](crate::input::DeleteMeetingInput)
    pub fn builder() -> crate::input::delete_meeting_input::Builder {
        crate::input::delete_meeting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMeeting {
    type Output =
        std::result::Result<crate::output::DeleteMeetingOutput, crate::error::DeleteMeetingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_meeting_error(response)
        } else {
            crate::operation_deser::parse_delete_meeting_response(response)
        }
    }
}

/// <p>Moves the specified phone number into the <b>Deletion queue</b>. A
/// phone number must be disassociated from any users or Amazon Chime Voice Connectors
/// before it can be deleted.</p>
/// <p>Deleted phone numbers remain in the
/// <b>Deletion queue</b>
/// for 7 days before they are deleted permanently.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePhoneNumber {
    _private: (),
}
impl DeletePhoneNumber {
    /// Creates a new builder-style object to manufacture [`DeletePhoneNumberInput`](crate::input::DeletePhoneNumberInput)
    pub fn builder() -> crate::input::delete_phone_number_input::Builder {
        crate::input::delete_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePhoneNumber {
    type Output = std::result::Result<
        crate::output::DeletePhoneNumberOutput,
        crate::error::DeletePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_phone_number_error(response)
        } else {
            crate::operation_deser::parse_delete_phone_number_response(response)
        }
    }
}

/// <p>Deletes the specified proxy session from the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProxySession {
    _private: (),
}
impl DeleteProxySession {
    /// Creates a new builder-style object to manufacture [`DeleteProxySessionInput`](crate::input::DeleteProxySessionInput)
    pub fn builder() -> crate::input::delete_proxy_session_input::Builder {
        crate::input::delete_proxy_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProxySession {
    type Output = std::result::Result<
        crate::output::DeleteProxySessionOutput,
        crate::error::DeleteProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_delete_proxy_session_response(response)
        }
    }
}

/// <p>Deletes a chat room in an Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRoom {
    _private: (),
}
impl DeleteRoom {
    /// Creates a new builder-style object to manufacture [`DeleteRoomInput`](crate::input::DeleteRoomInput)
    pub fn builder() -> crate::input::delete_room_input::Builder {
        crate::input::delete_room_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRoom {
    type Output =
        std::result::Result<crate::output::DeleteRoomOutput, crate::error::DeleteRoomError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_room_error(response)
        } else {
            crate::operation_deser::parse_delete_room_response(response)
        }
    }
}

/// <p>Removes a member from a chat room in an Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRoomMembership {
    _private: (),
}
impl DeleteRoomMembership {
    /// Creates a new builder-style object to manufacture [`DeleteRoomMembershipInput`](crate::input::DeleteRoomMembershipInput)
    pub fn builder() -> crate::input::delete_room_membership_input::Builder {
        crate::input::delete_room_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRoomMembership {
    type Output = std::result::Result<
        crate::output::DeleteRoomMembershipOutput,
        crate::error::DeleteRoomMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_room_membership_error(response)
        } else {
            crate::operation_deser::parse_delete_room_membership_response(response)
        }
    }
}

/// <p>Deletes a SIP media application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSipMediaApplication {
    _private: (),
}
impl DeleteSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`DeleteSipMediaApplicationInput`](crate::input::DeleteSipMediaApplicationInput)
    pub fn builder() -> crate::input::delete_sip_media_application_input::Builder {
        crate::input::delete_sip_media_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSipMediaApplication {
    type Output = std::result::Result<
        crate::output::DeleteSipMediaApplicationOutput,
        crate::error::DeleteSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_delete_sip_media_application_response(response)
        }
    }
}

/// <p>Deletes a SIP rule. You must disable a SIP rule before you can delete it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSipRule {
    _private: (),
}
impl DeleteSipRule {
    /// Creates a new builder-style object to manufacture [`DeleteSipRuleInput`](crate::input::DeleteSipRuleInput)
    pub fn builder() -> crate::input::delete_sip_rule_input::Builder {
        crate::input::delete_sip_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSipRule {
    type Output =
        std::result::Result<crate::output::DeleteSipRuleOutput, crate::error::DeleteSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_delete_sip_rule_response(response)
        }
    }
}

/// <p>Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the
/// Amazon Chime Voice Connector must be disassociated from it before it can be
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnector {
    _private: (),
}
impl DeleteVoiceConnector {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorInput`](crate::input::DeleteVoiceConnectorInput)
    pub fn builder() -> crate::input::delete_voice_connector_input::Builder {
        crate::input::delete_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnector {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorOutput,
        crate::error::DeleteVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_response(response)
        }
    }
}

/// <p>Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl DeleteVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::DeleteVoiceConnectorEmergencyCallingConfigurationInput)
    pub fn builder(
    ) -> crate::input::delete_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::delete_voice_connector_emergency_calling_configuration_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DeleteVoiceConnectorEmergencyCallingConfiguration
{
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::DeleteVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_emergency_calling_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// <p>Deletes the specified Amazon Chime Voice Connector group. Any
/// <code>VoiceConnectorItems</code>
/// and phone numbers associated with the group must be removed before it can be deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorGroup {
    _private: (),
}
impl DeleteVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorGroupInput`](crate::input::DeleteVoiceConnectorGroupInput)
    pub fn builder() -> crate::input::delete_voice_connector_group_input::Builder {
        crate::input::delete_voice_connector_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorGroupOutput,
        crate::error::DeleteVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_group_response(response)
        }
    }
}

/// <p>Deletes the origination settings for the specified Amazon Chime Voice Connector.</p>
/// <note>
/// <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorOrigination {
    _private: (),
}
impl DeleteVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorOriginationInput`](crate::input::DeleteVoiceConnectorOriginationInput)
    pub fn builder() -> crate::input::delete_voice_connector_origination_input::Builder {
        crate::input::delete_voice_connector_origination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorOriginationOutput,
        crate::error::DeleteVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_origination_response(response)
        }
    }
}

/// <p>Deletes the proxy configuration from the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorProxy {
    _private: (),
}
impl DeleteVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorProxyInput`](crate::input::DeleteVoiceConnectorProxyInput)
    pub fn builder() -> crate::input::delete_voice_connector_proxy_input::Builder {
        crate::input::delete_voice_connector_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorProxyOutput,
        crate::error::DeleteVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_proxy_response(response)
        }
    }
}

/// <p>Deletes the streaming configuration for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl DeleteVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorStreamingConfigurationInput`](crate::input::DeleteVoiceConnectorStreamingConfigurationInput)
    pub fn builder() -> crate::input::delete_voice_connector_streaming_configuration_input::Builder
    {
        crate::input::delete_voice_connector_streaming_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorStreamingConfigurationOutput,
        crate::error::DeleteVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// <p>Deletes the termination settings for the specified Amazon Chime Voice Connector.</p>
/// <note>
/// <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTermination {
    _private: (),
}
impl DeleteVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationInput`](crate::input::DeleteVoiceConnectorTerminationInput)
    pub fn builder() -> crate::input::delete_voice_connector_termination_input::Builder {
        crate::input::delete_voice_connector_termination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationOutput,
        crate::error::DeleteVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_delete_voice_connector_termination_response(response)
        }
    }
}

/// <p>Deletes the specified SIP credentials used by your equipment to authenticate during call termination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVoiceConnectorTerminationCredentials {
    _private: (),
}
impl DeleteVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceConnectorTerminationCredentialsInput`](crate::input::DeleteVoiceConnectorTerminationCredentialsInput)
    pub fn builder() -> crate::input::delete_voice_connector_termination_credentials_input::Builder
    {
        crate::input::delete_voice_connector_termination_credentials_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::DeleteVoiceConnectorTerminationCredentialsOutput,
        crate::error::DeleteVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// <p>Returns the full details of an <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAppInstance {
    _private: (),
}
impl DescribeAppInstance {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceInput`](crate::input::DescribeAppInstanceInput)
    pub fn builder() -> crate::input::describe_app_instance_input::Builder {
        crate::input::describe_app_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAppInstance {
    type Output = std::result::Result<
        crate::output::DescribeAppInstanceOutput,
        crate::error::DescribeAppInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_app_instance_error(response)
        } else {
            crate::operation_deser::parse_describe_app_instance_response(response)
        }
    }
}

/// <p>Returns the full details of an <code>AppInstanceAdmin</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAppInstanceAdmin {
    _private: (),
}
impl DescribeAppInstanceAdmin {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceAdminInput`](crate::input::DescribeAppInstanceAdminInput)
    pub fn builder() -> crate::input::describe_app_instance_admin_input::Builder {
        crate::input::describe_app_instance_admin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAppInstanceAdmin {
    type Output = std::result::Result<
        crate::output::DescribeAppInstanceAdminOutput,
        crate::error::DescribeAppInstanceAdminError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_app_instance_admin_error(response)
        } else {
            crate::operation_deser::parse_describe_app_instance_admin_response(response)
        }
    }
}

/// <p>
/// Returns the full details of an
/// <code>AppInstanceUser</code>
/// .
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAppInstanceUser {
    _private: (),
}
impl DescribeAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeAppInstanceUserInput`](crate::input::DescribeAppInstanceUserInput)
    pub fn builder() -> crate::input::describe_app_instance_user_input::Builder {
        crate::input::describe_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeAppInstanceUserOutput,
        crate::error::DescribeAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_app_instance_user_error(response)
        } else {
            crate::operation_deser::parse_describe_app_instance_user_response(response)
        }
    }
}

/// <p>Returns the full details of a channel in an Amazon Chime <code>AppInstance</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannel {
    _private: (),
}
impl DescribeChannel {
    /// Creates a new builder-style object to manufacture [`DescribeChannelInput`](crate::input::DescribeChannelInput)
    pub fn builder() -> crate::input::describe_channel_input::Builder {
        crate::input::describe_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannel {
    type Output = std::result::Result<
        crate::output::DescribeChannelOutput,
        crate::error::DescribeChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_response(response)
        }
    }
}

/// <p>Returns the full details of a channel ban.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelBan {
    _private: (),
}
impl DescribeChannelBan {
    /// Creates a new builder-style object to manufacture [`DescribeChannelBanInput`](crate::input::DescribeChannelBanInput)
    pub fn builder() -> crate::input::describe_channel_ban_input::Builder {
        crate::input::describe_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelBan {
    type Output = std::result::Result<
        crate::output::DescribeChannelBanOutput,
        crate::error::DescribeChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_ban_response(response)
        }
    }
}

/// <p>Returns the full details of a user's channel membership.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelMembership {
    _private: (),
}
impl DescribeChannelMembership {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipInput`](crate::input::DescribeChannelMembershipInput)
    pub fn builder() -> crate::input::describe_channel_membership_input::Builder {
        crate::input::describe_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelMembership {
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipOutput,
        crate::error::DescribeChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_membership_response(response)
        }
    }
}

/// <p>
/// Returns the details of a channel based on the membership of the specified <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelMembershipForAppInstanceUser {
    _private: (),
}
impl DescribeChannelMembershipForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipForAppInstanceUserInput`](crate::input::DescribeChannelMembershipForAppInstanceUserInput)
    pub fn builder(
    ) -> crate::input::describe_channel_membership_for_app_instance_user_input::Builder {
        crate::input::describe_channel_membership_for_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelMembershipForAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipForAppInstanceUserOutput,
        crate::error::DescribeChannelMembershipForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_membership_for_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_channel_membership_for_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>Returns the full details of a channel moderated by the specified <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelModeratedByAppInstanceUser {
    _private: (),
}
impl DescribeChannelModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratedByAppInstanceUserInput`](crate::input::DescribeChannelModeratedByAppInstanceUserInput)
    pub fn builder() -> crate::input::describe_channel_moderated_by_app_instance_user_input::Builder
    {
        crate::input::describe_channel_moderated_by_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratedByAppInstanceUserOutput,
        crate::error::DescribeChannelModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_moderated_by_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_channel_moderated_by_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>Returns the full details of a single ChannelModerator.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelModerator {
    _private: (),
}
impl DescribeChannelModerator {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratorInput`](crate::input::DescribeChannelModeratorInput)
    pub fn builder() -> crate::input::describe_channel_moderator_input::Builder {
        crate::input::describe_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelModerator {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratorOutput,
        crate::error::DescribeChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_moderator_response(response)
        }
    }
}

/// <p>Disassociates the primary provisioned phone number from the specified Amazon Chime user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePhoneNumberFromUser {
    _private: (),
}
impl DisassociatePhoneNumberFromUser {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumberFromUserInput`](crate::input::DisassociatePhoneNumberFromUserInput)
    pub fn builder() -> crate::input::disassociate_phone_number_from_user_input::Builder {
        crate::input::disassociate_phone_number_from_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociatePhoneNumberFromUser {
    type Output = std::result::Result<
        crate::output::DisassociatePhoneNumberFromUserOutput,
        crate::error::DisassociatePhoneNumberFromUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_phone_number_from_user_error(response)
        } else {
            crate::operation_deser::parse_disassociate_phone_number_from_user_response(response)
        }
    }
}

/// <p>Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnector {
    _private: (),
}
impl DisassociatePhoneNumbersFromVoiceConnector {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorInput`](crate::input::DisassociatePhoneNumbersFromVoiceConnectorInput)
    pub fn builder() -> crate::input::disassociate_phone_numbers_from_voice_connector_input::Builder
    {
        crate::input::disassociate_phone_numbers_from_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociatePhoneNumbersFromVoiceConnector {
    type Output = std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorOutput,
        crate::error::DisassociatePhoneNumbersFromVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_response(
                response,
            )
        }
    }
}

/// <p>Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePhoneNumbersFromVoiceConnectorGroup {
    _private: (),
}
impl DisassociatePhoneNumbersFromVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`DisassociatePhoneNumbersFromVoiceConnectorGroupInput`](crate::input::DisassociatePhoneNumbersFromVoiceConnectorGroupInput)
    pub fn builder(
    ) -> crate::input::disassociate_phone_numbers_from_voice_connector_group_input::Builder {
        crate::input::disassociate_phone_numbers_from_voice_connector_group_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DisassociatePhoneNumbersFromVoiceConnectorGroup
{
    type Output = std::result::Result<
        crate::output::DisassociatePhoneNumbersFromVoiceConnectorGroupOutput,
        crate::error::DisassociatePhoneNumbersFromVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_disassociate_phone_numbers_from_voice_connector_group_response(response)
        }
    }
}

/// <p>Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateSigninDelegateGroupsFromAccount {
    _private: (),
}
impl DisassociateSigninDelegateGroupsFromAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateSigninDelegateGroupsFromAccountInput`](crate::input::DisassociateSigninDelegateGroupsFromAccountInput)
    pub fn builder() -> crate::input::disassociate_signin_delegate_groups_from_account_input::Builder
    {
        crate::input::disassociate_signin_delegate_groups_from_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateSigninDelegateGroupsFromAccount {
    type Output = std::result::Result<
        crate::output::DisassociateSigninDelegateGroupsFromAccountOutput,
        crate::error::DisassociateSigninDelegateGroupsFromAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_signin_delegate_groups_from_account_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_signin_delegate_groups_from_account_response(
                response,
            )
        }
    }
}

/// <p>Retrieves details for the specified Amazon Chime account, such as account type and supported
/// licenses.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccount {
    _private: (),
}
impl GetAccount {
    /// Creates a new builder-style object to manufacture [`GetAccountInput`](crate::input::GetAccountInput)
    pub fn builder() -> crate::input::get_account_input::Builder {
        crate::input::get_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccount {
    type Output =
        std::result::Result<crate::output::GetAccountOutput, crate::error::GetAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_error(response)
        } else {
            crate::operation_deser::parse_get_account_response(response)
        }
    }
}

/// <p>Retrieves account settings for the specified Amazon Chime account ID, such as remote control
/// and dialout settings. For more information about these settings, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccountSettings {
    _private: (),
}
impl GetAccountSettings {
    /// Creates a new builder-style object to manufacture [`GetAccountSettingsInput`](crate::input::GetAccountSettingsInput)
    pub fn builder() -> crate::input::get_account_settings_input::Builder {
        crate::input::get_account_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccountSettings {
    type Output = std::result::Result<
        crate::output::GetAccountSettingsOutput,
        crate::error::GetAccountSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_settings_error(response)
        } else {
            crate::operation_deser::parse_get_account_settings_response(response)
        }
    }
}

/// <p>Gets the retention settings for an <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppInstanceRetentionSettings {
    _private: (),
}
impl GetAppInstanceRetentionSettings {
    /// Creates a new builder-style object to manufacture [`GetAppInstanceRetentionSettingsInput`](crate::input::GetAppInstanceRetentionSettingsInput)
    pub fn builder() -> crate::input::get_app_instance_retention_settings_input::Builder {
        crate::input::get_app_instance_retention_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppInstanceRetentionSettings {
    type Output = std::result::Result<
        crate::output::GetAppInstanceRetentionSettingsOutput,
        crate::error::GetAppInstanceRetentionSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_instance_retention_settings_error(response)
        } else {
            crate::operation_deser::parse_get_app_instance_retention_settings_response(response)
        }
    }
}

/// <p>Gets the streaming settings for an <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppInstanceStreamingConfigurations {
    _private: (),
}
impl GetAppInstanceStreamingConfigurations {
    /// Creates a new builder-style object to manufacture [`GetAppInstanceStreamingConfigurationsInput`](crate::input::GetAppInstanceStreamingConfigurationsInput)
    pub fn builder() -> crate::input::get_app_instance_streaming_configurations_input::Builder {
        crate::input::get_app_instance_streaming_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppInstanceStreamingConfigurations {
    type Output = std::result::Result<
        crate::output::GetAppInstanceStreamingConfigurationsOutput,
        crate::error::GetAppInstanceStreamingConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_instance_streaming_configurations_error(response)
        } else {
            crate::operation_deser::parse_get_app_instance_streaming_configurations_response(
                response,
            )
        }
    }
}

/// <p>
/// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// .
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAttendee {
    _private: (),
}
impl GetAttendee {
    /// Creates a new builder-style object to manufacture [`GetAttendeeInput`](crate::input::GetAttendeeInput)
    pub fn builder() -> crate::input::get_attendee_input::Builder {
        crate::input::get_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAttendee {
    type Output =
        std::result::Result<crate::output::GetAttendeeOutput, crate::error::GetAttendeeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_attendee_error(response)
        } else {
            crate::operation_deser::parse_get_attendee_response(response)
        }
    }
}

/// <p>Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBot {
    _private: (),
}
impl GetBot {
    /// Creates a new builder-style object to manufacture [`GetBotInput`](crate::input::GetBotInput)
    pub fn builder() -> crate::input::get_bot_input::Builder {
        crate::input::get_bot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBot {
    type Output = std::result::Result<crate::output::GetBotOutput, crate::error::GetBotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_bot_error(response)
        } else {
            crate::operation_deser::parse_get_bot_response(response)
        }
    }
}

/// <p>Gets the full details of a channel message.</p>
/// <note>
/// <p>The x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the
/// value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetChannelMessage {
    _private: (),
}
impl GetChannelMessage {
    /// Creates a new builder-style object to manufacture [`GetChannelMessageInput`](crate::input::GetChannelMessageInput)
    pub fn builder() -> crate::input::get_channel_message_input::Builder {
        crate::input::get_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetChannelMessage {
    type Output = std::result::Result<
        crate::output::GetChannelMessageOutput,
        crate::error::GetChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_channel_message_error(response)
        } else {
            crate::operation_deser::parse_get_channel_message_response(response)
        }
    }
}

/// <p>Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEventsConfiguration {
    _private: (),
}
impl GetEventsConfiguration {
    /// Creates a new builder-style object to manufacture [`GetEventsConfigurationInput`](crate::input::GetEventsConfigurationInput)
    pub fn builder() -> crate::input::get_events_configuration_input::Builder {
        crate::input::get_events_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEventsConfiguration {
    type Output = std::result::Result<
        crate::output::GetEventsConfigurationOutput,
        crate::error::GetEventsConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_events_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_events_configuration_response(response)
        }
    }
}

/// <p>Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business
/// Calling and Amazon Chime Voice Connector settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGlobalSettings {
    _private: (),
}
impl GetGlobalSettings {
    /// Creates a new builder-style object to manufacture [`GetGlobalSettingsInput`](crate::input::GetGlobalSettingsInput)
    pub fn builder() -> crate::input::get_global_settings_input::Builder {
        crate::input::get_global_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGlobalSettings {
    type Output = std::result::Result<
        crate::output::GetGlobalSettingsOutput,
        crate::error::GetGlobalSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_global_settings_error(response)
        } else {
            crate::operation_deser::parse_get_global_settings_response(response)
        }
    }
}

/// <p>
/// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the
/// <i>Amazon Chime Developer Guide</i>
/// .
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMeeting {
    _private: (),
}
impl GetMeeting {
    /// Creates a new builder-style object to manufacture [`GetMeetingInput`](crate::input::GetMeetingInput)
    pub fn builder() -> crate::input::get_meeting_input::Builder {
        crate::input::get_meeting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMeeting {
    type Output =
        std::result::Result<crate::output::GetMeetingOutput, crate::error::GetMeetingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_meeting_error(response)
        } else {
            crate::operation_deser::parse_get_meeting_response(response)
        }
    }
}

/// <p>The details of the endpoint for the messaging session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMessagingSessionEndpoint {
    _private: (),
}
impl GetMessagingSessionEndpoint {
    /// Creates a new builder-style object to manufacture [`GetMessagingSessionEndpointInput`](crate::input::GetMessagingSessionEndpointInput)
    pub fn builder() -> crate::input::get_messaging_session_endpoint_input::Builder {
        crate::input::get_messaging_session_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMessagingSessionEndpoint {
    type Output = std::result::Result<
        crate::output::GetMessagingSessionEndpointOutput,
        crate::error::GetMessagingSessionEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_messaging_session_endpoint_error(response)
        } else {
            crate::operation_deser::parse_get_messaging_session_endpoint_response(response)
        }
    }
}

/// <p>Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumber {
    _private: (),
}
impl GetPhoneNumber {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberInput`](crate::input::GetPhoneNumberInput)
    pub fn builder() -> crate::input::get_phone_number_input::Builder {
        crate::input::get_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPhoneNumber {
    type Output =
        std::result::Result<crate::output::GetPhoneNumberOutput, crate::error::GetPhoneNumberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_response(response)
        }
    }
}

/// <p>Retrieves details for the specified phone number order, such as the order creation timestamp, phone
/// numbers in E.164 format, product type, and order status.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumberOrder {
    _private: (),
}
impl GetPhoneNumberOrder {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberOrderInput`](crate::input::GetPhoneNumberOrderInput)
    pub fn builder() -> crate::input::get_phone_number_order_input::Builder {
        crate::input::get_phone_number_order_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPhoneNumberOrder {
    type Output = std::result::Result<
        crate::output::GetPhoneNumberOrderOutput,
        crate::error::GetPhoneNumberOrderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_order_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_order_response(response)
        }
    }
}

/// <p>Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPhoneNumberSettings {
    _private: (),
}
impl GetPhoneNumberSettings {
    /// Creates a new builder-style object to manufacture [`GetPhoneNumberSettingsInput`](crate::input::GetPhoneNumberSettingsInput)
    pub fn builder() -> crate::input::get_phone_number_settings_input::Builder {
        crate::input::get_phone_number_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPhoneNumberSettings {
    type Output = std::result::Result<
        crate::output::GetPhoneNumberSettingsOutput,
        crate::error::GetPhoneNumberSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_phone_number_settings_error(response)
        } else {
            crate::operation_deser::parse_get_phone_number_settings_response(response)
        }
    }
}

/// <p>Gets the specified proxy session details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetProxySession {
    _private: (),
}
impl GetProxySession {
    /// Creates a new builder-style object to manufacture [`GetProxySessionInput`](crate::input::GetProxySessionInput)
    pub fn builder() -> crate::input::get_proxy_session_input::Builder {
        crate::input::get_proxy_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetProxySession {
    type Output = std::result::Result<
        crate::output::GetProxySessionOutput,
        crate::error::GetProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_get_proxy_session_response(response)
        }
    }
}

/// <p>
/// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a> in the <i>Amazon Chime Administration Guide</i>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRetentionSettings {
    _private: (),
}
impl GetRetentionSettings {
    /// Creates a new builder-style object to manufacture [`GetRetentionSettingsInput`](crate::input::GetRetentionSettingsInput)
    pub fn builder() -> crate::input::get_retention_settings_input::Builder {
        crate::input::get_retention_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRetentionSettings {
    type Output = std::result::Result<
        crate::output::GetRetentionSettingsOutput,
        crate::error::GetRetentionSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_retention_settings_error(response)
        } else {
            crate::operation_deser::parse_get_retention_settings_response(response)
        }
    }
}

/// <p>Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRoom {
    _private: (),
}
impl GetRoom {
    /// Creates a new builder-style object to manufacture [`GetRoomInput`](crate::input::GetRoomInput)
    pub fn builder() -> crate::input::get_room_input::Builder {
        crate::input::get_room_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRoom {
    type Output = std::result::Result<crate::output::GetRoomOutput, crate::error::GetRoomError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_room_error(response)
        } else {
            crate::operation_deser::parse_get_room_response(response)
        }
    }
}

/// <p>Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSipMediaApplication {
    _private: (),
}
impl GetSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationInput`](crate::input::GetSipMediaApplicationInput)
    pub fn builder() -> crate::input::get_sip_media_application_input::Builder {
        crate::input::get_sip_media_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSipMediaApplication {
    type Output = std::result::Result<
        crate::output::GetSipMediaApplicationOutput,
        crate::error::GetSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_get_sip_media_application_response(response)
        }
    }
}

/// <p>Returns the logging configuration for the specified SIP media application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSipMediaApplicationLoggingConfiguration {
    _private: (),
}
impl GetSipMediaApplicationLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetSipMediaApplicationLoggingConfigurationInput`](crate::input::GetSipMediaApplicationLoggingConfigurationInput)
    pub fn builder() -> crate::input::get_sip_media_application_logging_configuration_input::Builder
    {
        crate::input::get_sip_media_application_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSipMediaApplicationLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::GetSipMediaApplicationLoggingConfigurationOutput,
        crate::error::GetSipMediaApplicationLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_media_application_logging_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_sip_media_application_logging_configuration_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSipRule {
    _private: (),
}
impl GetSipRule {
    /// Creates a new builder-style object to manufacture [`GetSipRuleInput`](crate::input::GetSipRuleInput)
    pub fn builder() -> crate::input::get_sip_rule_input::Builder {
        crate::input::get_sip_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSipRule {
    type Output =
        std::result::Result<crate::output::GetSipRuleOutput, crate::error::GetSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_get_sip_rule_response(response)
        }
    }
}

/// <p>Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.</p>
/// <p>
/// To retrieve user details with an email address instead of a user ID, use the
/// <a>ListUsers</a> action, and then filter by email address.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetUser {
    _private: (),
}
impl GetUser {
    /// Creates a new builder-style object to manufacture [`GetUserInput`](crate::input::GetUserInput)
    pub fn builder() -> crate::input::get_user_input::Builder {
        crate::input::get_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetUser {
    type Output = std::result::Result<crate::output::GetUserOutput, crate::error::GetUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_user_error(response)
        } else {
            crate::operation_deser::parse_get_user_response(response)
        }
    }
}

/// <p>Retrieves settings for the specified user ID, such as any associated phone number settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetUserSettings {
    _private: (),
}
impl GetUserSettings {
    /// Creates a new builder-style object to manufacture [`GetUserSettingsInput`](crate::input::GetUserSettingsInput)
    pub fn builder() -> crate::input::get_user_settings_input::Builder {
        crate::input::get_user_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetUserSettings {
    type Output = std::result::Result<
        crate::output::GetUserSettingsOutput,
        crate::error::GetUserSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_user_settings_error(response)
        } else {
            crate::operation_deser::parse_get_user_settings_response(response)
        }
    }
}

/// <p>Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnector {
    _private: (),
}
impl GetVoiceConnector {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorInput`](crate::input::GetVoiceConnectorInput)
    pub fn builder() -> crate::input::get_voice_connector_input::Builder {
        crate::input::get_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnector {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorOutput,
        crate::error::GetVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_response(response)
        }
    }
}

/// <p>Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl GetVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::GetVoiceConnectorEmergencyCallingConfigurationInput)
    pub fn builder(
    ) -> crate::input::get_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::get_voice_connector_emergency_calling_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorEmergencyCallingConfiguration {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::GetVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_emergency_calling_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// <p>
/// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated <code>VoiceConnectorItems</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorGroup {
    _private: (),
}
impl GetVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorGroupInput`](crate::input::GetVoiceConnectorGroupInput)
    pub fn builder() -> crate::input::get_voice_connector_group_input::Builder {
        crate::input::get_voice_connector_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorGroupOutput,
        crate::error::GetVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_group_response(response)
        }
    }
}

/// <p>Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorLoggingConfiguration {
    _private: (),
}
impl GetVoiceConnectorLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorLoggingConfigurationInput`](crate::input::GetVoiceConnectorLoggingConfigurationInput)
    pub fn builder() -> crate::input::get_voice_connector_logging_configuration_input::Builder {
        crate::input::get_voice_connector_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorLoggingConfigurationOutput,
        crate::error::GetVoiceConnectorLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_logging_configuration_response(
                response,
            )
        }
    }
}

/// <p>Retrieves origination setting details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorOrigination {
    _private: (),
}
impl GetVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorOriginationInput`](crate::input::GetVoiceConnectorOriginationInput)
    pub fn builder() -> crate::input::get_voice_connector_origination_input::Builder {
        crate::input::get_voice_connector_origination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorOriginationOutput,
        crate::error::GetVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_origination_response(response)
        }
    }
}

/// <p>Gets the proxy configuration details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorProxy {
    _private: (),
}
impl GetVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorProxyInput`](crate::input::GetVoiceConnectorProxyInput)
    pub fn builder() -> crate::input::get_voice_connector_proxy_input::Builder {
        crate::input::get_voice_connector_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorProxyOutput,
        crate::error::GetVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_proxy_response(response)
        }
    }
}

/// <p>Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector.
/// Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows
/// the retention period, in hours, for the Amazon Kinesis data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl GetVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorStreamingConfigurationInput`](crate::input::GetVoiceConnectorStreamingConfigurationInput)
    pub fn builder() -> crate::input::get_voice_connector_streaming_configuration_input::Builder {
        crate::input::get_voice_connector_streaming_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorStreamingConfigurationOutput,
        crate::error::GetVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// <p>Retrieves termination setting details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorTermination {
    _private: (),
}
impl GetVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationInput`](crate::input::GetVoiceConnectorTerminationInput)
    pub fn builder() -> crate::input::get_voice_connector_termination_input::Builder {
        crate::input::get_voice_connector_termination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorTerminationOutput,
        crate::error::GetVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_termination_response(response)
        }
    }
}

/// <p>Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from
/// your SIP infrastructure for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetVoiceConnectorTerminationHealth {
    _private: (),
}
impl GetVoiceConnectorTerminationHealth {
    /// Creates a new builder-style object to manufacture [`GetVoiceConnectorTerminationHealthInput`](crate::input::GetVoiceConnectorTerminationHealthInput)
    pub fn builder() -> crate::input::get_voice_connector_termination_health_input::Builder {
        crate::input::get_voice_connector_termination_health_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetVoiceConnectorTerminationHealth {
    type Output = std::result::Result<
        crate::output::GetVoiceConnectorTerminationHealthOutput,
        crate::error::GetVoiceConnectorTerminationHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_voice_connector_termination_health_error(response)
        } else {
            crate::operation_deser::parse_get_voice_connector_termination_health_response(response)
        }
    }
}

/// <p>Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime
/// <code>Team</code> account. Only <code>Team</code> account types are currently
/// supported for this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct InviteUsers {
    _private: (),
}
impl InviteUsers {
    /// Creates a new builder-style object to manufacture [`InviteUsersInput`](crate::input::InviteUsersInput)
    pub fn builder() -> crate::input::invite_users_input::Builder {
        crate::input::invite_users_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for InviteUsers {
    type Output =
        std::result::Result<crate::output::InviteUsersOutput, crate::error::InviteUsersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_invite_users_error(response)
        } else {
            crate::operation_deser::parse_invite_users_response(response)
        }
    }
}

/// <p>Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts
/// by account name prefix. To find out which Amazon Chime account a user belongs to, you can
/// filter by the user's email address, which returns one account result.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccounts {
    _private: (),
}
impl ListAccounts {
    /// Creates a new builder-style object to manufacture [`ListAccountsInput`](crate::input::ListAccountsInput)
    pub fn builder() -> crate::input::list_accounts_input::Builder {
        crate::input::list_accounts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccounts {
    type Output =
        std::result::Result<crate::output::ListAccountsOutput, crate::error::ListAccountsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accounts_error(response)
        } else {
            crate::operation_deser::parse_list_accounts_response(response)
        }
    }
}

/// <p>Returns a list of the administrators in the <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAppInstanceAdmins {
    _private: (),
}
impl ListAppInstanceAdmins {
    /// Creates a new builder-style object to manufacture [`ListAppInstanceAdminsInput`](crate::input::ListAppInstanceAdminsInput)
    pub fn builder() -> crate::input::list_app_instance_admins_input::Builder {
        crate::input::list_app_instance_admins_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAppInstanceAdmins {
    type Output = std::result::Result<
        crate::output::ListAppInstanceAdminsOutput,
        crate::error::ListAppInstanceAdminsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_app_instance_admins_error(response)
        } else {
            crate::operation_deser::parse_list_app_instance_admins_response(response)
        }
    }
}

/// <p>Lists all Amazon Chime <code>AppInstance</code>s created under a single AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAppInstances {
    _private: (),
}
impl ListAppInstances {
    /// Creates a new builder-style object to manufacture [`ListAppInstancesInput`](crate::input::ListAppInstancesInput)
    pub fn builder() -> crate::input::list_app_instances_input::Builder {
        crate::input::list_app_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAppInstances {
    type Output = std::result::Result<
        crate::output::ListAppInstancesOutput,
        crate::error::ListAppInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_app_instances_error(response)
        } else {
            crate::operation_deser::parse_list_app_instances_response(response)
        }
    }
}

/// <p>
/// List all
/// <code>AppInstanceUsers</code>
/// created under a single <code>AppInstance</code>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAppInstanceUsers {
    _private: (),
}
impl ListAppInstanceUsers {
    /// Creates a new builder-style object to manufacture [`ListAppInstanceUsersInput`](crate::input::ListAppInstanceUsersInput)
    pub fn builder() -> crate::input::list_app_instance_users_input::Builder {
        crate::input::list_app_instance_users_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAppInstanceUsers {
    type Output = std::result::Result<
        crate::output::ListAppInstanceUsersOutput,
        crate::error::ListAppInstanceUsersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_app_instance_users_error(response)
        } else {
            crate::operation_deser::parse_list_app_instance_users_response(response)
        }
    }
}

/// <p>
/// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the <i>Amazon Chime Developer Guide</i>.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAttendees {
    _private: (),
}
impl ListAttendees {
    /// Creates a new builder-style object to manufacture [`ListAttendeesInput`](crate::input::ListAttendeesInput)
    pub fn builder() -> crate::input::list_attendees_input::Builder {
        crate::input::list_attendees_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAttendees {
    type Output =
        std::result::Result<crate::output::ListAttendeesOutput, crate::error::ListAttendeesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_attendees_error(response)
        } else {
            crate::operation_deser::parse_list_attendees_response(response)
        }
    }
}

/// <p>Lists the tags applied to an Amazon Chime SDK attendee resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAttendeeTags {
    _private: (),
}
impl ListAttendeeTags {
    /// Creates a new builder-style object to manufacture [`ListAttendeeTagsInput`](crate::input::ListAttendeeTagsInput)
    pub fn builder() -> crate::input::list_attendee_tags_input::Builder {
        crate::input::list_attendee_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAttendeeTags {
    type Output = std::result::Result<
        crate::output::ListAttendeeTagsOutput,
        crate::error::ListAttendeeTagsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_attendee_tags_error(response)
        } else {
            crate::operation_deser::parse_list_attendee_tags_response(response)
        }
    }
}

/// <p>Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBots {
    _private: (),
}
impl ListBots {
    /// Creates a new builder-style object to manufacture [`ListBotsInput`](crate::input::ListBotsInput)
    pub fn builder() -> crate::input::list_bots_input::Builder {
        crate::input::list_bots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListBots {
    type Output = std::result::Result<crate::output::ListBotsOutput, crate::error::ListBotsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_bots_error(response)
        } else {
            crate::operation_deser::parse_list_bots_response(response)
        }
    }
}

/// <p>Lists all the users banned from a particular channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelBans {
    _private: (),
}
impl ListChannelBans {
    /// Creates a new builder-style object to manufacture [`ListChannelBansInput`](crate::input::ListChannelBansInput)
    pub fn builder() -> crate::input::list_channel_bans_input::Builder {
        crate::input::list_channel_bans_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelBans {
    type Output = std::result::Result<
        crate::output::ListChannelBansOutput,
        crate::error::ListChannelBansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_bans_error(response)
        } else {
            crate::operation_deser::parse_list_channel_bans_response(response)
        }
    }
}

/// <p>Lists all channel memberships in a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMemberships {
    _private: (),
}
impl ListChannelMemberships {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsInput`](crate::input::ListChannelMembershipsInput)
    pub fn builder() -> crate::input::list_channel_memberships_input::Builder {
        crate::input::list_channel_memberships_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMemberships {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsOutput,
        crate::error::ListChannelMembershipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_memberships_error(response)
        } else {
            crate::operation_deser::parse_list_channel_memberships_response(response)
        }
    }
}

/// <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an
/// <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their
/// own. </p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMembershipsForAppInstanceUser {
    _private: (),
}
impl ListChannelMembershipsForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsForAppInstanceUserInput`](crate::input::ListChannelMembershipsForAppInstanceUserInput)
    pub fn builder() -> crate::input::list_channel_memberships_for_app_instance_user_input::Builder
    {
        crate::input::list_channel_memberships_for_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMembershipsForAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsForAppInstanceUserOutput,
        crate::error::ListChannelMembershipsForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_memberships_for_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_channel_memberships_for_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>List all the messages in a channel. Returns a paginated list of <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending order.</p>
/// <note>
/// <p>Redacted messages appear in the results as empty, since they are only redacted, not deleted.
/// Deleted messages do not appear in the results. This action always returns the latest
/// version of an edited message.</p>
/// <p>Also, the x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the
/// value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMessages {
    _private: (),
}
impl ListChannelMessages {
    /// Creates a new builder-style object to manufacture [`ListChannelMessagesInput`](crate::input::ListChannelMessagesInput)
    pub fn builder() -> crate::input::list_channel_messages_input::Builder {
        crate::input::list_channel_messages_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMessages {
    type Output = std::result::Result<
        crate::output::ListChannelMessagesOutput,
        crate::error::ListChannelMessagesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_messages_error(response)
        } else {
            crate::operation_deser::parse_list_channel_messages_response(response)
        }
    }
}

/// <p>Lists all the moderators for a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelModerators {
    _private: (),
}
impl ListChannelModerators {
    /// Creates a new builder-style object to manufacture [`ListChannelModeratorsInput`](crate::input::ListChannelModeratorsInput)
    pub fn builder() -> crate::input::list_channel_moderators_input::Builder {
        crate::input::list_channel_moderators_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelModerators {
    type Output = std::result::Result<
        crate::output::ListChannelModeratorsOutput,
        crate::error::ListChannelModeratorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_moderators_error(response)
        } else {
            crate::operation_deser::parse_list_channel_moderators_response(response)
        }
    }
}

/// <p>Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.</p>
/// <p class="title">
/// <b>Functionality & restrictions</b>
/// </p>
/// <ul>
/// <li>
/// <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the account.</p>
/// </li>
/// <li>
/// <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to list the
/// private channels in an account.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannels {
    _private: (),
}
impl ListChannels {
    /// Creates a new builder-style object to manufacture [`ListChannelsInput`](crate::input::ListChannelsInput)
    pub fn builder() -> crate::input::list_channels_input::Builder {
        crate::input::list_channels_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannels {
    type Output =
        std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channels_error(response)
        } else {
            crate::operation_deser::parse_list_channels_response(response)
        }
    }
}

/// <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelsModeratedByAppInstanceUser {
    _private: (),
}
impl ListChannelsModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelsModeratedByAppInstanceUserInput`](crate::input::ListChannelsModeratedByAppInstanceUserInput)
    pub fn builder() -> crate::input::list_channels_moderated_by_app_instance_user_input::Builder {
        crate::input::list_channels_moderated_by_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelsModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelsModeratedByAppInstanceUserOutput,
        crate::error::ListChannelsModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channels_moderated_by_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_channels_moderated_by_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>
/// Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see
/// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
/// in the <i>Amazon Chime Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMeetings {
    _private: (),
}
impl ListMeetings {
    /// Creates a new builder-style object to manufacture [`ListMeetingsInput`](crate::input::ListMeetingsInput)
    pub fn builder() -> crate::input::list_meetings_input::Builder {
        crate::input::list_meetings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMeetings {
    type Output =
        std::result::Result<crate::output::ListMeetingsOutput, crate::error::ListMeetingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_meetings_error(response)
        } else {
            crate::operation_deser::parse_list_meetings_response(response)
        }
    }
}

/// <p>Lists the tags applied to an Amazon Chime SDK meeting resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMeetingTags {
    _private: (),
}
impl ListMeetingTags {
    /// Creates a new builder-style object to manufacture [`ListMeetingTagsInput`](crate::input::ListMeetingTagsInput)
    pub fn builder() -> crate::input::list_meeting_tags_input::Builder {
        crate::input::list_meeting_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMeetingTags {
    type Output = std::result::Result<
        crate::output::ListMeetingTagsOutput,
        crate::error::ListMeetingTagsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_meeting_tags_error(response)
        } else {
            crate::operation_deser::parse_list_meeting_tags_response(response)
        }
    }
}

/// <p>Lists the phone number orders for the administrator's Amazon Chime account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPhoneNumberOrders {
    _private: (),
}
impl ListPhoneNumberOrders {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumberOrdersInput`](crate::input::ListPhoneNumberOrdersInput)
    pub fn builder() -> crate::input::list_phone_number_orders_input::Builder {
        crate::input::list_phone_number_orders_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPhoneNumberOrders {
    type Output = std::result::Result<
        crate::output::ListPhoneNumberOrdersOutput,
        crate::error::ListPhoneNumberOrdersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_phone_number_orders_error(response)
        } else {
            crate::operation_deser::parse_list_phone_number_orders_response(response)
        }
    }
}

/// <p>Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPhoneNumbers {
    _private: (),
}
impl ListPhoneNumbers {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersInput`](crate::input::ListPhoneNumbersInput)
    pub fn builder() -> crate::input::list_phone_numbers_input::Builder {
        crate::input::list_phone_numbers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPhoneNumbers {
    type Output = std::result::Result<
        crate::output::ListPhoneNumbersOutput,
        crate::error::ListPhoneNumbersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_phone_numbers_error(response)
        } else {
            crate::operation_deser::parse_list_phone_numbers_response(response)
        }
    }
}

/// <p>Lists the proxy sessions for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProxySessions {
    _private: (),
}
impl ListProxySessions {
    /// Creates a new builder-style object to manufacture [`ListProxySessionsInput`](crate::input::ListProxySessionsInput)
    pub fn builder() -> crate::input::list_proxy_sessions_input::Builder {
        crate::input::list_proxy_sessions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProxySessions {
    type Output = std::result::Result<
        crate::output::ListProxySessionsOutput,
        crate::error::ListProxySessionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_proxy_sessions_error(response)
        } else {
            crate::operation_deser::parse_list_proxy_sessions_response(response)
        }
    }
}

/// <p>Lists the membership details for the specified room in an Amazon Chime Enterprise account,
/// such as the members' IDs, email addresses, and names.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRoomMemberships {
    _private: (),
}
impl ListRoomMemberships {
    /// Creates a new builder-style object to manufacture [`ListRoomMembershipsInput`](crate::input::ListRoomMembershipsInput)
    pub fn builder() -> crate::input::list_room_memberships_input::Builder {
        crate::input::list_room_memberships_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRoomMemberships {
    type Output = std::result::Result<
        crate::output::ListRoomMembershipsOutput,
        crate::error::ListRoomMembershipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_room_memberships_error(response)
        } else {
            crate::operation_deser::parse_list_room_memberships_response(response)
        }
    }
}

/// <p>Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRooms {
    _private: (),
}
impl ListRooms {
    /// Creates a new builder-style object to manufacture [`ListRoomsInput`](crate::input::ListRoomsInput)
    pub fn builder() -> crate::input::list_rooms_input::Builder {
        crate::input::list_rooms_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRooms {
    type Output = std::result::Result<crate::output::ListRoomsOutput, crate::error::ListRoomsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_rooms_error(response)
        } else {
            crate::operation_deser::parse_list_rooms_response(response)
        }
    }
}

/// <p>Lists the SIP media applications under the administrator's AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSipMediaApplications {
    _private: (),
}
impl ListSipMediaApplications {
    /// Creates a new builder-style object to manufacture [`ListSipMediaApplicationsInput`](crate::input::ListSipMediaApplicationsInput)
    pub fn builder() -> crate::input::list_sip_media_applications_input::Builder {
        crate::input::list_sip_media_applications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSipMediaApplications {
    type Output = std::result::Result<
        crate::output::ListSipMediaApplicationsOutput,
        crate::error::ListSipMediaApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_sip_media_applications_error(response)
        } else {
            crate::operation_deser::parse_list_sip_media_applications_response(response)
        }
    }
}

/// <p>Lists the SIP rules under the administrator's AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSipRules {
    _private: (),
}
impl ListSipRules {
    /// Creates a new builder-style object to manufacture [`ListSipRulesInput`](crate::input::ListSipRulesInput)
    pub fn builder() -> crate::input::list_sip_rules_input::Builder {
        crate::input::list_sip_rules_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSipRules {
    type Output =
        std::result::Result<crate::output::ListSipRulesOutput, crate::error::ListSipRulesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_sip_rules_error(response)
        } else {
            crate::operation_deser::parse_list_sip_rules_response(response)
        }
    }
}

/// <p>Lists supported phone number countries.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSupportedPhoneNumberCountries {
    _private: (),
}
impl ListSupportedPhoneNumberCountries {
    /// Creates a new builder-style object to manufacture [`ListSupportedPhoneNumberCountriesInput`](crate::input::ListSupportedPhoneNumberCountriesInput)
    pub fn builder() -> crate::input::list_supported_phone_number_countries_input::Builder {
        crate::input::list_supported_phone_number_countries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSupportedPhoneNumberCountries {
    type Output = std::result::Result<
        crate::output::ListSupportedPhoneNumberCountriesOutput,
        crate::error::ListSupportedPhoneNumberCountriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_supported_phone_number_countries_error(response)
        } else {
            crate::operation_deser::parse_list_supported_phone_number_countries_response(response)
        }
    }
}

/// <p>Lists the tags applied to an Amazon Chime SDK meeting resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Lists the users that belong to the specified Amazon Chime account. You can specify an email
/// address to list only the user that the email address belongs to.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListUsers {
    _private: (),
}
impl ListUsers {
    /// Creates a new builder-style object to manufacture [`ListUsersInput`](crate::input::ListUsersInput)
    pub fn builder() -> crate::input::list_users_input::Builder {
        crate::input::list_users_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListUsers {
    type Output = std::result::Result<crate::output::ListUsersOutput, crate::error::ListUsersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_users_error(response)
        } else {
            crate::operation_deser::parse_list_users_response(response)
        }
    }
}

/// <p>Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectorGroups {
    _private: (),
}
impl ListVoiceConnectorGroups {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorGroupsInput`](crate::input::ListVoiceConnectorGroupsInput)
    pub fn builder() -> crate::input::list_voice_connector_groups_input::Builder {
        crate::input::list_voice_connector_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVoiceConnectorGroups {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorGroupsOutput,
        crate::error::ListVoiceConnectorGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connector_groups_error(response)
        } else {
            crate::operation_deser::parse_list_voice_connector_groups_response(response)
        }
    }
}

/// <p>Lists the Amazon Chime Voice Connectors for the administrator's AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectors {
    _private: (),
}
impl ListVoiceConnectors {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorsInput`](crate::input::ListVoiceConnectorsInput)
    pub fn builder() -> crate::input::list_voice_connectors_input::Builder {
        crate::input::list_voice_connectors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVoiceConnectors {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorsOutput,
        crate::error::ListVoiceConnectorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connectors_error(response)
        } else {
            crate::operation_deser::parse_list_voice_connectors_response(response)
        }
    }
}

/// <p>Lists the SIP credentials for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVoiceConnectorTerminationCredentials {
    _private: (),
}
impl ListVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`ListVoiceConnectorTerminationCredentialsInput`](crate::input::ListVoiceConnectorTerminationCredentialsInput)
    pub fn builder() -> crate::input::list_voice_connector_termination_credentials_input::Builder {
        crate::input::list_voice_connector_termination_credentials_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::ListVoiceConnectorTerminationCredentialsOutput,
        crate::error::ListVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// <p>Logs out the specified user from all of the devices they are currently logged into.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LogoutUser {
    _private: (),
}
impl LogoutUser {
    /// Creates a new builder-style object to manufacture [`LogoutUserInput`](crate::input::LogoutUserInput)
    pub fn builder() -> crate::input::logout_user_input::Builder {
        crate::input::logout_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for LogoutUser {
    type Output =
        std::result::Result<crate::output::LogoutUserOutput, crate::error::LogoutUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_logout_user_error(response)
        } else {
            crate::operation_deser::parse_logout_user_response(response)
        }
    }
}

/// <p>Sets the amount of time in days that a given <code>AppInstance</code> retains data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAppInstanceRetentionSettings {
    _private: (),
}
impl PutAppInstanceRetentionSettings {
    /// Creates a new builder-style object to manufacture [`PutAppInstanceRetentionSettingsInput`](crate::input::PutAppInstanceRetentionSettingsInput)
    pub fn builder() -> crate::input::put_app_instance_retention_settings_input::Builder {
        crate::input::put_app_instance_retention_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAppInstanceRetentionSettings {
    type Output = std::result::Result<
        crate::output::PutAppInstanceRetentionSettingsOutput,
        crate::error::PutAppInstanceRetentionSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_app_instance_retention_settings_error(response)
        } else {
            crate::operation_deser::parse_put_app_instance_retention_settings_response(response)
        }
    }
}

/// <p>The data streaming configurations of an <code>AppInstance</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAppInstanceStreamingConfigurations {
    _private: (),
}
impl PutAppInstanceStreamingConfigurations {
    /// Creates a new builder-style object to manufacture [`PutAppInstanceStreamingConfigurationsInput`](crate::input::PutAppInstanceStreamingConfigurationsInput)
    pub fn builder() -> crate::input::put_app_instance_streaming_configurations_input::Builder {
        crate::input::put_app_instance_streaming_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAppInstanceStreamingConfigurations {
    type Output = std::result::Result<
        crate::output::PutAppInstanceStreamingConfigurationsOutput,
        crate::error::PutAppInstanceStreamingConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_app_instance_streaming_configurations_error(response)
        } else {
            crate::operation_deser::parse_put_app_instance_streaming_configurations_response(
                response,
            )
        }
    }
}

/// <p>Creates an events configuration that allows a bot to receive outgoing events sent by Amazon
/// Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information,
/// see <a>Bot</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutEventsConfiguration {
    _private: (),
}
impl PutEventsConfiguration {
    /// Creates a new builder-style object to manufacture [`PutEventsConfigurationInput`](crate::input::PutEventsConfigurationInput)
    pub fn builder() -> crate::input::put_events_configuration_input::Builder {
        crate::input::put_events_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutEventsConfiguration {
    type Output = std::result::Result<
        crate::output::PutEventsConfigurationOutput,
        crate::error::PutEventsConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_put_events_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_events_configuration_response(response)
        }
    }
}

/// <p>
/// Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html">Logging Amazon Chime API Calls with AWS CloudTrail</a>
/// in the <i>Amazon Chime Administration Guide</i>.</p>
/// <p>
/// To turn off existing retention settings, remove the number of days from the corresponding
/// <b>RetentionDays</b>
/// field in the
/// <b>RetentionSettings</b>
/// object. For more information about retention settings, see
/// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a>
/// in the <i>Amazon Chime Administration Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutRetentionSettings {
    _private: (),
}
impl PutRetentionSettings {
    /// Creates a new builder-style object to manufacture [`PutRetentionSettingsInput`](crate::input::PutRetentionSettingsInput)
    pub fn builder() -> crate::input::put_retention_settings_input::Builder {
        crate::input::put_retention_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutRetentionSettings {
    type Output = std::result::Result<
        crate::output::PutRetentionSettingsOutput,
        crate::error::PutRetentionSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_put_retention_settings_error(response)
        } else {
            crate::operation_deser::parse_put_retention_settings_response(response)
        }
    }
}

/// <p>Updates the logging configuration for the specified SIP media application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutSipMediaApplicationLoggingConfiguration {
    _private: (),
}
impl PutSipMediaApplicationLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutSipMediaApplicationLoggingConfigurationInput`](crate::input::PutSipMediaApplicationLoggingConfigurationInput)
    pub fn builder() -> crate::input::put_sip_media_application_logging_configuration_input::Builder
    {
        crate::input::put_sip_media_application_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutSipMediaApplicationLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::PutSipMediaApplicationLoggingConfigurationOutput,
        crate::error::PutSipMediaApplicationLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_sip_media_application_logging_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_sip_media_application_logging_configuration_response(
                response,
            )
        }
    }
}

/// <p>Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for
/// the Amazon Chime Voice Connector before emergency calling can be configured.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorEmergencyCallingConfiguration {
    _private: (),
}
impl PutVoiceConnectorEmergencyCallingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorEmergencyCallingConfigurationInput`](crate::input::PutVoiceConnectorEmergencyCallingConfigurationInput)
    pub fn builder(
    ) -> crate::input::put_voice_connector_emergency_calling_configuration_input::Builder {
        crate::input::put_voice_connector_emergency_calling_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorEmergencyCallingConfiguration {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorEmergencyCallingConfigurationOutput,
        crate::error::PutVoiceConnectorEmergencyCallingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_emergency_calling_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_emergency_calling_configuration_response(response)
        }
    }
}

/// <p>Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorLoggingConfiguration {
    _private: (),
}
impl PutVoiceConnectorLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorLoggingConfigurationInput`](crate::input::PutVoiceConnectorLoggingConfigurationInput)
    pub fn builder() -> crate::input::put_voice_connector_logging_configuration_input::Builder {
        crate::input::put_voice_connector_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorLoggingConfigurationOutput,
        crate::error::PutVoiceConnectorLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_logging_configuration_response(
                response,
            )
        }
    }
}

/// <p>Adds origination settings for the specified Amazon Chime Voice Connector.</p>
/// <note>
/// <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorOrigination {
    _private: (),
}
impl PutVoiceConnectorOrigination {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorOriginationInput`](crate::input::PutVoiceConnectorOriginationInput)
    pub fn builder() -> crate::input::put_voice_connector_origination_input::Builder {
        crate::input::put_voice_connector_origination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorOrigination {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorOriginationOutput,
        crate::error::PutVoiceConnectorOriginationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_origination_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_origination_response(response)
        }
    }
}

/// <p>Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorProxy {
    _private: (),
}
impl PutVoiceConnectorProxy {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorProxyInput`](crate::input::PutVoiceConnectorProxyInput)
    pub fn builder() -> crate::input::put_voice_connector_proxy_input::Builder {
        crate::input::put_voice_connector_proxy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorProxy {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorProxyOutput,
        crate::error::PutVoiceConnectorProxyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_proxy_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_proxy_response(response)
        }
    }
}

/// <p>Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming
/// configuration specifies whether media streaming is enabled for sending to Indonesians.
/// It also sets the retention period, in hours, for the Amazon Kinesis data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorStreamingConfiguration {
    _private: (),
}
impl PutVoiceConnectorStreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorStreamingConfigurationInput`](crate::input::PutVoiceConnectorStreamingConfigurationInput)
    pub fn builder() -> crate::input::put_voice_connector_streaming_configuration_input::Builder {
        crate::input::put_voice_connector_streaming_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorStreamingConfiguration {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorStreamingConfigurationOutput,
        crate::error::PutVoiceConnectorStreamingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_streaming_configuration_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_streaming_configuration_response(
                response,
            )
        }
    }
}

/// <p>Adds termination settings for the specified Amazon Chime Voice Connector.</p>
/// <note>
/// <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorTermination {
    _private: (),
}
impl PutVoiceConnectorTermination {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationInput`](crate::input::PutVoiceConnectorTerminationInput)
    pub fn builder() -> crate::input::put_voice_connector_termination_input::Builder {
        crate::input::put_voice_connector_termination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorTermination {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorTerminationOutput,
        crate::error::PutVoiceConnectorTerminationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_voice_connector_termination_error(response)
        } else {
            crate::operation_deser::parse_put_voice_connector_termination_response(response)
        }
    }
}

/// <p>Adds termination SIP credentials for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutVoiceConnectorTerminationCredentials {
    _private: (),
}
impl PutVoiceConnectorTerminationCredentials {
    /// Creates a new builder-style object to manufacture [`PutVoiceConnectorTerminationCredentialsInput`](crate::input::PutVoiceConnectorTerminationCredentialsInput)
    pub fn builder() -> crate::input::put_voice_connector_termination_credentials_input::Builder {
        crate::input::put_voice_connector_termination_credentials_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutVoiceConnectorTerminationCredentials {
    type Output = std::result::Result<
        crate::output::PutVoiceConnectorTerminationCredentialsOutput,
        crate::error::PutVoiceConnectorTerminationCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_put_voice_connector_termination_credentials_error(
                response,
            )
        } else {
            crate::operation_deser::parse_put_voice_connector_termination_credentials_response(
                response,
            )
        }
    }
}

/// <p>Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RedactChannelMessage {
    _private: (),
}
impl RedactChannelMessage {
    /// Creates a new builder-style object to manufacture [`RedactChannelMessageInput`](crate::input::RedactChannelMessageInput)
    pub fn builder() -> crate::input::redact_channel_message_input::Builder {
        crate::input::redact_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RedactChannelMessage {
    type Output = std::result::Result<
        crate::output::RedactChannelMessageOutput,
        crate::error::RedactChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_redact_channel_message_error(response)
        } else {
            crate::operation_deser::parse_redact_channel_message_response(response)
        }
    }
}

/// <p>Redacts the specified message from the specified Amazon Chime conversation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RedactConversationMessage {
    _private: (),
}
impl RedactConversationMessage {
    /// Creates a new builder-style object to manufacture [`RedactConversationMessageInput`](crate::input::RedactConversationMessageInput)
    pub fn builder() -> crate::input::redact_conversation_message_input::Builder {
        crate::input::redact_conversation_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RedactConversationMessage {
    type Output = std::result::Result<
        crate::output::RedactConversationMessageOutput,
        crate::error::RedactConversationMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_redact_conversation_message_error(response)
        } else {
            crate::operation_deser::parse_redact_conversation_message_response(response)
        }
    }
}

/// <p>Redacts the specified message from the specified Amazon Chime channel.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RedactRoomMessage {
    _private: (),
}
impl RedactRoomMessage {
    /// Creates a new builder-style object to manufacture [`RedactRoomMessageInput`](crate::input::RedactRoomMessageInput)
    pub fn builder() -> crate::input::redact_room_message_input::Builder {
        crate::input::redact_room_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RedactRoomMessage {
    type Output = std::result::Result<
        crate::output::RedactRoomMessageOutput,
        crate::error::RedactRoomMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_redact_room_message_error(response)
        } else {
            crate::operation_deser::parse_redact_room_message_response(response)
        }
    }
}

/// <p>Regenerates the security token for a bot.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegenerateSecurityToken {
    _private: (),
}
impl RegenerateSecurityToken {
    /// Creates a new builder-style object to manufacture [`RegenerateSecurityTokenInput`](crate::input::RegenerateSecurityTokenInput)
    pub fn builder() -> crate::input::regenerate_security_token_input::Builder {
        crate::input::regenerate_security_token_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegenerateSecurityToken {
    type Output = std::result::Result<
        crate::output::RegenerateSecurityTokenOutput,
        crate::error::RegenerateSecurityTokenError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_regenerate_security_token_error(response)
        } else {
            crate::operation_deser::parse_regenerate_security_token_response(response)
        }
    }
}

/// <p>Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns
/// the <a>User</a> object with the updated personal meeting PIN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetPersonalPIN {
    _private: (),
}
impl ResetPersonalPIN {
    /// Creates a new builder-style object to manufacture [`ResetPersonalPinInput`](crate::input::ResetPersonalPinInput)
    pub fn builder() -> crate::input::reset_personal_pin_input::Builder {
        crate::input::reset_personal_pin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetPersonalPIN {
    type Output = std::result::Result<
        crate::output::ResetPersonalPinOutput,
        crate::error::ResetPersonalPINError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_personal_pin_error(response)
        } else {
            crate::operation_deser::parse_reset_personal_pin_response(response)
        }
    }
}

/// <p>Moves a phone number from the <b>Deletion queue</b> back into the
/// phone number <b>Inventory</b>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestorePhoneNumber {
    _private: (),
}
impl RestorePhoneNumber {
    /// Creates a new builder-style object to manufacture [`RestorePhoneNumberInput`](crate::input::RestorePhoneNumberInput)
    pub fn builder() -> crate::input::restore_phone_number_input::Builder {
        crate::input::restore_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestorePhoneNumber {
    type Output = std::result::Result<
        crate::output::RestorePhoneNumberOutput,
        crate::error::RestorePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_phone_number_error(response)
        } else {
            crate::operation_deser::parse_restore_phone_number_response(response)
        }
    }
}

/// <p>Searches for phone numbers that can be ordered. For US numbers, provide at least one of
/// the following search filters: <code>AreaCode</code>, <code>City</code>,
/// <code>State</code>, or <code>TollFreePrefix</code>. If you provide
/// <code>City</code>, you must also provide <code>State</code>. Numbers outside the US only
/// support the <code>PhoneNumberType</code> filter, which you must use.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbers {
    _private: (),
}
impl SearchAvailablePhoneNumbers {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersInput`](crate::input::SearchAvailablePhoneNumbersInput)
    pub fn builder() -> crate::input::search_available_phone_numbers_input::Builder {
        crate::input::search_available_phone_numbers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchAvailablePhoneNumbers {
    type Output = std::result::Result<
        crate::output::SearchAvailablePhoneNumbersOutput,
        crate::error::SearchAvailablePhoneNumbersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_available_phone_numbers_error(response)
        } else {
            crate::operation_deser::parse_search_available_phone_numbers_response(response)
        }
    }
}

/// <p>Sends a message to a particular channel that the member is a part of.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata. <code>CONTROL</code> messages can contain 30 bytes of
/// data and no metadata.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendChannelMessage {
    _private: (),
}
impl SendChannelMessage {
    /// Creates a new builder-style object to manufacture [`SendChannelMessageInput`](crate::input::SendChannelMessageInput)
    pub fn builder() -> crate::input::send_channel_message_input::Builder {
        crate::input::send_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendChannelMessage {
    type Output = std::result::Result<
        crate::output::SendChannelMessageOutput,
        crate::error::SendChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_send_channel_message_error(response)
        } else {
            crate::operation_deser::parse_send_channel_message_response(response)
        }
    }
}

/// <p>Applies the specified tags to the specified Amazon Chime SDK attendee.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagAttendee {
    _private: (),
}
impl TagAttendee {
    /// Creates a new builder-style object to manufacture [`TagAttendeeInput`](crate::input::TagAttendeeInput)
    pub fn builder() -> crate::input::tag_attendee_input::Builder {
        crate::input::tag_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagAttendee {
    type Output =
        std::result::Result<crate::output::TagAttendeeOutput, crate::error::TagAttendeeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_attendee_error(response)
        } else {
            crate::operation_deser::parse_tag_attendee_response(response)
        }
    }
}

/// <p>Applies the specified tags to the specified Amazon Chime SDK meeting.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagMeeting {
    _private: (),
}
impl TagMeeting {
    /// Creates a new builder-style object to manufacture [`TagMeetingInput`](crate::input::TagMeetingInput)
    pub fn builder() -> crate::input::tag_meeting_input::Builder {
        crate::input::tag_meeting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagMeeting {
    type Output =
        std::result::Result<crate::output::TagMeetingOutput, crate::error::TagMeetingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_meeting_error(response)
        } else {
            crate::operation_deser::parse_tag_meeting_response(response)
        }
    }
}

/// <p>Applies the specified tags to the specified Amazon Chime SDK meeting resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Untags the specified tags from the specified Amazon Chime SDK attendee.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagAttendee {
    _private: (),
}
impl UntagAttendee {
    /// Creates a new builder-style object to manufacture [`UntagAttendeeInput`](crate::input::UntagAttendeeInput)
    pub fn builder() -> crate::input::untag_attendee_input::Builder {
        crate::input::untag_attendee_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagAttendee {
    type Output =
        std::result::Result<crate::output::UntagAttendeeOutput, crate::error::UntagAttendeeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_attendee_error(response)
        } else {
            crate::operation_deser::parse_untag_attendee_response(response)
        }
    }
}

/// <p>Untags the specified tags from the specified Amazon Chime SDK meeting.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagMeeting {
    _private: (),
}
impl UntagMeeting {
    /// Creates a new builder-style object to manufacture [`UntagMeetingInput`](crate::input::UntagMeetingInput)
    pub fn builder() -> crate::input::untag_meeting_input::Builder {
        crate::input::untag_meeting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagMeeting {
    type Output =
        std::result::Result<crate::output::UntagMeetingOutput, crate::error::UntagMeetingError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_meeting_error(response)
        } else {
            crate::operation_deser::parse_untag_meeting_response(response)
        }
    }
}

/// <p>Untags the specified tags from the specified Amazon Chime SDK meeting resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccount {
    _private: (),
}
impl UpdateAccount {
    /// Creates a new builder-style object to manufacture [`UpdateAccountInput`](crate::input::UpdateAccountInput)
    pub fn builder() -> crate::input::update_account_input::Builder {
        crate::input::update_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAccount {
    type Output =
        std::result::Result<crate::output::UpdateAccountOutput, crate::error::UpdateAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_account_error(response)
        } else {
            crate::operation_deser::parse_update_account_response(response)
        }
    }
}

/// <p>Updates the settings for the specified Amazon Chime account. You can update settings for
/// remote control of shared screens, or for the dial-out option. For more information about
/// these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use
/// the Policies Page</a> in the <i>Amazon Chime Administration
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccountSettings {
    _private: (),
}
impl UpdateAccountSettings {
    /// Creates a new builder-style object to manufacture [`UpdateAccountSettingsInput`](crate::input::UpdateAccountSettingsInput)
    pub fn builder() -> crate::input::update_account_settings_input::Builder {
        crate::input::update_account_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAccountSettings {
    type Output = std::result::Result<
        crate::output::UpdateAccountSettingsOutput,
        crate::error::UpdateAccountSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_account_settings_error(response)
        } else {
            crate::operation_deser::parse_update_account_settings_response(response)
        }
    }
}

/// <p>Updates <code>AppInstance</code> metadata.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAppInstance {
    _private: (),
}
impl UpdateAppInstance {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceInput`](crate::input::UpdateAppInstanceInput)
    pub fn builder() -> crate::input::update_app_instance_input::Builder {
        crate::input::update_app_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAppInstance {
    type Output = std::result::Result<
        crate::output::UpdateAppInstanceOutput,
        crate::error::UpdateAppInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_app_instance_error(response)
        } else {
            crate::operation_deser::parse_update_app_instance_response(response)
        }
    }
}

/// <p>Updates the details of an <code>AppInstanceUser</code>. You can update names and metadata.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAppInstanceUser {
    _private: (),
}
impl UpdateAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceUserInput`](crate::input::UpdateAppInstanceUserInput)
    pub fn builder() -> crate::input::update_app_instance_user_input::Builder {
        crate::input::update_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAppInstanceUser {
    type Output = std::result::Result<
        crate::output::UpdateAppInstanceUserOutput,
        crate::error::UpdateAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_app_instance_user_error(response)
        } else {
            crate::operation_deser::parse_update_app_instance_user_response(response)
        }
    }
}

/// <p>Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBot {
    _private: (),
}
impl UpdateBot {
    /// Creates a new builder-style object to manufacture [`UpdateBotInput`](crate::input::UpdateBotInput)
    pub fn builder() -> crate::input::update_bot_input::Builder {
        crate::input::update_bot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateBot {
    type Output = std::result::Result<crate::output::UpdateBotOutput, crate::error::UpdateBotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_bot_error(response)
        } else {
            crate::operation_deser::parse_update_bot_response(response)
        }
    }
}

/// <p>Update a channel's attributes.</p>
/// <p>
/// <b>Restriction</b>: You can't change a channel's privacy.
/// </p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannel {
    _private: (),
}
impl UpdateChannel {
    /// Creates a new builder-style object to manufacture [`UpdateChannelInput`](crate::input::UpdateChannelInput)
    pub fn builder() -> crate::input::update_channel_input::Builder {
        crate::input::update_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannel {
    type Output =
        std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_error(response)
        } else {
            crate::operation_deser::parse_update_channel_response(response)
        }
    }
}

/// <p>Updates the content of a message.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannelMessage {
    _private: (),
}
impl UpdateChannelMessage {
    /// Creates a new builder-style object to manufacture [`UpdateChannelMessageInput`](crate::input::UpdateChannelMessageInput)
    pub fn builder() -> crate::input::update_channel_message_input::Builder {
        crate::input::update_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannelMessage {
    type Output = std::result::Result<
        crate::output::UpdateChannelMessageOutput,
        crate::error::UpdateChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_message_error(response)
        } else {
            crate::operation_deser::parse_update_channel_message_response(response)
        }
    }
}

/// <p>The details of the time when a user last read messages in a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
/// the API call as the value in the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannelReadMarker {
    _private: (),
}
impl UpdateChannelReadMarker {
    /// Creates a new builder-style object to manufacture [`UpdateChannelReadMarkerInput`](crate::input::UpdateChannelReadMarkerInput)
    pub fn builder() -> crate::input::update_channel_read_marker_input::Builder {
        crate::input::update_channel_read_marker_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannelReadMarker {
    type Output = std::result::Result<
        crate::output::UpdateChannelReadMarkerOutput,
        crate::error::UpdateChannelReadMarkerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_read_marker_error(response)
        } else {
            crate::operation_deser::parse_update_channel_read_marker_response(response)
        }
    }
}

/// <p>Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGlobalSettings {
    _private: (),
}
impl UpdateGlobalSettings {
    /// Creates a new builder-style object to manufacture [`UpdateGlobalSettingsInput`](crate::input::UpdateGlobalSettingsInput)
    pub fn builder() -> crate::input::update_global_settings_input::Builder {
        crate::input::update_global_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGlobalSettings {
    type Output = std::result::Result<
        crate::output::UpdateGlobalSettingsOutput,
        crate::error::UpdateGlobalSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_global_settings_error(response)
        } else {
            crate::operation_deser::parse_update_global_settings_response(response)
        }
    }
}

/// <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p>
/// <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.</p>
/// <p>Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePhoneNumber {
    _private: (),
}
impl UpdatePhoneNumber {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberInput`](crate::input::UpdatePhoneNumberInput)
    pub fn builder() -> crate::input::update_phone_number_input::Builder {
        crate::input::update_phone_number_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePhoneNumber {
    type Output = std::result::Result<
        crate::output::UpdatePhoneNumberOutput,
        crate::error::UpdatePhoneNumberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_phone_number_error(response)
        } else {
            crate::operation_deser::parse_update_phone_number_response(response)
        }
    }
}

/// <p>Updates the phone number settings for the administrator's AWS account, such as the default
/// outbound calling name. You can update the default outbound calling name once every seven
/// days. Outbound calling names can take up to 72 hours to update.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePhoneNumberSettings {
    _private: (),
}
impl UpdatePhoneNumberSettings {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberSettingsInput`](crate::input::UpdatePhoneNumberSettingsInput)
    pub fn builder() -> crate::input::update_phone_number_settings_input::Builder {
        crate::input::update_phone_number_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePhoneNumberSettings {
    type Output = std::result::Result<
        crate::output::UpdatePhoneNumberSettingsOutput,
        crate::error::UpdatePhoneNumberSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_phone_number_settings_error(response)
        } else {
            crate::operation_deser::parse_update_phone_number_settings_response(response)
        }
    }
}

/// <p>Updates the specified proxy session details, such as voice or SMS capabilities.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProxySession {
    _private: (),
}
impl UpdateProxySession {
    /// Creates a new builder-style object to manufacture [`UpdateProxySessionInput`](crate::input::UpdateProxySessionInput)
    pub fn builder() -> crate::input::update_proxy_session_input::Builder {
        crate::input::update_proxy_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProxySession {
    type Output = std::result::Result<
        crate::output::UpdateProxySessionOutput,
        crate::error::UpdateProxySessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_update_proxy_session_error(response)
        } else {
            crate::operation_deser::parse_update_proxy_session_response(response)
        }
    }
}

/// <p>Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoom {
    _private: (),
}
impl UpdateRoom {
    /// Creates a new builder-style object to manufacture [`UpdateRoomInput`](crate::input::UpdateRoomInput)
    pub fn builder() -> crate::input::update_room_input::Builder {
        crate::input::update_room_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRoom {
    type Output =
        std::result::Result<crate::output::UpdateRoomOutput, crate::error::UpdateRoomError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_room_error(response)
        } else {
            crate::operation_deser::parse_update_room_response(response)
        }
    }
}

/// <p>Updates room membership details, such as the member role, for a room in an Amazon Chime
/// Enterprise account. The member role designates whether the member is a chat room
/// administrator or a general chat room member. The member role can be updated only for
/// user IDs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoomMembership {
    _private: (),
}
impl UpdateRoomMembership {
    /// Creates a new builder-style object to manufacture [`UpdateRoomMembershipInput`](crate::input::UpdateRoomMembershipInput)
    pub fn builder() -> crate::input::update_room_membership_input::Builder {
        crate::input::update_room_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRoomMembership {
    type Output = std::result::Result<
        crate::output::UpdateRoomMembershipOutput,
        crate::error::UpdateRoomMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_room_membership_error(response)
        } else {
            crate::operation_deser::parse_update_room_membership_response(response)
        }
    }
}

/// <p>Updates the details of the specified SIP media application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipMediaApplication {
    _private: (),
}
impl UpdateSipMediaApplication {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationInput`](crate::input::UpdateSipMediaApplicationInput)
    pub fn builder() -> crate::input::update_sip_media_application_input::Builder {
        crate::input::update_sip_media_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSipMediaApplication {
    type Output = std::result::Result<
        crate::output::UpdateSipMediaApplicationOutput,
        crate::error::UpdateSipMediaApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_sip_media_application_error(response)
        } else {
            crate::operation_deser::parse_update_sip_media_application_response(response)
        }
    }
}

/// <p>Allows you to trigger a Lambda function at any time while a call is active, and replace the current actions with new actions returned by the invocation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipMediaApplicationCall {
    _private: (),
}
impl UpdateSipMediaApplicationCall {
    /// Creates a new builder-style object to manufacture [`UpdateSipMediaApplicationCallInput`](crate::input::UpdateSipMediaApplicationCallInput)
    pub fn builder() -> crate::input::update_sip_media_application_call_input::Builder {
        crate::input::update_sip_media_application_call_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSipMediaApplicationCall {
    type Output = std::result::Result<
        crate::output::UpdateSipMediaApplicationCallOutput,
        crate::error::UpdateSipMediaApplicationCallError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_sip_media_application_call_error(response)
        } else {
            crate::operation_deser::parse_update_sip_media_application_call_response(response)
        }
    }
}

/// <p>Updates the details of the specified SIP rule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSipRule {
    _private: (),
}
impl UpdateSipRule {
    /// Creates a new builder-style object to manufacture [`UpdateSipRuleInput`](crate::input::UpdateSipRuleInput)
    pub fn builder() -> crate::input::update_sip_rule_input::Builder {
        crate::input::update_sip_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSipRule {
    type Output =
        std::result::Result<crate::output::UpdateSipRuleOutput, crate::error::UpdateSipRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_sip_rule_error(response)
        } else {
            crate::operation_deser::parse_update_sip_rule_response(response)
        }
    }
}

/// <p>Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUser {
    _private: (),
}
impl UpdateUser {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::input::UpdateUserInput)
    pub fn builder() -> crate::input::update_user_input::Builder {
        crate::input::update_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateUser {
    type Output =
        std::result::Result<crate::output::UpdateUserOutput, crate::error::UpdateUserError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_user_error(response)
        } else {
            crate::operation_deser::parse_update_user_response(response)
        }
    }
}

/// <p>Updates the settings for the specified user, such as phone number settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUserSettings {
    _private: (),
}
impl UpdateUserSettings {
    /// Creates a new builder-style object to manufacture [`UpdateUserSettingsInput`](crate::input::UpdateUserSettingsInput)
    pub fn builder() -> crate::input::update_user_settings_input::Builder {
        crate::input::update_user_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateUserSettings {
    type Output = std::result::Result<
        crate::output::UpdateUserSettingsOutput,
        crate::error::UpdateUserSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_user_settings_error(response)
        } else {
            crate::operation_deser::parse_update_user_settings_response(response)
        }
    }
}

/// <p>Updates details for the specified Amazon Chime Voice Connector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVoiceConnector {
    _private: (),
}
impl UpdateVoiceConnector {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorInput`](crate::input::UpdateVoiceConnectorInput)
    pub fn builder() -> crate::input::update_voice_connector_input::Builder {
        crate::input::update_voice_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVoiceConnector {
    type Output = std::result::Result<
        crate::output::UpdateVoiceConnectorOutput,
        crate::error::UpdateVoiceConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_voice_connector_error(response)
        } else {
            crate::operation_deser::parse_update_voice_connector_response(response)
        }
    }
}

/// <p>Updates details of the specified Amazon Chime Voice Connector group, such as the name and
/// Amazon Chime Voice Connector priority ranking.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVoiceConnectorGroup {
    _private: (),
}
impl UpdateVoiceConnectorGroup {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceConnectorGroupInput`](crate::input::UpdateVoiceConnectorGroupInput)
    pub fn builder() -> crate::input::update_voice_connector_group_input::Builder {
        crate::input::update_voice_connector_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVoiceConnectorGroup {
    type Output = std::result::Result<
        crate::output::UpdateVoiceConnectorGroupOutput,
        crate::error::UpdateVoiceConnectorGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_voice_connector_group_error(response)
        } else {
            crate::operation_deser::parse_update_voice_connector_group_response(response)
        }
    }
}
