// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_phone_numbers_with_voice_connector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePhoneNumbersWithVoiceConnectorInput,
) {
    if let Some(var_1) = &input.e164_phone_numbers {
        let mut array_2 = object.key("E164PhoneNumbers").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.force_associate {
        object.key("ForceAssociate").boolean(*var_4);
    }
}

pub fn serialize_structure_crate_input_associate_phone_numbers_with_voice_connector_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePhoneNumbersWithVoiceConnectorGroupInput,
) {
    if let Some(var_5) = &input.e164_phone_numbers {
        let mut array_6 = object.key("E164PhoneNumbers").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7);
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.force_associate {
        object.key("ForceAssociate").boolean(*var_8);
    }
}

pub fn serialize_structure_crate_input_associate_phone_number_with_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePhoneNumberWithUserInput,
) {
    if let Some(var_9) = &input.e164_phone_number {
        object.key("E164PhoneNumber").string(var_9);
    }
}

pub fn serialize_structure_crate_input_associate_signin_delegate_groups_with_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSigninDelegateGroupsWithAccountInput,
) {
    if let Some(var_10) = &input.signin_delegate_groups {
        let mut array_11 = object.key("SigninDelegateGroups").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_signin_delegate_group(
                    &mut object_13,
                    item_12,
                );
                object_13.finish();
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_crate_input_batch_create_attendee_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateAttendeeInput,
) {
    if let Some(var_14) = &input.attendees {
        let mut array_15 = object.key("Attendees").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_17,
                    item_16,
                );
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_crate_input_batch_create_channel_membership_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateChannelMembershipInput,
) {
    if let Some(var_18) = &input.member_arns {
        let mut array_19 = object.key("MemberArns").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20);
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.r#type {
        object.key("Type").string(var_21.as_str());
    }
}

pub fn serialize_structure_crate_input_batch_create_room_membership_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateRoomMembershipInput,
) {
    if let Some(var_22) = &input.membership_item_list {
        let mut array_23 = object.key("MembershipItemList").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_membership_item(
                    &mut object_25,
                    item_24,
                );
                object_25.finish();
            }
        }
        array_23.finish();
    }
}

pub fn serialize_structure_crate_input_batch_delete_phone_number_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePhoneNumberInput,
) {
    if let Some(var_26) = &input.phone_number_ids {
        let mut array_27 = object.key("PhoneNumberIds").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_crate_input_batch_suspend_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchSuspendUserInput,
) {
    if let Some(var_29) = &input.user_id_list {
        let mut array_30 = object.key("UserIdList").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31);
            }
        }
        array_30.finish();
    }
}

pub fn serialize_structure_crate_input_batch_unsuspend_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUnsuspendUserInput,
) {
    if let Some(var_32) = &input.user_id_list {
        let mut array_33 = object.key("UserIdList").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34);
            }
        }
        array_33.finish();
    }
}

pub fn serialize_structure_crate_input_batch_update_phone_number_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePhoneNumberInput,
) {
    if let Some(var_35) = &input.update_phone_number_request_items {
        let mut array_36 = object.key("UpdatePhoneNumberRequestItems").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_phone_number_request_item(
                    &mut object_38,
                    item_37,
                );
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_crate_input_batch_update_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateUserInput,
) {
    if let Some(var_39) = &input.update_user_request_items {
        let mut array_40 = object.key("UpdateUserRequestItems").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_user_request_item(
                    &mut object_42,
                    item_41,
                );
                object_42.finish();
            }
        }
        array_40.finish();
    }
}

pub fn serialize_structure_crate_input_create_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountInput,
) {
    if let Some(var_43) = &input.name {
        object.key("Name").string(var_43);
    }
}

pub fn serialize_structure_crate_input_create_app_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInstanceInput,
) {
    if let Some(var_44) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_44);
    }
    if let Some(var_45) = &input.metadata {
        object.key("Metadata").string(var_45);
    }
    if let Some(var_46) = &input.name {
        object.key("Name").string(var_46);
    }
    if let Some(var_47) = &input.tags {
        let mut array_48 = object.key("Tags").start_array();
        for item_49 in var_47 {
            {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_50, item_49);
                object_50.finish();
            }
        }
        array_48.finish();
    }
}

pub fn serialize_structure_crate_input_create_app_instance_admin_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInstanceAdminInput,
) {
    if let Some(var_51) = &input.app_instance_admin_arn {
        object.key("AppInstanceAdminArn").string(var_51);
    }
}

pub fn serialize_structure_crate_input_create_app_instance_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInstanceUserInput,
) {
    if let Some(var_52) = &input.app_instance_arn {
        object.key("AppInstanceArn").string(var_52);
    }
    if let Some(var_53) = &input.app_instance_user_id {
        object.key("AppInstanceUserId").string(var_53);
    }
    if let Some(var_54) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_54);
    }
    if let Some(var_55) = &input.metadata {
        object.key("Metadata").string(var_55);
    }
    if let Some(var_56) = &input.name {
        object.key("Name").string(var_56);
    }
    if let Some(var_57) = &input.tags {
        let mut array_58 = object.key("Tags").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_60, item_59);
                object_60.finish();
            }
        }
        array_58.finish();
    }
}

pub fn serialize_structure_crate_input_create_attendee_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAttendeeInput,
) {
    if let Some(var_61) = &input.external_user_id {
        object.key("ExternalUserId").string(var_61);
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64);
                object_65.finish();
            }
        }
        array_63.finish();
    }
}

pub fn serialize_structure_crate_input_create_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) {
    if let Some(var_66) = &input.display_name {
        object.key("DisplayName").string(var_66);
    }
    if let Some(var_67) = &input.domain {
        object.key("Domain").string(var_67);
    }
}

pub fn serialize_structure_crate_input_create_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelInput,
) {
    if let Some(var_68) = &input.app_instance_arn {
        object.key("AppInstanceArn").string(var_68);
    }
    if let Some(var_69) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_69);
    }
    if let Some(var_70) = &input.metadata {
        object.key("Metadata").string(var_70);
    }
    if let Some(var_71) = &input.mode {
        object.key("Mode").string(var_71.as_str());
    }
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72);
    }
    if let Some(var_73) = &input.privacy {
        object.key("Privacy").string(var_73.as_str());
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76);
                object_77.finish();
            }
        }
        array_75.finish();
    }
}

pub fn serialize_structure_crate_input_create_channel_ban_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelBanInput,
) {
    if let Some(var_78) = &input.member_arn {
        object.key("MemberArn").string(var_78);
    }
}

pub fn serialize_structure_crate_input_create_channel_membership_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelMembershipInput,
) {
    if let Some(var_79) = &input.member_arn {
        object.key("MemberArn").string(var_79);
    }
    if let Some(var_80) = &input.r#type {
        object.key("Type").string(var_80.as_str());
    }
}

pub fn serialize_structure_crate_input_create_channel_moderator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelModeratorInput,
) {
    if let Some(var_81) = &input.channel_moderator_arn {
        object.key("ChannelModeratorArn").string(var_81);
    }
}

pub fn serialize_structure_crate_input_create_media_capture_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMediaCapturePipelineInput,
) {
    if let Some(var_82) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_82);
    }
    if let Some(var_83) = &input.sink_arn {
        object.key("SinkArn").string(var_83);
    }
    if let Some(var_84) = &input.sink_type {
        object.key("SinkType").string(var_84.as_str());
    }
    if let Some(var_85) = &input.source_arn {
        object.key("SourceArn").string(var_85);
    }
    if let Some(var_86) = &input.source_type {
        object.key("SourceType").string(var_86.as_str());
    }
}

pub fn serialize_structure_crate_input_create_meeting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingInput,
) {
    if let Some(var_87) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_87);
    }
    if let Some(var_88) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_88);
    }
    if let Some(var_89) = &input.media_region {
        object.key("MediaRegion").string(var_89);
    }
    if let Some(var_90) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_90);
    }
    if let Some(var_91) = &input.notifications_configuration {
        let mut object_92 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_notification_configuration(
            &mut object_92,
            var_91,
        );
        object_92.finish();
    }
    if let Some(var_93) = &input.tags {
        let mut array_94 = object.key("Tags").start_array();
        for item_95 in var_93 {
            {
                let mut object_96 = array_94.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_96, item_95);
                object_96.finish();
            }
        }
        array_94.finish();
    }
}

pub fn serialize_structure_crate_input_create_meeting_dial_out_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingDialOutInput,
) {
    if let Some(var_97) = &input.from_phone_number {
        object.key("FromPhoneNumber").string(var_97);
    }
    if let Some(var_98) = &input.join_token {
        object.key("JoinToken").string(var_98);
    }
    if let Some(var_99) = &input.to_phone_number {
        object.key("ToPhoneNumber").string(var_99);
    }
}

pub fn serialize_structure_crate_input_create_meeting_with_attendees_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingWithAttendeesInput,
) {
    if let Some(var_100) = &input.attendees {
        let mut array_101 = object.key("Attendees").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_103,
                    item_102,
                );
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_104);
    }
    if let Some(var_105) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_105);
    }
    if let Some(var_106) = &input.media_region {
        object.key("MediaRegion").string(var_106);
    }
    if let Some(var_107) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_107);
    }
    if let Some(var_108) = &input.notifications_configuration {
        let mut object_109 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_notification_configuration(
            &mut object_109,
            var_108,
        );
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112);
                object_113.finish();
            }
        }
        array_111.finish();
    }
}

pub fn serialize_structure_crate_input_create_phone_number_order_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePhoneNumberOrderInput,
) {
    if let Some(var_114) = &input.e164_phone_numbers {
        let mut array_115 = object.key("E164PhoneNumbers").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116);
            }
        }
        array_115.finish();
    }
    if let Some(var_117) = &input.product_type {
        object.key("ProductType").string(var_117.as_str());
    }
}

pub fn serialize_structure_crate_input_create_proxy_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProxySessionInput,
) {
    if let Some(var_118) = &input.capabilities {
        let mut array_119 = object.key("Capabilities").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120.as_str());
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.expiry_minutes {
        object.key("ExpiryMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
    if let Some(var_122) = &input.geo_match_level {
        object.key("GeoMatchLevel").string(var_122.as_str());
    }
    if let Some(var_123) = &input.geo_match_params {
        let mut object_124 = object.key("GeoMatchParams").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_match_params(&mut object_124, var_123);
        object_124.finish();
    }
    if let Some(var_125) = &input.name {
        object.key("Name").string(var_125);
    }
    if let Some(var_126) = &input.number_selection_behavior {
        object
            .key("NumberSelectionBehavior")
            .string(var_126.as_str());
    }
    if let Some(var_127) = &input.participant_phone_numbers {
        let mut array_128 = object.key("ParticipantPhoneNumbers").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129);
            }
        }
        array_128.finish();
    }
}

pub fn serialize_structure_crate_input_create_room_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoomInput,
) {
    if let Some(var_130) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_130);
    }
    if let Some(var_131) = &input.name {
        object.key("Name").string(var_131);
    }
}

pub fn serialize_structure_crate_input_create_room_membership_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoomMembershipInput,
) {
    if let Some(var_132) = &input.member_id {
        object.key("MemberId").string(var_132);
    }
    if let Some(var_133) = &input.role {
        object.key("Role").string(var_133.as_str());
    }
}

pub fn serialize_structure_crate_input_create_sip_media_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSipMediaApplicationInput,
) {
    if let Some(var_134) = &input.aws_region {
        object.key("AwsRegion").string(var_134);
    }
    if let Some(var_135) = &input.endpoints {
        let mut array_136 = object.key("Endpoints").start_array();
        for item_137 in var_135 {
            {
                let mut object_138 = array_136.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sip_media_application_endpoint(
                    &mut object_138,
                    item_137,
                );
                object_138.finish();
            }
        }
        array_136.finish();
    }
    if let Some(var_139) = &input.name {
        object.key("Name").string(var_139);
    }
}

pub fn serialize_structure_crate_input_create_sip_media_application_call_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSipMediaApplicationCallInput,
) {
    if let Some(var_140) = &input.from_phone_number {
        object.key("FromPhoneNumber").string(var_140);
    }
    if let Some(var_141) = &input.sip_headers {
        let mut object_142 = object.key("SipHeaders").start_object();
        for (key_143, value_144) in var_141 {
            {
                object_142.key(key_143).string(value_144);
            }
        }
        object_142.finish();
    }
    if let Some(var_145) = &input.to_phone_number {
        object.key("ToPhoneNumber").string(var_145);
    }
}

pub fn serialize_structure_crate_input_create_sip_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSipRuleInput,
) {
    if let Some(var_146) = &input.disabled {
        object.key("Disabled").boolean(*var_146);
    }
    if let Some(var_147) = &input.name {
        object.key("Name").string(var_147);
    }
    if let Some(var_148) = &input.target_applications {
        let mut array_149 = object.key("TargetApplications").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sip_rule_target_application(
                    &mut object_151,
                    item_150,
                );
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.trigger_type {
        object.key("TriggerType").string(var_152.as_str());
    }
    if let Some(var_153) = &input.trigger_value {
        object.key("TriggerValue").string(var_153);
    }
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) {
    if let Some(var_154) = &input.email {
        object.key("Email").string(var_154);
    }
    if let Some(var_155) = &input.user_type {
        object.key("UserType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.username {
        object.key("Username").string(var_156);
    }
}

pub fn serialize_structure_crate_input_create_voice_connector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVoiceConnectorInput,
) {
    if let Some(var_157) = &input.aws_region {
        object.key("AwsRegion").string(var_157.as_str());
    }
    if let Some(var_158) = &input.name {
        object.key("Name").string(var_158);
    }
    if let Some(var_159) = &input.require_encryption {
        object.key("RequireEncryption").boolean(*var_159);
    }
}

pub fn serialize_structure_crate_input_create_voice_connector_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVoiceConnectorGroupInput,
) {
    if let Some(var_160) = &input.name {
        object.key("Name").string(var_160);
    }
    if let Some(var_161) = &input.voice_connector_items {
        let mut array_162 = object.key("VoiceConnectorItems").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_voice_connector_item(
                    &mut object_164,
                    item_163,
                );
                object_164.finish();
            }
        }
        array_162.finish();
    }
}

pub fn serialize_structure_crate_input_delete_voice_connector_termination_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVoiceConnectorTerminationCredentialsInput,
) {
    if let Some(var_165) = &input.usernames {
        let mut array_166 = object.key("Usernames").start_array();
        for item_167 in var_165 {
            {
                array_166.value().string(item_167);
            }
        }
        array_166.finish();
    }
}

pub fn serialize_structure_crate_input_disassociate_phone_numbers_from_voice_connector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePhoneNumbersFromVoiceConnectorInput,
) {
    if let Some(var_168) = &input.e164_phone_numbers {
        let mut array_169 = object.key("E164PhoneNumbers").start_array();
        for item_170 in var_168 {
            {
                array_169.value().string(item_170);
            }
        }
        array_169.finish();
    }
}

pub fn serialize_structure_crate_input_disassociate_phone_numbers_from_voice_connector_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePhoneNumbersFromVoiceConnectorGroupInput,
) {
    if let Some(var_171) = &input.e164_phone_numbers {
        let mut array_172 = object.key("E164PhoneNumbers").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173);
            }
        }
        array_172.finish();
    }
}

pub fn serialize_structure_crate_input_disassociate_signin_delegate_groups_from_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateSigninDelegateGroupsFromAccountInput,
) {
    if let Some(var_174) = &input.group_names {
        let mut array_175 = object.key("GroupNames").start_array();
        for item_176 in var_174 {
            {
                array_175.value().string(item_176);
            }
        }
        array_175.finish();
    }
}

pub fn serialize_structure_crate_input_invite_users_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteUsersInput,
) {
    if let Some(var_177) = &input.user_email_list {
        let mut array_178 = object.key("UserEmailList").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179);
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.user_type {
        object.key("UserType").string(var_180.as_str());
    }
}

pub fn serialize_structure_crate_input_put_app_instance_retention_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAppInstanceRetentionSettingsInput,
) {
    if let Some(var_181) = &input.app_instance_retention_settings {
        let mut object_182 = object.key("AppInstanceRetentionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_app_instance_retention_settings(
            &mut object_182,
            var_181,
        );
        object_182.finish();
    }
}

pub fn serialize_structure_crate_input_put_app_instance_streaming_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAppInstanceStreamingConfigurationsInput,
) {
    if let Some(var_183) = &input.app_instance_streaming_configurations {
        let mut array_184 = object
            .key("AppInstanceStreamingConfigurations")
            .start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_app_instance_streaming_configuration(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
}

pub fn serialize_structure_crate_input_put_events_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEventsConfigurationInput,
) {
    if let Some(var_187) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_187);
    }
    if let Some(var_188) = &input.outbound_events_https_endpoint {
        object.key("OutboundEventsHTTPSEndpoint").string(var_188);
    }
}

pub fn serialize_structure_crate_input_put_retention_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRetentionSettingsInput,
) {
    if let Some(var_189) = &input.retention_settings {
        let mut object_190 = object.key("RetentionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_settings(
            &mut object_190,
            var_189,
        );
        object_190.finish();
    }
}

pub fn serialize_structure_crate_input_put_sip_media_application_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSipMediaApplicationLoggingConfigurationInput,
) {
    if let Some(var_191) = &input.sip_media_application_logging_configuration {
        let mut object_192 = object
            .key("SipMediaApplicationLoggingConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_sip_media_application_logging_configuration(&mut object_192, var_191);
        object_192.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_emergency_calling_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorEmergencyCallingConfigurationInput,
) {
    if let Some(var_193) = &input.emergency_calling_configuration {
        let mut object_194 = object.key("EmergencyCallingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_emergency_calling_configuration(
            &mut object_194,
            var_193,
        );
        object_194.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorLoggingConfigurationInput,
) {
    if let Some(var_195) = &input.logging_configuration {
        let mut object_196 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_196,
            var_195,
        );
        object_196.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_origination_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorOriginationInput,
) {
    if let Some(var_197) = &input.origination {
        let mut object_198 = object.key("Origination").start_object();
        crate::json_ser::serialize_structure_crate_model_origination(&mut object_198, var_197);
        object_198.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_proxy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorProxyInput,
) {
    if let Some(var_199) = &input.default_session_expiry_minutes {
        object.key("DefaultSessionExpiryMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    if let Some(var_200) = &input.disabled {
        object.key("Disabled").boolean(*var_200);
    }
    if let Some(var_201) = &input.fall_back_phone_number {
        object.key("FallBackPhoneNumber").string(var_201);
    }
    if let Some(var_202) = &input.phone_number_pool_countries {
        let mut array_203 = object.key("PhoneNumberPoolCountries").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204);
            }
        }
        array_203.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_streaming_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorStreamingConfigurationInput,
) {
    if let Some(var_205) = &input.streaming_configuration {
        let mut object_206 = object.key("StreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_configuration(
            &mut object_206,
            var_205,
        );
        object_206.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_termination_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorTerminationInput,
) {
    if let Some(var_207) = &input.termination {
        let mut object_208 = object.key("Termination").start_object();
        crate::json_ser::serialize_structure_crate_model_termination(&mut object_208, var_207);
        object_208.finish();
    }
}

pub fn serialize_structure_crate_input_put_voice_connector_termination_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVoiceConnectorTerminationCredentialsInput,
) {
    if let Some(var_209) = &input.credentials {
        let mut array_210 = object.key("Credentials").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_credential(
                    &mut object_212,
                    item_211,
                );
                object_212.finish();
            }
        }
        array_210.finish();
    }
}

pub fn serialize_structure_crate_input_send_channel_message_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendChannelMessageInput,
) {
    if let Some(var_213) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_213);
    }
    if let Some(var_214) = &input.content {
        object.key("Content").string(var_214);
    }
    if let Some(var_215) = &input.metadata {
        object.key("Metadata").string(var_215);
    }
    if let Some(var_216) = &input.persistence {
        object.key("Persistence").string(var_216.as_str());
    }
    if let Some(var_217) = &input.r#type {
        object.key("Type").string(var_217.as_str());
    }
}

pub fn serialize_structure_crate_input_start_meeting_transcription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMeetingTranscriptionInput,
) {
    if let Some(var_218) = &input.transcription_configuration {
        let mut object_219 = object.key("TranscriptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_transcription_configuration(
            &mut object_219,
            var_218,
        );
        object_219.finish();
    }
}

pub fn serialize_structure_crate_input_tag_attendee_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagAttendeeInput,
) {
    if let Some(var_220) = &input.tags {
        let mut array_221 = object.key("Tags").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
}

pub fn serialize_structure_crate_input_tag_meeting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagMeetingInput,
) {
    if let Some(var_224) = &input.tags {
        let mut array_225 = object.key("Tags").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_227, item_226);
                object_227.finish();
            }
        }
        array_225.finish();
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_228) = &input.resource_arn {
        object.key("ResourceARN").string(var_228);
    }
    if let Some(var_229) = &input.tags {
        let mut array_230 = object.key("Tags").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_232, item_231);
                object_232.finish();
            }
        }
        array_230.finish();
    }
}

pub fn serialize_structure_crate_input_untag_attendee_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagAttendeeInput,
) {
    if let Some(var_233) = &input.tag_keys {
        let mut array_234 = object.key("TagKeys").start_array();
        for item_235 in var_233 {
            {
                array_234.value().string(item_235);
            }
        }
        array_234.finish();
    }
}

pub fn serialize_structure_crate_input_untag_meeting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagMeetingInput,
) {
    if let Some(var_236) = &input.tag_keys {
        let mut array_237 = object.key("TagKeys").start_array();
        for item_238 in var_236 {
            {
                array_237.value().string(item_238);
            }
        }
        array_237.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_239) = &input.resource_arn {
        object.key("ResourceARN").string(var_239);
    }
    if let Some(var_240) = &input.tag_keys {
        let mut array_241 = object.key("TagKeys").start_array();
        for item_242 in var_240 {
            {
                array_241.value().string(item_242);
            }
        }
        array_241.finish();
    }
}

pub fn serialize_structure_crate_input_update_account_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountInput,
) {
    if let Some(var_243) = &input.default_license {
        object.key("DefaultLicense").string(var_243.as_str());
    }
    if let Some(var_244) = &input.name {
        object.key("Name").string(var_244);
    }
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) {
    if let Some(var_245) = &input.account_settings {
        let mut object_246 = object.key("AccountSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_account_settings(&mut object_246, var_245);
        object_246.finish();
    }
}

pub fn serialize_structure_crate_input_update_app_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppInstanceInput,
) {
    if let Some(var_247) = &input.metadata {
        object.key("Metadata").string(var_247);
    }
    if let Some(var_248) = &input.name {
        object.key("Name").string(var_248);
    }
}

pub fn serialize_structure_crate_input_update_app_instance_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppInstanceUserInput,
) {
    if let Some(var_249) = &input.metadata {
        object.key("Metadata").string(var_249);
    }
    if let Some(var_250) = &input.name {
        object.key("Name").string(var_250);
    }
}

pub fn serialize_structure_crate_input_update_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) {
    if let Some(var_251) = &input.disabled {
        object.key("Disabled").boolean(*var_251);
    }
}

pub fn serialize_structure_crate_input_update_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelInput,
) {
    if let Some(var_252) = &input.metadata {
        object.key("Metadata").string(var_252);
    }
    if let Some(var_253) = &input.mode {
        object.key("Mode").string(var_253.as_str());
    }
    if let Some(var_254) = &input.name {
        object.key("Name").string(var_254);
    }
}

pub fn serialize_structure_crate_input_update_channel_message_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelMessageInput,
) {
    if let Some(var_255) = &input.content {
        object.key("Content").string(var_255);
    }
    if let Some(var_256) = &input.metadata {
        object.key("Metadata").string(var_256);
    }
}

pub fn serialize_structure_crate_input_update_global_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalSettingsInput,
) {
    if let Some(var_257) = &input.business_calling {
        let mut object_258 = object.key("BusinessCalling").start_object();
        crate::json_ser::serialize_structure_crate_model_business_calling_settings(
            &mut object_258,
            var_257,
        );
        object_258.finish();
    }
    if let Some(var_259) = &input.voice_connector {
        let mut object_260 = object.key("VoiceConnector").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_connector_settings(
            &mut object_260,
            var_259,
        );
        object_260.finish();
    }
}

pub fn serialize_structure_crate_input_update_phone_number_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePhoneNumberInput,
) {
    if let Some(var_261) = &input.calling_name {
        object.key("CallingName").string(var_261);
    }
    if let Some(var_262) = &input.product_type {
        object.key("ProductType").string(var_262.as_str());
    }
}

pub fn serialize_structure_crate_input_update_phone_number_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePhoneNumberSettingsInput,
) {
    if let Some(var_263) = &input.calling_name {
        object.key("CallingName").string(var_263);
    }
}

pub fn serialize_structure_crate_input_update_proxy_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProxySessionInput,
) {
    if let Some(var_264) = &input.capabilities {
        let mut array_265 = object.key("Capabilities").start_array();
        for item_266 in var_264 {
            {
                array_265.value().string(item_266.as_str());
            }
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.expiry_minutes {
        object.key("ExpiryMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_267).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_room_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoomInput,
) {
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268);
    }
}

pub fn serialize_structure_crate_input_update_room_membership_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoomMembershipInput,
) {
    if let Some(var_269) = &input.role {
        object.key("Role").string(var_269.as_str());
    }
}

pub fn serialize_structure_crate_input_update_sip_media_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSipMediaApplicationInput,
) {
    if let Some(var_270) = &input.endpoints {
        let mut array_271 = object.key("Endpoints").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sip_media_application_endpoint(
                    &mut object_273,
                    item_272,
                );
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.name {
        object.key("Name").string(var_274);
    }
}

pub fn serialize_structure_crate_input_update_sip_media_application_call_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSipMediaApplicationCallInput,
) {
    if let Some(var_275) = &input.arguments {
        let mut object_276 = object.key("Arguments").start_object();
        for (key_277, value_278) in var_275 {
            {
                object_276.key(key_277).string(value_278);
            }
        }
        object_276.finish();
    }
}

pub fn serialize_structure_crate_input_update_sip_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSipRuleInput,
) {
    if let Some(var_279) = &input.disabled {
        object.key("Disabled").boolean(*var_279);
    }
    if let Some(var_280) = &input.name {
        object.key("Name").string(var_280);
    }
    if let Some(var_281) = &input.target_applications {
        let mut array_282 = object.key("TargetApplications").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sip_rule_target_application(
                    &mut object_284,
                    item_283,
                );
                object_284.finish();
            }
        }
        array_282.finish();
    }
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) {
    if let Some(var_285) = &input.alexa_for_business_metadata {
        let mut object_286 = object.key("AlexaForBusinessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_alexa_for_business_metadata(
            &mut object_286,
            var_285,
        );
        object_286.finish();
    }
    if let Some(var_287) = &input.license_type {
        object.key("LicenseType").string(var_287.as_str());
    }
    if let Some(var_288) = &input.user_type {
        object.key("UserType").string(var_288.as_str());
    }
}

pub fn serialize_structure_crate_input_update_user_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserSettingsInput,
) {
    if let Some(var_289) = &input.user_settings {
        let mut object_290 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_290, var_289);
        object_290.finish();
    }
}

pub fn serialize_structure_crate_input_update_voice_connector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVoiceConnectorInput,
) {
    if let Some(var_291) = &input.name {
        object.key("Name").string(var_291);
    }
    if let Some(var_292) = &input.require_encryption {
        object.key("RequireEncryption").boolean(*var_292);
    }
}

pub fn serialize_structure_crate_input_update_voice_connector_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVoiceConnectorGroupInput,
) {
    if let Some(var_293) = &input.name {
        object.key("Name").string(var_293);
    }
    if let Some(var_294) = &input.voice_connector_items {
        let mut array_295 = object.key("VoiceConnectorItems").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_voice_connector_item(
                    &mut object_297,
                    item_296,
                );
                object_297.finish();
            }
        }
        array_295.finish();
    }
}

pub fn serialize_structure_crate_model_signin_delegate_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigninDelegateGroup,
) {
    if let Some(var_298) = &input.group_name {
        object.key("GroupName").string(var_298);
    }
}

pub fn serialize_structure_crate_model_create_attendee_request_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAttendeeRequestItem,
) {
    if let Some(var_299) = &input.external_user_id {
        object.key("ExternalUserId").string(var_299);
    }
    if let Some(var_300) = &input.tags {
        let mut array_301 = object.key("Tags").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_303, item_302);
                object_303.finish();
            }
        }
        array_301.finish();
    }
}

pub fn serialize_structure_crate_model_membership_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MembershipItem,
) {
    if let Some(var_304) = &input.member_id {
        object.key("MemberId").string(var_304);
    }
    if let Some(var_305) = &input.role {
        object.key("Role").string(var_305.as_str());
    }
}

pub fn serialize_structure_crate_model_update_phone_number_request_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdatePhoneNumberRequestItem,
) {
    if let Some(var_306) = &input.phone_number_id {
        object.key("PhoneNumberId").string(var_306);
    }
    if let Some(var_307) = &input.product_type {
        object.key("ProductType").string(var_307.as_str());
    }
    if let Some(var_308) = &input.calling_name {
        object.key("CallingName").string(var_308);
    }
}

pub fn serialize_structure_crate_model_update_user_request_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateUserRequestItem,
) {
    if let Some(var_309) = &input.user_id {
        object.key("UserId").string(var_309);
    }
    if let Some(var_310) = &input.license_type {
        object.key("LicenseType").string(var_310.as_str());
    }
    if let Some(var_311) = &input.user_type {
        object.key("UserType").string(var_311.as_str());
    }
    if let Some(var_312) = &input.alexa_for_business_metadata {
        let mut object_313 = object.key("AlexaForBusinessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_alexa_for_business_metadata(
            &mut object_313,
            var_312,
        );
        object_313.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_314) = &input.key {
        object.key("Key").string(var_314);
    }
    if let Some(var_315) = &input.value {
        object.key("Value").string(var_315);
    }
}

pub fn serialize_structure_crate_model_meeting_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeetingNotificationConfiguration,
) {
    if let Some(var_316) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_316);
    }
    if let Some(var_317) = &input.sqs_queue_arn {
        object.key("SqsQueueArn").string(var_317);
    }
}

pub fn serialize_structure_crate_model_geo_match_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoMatchParams,
) {
    if let Some(var_318) = &input.country {
        object.key("Country").string(var_318);
    }
    if let Some(var_319) = &input.area_code {
        object.key("AreaCode").string(var_319);
    }
}

pub fn serialize_structure_crate_model_sip_media_application_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SipMediaApplicationEndpoint,
) {
    if let Some(var_320) = &input.lambda_arn {
        object.key("LambdaArn").string(var_320);
    }
}

pub fn serialize_structure_crate_model_sip_rule_target_application(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SipRuleTargetApplication,
) {
    if let Some(var_321) = &input.sip_media_application_id {
        object.key("SipMediaApplicationId").string(var_321);
    }
    if let Some(var_322) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    if let Some(var_323) = &input.aws_region {
        object.key("AwsRegion").string(var_323);
    }
}

pub fn serialize_structure_crate_model_voice_connector_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceConnectorItem,
) {
    if let Some(var_324) = &input.voice_connector_id {
        object.key("VoiceConnectorId").string(var_324);
    }
    if let Some(var_325) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_325).into()),
        );
    }
}

pub fn serialize_structure_crate_model_app_instance_retention_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppInstanceRetentionSettings,
) {
    if let Some(var_326) = &input.channel_retention_settings {
        let mut object_327 = object.key("ChannelRetentionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_channel_retention_settings(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
}

pub fn serialize_structure_crate_model_app_instance_streaming_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppInstanceStreamingConfiguration,
) {
    if let Some(var_328) = &input.app_instance_data_type {
        object.key("AppInstanceDataType").string(var_328.as_str());
    }
    if let Some(var_329) = &input.resource_arn {
        object.key("ResourceArn").string(var_329);
    }
}

pub fn serialize_structure_crate_model_retention_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionSettings,
) {
    if let Some(var_330) = &input.room_retention_settings {
        let mut object_331 = object.key("RoomRetentionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_room_retention_settings(
            &mut object_331,
            var_330,
        );
        object_331.finish();
    }
    if let Some(var_332) = &input.conversation_retention_settings {
        let mut object_333 = object.key("ConversationRetentionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_retention_settings(
            &mut object_333,
            var_332,
        );
        object_333.finish();
    }
}

pub fn serialize_structure_crate_model_sip_media_application_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SipMediaApplicationLoggingConfiguration,
) {
    if let Some(var_334) = &input.enable_sip_media_application_message_logs {
        object
            .key("EnableSipMediaApplicationMessageLogs")
            .boolean(*var_334);
    }
}

pub fn serialize_structure_crate_model_emergency_calling_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmergencyCallingConfiguration,
) {
    if let Some(var_335) = &input.dnis {
        let mut array_336 = object.key("DNIS").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dnis_emergency_calling_configuration(&mut object_338, item_337);
                object_338.finish();
            }
        }
        array_336.finish();
    }
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) {
    if let Some(var_339) = &input.enable_sip_logs {
        object.key("EnableSIPLogs").boolean(*var_339);
    }
}

pub fn serialize_structure_crate_model_origination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Origination,
) {
    if let Some(var_340) = &input.routes {
        let mut array_341 = object.key("Routes").start_array();
        for item_342 in var_340 {
            {
                let mut object_343 = array_341.value().start_object();
                crate::json_ser::serialize_structure_crate_model_origination_route(
                    &mut object_343,
                    item_342,
                );
                object_343.finish();
            }
        }
        array_341.finish();
    }
    if let Some(var_344) = &input.disabled {
        object.key("Disabled").boolean(*var_344);
    }
}

pub fn serialize_structure_crate_model_streaming_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamingConfiguration,
) {
    if let Some(var_345) = &input.data_retention_in_hours {
        object.key("DataRetentionInHours").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    if let Some(var_346) = &input.disabled {
        object.key("Disabled").boolean(*var_346);
    }
    if let Some(var_347) = &input.streaming_notification_targets {
        let mut array_348 = object.key("StreamingNotificationTargets").start_array();
        for item_349 in var_347 {
            {
                let mut object_350 = array_348.value().start_object();
                crate::json_ser::serialize_structure_crate_model_streaming_notification_target(
                    &mut object_350,
                    item_349,
                );
                object_350.finish();
            }
        }
        array_348.finish();
    }
}

pub fn serialize_structure_crate_model_termination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Termination,
) {
    if let Some(var_351) = &input.cps_limit {
        object.key("CpsLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_351).into()),
        );
    }
    if let Some(var_352) = &input.default_phone_number {
        object.key("DefaultPhoneNumber").string(var_352);
    }
    if let Some(var_353) = &input.calling_regions {
        let mut array_354 = object.key("CallingRegions").start_array();
        for item_355 in var_353 {
            {
                array_354.value().string(item_355);
            }
        }
        array_354.finish();
    }
    if let Some(var_356) = &input.cidr_allowed_list {
        let mut array_357 = object.key("CidrAllowedList").start_array();
        for item_358 in var_356 {
            {
                array_357.value().string(item_358);
            }
        }
        array_357.finish();
    }
    if let Some(var_359) = &input.disabled {
        object.key("Disabled").boolean(*var_359);
    }
}

pub fn serialize_structure_crate_model_credential(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Credential,
) {
    if let Some(var_360) = &input.username {
        object.key("Username").string(var_360);
    }
    if let Some(var_361) = &input.password {
        object.key("Password").string(var_361);
    }
}

pub fn serialize_structure_crate_model_transcription_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptionConfiguration,
) {
    if let Some(var_362) = &input.engine_transcribe_settings {
        let mut object_363 = object.key("EngineTranscribeSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_settings(
            &mut object_363,
            var_362,
        );
        object_363.finish();
    }
    if let Some(var_364) = &input.engine_transcribe_medical_settings {
        let mut object_365 = object.key("EngineTranscribeMedicalSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_medical_settings(
            &mut object_365,
            var_364,
        );
        object_365.finish();
    }
}

pub fn serialize_structure_crate_model_account_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountSettings,
) {
    if let Some(var_366) = &input.disable_remote_control {
        object.key("DisableRemoteControl").boolean(*var_366);
    }
    if let Some(var_367) = &input.enable_dial_out {
        object.key("EnableDialOut").boolean(*var_367);
    }
}

pub fn serialize_structure_crate_model_business_calling_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BusinessCallingSettings,
) {
    if let Some(var_368) = &input.cdr_bucket {
        object.key("CdrBucket").string(var_368);
    }
}

pub fn serialize_structure_crate_model_voice_connector_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceConnectorSettings,
) {
    if let Some(var_369) = &input.cdr_bucket {
        object.key("CdrBucket").string(var_369);
    }
}

pub fn serialize_structure_crate_model_alexa_for_business_metadata(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlexaForBusinessMetadata,
) {
    if let Some(var_370) = &input.is_alexa_for_business_enabled {
        object.key("IsAlexaForBusinessEnabled").boolean(*var_370);
    }
    if let Some(var_371) = &input.alexa_for_business_room_arn {
        object.key("AlexaForBusinessRoomArn").string(var_371);
    }
}

pub fn serialize_structure_crate_model_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_372) = &input.telephony {
        let mut object_373 = object.key("Telephony").start_object();
        crate::json_ser::serialize_structure_crate_model_telephony_settings(
            &mut object_373,
            var_372,
        );
        object_373.finish();
    }
}

pub fn serialize_structure_crate_model_channel_retention_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelRetentionSettings,
) {
    if let Some(var_374) = &input.retention_days {
        object.key("RetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_374).into()),
        );
    }
}

pub fn serialize_structure_crate_model_room_retention_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoomRetentionSettings,
) {
    if let Some(var_375) = &input.retention_days {
        object.key("RetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_375).into()),
        );
    }
}

pub fn serialize_structure_crate_model_conversation_retention_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationRetentionSettings,
) {
    if let Some(var_376) = &input.retention_days {
        object.key("RetentionDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_376).into()),
        );
    }
}

pub fn serialize_structure_crate_model_dnis_emergency_calling_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnisEmergencyCallingConfiguration,
) {
    if let Some(var_377) = &input.emergency_phone_number {
        object.key("EmergencyPhoneNumber").string(var_377);
    }
    if let Some(var_378) = &input.test_phone_number {
        object.key("TestPhoneNumber").string(var_378);
    }
    if let Some(var_379) = &input.calling_country {
        object.key("CallingCountry").string(var_379);
    }
}

pub fn serialize_structure_crate_model_origination_route(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OriginationRoute,
) {
    if let Some(var_380) = &input.host {
        object.key("Host").string(var_380);
    }
    if let Some(var_381) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_381).into()),
        );
    }
    if let Some(var_382) = &input.protocol {
        object.key("Protocol").string(var_382.as_str());
    }
    if let Some(var_383) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_383).into()),
        );
    }
    if let Some(var_384) = &input.weight {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_384).into()),
        );
    }
}

pub fn serialize_structure_crate_model_streaming_notification_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamingNotificationTarget,
) {
    if let Some(var_385) = &input.notification_target {
        object.key("NotificationTarget").string(var_385.as_str());
    }
}

pub fn serialize_structure_crate_model_engine_transcribe_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeSettings,
) {
    if let Some(var_386) = &input.language_code {
        object.key("LanguageCode").string(var_386.as_str());
    }
    if let Some(var_387) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_387.as_str());
    }
    if let Some(var_388) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_388);
    }
    if let Some(var_389) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_389);
    }
    if let Some(var_390) = &input.region {
        object.key("Region").string(var_390.as_str());
    }
}

pub fn serialize_structure_crate_model_engine_transcribe_medical_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeMedicalSettings,
) {
    if let Some(var_391) = &input.language_code {
        object.key("LanguageCode").string(var_391.as_str());
    }
    if let Some(var_392) = &input.specialty {
        object.key("Specialty").string(var_392.as_str());
    }
    if let Some(var_393) = &input.r#type {
        object.key("Type").string(var_393.as_str());
    }
    if let Some(var_394) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_394);
    }
    if let Some(var_395) = &input.region {
        object.key("Region").string(var_395.as_str());
    }
}

pub fn serialize_structure_crate_model_telephony_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TelephonySettings,
) {
    if let Some(var_396) = &input.inbound_calling {
        object.key("InboundCalling").boolean(*var_396);
    }
    if let Some(var_397) = &input.outbound_calling {
        object.key("OutboundCalling").boolean(*var_397);
    }
    if let Some(var_398) = &input.sms {
        object.key("SMS").boolean(*var_398);
    }
}
