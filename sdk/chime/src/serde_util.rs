// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn account_correct_errors(mut builder: crate::types::builders::AccountBuilder) -> crate::types::builders::AccountBuilder {
    if builder.aws_account_id.is_none() {
        builder.aws_account_id = Some(Default::default())
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_configuration_correct_errors(
    mut builder: crate::types::builders::StreamingConfigurationBuilder,
) -> crate::types::builders::StreamingConfigurationBuilder {
    if builder.data_retention_in_hours.is_none() {
        builder.data_retention_in_hours = Some(Default::default())
    }
    builder
}

pub(crate) fn user_correct_errors(mut builder: crate::types::builders::UserBuilder) -> crate::types::builders::UserBuilder {
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn user_settings_correct_errors(mut builder: crate::types::builders::UserSettingsBuilder) -> crate::types::builders::UserSettingsBuilder {
    if builder.telephony.is_none() {
        builder.telephony = {
            let builder = crate::types::builders::TelephonySettingsBuilder::default();
            crate::serde_util::telephony_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn app_instance_streaming_configuration_correct_errors(
    mut builder: crate::types::builders::AppInstanceStreamingConfigurationBuilder,
) -> crate::types::builders::AppInstanceStreamingConfigurationBuilder {
    if builder.app_instance_data_type.is_none() {
        builder.app_instance_data_type = "no value was set".parse::<crate::types::AppInstanceDataType>().ok()
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn geo_match_params_correct_errors(
    mut builder: crate::types::builders::GeoMatchParamsBuilder,
) -> crate::types::builders::GeoMatchParamsBuilder {
    if builder.country.is_none() {
        builder.country = Some(Default::default())
    }
    if builder.area_code.is_none() {
        builder.area_code = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn telephony_settings_correct_errors(
    mut builder: crate::types::builders::TelephonySettingsBuilder,
) -> crate::types::builders::TelephonySettingsBuilder {
    if builder.inbound_calling.is_none() {
        builder.inbound_calling = Some(Default::default())
    }
    if builder.outbound_calling.is_none() {
        builder.outbound_calling = Some(Default::default())
    }
    if builder.sms.is_none() {
        builder.sms = Some(Default::default())
    }
    builder
}

pub(crate) fn artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::ArtifactsConfigurationBuilder,
) -> crate::types::builders::ArtifactsConfigurationBuilder {
    if builder.audio.is_none() {
        builder.audio = {
            let builder = crate::types::builders::AudioArtifactsConfigurationBuilder::default();
            crate::serde_util::audio_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.video.is_none() {
        builder.video = {
            let builder = crate::types::builders::VideoArtifactsConfigurationBuilder::default();
            crate::serde_util::video_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::ContentArtifactsConfigurationBuilder::default();
            crate::serde_util::content_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn dnis_emergency_calling_configuration_correct_errors(
    mut builder: crate::types::builders::DnisEmergencyCallingConfigurationBuilder,
) -> crate::types::builders::DnisEmergencyCallingConfigurationBuilder {
    if builder.emergency_phone_number.is_none() {
        builder.emergency_phone_number = Some(Default::default())
    }
    if builder.calling_country.is_none() {
        builder.calling_country = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_notification_target_correct_errors(
    mut builder: crate::types::builders::StreamingNotificationTargetBuilder,
) -> crate::types::builders::StreamingNotificationTargetBuilder {
    if builder.notification_target.is_none() {
        builder.notification_target = "no value was set".parse::<crate::types::NotificationTarget>().ok()
    }
    builder
}

pub(crate) fn voice_connector_item_correct_errors(
    mut builder: crate::types::builders::VoiceConnectorItemBuilder,
) -> crate::types::builders::VoiceConnectorItemBuilder {
    if builder.voice_connector_id.is_none() {
        builder.voice_connector_id = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::AudioArtifactsConfigurationBuilder,
) -> crate::types::builders::AudioArtifactsConfigurationBuilder {
    if builder.mux_type.is_none() {
        builder.mux_type = "no value was set".parse::<crate::types::AudioMuxType>().ok()
    }
    builder
}

pub(crate) fn content_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::ContentArtifactsConfigurationBuilder,
) -> crate::types::builders::ContentArtifactsConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsState>().ok()
    }
    builder
}

pub(crate) fn video_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::VideoArtifactsConfigurationBuilder,
) -> crate::types::builders::VideoArtifactsConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsState>().ok()
    }
    builder
}
