// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the artifacts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArtifactsConfiguration {
    /// <p>The configuration for the audio artifacts.</p>
    pub audio: ::std::option::Option<crate::types::AudioArtifactsConfiguration>,
    /// <p>The configuration for the video artifacts.</p>
    pub video: ::std::option::Option<crate::types::VideoArtifactsConfiguration>,
    /// <p>The configuration for the content artifacts.</p>
    pub content: ::std::option::Option<crate::types::ContentArtifactsConfiguration>,
}
impl ArtifactsConfiguration {
    /// <p>The configuration for the audio artifacts.</p>
    pub fn audio(&self) -> ::std::option::Option<&crate::types::AudioArtifactsConfiguration> {
        self.audio.as_ref()
    }
    /// <p>The configuration for the video artifacts.</p>
    pub fn video(&self) -> ::std::option::Option<&crate::types::VideoArtifactsConfiguration> {
        self.video.as_ref()
    }
    /// <p>The configuration for the content artifacts.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::ContentArtifactsConfiguration> {
        self.content.as_ref()
    }
}
impl ArtifactsConfiguration {
    /// Creates a new builder-style object to manufacture [`ArtifactsConfiguration`](crate::types::ArtifactsConfiguration).
    pub fn builder() -> crate::types::builders::ArtifactsConfigurationBuilder {
        crate::types::builders::ArtifactsConfigurationBuilder::default()
    }
}

/// A builder for [`ArtifactsConfiguration`](crate::types::ArtifactsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ArtifactsConfigurationBuilder {
    pub(crate) audio: ::std::option::Option<crate::types::AudioArtifactsConfiguration>,
    pub(crate) video: ::std::option::Option<crate::types::VideoArtifactsConfiguration>,
    pub(crate) content: ::std::option::Option<crate::types::ContentArtifactsConfiguration>,
}
impl ArtifactsConfigurationBuilder {
    /// <p>The configuration for the audio artifacts.</p>
    /// This field is required.
    pub fn audio(mut self, input: crate::types::AudioArtifactsConfiguration) -> Self {
        self.audio = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the audio artifacts.</p>
    pub fn set_audio(mut self, input: ::std::option::Option<crate::types::AudioArtifactsConfiguration>) -> Self {
        self.audio = input;
        self
    }
    /// <p>The configuration for the audio artifacts.</p>
    pub fn get_audio(&self) -> &::std::option::Option<crate::types::AudioArtifactsConfiguration> {
        &self.audio
    }
    /// <p>The configuration for the video artifacts.</p>
    /// This field is required.
    pub fn video(mut self, input: crate::types::VideoArtifactsConfiguration) -> Self {
        self.video = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the video artifacts.</p>
    pub fn set_video(mut self, input: ::std::option::Option<crate::types::VideoArtifactsConfiguration>) -> Self {
        self.video = input;
        self
    }
    /// <p>The configuration for the video artifacts.</p>
    pub fn get_video(&self) -> &::std::option::Option<crate::types::VideoArtifactsConfiguration> {
        &self.video
    }
    /// <p>The configuration for the content artifacts.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::ContentArtifactsConfiguration) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the content artifacts.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::ContentArtifactsConfiguration>) -> Self {
        self.content = input;
        self
    }
    /// <p>The configuration for the content artifacts.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::ContentArtifactsConfiguration> {
        &self.content
    }
    /// Consumes the builder and constructs a [`ArtifactsConfiguration`](crate::types::ArtifactsConfiguration).
    pub fn build(self) -> crate::types::ArtifactsConfiguration {
        crate::types::ArtifactsConfiguration {
            audio: self.audio,
            video: self.video,
            content: self.content,
        }
    }
}
