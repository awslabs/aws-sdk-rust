// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of errors returned when errors are encountered during the <code>BatchSuspendUser</code>, <code>BatchUnsuspendUser</code>, or <code>BatchUpdateUser</code> actions. This includes user IDs, error codes, and error messages.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserError {
    /// <p>The user ID for which the action failed.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The error code.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::ErrorCode>,
    /// <p>The error message.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl UserError {
    /// <p>The user ID for which the action failed.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The error code.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::ErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The error message.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl UserError {
    /// Creates a new builder-style object to manufacture [`UserError`](crate::types::UserError).
    pub fn builder() -> crate::types::builders::UserErrorBuilder {
        crate::types::builders::UserErrorBuilder::default()
    }
}

/// A builder for [`UserError`](crate::types::UserError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserErrorBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<crate::types::ErrorCode>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl UserErrorBuilder {
    /// <p>The user ID for which the action failed.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The user ID for which the action failed.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The error code.</p>
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>The error code.</p>
    pub fn set_error_code(mut self, input: std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error message.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`UserError`](crate::types::UserError).
    pub fn build(self) -> crate::types::UserError {
        crate::types::UserError {
            user_id: self.user_id,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
