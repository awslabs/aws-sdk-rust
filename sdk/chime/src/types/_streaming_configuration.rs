// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingConfiguration {
    /// <p>The retention period, in hours, for the Amazon Kinesis data.</p>
    pub data_retention_in_hours: i32,
    /// <p>When true, media streaming to Amazon Kinesis is turned off.</p>
    pub disabled: ::std::option::Option<bool>,
    /// <p>The streaming notification targets.</p>
    pub streaming_notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::StreamingNotificationTarget>>,
}
impl StreamingConfiguration {
    /// <p>The retention period, in hours, for the Amazon Kinesis data.</p>
    pub fn data_retention_in_hours(&self) -> i32 {
        self.data_retention_in_hours
    }
    /// <p>When true, media streaming to Amazon Kinesis is turned off.</p>
    pub fn disabled(&self) -> ::std::option::Option<bool> {
        self.disabled
    }
    /// <p>The streaming notification targets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.streaming_notification_targets.is_none()`.
    pub fn streaming_notification_targets(&self) -> &[crate::types::StreamingNotificationTarget] {
        self.streaming_notification_targets.as_deref().unwrap_or_default()
    }
}
impl StreamingConfiguration {
    /// Creates a new builder-style object to manufacture [`StreamingConfiguration`](crate::types::StreamingConfiguration).
    pub fn builder() -> crate::types::builders::StreamingConfigurationBuilder {
        crate::types::builders::StreamingConfigurationBuilder::default()
    }
}

/// A builder for [`StreamingConfiguration`](crate::types::StreamingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StreamingConfigurationBuilder {
    pub(crate) data_retention_in_hours: ::std::option::Option<i32>,
    pub(crate) disabled: ::std::option::Option<bool>,
    pub(crate) streaming_notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::StreamingNotificationTarget>>,
}
impl StreamingConfigurationBuilder {
    /// <p>The retention period, in hours, for the Amazon Kinesis data.</p>
    /// This field is required.
    pub fn data_retention_in_hours(mut self, input: i32) -> Self {
        self.data_retention_in_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period, in hours, for the Amazon Kinesis data.</p>
    pub fn set_data_retention_in_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_retention_in_hours = input;
        self
    }
    /// <p>The retention period, in hours, for the Amazon Kinesis data.</p>
    pub fn get_data_retention_in_hours(&self) -> &::std::option::Option<i32> {
        &self.data_retention_in_hours
    }
    /// <p>When true, media streaming to Amazon Kinesis is turned off.</p>
    pub fn disabled(mut self, input: bool) -> Self {
        self.disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, media streaming to Amazon Kinesis is turned off.</p>
    pub fn set_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disabled = input;
        self
    }
    /// <p>When true, media streaming to Amazon Kinesis is turned off.</p>
    pub fn get_disabled(&self) -> &::std::option::Option<bool> {
        &self.disabled
    }
    /// Appends an item to `streaming_notification_targets`.
    ///
    /// To override the contents of this collection use [`set_streaming_notification_targets`](Self::set_streaming_notification_targets).
    ///
    /// <p>The streaming notification targets.</p>
    pub fn streaming_notification_targets(mut self, input: crate::types::StreamingNotificationTarget) -> Self {
        let mut v = self.streaming_notification_targets.unwrap_or_default();
        v.push(input);
        self.streaming_notification_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The streaming notification targets.</p>
    pub fn set_streaming_notification_targets(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StreamingNotificationTarget>>,
    ) -> Self {
        self.streaming_notification_targets = input;
        self
    }
    /// <p>The streaming notification targets.</p>
    pub fn get_streaming_notification_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamingNotificationTarget>> {
        &self.streaming_notification_targets
    }
    /// Consumes the builder and constructs a [`StreamingConfiguration`](crate::types::StreamingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`data_retention_in_hours`](crate::types::builders::StreamingConfigurationBuilder::data_retention_in_hours)
    pub fn build(self) -> ::std::result::Result<crate::types::StreamingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StreamingConfiguration {
            data_retention_in_hours: self.data_retention_in_hours.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_retention_in_hours",
                    "data_retention_in_hours was not specified but it is required when building StreamingConfiguration",
                )
            })?,
            disabled: self.disabled,
            streaming_notification_targets: self.streaming_notification_targets,
        })
    }
}
