// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of the details of a <code>ChannelModerator</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChannelModeratorSummary {
    /// <p>The data for a moderator.</p>
    #[doc(hidden)]
    pub moderator: std::option::Option<crate::types::Identity>,
}
impl ChannelModeratorSummary {
    /// <p>The data for a moderator.</p>
    pub fn moderator(&self) -> std::option::Option<&crate::types::Identity> {
        self.moderator.as_ref()
    }
}
impl ChannelModeratorSummary {
    /// Creates a new builder-style object to manufacture [`ChannelModeratorSummary`](crate::types::ChannelModeratorSummary).
    pub fn builder() -> crate::types::builders::ChannelModeratorSummaryBuilder {
        crate::types::builders::ChannelModeratorSummaryBuilder::default()
    }
}

/// A builder for [`ChannelModeratorSummary`](crate::types::ChannelModeratorSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChannelModeratorSummaryBuilder {
    pub(crate) moderator: std::option::Option<crate::types::Identity>,
}
impl ChannelModeratorSummaryBuilder {
    /// <p>The data for a moderator.</p>
    pub fn moderator(mut self, input: crate::types::Identity) -> Self {
        self.moderator = Some(input);
        self
    }
    /// <p>The data for a moderator.</p>
    pub fn set_moderator(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.moderator = input;
        self
    }
    /// Consumes the builder and constructs a [`ChannelModeratorSummary`](crate::types::ChannelModeratorSummary).
    pub fn build(self) -> crate::types::ChannelModeratorSummary {
        crate::types::ChannelModeratorSummary {
            moderator: self.moderator,
        }
    }
}
