// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The country and area code for a proxy phone number in a proxy phone session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeoMatchParams {
    /// <p>The country.</p>
    pub country: ::std::string::String,
    /// <p>The area code.</p>
    pub area_code: ::std::string::String,
}
impl GeoMatchParams {
    /// <p>The country.</p>
    pub fn country(&self) -> &str {
        use std::ops::Deref;
        self.country.deref()
    }
    /// <p>The area code.</p>
    pub fn area_code(&self) -> &str {
        use std::ops::Deref;
        self.area_code.deref()
    }
}
impl GeoMatchParams {
    /// Creates a new builder-style object to manufacture [`GeoMatchParams`](crate::types::GeoMatchParams).
    pub fn builder() -> crate::types::builders::GeoMatchParamsBuilder {
        crate::types::builders::GeoMatchParamsBuilder::default()
    }
}

/// A builder for [`GeoMatchParams`](crate::types::GeoMatchParams).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeoMatchParamsBuilder {
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) area_code: ::std::option::Option<::std::string::String>,
}
impl GeoMatchParamsBuilder {
    /// <p>The country.</p>
    /// This field is required.
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The area code.</p>
    /// This field is required.
    pub fn area_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.area_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The area code.</p>
    pub fn set_area_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.area_code = input;
        self
    }
    /// <p>The area code.</p>
    pub fn get_area_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.area_code
    }
    /// Consumes the builder and constructs a [`GeoMatchParams`](crate::types::GeoMatchParams).
    /// This method will fail if any of the following fields are not set:
    /// - [`country`](crate::types::builders::GeoMatchParamsBuilder::country)
    /// - [`area_code`](crate::types::builders::GeoMatchParamsBuilder::area_code)
    pub fn build(self) -> ::std::result::Result<crate::types::GeoMatchParams, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeoMatchParams {
            country: self.country.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country",
                    "country was not specified but it is required when building GeoMatchParams",
                )
            })?,
            area_code: self.area_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "area_code",
                    "area_code was not specified but it is required when building GeoMatchParams",
                )
            })?,
        })
    }
}
