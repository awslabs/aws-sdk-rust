// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an <code>AppInstance</code>, an instance of an Amazon Chime SDK messaging application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AppInstance {
    /// <p>The ARN of the messaging instance.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
    /// <p>The name of an <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The metadata of an <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
    /// <p>The time at which an <code>AppInstance</code> was created. In epoch milliseconds.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time an <code>AppInstance</code> was last updated. In epoch milliseconds.</p>
    #[doc(hidden)]
    pub last_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl AppInstance {
    /// <p>The ARN of the messaging instance.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
    /// <p>The name of an <code>AppInstance</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The metadata of an <code>AppInstance</code>.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The time at which an <code>AppInstance</code> was created. In epoch milliseconds.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time an <code>AppInstance</code> was last updated. In epoch milliseconds.</p>
    pub fn last_updated_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
}
impl std::fmt::Debug for AppInstance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AppInstance");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.finish()
    }
}
impl AppInstance {
    /// Creates a new builder-style object to manufacture [`AppInstance`](crate::types::AppInstance).
    pub fn builder() -> crate::types::builders::AppInstanceBuilder {
        crate::types::builders::AppInstanceBuilder::default()
    }
}

/// A builder for [`AppInstance`](crate::types::AppInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AppInstanceBuilder {
    pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<std::string::String>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl AppInstanceBuilder {
    /// <p>The ARN of the messaging instance.</p>
    pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_instance_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the messaging instance.</p>
    pub fn set_app_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_instance_arn = input;
        self
    }
    /// <p>The name of an <code>AppInstance</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of an <code>AppInstance</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The metadata of an <code>AppInstance</code>.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>The metadata of an <code>AppInstance</code>.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The time at which an <code>AppInstance</code> was created. In epoch milliseconds.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time at which an <code>AppInstance</code> was created. In epoch milliseconds.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time an <code>AppInstance</code> was last updated. In epoch milliseconds.</p>
    pub fn last_updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = Some(input);
        self
    }
    /// <p>The time an <code>AppInstance</code> was last updated. In epoch milliseconds.</p>
    pub fn set_last_updated_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`AppInstance`](crate::types::AppInstance).
    pub fn build(self) -> crate::types::AppInstance {
        crate::types::AppInstance {
            app_instance_arn: self.app_instance_arn,
            name: self.name,
            metadata: self.metadata,
            created_timestamp: self.created_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
        }
    }
}
impl std::fmt::Debug for AppInstanceBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AppInstanceBuilder");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.finish()
    }
}
