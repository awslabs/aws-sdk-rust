// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A validated address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Address {
    /// <p>The address street, such as <code>8th Avenue</code>.</p>
    #[doc(hidden)]
    pub street_name: std::option::Option<std::string::String>,
    /// <p>The address suffix, such as the <code>N</code> in <code>8th Avenue N</code>.</p>
    #[doc(hidden)]
    pub street_suffix: std::option::Option<std::string::String>,
    /// <p>An address suffix location, such as the <code>S. Unit A</code> in <code>Central Park S. Unit A</code>.</p>
    #[doc(hidden)]
    pub post_directional: std::option::Option<std::string::String>,
    /// <p>An address prefix location, such as the <code>N</code> in <code>N. Third St.</code>.</p>
    #[doc(hidden)]
    pub pre_directional: std::option::Option<std::string::String>,
    /// <p>The numeric portion of an address.</p>
    #[doc(hidden)]
    pub street_number: std::option::Option<std::string::String>,
    /// <p>The city of an address.</p>
    #[doc(hidden)]
    pub city: std::option::Option<std::string::String>,
    /// <p>The state of an address.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The postal code of an address.</p>
    #[doc(hidden)]
    pub postal_code: std::option::Option<std::string::String>,
    /// <p>The Zip + 4 or postal code + 4 of an address.</p>
    #[doc(hidden)]
    pub postal_code_plus4: std::option::Option<std::string::String>,
    /// <p>The country of an address. </p>
    #[doc(hidden)]
    pub country: std::option::Option<std::string::String>,
}
impl Address {
    /// <p>The address street, such as <code>8th Avenue</code>.</p>
    pub fn street_name(&self) -> std::option::Option<&str> {
        self.street_name.as_deref()
    }
    /// <p>The address suffix, such as the <code>N</code> in <code>8th Avenue N</code>.</p>
    pub fn street_suffix(&self) -> std::option::Option<&str> {
        self.street_suffix.as_deref()
    }
    /// <p>An address suffix location, such as the <code>S. Unit A</code> in <code>Central Park S. Unit A</code>.</p>
    pub fn post_directional(&self) -> std::option::Option<&str> {
        self.post_directional.as_deref()
    }
    /// <p>An address prefix location, such as the <code>N</code> in <code>N. Third St.</code>.</p>
    pub fn pre_directional(&self) -> std::option::Option<&str> {
        self.pre_directional.as_deref()
    }
    /// <p>The numeric portion of an address.</p>
    pub fn street_number(&self) -> std::option::Option<&str> {
        self.street_number.as_deref()
    }
    /// <p>The city of an address.</p>
    pub fn city(&self) -> std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The state of an address.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The postal code of an address.</p>
    pub fn postal_code(&self) -> std::option::Option<&str> {
        self.postal_code.as_deref()
    }
    /// <p>The Zip + 4 or postal code + 4 of an address.</p>
    pub fn postal_code_plus4(&self) -> std::option::Option<&str> {
        self.postal_code_plus4.as_deref()
    }
    /// <p>The country of an address. </p>
    pub fn country(&self) -> std::option::Option<&str> {
        self.country.as_deref()
    }
}
impl std::fmt::Debug for Address {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Address");
        formatter.field("street_name", &"*** Sensitive Data Redacted ***");
        formatter.field("street_suffix", &"*** Sensitive Data Redacted ***");
        formatter.field("post_directional", &"*** Sensitive Data Redacted ***");
        formatter.field("pre_directional", &"*** Sensitive Data Redacted ***");
        formatter.field("street_number", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_plus4", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Address {
    /// Creates a new builder-style object to manufacture [`Address`](crate::types::Address).
    pub fn builder() -> crate::types::builders::AddressBuilder {
        crate::types::builders::AddressBuilder::default()
    }
}

/// A builder for [`Address`](crate::types::Address).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AddressBuilder {
    pub(crate) street_name: std::option::Option<std::string::String>,
    pub(crate) street_suffix: std::option::Option<std::string::String>,
    pub(crate) post_directional: std::option::Option<std::string::String>,
    pub(crate) pre_directional: std::option::Option<std::string::String>,
    pub(crate) street_number: std::option::Option<std::string::String>,
    pub(crate) city: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) postal_code: std::option::Option<std::string::String>,
    pub(crate) postal_code_plus4: std::option::Option<std::string::String>,
    pub(crate) country: std::option::Option<std::string::String>,
}
impl AddressBuilder {
    /// <p>The address street, such as <code>8th Avenue</code>.</p>
    pub fn street_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.street_name = Some(input.into());
        self
    }
    /// <p>The address street, such as <code>8th Avenue</code>.</p>
    pub fn set_street_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street_name = input;
        self
    }
    /// <p>The address suffix, such as the <code>N</code> in <code>8th Avenue N</code>.</p>
    pub fn street_suffix(mut self, input: impl Into<std::string::String>) -> Self {
        self.street_suffix = Some(input.into());
        self
    }
    /// <p>The address suffix, such as the <code>N</code> in <code>8th Avenue N</code>.</p>
    pub fn set_street_suffix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street_suffix = input;
        self
    }
    /// <p>An address suffix location, such as the <code>S. Unit A</code> in <code>Central Park S. Unit A</code>.</p>
    pub fn post_directional(mut self, input: impl Into<std::string::String>) -> Self {
        self.post_directional = Some(input.into());
        self
    }
    /// <p>An address suffix location, such as the <code>S. Unit A</code> in <code>Central Park S. Unit A</code>.</p>
    pub fn set_post_directional(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.post_directional = input;
        self
    }
    /// <p>An address prefix location, such as the <code>N</code> in <code>N. Third St.</code>.</p>
    pub fn pre_directional(mut self, input: impl Into<std::string::String>) -> Self {
        self.pre_directional = Some(input.into());
        self
    }
    /// <p>An address prefix location, such as the <code>N</code> in <code>N. Third St.</code>.</p>
    pub fn set_pre_directional(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pre_directional = input;
        self
    }
    /// <p>The numeric portion of an address.</p>
    pub fn street_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.street_number = Some(input.into());
        self
    }
    /// <p>The numeric portion of an address.</p>
    pub fn set_street_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.street_number = input;
        self
    }
    /// <p>The city of an address.</p>
    pub fn city(mut self, input: impl Into<std::string::String>) -> Self {
        self.city = Some(input.into());
        self
    }
    /// <p>The city of an address.</p>
    pub fn set_city(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The state of an address.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of an address.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The postal code of an address.</p>
    pub fn postal_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.postal_code = Some(input.into());
        self
    }
    /// <p>The postal code of an address.</p>
    pub fn set_postal_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The Zip + 4 or postal code + 4 of an address.</p>
    pub fn postal_code_plus4(mut self, input: impl Into<std::string::String>) -> Self {
        self.postal_code_plus4 = Some(input.into());
        self
    }
    /// <p>The Zip + 4 or postal code + 4 of an address.</p>
    pub fn set_postal_code_plus4(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.postal_code_plus4 = input;
        self
    }
    /// <p>The country of an address. </p>
    pub fn country(mut self, input: impl Into<std::string::String>) -> Self {
        self.country = Some(input.into());
        self
    }
    /// <p>The country of an address. </p>
    pub fn set_country(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// Consumes the builder and constructs a [`Address`](crate::types::Address).
    pub fn build(self) -> crate::types::Address {
        crate::types::Address {
            street_name: self.street_name,
            street_suffix: self.street_suffix,
            post_directional: self.post_directional,
            pre_directional: self.pre_directional,
            street_number: self.street_number,
            city: self.city,
            state: self.state,
            postal_code: self.postal_code,
            postal_code_plus4: self.postal_code_plus4,
            country: self.country,
        }
    }
}
impl std::fmt::Debug for AddressBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddressBuilder");
        formatter.field("street_name", &"*** Sensitive Data Redacted ***");
        formatter.field("street_suffix", &"*** Sensitive Data Redacted ***");
        formatter.field("post_directional", &"*** Sensitive Data Redacted ***");
        formatter.field("pre_directional", &"*** Sensitive Data Redacted ***");
        formatter.field("street_number", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code_plus4", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
